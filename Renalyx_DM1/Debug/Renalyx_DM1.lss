
Renalyx_DM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00026364  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000014dc  20070000  000a6364  00040000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00001e88  200714dc  000a7840  000414dc  2**2
                  ALLOC
  3 .stack        00002004  20073364  000a96c8  000414dc  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000414dc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00041505  2**0
                  CONTENTS, READONLY
  6 .debug_info   00057284  00000000  00000000  0004155e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000a365  00000000  00000000  000987e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00010d57  00000000  00000000  000a2b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002268  00000000  00000000  000b389e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001e28  00000000  00000000  000b5b06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0003535f  00000000  00000000  000b792e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005d318  00000000  00000000  000ecc8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000746c7  00000000  00000000  00149fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00008a88  00000000  00000000  001be66c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20075368 	.word	0x20075368
   80004:	00098ff5 	.word	0x00098ff5
   80008:	00098fed 	.word	0x00098fed
   8000c:	00098fed 	.word	0x00098fed
   80010:	00098fed 	.word	0x00098fed
   80014:	00098fed 	.word	0x00098fed
   80018:	00098fed 	.word	0x00098fed
	...
   8002c:	00098fed 	.word	0x00098fed
   80030:	00098fed 	.word	0x00098fed
   80034:	00000000 	.word	0x00000000
   80038:	00098fed 	.word	0x00098fed
   8003c:	00095001 	.word	0x00095001
   80040:	00098fed 	.word	0x00098fed
   80044:	00098fed 	.word	0x00098fed
   80048:	00098fed 	.word	0x00098fed
   8004c:	00098fed 	.word	0x00098fed
   80050:	00098fed 	.word	0x00098fed
   80054:	00098fed 	.word	0x00098fed
   80058:	00098fed 	.word	0x00098fed
   8005c:	00098fed 	.word	0x00098fed
   80060:	00094f49 	.word	0x00094f49
   80064:	00098fed 	.word	0x00098fed
   80068:	00000000 	.word	0x00000000
   8006c:	0009882d 	.word	0x0009882d
   80070:	00098845 	.word	0x00098845
   80074:	0009885d 	.word	0x0009885d
   80078:	00098875 	.word	0x00098875
	...
   80084:	00098fed 	.word	0x00098fed
   80088:	00098fed 	.word	0x00098fed
   8008c:	00098fed 	.word	0x00098fed
   80090:	00098fed 	.word	0x00098fed
   80094:	00098fed 	.word	0x00098fed
   80098:	00098fed 	.word	0x00098fed
   8009c:	00098fed 	.word	0x00098fed
   800a0:	00098fed 	.word	0x00098fed
   800a4:	00000000 	.word	0x00000000
   800a8:	00098fed 	.word	0x00098fed
   800ac:	00094f85 	.word	0x00094f85
   800b0:	00099e8d 	.word	0x00099e8d
   800b4:	00098fed 	.word	0x00098fed
   800b8:	00094fdd 	.word	0x00094fdd
   800bc:	00098fed 	.word	0x00098fed
   800c0:	00098fed 	.word	0x00098fed
   800c4:	00094fb9 	.word	0x00094fb9
   800c8:	00098fed 	.word	0x00098fed
   800cc:	00098fed 	.word	0x00098fed
   800d0:	00098fed 	.word	0x00098fed
   800d4:	00098fed 	.word	0x00098fed
   800d8:	00098fed 	.word	0x00098fed
   800dc:	00098fed 	.word	0x00098fed
   800e0:	00098fed 	.word	0x00098fed
   800e4:	00098fed 	.word	0x00098fed
   800e8:	00098fed 	.word	0x00098fed
   800ec:	00094185 	.word	0x00094185
   800f0:	00098fed 	.word	0x00098fed

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200714dc 	.word	0x200714dc
   80110:	00000000 	.word	0x00000000
   80114:	000a6364 	.word	0x000a6364

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	200714e0 	.word	0x200714e0
   80144:	000a6364 	.word	0x000a6364
   80148:	000a6364 	.word	0x000a6364
   8014c:	00000000 	.word	0x00000000

00080150 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80150:	b580      	push	{r7, lr}
   80152:	b082      	sub	sp, #8
   80154:	af00      	add	r7, sp, #0
   80156:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80158:	687b      	ldr	r3, [r7, #4]
   8015a:	2b07      	cmp	r3, #7
   8015c:	d831      	bhi.n	801c2 <osc_enable+0x72>
   8015e:	a201      	add	r2, pc, #4	; (adr r2, 80164 <osc_enable+0x14>)
   80160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80164:	000801c1 	.word	0x000801c1
   80168:	00080185 	.word	0x00080185
   8016c:	0008018d 	.word	0x0008018d
   80170:	00080195 	.word	0x00080195
   80174:	0008019d 	.word	0x0008019d
   80178:	000801a5 	.word	0x000801a5
   8017c:	000801ad 	.word	0x000801ad
   80180:	000801b7 	.word	0x000801b7
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80184:	2000      	movs	r0, #0
   80186:	4b11      	ldr	r3, [pc, #68]	; (801cc <osc_enable+0x7c>)
   80188:	4798      	blx	r3
		break;
   8018a:	e01a      	b.n	801c2 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   8018c:	2001      	movs	r0, #1
   8018e:	4b0f      	ldr	r3, [pc, #60]	; (801cc <osc_enable+0x7c>)
   80190:	4798      	blx	r3
		break;
   80192:	e016      	b.n	801c2 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80194:	2000      	movs	r0, #0
   80196:	4b0e      	ldr	r3, [pc, #56]	; (801d0 <osc_enable+0x80>)
   80198:	4798      	blx	r3
		break;
   8019a:	e012      	b.n	801c2 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   8019c:	2010      	movs	r0, #16
   8019e:	4b0c      	ldr	r3, [pc, #48]	; (801d0 <osc_enable+0x80>)
   801a0:	4798      	blx	r3
		break;
   801a2:	e00e      	b.n	801c2 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   801a4:	2020      	movs	r0, #32
   801a6:	4b0a      	ldr	r3, [pc, #40]	; (801d0 <osc_enable+0x80>)
   801a8:	4798      	blx	r3
		break;
   801aa:	e00a      	b.n	801c2 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   801ac:	213e      	movs	r1, #62	; 0x3e
   801ae:	2000      	movs	r0, #0
   801b0:	4b08      	ldr	r3, [pc, #32]	; (801d4 <osc_enable+0x84>)
   801b2:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   801b4:	e005      	b.n	801c2 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   801b6:	213e      	movs	r1, #62	; 0x3e
   801b8:	2001      	movs	r0, #1
   801ba:	4b06      	ldr	r3, [pc, #24]	; (801d4 <osc_enable+0x84>)
   801bc:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   801be:	e000      	b.n	801c2 <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
   801c0:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
   801c2:	bf00      	nop
   801c4:	3708      	adds	r7, #8
   801c6:	46bd      	mov	sp, r7
   801c8:	bd80      	pop	{r7, pc}
   801ca:	bf00      	nop
   801cc:	0009890d 	.word	0x0009890d
   801d0:	00098979 	.word	0x00098979
   801d4:	00098a19 	.word	0x00098a19

000801d8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   801d8:	b580      	push	{r7, lr}
   801da:	b082      	sub	sp, #8
   801dc:	af00      	add	r7, sp, #0
   801de:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   801e0:	687b      	ldr	r3, [r7, #4]
   801e2:	2b07      	cmp	r3, #7
   801e4:	d826      	bhi.n	80234 <osc_is_ready+0x5c>
   801e6:	a201      	add	r2, pc, #4	; (adr r2, 801ec <osc_is_ready+0x14>)
   801e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   801ec:	0008020d 	.word	0x0008020d
   801f0:	00080211 	.word	0x00080211
   801f4:	00080211 	.word	0x00080211
   801f8:	00080223 	.word	0x00080223
   801fc:	00080223 	.word	0x00080223
   80200:	00080223 	.word	0x00080223
   80204:	00080223 	.word	0x00080223
   80208:	00080223 	.word	0x00080223
	case OSC_SLCK_32K_RC:
		return 1;
   8020c:	2301      	movs	r3, #1
   8020e:	e012      	b.n	80236 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   80210:	4b0b      	ldr	r3, [pc, #44]	; (80240 <osc_is_ready+0x68>)
   80212:	4798      	blx	r3
   80214:	4603      	mov	r3, r0
   80216:	2b00      	cmp	r3, #0
   80218:	bf14      	ite	ne
   8021a:	2301      	movne	r3, #1
   8021c:	2300      	moveq	r3, #0
   8021e:	b2db      	uxtb	r3, r3
   80220:	e009      	b.n	80236 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80222:	4b08      	ldr	r3, [pc, #32]	; (80244 <osc_is_ready+0x6c>)
   80224:	4798      	blx	r3
   80226:	4603      	mov	r3, r0
   80228:	2b00      	cmp	r3, #0
   8022a:	bf14      	ite	ne
   8022c:	2301      	movne	r3, #1
   8022e:	2300      	moveq	r3, #0
   80230:	b2db      	uxtb	r3, r3
   80232:	e000      	b.n	80236 <osc_is_ready+0x5e>
	}

	return 0;
   80234:	2300      	movs	r3, #0
}
   80236:	4618      	mov	r0, r3
   80238:	3708      	adds	r7, #8
   8023a:	46bd      	mov	sp, r7
   8023c:	bd80      	pop	{r7, pc}
   8023e:	bf00      	nop
   80240:	00098945 	.word	0x00098945
   80244:	00098a91 	.word	0x00098a91

00080248 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80248:	b480      	push	{r7}
   8024a:	b083      	sub	sp, #12
   8024c:	af00      	add	r7, sp, #0
   8024e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80250:	687b      	ldr	r3, [r7, #4]
   80252:	2b07      	cmp	r3, #7
   80254:	d825      	bhi.n	802a2 <osc_get_rate+0x5a>
   80256:	a201      	add	r2, pc, #4	; (adr r2, 8025c <osc_get_rate+0x14>)
   80258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8025c:	0008027d 	.word	0x0008027d
   80260:	00080283 	.word	0x00080283
   80264:	00080289 	.word	0x00080289
   80268:	0008028f 	.word	0x0008028f
   8026c:	00080293 	.word	0x00080293
   80270:	00080297 	.word	0x00080297
   80274:	0008029b 	.word	0x0008029b
   80278:	0008029f 	.word	0x0008029f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8027c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80280:	e010      	b.n	802a4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80286:	e00d      	b.n	802a4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8028c:	e00a      	b.n	802a4 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8028e:	4b08      	ldr	r3, [pc, #32]	; (802b0 <osc_get_rate+0x68>)
   80290:	e008      	b.n	802a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80292:	4b08      	ldr	r3, [pc, #32]	; (802b4 <osc_get_rate+0x6c>)
   80294:	e006      	b.n	802a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80296:	4b08      	ldr	r3, [pc, #32]	; (802b8 <osc_get_rate+0x70>)
   80298:	e004      	b.n	802a4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8029a:	4b07      	ldr	r3, [pc, #28]	; (802b8 <osc_get_rate+0x70>)
   8029c:	e002      	b.n	802a4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8029e:	4b06      	ldr	r3, [pc, #24]	; (802b8 <osc_get_rate+0x70>)
   802a0:	e000      	b.n	802a4 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   802a2:	2300      	movs	r3, #0
}
   802a4:	4618      	mov	r0, r3
   802a6:	370c      	adds	r7, #12
   802a8:	46bd      	mov	sp, r7
   802aa:	bc80      	pop	{r7}
   802ac:	4770      	bx	lr
   802ae:	bf00      	nop
   802b0:	003d0900 	.word	0x003d0900
   802b4:	007a1200 	.word	0x007a1200
   802b8:	00b71b00 	.word	0x00b71b00

000802bc <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   802bc:	b580      	push	{r7, lr}
   802be:	b082      	sub	sp, #8
   802c0:	af00      	add	r7, sp, #0
   802c2:	4603      	mov	r3, r0
   802c4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   802c6:	bf00      	nop
   802c8:	79fb      	ldrb	r3, [r7, #7]
   802ca:	4618      	mov	r0, r3
   802cc:	4b05      	ldr	r3, [pc, #20]	; (802e4 <osc_wait_ready+0x28>)
   802ce:	4798      	blx	r3
   802d0:	4603      	mov	r3, r0
   802d2:	f083 0301 	eor.w	r3, r3, #1
   802d6:	b2db      	uxtb	r3, r3
   802d8:	2b00      	cmp	r3, #0
   802da:	d1f5      	bne.n	802c8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   802dc:	bf00      	nop
   802de:	3708      	adds	r7, #8
   802e0:	46bd      	mov	sp, r7
   802e2:	bd80      	pop	{r7, pc}
   802e4:	000801d9 	.word	0x000801d9

000802e8 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802e8:	b580      	push	{r7, lr}
   802ea:	b086      	sub	sp, #24
   802ec:	af00      	add	r7, sp, #0
   802ee:	60f8      	str	r0, [r7, #12]
   802f0:	607a      	str	r2, [r7, #4]
   802f2:	603b      	str	r3, [r7, #0]
   802f4:	460b      	mov	r3, r1
   802f6:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802f8:	687b      	ldr	r3, [r7, #4]
   802fa:	2b00      	cmp	r3, #0
   802fc:	d107      	bne.n	8030e <pll_config_init+0x26>
   802fe:	683b      	ldr	r3, [r7, #0]
   80300:	2b00      	cmp	r3, #0
   80302:	d104      	bne.n	8030e <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   80304:	68fb      	ldr	r3, [r7, #12]
   80306:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8030a:	601a      	str	r2, [r3, #0]
   8030c:	e019      	b.n	80342 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   8030e:	7afb      	ldrb	r3, [r7, #11]
   80310:	4618      	mov	r0, r3
   80312:	4b0e      	ldr	r3, [pc, #56]	; (8034c <pll_config_init+0x64>)
   80314:	4798      	blx	r3
   80316:	4602      	mov	r2, r0
   80318:	687b      	ldr	r3, [r7, #4]
   8031a:	fbb2 f3f3 	udiv	r3, r2, r3
   8031e:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   80320:	697b      	ldr	r3, [r7, #20]
   80322:	683a      	ldr	r2, [r7, #0]
   80324:	fb02 f303 	mul.w	r3, r2, r3
   80328:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   8032a:	683b      	ldr	r3, [r7, #0]
   8032c:	3b01      	subs	r3, #1
   8032e:	041a      	lsls	r2, r3, #16
   80330:	4b07      	ldr	r3, [pc, #28]	; (80350 <pll_config_init+0x68>)
   80332:	4013      	ands	r3, r2
   80334:	687a      	ldr	r2, [r7, #4]
   80336:	b2d2      	uxtb	r2, r2
   80338:	4313      	orrs	r3, r2
   8033a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8033e:	68fb      	ldr	r3, [r7, #12]
   80340:	601a      	str	r2, [r3, #0]
	}
}
   80342:	bf00      	nop
   80344:	3718      	adds	r7, #24
   80346:	46bd      	mov	sp, r7
   80348:	bd80      	pop	{r7, pc}
   8034a:	bf00      	nop
   8034c:	00080249 	.word	0x00080249
   80350:	07ff0000 	.word	0x07ff0000

00080354 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   80354:	b580      	push	{r7, lr}
   80356:	b082      	sub	sp, #8
   80358:	af00      	add	r7, sp, #0
   8035a:	6078      	str	r0, [r7, #4]
   8035c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8035e:	683b      	ldr	r3, [r7, #0]
   80360:	2b00      	cmp	r3, #0
   80362:	d108      	bne.n	80376 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80364:	4b09      	ldr	r3, [pc, #36]	; (8038c <pll_enable+0x38>)
   80366:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80368:	4a09      	ldr	r2, [pc, #36]	; (80390 <pll_enable+0x3c>)
   8036a:	687b      	ldr	r3, [r7, #4]
   8036c:	681b      	ldr	r3, [r3, #0]
   8036e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80372:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   80374:	e005      	b.n	80382 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80376:	4a06      	ldr	r2, [pc, #24]	; (80390 <pll_enable+0x3c>)
   80378:	687b      	ldr	r3, [r7, #4]
   8037a:	681b      	ldr	r3, [r3, #0]
   8037c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80380:	61d3      	str	r3, [r2, #28]
	}
}
   80382:	bf00      	nop
   80384:	3708      	adds	r7, #8
   80386:	46bd      	mov	sp, r7
   80388:	bd80      	pop	{r7, pc}
   8038a:	bf00      	nop
   8038c:	00098aa9 	.word	0x00098aa9
   80390:	400e0600 	.word	0x400e0600

00080394 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80394:	b580      	push	{r7, lr}
   80396:	b082      	sub	sp, #8
   80398:	af00      	add	r7, sp, #0
   8039a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8039c:	687b      	ldr	r3, [r7, #4]
   8039e:	2b00      	cmp	r3, #0
   803a0:	d103      	bne.n	803aa <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   803a2:	4b05      	ldr	r3, [pc, #20]	; (803b8 <pll_is_locked+0x24>)
   803a4:	4798      	blx	r3
   803a6:	4603      	mov	r3, r0
   803a8:	e002      	b.n	803b0 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   803aa:	4b04      	ldr	r3, [pc, #16]	; (803bc <pll_is_locked+0x28>)
   803ac:	4798      	blx	r3
   803ae:	4603      	mov	r3, r0
	}
}
   803b0:	4618      	mov	r0, r3
   803b2:	3708      	adds	r7, #8
   803b4:	46bd      	mov	sp, r7
   803b6:	bd80      	pop	{r7, pc}
   803b8:	00098ac1 	.word	0x00098ac1
   803bc:	00098ad9 	.word	0x00098ad9

000803c0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   803c0:	b580      	push	{r7, lr}
   803c2:	b082      	sub	sp, #8
   803c4:	af00      	add	r7, sp, #0
   803c6:	4603      	mov	r3, r0
   803c8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   803ca:	79fb      	ldrb	r3, [r7, #7]
   803cc:	3b03      	subs	r3, #3
   803ce:	2b04      	cmp	r3, #4
   803d0:	d808      	bhi.n	803e4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   803d2:	79fb      	ldrb	r3, [r7, #7]
   803d4:	4618      	mov	r0, r3
   803d6:	4b06      	ldr	r3, [pc, #24]	; (803f0 <pll_enable_source+0x30>)
   803d8:	4798      	blx	r3
		osc_wait_ready(e_src);
   803da:	79fb      	ldrb	r3, [r7, #7]
   803dc:	4618      	mov	r0, r3
   803de:	4b05      	ldr	r3, [pc, #20]	; (803f4 <pll_enable_source+0x34>)
   803e0:	4798      	blx	r3
		break;
   803e2:	e000      	b.n	803e6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803e4:	bf00      	nop
	}
}
   803e6:	bf00      	nop
   803e8:	3708      	adds	r7, #8
   803ea:	46bd      	mov	sp, r7
   803ec:	bd80      	pop	{r7, pc}
   803ee:	bf00      	nop
   803f0:	00080151 	.word	0x00080151
   803f4:	000802bd 	.word	0x000802bd

000803f8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   803f8:	b580      	push	{r7, lr}
   803fa:	b082      	sub	sp, #8
   803fc:	af00      	add	r7, sp, #0
   803fe:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80400:	bf00      	nop
   80402:	6878      	ldr	r0, [r7, #4]
   80404:	4b04      	ldr	r3, [pc, #16]	; (80418 <pll_wait_for_lock+0x20>)
   80406:	4798      	blx	r3
   80408:	4603      	mov	r3, r0
   8040a:	2b00      	cmp	r3, #0
   8040c:	d0f9      	beq.n	80402 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   8040e:	2300      	movs	r3, #0
}
   80410:	4618      	mov	r0, r3
   80412:	3708      	adds	r7, #8
   80414:	46bd      	mov	sp, r7
   80416:	bd80      	pop	{r7, pc}
   80418:	00080395 	.word	0x00080395

0008041c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8041c:	b580      	push	{r7, lr}
   8041e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80420:	2006      	movs	r0, #6
   80422:	4b04      	ldr	r3, [pc, #16]	; (80434 <sysclk_get_main_hz+0x18>)
   80424:	4798      	blx	r3
   80426:	4602      	mov	r2, r0
   80428:	4613      	mov	r3, r2
   8042a:	00db      	lsls	r3, r3, #3
   8042c:	1a9b      	subs	r3, r3, r2
   8042e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80430:	4618      	mov	r0, r3
   80432:	bd80      	pop	{r7, pc}
   80434:	00080249 	.word	0x00080249

00080438 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80438:	b580      	push	{r7, lr}
   8043a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   8043c:	4b02      	ldr	r3, [pc, #8]	; (80448 <sysclk_get_cpu_hz+0x10>)
   8043e:	4798      	blx	r3
   80440:	4603      	mov	r3, r0
   80442:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80444:	4618      	mov	r0, r3
   80446:	bd80      	pop	{r7, pc}
   80448:	0008041d 	.word	0x0008041d

0008044c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8044c:	b590      	push	{r4, r7, lr}
   8044e:	b083      	sub	sp, #12
   80450:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80452:	4b10      	ldr	r3, [pc, #64]	; (80494 <sysclk_init+0x48>)
   80454:	4798      	blx	r3
   80456:	4603      	mov	r3, r0
   80458:	4618      	mov	r0, r3
   8045a:	4b0f      	ldr	r3, [pc, #60]	; (80498 <sysclk_init+0x4c>)
   8045c:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8045e:	2006      	movs	r0, #6
   80460:	4b0e      	ldr	r3, [pc, #56]	; (8049c <sysclk_init+0x50>)
   80462:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   80464:	1d38      	adds	r0, r7, #4
   80466:	230e      	movs	r3, #14
   80468:	2201      	movs	r2, #1
   8046a:	2106      	movs	r1, #6
   8046c:	4c0c      	ldr	r4, [pc, #48]	; (804a0 <sysclk_init+0x54>)
   8046e:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80470:	1d3b      	adds	r3, r7, #4
   80472:	2100      	movs	r1, #0
   80474:	4618      	mov	r0, r3
   80476:	4b0b      	ldr	r3, [pc, #44]	; (804a4 <sysclk_init+0x58>)
   80478:	4798      	blx	r3
		pll_wait_for_lock(0);
   8047a:	2000      	movs	r0, #0
   8047c:	4b0a      	ldr	r3, [pc, #40]	; (804a8 <sysclk_init+0x5c>)
   8047e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80480:	2010      	movs	r0, #16
   80482:	4b0a      	ldr	r3, [pc, #40]	; (804ac <sysclk_init+0x60>)
   80484:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80486:	4b0a      	ldr	r3, [pc, #40]	; (804b0 <sysclk_init+0x64>)
   80488:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8048a:	bf00      	nop
   8048c:	370c      	adds	r7, #12
   8048e:	46bd      	mov	sp, r7
   80490:	bd90      	pop	{r4, r7, pc}
   80492:	bf00      	nop
   80494:	00080439 	.word	0x00080439
   80498:	00099221 	.word	0x00099221
   8049c:	000803c1 	.word	0x000803c1
   804a0:	000802e9 	.word	0x000802e9
   804a4:	00080355 	.word	0x00080355
   804a8:	000803f9 	.word	0x000803f9
   804ac:	0009888d 	.word	0x0009888d
   804b0:	0009909d 	.word	0x0009909d

000804b4 <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
   804b4:	b580      	push	{r7, lr}
   804b6:	b084      	sub	sp, #16
   804b8:	af00      	add	r7, sp, #0
   804ba:	60f8      	str	r0, [r7, #12]
   804bc:	60b9      	str	r1, [r7, #8]
   804be:	607a      	str	r2, [r7, #4]
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
   804c0:	687b      	ldr	r3, [r7, #4]
   804c2:	021b      	lsls	r3, r3, #8
   804c4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
   804c8:	68bb      	ldr	r3, [r7, #8]
   804ca:	4313      	orrs	r3, r2
   804cc:	4619      	mov	r1, r3
   804ce:	68f8      	ldr	r0, [r7, #12]
   804d0:	4b03      	ldr	r3, [pc, #12]	; (804e0 <efc_init+0x2c>)
   804d2:	4798      	blx	r3
	return EFC_RC_OK;
   804d4:	2300      	movs	r3, #0
}
   804d6:	4618      	mov	r0, r3
   804d8:	3710      	adds	r7, #16
   804da:	46bd      	mov	sp, r7
   804dc:	bd80      	pop	{r7, pc}
   804de:	bf00      	nop
   804e0:	200700b5 	.word	0x200700b5

000804e4 <efc_set_wait_state>:
 *
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fws The number of wait states in cycle (no shift).
 */
void efc_set_wait_state(Efc *p_efc, uint32_t ul_fws)
{
   804e4:	b580      	push	{r7, lr}
   804e6:	b084      	sub	sp, #16
   804e8:	af00      	add	r7, sp, #0
   804ea:	6078      	str	r0, [r7, #4]
   804ec:	6039      	str	r1, [r7, #0]
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   804ee:	687b      	ldr	r3, [r7, #4]
   804f0:	681b      	ldr	r3, [r3, #0]
   804f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   804f6:	60fb      	str	r3, [r7, #12]

	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   804f8:	683b      	ldr	r3, [r7, #0]
   804fa:	021b      	lsls	r3, r3, #8
   804fc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
   80500:	68fb      	ldr	r3, [r7, #12]
   80502:	4313      	orrs	r3, r2
   80504:	4619      	mov	r1, r3
   80506:	6878      	ldr	r0, [r7, #4]
   80508:	4b02      	ldr	r3, [pc, #8]	; (80514 <efc_set_wait_state+0x30>)
   8050a:	4798      	blx	r3
}
   8050c:	bf00      	nop
   8050e:	3710      	adds	r7, #16
   80510:	46bd      	mov	sp, r7
   80512:	bd80      	pop	{r7, pc}
   80514:	200700b5 	.word	0x200700b5

00080518 <efc_get_wait_state>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The number of wait states in cycle (no shift).
 */
uint32_t efc_get_wait_state(Efc *p_efc)
{
   80518:	b480      	push	{r7}
   8051a:	b083      	sub	sp, #12
   8051c:	af00      	add	r7, sp, #0
   8051e:	6078      	str	r0, [r7, #4]
	return ((p_efc->EEFC_FMR & EEFC_FMR_FWS_Msk) >> EEFC_FMR_FWS_Pos);
   80520:	687b      	ldr	r3, [r7, #4]
   80522:	681b      	ldr	r3, [r3, #0]
   80524:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   80528:	0a1b      	lsrs	r3, r3, #8
}
   8052a:	4618      	mov	r0, r3
   8052c:	370c      	adds	r7, #12
   8052e:	46bd      	mov	sp, r7
   80530:	bc80      	pop	{r7}
   80532:	4770      	bx	lr

00080534 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   80534:	b580      	push	{r7, lr}
   80536:	b086      	sub	sp, #24
   80538:	af00      	add	r7, sp, #0
   8053a:	60f8      	str	r0, [r7, #12]
   8053c:	60b9      	str	r1, [r7, #8]
   8053e:	607a      	str	r2, [r7, #4]
	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   80540:	68bb      	ldr	r3, [r7, #8]
   80542:	2b0e      	cmp	r3, #14
   80544:	d002      	beq.n	8054c <efc_perform_command+0x18>
   80546:	68bb      	ldr	r3, [r7, #8]
   80548:	2b0f      	cmp	r3, #15
   8054a:	d102      	bne.n	80552 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   8054c:	f04f 33ff 	mov.w	r3, #4294967295
   80550:	e020      	b.n	80594 <efc_perform_command+0x60>
	}

#if (SAM3XA || SAM3U4)
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;
   80552:	68fb      	ldr	r3, [r7, #12]
   80554:	4a11      	ldr	r2, [pc, #68]	; (8059c <efc_perform_command+0x68>)
   80556:	4293      	cmp	r3, r2
   80558:	bf14      	ite	ne
   8055a:	2301      	movne	r3, #1
   8055c:	2300      	moveq	r3, #0
   8055e:	b2db      	uxtb	r3, r3
   80560:	617b      	str	r3, [r7, #20]

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
   80562:	4b0f      	ldr	r3, [pc, #60]	; (805a0 <efc_perform_command+0x6c>)
   80564:	681b      	ldr	r3, [r3, #0]
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
   80566:	461a      	mov	r2, r3
#if (SAM3XA || SAM3U4)
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
   80568:	4b0e      	ldr	r3, [pc, #56]	; (805a4 <efc_perform_command+0x70>)
   8056a:	601a      	str	r2, [r3, #0]
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
   8056c:	4b0d      	ldr	r3, [pc, #52]	; (805a4 <efc_perform_command+0x70>)
   8056e:	681a      	ldr	r2, [r3, #0]
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
   80570:	687b      	ldr	r3, [r7, #4]
   80572:	021b      	lsls	r3, r3, #8
   80574:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   80578:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   8057c:	68b9      	ldr	r1, [r7, #8]
   8057e:	b2c9      	uxtb	r1, r1

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
   80580:	430b      	orrs	r3, r1
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
   80582:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   80586:	4619      	mov	r1, r3
   80588:	6978      	ldr	r0, [r7, #20]
   8058a:	4790      	blx	r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	return (p_efc->EEFC_FSR & EEFC_ERROR_FLAGS);
   8058c:	68fb      	ldr	r3, [r7, #12]
   8058e:	689b      	ldr	r3, [r3, #8]
   80590:	f003 0306 	and.w	r3, r3, #6
	return efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));

#endif
}
   80594:	4618      	mov	r0, r3
   80596:	3718      	adds	r7, #24
   80598:	46bd      	mov	sp, r7
   8059a:	bd80      	pop	{r7, pc}
   8059c:	400e0a00 	.word	0x400e0a00
   805a0:	00100008 	.word	0x00100008
   805a4:	200714f8 	.word	0x200714f8

000805a8 <efc_get_result>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The result of the last executed command.
 */
uint32_t efc_get_result(Efc *p_efc)
{
   805a8:	b480      	push	{r7}
   805aa:	b083      	sub	sp, #12
   805ac:	af00      	add	r7, sp, #0
   805ae:	6078      	str	r0, [r7, #4]
	return p_efc->EEFC_FRR;
   805b0:	687b      	ldr	r3, [r7, #4]
   805b2:	68db      	ldr	r3, [r3, #12]
}
   805b4:	4618      	mov	r0, r3
   805b6:	370c      	adds	r7, #12
   805b8:	46bd      	mov	sp, r7
   805ba:	bc80      	pop	{r7}
   805bc:	4770      	bx	lr
   805be:	bf00      	nop

000805c0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   805c0:	b580      	push	{r7, lr}
   805c2:	b082      	sub	sp, #8
   805c4:	af00      	add	r7, sp, #0
   805c6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   805c8:	6878      	ldr	r0, [r7, #4]
   805ca:	4b03      	ldr	r3, [pc, #12]	; (805d8 <sysclk_enable_peripheral_clock+0x18>)
   805cc:	4798      	blx	r3
}
   805ce:	bf00      	nop
   805d0:	3708      	adds	r7, #8
   805d2:	46bd      	mov	sp, r7
   805d4:	bd80      	pop	{r7, pc}
   805d6:	bf00      	nop
   805d8:	00098af1 	.word	0x00098af1

000805dc <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   805dc:	b580      	push	{r7, lr}
   805de:	b082      	sub	sp, #8
   805e0:	af00      	add	r7, sp, #0
   805e2:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM)
	if (p_spi == SPI0) {
   805e4:	687b      	ldr	r3, [r7, #4]
   805e6:	4a05      	ldr	r2, [pc, #20]	; (805fc <spi_enable_clock+0x20>)
   805e8:	4293      	cmp	r3, r2
   805ea:	d102      	bne.n	805f2 <spi_enable_clock+0x16>
		sysclk_enable_peripheral_clock(ID_SPI0);
   805ec:	2018      	movs	r0, #24
   805ee:	4b04      	ldr	r3, [pc, #16]	; (80600 <spi_enable_clock+0x24>)
   805f0:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   805f2:	bf00      	nop
   805f4:	3708      	adds	r7, #8
   805f6:	46bd      	mov	sp, r7
   805f8:	bd80      	pop	{r7, pc}
   805fa:	bf00      	nop
   805fc:	40008000 	.word	0x40008000
   80600:	000805c1 	.word	0x000805c1

00080604 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   80604:	b480      	push	{r7}
   80606:	b083      	sub	sp, #12
   80608:	af00      	add	r7, sp, #0
   8060a:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   8060c:	687b      	ldr	r3, [r7, #4]
   8060e:	2208      	movs	r2, #8
   80610:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80612:	687b      	ldr	r3, [r7, #4]
   80614:	2220      	movs	r2, #32
   80616:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   80618:	687b      	ldr	r3, [r7, #4]
   8061a:	2204      	movs	r2, #4
   8061c:	601a      	str	r2, [r3, #0]
}
   8061e:	bf00      	nop
   80620:	370c      	adds	r7, #12
   80622:	46bd      	mov	sp, r7
   80624:	bc80      	pop	{r7}
   80626:	4770      	bx	lr

00080628 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   80628:	b580      	push	{r7, lr}
   8062a:	b084      	sub	sp, #16
   8062c:	af00      	add	r7, sp, #0
   8062e:	6078      	str	r0, [r7, #4]
   80630:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   80632:	2300      	movs	r3, #0
   80634:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80636:	687b      	ldr	r3, [r7, #4]
   80638:	f04f 32ff 	mov.w	r2, #4294967295
   8063c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   8063e:	687b      	ldr	r3, [r7, #4]
   80640:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   80642:	6878      	ldr	r0, [r7, #4]
   80644:	4b0e      	ldr	r3, [pc, #56]	; (80680 <twi_master_init+0x58>)
   80646:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   80648:	6878      	ldr	r0, [r7, #4]
   8064a:	4b0e      	ldr	r3, [pc, #56]	; (80684 <twi_master_init+0x5c>)
   8064c:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   8064e:	683b      	ldr	r3, [r7, #0]
   80650:	6859      	ldr	r1, [r3, #4]
   80652:	683b      	ldr	r3, [r7, #0]
   80654:	681b      	ldr	r3, [r3, #0]
   80656:	461a      	mov	r2, r3
   80658:	6878      	ldr	r0, [r7, #4]
   8065a:	4b0b      	ldr	r3, [pc, #44]	; (80688 <twi_master_init+0x60>)
   8065c:	4798      	blx	r3
   8065e:	4603      	mov	r3, r0
   80660:	2b01      	cmp	r3, #1
   80662:	d101      	bne.n	80668 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   80664:	2301      	movs	r3, #1
   80666:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   80668:	683b      	ldr	r3, [r7, #0]
   8066a:	7a5b      	ldrb	r3, [r3, #9]
   8066c:	2b01      	cmp	r3, #1
   8066e:	d102      	bne.n	80676 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
   80670:	687b      	ldr	r3, [r7, #4]
   80672:	2240      	movs	r2, #64	; 0x40
   80674:	601a      	str	r2, [r3, #0]
	}

	return status;
   80676:	68fb      	ldr	r3, [r7, #12]
}
   80678:	4618      	mov	r0, r3
   8067a:	3710      	adds	r7, #16
   8067c:	46bd      	mov	sp, r7
   8067e:	bd80      	pop	{r7, pc}
   80680:	0008082d 	.word	0x0008082d
   80684:	00080605 	.word	0x00080605
   80688:	0008068d 	.word	0x0008068d

0008068c <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   8068c:	b480      	push	{r7}
   8068e:	b087      	sub	sp, #28
   80690:	af00      	add	r7, sp, #0
   80692:	60f8      	str	r0, [r7, #12]
   80694:	60b9      	str	r1, [r7, #8]
   80696:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   80698:	2300      	movs	r3, #0
   8069a:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   8069c:	68bb      	ldr	r3, [r7, #8]
   8069e:	4a17      	ldr	r2, [pc, #92]	; (806fc <twi_set_speed+0x70>)
   806a0:	4293      	cmp	r3, r2
   806a2:	d901      	bls.n	806a8 <twi_set_speed+0x1c>
		return FAIL;
   806a4:	2301      	movs	r3, #1
   806a6:	e024      	b.n	806f2 <twi_set_speed+0x66>
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   806a8:	68bb      	ldr	r3, [r7, #8]
   806aa:	005b      	lsls	r3, r3, #1
   806ac:	687a      	ldr	r2, [r7, #4]
   806ae:	fbb2 f3f3 	udiv	r3, r2, r3
   806b2:	3b04      	subs	r3, #4
   806b4:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   806b6:	e005      	b.n	806c4 <twi_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
   806b8:	697b      	ldr	r3, [r7, #20]
   806ba:	3301      	adds	r3, #1
   806bc:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   806be:	693b      	ldr	r3, [r7, #16]
   806c0:	085b      	lsrs	r3, r3, #1
   806c2:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   806c4:	693b      	ldr	r3, [r7, #16]
   806c6:	2bff      	cmp	r3, #255	; 0xff
   806c8:	d902      	bls.n	806d0 <twi_set_speed+0x44>
   806ca:	697b      	ldr	r3, [r7, #20]
   806cc:	2b06      	cmp	r3, #6
   806ce:	d9f3      	bls.n	806b8 <twi_set_speed+0x2c>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
   806d0:	4a0b      	ldr	r2, [pc, #44]	; (80700 <twi_set_speed+0x74>)
   806d2:	693b      	ldr	r3, [r7, #16]
   806d4:	6013      	str	r3, [r2, #0]
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   806d6:	693b      	ldr	r3, [r7, #16]
   806d8:	b2da      	uxtb	r2, r3
   806da:	693b      	ldr	r3, [r7, #16]
   806dc:	021b      	lsls	r3, r3, #8
   806de:	b29b      	uxth	r3, r3
   806e0:	431a      	orrs	r2, r3
			TWI_CWGR_CKDIV(ckdiv);
   806e2:	697b      	ldr	r3, [r7, #20]
   806e4:	041b      	lsls	r3, r3, #16
   806e6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   806ea:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   806ec:	68fb      	ldr	r3, [r7, #12]
   806ee:	611a      	str	r2, [r3, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   806f0:	2300      	movs	r3, #0
}
   806f2:	4618      	mov	r0, r3
   806f4:	371c      	adds	r7, #28
   806f6:	46bd      	mov	sp, r7
   806f8:	bc80      	pop	{r7}
   806fa:	4770      	bx	lr
   806fc:	00061a80 	.word	0x00061a80
   80700:	200714fc 	.word	0x200714fc

00080704 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   80704:	b480      	push	{r7}
   80706:	b085      	sub	sp, #20
   80708:	af00      	add	r7, sp, #0
   8070a:	6078      	str	r0, [r7, #4]
   8070c:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   8070e:	683b      	ldr	r3, [r7, #0]
   80710:	2b00      	cmp	r3, #0
   80712:	d101      	bne.n	80718 <twi_mk_addr+0x14>
		return 0;
   80714:	2300      	movs	r3, #0
   80716:	e01d      	b.n	80754 <twi_mk_addr+0x50>

	val = addr[0];
   80718:	687b      	ldr	r3, [r7, #4]
   8071a:	781b      	ldrb	r3, [r3, #0]
   8071c:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   8071e:	683b      	ldr	r3, [r7, #0]
   80720:	2b01      	cmp	r3, #1
   80722:	dd09      	ble.n	80738 <twi_mk_addr+0x34>
		val <<= 8;
   80724:	68fb      	ldr	r3, [r7, #12]
   80726:	021b      	lsls	r3, r3, #8
   80728:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   8072a:	687b      	ldr	r3, [r7, #4]
   8072c:	3301      	adds	r3, #1
   8072e:	781b      	ldrb	r3, [r3, #0]
   80730:	461a      	mov	r2, r3
   80732:	68fb      	ldr	r3, [r7, #12]
   80734:	4313      	orrs	r3, r2
   80736:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   80738:	683b      	ldr	r3, [r7, #0]
   8073a:	2b02      	cmp	r3, #2
   8073c:	dd09      	ble.n	80752 <twi_mk_addr+0x4e>
		val <<= 8;
   8073e:	68fb      	ldr	r3, [r7, #12]
   80740:	021b      	lsls	r3, r3, #8
   80742:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   80744:	687b      	ldr	r3, [r7, #4]
   80746:	3302      	adds	r3, #2
   80748:	781b      	ldrb	r3, [r3, #0]
   8074a:	461a      	mov	r2, r3
   8074c:	68fb      	ldr	r3, [r7, #12]
   8074e:	4313      	orrs	r3, r2
   80750:	60fb      	str	r3, [r7, #12]
	}
	return val;
   80752:	68fb      	ldr	r3, [r7, #12]
}
   80754:	4618      	mov	r0, r3
   80756:	3714      	adds	r7, #20
   80758:	46bd      	mov	sp, r7
   8075a:	bc80      	pop	{r7}
   8075c:	4770      	bx	lr
   8075e:	bf00      	nop

00080760 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   80760:	b580      	push	{r7, lr}
   80762:	b086      	sub	sp, #24
   80764:	af00      	add	r7, sp, #0
   80766:	6078      	str	r0, [r7, #4]
   80768:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
   8076a:	683b      	ldr	r3, [r7, #0]
   8076c:	68db      	ldr	r3, [r3, #12]
   8076e:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
   80770:	683b      	ldr	r3, [r7, #0]
   80772:	689b      	ldr	r3, [r3, #8]
   80774:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
   80776:	697b      	ldr	r3, [r7, #20]
   80778:	2b00      	cmp	r3, #0
   8077a:	d101      	bne.n	80780 <twi_master_read+0x20>
		return TWI_INVALID_ARGUMENT;
   8077c:	2301      	movs	r3, #1
   8077e:	e04f      	b.n	80820 <twi_master_read+0xc0>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   80780:	687b      	ldr	r3, [r7, #4]
   80782:	2200      	movs	r2, #0
   80784:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   80786:	683b      	ldr	r3, [r7, #0]
   80788:	7c1b      	ldrb	r3, [r3, #16]
   8078a:	041b      	lsls	r3, r3, #16
   8078c:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   80790:	683b      	ldr	r3, [r7, #0]
   80792:	685b      	ldr	r3, [r3, #4]
   80794:	021b      	lsls	r3, r3, #8
   80796:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   8079a:	4313      	orrs	r3, r2
   8079c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
   807a0:	687b      	ldr	r3, [r7, #4]
   807a2:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   807a4:	687b      	ldr	r3, [r7, #4]
   807a6:	2200      	movs	r2, #0
   807a8:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   807aa:	683a      	ldr	r2, [r7, #0]
   807ac:	683b      	ldr	r3, [r7, #0]
   807ae:	685b      	ldr	r3, [r3, #4]
   807b0:	4619      	mov	r1, r3
   807b2:	4610      	mov	r0, r2
   807b4:	4b1c      	ldr	r3, [pc, #112]	; (80828 <twi_master_read+0xc8>)
   807b6:	4798      	blx	r3
   807b8:	4602      	mov	r2, r0
   807ba:	687b      	ldr	r3, [r7, #4]
   807bc:	60da      	str	r2, [r3, #12]

	/* Send a START Condition */
	p_twi->TWI_CR = TWI_CR_START;
   807be:	687b      	ldr	r3, [r7, #4]
   807c0:	2201      	movs	r2, #1
   807c2:	601a      	str	r2, [r3, #0]

	while (cnt > 0) {
   807c4:	e01f      	b.n	80806 <twi_master_read+0xa6>
		status = p_twi->TWI_SR;
   807c6:	687b      	ldr	r3, [r7, #4]
   807c8:	6a1b      	ldr	r3, [r3, #32]
   807ca:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   807cc:	68fb      	ldr	r3, [r7, #12]
   807ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
   807d2:	2b00      	cmp	r3, #0
   807d4:	d001      	beq.n	807da <twi_master_read+0x7a>
			return TWI_RECEIVE_NACK;
   807d6:	2305      	movs	r3, #5
   807d8:	e022      	b.n	80820 <twi_master_read+0xc0>
		}

		/* Last byte ? */
		if (cnt == 1) {
   807da:	697b      	ldr	r3, [r7, #20]
   807dc:	2b01      	cmp	r3, #1
   807de:	d102      	bne.n	807e6 <twi_master_read+0x86>
			p_twi->TWI_CR = TWI_CR_STOP;
   807e0:	687b      	ldr	r3, [r7, #4]
   807e2:	2202      	movs	r2, #2
   807e4:	601a      	str	r2, [r3, #0]
		}

		if (!(status & TWI_SR_RXRDY)) {
   807e6:	68fb      	ldr	r3, [r7, #12]
   807e8:	f003 0302 	and.w	r3, r3, #2
   807ec:	2b00      	cmp	r3, #0
   807ee:	d100      	bne.n	807f2 <twi_master_read+0x92>
			continue;
   807f0:	e009      	b.n	80806 <twi_master_read+0xa6>
		}
		*buffer++ = p_twi->TWI_RHR;
   807f2:	693b      	ldr	r3, [r7, #16]
   807f4:	1c5a      	adds	r2, r3, #1
   807f6:	613a      	str	r2, [r7, #16]
   807f8:	687a      	ldr	r2, [r7, #4]
   807fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
   807fc:	b2d2      	uxtb	r2, r2
   807fe:	701a      	strb	r2, [r3, #0]

		cnt--;
   80800:	697b      	ldr	r3, [r7, #20]
   80802:	3b01      	subs	r3, #1
   80804:	617b      	str	r3, [r7, #20]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twi->TWI_CR = TWI_CR_START;

	while (cnt > 0) {
   80806:	697b      	ldr	r3, [r7, #20]
   80808:	2b00      	cmp	r3, #0
   8080a:	d1dc      	bne.n	807c6 <twi_master_read+0x66>
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   8080c:	bf00      	nop
   8080e:	687b      	ldr	r3, [r7, #4]
   80810:	6a1b      	ldr	r3, [r3, #32]
   80812:	f003 0301 	and.w	r3, r3, #1
   80816:	2b00      	cmp	r3, #0
   80818:	d0f9      	beq.n	8080e <twi_master_read+0xae>
	}

	p_twi->TWI_SR;
   8081a:	687b      	ldr	r3, [r7, #4]
   8081c:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
   8081e:	2300      	movs	r3, #0
}
   80820:	4618      	mov	r0, r3
   80822:	3718      	adds	r7, #24
   80824:	46bd      	mov	sp, r7
   80826:	bd80      	pop	{r7, pc}
   80828:	00080705 	.word	0x00080705

0008082c <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   8082c:	b480      	push	{r7}
   8082e:	b083      	sub	sp, #12
   80830:	af00      	add	r7, sp, #0
   80832:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   80834:	687b      	ldr	r3, [r7, #4]
   80836:	2280      	movs	r2, #128	; 0x80
   80838:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   8083a:	687b      	ldr	r3, [r7, #4]
   8083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   8083e:	bf00      	nop
   80840:	370c      	adds	r7, #12
   80842:	46bd      	mov	sp, r7
   80844:	bc80      	pop	{r7}
   80846:	4770      	bx	lr

00080848 <translate_address>:
 * \param pus_page The first page accessed.
 * \param pus_offset Byte offset in the first page.
 */
static void translate_address(Efc **pp_efc, uint32_t ul_addr,
		uint16_t *pus_page, uint16_t *pus_offset)
{
   80848:	b480      	push	{r7}
   8084a:	b087      	sub	sp, #28
   8084c:	af00      	add	r7, sp, #0
   8084e:	60f8      	str	r0, [r7, #12]
   80850:	60b9      	str	r1, [r7, #8]
   80852:	607a      	str	r2, [r7, #4]
   80854:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint16_t us_page;
	uint16_t us_offset;

#if (SAM3XA || SAM3U4)
	if (ul_addr >= IFLASH1_ADDR) {
   80856:	68bb      	ldr	r3, [r7, #8]
   80858:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
   8085c:	d30b      	bcc.n	80876 <translate_address+0x2e>
		p_efc = EFC1;
   8085e:	4b17      	ldr	r3, [pc, #92]	; (808bc <translate_address+0x74>)
   80860:	617b      	str	r3, [r7, #20]
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   80862:	68bb      	ldr	r3, [r7, #8]
   80864:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
   80868:	0a1b      	lsrs	r3, r3, #8
   8086a:	827b      	strh	r3, [r7, #18]
		us_offset = (ul_addr - IFLASH1_ADDR) % IFLASH1_PAGE_SIZE;
   8086c:	68bb      	ldr	r3, [r7, #8]
   8086e:	b29b      	uxth	r3, r3
   80870:	b2db      	uxtb	r3, r3
   80872:	823b      	strh	r3, [r7, #16]
   80874:	e00a      	b.n	8088c <translate_address+0x44>
	} else {
		p_efc = EFC0;
   80876:	4b12      	ldr	r3, [pc, #72]	; (808c0 <translate_address+0x78>)
   80878:	617b      	str	r3, [r7, #20]
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   8087a:	68bb      	ldr	r3, [r7, #8]
   8087c:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
   80880:	0a1b      	lsrs	r3, r3, #8
   80882:	827b      	strh	r3, [r7, #18]
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
   80884:	68bb      	ldr	r3, [r7, #8]
   80886:	b29b      	uxth	r3, r3
   80888:	b2db      	uxtb	r3, r3
   8088a:	823b      	strh	r3, [r7, #16]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
#endif

	/* Store values */
	if (pp_efc) {
   8088c:	68fb      	ldr	r3, [r7, #12]
   8088e:	2b00      	cmp	r3, #0
   80890:	d002      	beq.n	80898 <translate_address+0x50>
		*pp_efc = p_efc;
   80892:	68fb      	ldr	r3, [r7, #12]
   80894:	697a      	ldr	r2, [r7, #20]
   80896:	601a      	str	r2, [r3, #0]
	}

	if (pus_page) {
   80898:	687b      	ldr	r3, [r7, #4]
   8089a:	2b00      	cmp	r3, #0
   8089c:	d002      	beq.n	808a4 <translate_address+0x5c>
		*pus_page = us_page;
   8089e:	687b      	ldr	r3, [r7, #4]
   808a0:	8a7a      	ldrh	r2, [r7, #18]
   808a2:	801a      	strh	r2, [r3, #0]
	}

	if (pus_offset) {
   808a4:	683b      	ldr	r3, [r7, #0]
   808a6:	2b00      	cmp	r3, #0
   808a8:	d002      	beq.n	808b0 <translate_address+0x68>
		*pus_offset = us_offset;
   808aa:	683b      	ldr	r3, [r7, #0]
   808ac:	8a3a      	ldrh	r2, [r7, #16]
   808ae:	801a      	strh	r2, [r3, #0]
	}
}
   808b0:	bf00      	nop
   808b2:	371c      	adds	r7, #28
   808b4:	46bd      	mov	sp, r7
   808b6:	bc80      	pop	{r7}
   808b8:	4770      	bx	lr
   808ba:	bf00      	nop
   808bc:	400e0c00 	.word	0x400e0c00
   808c0:	400e0a00 	.word	0x400e0a00

000808c4 <compute_address>:
 * \param us_offset Byte offset inside page.
 * \param pul_addr Computed address (optional).
 */
static void compute_address(Efc *p_efc, uint16_t us_page, uint16_t us_offset,
		uint32_t *pul_addr)
{
   808c4:	b480      	push	{r7}
   808c6:	b087      	sub	sp, #28
   808c8:	af00      	add	r7, sp, #0
   808ca:	60f8      	str	r0, [r7, #12]
   808cc:	607b      	str	r3, [r7, #4]
   808ce:	460b      	mov	r3, r1
   808d0:	817b      	strh	r3, [r7, #10]
   808d2:	4613      	mov	r3, r2
   808d4:	813b      	strh	r3, [r7, #8]
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   808d6:	68fb      	ldr	r3, [r7, #12]
   808d8:	4a0d      	ldr	r2, [pc, #52]	; (80910 <compute_address+0x4c>)
   808da:	4293      	cmp	r3, r2
   808dc:	d106      	bne.n	808ec <compute_address+0x28>
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
   808de:	897b      	ldrh	r3, [r7, #10]
   808e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
   808e4:	021a      	lsls	r2, r3, #8
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   808e6:	893b      	ldrh	r3, [r7, #8]
   808e8:	4413      	add	r3, r2
   808ea:	e005      	b.n	808f8 <compute_address+0x34>
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
			IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
   808ec:	897b      	ldrh	r3, [r7, #10]
   808ee:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   808f2:	021a      	lsls	r2, r3, #8
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   808f4:	893b      	ldrh	r3, [r7, #8]
   808f6:	4413      	add	r3, r2
   808f8:	617b      	str	r3, [r7, #20]
	/* Compute address */
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
#endif

	/* Store result */
	if (pul_addr != NULL) {
   808fa:	687b      	ldr	r3, [r7, #4]
   808fc:	2b00      	cmp	r3, #0
   808fe:	d002      	beq.n	80906 <compute_address+0x42>
		*pul_addr = ul_addr;
   80900:	687b      	ldr	r3, [r7, #4]
   80902:	697a      	ldr	r2, [r7, #20]
   80904:	601a      	str	r2, [r3, #0]
	}
}
   80906:	bf00      	nop
   80908:	371c      	adds	r7, #28
   8090a:	46bd      	mov	sp, r7
   8090c:	bc80      	pop	{r7}
   8090e:	4770      	bx	lr
   80910:	400e0a00 	.word	0x400e0a00

00080914 <compute_lock_range>:
 * \param pul_actual_start Actual start address of lock range.
 * \param pul_actual_end Actual end address of lock range.
 */
static void compute_lock_range(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80914:	b480      	push	{r7}
   80916:	b087      	sub	sp, #28
   80918:	af00      	add	r7, sp, #0
   8091a:	60f8      	str	r0, [r7, #12]
   8091c:	60b9      	str	r1, [r7, #8]
   8091e:	607a      	str	r2, [r7, #4]
   80920:	603b      	str	r3, [r7, #0]
	uint32_t ul_actual_start, ul_actual_end;

	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   80922:	68fb      	ldr	r3, [r7, #12]
   80924:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
   80928:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   8092c:	617b      	str	r3, [r7, #20]
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   8092e:	68bb      	ldr	r3, [r7, #8]
   80930:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
   80934:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   80938:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
   8093c:	333f      	adds	r3, #63	; 0x3f
   8093e:	613b      	str	r3, [r7, #16]
			IFLASH_LOCK_REGION_SIZE - 1;

	if (pul_actual_start) {
   80940:	687b      	ldr	r3, [r7, #4]
   80942:	2b00      	cmp	r3, #0
   80944:	d002      	beq.n	8094c <compute_lock_range+0x38>
		*pul_actual_start = ul_actual_start;
   80946:	687b      	ldr	r3, [r7, #4]
   80948:	697a      	ldr	r2, [r7, #20]
   8094a:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end) {
   8094c:	683b      	ldr	r3, [r7, #0]
   8094e:	2b00      	cmp	r3, #0
   80950:	d002      	beq.n	80958 <compute_lock_range+0x44>
		*pul_actual_end = ul_actual_end;
   80952:	683b      	ldr	r3, [r7, #0]
   80954:	693a      	ldr	r2, [r7, #16]
   80956:	601a      	str	r2, [r3, #0]
	}
}
   80958:	bf00      	nop
   8095a:	371c      	adds	r7, #28
   8095c:	46bd      	mov	sp, r7
   8095e:	bc80      	pop	{r7}
   80960:	4770      	bx	lr
   80962:	bf00      	nop

00080964 <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
   80964:	b580      	push	{r7, lr}
   80966:	b082      	sub	sp, #8
   80968:	af00      	add	r7, sp, #0
   8096a:	6078      	str	r0, [r7, #4]
   8096c:	6039      	str	r1, [r7, #0]
	efc_init(EFC, ul_mode, ul_fws);
   8096e:	683a      	ldr	r2, [r7, #0]
   80970:	6879      	ldr	r1, [r7, #4]
   80972:	4806      	ldr	r0, [pc, #24]	; (8098c <flash_init+0x28>)
   80974:	4b06      	ldr	r3, [pc, #24]	; (80990 <flash_init+0x2c>)
   80976:	4798      	blx	r3

#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
   80978:	683a      	ldr	r2, [r7, #0]
   8097a:	6879      	ldr	r1, [r7, #4]
   8097c:	4805      	ldr	r0, [pc, #20]	; (80994 <flash_init+0x30>)
   8097e:	4b04      	ldr	r3, [pc, #16]	; (80990 <flash_init+0x2c>)
   80980:	4798      	blx	r3
#endif

	return FLASH_RC_OK;
   80982:	2300      	movs	r3, #0
}
   80984:	4618      	mov	r0, r3
   80986:	3708      	adds	r7, #8
   80988:	46bd      	mov	sp, r7
   8098a:	bd80      	pop	{r7, pc}
   8098c:	400e0a00 	.word	0x400e0a00
   80990:	000804b5 	.word	0x000804b5
   80994:	400e0c00 	.word	0x400e0c00

00080998 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
   80998:	b590      	push	{r4, r7, lr}
   8099a:	b08f      	sub	sp, #60	; 0x3c
   8099c:	af00      	add	r7, sp, #0
   8099e:	60f8      	str	r0, [r7, #12]
   809a0:	60b9      	str	r1, [r7, #8]
   809a2:	607a      	str	r2, [r7, #4]
   809a4:	603b      	str	r3, [r7, #0]
	uint32_t ul_page_addr;
	uint16_t us_padding;
	uint32_t ul_error;
	uint32_t ul_idx;
	uint32_t *p_aligned_dest;
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;
   809a6:	4b4a      	ldr	r3, [pc, #296]	; (80ad0 <flash_write+0x138>)
   809a8:	62bb      	str	r3, [r7, #40]	; 0x28

	translate_address(&p_efc, ul_address, &us_page, &us_offset);
   809aa:	f107 0314 	add.w	r3, r7, #20
   809ae:	f107 0216 	add.w	r2, r7, #22
   809b2:	f107 0018 	add.w	r0, r7, #24
   809b6:	68f9      	ldr	r1, [r7, #12]
   809b8:	4c46      	ldr	r4, [pc, #280]	; (80ad4 <flash_write+0x13c>)
   809ba:	47a0      	blx	r4

	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
   809bc:	69bb      	ldr	r3, [r7, #24]
   809be:	4618      	mov	r0, r3
   809c0:	4b45      	ldr	r3, [pc, #276]	; (80ad8 <flash_write+0x140>)
   809c2:	4798      	blx	r3
   809c4:	6278      	str	r0, [r7, #36]	; 0x24
	efc_set_wait_state(p_efc, 6);
   809c6:	69bb      	ldr	r3, [r7, #24]
   809c8:	2106      	movs	r1, #6
   809ca:	4618      	mov	r0, r3
   809cc:	4b43      	ldr	r3, [pc, #268]	; (80adc <flash_write+0x144>)
   809ce:	4798      	blx	r3

	/* Write all pages */
	while (ul_size > 0) {
   809d0:	e071      	b.n	80ab6 <flash_write+0x11e>
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
   809d2:	8abb      	ldrh	r3, [r7, #20]
   809d4:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
   809d8:	687b      	ldr	r3, [r7, #4]
   809da:	4293      	cmp	r3, r2
   809dc:	bf28      	it	cs
   809de:	4613      	movcs	r3, r2
   809e0:	623b      	str	r3, [r7, #32]
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
   809e2:	69b8      	ldr	r0, [r7, #24]
   809e4:	8af9      	ldrh	r1, [r7, #22]
   809e6:	f107 0310 	add.w	r3, r7, #16
   809ea:	2200      	movs	r2, #0
   809ec:	4c3c      	ldr	r4, [pc, #240]	; (80ae0 <flash_write+0x148>)
   809ee:	47a0      	blx	r4
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
   809f0:	8abb      	ldrh	r3, [r7, #20]
   809f2:	425b      	negs	r3, r3
   809f4:	b29a      	uxth	r2, r3
   809f6:	6a3b      	ldr	r3, [r7, #32]
   809f8:	b29b      	uxth	r3, r3
   809fa:	1ad3      	subs	r3, r2, r3
   809fc:	b29b      	uxth	r3, r3
   809fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
   80a02:	83fb      	strh	r3, [r7, #30]

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   80a04:	693b      	ldr	r3, [r7, #16]
   80a06:	4619      	mov	r1, r3
   80a08:	8abb      	ldrh	r3, [r7, #20]
   80a0a:	461a      	mov	r2, r3
   80a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   80a0e:	4b35      	ldr	r3, [pc, #212]	; (80ae4 <flash_write+0x14c>)
   80a10:	4798      	blx	r3

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
   80a12:	8abb      	ldrh	r3, [r7, #20]
   80a14:	461a      	mov	r2, r3
   80a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80a18:	4413      	add	r3, r2
   80a1a:	6a3a      	ldr	r2, [r7, #32]
   80a1c:	68b9      	ldr	r1, [r7, #8]
   80a1e:	4618      	mov	r0, r3
   80a20:	4b30      	ldr	r3, [pc, #192]	; (80ae4 <flash_write+0x14c>)
   80a22:	4798      	blx	r3

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
   80a24:	8abb      	ldrh	r3, [r7, #20]
   80a26:	461a      	mov	r2, r3
   80a28:	6a3b      	ldr	r3, [r7, #32]
   80a2a:	4413      	add	r3, r2
   80a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   80a2e:	18d0      	adds	r0, r2, r3
				(void *)(ul_page_addr + us_offset + writeSize),
   80a30:	8abb      	ldrh	r3, [r7, #20]
   80a32:	461a      	mov	r2, r3
   80a34:	693b      	ldr	r3, [r7, #16]
   80a36:	441a      	add	r2, r3
   80a38:	6a3b      	ldr	r3, [r7, #32]
   80a3a:	4413      	add	r3, r2

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
   80a3c:	4619      	mov	r1, r3
   80a3e:	8bfb      	ldrh	r3, [r7, #30]
   80a40:	461a      	mov	r2, r3
   80a42:	4b28      	ldr	r3, [pc, #160]	; (80ae4 <flash_write+0x14c>)
   80a44:	4798      	blx	r3

		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
   80a46:	693b      	ldr	r3, [r7, #16]
   80a48:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   80a4a:	2300      	movs	r3, #0
   80a4c:	633b      	str	r3, [r7, #48]	; 0x30
   80a4e:	e00a      	b.n	80a66 <flash_write+0xce>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
   80a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80a52:	1d1a      	adds	r2, r3, #4
   80a54:	62fa      	str	r2, [r7, #44]	; 0x2c
   80a56:	491e      	ldr	r1, [pc, #120]	; (80ad0 <flash_write+0x138>)
   80a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   80a5a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   80a5e:	601a      	str	r2, [r3, #0]
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
				++ul_idx) {
   80a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   80a62:	3301      	adds	r3, #1
   80a64:	633b      	str	r3, [r7, #48]	; 0x30
		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   80a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   80a68:	2b3f      	cmp	r3, #63	; 0x3f
   80a6a:	d9f1      	bls.n	80a50 <flash_write+0xb8>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
		}

		if (ul_erase_flag) {
   80a6c:	683b      	ldr	r3, [r7, #0]
   80a6e:	2b00      	cmp	r3, #0
   80a70:	d007      	beq.n	80a82 <flash_write+0xea>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
   80a72:	69bb      	ldr	r3, [r7, #24]
   80a74:	8afa      	ldrh	r2, [r7, #22]
   80a76:	2103      	movs	r1, #3
   80a78:	4618      	mov	r0, r3
   80a7a:	4b1b      	ldr	r3, [pc, #108]	; (80ae8 <flash_write+0x150>)
   80a7c:	4798      	blx	r3
   80a7e:	6378      	str	r0, [r7, #52]	; 0x34
   80a80:	e006      	b.n	80a90 <flash_write+0xf8>
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
   80a82:	69bb      	ldr	r3, [r7, #24]
   80a84:	8afa      	ldrh	r2, [r7, #22]
   80a86:	2101      	movs	r1, #1
   80a88:	4618      	mov	r0, r3
   80a8a:	4b17      	ldr	r3, [pc, #92]	; (80ae8 <flash_write+0x150>)
   80a8c:	4798      	blx	r3
   80a8e:	6378      	str	r0, [r7, #52]	; 0x34
					us_page);
		}

		if (ul_error) {
   80a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80a92:	2b00      	cmp	r3, #0
   80a94:	d001      	beq.n	80a9a <flash_write+0x102>
			return ul_error;
   80a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80a98:	e016      	b.n	80ac8 <flash_write+0x130>
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
   80a9a:	68ba      	ldr	r2, [r7, #8]
   80a9c:	6a3b      	ldr	r3, [r7, #32]
   80a9e:	4413      	add	r3, r2
   80aa0:	60bb      	str	r3, [r7, #8]
		ul_size -= writeSize;
   80aa2:	687a      	ldr	r2, [r7, #4]
   80aa4:	6a3b      	ldr	r3, [r7, #32]
   80aa6:	1ad3      	subs	r3, r2, r3
   80aa8:	607b      	str	r3, [r7, #4]
		us_page++;
   80aaa:	8afb      	ldrh	r3, [r7, #22]
   80aac:	3301      	adds	r3, #1
   80aae:	b29b      	uxth	r3, r3
   80ab0:	82fb      	strh	r3, [r7, #22]
		us_offset = 0;
   80ab2:	2300      	movs	r3, #0
   80ab4:	82bb      	strh	r3, [r7, #20]
	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
	efc_set_wait_state(p_efc, 6);

	/* Write all pages */
	while (ul_size > 0) {
   80ab6:	687b      	ldr	r3, [r7, #4]
   80ab8:	2b00      	cmp	r3, #0
   80aba:	d18a      	bne.n	809d2 <flash_write+0x3a>
		us_page++;
		us_offset = 0;
	}

	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
   80abc:	69bb      	ldr	r3, [r7, #24]
   80abe:	6a79      	ldr	r1, [r7, #36]	; 0x24
   80ac0:	4618      	mov	r0, r3
   80ac2:	4b06      	ldr	r3, [pc, #24]	; (80adc <flash_write+0x144>)
   80ac4:	4798      	blx	r3

	return FLASH_RC_OK;
   80ac6:	2300      	movs	r3, #0
}
   80ac8:	4618      	mov	r0, r3
   80aca:	373c      	adds	r7, #60	; 0x3c
   80acc:	46bd      	mov	sp, r7
   80ace:	bd90      	pop	{r4, r7, pc}
   80ad0:	20071500 	.word	0x20071500
   80ad4:	00080849 	.word	0x00080849
   80ad8:	00080519 	.word	0x00080519
   80adc:	000804e5 	.word	0x000804e5
   80ae0:	000808c5 	.word	0x000808c5
   80ae4:	000a427d 	.word	0x000a427d
   80ae8:	00080535 	.word	0x00080535

00080aec <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80aec:	b590      	push	{r4, r7, lr}
   80aee:	b08b      	sub	sp, #44	; 0x2c
   80af0:	af00      	add	r7, sp, #0
   80af2:	60f8      	str	r0, [r7, #12]
   80af4:	60b9      	str	r1, [r7, #8]
   80af6:	607a      	str	r2, [r7, #4]
   80af8:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
   80afa:	2340      	movs	r3, #64	; 0x40
   80afc:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
   80afe:	f107 0314 	add.w	r3, r7, #20
   80b02:	f107 0218 	add.w	r2, r7, #24
   80b06:	68b9      	ldr	r1, [r7, #8]
   80b08:	68f8      	ldr	r0, [r7, #12]
   80b0a:	4c1c      	ldr	r4, [pc, #112]	; (80b7c <flash_lock+0x90>)
   80b0c:	47a0      	blx	r4

	if (pul_actual_start != NULL) {
   80b0e:	687b      	ldr	r3, [r7, #4]
   80b10:	2b00      	cmp	r3, #0
   80b12:	d002      	beq.n	80b1a <flash_lock+0x2e>
		*pul_actual_start = ul_actual_start;
   80b14:	69ba      	ldr	r2, [r7, #24]
   80b16:	687b      	ldr	r3, [r7, #4]
   80b18:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end != NULL) {
   80b1a:	683b      	ldr	r3, [r7, #0]
   80b1c:	2b00      	cmp	r3, #0
   80b1e:	d002      	beq.n	80b26 <flash_lock+0x3a>
		*pul_actual_end = ul_actual_end;
   80b20:	697a      	ldr	r2, [r7, #20]
   80b22:	683b      	ldr	r3, [r7, #0]
   80b24:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   80b26:	69b9      	ldr	r1, [r7, #24]
   80b28:	f107 0212 	add.w	r2, r7, #18
   80b2c:	f107 001c 	add.w	r0, r7, #28
   80b30:	2300      	movs	r3, #0
   80b32:	4c13      	ldr	r4, [pc, #76]	; (80b80 <flash_lock+0x94>)
   80b34:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
   80b36:	6979      	ldr	r1, [r7, #20]
   80b38:	f107 0210 	add.w	r2, r7, #16
   80b3c:	2300      	movs	r3, #0
   80b3e:	2000      	movs	r0, #0
   80b40:	4c0f      	ldr	r4, [pc, #60]	; (80b80 <flash_lock+0x94>)
   80b42:	47a0      	blx	r4

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   80b44:	e010      	b.n	80b68 <flash_lock+0x7c>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
   80b46:	69fb      	ldr	r3, [r7, #28]
   80b48:	8a7a      	ldrh	r2, [r7, #18]
   80b4a:	2108      	movs	r1, #8
   80b4c:	4618      	mov	r0, r3
   80b4e:	4b0d      	ldr	r3, [pc, #52]	; (80b84 <flash_lock+0x98>)
   80b50:	4798      	blx	r3
   80b52:	6238      	str	r0, [r7, #32]

		if (ul_error) {
   80b54:	6a3b      	ldr	r3, [r7, #32]
   80b56:	2b00      	cmp	r3, #0
   80b58:	d001      	beq.n	80b5e <flash_lock+0x72>
			return ul_error;
   80b5a:	6a3b      	ldr	r3, [r7, #32]
   80b5c:	e009      	b.n	80b72 <flash_lock+0x86>
		}
		us_start_page += us_num_pages_in_region;
   80b5e:	8a7a      	ldrh	r2, [r7, #18]
   80b60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   80b62:	4413      	add	r3, r2
   80b64:	b29b      	uxth	r3, r3
   80b66:	827b      	strh	r3, [r7, #18]
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   80b68:	8a7a      	ldrh	r2, [r7, #18]
   80b6a:	8a3b      	ldrh	r3, [r7, #16]
   80b6c:	429a      	cmp	r2, r3
   80b6e:	d3ea      	bcc.n	80b46 <flash_lock+0x5a>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
   80b70:	2300      	movs	r3, #0
}
   80b72:	4618      	mov	r0, r3
   80b74:	372c      	adds	r7, #44	; 0x2c
   80b76:	46bd      	mov	sp, r7
   80b78:	bd90      	pop	{r4, r7, pc}
   80b7a:	bf00      	nop
   80b7c:	00080915 	.word	0x00080915
   80b80:	00080849 	.word	0x00080849
   80b84:	00080535 	.word	0x00080535

00080b88 <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80b88:	b590      	push	{r4, r7, lr}
   80b8a:	b08b      	sub	sp, #44	; 0x2c
   80b8c:	af00      	add	r7, sp, #0
   80b8e:	60f8      	str	r0, [r7, #12]
   80b90:	60b9      	str	r1, [r7, #8]
   80b92:	607a      	str	r2, [r7, #4]
   80b94:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
   80b96:	2340      	movs	r3, #64	; 0x40
   80b98:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
   80b9a:	f107 0314 	add.w	r3, r7, #20
   80b9e:	f107 0218 	add.w	r2, r7, #24
   80ba2:	68b9      	ldr	r1, [r7, #8]
   80ba4:	68f8      	ldr	r0, [r7, #12]
   80ba6:	4c1c      	ldr	r4, [pc, #112]	; (80c18 <flash_unlock+0x90>)
   80ba8:	47a0      	blx	r4
	if (pul_actual_start != NULL) {
   80baa:	687b      	ldr	r3, [r7, #4]
   80bac:	2b00      	cmp	r3, #0
   80bae:	d002      	beq.n	80bb6 <flash_unlock+0x2e>
		*pul_actual_start = ul_actual_start;
   80bb0:	69ba      	ldr	r2, [r7, #24]
   80bb2:	687b      	ldr	r3, [r7, #4]
   80bb4:	601a      	str	r2, [r3, #0]
	}
	if (pul_actual_end != NULL) {
   80bb6:	683b      	ldr	r3, [r7, #0]
   80bb8:	2b00      	cmp	r3, #0
   80bba:	d002      	beq.n	80bc2 <flash_unlock+0x3a>
		*pul_actual_end = ul_actual_end;
   80bbc:	697a      	ldr	r2, [r7, #20]
   80bbe:	683b      	ldr	r3, [r7, #0]
   80bc0:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   80bc2:	69b9      	ldr	r1, [r7, #24]
   80bc4:	f107 0212 	add.w	r2, r7, #18
   80bc8:	f107 001c 	add.w	r0, r7, #28
   80bcc:	2300      	movs	r3, #0
   80bce:	4c13      	ldr	r4, [pc, #76]	; (80c1c <flash_unlock+0x94>)
   80bd0:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
   80bd2:	6979      	ldr	r1, [r7, #20]
   80bd4:	f107 0210 	add.w	r2, r7, #16
   80bd8:	2300      	movs	r3, #0
   80bda:	2000      	movs	r0, #0
   80bdc:	4c0f      	ldr	r4, [pc, #60]	; (80c1c <flash_unlock+0x94>)
   80bde:	47a0      	blx	r4

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80be0:	e010      	b.n	80c04 <flash_unlock+0x7c>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
   80be2:	69fb      	ldr	r3, [r7, #28]
   80be4:	8a7a      	ldrh	r2, [r7, #18]
   80be6:	2109      	movs	r1, #9
   80be8:	4618      	mov	r0, r3
   80bea:	4b0d      	ldr	r3, [pc, #52]	; (80c20 <flash_unlock+0x98>)
   80bec:	4798      	blx	r3
   80bee:	6238      	str	r0, [r7, #32]
				us_start_page);
		if (ul_error) {
   80bf0:	6a3b      	ldr	r3, [r7, #32]
   80bf2:	2b00      	cmp	r3, #0
   80bf4:	d001      	beq.n	80bfa <flash_unlock+0x72>
			return ul_error;
   80bf6:	6a3b      	ldr	r3, [r7, #32]
   80bf8:	e009      	b.n	80c0e <flash_unlock+0x86>
		}
		us_start_page += us_num_pages_in_region;
   80bfa:	8a7a      	ldrh	r2, [r7, #18]
   80bfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   80bfe:	4413      	add	r3, r2
   80c00:	b29b      	uxth	r3, r3
   80c02:	827b      	strh	r3, [r7, #18]
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80c04:	8a7a      	ldrh	r2, [r7, #18]
   80c06:	8a3b      	ldrh	r3, [r7, #16]
   80c08:	429a      	cmp	r2, r3
   80c0a:	d3ea      	bcc.n	80be2 <flash_unlock+0x5a>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
   80c0c:	2300      	movs	r3, #0
}
   80c0e:	4618      	mov	r0, r3
   80c10:	372c      	adds	r7, #44	; 0x2c
   80c12:	46bd      	mov	sp, r7
   80c14:	bd90      	pop	{r4, r7, pc}
   80c16:	bf00      	nop
   80c18:	00080915 	.word	0x00080915
   80c1c:	00080849 	.word	0x00080849
   80c20:	00080535 	.word	0x00080535

00080c24 <flash_set_gpnvm>:
 * \param ul_gpnvm GPNVM bit index.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_set_gpnvm(uint32_t ul_gpnvm)
{
   80c24:	b580      	push	{r7, lr}
   80c26:	b082      	sub	sp, #8
   80c28:	af00      	add	r7, sp, #0
   80c2a:	6078      	str	r0, [r7, #4]
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80c2c:	687b      	ldr	r3, [r7, #4]
   80c2e:	2b02      	cmp	r3, #2
   80c30:	d901      	bls.n	80c36 <flash_set_gpnvm+0x12>
		return FLASH_RC_INVALID;
   80c32:	2311      	movs	r3, #17
   80c34:	e012      	b.n	80c5c <flash_set_gpnvm+0x38>
	}

	if (FLASH_RC_YES == flash_is_gpnvm_set(ul_gpnvm)) {
   80c36:	6878      	ldr	r0, [r7, #4]
   80c38:	4b0a      	ldr	r3, [pc, #40]	; (80c64 <flash_set_gpnvm+0x40>)
   80c3a:	4798      	blx	r3
   80c3c:	4603      	mov	r3, r0
   80c3e:	2b01      	cmp	r3, #1
   80c40:	d101      	bne.n	80c46 <flash_set_gpnvm+0x22>
		return FLASH_RC_OK;
   80c42:	2300      	movs	r3, #0
   80c44:	e00a      	b.n	80c5c <flash_set_gpnvm+0x38>
	}

	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_SGPB, ul_gpnvm)) {
   80c46:	687a      	ldr	r2, [r7, #4]
   80c48:	210b      	movs	r1, #11
   80c4a:	4807      	ldr	r0, [pc, #28]	; (80c68 <flash_set_gpnvm+0x44>)
   80c4c:	4b07      	ldr	r3, [pc, #28]	; (80c6c <flash_set_gpnvm+0x48>)
   80c4e:	4798      	blx	r3
   80c50:	4603      	mov	r3, r0
   80c52:	2b00      	cmp	r3, #0
   80c54:	d101      	bne.n	80c5a <flash_set_gpnvm+0x36>
		return FLASH_RC_OK;
   80c56:	2300      	movs	r3, #0
   80c58:	e000      	b.n	80c5c <flash_set_gpnvm+0x38>
	}

	return FLASH_RC_ERROR;
   80c5a:	2310      	movs	r3, #16
}
   80c5c:	4618      	mov	r0, r3
   80c5e:	3708      	adds	r7, #8
   80c60:	46bd      	mov	sp, r7
   80c62:	bd80      	pop	{r7, pc}
   80c64:	00080c71 	.word	0x00080c71
   80c68:	400e0a00 	.word	0x400e0a00
   80c6c:	00080535 	.word	0x00080535

00080c70 <flash_is_gpnvm_set>:
 * \retval 1 If the given GPNVM bit is currently set.
 * \retval 0 If the given GPNVM bit is currently cleared.
 * otherwise returns an error code.
 */
uint32_t flash_is_gpnvm_set(uint32_t ul_gpnvm)
{
   80c70:	b580      	push	{r7, lr}
   80c72:	b084      	sub	sp, #16
   80c74:	af00      	add	r7, sp, #0
   80c76:	6078      	str	r0, [r7, #4]
	uint32_t ul_gpnvm_bits;

	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80c78:	687b      	ldr	r3, [r7, #4]
   80c7a:	2b02      	cmp	r3, #2
   80c7c:	d901      	bls.n	80c82 <flash_is_gpnvm_set+0x12>
		return FLASH_RC_INVALID;
   80c7e:	2311      	movs	r3, #17
   80c80:	e019      	b.n	80cb6 <flash_is_gpnvm_set+0x46>
	}

	if (EFC_RC_OK != efc_perform_command(EFC, EFC_FCMD_GGPB, 0)) {
   80c82:	2200      	movs	r2, #0
   80c84:	210d      	movs	r1, #13
   80c86:	480e      	ldr	r0, [pc, #56]	; (80cc0 <flash_is_gpnvm_set+0x50>)
   80c88:	4b0e      	ldr	r3, [pc, #56]	; (80cc4 <flash_is_gpnvm_set+0x54>)
   80c8a:	4798      	blx	r3
   80c8c:	4603      	mov	r3, r0
   80c8e:	2b00      	cmp	r3, #0
   80c90:	d001      	beq.n	80c96 <flash_is_gpnvm_set+0x26>
		return FLASH_RC_ERROR;
   80c92:	2310      	movs	r3, #16
   80c94:	e00f      	b.n	80cb6 <flash_is_gpnvm_set+0x46>
	}

	ul_gpnvm_bits = efc_get_result(EFC);
   80c96:	480a      	ldr	r0, [pc, #40]	; (80cc0 <flash_is_gpnvm_set+0x50>)
   80c98:	4b0b      	ldr	r3, [pc, #44]	; (80cc8 <flash_is_gpnvm_set+0x58>)
   80c9a:	4798      	blx	r3
   80c9c:	60f8      	str	r0, [r7, #12]
	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
   80c9e:	2201      	movs	r2, #1
   80ca0:	687b      	ldr	r3, [r7, #4]
   80ca2:	fa02 f303 	lsl.w	r3, r2, r3
   80ca6:	461a      	mov	r2, r3
   80ca8:	68fb      	ldr	r3, [r7, #12]
   80caa:	4013      	ands	r3, r2
   80cac:	2b00      	cmp	r3, #0
   80cae:	d001      	beq.n	80cb4 <flash_is_gpnvm_set+0x44>
		return FLASH_RC_YES;
   80cb0:	2301      	movs	r3, #1
   80cb2:	e000      	b.n	80cb6 <flash_is_gpnvm_set+0x46>
	}

	return FLASH_RC_NO;
   80cb4:	2300      	movs	r3, #0
}
   80cb6:	4618      	mov	r0, r3
   80cb8:	3710      	adds	r7, #16
   80cba:	46bd      	mov	sp, r7
   80cbc:	bd80      	pop	{r7, pc}
   80cbe:	bf00      	nop
   80cc0:	400e0a00 	.word	0x400e0a00
   80cc4:	00080535 	.word	0x00080535
   80cc8:	000805a9 	.word	0x000805a9

00080ccc <flash_enable_security_bit>:
 * \brief Set security bit.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_enable_security_bit(void)
{
   80ccc:	b580      	push	{r7, lr}
   80cce:	af00      	add	r7, sp, #0
	return flash_set_gpnvm(0);
   80cd0:	2000      	movs	r0, #0
   80cd2:	4b02      	ldr	r3, [pc, #8]	; (80cdc <flash_enable_security_bit+0x10>)
   80cd4:	4798      	blx	r3
   80cd6:	4603      	mov	r3, r0
}
   80cd8:	4618      	mov	r0, r3
   80cda:	bd80      	pop	{r7, pc}
   80cdc:	00080c25 	.word	0x00080c25

00080ce0 <Cl_Init_Alarms>:
   80ce0:	b580      	push	{r7, lr}
   80ce2:	b082      	sub	sp, #8
   80ce4:	af00      	add	r7, sp, #0
   80ce6:	2304      	movs	r3, #4
   80ce8:	71fb      	strb	r3, [r7, #7]
   80cea:	4b10      	ldr	r3, [pc, #64]	; (80d2c <Cl_Init_Alarms+0x4c>)
   80cec:	4798      	blx	r3
   80cee:	4603      	mov	r3, r0
   80cf0:	71fb      	strb	r3, [r7, #7]
   80cf2:	79fb      	ldrb	r3, [r7, #7]
   80cf4:	2b00      	cmp	r3, #0
   80cf6:	d001      	beq.n	80cfc <Cl_Init_Alarms+0x1c>
   80cf8:	4b0d      	ldr	r3, [pc, #52]	; (80d30 <Cl_Init_Alarms+0x50>)
   80cfa:	4798      	blx	r3
   80cfc:	4b0d      	ldr	r3, [pc, #52]	; (80d34 <Cl_Init_Alarms+0x54>)
   80cfe:	4798      	blx	r3
   80d00:	4603      	mov	r3, r0
   80d02:	71fb      	strb	r3, [r7, #7]
   80d04:	79fb      	ldrb	r3, [r7, #7]
   80d06:	2b00      	cmp	r3, #0
   80d08:	d001      	beq.n	80d0e <Cl_Init_Alarms+0x2e>
   80d0a:	4b09      	ldr	r3, [pc, #36]	; (80d30 <Cl_Init_Alarms+0x50>)
   80d0c:	4798      	blx	r3
   80d0e:	4b0a      	ldr	r3, [pc, #40]	; (80d38 <Cl_Init_Alarms+0x58>)
   80d10:	4798      	blx	r3
   80d12:	4603      	mov	r3, r0
   80d14:	71fb      	strb	r3, [r7, #7]
   80d16:	79fb      	ldrb	r3, [r7, #7]
   80d18:	2b00      	cmp	r3, #0
   80d1a:	d001      	beq.n	80d20 <Cl_Init_Alarms+0x40>
   80d1c:	4b04      	ldr	r3, [pc, #16]	; (80d30 <Cl_Init_Alarms+0x50>)
   80d1e:	4798      	blx	r3
   80d20:	2300      	movs	r3, #0
   80d22:	4618      	mov	r0, r3
   80d24:	3708      	adds	r7, #8
   80d26:	46bd      	mov	sp, r7
   80d28:	bd80      	pop	{r7, pc}
   80d2a:	bf00      	nop
   80d2c:	00080d3d 	.word	0x00080d3d
   80d30:	00088725 	.word	0x00088725
   80d34:	0008eecd 	.word	0x0008eecd
   80d38:	0008e88d 	.word	0x0008e88d

00080d3c <Cl_LoadAlarmThresholdTable>:
   80d3c:	b480      	push	{r7}
   80d3e:	af00      	add	r7, sp, #0
   80d40:	4b3b      	ldr	r3, [pc, #236]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d42:	220d      	movs	r2, #13
   80d44:	801a      	strh	r2, [r3, #0]
   80d46:	4b3a      	ldr	r3, [pc, #232]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d48:	220e      	movs	r2, #14
   80d4a:	805a      	strh	r2, [r3, #2]
   80d4c:	4b38      	ldr	r3, [pc, #224]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d4e:	2200      	movs	r2, #0
   80d50:	809a      	strh	r2, [r3, #4]
   80d52:	4b37      	ldr	r3, [pc, #220]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d54:	f242 7210 	movw	r2, #10000	; 0x2710
   80d58:	80da      	strh	r2, [r3, #6]
   80d5a:	4b35      	ldr	r3, [pc, #212]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d5c:	4a35      	ldr	r2, [pc, #212]	; (80e34 <Cl_LoadAlarmThresholdTable+0xf8>)
   80d5e:	609a      	str	r2, [r3, #8]
   80d60:	4b33      	ldr	r3, [pc, #204]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d62:	4a35      	ldr	r2, [pc, #212]	; (80e38 <Cl_LoadAlarmThresholdTable+0xfc>)
   80d64:	60da      	str	r2, [r3, #12]
   80d66:	4b32      	ldr	r3, [pc, #200]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d68:	4a32      	ldr	r2, [pc, #200]	; (80e34 <Cl_LoadAlarmThresholdTable+0xf8>)
   80d6a:	611a      	str	r2, [r3, #16]
   80d6c:	4b30      	ldr	r3, [pc, #192]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d6e:	4a32      	ldr	r2, [pc, #200]	; (80e38 <Cl_LoadAlarmThresholdTable+0xfc>)
   80d70:	615a      	str	r2, [r3, #20]
   80d72:	4b2f      	ldr	r3, [pc, #188]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d74:	4a31      	ldr	r2, [pc, #196]	; (80e3c <Cl_LoadAlarmThresholdTable+0x100>)
   80d76:	619a      	str	r2, [r3, #24]
   80d78:	4b2d      	ldr	r3, [pc, #180]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d7a:	4a31      	ldr	r2, [pc, #196]	; (80e40 <Cl_LoadAlarmThresholdTable+0x104>)
   80d7c:	61da      	str	r2, [r3, #28]
   80d7e:	4b2c      	ldr	r3, [pc, #176]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d80:	4a2e      	ldr	r2, [pc, #184]	; (80e3c <Cl_LoadAlarmThresholdTable+0x100>)
   80d82:	621a      	str	r2, [r3, #32]
   80d84:	4b2a      	ldr	r3, [pc, #168]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d86:	4a2c      	ldr	r2, [pc, #176]	; (80e38 <Cl_LoadAlarmThresholdTable+0xfc>)
   80d88:	625a      	str	r2, [r3, #36]	; 0x24
   80d8a:	4b29      	ldr	r3, [pc, #164]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d8c:	4a2d      	ldr	r2, [pc, #180]	; (80e44 <Cl_LoadAlarmThresholdTable+0x108>)
   80d8e:	629a      	str	r2, [r3, #40]	; 0x28
   80d90:	4b27      	ldr	r3, [pc, #156]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d92:	4a29      	ldr	r2, [pc, #164]	; (80e38 <Cl_LoadAlarmThresholdTable+0xfc>)
   80d94:	62da      	str	r2, [r3, #44]	; 0x2c
   80d96:	4b26      	ldr	r3, [pc, #152]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d98:	4a2b      	ldr	r2, [pc, #172]	; (80e48 <Cl_LoadAlarmThresholdTable+0x10c>)
   80d9a:	639a      	str	r2, [r3, #56]	; 0x38
   80d9c:	4b24      	ldr	r3, [pc, #144]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d9e:	4a2b      	ldr	r2, [pc, #172]	; (80e4c <Cl_LoadAlarmThresholdTable+0x110>)
   80da0:	63da      	str	r2, [r3, #60]	; 0x3c
   80da2:	4b23      	ldr	r3, [pc, #140]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80da4:	4a2a      	ldr	r2, [pc, #168]	; (80e50 <Cl_LoadAlarmThresholdTable+0x114>)
   80da6:	641a      	str	r2, [r3, #64]	; 0x40
   80da8:	4b21      	ldr	r3, [pc, #132]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80daa:	4a28      	ldr	r2, [pc, #160]	; (80e4c <Cl_LoadAlarmThresholdTable+0x110>)
   80dac:	645a      	str	r2, [r3, #68]	; 0x44
   80dae:	4b20      	ldr	r3, [pc, #128]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80db0:	4a27      	ldr	r2, [pc, #156]	; (80e50 <Cl_LoadAlarmThresholdTable+0x114>)
   80db2:	649a      	str	r2, [r3, #72]	; 0x48
   80db4:	4b1e      	ldr	r3, [pc, #120]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80db6:	4a25      	ldr	r2, [pc, #148]	; (80e4c <Cl_LoadAlarmThresholdTable+0x110>)
   80db8:	64da      	str	r2, [r3, #76]	; 0x4c
   80dba:	4b1d      	ldr	r3, [pc, #116]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80dbc:	4a25      	ldr	r2, [pc, #148]	; (80e54 <Cl_LoadAlarmThresholdTable+0x118>)
   80dbe:	651a      	str	r2, [r3, #80]	; 0x50
   80dc0:	4b1b      	ldr	r3, [pc, #108]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80dc2:	f242 7210 	movw	r2, #10000	; 0x2710
   80dc6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
   80dca:	4b19      	ldr	r3, [pc, #100]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80dcc:	2200      	movs	r2, #0
   80dce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
   80dd2:	4b17      	ldr	r3, [pc, #92]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80dd4:	f242 7210 	movw	r2, #10000	; 0x2710
   80dd8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
   80ddc:	4b14      	ldr	r3, [pc, #80]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80dde:	2200      	movs	r2, #0
   80de0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
   80de4:	4b12      	ldr	r3, [pc, #72]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80de6:	f242 7210 	movw	r2, #10000	; 0x2710
   80dea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
   80dee:	4b10      	ldr	r3, [pc, #64]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80df0:	2200      	movs	r2, #0
   80df2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
   80df6:	4b0e      	ldr	r3, [pc, #56]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80df8:	2205      	movs	r2, #5
   80dfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
   80dfe:	4b0c      	ldr	r3, [pc, #48]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80e00:	2214      	movs	r2, #20
   80e02:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
   80e06:	4b0a      	ldr	r3, [pc, #40]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80e08:	221e      	movs	r2, #30
   80e0a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
   80e0e:	4b08      	ldr	r3, [pc, #32]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80e10:	2205      	movs	r2, #5
   80e12:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
   80e16:	4b06      	ldr	r3, [pc, #24]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80e18:	221e      	movs	r2, #30
   80e1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
   80e1e:	4b04      	ldr	r3, [pc, #16]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80e20:	2205      	movs	r2, #5
   80e22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
   80e26:	2300      	movs	r3, #0
   80e28:	4618      	mov	r0, r3
   80e2a:	46bd      	mov	sp, r7
   80e2c:	bc80      	pop	{r7}
   80e2e:	4770      	bx	lr
   80e30:	20072d08 	.word	0x20072d08
   80e34:	43fa0000 	.word	0x43fa0000
   80e38:	c3960000 	.word	0xc3960000
   80e3c:	43c80000 	.word	0x43c80000
   80e40:	c3480000 	.word	0xc3480000
   80e44:	447a0000 	.word	0x447a0000
   80e48:	42140000 	.word	0x42140000
   80e4c:	41c80000 	.word	0x41c80000
   80e50:	42a00000 	.word	0x42a00000
   80e54:	42340000 	.word	0x42340000

00080e58 <Cl_Alarm_translate_sensor_values>:
   80e58:	b5f0      	push	{r4, r5, r6, r7, lr}
   80e5a:	b087      	sub	sp, #28
   80e5c:	af00      	add	r7, sp, #0
   80e5e:	2304      	movs	r3, #4
   80e60:	75fb      	strb	r3, [r7, #23]
   80e62:	4b89      	ldr	r3, [pc, #548]	; (81088 <Cl_Alarm_translate_sensor_values+0x230>)
   80e64:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   80e66:	461a      	mov	r2, r3
   80e68:	f640 43e4 	movw	r3, #3300	; 0xce4
   80e6c:	fb03 f302 	mul.w	r3, r3, r2
   80e70:	2b00      	cmp	r3, #0
   80e72:	da01      	bge.n	80e78 <Cl_Alarm_translate_sensor_values+0x20>
   80e74:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80e78:	131b      	asrs	r3, r3, #12
   80e7a:	461a      	mov	r2, r3
   80e7c:	4b83      	ldr	r3, [pc, #524]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   80e7e:	4610      	mov	r0, r2
   80e80:	4798      	blx	r3
   80e82:	4603      	mov	r3, r0
   80e84:	613b      	str	r3, [r7, #16]
   80e86:	4b82      	ldr	r3, [pc, #520]	; (81090 <Cl_Alarm_translate_sensor_values+0x238>)
   80e88:	6938      	ldr	r0, [r7, #16]
   80e8a:	4798      	blx	r3
   80e8c:	4603      	mov	r3, r0
   80e8e:	b21b      	sxth	r3, r3
   80e90:	4618      	mov	r0, r3
   80e92:	4b80      	ldr	r3, [pc, #512]	; (81094 <Cl_Alarm_translate_sensor_values+0x23c>)
   80e94:	4798      	blx	r3
   80e96:	4b80      	ldr	r3, [pc, #512]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   80e98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   80e9c:	2b00      	cmp	r3, #0
   80e9e:	d015      	beq.n	80ecc <Cl_Alarm_translate_sensor_values+0x74>
   80ea0:	2205      	movs	r2, #5
   80ea2:	497e      	ldr	r1, [pc, #504]	; (8109c <Cl_Alarm_translate_sensor_values+0x244>)
   80ea4:	2018      	movs	r0, #24
   80ea6:	4b7e      	ldr	r3, [pc, #504]	; (810a0 <Cl_Alarm_translate_sensor_values+0x248>)
   80ea8:	4798      	blx	r3
   80eaa:	4603      	mov	r3, r0
   80eac:	75fb      	strb	r3, [r7, #23]
   80eae:	7dfb      	ldrb	r3, [r7, #23]
   80eb0:	2b00      	cmp	r3, #0
   80eb2:	d001      	beq.n	80eb8 <Cl_Alarm_translate_sensor_values+0x60>
   80eb4:	4b7b      	ldr	r3, [pc, #492]	; (810a4 <Cl_Alarm_translate_sensor_values+0x24c>)
   80eb6:	4798      	blx	r3
   80eb8:	4b77      	ldr	r3, [pc, #476]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   80eba:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
   80ebe:	4b73      	ldr	r3, [pc, #460]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   80ec0:	4610      	mov	r0, r2
   80ec2:	4798      	blx	r3
   80ec4:	4602      	mov	r2, r0
   80ec6:	4b78      	ldr	r3, [pc, #480]	; (810a8 <Cl_Alarm_translate_sensor_values+0x250>)
   80ec8:	601a      	str	r2, [r3, #0]
   80eca:	e016      	b.n	80efa <Cl_Alarm_translate_sensor_values+0xa2>
   80ecc:	4b76      	ldr	r3, [pc, #472]	; (810a8 <Cl_Alarm_translate_sensor_values+0x250>)
   80ece:	681a      	ldr	r2, [r3, #0]
   80ed0:	4b76      	ldr	r3, [pc, #472]	; (810ac <Cl_Alarm_translate_sensor_values+0x254>)
   80ed2:	4977      	ldr	r1, [pc, #476]	; (810b0 <Cl_Alarm_translate_sensor_values+0x258>)
   80ed4:	4610      	mov	r0, r2
   80ed6:	4798      	blx	r3
   80ed8:	4603      	mov	r3, r0
   80eda:	4618      	mov	r0, r3
   80edc:	4b75      	ldr	r3, [pc, #468]	; (810b4 <Cl_Alarm_translate_sensor_values+0x25c>)
   80ede:	681a      	ldr	r2, [r3, #0]
   80ee0:	4b75      	ldr	r3, [pc, #468]	; (810b8 <Cl_Alarm_translate_sensor_values+0x260>)
   80ee2:	4611      	mov	r1, r2
   80ee4:	4798      	blx	r3
   80ee6:	4603      	mov	r3, r0
   80ee8:	461a      	mov	r2, r3
   80eea:	4b74      	ldr	r3, [pc, #464]	; (810bc <Cl_Alarm_translate_sensor_values+0x264>)
   80eec:	4974      	ldr	r1, [pc, #464]	; (810c0 <Cl_Alarm_translate_sensor_values+0x268>)
   80eee:	4610      	mov	r0, r2
   80ef0:	4798      	blx	r3
   80ef2:	4603      	mov	r3, r0
   80ef4:	461a      	mov	r2, r3
   80ef6:	4b6c      	ldr	r3, [pc, #432]	; (810a8 <Cl_Alarm_translate_sensor_values+0x250>)
   80ef8:	601a      	str	r2, [r3, #0]
   80efa:	4b63      	ldr	r3, [pc, #396]	; (81088 <Cl_Alarm_translate_sensor_values+0x230>)
   80efc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   80efe:	461a      	mov	r2, r3
   80f00:	f640 43e4 	movw	r3, #3300	; 0xce4
   80f04:	fb03 f302 	mul.w	r3, r3, r2
   80f08:	2b00      	cmp	r3, #0
   80f0a:	da01      	bge.n	80f10 <Cl_Alarm_translate_sensor_values+0xb8>
   80f0c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80f10:	131b      	asrs	r3, r3, #12
   80f12:	461a      	mov	r2, r3
   80f14:	4b5d      	ldr	r3, [pc, #372]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   80f16:	4610      	mov	r0, r2
   80f18:	4798      	blx	r3
   80f1a:	4603      	mov	r3, r0
   80f1c:	613b      	str	r3, [r7, #16]
   80f1e:	4b5c      	ldr	r3, [pc, #368]	; (81090 <Cl_Alarm_translate_sensor_values+0x238>)
   80f20:	6938      	ldr	r0, [r7, #16]
   80f22:	4798      	blx	r3
   80f24:	4603      	mov	r3, r0
   80f26:	b21b      	sxth	r3, r3
   80f28:	4618      	mov	r0, r3
   80f2a:	4b66      	ldr	r3, [pc, #408]	; (810c4 <Cl_Alarm_translate_sensor_values+0x26c>)
   80f2c:	4798      	blx	r3
   80f2e:	4b5a      	ldr	r3, [pc, #360]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   80f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   80f34:	2b00      	cmp	r3, #0
   80f36:	d015      	beq.n	80f64 <Cl_Alarm_translate_sensor_values+0x10c>
   80f38:	2205      	movs	r2, #5
   80f3a:	4963      	ldr	r1, [pc, #396]	; (810c8 <Cl_Alarm_translate_sensor_values+0x270>)
   80f3c:	2018      	movs	r0, #24
   80f3e:	4b58      	ldr	r3, [pc, #352]	; (810a0 <Cl_Alarm_translate_sensor_values+0x248>)
   80f40:	4798      	blx	r3
   80f42:	4603      	mov	r3, r0
   80f44:	75fb      	strb	r3, [r7, #23]
   80f46:	7dfb      	ldrb	r3, [r7, #23]
   80f48:	2b00      	cmp	r3, #0
   80f4a:	d001      	beq.n	80f50 <Cl_Alarm_translate_sensor_values+0xf8>
   80f4c:	4b55      	ldr	r3, [pc, #340]	; (810a4 <Cl_Alarm_translate_sensor_values+0x24c>)
   80f4e:	4798      	blx	r3
   80f50:	4b51      	ldr	r3, [pc, #324]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   80f52:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   80f56:	4b4d      	ldr	r3, [pc, #308]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   80f58:	4610      	mov	r0, r2
   80f5a:	4798      	blx	r3
   80f5c:	4602      	mov	r2, r0
   80f5e:	4b5b      	ldr	r3, [pc, #364]	; (810cc <Cl_Alarm_translate_sensor_values+0x274>)
   80f60:	601a      	str	r2, [r3, #0]
   80f62:	e016      	b.n	80f92 <Cl_Alarm_translate_sensor_values+0x13a>
   80f64:	4b59      	ldr	r3, [pc, #356]	; (810cc <Cl_Alarm_translate_sensor_values+0x274>)
   80f66:	681a      	ldr	r2, [r3, #0]
   80f68:	4b50      	ldr	r3, [pc, #320]	; (810ac <Cl_Alarm_translate_sensor_values+0x254>)
   80f6a:	4951      	ldr	r1, [pc, #324]	; (810b0 <Cl_Alarm_translate_sensor_values+0x258>)
   80f6c:	4610      	mov	r0, r2
   80f6e:	4798      	blx	r3
   80f70:	4603      	mov	r3, r0
   80f72:	4618      	mov	r0, r3
   80f74:	4b56      	ldr	r3, [pc, #344]	; (810d0 <Cl_Alarm_translate_sensor_values+0x278>)
   80f76:	681a      	ldr	r2, [r3, #0]
   80f78:	4b4f      	ldr	r3, [pc, #316]	; (810b8 <Cl_Alarm_translate_sensor_values+0x260>)
   80f7a:	4611      	mov	r1, r2
   80f7c:	4798      	blx	r3
   80f7e:	4603      	mov	r3, r0
   80f80:	461a      	mov	r2, r3
   80f82:	4b4e      	ldr	r3, [pc, #312]	; (810bc <Cl_Alarm_translate_sensor_values+0x264>)
   80f84:	494e      	ldr	r1, [pc, #312]	; (810c0 <Cl_Alarm_translate_sensor_values+0x268>)
   80f86:	4610      	mov	r0, r2
   80f88:	4798      	blx	r3
   80f8a:	4603      	mov	r3, r0
   80f8c:	461a      	mov	r2, r3
   80f8e:	4b4f      	ldr	r3, [pc, #316]	; (810cc <Cl_Alarm_translate_sensor_values+0x274>)
   80f90:	601a      	str	r2, [r3, #0]
   80f92:	4b3d      	ldr	r3, [pc, #244]	; (81088 <Cl_Alarm_translate_sensor_values+0x230>)
   80f94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   80f96:	461a      	mov	r2, r3
   80f98:	f640 43e4 	movw	r3, #3300	; 0xce4
   80f9c:	fb03 f302 	mul.w	r3, r3, r2
   80fa0:	2b00      	cmp	r3, #0
   80fa2:	da01      	bge.n	80fa8 <Cl_Alarm_translate_sensor_values+0x150>
   80fa4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80fa8:	131b      	asrs	r3, r3, #12
   80faa:	461a      	mov	r2, r3
   80fac:	4b37      	ldr	r3, [pc, #220]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   80fae:	4610      	mov	r0, r2
   80fb0:	4798      	blx	r3
   80fb2:	4603      	mov	r3, r0
   80fb4:	613b      	str	r3, [r7, #16]
   80fb6:	4b36      	ldr	r3, [pc, #216]	; (81090 <Cl_Alarm_translate_sensor_values+0x238>)
   80fb8:	6938      	ldr	r0, [r7, #16]
   80fba:	4798      	blx	r3
   80fbc:	4603      	mov	r3, r0
   80fbe:	b21b      	sxth	r3, r3
   80fc0:	4618      	mov	r0, r3
   80fc2:	4b44      	ldr	r3, [pc, #272]	; (810d4 <Cl_Alarm_translate_sensor_values+0x27c>)
   80fc4:	4798      	blx	r3
   80fc6:	4b34      	ldr	r3, [pc, #208]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   80fc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   80fcc:	2b00      	cmp	r3, #0
   80fce:	d015      	beq.n	80ffc <Cl_Alarm_translate_sensor_values+0x1a4>
   80fd0:	2205      	movs	r2, #5
   80fd2:	4941      	ldr	r1, [pc, #260]	; (810d8 <Cl_Alarm_translate_sensor_values+0x280>)
   80fd4:	2018      	movs	r0, #24
   80fd6:	4b32      	ldr	r3, [pc, #200]	; (810a0 <Cl_Alarm_translate_sensor_values+0x248>)
   80fd8:	4798      	blx	r3
   80fda:	4603      	mov	r3, r0
   80fdc:	75fb      	strb	r3, [r7, #23]
   80fde:	7dfb      	ldrb	r3, [r7, #23]
   80fe0:	2b00      	cmp	r3, #0
   80fe2:	d001      	beq.n	80fe8 <Cl_Alarm_translate_sensor_values+0x190>
   80fe4:	4b2f      	ldr	r3, [pc, #188]	; (810a4 <Cl_Alarm_translate_sensor_values+0x24c>)
   80fe6:	4798      	blx	r3
   80fe8:	4b2b      	ldr	r3, [pc, #172]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   80fea:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   80fee:	4b27      	ldr	r3, [pc, #156]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   80ff0:	4610      	mov	r0, r2
   80ff2:	4798      	blx	r3
   80ff4:	4602      	mov	r2, r0
   80ff6:	4b39      	ldr	r3, [pc, #228]	; (810dc <Cl_Alarm_translate_sensor_values+0x284>)
   80ff8:	601a      	str	r2, [r3, #0]
   80ffa:	e016      	b.n	8102a <Cl_Alarm_translate_sensor_values+0x1d2>
   80ffc:	4b37      	ldr	r3, [pc, #220]	; (810dc <Cl_Alarm_translate_sensor_values+0x284>)
   80ffe:	681a      	ldr	r2, [r3, #0]
   81000:	4b2a      	ldr	r3, [pc, #168]	; (810ac <Cl_Alarm_translate_sensor_values+0x254>)
   81002:	492b      	ldr	r1, [pc, #172]	; (810b0 <Cl_Alarm_translate_sensor_values+0x258>)
   81004:	4610      	mov	r0, r2
   81006:	4798      	blx	r3
   81008:	4603      	mov	r3, r0
   8100a:	4618      	mov	r0, r3
   8100c:	4b34      	ldr	r3, [pc, #208]	; (810e0 <Cl_Alarm_translate_sensor_values+0x288>)
   8100e:	681a      	ldr	r2, [r3, #0]
   81010:	4b29      	ldr	r3, [pc, #164]	; (810b8 <Cl_Alarm_translate_sensor_values+0x260>)
   81012:	4611      	mov	r1, r2
   81014:	4798      	blx	r3
   81016:	4603      	mov	r3, r0
   81018:	461a      	mov	r2, r3
   8101a:	4b28      	ldr	r3, [pc, #160]	; (810bc <Cl_Alarm_translate_sensor_values+0x264>)
   8101c:	4928      	ldr	r1, [pc, #160]	; (810c0 <Cl_Alarm_translate_sensor_values+0x268>)
   8101e:	4610      	mov	r0, r2
   81020:	4798      	blx	r3
   81022:	4603      	mov	r3, r0
   81024:	461a      	mov	r2, r3
   81026:	4b2d      	ldr	r3, [pc, #180]	; (810dc <Cl_Alarm_translate_sensor_values+0x284>)
   81028:	601a      	str	r2, [r3, #0]
   8102a:	4b17      	ldr	r3, [pc, #92]	; (81088 <Cl_Alarm_translate_sensor_values+0x230>)
   8102c:	8a1b      	ldrh	r3, [r3, #16]
   8102e:	461a      	mov	r2, r3
   81030:	f640 43e4 	movw	r3, #3300	; 0xce4
   81034:	fb03 f302 	mul.w	r3, r3, r2
   81038:	2b00      	cmp	r3, #0
   8103a:	da01      	bge.n	81040 <Cl_Alarm_translate_sensor_values+0x1e8>
   8103c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   81040:	131b      	asrs	r3, r3, #12
   81042:	461a      	mov	r2, r3
   81044:	4b11      	ldr	r3, [pc, #68]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   81046:	4610      	mov	r0, r2
   81048:	4798      	blx	r3
   8104a:	4603      	mov	r3, r0
   8104c:	613b      	str	r3, [r7, #16]
   8104e:	4b10      	ldr	r3, [pc, #64]	; (81090 <Cl_Alarm_translate_sensor_values+0x238>)
   81050:	6938      	ldr	r0, [r7, #16]
   81052:	4798      	blx	r3
   81054:	4603      	mov	r3, r0
   81056:	b21b      	sxth	r3, r3
   81058:	4618      	mov	r0, r3
   8105a:	4b22      	ldr	r3, [pc, #136]	; (810e4 <Cl_Alarm_translate_sensor_values+0x28c>)
   8105c:	4798      	blx	r3
   8105e:	4b0e      	ldr	r3, [pc, #56]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   81060:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   81064:	2b00      	cmp	r3, #0
   81066:	d043      	beq.n	810f0 <Cl_Alarm_translate_sensor_values+0x298>
   81068:	2205      	movs	r2, #5
   8106a:	491f      	ldr	r1, [pc, #124]	; (810e8 <Cl_Alarm_translate_sensor_values+0x290>)
   8106c:	2018      	movs	r0, #24
   8106e:	4b0c      	ldr	r3, [pc, #48]	; (810a0 <Cl_Alarm_translate_sensor_values+0x248>)
   81070:	4798      	blx	r3
   81072:	4b09      	ldr	r3, [pc, #36]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   81074:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   81078:	4b04      	ldr	r3, [pc, #16]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   8107a:	4610      	mov	r0, r2
   8107c:	4798      	blx	r3
   8107e:	4602      	mov	r2, r0
   81080:	4b1a      	ldr	r3, [pc, #104]	; (810ec <Cl_Alarm_translate_sensor_values+0x294>)
   81082:	601a      	str	r2, [r3, #0]
   81084:	e04b      	b.n	8111e <Cl_Alarm_translate_sensor_values+0x2c6>
   81086:	bf00      	nop
   81088:	20072e28 	.word	0x20072e28
   8108c:	000a3d6d 	.word	0x000a3d6d
   81090:	000a41a1 	.word	0x000a41a1
   81094:	00084371 	.word	0x00084371
   81098:	2007310c 	.word	0x2007310c
   8109c:	000a5dd8 	.word	0x000a5dd8
   810a0:	00099729 	.word	0x00099729
   810a4:	00088725 	.word	0x00088725
   810a8:	20071618 	.word	0x20071618
   810ac:	000a3e15 	.word	0x000a3e15
   810b0:	42440000 	.word	0x42440000
   810b4:	20071660 	.word	0x20071660
   810b8:	000a3c05 	.word	0x000a3c05
   810bc:	000a3f7d 	.word	0x000a3f7d
   810c0:	42480000 	.word	0x42480000
   810c4:	00084481 	.word	0x00084481
   810c8:	000a5de0 	.word	0x000a5de0
   810cc:	2007161c 	.word	0x2007161c
   810d0:	20071664 	.word	0x20071664
   810d4:	00084591 	.word	0x00084591
   810d8:	000a5de8 	.word	0x000a5de8
   810dc:	20071620 	.word	0x20071620
   810e0:	20071668 	.word	0x20071668
   810e4:	0008406d 	.word	0x0008406d
   810e8:	000a5df0 	.word	0x000a5df0
   810ec:	20072d00 	.word	0x20072d00
   810f0:	4b91      	ldr	r3, [pc, #580]	; (81338 <Cl_Alarm_translate_sensor_values+0x4e0>)
   810f2:	681a      	ldr	r2, [r3, #0]
   810f4:	4b91      	ldr	r3, [pc, #580]	; (8133c <Cl_Alarm_translate_sensor_values+0x4e4>)
   810f6:	4992      	ldr	r1, [pc, #584]	; (81340 <Cl_Alarm_translate_sensor_values+0x4e8>)
   810f8:	4610      	mov	r0, r2
   810fa:	4798      	blx	r3
   810fc:	4603      	mov	r3, r0
   810fe:	4618      	mov	r0, r3
   81100:	4b90      	ldr	r3, [pc, #576]	; (81344 <Cl_Alarm_translate_sensor_values+0x4ec>)
   81102:	681a      	ldr	r2, [r3, #0]
   81104:	4b90      	ldr	r3, [pc, #576]	; (81348 <Cl_Alarm_translate_sensor_values+0x4f0>)
   81106:	4611      	mov	r1, r2
   81108:	4798      	blx	r3
   8110a:	4603      	mov	r3, r0
   8110c:	461a      	mov	r2, r3
   8110e:	4b8f      	ldr	r3, [pc, #572]	; (8134c <Cl_Alarm_translate_sensor_values+0x4f4>)
   81110:	498f      	ldr	r1, [pc, #572]	; (81350 <Cl_Alarm_translate_sensor_values+0x4f8>)
   81112:	4610      	mov	r0, r2
   81114:	4798      	blx	r3
   81116:	4603      	mov	r3, r0
   81118:	461a      	mov	r2, r3
   8111a:	4b87      	ldr	r3, [pc, #540]	; (81338 <Cl_Alarm_translate_sensor_values+0x4e0>)
   8111c:	601a      	str	r2, [r3, #0]
   8111e:	4b8d      	ldr	r3, [pc, #564]	; (81354 <Cl_Alarm_translate_sensor_values+0x4fc>)
   81120:	8a5b      	ldrh	r3, [r3, #18]
   81122:	461a      	mov	r2, r3
   81124:	f640 43e4 	movw	r3, #3300	; 0xce4
   81128:	fb03 f302 	mul.w	r3, r3, r2
   8112c:	2b00      	cmp	r3, #0
   8112e:	da01      	bge.n	81134 <Cl_Alarm_translate_sensor_values+0x2dc>
   81130:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   81134:	131b      	asrs	r3, r3, #12
   81136:	461a      	mov	r2, r3
   81138:	4b87      	ldr	r3, [pc, #540]	; (81358 <Cl_Alarm_translate_sensor_values+0x500>)
   8113a:	4610      	mov	r0, r2
   8113c:	4798      	blx	r3
   8113e:	4603      	mov	r3, r0
   81140:	613b      	str	r3, [r7, #16]
   81142:	4b86      	ldr	r3, [pc, #536]	; (8135c <Cl_Alarm_translate_sensor_values+0x504>)
   81144:	6938      	ldr	r0, [r7, #16]
   81146:	4798      	blx	r3
   81148:	4603      	mov	r3, r0
   8114a:	b21b      	sxth	r3, r3
   8114c:	4618      	mov	r0, r3
   8114e:	4b84      	ldr	r3, [pc, #528]	; (81360 <Cl_Alarm_translate_sensor_values+0x508>)
   81150:	4798      	blx	r3
   81152:	4b84      	ldr	r3, [pc, #528]	; (81364 <Cl_Alarm_translate_sensor_values+0x50c>)
   81154:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   81158:	2b00      	cmp	r3, #0
   8115a:	d00e      	beq.n	8117a <Cl_Alarm_translate_sensor_values+0x322>
   8115c:	2205      	movs	r2, #5
   8115e:	4982      	ldr	r1, [pc, #520]	; (81368 <Cl_Alarm_translate_sensor_values+0x510>)
   81160:	2018      	movs	r0, #24
   81162:	4b82      	ldr	r3, [pc, #520]	; (8136c <Cl_Alarm_translate_sensor_values+0x514>)
   81164:	4798      	blx	r3
   81166:	4b7f      	ldr	r3, [pc, #508]	; (81364 <Cl_Alarm_translate_sensor_values+0x50c>)
   81168:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
   8116c:	4b7a      	ldr	r3, [pc, #488]	; (81358 <Cl_Alarm_translate_sensor_values+0x500>)
   8116e:	4610      	mov	r0, r2
   81170:	4798      	blx	r3
   81172:	4602      	mov	r2, r0
   81174:	4b7e      	ldr	r3, [pc, #504]	; (81370 <Cl_Alarm_translate_sensor_values+0x518>)
   81176:	601a      	str	r2, [r3, #0]
   81178:	e016      	b.n	811a8 <Cl_Alarm_translate_sensor_values+0x350>
   8117a:	4b7d      	ldr	r3, [pc, #500]	; (81370 <Cl_Alarm_translate_sensor_values+0x518>)
   8117c:	681a      	ldr	r2, [r3, #0]
   8117e:	4b6f      	ldr	r3, [pc, #444]	; (8133c <Cl_Alarm_translate_sensor_values+0x4e4>)
   81180:	496f      	ldr	r1, [pc, #444]	; (81340 <Cl_Alarm_translate_sensor_values+0x4e8>)
   81182:	4610      	mov	r0, r2
   81184:	4798      	blx	r3
   81186:	4603      	mov	r3, r0
   81188:	4618      	mov	r0, r3
   8118a:	4b7a      	ldr	r3, [pc, #488]	; (81374 <Cl_Alarm_translate_sensor_values+0x51c>)
   8118c:	681a      	ldr	r2, [r3, #0]
   8118e:	4b6e      	ldr	r3, [pc, #440]	; (81348 <Cl_Alarm_translate_sensor_values+0x4f0>)
   81190:	4611      	mov	r1, r2
   81192:	4798      	blx	r3
   81194:	4603      	mov	r3, r0
   81196:	461a      	mov	r2, r3
   81198:	4b6c      	ldr	r3, [pc, #432]	; (8134c <Cl_Alarm_translate_sensor_values+0x4f4>)
   8119a:	496d      	ldr	r1, [pc, #436]	; (81350 <Cl_Alarm_translate_sensor_values+0x4f8>)
   8119c:	4610      	mov	r0, r2
   8119e:	4798      	blx	r3
   811a0:	4603      	mov	r3, r0
   811a2:	461a      	mov	r2, r3
   811a4:	4b72      	ldr	r3, [pc, #456]	; (81370 <Cl_Alarm_translate_sensor_values+0x518>)
   811a6:	601a      	str	r2, [r3, #0]
   811a8:	4b6e      	ldr	r3, [pc, #440]	; (81364 <Cl_Alarm_translate_sensor_values+0x50c>)
   811aa:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
   811ae:	2b00      	cmp	r3, #0
   811b0:	d00e      	beq.n	811d0 <Cl_Alarm_translate_sensor_values+0x378>
   811b2:	2207      	movs	r2, #7
   811b4:	4970      	ldr	r1, [pc, #448]	; (81378 <Cl_Alarm_translate_sensor_values+0x520>)
   811b6:	2018      	movs	r0, #24
   811b8:	4b6c      	ldr	r3, [pc, #432]	; (8136c <Cl_Alarm_translate_sensor_values+0x514>)
   811ba:	4798      	blx	r3
   811bc:	4b69      	ldr	r3, [pc, #420]	; (81364 <Cl_Alarm_translate_sensor_values+0x50c>)
   811be:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
   811c2:	4b65      	ldr	r3, [pc, #404]	; (81358 <Cl_Alarm_translate_sensor_values+0x500>)
   811c4:	4610      	mov	r0, r2
   811c6:	4798      	blx	r3
   811c8:	4602      	mov	r2, r0
   811ca:	4b6c      	ldr	r3, [pc, #432]	; (8137c <Cl_Alarm_translate_sensor_values+0x524>)
   811cc:	601a      	str	r2, [r3, #0]
   811ce:	e04d      	b.n	8126c <Cl_Alarm_translate_sensor_values+0x414>
   811d0:	4b60      	ldr	r3, [pc, #384]	; (81354 <Cl_Alarm_translate_sensor_values+0x4fc>)
   811d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   811d4:	461a      	mov	r2, r3
   811d6:	f649 5308 	movw	r3, #40200	; 0x9d08
   811da:	fb03 f302 	mul.w	r3, r3, r2
   811de:	2b00      	cmp	r3, #0
   811e0:	da02      	bge.n	811e8 <Cl_Alarm_translate_sensor_values+0x390>
   811e2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   811e6:	33ff      	adds	r3, #255	; 0xff
   811e8:	141b      	asrs	r3, r3, #16
   811ea:	81fb      	strh	r3, [r7, #14]
   811ec:	89fb      	ldrh	r3, [r7, #14]
   811ee:	4618      	mov	r0, r3
   811f0:	4b63      	ldr	r3, [pc, #396]	; (81380 <Cl_Alarm_translate_sensor_values+0x528>)
   811f2:	4798      	blx	r3
   811f4:	4b63      	ldr	r3, [pc, #396]	; (81384 <Cl_Alarm_translate_sensor_values+0x52c>)
   811f6:	681a      	ldr	r2, [r3, #0]
   811f8:	4b54      	ldr	r3, [pc, #336]	; (8134c <Cl_Alarm_translate_sensor_values+0x4f4>)
   811fa:	4963      	ldr	r1, [pc, #396]	; (81388 <Cl_Alarm_translate_sensor_values+0x530>)
   811fc:	4610      	mov	r0, r2
   811fe:	4798      	blx	r3
   81200:	4603      	mov	r3, r0
   81202:	461a      	mov	r2, r3
   81204:	4b61      	ldr	r3, [pc, #388]	; (8138c <Cl_Alarm_translate_sensor_values+0x534>)
   81206:	4610      	mov	r0, r2
   81208:	4798      	blx	r3
   8120a:	4603      	mov	r3, r0
   8120c:	81bb      	strh	r3, [r7, #12]
   8120e:	89ba      	ldrh	r2, [r7, #12]
   81210:	4b5f      	ldr	r3, [pc, #380]	; (81390 <Cl_Alarm_translate_sensor_values+0x538>)
   81212:	4610      	mov	r0, r2
   81214:	4798      	blx	r3
   81216:	4c5f      	ldr	r4, [pc, #380]	; (81394 <Cl_Alarm_translate_sensor_values+0x53c>)
   81218:	f04f 0200 	mov.w	r2, #0
   8121c:	4b5e      	ldr	r3, [pc, #376]	; (81398 <Cl_Alarm_translate_sensor_values+0x540>)
   8121e:	47a0      	blx	r4
   81220:	4603      	mov	r3, r0
   81222:	460c      	mov	r4, r1
   81224:	4619      	mov	r1, r3
   81226:	4622      	mov	r2, r4
   81228:	4b5c      	ldr	r3, [pc, #368]	; (8139c <Cl_Alarm_translate_sensor_values+0x544>)
   8122a:	4608      	mov	r0, r1
   8122c:	4611      	mov	r1, r2
   8122e:	4798      	blx	r3
   81230:	4603      	mov	r3, r0
   81232:	81bb      	strh	r3, [r7, #12]
   81234:	4b51      	ldr	r3, [pc, #324]	; (8137c <Cl_Alarm_translate_sensor_values+0x524>)
   81236:	681a      	ldr	r2, [r3, #0]
   81238:	4b40      	ldr	r3, [pc, #256]	; (8133c <Cl_Alarm_translate_sensor_values+0x4e4>)
   8123a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
   8123e:	4610      	mov	r0, r2
   81240:	4798      	blx	r3
   81242:	4603      	mov	r3, r0
   81244:	461c      	mov	r4, r3
   81246:	89ba      	ldrh	r2, [r7, #12]
   81248:	4b43      	ldr	r3, [pc, #268]	; (81358 <Cl_Alarm_translate_sensor_values+0x500>)
   8124a:	4610      	mov	r0, r2
   8124c:	4798      	blx	r3
   8124e:	4602      	mov	r2, r0
   81250:	4b3d      	ldr	r3, [pc, #244]	; (81348 <Cl_Alarm_translate_sensor_values+0x4f0>)
   81252:	4611      	mov	r1, r2
   81254:	4620      	mov	r0, r4
   81256:	4798      	blx	r3
   81258:	4603      	mov	r3, r0
   8125a:	461a      	mov	r2, r3
   8125c:	4b3b      	ldr	r3, [pc, #236]	; (8134c <Cl_Alarm_translate_sensor_values+0x4f4>)
   8125e:	4950      	ldr	r1, [pc, #320]	; (813a0 <Cl_Alarm_translate_sensor_values+0x548>)
   81260:	4610      	mov	r0, r2
   81262:	4798      	blx	r3
   81264:	4603      	mov	r3, r0
   81266:	461a      	mov	r2, r3
   81268:	4b44      	ldr	r3, [pc, #272]	; (8137c <Cl_Alarm_translate_sensor_values+0x524>)
   8126a:	601a      	str	r2, [r3, #0]
   8126c:	4b3d      	ldr	r3, [pc, #244]	; (81364 <Cl_Alarm_translate_sensor_values+0x50c>)
   8126e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   81272:	2b00      	cmp	r3, #0
   81274:	d00e      	beq.n	81294 <Cl_Alarm_translate_sensor_values+0x43c>
   81276:	2207      	movs	r2, #7
   81278:	494a      	ldr	r1, [pc, #296]	; (813a4 <Cl_Alarm_translate_sensor_values+0x54c>)
   8127a:	2018      	movs	r0, #24
   8127c:	4b3b      	ldr	r3, [pc, #236]	; (8136c <Cl_Alarm_translate_sensor_values+0x514>)
   8127e:	4798      	blx	r3
   81280:	4b38      	ldr	r3, [pc, #224]	; (81364 <Cl_Alarm_translate_sensor_values+0x50c>)
   81282:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	; 0x4c
   81286:	4b34      	ldr	r3, [pc, #208]	; (81358 <Cl_Alarm_translate_sensor_values+0x500>)
   81288:	4610      	mov	r0, r2
   8128a:	4798      	blx	r3
   8128c:	4602      	mov	r2, r0
   8128e:	4b46      	ldr	r3, [pc, #280]	; (813a8 <Cl_Alarm_translate_sensor_values+0x550>)
   81290:	601a      	str	r2, [r3, #0]
   81292:	e03d      	b.n	81310 <Cl_Alarm_translate_sensor_values+0x4b8>
   81294:	4b2f      	ldr	r3, [pc, #188]	; (81354 <Cl_Alarm_translate_sensor_values+0x4fc>)
   81296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   81298:	461a      	mov	r2, r3
   8129a:	f649 5308 	movw	r3, #40200	; 0x9d08
   8129e:	fb03 f302 	mul.w	r3, r3, r2
   812a2:	2b00      	cmp	r3, #0
   812a4:	da02      	bge.n	812ac <Cl_Alarm_translate_sensor_values+0x454>
   812a6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   812aa:	33ff      	adds	r3, #255	; 0xff
   812ac:	141b      	asrs	r3, r3, #16
   812ae:	817b      	strh	r3, [r7, #10]
   812b0:	897b      	ldrh	r3, [r7, #10]
   812b2:	4618      	mov	r0, r3
   812b4:	4b32      	ldr	r3, [pc, #200]	; (81380 <Cl_Alarm_translate_sensor_values+0x528>)
   812b6:	4798      	blx	r3
   812b8:	4b32      	ldr	r3, [pc, #200]	; (81384 <Cl_Alarm_translate_sensor_values+0x52c>)
   812ba:	681a      	ldr	r2, [r3, #0]
   812bc:	4b23      	ldr	r3, [pc, #140]	; (8134c <Cl_Alarm_translate_sensor_values+0x4f4>)
   812be:	4932      	ldr	r1, [pc, #200]	; (81388 <Cl_Alarm_translate_sensor_values+0x530>)
   812c0:	4610      	mov	r0, r2
   812c2:	4798      	blx	r3
   812c4:	4603      	mov	r3, r0
   812c6:	461a      	mov	r2, r3
   812c8:	4b30      	ldr	r3, [pc, #192]	; (8138c <Cl_Alarm_translate_sensor_values+0x534>)
   812ca:	4610      	mov	r0, r2
   812cc:	4798      	blx	r3
   812ce:	4603      	mov	r3, r0
   812d0:	813b      	strh	r3, [r7, #8]
   812d2:	893b      	ldrh	r3, [r7, #8]
   812d4:	3b09      	subs	r3, #9
   812d6:	813b      	strh	r3, [r7, #8]
   812d8:	4b33      	ldr	r3, [pc, #204]	; (813a8 <Cl_Alarm_translate_sensor_values+0x550>)
   812da:	681a      	ldr	r2, [r3, #0]
   812dc:	4b17      	ldr	r3, [pc, #92]	; (8133c <Cl_Alarm_translate_sensor_values+0x4e4>)
   812de:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
   812e2:	4610      	mov	r0, r2
   812e4:	4798      	blx	r3
   812e6:	4603      	mov	r3, r0
   812e8:	461c      	mov	r4, r3
   812ea:	893a      	ldrh	r2, [r7, #8]
   812ec:	4b1a      	ldr	r3, [pc, #104]	; (81358 <Cl_Alarm_translate_sensor_values+0x500>)
   812ee:	4610      	mov	r0, r2
   812f0:	4798      	blx	r3
   812f2:	4602      	mov	r2, r0
   812f4:	4b14      	ldr	r3, [pc, #80]	; (81348 <Cl_Alarm_translate_sensor_values+0x4f0>)
   812f6:	4611      	mov	r1, r2
   812f8:	4620      	mov	r0, r4
   812fa:	4798      	blx	r3
   812fc:	4603      	mov	r3, r0
   812fe:	461a      	mov	r2, r3
   81300:	4b12      	ldr	r3, [pc, #72]	; (8134c <Cl_Alarm_translate_sensor_values+0x4f4>)
   81302:	4927      	ldr	r1, [pc, #156]	; (813a0 <Cl_Alarm_translate_sensor_values+0x548>)
   81304:	4610      	mov	r0, r2
   81306:	4798      	blx	r3
   81308:	4603      	mov	r3, r0
   8130a:	461a      	mov	r2, r3
   8130c:	4b26      	ldr	r3, [pc, #152]	; (813a8 <Cl_Alarm_translate_sensor_values+0x550>)
   8130e:	601a      	str	r2, [r3, #0]
   81310:	4b14      	ldr	r3, [pc, #80]	; (81364 <Cl_Alarm_translate_sensor_values+0x50c>)
   81312:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
   81316:	2b00      	cmp	r3, #0
   81318:	d04c      	beq.n	813b4 <Cl_Alarm_translate_sensor_values+0x55c>
   8131a:	2207      	movs	r2, #7
   8131c:	4923      	ldr	r1, [pc, #140]	; (813ac <Cl_Alarm_translate_sensor_values+0x554>)
   8131e:	2018      	movs	r0, #24
   81320:	4b12      	ldr	r3, [pc, #72]	; (8136c <Cl_Alarm_translate_sensor_values+0x514>)
   81322:	4798      	blx	r3
   81324:	4b0f      	ldr	r3, [pc, #60]	; (81364 <Cl_Alarm_translate_sensor_values+0x50c>)
   81326:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
   8132a:	4b0b      	ldr	r3, [pc, #44]	; (81358 <Cl_Alarm_translate_sensor_values+0x500>)
   8132c:	4610      	mov	r0, r2
   8132e:	4798      	blx	r3
   81330:	4602      	mov	r2, r0
   81332:	4b1f      	ldr	r3, [pc, #124]	; (813b0 <Cl_Alarm_translate_sensor_values+0x558>)
   81334:	601a      	str	r2, [r3, #0]
   81336:	e08b      	b.n	81450 <Cl_Alarm_translate_sensor_values+0x5f8>
   81338:	20072d00 	.word	0x20072d00
   8133c:	000a3e15 	.word	0x000a3e15
   81340:	42440000 	.word	0x42440000
   81344:	20072d74 	.word	0x20072d74
   81348:	000a3c05 	.word	0x000a3c05
   8134c:	000a3f7d 	.word	0x000a3f7d
   81350:	42480000 	.word	0x42480000
   81354:	20072e28 	.word	0x20072e28
   81358:	000a3d6d 	.word	0x000a3d6d
   8135c:	000a41a1 	.word	0x000a41a1
   81360:	000841ed 	.word	0x000841ed
   81364:	2007310c 	.word	0x2007310c
   81368:	000a5df0 	.word	0x000a5df0
   8136c:	00099729 	.word	0x00099729
   81370:	20071614 	.word	0x20071614
   81374:	2007165c 	.word	0x2007165c
   81378:	000a5df8 	.word	0x000a5df8
   8137c:	20071624 	.word	0x20071624
   81380:	0008e8e1 	.word	0x0008e8e1
   81384:	20072630 	.word	0x20072630
   81388:	42c80000 	.word	0x42c80000
   8138c:	000a41ed 	.word	0x000a41ed
   81390:	000a34c9 	.word	0x000a34c9
   81394:	000a322d 	.word	0x000a322d
   81398:	40040000 	.word	0x40040000
   8139c:	000a3b19 	.word	0x000a3b19
   813a0:	40a00000 	.word	0x40a00000
   813a4:	000a5e00 	.word	0x000a5e00
   813a8:	20071628 	.word	0x20071628
   813ac:	000a5e08 	.word	0x000a5e08
   813b0:	2007162c 	.word	0x2007162c
   813b4:	4b7e      	ldr	r3, [pc, #504]	; (815b0 <Cl_Alarm_translate_sensor_values+0x758>)
   813b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   813b8:	461a      	mov	r2, r3
   813ba:	f649 5308 	movw	r3, #40200	; 0x9d08
   813be:	fb03 f302 	mul.w	r3, r3, r2
   813c2:	2b00      	cmp	r3, #0
   813c4:	da02      	bge.n	813cc <Cl_Alarm_translate_sensor_values+0x574>
   813c6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   813ca:	33ff      	adds	r3, #255	; 0xff
   813cc:	141b      	asrs	r3, r3, #16
   813ce:	80fb      	strh	r3, [r7, #6]
   813d0:	88fb      	ldrh	r3, [r7, #6]
   813d2:	4618      	mov	r0, r3
   813d4:	4b77      	ldr	r3, [pc, #476]	; (815b4 <Cl_Alarm_translate_sensor_values+0x75c>)
   813d6:	4798      	blx	r3
   813d8:	4b77      	ldr	r3, [pc, #476]	; (815b8 <Cl_Alarm_translate_sensor_values+0x760>)
   813da:	681a      	ldr	r2, [r3, #0]
   813dc:	4b77      	ldr	r3, [pc, #476]	; (815bc <Cl_Alarm_translate_sensor_values+0x764>)
   813de:	4978      	ldr	r1, [pc, #480]	; (815c0 <Cl_Alarm_translate_sensor_values+0x768>)
   813e0:	4610      	mov	r0, r2
   813e2:	4798      	blx	r3
   813e4:	4603      	mov	r3, r0
   813e6:	461a      	mov	r2, r3
   813e8:	4b76      	ldr	r3, [pc, #472]	; (815c4 <Cl_Alarm_translate_sensor_values+0x76c>)
   813ea:	4610      	mov	r0, r2
   813ec:	4798      	blx	r3
   813ee:	4603      	mov	r3, r0
   813f0:	80bb      	strh	r3, [r7, #4]
   813f2:	88ba      	ldrh	r2, [r7, #4]
   813f4:	4b74      	ldr	r3, [pc, #464]	; (815c8 <Cl_Alarm_translate_sensor_values+0x770>)
   813f6:	4610      	mov	r0, r2
   813f8:	4798      	blx	r3
   813fa:	4c74      	ldr	r4, [pc, #464]	; (815cc <Cl_Alarm_translate_sensor_values+0x774>)
   813fc:	f04f 0200 	mov.w	r2, #0
   81400:	4b73      	ldr	r3, [pc, #460]	; (815d0 <Cl_Alarm_translate_sensor_values+0x778>)
   81402:	47a0      	blx	r4
   81404:	4603      	mov	r3, r0
   81406:	460c      	mov	r4, r1
   81408:	4619      	mov	r1, r3
   8140a:	4622      	mov	r2, r4
   8140c:	4b71      	ldr	r3, [pc, #452]	; (815d4 <Cl_Alarm_translate_sensor_values+0x77c>)
   8140e:	4608      	mov	r0, r1
   81410:	4611      	mov	r1, r2
   81412:	4798      	blx	r3
   81414:	4603      	mov	r3, r0
   81416:	80bb      	strh	r3, [r7, #4]
   81418:	4b6f      	ldr	r3, [pc, #444]	; (815d8 <Cl_Alarm_translate_sensor_values+0x780>)
   8141a:	681a      	ldr	r2, [r3, #0]
   8141c:	4b6f      	ldr	r3, [pc, #444]	; (815dc <Cl_Alarm_translate_sensor_values+0x784>)
   8141e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
   81422:	4610      	mov	r0, r2
   81424:	4798      	blx	r3
   81426:	4603      	mov	r3, r0
   81428:	461c      	mov	r4, r3
   8142a:	88ba      	ldrh	r2, [r7, #4]
   8142c:	4b6c      	ldr	r3, [pc, #432]	; (815e0 <Cl_Alarm_translate_sensor_values+0x788>)
   8142e:	4610      	mov	r0, r2
   81430:	4798      	blx	r3
   81432:	4602      	mov	r2, r0
   81434:	4b6b      	ldr	r3, [pc, #428]	; (815e4 <Cl_Alarm_translate_sensor_values+0x78c>)
   81436:	4611      	mov	r1, r2
   81438:	4620      	mov	r0, r4
   8143a:	4798      	blx	r3
   8143c:	4603      	mov	r3, r0
   8143e:	461a      	mov	r2, r3
   81440:	4b5e      	ldr	r3, [pc, #376]	; (815bc <Cl_Alarm_translate_sensor_values+0x764>)
   81442:	4969      	ldr	r1, [pc, #420]	; (815e8 <Cl_Alarm_translate_sensor_values+0x790>)
   81444:	4610      	mov	r0, r2
   81446:	4798      	blx	r3
   81448:	4603      	mov	r3, r0
   8144a:	461a      	mov	r2, r3
   8144c:	4b62      	ldr	r3, [pc, #392]	; (815d8 <Cl_Alarm_translate_sensor_values+0x780>)
   8144e:	601a      	str	r2, [r3, #0]
   81450:	4b66      	ldr	r3, [pc, #408]	; (815ec <Cl_Alarm_translate_sensor_values+0x794>)
   81452:	7f9b      	ldrb	r3, [r3, #30]
   81454:	2b00      	cmp	r3, #0
   81456:	d00e      	beq.n	81476 <Cl_Alarm_translate_sensor_values+0x61e>
   81458:	2205      	movs	r2, #5
   8145a:	4965      	ldr	r1, [pc, #404]	; (815f0 <Cl_Alarm_translate_sensor_values+0x798>)
   8145c:	2018      	movs	r0, #24
   8145e:	4b65      	ldr	r3, [pc, #404]	; (815f4 <Cl_Alarm_translate_sensor_values+0x79c>)
   81460:	4798      	blx	r3
   81462:	4b62      	ldr	r3, [pc, #392]	; (815ec <Cl_Alarm_translate_sensor_values+0x794>)
   81464:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   81468:	4b5d      	ldr	r3, [pc, #372]	; (815e0 <Cl_Alarm_translate_sensor_values+0x788>)
   8146a:	4610      	mov	r0, r2
   8146c:	4798      	blx	r3
   8146e:	4602      	mov	r2, r0
   81470:	4b61      	ldr	r3, [pc, #388]	; (815f8 <Cl_Alarm_translate_sensor_values+0x7a0>)
   81472:	601a      	str	r2, [r3, #0]
   81474:	e084      	b.n	81580 <Cl_Alarm_translate_sensor_values+0x728>
   81476:	4b4e      	ldr	r3, [pc, #312]	; (815b0 <Cl_Alarm_translate_sensor_values+0x758>)
   81478:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   8147a:	461a      	mov	r2, r3
   8147c:	4b52      	ldr	r3, [pc, #328]	; (815c8 <Cl_Alarm_translate_sensor_values+0x770>)
   8147e:	4610      	mov	r0, r2
   81480:	4798      	blx	r3
   81482:	4c5e      	ldr	r4, [pc, #376]	; (815fc <Cl_Alarm_translate_sensor_values+0x7a4>)
   81484:	a342      	add	r3, pc, #264	; (adr r3, 81590 <Cl_Alarm_translate_sensor_values+0x738>)
   81486:	e9d3 2300 	ldrd	r2, r3, [r3]
   8148a:	47a0      	blx	r4
   8148c:	4603      	mov	r3, r0
   8148e:	460c      	mov	r4, r1
   81490:	461d      	mov	r5, r3
   81492:	4626      	mov	r6, r4
   81494:	4b46      	ldr	r3, [pc, #280]	; (815b0 <Cl_Alarm_translate_sensor_values+0x758>)
   81496:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   81498:	461a      	mov	r2, r3
   8149a:	4b4b      	ldr	r3, [pc, #300]	; (815c8 <Cl_Alarm_translate_sensor_values+0x770>)
   8149c:	4610      	mov	r0, r2
   8149e:	4798      	blx	r3
   814a0:	4602      	mov	r2, r0
   814a2:	460b      	mov	r3, r1
   814a4:	4c55      	ldr	r4, [pc, #340]	; (815fc <Cl_Alarm_translate_sensor_values+0x7a4>)
   814a6:	4628      	mov	r0, r5
   814a8:	4631      	mov	r1, r6
   814aa:	47a0      	blx	r4
   814ac:	4603      	mov	r3, r0
   814ae:	460c      	mov	r4, r1
   814b0:	461d      	mov	r5, r3
   814b2:	4626      	mov	r6, r4
   814b4:	4b3e      	ldr	r3, [pc, #248]	; (815b0 <Cl_Alarm_translate_sensor_values+0x758>)
   814b6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   814b8:	461a      	mov	r2, r3
   814ba:	4b43      	ldr	r3, [pc, #268]	; (815c8 <Cl_Alarm_translate_sensor_values+0x770>)
   814bc:	4610      	mov	r0, r2
   814be:	4798      	blx	r3
   814c0:	4c4e      	ldr	r4, [pc, #312]	; (815fc <Cl_Alarm_translate_sensor_values+0x7a4>)
   814c2:	a335      	add	r3, pc, #212	; (adr r3, 81598 <Cl_Alarm_translate_sensor_values+0x740>)
   814c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   814c8:	47a0      	blx	r4
   814ca:	4603      	mov	r3, r0
   814cc:	460c      	mov	r4, r1
   814ce:	461a      	mov	r2, r3
   814d0:	4623      	mov	r3, r4
   814d2:	4c4b      	ldr	r4, [pc, #300]	; (81600 <Cl_Alarm_translate_sensor_values+0x7a8>)
   814d4:	4628      	mov	r0, r5
   814d6:	4631      	mov	r1, r6
   814d8:	47a0      	blx	r4
   814da:	4603      	mov	r3, r0
   814dc:	460c      	mov	r4, r1
   814de:	4618      	mov	r0, r3
   814e0:	4621      	mov	r1, r4
   814e2:	4c3a      	ldr	r4, [pc, #232]	; (815cc <Cl_Alarm_translate_sensor_values+0x774>)
   814e4:	a32e      	add	r3, pc, #184	; (adr r3, 815a0 <Cl_Alarm_translate_sensor_values+0x748>)
   814e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   814ea:	47a0      	blx	r4
   814ec:	4603      	mov	r3, r0
   814ee:	460c      	mov	r4, r1
   814f0:	4619      	mov	r1, r3
   814f2:	4622      	mov	r2, r4
   814f4:	4b43      	ldr	r3, [pc, #268]	; (81604 <Cl_Alarm_translate_sensor_values+0x7ac>)
   814f6:	4608      	mov	r0, r1
   814f8:	4611      	mov	r1, r2
   814fa:	4798      	blx	r3
   814fc:	4602      	mov	r2, r0
   814fe:	4b42      	ldr	r3, [pc, #264]	; (81608 <Cl_Alarm_translate_sensor_values+0x7b0>)
   81500:	601a      	str	r2, [r3, #0]
   81502:	4b41      	ldr	r3, [pc, #260]	; (81608 <Cl_Alarm_translate_sensor_values+0x7b0>)
   81504:	681a      	ldr	r2, [r3, #0]
   81506:	4b41      	ldr	r3, [pc, #260]	; (8160c <Cl_Alarm_translate_sensor_values+0x7b4>)
   81508:	4610      	mov	r0, r2
   8150a:	4798      	blx	r3
   8150c:	4605      	mov	r5, r0
   8150e:	460e      	mov	r6, r1
   81510:	4b31      	ldr	r3, [pc, #196]	; (815d8 <Cl_Alarm_translate_sensor_values+0x780>)
   81512:	681a      	ldr	r2, [r3, #0]
   81514:	4b3d      	ldr	r3, [pc, #244]	; (8160c <Cl_Alarm_translate_sensor_values+0x7b4>)
   81516:	4610      	mov	r0, r2
   81518:	4798      	blx	r3
   8151a:	4c2c      	ldr	r4, [pc, #176]	; (815cc <Cl_Alarm_translate_sensor_values+0x774>)
   8151c:	f04f 0200 	mov.w	r2, #0
   81520:	4b3b      	ldr	r3, [pc, #236]	; (81610 <Cl_Alarm_translate_sensor_values+0x7b8>)
   81522:	47a0      	blx	r4
   81524:	4603      	mov	r3, r0
   81526:	460c      	mov	r4, r1
   81528:	4618      	mov	r0, r3
   8152a:	4621      	mov	r1, r4
   8152c:	4c33      	ldr	r4, [pc, #204]	; (815fc <Cl_Alarm_translate_sensor_values+0x7a4>)
   8152e:	a31e      	add	r3, pc, #120	; (adr r3, 815a8 <Cl_Alarm_translate_sensor_values+0x750>)
   81530:	e9d3 2300 	ldrd	r2, r3, [r3]
   81534:	47a0      	blx	r4
   81536:	4603      	mov	r3, r0
   81538:	460c      	mov	r4, r1
   8153a:	4618      	mov	r0, r3
   8153c:	4621      	mov	r1, r4
   8153e:	4c30      	ldr	r4, [pc, #192]	; (81600 <Cl_Alarm_translate_sensor_values+0x7a8>)
   81540:	f04f 0200 	mov.w	r2, #0
   81544:	4b33      	ldr	r3, [pc, #204]	; (81614 <Cl_Alarm_translate_sensor_values+0x7bc>)
   81546:	47a0      	blx	r4
   81548:	4603      	mov	r3, r0
   8154a:	460c      	mov	r4, r1
   8154c:	461a      	mov	r2, r3
   8154e:	4623      	mov	r3, r4
   81550:	4c31      	ldr	r4, [pc, #196]	; (81618 <Cl_Alarm_translate_sensor_values+0x7c0>)
   81552:	4628      	mov	r0, r5
   81554:	4631      	mov	r1, r6
   81556:	47a0      	blx	r4
   81558:	4603      	mov	r3, r0
   8155a:	460c      	mov	r4, r1
   8155c:	4618      	mov	r0, r3
   8155e:	4621      	mov	r1, r4
   81560:	4c2d      	ldr	r4, [pc, #180]	; (81618 <Cl_Alarm_translate_sensor_values+0x7c0>)
   81562:	f04f 0200 	mov.w	r2, #0
   81566:	4b2d      	ldr	r3, [pc, #180]	; (8161c <Cl_Alarm_translate_sensor_values+0x7c4>)
   81568:	47a0      	blx	r4
   8156a:	4603      	mov	r3, r0
   8156c:	460c      	mov	r4, r1
   8156e:	4619      	mov	r1, r3
   81570:	4622      	mov	r2, r4
   81572:	4b24      	ldr	r3, [pc, #144]	; (81604 <Cl_Alarm_translate_sensor_values+0x7ac>)
   81574:	4608      	mov	r0, r1
   81576:	4611      	mov	r1, r2
   81578:	4798      	blx	r3
   8157a:	4602      	mov	r2, r0
   8157c:	4b1e      	ldr	r3, [pc, #120]	; (815f8 <Cl_Alarm_translate_sensor_values+0x7a0>)
   8157e:	601a      	str	r2, [r3, #0]
   81580:	bf00      	nop
   81582:	4618      	mov	r0, r3
   81584:	371c      	adds	r7, #28
   81586:	46bd      	mov	sp, r7
   81588:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8158a:	bf00      	nop
   8158c:	f3af 8000 	nop.w
   81590:	eb1c432d 	.word	0xeb1c432d
   81594:	bf1a36e2 	.word	0xbf1a36e2
   81598:	70a3d70a 	.word	0x70a3d70a
   8159c:	3fd70a3d 	.word	0x3fd70a3d
   815a0:	851eb852 	.word	0x851eb852
   815a4:	404331eb 	.word	0x404331eb
   815a8:	47ae147b 	.word	0x47ae147b
   815ac:	3f947ae1 	.word	0x3f947ae1
   815b0:	20072e28 	.word	0x20072e28
   815b4:	0008e8e1 	.word	0x0008e8e1
   815b8:	20072630 	.word	0x20072630
   815bc:	000a3f7d 	.word	0x000a3f7d
   815c0:	42c80000 	.word	0x42c80000
   815c4:	000a41ed 	.word	0x000a41ed
   815c8:	000a34c9 	.word	0x000a34c9
   815cc:	000a322d 	.word	0x000a322d
   815d0:	40040000 	.word	0x40040000
   815d4:	000a3b19 	.word	0x000a3b19
   815d8:	2007162c 	.word	0x2007162c
   815dc:	000a3e15 	.word	0x000a3e15
   815e0:	000a3d6d 	.word	0x000a3d6d
   815e4:	000a3c05 	.word	0x000a3c05
   815e8:	40a00000 	.word	0x40a00000
   815ec:	2007310c 	.word	0x2007310c
   815f0:	000a5e10 	.word	0x000a5e10
   815f4:	00099729 	.word	0x00099729
   815f8:	20071634 	.word	0x20071634
   815fc:	000a3595 	.word	0x000a3595
   81600:	000a3231 	.word	0x000a3231
   81604:	000a3b59 	.word	0x000a3b59
   81608:	20071630 	.word	0x20071630
   8160c:	000a34ed 	.word	0x000a34ed
   81610:	40390000 	.word	0x40390000
   81614:	3ff00000 	.word	0x3ff00000
   81618:	000a37e9 	.word	0x000a37e9
   8161c:	40240000 	.word	0x40240000

00081620 <Cl_alarms_scanforAlarms>:
   81620:	b580      	push	{r7, lr}
   81622:	b082      	sub	sp, #8
   81624:	af00      	add	r7, sp, #0
   81626:	4ba2      	ldr	r3, [pc, #648]	; (818b0 <Cl_alarms_scanforAlarms+0x290>)
   81628:	4798      	blx	r3
   8162a:	4603      	mov	r3, r0
   8162c:	71fb      	strb	r3, [r7, #7]
   8162e:	79fb      	ldrb	r3, [r7, #7]
   81630:	2b00      	cmp	r3, #0
   81632:	d001      	beq.n	81638 <Cl_alarms_scanforAlarms+0x18>
   81634:	4b9f      	ldr	r3, [pc, #636]	; (818b4 <Cl_alarms_scanforAlarms+0x294>)
   81636:	4798      	blx	r3
   81638:	4b9f      	ldr	r3, [pc, #636]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   8163a:	f893 329e 	ldrb.w	r3, [r3, #670]	; 0x29e
   8163e:	2b00      	cmp	r3, #0
   81640:	d049      	beq.n	816d6 <Cl_alarms_scanforAlarms+0xb6>
   81642:	4b9d      	ldr	r3, [pc, #628]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81644:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
   81648:	2b01      	cmp	r3, #1
   8164a:	d104      	bne.n	81656 <Cl_alarms_scanforAlarms+0x36>
   8164c:	4b9b      	ldr	r3, [pc, #620]	; (818bc <Cl_alarms_scanforAlarms+0x29c>)
   8164e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   81652:	2b00      	cmp	r3, #0
   81654:	d109      	bne.n	8166a <Cl_alarms_scanforAlarms+0x4a>
   81656:	4b98      	ldr	r3, [pc, #608]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81658:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
   8165c:	2b00      	cmp	r3, #0
   8165e:	d134      	bne.n	816ca <Cl_alarms_scanforAlarms+0xaa>
   81660:	4b96      	ldr	r3, [pc, #600]	; (818bc <Cl_alarms_scanforAlarms+0x29c>)
   81662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   81666:	2b00      	cmp	r3, #0
   81668:	d12f      	bne.n	816ca <Cl_alarms_scanforAlarms+0xaa>
   8166a:	4b93      	ldr	r3, [pc, #588]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   8166c:	f893 3292 	ldrb.w	r3, [r3, #658]	; 0x292
   81670:	2b01      	cmp	r3, #1
   81672:	d02f      	beq.n	816d4 <Cl_alarms_scanforAlarms+0xb4>
   81674:	4b90      	ldr	r3, [pc, #576]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81676:	2201      	movs	r2, #1
   81678:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
   8167c:	4b90      	ldr	r3, [pc, #576]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   8167e:	781b      	ldrb	r3, [r3, #0]
   81680:	4a8f      	ldr	r2, [pc, #572]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   81682:	3301      	adds	r3, #1
   81684:	00db      	lsls	r3, r3, #3
   81686:	4413      	add	r3, r2
   81688:	2229      	movs	r2, #41	; 0x29
   8168a:	809a      	strh	r2, [r3, #4]
   8168c:	4b8a      	ldr	r3, [pc, #552]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   8168e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
   81692:	3301      	adds	r3, #1
   81694:	b2da      	uxtb	r2, r3
   81696:	4b88      	ldr	r3, [pc, #544]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81698:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
   8169c:	4b89      	ldr	r3, [pc, #548]	; (818c4 <Cl_alarms_scanforAlarms+0x2a4>)
   8169e:	2201      	movs	r2, #1
   816a0:	701a      	strb	r2, [r3, #0]
   816a2:	4b89      	ldr	r3, [pc, #548]	; (818c8 <Cl_alarms_scanforAlarms+0x2a8>)
   816a4:	2229      	movs	r2, #41	; 0x29
   816a6:	701a      	strb	r2, [r3, #0]
   816a8:	4b85      	ldr	r3, [pc, #532]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   816aa:	781b      	ldrb	r3, [r3, #0]
   816ac:	461a      	mov	r2, r3
   816ae:	4b84      	ldr	r3, [pc, #528]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   816b0:	4413      	add	r3, r2
   816b2:	222e      	movs	r2, #46	; 0x2e
   816b4:	709a      	strb	r2, [r3, #2]
   816b6:	4b85      	ldr	r3, [pc, #532]	; (818cc <Cl_alarms_scanforAlarms+0x2ac>)
   816b8:	4798      	blx	r3
   816ba:	4603      	mov	r3, r0
   816bc:	71fb      	strb	r3, [r7, #7]
   816be:	79fb      	ldrb	r3, [r7, #7]
   816c0:	2b00      	cmp	r3, #0
   816c2:	d007      	beq.n	816d4 <Cl_alarms_scanforAlarms+0xb4>
   816c4:	4b7b      	ldr	r3, [pc, #492]	; (818b4 <Cl_alarms_scanforAlarms+0x294>)
   816c6:	4798      	blx	r3
   816c8:	e004      	b.n	816d4 <Cl_alarms_scanforAlarms+0xb4>
   816ca:	4b7b      	ldr	r3, [pc, #492]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   816cc:	2204      	movs	r2, #4
   816ce:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
   816d2:	e000      	b.n	816d6 <Cl_alarms_scanforAlarms+0xb6>
   816d4:	bf00      	nop
   816d6:	4b78      	ldr	r3, [pc, #480]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   816d8:	f893 32ae 	ldrb.w	r3, [r3, #686]	; 0x2ae
   816dc:	2b00      	cmp	r3, #0
   816de:	d049      	beq.n	81774 <Cl_alarms_scanforAlarms+0x154>
   816e0:	4b75      	ldr	r3, [pc, #468]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   816e2:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
   816e6:	2b01      	cmp	r3, #1
   816e8:	d104      	bne.n	816f4 <Cl_alarms_scanforAlarms+0xd4>
   816ea:	4b74      	ldr	r3, [pc, #464]	; (818bc <Cl_alarms_scanforAlarms+0x29c>)
   816ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   816f0:	2b00      	cmp	r3, #0
   816f2:	d109      	bne.n	81708 <Cl_alarms_scanforAlarms+0xe8>
   816f4:	4b70      	ldr	r3, [pc, #448]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   816f6:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
   816fa:	2b00      	cmp	r3, #0
   816fc:	d134      	bne.n	81768 <Cl_alarms_scanforAlarms+0x148>
   816fe:	4b6f      	ldr	r3, [pc, #444]	; (818bc <Cl_alarms_scanforAlarms+0x29c>)
   81700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   81704:	2b00      	cmp	r3, #0
   81706:	d12f      	bne.n	81768 <Cl_alarms_scanforAlarms+0x148>
   81708:	4b6b      	ldr	r3, [pc, #428]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   8170a:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
   8170e:	2b01      	cmp	r3, #1
   81710:	d02f      	beq.n	81772 <Cl_alarms_scanforAlarms+0x152>
   81712:	4b69      	ldr	r3, [pc, #420]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81714:	2201      	movs	r2, #1
   81716:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
   8171a:	4b69      	ldr	r3, [pc, #420]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   8171c:	781b      	ldrb	r3, [r3, #0]
   8171e:	4a68      	ldr	r2, [pc, #416]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   81720:	3301      	adds	r3, #1
   81722:	00db      	lsls	r3, r3, #3
   81724:	4413      	add	r3, r2
   81726:	2229      	movs	r2, #41	; 0x29
   81728:	809a      	strh	r2, [r3, #4]
   8172a:	4b63      	ldr	r3, [pc, #396]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   8172c:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
   81730:	3301      	adds	r3, #1
   81732:	b2da      	uxtb	r2, r3
   81734:	4b60      	ldr	r3, [pc, #384]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81736:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
   8173a:	4b62      	ldr	r3, [pc, #392]	; (818c4 <Cl_alarms_scanforAlarms+0x2a4>)
   8173c:	2201      	movs	r2, #1
   8173e:	701a      	strb	r2, [r3, #0]
   81740:	4b61      	ldr	r3, [pc, #388]	; (818c8 <Cl_alarms_scanforAlarms+0x2a8>)
   81742:	222a      	movs	r2, #42	; 0x2a
   81744:	701a      	strb	r2, [r3, #0]
   81746:	4b5e      	ldr	r3, [pc, #376]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   81748:	781b      	ldrb	r3, [r3, #0]
   8174a:	461a      	mov	r2, r3
   8174c:	4b5c      	ldr	r3, [pc, #368]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   8174e:	4413      	add	r3, r2
   81750:	222e      	movs	r2, #46	; 0x2e
   81752:	709a      	strb	r2, [r3, #2]
   81754:	4b5d      	ldr	r3, [pc, #372]	; (818cc <Cl_alarms_scanforAlarms+0x2ac>)
   81756:	4798      	blx	r3
   81758:	4603      	mov	r3, r0
   8175a:	71fb      	strb	r3, [r7, #7]
   8175c:	79fb      	ldrb	r3, [r7, #7]
   8175e:	2b00      	cmp	r3, #0
   81760:	d007      	beq.n	81772 <Cl_alarms_scanforAlarms+0x152>
   81762:	4b54      	ldr	r3, [pc, #336]	; (818b4 <Cl_alarms_scanforAlarms+0x294>)
   81764:	4798      	blx	r3
   81766:	e004      	b.n	81772 <Cl_alarms_scanforAlarms+0x152>
   81768:	4b53      	ldr	r3, [pc, #332]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   8176a:	2204      	movs	r2, #4
   8176c:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
   81770:	e000      	b.n	81774 <Cl_alarms_scanforAlarms+0x154>
   81772:	bf00      	nop
   81774:	4b50      	ldr	r3, [pc, #320]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81776:	f893 32be 	ldrb.w	r3, [r3, #702]	; 0x2be
   8177a:	2b00      	cmp	r3, #0
   8177c:	d049      	beq.n	81812 <Cl_alarms_scanforAlarms+0x1f2>
   8177e:	4b4e      	ldr	r3, [pc, #312]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81780:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
   81784:	2b01      	cmp	r3, #1
   81786:	d104      	bne.n	81792 <Cl_alarms_scanforAlarms+0x172>
   81788:	4b4c      	ldr	r3, [pc, #304]	; (818bc <Cl_alarms_scanforAlarms+0x29c>)
   8178a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   8178e:	2b00      	cmp	r3, #0
   81790:	d109      	bne.n	817a6 <Cl_alarms_scanforAlarms+0x186>
   81792:	4b49      	ldr	r3, [pc, #292]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81794:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
   81798:	2b00      	cmp	r3, #0
   8179a:	d134      	bne.n	81806 <Cl_alarms_scanforAlarms+0x1e6>
   8179c:	4b47      	ldr	r3, [pc, #284]	; (818bc <Cl_alarms_scanforAlarms+0x29c>)
   8179e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   817a2:	2b00      	cmp	r3, #0
   817a4:	d12f      	bne.n	81806 <Cl_alarms_scanforAlarms+0x1e6>
   817a6:	4b44      	ldr	r3, [pc, #272]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   817a8:	f893 32b2 	ldrb.w	r3, [r3, #690]	; 0x2b2
   817ac:	2b01      	cmp	r3, #1
   817ae:	d02f      	beq.n	81810 <Cl_alarms_scanforAlarms+0x1f0>
   817b0:	4b41      	ldr	r3, [pc, #260]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   817b2:	2201      	movs	r2, #1
   817b4:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
   817b8:	4b41      	ldr	r3, [pc, #260]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   817ba:	781b      	ldrb	r3, [r3, #0]
   817bc:	4a40      	ldr	r2, [pc, #256]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   817be:	3301      	adds	r3, #1
   817c0:	00db      	lsls	r3, r3, #3
   817c2:	4413      	add	r3, r2
   817c4:	222b      	movs	r2, #43	; 0x2b
   817c6:	809a      	strh	r2, [r3, #4]
   817c8:	4b3b      	ldr	r3, [pc, #236]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   817ca:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
   817ce:	3301      	adds	r3, #1
   817d0:	b2da      	uxtb	r2, r3
   817d2:	4b39      	ldr	r3, [pc, #228]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   817d4:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
   817d8:	4b3a      	ldr	r3, [pc, #232]	; (818c4 <Cl_alarms_scanforAlarms+0x2a4>)
   817da:	2201      	movs	r2, #1
   817dc:	701a      	strb	r2, [r3, #0]
   817de:	4b3a      	ldr	r3, [pc, #232]	; (818c8 <Cl_alarms_scanforAlarms+0x2a8>)
   817e0:	222b      	movs	r2, #43	; 0x2b
   817e2:	701a      	strb	r2, [r3, #0]
   817e4:	4b36      	ldr	r3, [pc, #216]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   817e6:	781b      	ldrb	r3, [r3, #0]
   817e8:	461a      	mov	r2, r3
   817ea:	4b35      	ldr	r3, [pc, #212]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   817ec:	4413      	add	r3, r2
   817ee:	222e      	movs	r2, #46	; 0x2e
   817f0:	709a      	strb	r2, [r3, #2]
   817f2:	4b36      	ldr	r3, [pc, #216]	; (818cc <Cl_alarms_scanforAlarms+0x2ac>)
   817f4:	4798      	blx	r3
   817f6:	4603      	mov	r3, r0
   817f8:	71fb      	strb	r3, [r7, #7]
   817fa:	79fb      	ldrb	r3, [r7, #7]
   817fc:	2b00      	cmp	r3, #0
   817fe:	d007      	beq.n	81810 <Cl_alarms_scanforAlarms+0x1f0>
   81800:	4b2c      	ldr	r3, [pc, #176]	; (818b4 <Cl_alarms_scanforAlarms+0x294>)
   81802:	4798      	blx	r3
   81804:	e004      	b.n	81810 <Cl_alarms_scanforAlarms+0x1f0>
   81806:	4b2c      	ldr	r3, [pc, #176]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81808:	2204      	movs	r2, #4
   8180a:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
   8180e:	e000      	b.n	81812 <Cl_alarms_scanforAlarms+0x1f2>
   81810:	bf00      	nop
   81812:	4b29      	ldr	r3, [pc, #164]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81814:	f893 32ce 	ldrb.w	r3, [r3, #718]	; 0x2ce
   81818:	2b00      	cmp	r3, #0
   8181a:	d05a      	beq.n	818d2 <Cl_alarms_scanforAlarms+0x2b2>
   8181c:	4b26      	ldr	r3, [pc, #152]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   8181e:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
   81822:	2b01      	cmp	r3, #1
   81824:	d104      	bne.n	81830 <Cl_alarms_scanforAlarms+0x210>
   81826:	4b25      	ldr	r3, [pc, #148]	; (818bc <Cl_alarms_scanforAlarms+0x29c>)
   81828:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   8182c:	2b00      	cmp	r3, #0
   8182e:	d109      	bne.n	81844 <Cl_alarms_scanforAlarms+0x224>
   81830:	4b21      	ldr	r3, [pc, #132]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81832:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
   81836:	2b00      	cmp	r3, #0
   81838:	d134      	bne.n	818a4 <Cl_alarms_scanforAlarms+0x284>
   8183a:	4b20      	ldr	r3, [pc, #128]	; (818bc <Cl_alarms_scanforAlarms+0x29c>)
   8183c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   81840:	2b00      	cmp	r3, #0
   81842:	d12f      	bne.n	818a4 <Cl_alarms_scanforAlarms+0x284>
   81844:	4b1c      	ldr	r3, [pc, #112]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81846:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
   8184a:	2b01      	cmp	r3, #1
   8184c:	d040      	beq.n	818d0 <Cl_alarms_scanforAlarms+0x2b0>
   8184e:	4b1a      	ldr	r3, [pc, #104]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81850:	2201      	movs	r2, #1
   81852:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
   81856:	4b1a      	ldr	r3, [pc, #104]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   81858:	781b      	ldrb	r3, [r3, #0]
   8185a:	4a19      	ldr	r2, [pc, #100]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   8185c:	3301      	adds	r3, #1
   8185e:	00db      	lsls	r3, r3, #3
   81860:	4413      	add	r3, r2
   81862:	222c      	movs	r2, #44	; 0x2c
   81864:	809a      	strh	r2, [r3, #4]
   81866:	4b14      	ldr	r3, [pc, #80]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81868:	f893 32cd 	ldrb.w	r3, [r3, #717]	; 0x2cd
   8186c:	3301      	adds	r3, #1
   8186e:	b2da      	uxtb	r2, r3
   81870:	4b11      	ldr	r3, [pc, #68]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81872:	f883 22cd 	strb.w	r2, [r3, #717]	; 0x2cd
   81876:	4b13      	ldr	r3, [pc, #76]	; (818c4 <Cl_alarms_scanforAlarms+0x2a4>)
   81878:	2201      	movs	r2, #1
   8187a:	701a      	strb	r2, [r3, #0]
   8187c:	4b12      	ldr	r3, [pc, #72]	; (818c8 <Cl_alarms_scanforAlarms+0x2a8>)
   8187e:	222c      	movs	r2, #44	; 0x2c
   81880:	701a      	strb	r2, [r3, #0]
   81882:	4b0f      	ldr	r3, [pc, #60]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   81884:	781b      	ldrb	r3, [r3, #0]
   81886:	461a      	mov	r2, r3
   81888:	4b0d      	ldr	r3, [pc, #52]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   8188a:	4413      	add	r3, r2
   8188c:	222e      	movs	r2, #46	; 0x2e
   8188e:	709a      	strb	r2, [r3, #2]
   81890:	4b0e      	ldr	r3, [pc, #56]	; (818cc <Cl_alarms_scanforAlarms+0x2ac>)
   81892:	4798      	blx	r3
   81894:	4603      	mov	r3, r0
   81896:	71fb      	strb	r3, [r7, #7]
   81898:	79fb      	ldrb	r3, [r7, #7]
   8189a:	2b00      	cmp	r3, #0
   8189c:	d018      	beq.n	818d0 <Cl_alarms_scanforAlarms+0x2b0>
   8189e:	4b05      	ldr	r3, [pc, #20]	; (818b4 <Cl_alarms_scanforAlarms+0x294>)
   818a0:	4798      	blx	r3
   818a2:	e015      	b.n	818d0 <Cl_alarms_scanforAlarms+0x2b0>
   818a4:	4b04      	ldr	r3, [pc, #16]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   818a6:	2204      	movs	r2, #4
   818a8:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
   818ac:	e011      	b.n	818d2 <Cl_alarms_scanforAlarms+0x2b2>
   818ae:	bf00      	nop
   818b0:	00080e59 	.word	0x00080e59
   818b4:	00088725 	.word	0x00088725
   818b8:	200728e0 	.word	0x200728e0
   818bc:	20072e28 	.word	0x20072e28
   818c0:	20072ec4 	.word	0x20072ec4
   818c4:	20071611 	.word	0x20071611
   818c8:	20072d04 	.word	0x20072d04
   818cc:	00082e69 	.word	0x00082e69
   818d0:	bf00      	nop
   818d2:	4b95      	ldr	r3, [pc, #596]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   818d4:	f893 320e 	ldrb.w	r3, [r3, #526]	; 0x20e
   818d8:	2b00      	cmp	r3, #0
   818da:	d032      	beq.n	81942 <Cl_alarms_scanforAlarms+0x322>
   818dc:	4b93      	ldr	r3, [pc, #588]	; (81b2c <Cl_alarms_scanforAlarms+0x50c>)
   818de:	8b1b      	ldrh	r3, [r3, #24]
   818e0:	2b00      	cmp	r3, #0
   818e2:	d02a      	beq.n	8193a <Cl_alarms_scanforAlarms+0x31a>
   818e4:	4b90      	ldr	r3, [pc, #576]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   818e6:	2201      	movs	r2, #1
   818e8:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
   818ec:	4b90      	ldr	r3, [pc, #576]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   818ee:	781b      	ldrb	r3, [r3, #0]
   818f0:	4a8f      	ldr	r2, [pc, #572]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   818f2:	3301      	adds	r3, #1
   818f4:	00db      	lsls	r3, r3, #3
   818f6:	4413      	add	r3, r2
   818f8:	2220      	movs	r2, #32
   818fa:	809a      	strh	r2, [r3, #4]
   818fc:	4b8a      	ldr	r3, [pc, #552]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   818fe:	f893 320d 	ldrb.w	r3, [r3, #525]	; 0x20d
   81902:	3301      	adds	r3, #1
   81904:	b2da      	uxtb	r2, r3
   81906:	4b88      	ldr	r3, [pc, #544]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81908:	f883 220d 	strb.w	r2, [r3, #525]	; 0x20d
   8190c:	4b89      	ldr	r3, [pc, #548]	; (81b34 <Cl_alarms_scanforAlarms+0x514>)
   8190e:	2201      	movs	r2, #1
   81910:	701a      	strb	r2, [r3, #0]
   81912:	4b89      	ldr	r3, [pc, #548]	; (81b38 <Cl_alarms_scanforAlarms+0x518>)
   81914:	2220      	movs	r2, #32
   81916:	701a      	strb	r2, [r3, #0]
   81918:	4b85      	ldr	r3, [pc, #532]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   8191a:	781b      	ldrb	r3, [r3, #0]
   8191c:	461a      	mov	r2, r3
   8191e:	4b84      	ldr	r3, [pc, #528]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81920:	4413      	add	r3, r2
   81922:	222e      	movs	r2, #46	; 0x2e
   81924:	709a      	strb	r2, [r3, #2]
   81926:	4b85      	ldr	r3, [pc, #532]	; (81b3c <Cl_alarms_scanforAlarms+0x51c>)
   81928:	4798      	blx	r3
   8192a:	4603      	mov	r3, r0
   8192c:	71fb      	strb	r3, [r7, #7]
   8192e:	79fb      	ldrb	r3, [r7, #7]
   81930:	2b00      	cmp	r3, #0
   81932:	d006      	beq.n	81942 <Cl_alarms_scanforAlarms+0x322>
   81934:	4b82      	ldr	r3, [pc, #520]	; (81b40 <Cl_alarms_scanforAlarms+0x520>)
   81936:	4798      	blx	r3
   81938:	e003      	b.n	81942 <Cl_alarms_scanforAlarms+0x322>
   8193a:	4b7b      	ldr	r3, [pc, #492]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   8193c:	2204      	movs	r2, #4
   8193e:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
   81942:	4b79      	ldr	r3, [pc, #484]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81944:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
   81948:	2b00      	cmp	r3, #0
   8194a:	d032      	beq.n	819b2 <Cl_alarms_scanforAlarms+0x392>
   8194c:	4b77      	ldr	r3, [pc, #476]	; (81b2c <Cl_alarms_scanforAlarms+0x50c>)
   8194e:	8b5b      	ldrh	r3, [r3, #26]
   81950:	2b00      	cmp	r3, #0
   81952:	d02a      	beq.n	819aa <Cl_alarms_scanforAlarms+0x38a>
   81954:	4b74      	ldr	r3, [pc, #464]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81956:	2201      	movs	r2, #1
   81958:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
   8195c:	4b74      	ldr	r3, [pc, #464]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   8195e:	781b      	ldrb	r3, [r3, #0]
   81960:	4a73      	ldr	r2, [pc, #460]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81962:	3301      	adds	r3, #1
   81964:	00db      	lsls	r3, r3, #3
   81966:	4413      	add	r3, r2
   81968:	2221      	movs	r2, #33	; 0x21
   8196a:	809a      	strh	r2, [r3, #4]
   8196c:	4b6e      	ldr	r3, [pc, #440]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   8196e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
   81972:	3301      	adds	r3, #1
   81974:	b2da      	uxtb	r2, r3
   81976:	4b6c      	ldr	r3, [pc, #432]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81978:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
   8197c:	4b6d      	ldr	r3, [pc, #436]	; (81b34 <Cl_alarms_scanforAlarms+0x514>)
   8197e:	2201      	movs	r2, #1
   81980:	701a      	strb	r2, [r3, #0]
   81982:	4b6d      	ldr	r3, [pc, #436]	; (81b38 <Cl_alarms_scanforAlarms+0x518>)
   81984:	2221      	movs	r2, #33	; 0x21
   81986:	701a      	strb	r2, [r3, #0]
   81988:	4b69      	ldr	r3, [pc, #420]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   8198a:	781b      	ldrb	r3, [r3, #0]
   8198c:	461a      	mov	r2, r3
   8198e:	4b68      	ldr	r3, [pc, #416]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81990:	4413      	add	r3, r2
   81992:	222e      	movs	r2, #46	; 0x2e
   81994:	709a      	strb	r2, [r3, #2]
   81996:	4b69      	ldr	r3, [pc, #420]	; (81b3c <Cl_alarms_scanforAlarms+0x51c>)
   81998:	4798      	blx	r3
   8199a:	4603      	mov	r3, r0
   8199c:	71fb      	strb	r3, [r7, #7]
   8199e:	79fb      	ldrb	r3, [r7, #7]
   819a0:	2b00      	cmp	r3, #0
   819a2:	d006      	beq.n	819b2 <Cl_alarms_scanforAlarms+0x392>
   819a4:	4b66      	ldr	r3, [pc, #408]	; (81b40 <Cl_alarms_scanforAlarms+0x520>)
   819a6:	4798      	blx	r3
   819a8:	e003      	b.n	819b2 <Cl_alarms_scanforAlarms+0x392>
   819aa:	4b5f      	ldr	r3, [pc, #380]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   819ac:	2204      	movs	r2, #4
   819ae:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
   819b2:	4b5d      	ldr	r3, [pc, #372]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   819b4:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
   819b8:	2b00      	cmp	r3, #0
   819ba:	d032      	beq.n	81a22 <Cl_alarms_scanforAlarms+0x402>
   819bc:	4b5b      	ldr	r3, [pc, #364]	; (81b2c <Cl_alarms_scanforAlarms+0x50c>)
   819be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   819c0:	2b00      	cmp	r3, #0
   819c2:	d02a      	beq.n	81a1a <Cl_alarms_scanforAlarms+0x3fa>
   819c4:	4b58      	ldr	r3, [pc, #352]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   819c6:	2201      	movs	r2, #1
   819c8:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
   819cc:	4b58      	ldr	r3, [pc, #352]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   819ce:	781b      	ldrb	r3, [r3, #0]
   819d0:	4a57      	ldr	r2, [pc, #348]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   819d2:	3301      	adds	r3, #1
   819d4:	00db      	lsls	r3, r3, #3
   819d6:	4413      	add	r3, r2
   819d8:	2222      	movs	r2, #34	; 0x22
   819da:	809a      	strh	r2, [r3, #4]
   819dc:	4b52      	ldr	r3, [pc, #328]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   819de:	f893 322d 	ldrb.w	r3, [r3, #557]	; 0x22d
   819e2:	3301      	adds	r3, #1
   819e4:	b2da      	uxtb	r2, r3
   819e6:	4b50      	ldr	r3, [pc, #320]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   819e8:	f883 222d 	strb.w	r2, [r3, #557]	; 0x22d
   819ec:	4b51      	ldr	r3, [pc, #324]	; (81b34 <Cl_alarms_scanforAlarms+0x514>)
   819ee:	2201      	movs	r2, #1
   819f0:	701a      	strb	r2, [r3, #0]
   819f2:	4b51      	ldr	r3, [pc, #324]	; (81b38 <Cl_alarms_scanforAlarms+0x518>)
   819f4:	2222      	movs	r2, #34	; 0x22
   819f6:	701a      	strb	r2, [r3, #0]
   819f8:	4b4d      	ldr	r3, [pc, #308]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   819fa:	781b      	ldrb	r3, [r3, #0]
   819fc:	461a      	mov	r2, r3
   819fe:	4b4c      	ldr	r3, [pc, #304]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81a00:	4413      	add	r3, r2
   81a02:	222e      	movs	r2, #46	; 0x2e
   81a04:	709a      	strb	r2, [r3, #2]
   81a06:	4b4d      	ldr	r3, [pc, #308]	; (81b3c <Cl_alarms_scanforAlarms+0x51c>)
   81a08:	4798      	blx	r3
   81a0a:	4603      	mov	r3, r0
   81a0c:	71fb      	strb	r3, [r7, #7]
   81a0e:	79fb      	ldrb	r3, [r7, #7]
   81a10:	2b00      	cmp	r3, #0
   81a12:	d006      	beq.n	81a22 <Cl_alarms_scanforAlarms+0x402>
   81a14:	4b4a      	ldr	r3, [pc, #296]	; (81b40 <Cl_alarms_scanforAlarms+0x520>)
   81a16:	4798      	blx	r3
   81a18:	e003      	b.n	81a22 <Cl_alarms_scanforAlarms+0x402>
   81a1a:	4b43      	ldr	r3, [pc, #268]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81a1c:	2204      	movs	r2, #4
   81a1e:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
   81a22:	4b41      	ldr	r3, [pc, #260]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81a24:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
   81a28:	2b00      	cmp	r3, #0
   81a2a:	d03d      	beq.n	81aa8 <Cl_alarms_scanforAlarms+0x488>
   81a2c:	4b45      	ldr	r3, [pc, #276]	; (81b44 <Cl_alarms_scanforAlarms+0x524>)
   81a2e:	689a      	ldr	r2, [r3, #8]
   81a30:	4b45      	ldr	r3, [pc, #276]	; (81b48 <Cl_alarms_scanforAlarms+0x528>)
   81a32:	6819      	ldr	r1, [r3, #0]
   81a34:	4b45      	ldr	r3, [pc, #276]	; (81b4c <Cl_alarms_scanforAlarms+0x52c>)
   81a36:	4610      	mov	r0, r2
   81a38:	4798      	blx	r3
   81a3a:	4603      	mov	r3, r0
   81a3c:	2b00      	cmp	r3, #0
   81a3e:	d02a      	beq.n	81a96 <Cl_alarms_scanforAlarms+0x476>
   81a40:	4b39      	ldr	r3, [pc, #228]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81a42:	2201      	movs	r2, #1
   81a44:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
   81a48:	4b39      	ldr	r3, [pc, #228]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81a4a:	781b      	ldrb	r3, [r3, #0]
   81a4c:	4a38      	ldr	r2, [pc, #224]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81a4e:	3301      	adds	r3, #1
   81a50:	00db      	lsls	r3, r3, #3
   81a52:	4413      	add	r3, r2
   81a54:	2224      	movs	r2, #36	; 0x24
   81a56:	809a      	strh	r2, [r3, #4]
   81a58:	4b33      	ldr	r3, [pc, #204]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81a5a:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
   81a5e:	3301      	adds	r3, #1
   81a60:	b2da      	uxtb	r2, r3
   81a62:	4b31      	ldr	r3, [pc, #196]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81a64:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d
   81a68:	4b32      	ldr	r3, [pc, #200]	; (81b34 <Cl_alarms_scanforAlarms+0x514>)
   81a6a:	2201      	movs	r2, #1
   81a6c:	701a      	strb	r2, [r3, #0]
   81a6e:	4b32      	ldr	r3, [pc, #200]	; (81b38 <Cl_alarms_scanforAlarms+0x518>)
   81a70:	2224      	movs	r2, #36	; 0x24
   81a72:	701a      	strb	r2, [r3, #0]
   81a74:	4b2e      	ldr	r3, [pc, #184]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81a76:	781b      	ldrb	r3, [r3, #0]
   81a78:	461a      	mov	r2, r3
   81a7a:	4b2d      	ldr	r3, [pc, #180]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81a7c:	4413      	add	r3, r2
   81a7e:	222e      	movs	r2, #46	; 0x2e
   81a80:	709a      	strb	r2, [r3, #2]
   81a82:	4b2e      	ldr	r3, [pc, #184]	; (81b3c <Cl_alarms_scanforAlarms+0x51c>)
   81a84:	4798      	blx	r3
   81a86:	4603      	mov	r3, r0
   81a88:	71fb      	strb	r3, [r7, #7]
   81a8a:	79fb      	ldrb	r3, [r7, #7]
   81a8c:	2b00      	cmp	r3, #0
   81a8e:	d00b      	beq.n	81aa8 <Cl_alarms_scanforAlarms+0x488>
   81a90:	4b2b      	ldr	r3, [pc, #172]	; (81b40 <Cl_alarms_scanforAlarms+0x520>)
   81a92:	4798      	blx	r3
   81a94:	e008      	b.n	81aa8 <Cl_alarms_scanforAlarms+0x488>
   81a96:	4b24      	ldr	r3, [pc, #144]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81a98:	f893 3242 	ldrb.w	r3, [r3, #578]	; 0x242
   81a9c:	2b01      	cmp	r3, #1
   81a9e:	d103      	bne.n	81aa8 <Cl_alarms_scanforAlarms+0x488>
   81aa0:	4b21      	ldr	r3, [pc, #132]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81aa2:	2204      	movs	r2, #4
   81aa4:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
   81aa8:	4b1f      	ldr	r3, [pc, #124]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81aaa:	f893 323e 	ldrb.w	r3, [r3, #574]	; 0x23e
   81aae:	2b00      	cmp	r3, #0
   81ab0:	d05d      	beq.n	81b6e <Cl_alarms_scanforAlarms+0x54e>
   81ab2:	220b      	movs	r2, #11
   81ab4:	4926      	ldr	r1, [pc, #152]	; (81b50 <Cl_alarms_scanforAlarms+0x530>)
   81ab6:	2018      	movs	r0, #24
   81ab8:	4b26      	ldr	r3, [pc, #152]	; (81b54 <Cl_alarms_scanforAlarms+0x534>)
   81aba:	4798      	blx	r3
   81abc:	4b21      	ldr	r3, [pc, #132]	; (81b44 <Cl_alarms_scanforAlarms+0x524>)
   81abe:	68da      	ldr	r2, [r3, #12]
   81ac0:	4b21      	ldr	r3, [pc, #132]	; (81b48 <Cl_alarms_scanforAlarms+0x528>)
   81ac2:	6819      	ldr	r1, [r3, #0]
   81ac4:	4b24      	ldr	r3, [pc, #144]	; (81b58 <Cl_alarms_scanforAlarms+0x538>)
   81ac6:	4610      	mov	r0, r2
   81ac8:	4798      	blx	r3
   81aca:	4603      	mov	r3, r0
   81acc:	2b00      	cmp	r3, #0
   81ace:	d045      	beq.n	81b5c <Cl_alarms_scanforAlarms+0x53c>
   81ad0:	4b15      	ldr	r3, [pc, #84]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81ad2:	2201      	movs	r2, #1
   81ad4:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
   81ad8:	4b15      	ldr	r3, [pc, #84]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81ada:	781b      	ldrb	r3, [r3, #0]
   81adc:	4a14      	ldr	r2, [pc, #80]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81ade:	3301      	adds	r3, #1
   81ae0:	00db      	lsls	r3, r3, #3
   81ae2:	4413      	add	r3, r2
   81ae4:	2223      	movs	r2, #35	; 0x23
   81ae6:	809a      	strh	r2, [r3, #4]
   81ae8:	4b0f      	ldr	r3, [pc, #60]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81aea:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
   81aee:	3301      	adds	r3, #1
   81af0:	b2da      	uxtb	r2, r3
   81af2:	4b0d      	ldr	r3, [pc, #52]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81af4:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d
   81af8:	4b0e      	ldr	r3, [pc, #56]	; (81b34 <Cl_alarms_scanforAlarms+0x514>)
   81afa:	2201      	movs	r2, #1
   81afc:	701a      	strb	r2, [r3, #0]
   81afe:	4b0e      	ldr	r3, [pc, #56]	; (81b38 <Cl_alarms_scanforAlarms+0x518>)
   81b00:	2223      	movs	r2, #35	; 0x23
   81b02:	701a      	strb	r2, [r3, #0]
   81b04:	4b0a      	ldr	r3, [pc, #40]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81b06:	781b      	ldrb	r3, [r3, #0]
   81b08:	461a      	mov	r2, r3
   81b0a:	4b09      	ldr	r3, [pc, #36]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81b0c:	4413      	add	r3, r2
   81b0e:	222e      	movs	r2, #46	; 0x2e
   81b10:	709a      	strb	r2, [r3, #2]
   81b12:	4b0a      	ldr	r3, [pc, #40]	; (81b3c <Cl_alarms_scanforAlarms+0x51c>)
   81b14:	4798      	blx	r3
   81b16:	4603      	mov	r3, r0
   81b18:	71fb      	strb	r3, [r7, #7]
   81b1a:	79fb      	ldrb	r3, [r7, #7]
   81b1c:	2b00      	cmp	r3, #0
   81b1e:	d026      	beq.n	81b6e <Cl_alarms_scanforAlarms+0x54e>
   81b20:	4b07      	ldr	r3, [pc, #28]	; (81b40 <Cl_alarms_scanforAlarms+0x520>)
   81b22:	4798      	blx	r3
   81b24:	e023      	b.n	81b6e <Cl_alarms_scanforAlarms+0x54e>
   81b26:	bf00      	nop
   81b28:	200728e0 	.word	0x200728e0
   81b2c:	20072e28 	.word	0x20072e28
   81b30:	20072ec4 	.word	0x20072ec4
   81b34:	20071611 	.word	0x20071611
   81b38:	20072d04 	.word	0x20072d04
   81b3c:	00082e69 	.word	0x00082e69
   81b40:	00088725 	.word	0x00088725
   81b44:	20072d08 	.word	0x20072d08
   81b48:	20072d00 	.word	0x20072d00
   81b4c:	000a4151 	.word	0x000a4151
   81b50:	000a5e1c 	.word	0x000a5e1c
   81b54:	00099729 	.word	0x00099729
   81b58:	000a418d 	.word	0x000a418d
   81b5c:	4b93      	ldr	r3, [pc, #588]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81b5e:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
   81b62:	2b01      	cmp	r3, #1
   81b64:	d103      	bne.n	81b6e <Cl_alarms_scanforAlarms+0x54e>
   81b66:	4b91      	ldr	r3, [pc, #580]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81b68:	2204      	movs	r2, #4
   81b6a:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
   81b6e:	4b8f      	ldr	r3, [pc, #572]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81b70:	f893 326e 	ldrb.w	r3, [r3, #622]	; 0x26e
   81b74:	2b00      	cmp	r3, #0
   81b76:	d047      	beq.n	81c08 <Cl_alarms_scanforAlarms+0x5e8>
   81b78:	2207      	movs	r2, #7
   81b7a:	498d      	ldr	r1, [pc, #564]	; (81db0 <Cl_alarms_scanforAlarms+0x790>)
   81b7c:	2018      	movs	r0, #24
   81b7e:	4b8d      	ldr	r3, [pc, #564]	; (81db4 <Cl_alarms_scanforAlarms+0x794>)
   81b80:	4798      	blx	r3
   81b82:	79fb      	ldrb	r3, [r7, #7]
   81b84:	2b00      	cmp	r3, #0
   81b86:	d001      	beq.n	81b8c <Cl_alarms_scanforAlarms+0x56c>
   81b88:	4b8b      	ldr	r3, [pc, #556]	; (81db8 <Cl_alarms_scanforAlarms+0x798>)
   81b8a:	4798      	blx	r3
   81b8c:	4b8b      	ldr	r3, [pc, #556]	; (81dbc <Cl_alarms_scanforAlarms+0x79c>)
   81b8e:	691a      	ldr	r2, [r3, #16]
   81b90:	4b8b      	ldr	r3, [pc, #556]	; (81dc0 <Cl_alarms_scanforAlarms+0x7a0>)
   81b92:	6819      	ldr	r1, [r3, #0]
   81b94:	4b8b      	ldr	r3, [pc, #556]	; (81dc4 <Cl_alarms_scanforAlarms+0x7a4>)
   81b96:	4610      	mov	r0, r2
   81b98:	4798      	blx	r3
   81b9a:	4603      	mov	r3, r0
   81b9c:	2b00      	cmp	r3, #0
   81b9e:	d02a      	beq.n	81bf6 <Cl_alarms_scanforAlarms+0x5d6>
   81ba0:	4b82      	ldr	r3, [pc, #520]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81ba2:	2201      	movs	r2, #1
   81ba4:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
   81ba8:	4b87      	ldr	r3, [pc, #540]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81baa:	781b      	ldrb	r3, [r3, #0]
   81bac:	4a86      	ldr	r2, [pc, #536]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81bae:	3301      	adds	r3, #1
   81bb0:	00db      	lsls	r3, r3, #3
   81bb2:	4413      	add	r3, r2
   81bb4:	2226      	movs	r2, #38	; 0x26
   81bb6:	809a      	strh	r2, [r3, #4]
   81bb8:	4b7c      	ldr	r3, [pc, #496]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81bba:	f893 326d 	ldrb.w	r3, [r3, #621]	; 0x26d
   81bbe:	3301      	adds	r3, #1
   81bc0:	b2da      	uxtb	r2, r3
   81bc2:	4b7a      	ldr	r3, [pc, #488]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81bc4:	f883 226d 	strb.w	r2, [r3, #621]	; 0x26d
   81bc8:	4b80      	ldr	r3, [pc, #512]	; (81dcc <Cl_alarms_scanforAlarms+0x7ac>)
   81bca:	2201      	movs	r2, #1
   81bcc:	701a      	strb	r2, [r3, #0]
   81bce:	4b80      	ldr	r3, [pc, #512]	; (81dd0 <Cl_alarms_scanforAlarms+0x7b0>)
   81bd0:	2226      	movs	r2, #38	; 0x26
   81bd2:	701a      	strb	r2, [r3, #0]
   81bd4:	4b7c      	ldr	r3, [pc, #496]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81bd6:	781b      	ldrb	r3, [r3, #0]
   81bd8:	461a      	mov	r2, r3
   81bda:	4b7b      	ldr	r3, [pc, #492]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81bdc:	4413      	add	r3, r2
   81bde:	222e      	movs	r2, #46	; 0x2e
   81be0:	709a      	strb	r2, [r3, #2]
   81be2:	4b7c      	ldr	r3, [pc, #496]	; (81dd4 <Cl_alarms_scanforAlarms+0x7b4>)
   81be4:	4798      	blx	r3
   81be6:	4603      	mov	r3, r0
   81be8:	71fb      	strb	r3, [r7, #7]
   81bea:	79fb      	ldrb	r3, [r7, #7]
   81bec:	2b00      	cmp	r3, #0
   81bee:	d00b      	beq.n	81c08 <Cl_alarms_scanforAlarms+0x5e8>
   81bf0:	4b71      	ldr	r3, [pc, #452]	; (81db8 <Cl_alarms_scanforAlarms+0x798>)
   81bf2:	4798      	blx	r3
   81bf4:	e008      	b.n	81c08 <Cl_alarms_scanforAlarms+0x5e8>
   81bf6:	4b6d      	ldr	r3, [pc, #436]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81bf8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
   81bfc:	2b01      	cmp	r3, #1
   81bfe:	d103      	bne.n	81c08 <Cl_alarms_scanforAlarms+0x5e8>
   81c00:	4b6a      	ldr	r3, [pc, #424]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81c02:	2204      	movs	r2, #4
   81c04:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
   81c08:	4b68      	ldr	r3, [pc, #416]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81c0a:	f893 325e 	ldrb.w	r3, [r3, #606]	; 0x25e
   81c0e:	2b00      	cmp	r3, #0
   81c10:	d03d      	beq.n	81c8e <Cl_alarms_scanforAlarms+0x66e>
   81c12:	4b6a      	ldr	r3, [pc, #424]	; (81dbc <Cl_alarms_scanforAlarms+0x79c>)
   81c14:	695a      	ldr	r2, [r3, #20]
   81c16:	4b6a      	ldr	r3, [pc, #424]	; (81dc0 <Cl_alarms_scanforAlarms+0x7a0>)
   81c18:	6819      	ldr	r1, [r3, #0]
   81c1a:	4b6f      	ldr	r3, [pc, #444]	; (81dd8 <Cl_alarms_scanforAlarms+0x7b8>)
   81c1c:	4610      	mov	r0, r2
   81c1e:	4798      	blx	r3
   81c20:	4603      	mov	r3, r0
   81c22:	2b00      	cmp	r3, #0
   81c24:	d02a      	beq.n	81c7c <Cl_alarms_scanforAlarms+0x65c>
   81c26:	4b61      	ldr	r3, [pc, #388]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81c28:	2201      	movs	r2, #1
   81c2a:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
   81c2e:	4b66      	ldr	r3, [pc, #408]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81c30:	781b      	ldrb	r3, [r3, #0]
   81c32:	4a65      	ldr	r2, [pc, #404]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81c34:	3301      	adds	r3, #1
   81c36:	00db      	lsls	r3, r3, #3
   81c38:	4413      	add	r3, r2
   81c3a:	2225      	movs	r2, #37	; 0x25
   81c3c:	809a      	strh	r2, [r3, #4]
   81c3e:	4b5b      	ldr	r3, [pc, #364]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81c40:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
   81c44:	3301      	adds	r3, #1
   81c46:	b2da      	uxtb	r2, r3
   81c48:	4b58      	ldr	r3, [pc, #352]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81c4a:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
   81c4e:	4b5f      	ldr	r3, [pc, #380]	; (81dcc <Cl_alarms_scanforAlarms+0x7ac>)
   81c50:	2201      	movs	r2, #1
   81c52:	701a      	strb	r2, [r3, #0]
   81c54:	4b5e      	ldr	r3, [pc, #376]	; (81dd0 <Cl_alarms_scanforAlarms+0x7b0>)
   81c56:	2226      	movs	r2, #38	; 0x26
   81c58:	701a      	strb	r2, [r3, #0]
   81c5a:	4b5b      	ldr	r3, [pc, #364]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81c5c:	781b      	ldrb	r3, [r3, #0]
   81c5e:	461a      	mov	r2, r3
   81c60:	4b59      	ldr	r3, [pc, #356]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81c62:	4413      	add	r3, r2
   81c64:	222e      	movs	r2, #46	; 0x2e
   81c66:	709a      	strb	r2, [r3, #2]
   81c68:	4b5a      	ldr	r3, [pc, #360]	; (81dd4 <Cl_alarms_scanforAlarms+0x7b4>)
   81c6a:	4798      	blx	r3
   81c6c:	4603      	mov	r3, r0
   81c6e:	71fb      	strb	r3, [r7, #7]
   81c70:	79fb      	ldrb	r3, [r7, #7]
   81c72:	2b00      	cmp	r3, #0
   81c74:	d00b      	beq.n	81c8e <Cl_alarms_scanforAlarms+0x66e>
   81c76:	4b50      	ldr	r3, [pc, #320]	; (81db8 <Cl_alarms_scanforAlarms+0x798>)
   81c78:	4798      	blx	r3
   81c7a:	e008      	b.n	81c8e <Cl_alarms_scanforAlarms+0x66e>
   81c7c:	4b4b      	ldr	r3, [pc, #300]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81c7e:	f893 3252 	ldrb.w	r3, [r3, #594]	; 0x252
   81c82:	2b01      	cmp	r3, #1
   81c84:	d103      	bne.n	81c8e <Cl_alarms_scanforAlarms+0x66e>
   81c86:	4b49      	ldr	r3, [pc, #292]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81c88:	2204      	movs	r2, #4
   81c8a:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
   81c8e:	4b47      	ldr	r3, [pc, #284]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81c90:	7f9b      	ldrb	r3, [r3, #30]
   81c92:	2b00      	cmp	r3, #0
   81c94:	d043      	beq.n	81d1e <Cl_alarms_scanforAlarms+0x6fe>
   81c96:	4b45      	ldr	r3, [pc, #276]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81c98:	7c5b      	ldrb	r3, [r3, #17]
   81c9a:	2b01      	cmp	r3, #1
   81c9c:	d103      	bne.n	81ca6 <Cl_alarms_scanforAlarms+0x686>
   81c9e:	4b4f      	ldr	r3, [pc, #316]	; (81ddc <Cl_alarms_scanforAlarms+0x7bc>)
   81ca0:	781b      	ldrb	r3, [r3, #0]
   81ca2:	2b00      	cmp	r3, #0
   81ca4:	d10a      	bne.n	81cbc <Cl_alarms_scanforAlarms+0x69c>
   81ca6:	4b41      	ldr	r3, [pc, #260]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81ca8:	7c5b      	ldrb	r3, [r3, #17]
   81caa:	2b00      	cmp	r3, #0
   81cac:	d132      	bne.n	81d14 <Cl_alarms_scanforAlarms+0x6f4>
   81cae:	4b4b      	ldr	r3, [pc, #300]	; (81ddc <Cl_alarms_scanforAlarms+0x7bc>)
   81cb0:	781b      	ldrb	r3, [r3, #0]
   81cb2:	f083 0301 	eor.w	r3, r3, #1
   81cb6:	b2db      	uxtb	r3, r3
   81cb8:	2b00      	cmp	r3, #0
   81cba:	d02b      	beq.n	81d14 <Cl_alarms_scanforAlarms+0x6f4>
   81cbc:	4b3b      	ldr	r3, [pc, #236]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81cbe:	7c9b      	ldrb	r3, [r3, #18]
   81cc0:	2b01      	cmp	r3, #1
   81cc2:	d02b      	beq.n	81d1c <Cl_alarms_scanforAlarms+0x6fc>
   81cc4:	4b39      	ldr	r3, [pc, #228]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81cc6:	2201      	movs	r2, #1
   81cc8:	749a      	strb	r2, [r3, #18]
   81cca:	4b3f      	ldr	r3, [pc, #252]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81ccc:	781b      	ldrb	r3, [r3, #0]
   81cce:	4a3e      	ldr	r2, [pc, #248]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81cd0:	3301      	adds	r3, #1
   81cd2:	00db      	lsls	r3, r3, #3
   81cd4:	4413      	add	r3, r2
   81cd6:	2201      	movs	r2, #1
   81cd8:	809a      	strh	r2, [r3, #4]
   81cda:	4b34      	ldr	r3, [pc, #208]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81cdc:	7f5b      	ldrb	r3, [r3, #29]
   81cde:	3301      	adds	r3, #1
   81ce0:	b2da      	uxtb	r2, r3
   81ce2:	4b32      	ldr	r3, [pc, #200]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81ce4:	775a      	strb	r2, [r3, #29]
   81ce6:	4b39      	ldr	r3, [pc, #228]	; (81dcc <Cl_alarms_scanforAlarms+0x7ac>)
   81ce8:	2201      	movs	r2, #1
   81cea:	701a      	strb	r2, [r3, #0]
   81cec:	4b38      	ldr	r3, [pc, #224]	; (81dd0 <Cl_alarms_scanforAlarms+0x7b0>)
   81cee:	2201      	movs	r2, #1
   81cf0:	701a      	strb	r2, [r3, #0]
   81cf2:	4b35      	ldr	r3, [pc, #212]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81cf4:	781b      	ldrb	r3, [r3, #0]
   81cf6:	461a      	mov	r2, r3
   81cf8:	4b33      	ldr	r3, [pc, #204]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81cfa:	4413      	add	r3, r2
   81cfc:	222e      	movs	r2, #46	; 0x2e
   81cfe:	709a      	strb	r2, [r3, #2]
   81d00:	4b34      	ldr	r3, [pc, #208]	; (81dd4 <Cl_alarms_scanforAlarms+0x7b4>)
   81d02:	4798      	blx	r3
   81d04:	4603      	mov	r3, r0
   81d06:	71fb      	strb	r3, [r7, #7]
   81d08:	79fb      	ldrb	r3, [r7, #7]
   81d0a:	2b00      	cmp	r3, #0
   81d0c:	d006      	beq.n	81d1c <Cl_alarms_scanforAlarms+0x6fc>
   81d0e:	4b2a      	ldr	r3, [pc, #168]	; (81db8 <Cl_alarms_scanforAlarms+0x798>)
   81d10:	4798      	blx	r3
   81d12:	e003      	b.n	81d1c <Cl_alarms_scanforAlarms+0x6fc>
   81d14:	4b25      	ldr	r3, [pc, #148]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81d16:	2204      	movs	r2, #4
   81d18:	749a      	strb	r2, [r3, #18]
   81d1a:	e000      	b.n	81d1e <Cl_alarms_scanforAlarms+0x6fe>
   81d1c:	bf00      	nop
   81d1e:	4b23      	ldr	r3, [pc, #140]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   81d24:	2b00      	cmp	r3, #0
   81d26:	d05f      	beq.n	81de8 <Cl_alarms_scanforAlarms+0x7c8>
   81d28:	4b20      	ldr	r3, [pc, #128]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81d2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   81d2e:	2b01      	cmp	r3, #1
   81d30:	d104      	bne.n	81d3c <Cl_alarms_scanforAlarms+0x71c>
   81d32:	4b2a      	ldr	r3, [pc, #168]	; (81ddc <Cl_alarms_scanforAlarms+0x7bc>)
   81d34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81d38:	2b00      	cmp	r3, #0
   81d3a:	d10c      	bne.n	81d56 <Cl_alarms_scanforAlarms+0x736>
   81d3c:	4b1b      	ldr	r3, [pc, #108]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81d3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   81d42:	2b00      	cmp	r3, #0
   81d44:	d14c      	bne.n	81de0 <Cl_alarms_scanforAlarms+0x7c0>
   81d46:	4b25      	ldr	r3, [pc, #148]	; (81ddc <Cl_alarms_scanforAlarms+0x7bc>)
   81d48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81d4c:	f083 0301 	eor.w	r3, r3, #1
   81d50:	b2db      	uxtb	r3, r3
   81d52:	2b00      	cmp	r3, #0
   81d54:	d044      	beq.n	81de0 <Cl_alarms_scanforAlarms+0x7c0>
   81d56:	4b15      	ldr	r3, [pc, #84]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81d58:	2201      	movs	r2, #1
   81d5a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   81d5e:	4b1a      	ldr	r3, [pc, #104]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81d60:	781b      	ldrb	r3, [r3, #0]
   81d62:	4a19      	ldr	r2, [pc, #100]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81d64:	3301      	adds	r3, #1
   81d66:	00db      	lsls	r3, r3, #3
   81d68:	4413      	add	r3, r2
   81d6a:	2203      	movs	r2, #3
   81d6c:	809a      	strh	r2, [r3, #4]
   81d6e:	4b0f      	ldr	r3, [pc, #60]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   81d74:	3301      	adds	r3, #1
   81d76:	b2da      	uxtb	r2, r3
   81d78:	4b0c      	ldr	r3, [pc, #48]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
   81d7e:	4b13      	ldr	r3, [pc, #76]	; (81dcc <Cl_alarms_scanforAlarms+0x7ac>)
   81d80:	2201      	movs	r2, #1
   81d82:	701a      	strb	r2, [r3, #0]
   81d84:	4b12      	ldr	r3, [pc, #72]	; (81dd0 <Cl_alarms_scanforAlarms+0x7b0>)
   81d86:	2203      	movs	r2, #3
   81d88:	701a      	strb	r2, [r3, #0]
   81d8a:	4b0f      	ldr	r3, [pc, #60]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81d8c:	781b      	ldrb	r3, [r3, #0]
   81d8e:	461a      	mov	r2, r3
   81d90:	4b0d      	ldr	r3, [pc, #52]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81d92:	4413      	add	r3, r2
   81d94:	222e      	movs	r2, #46	; 0x2e
   81d96:	709a      	strb	r2, [r3, #2]
   81d98:	4b0e      	ldr	r3, [pc, #56]	; (81dd4 <Cl_alarms_scanforAlarms+0x7b4>)
   81d9a:	4798      	blx	r3
   81d9c:	4603      	mov	r3, r0
   81d9e:	71fb      	strb	r3, [r7, #7]
   81da0:	79fb      	ldrb	r3, [r7, #7]
   81da2:	2b00      	cmp	r3, #0
   81da4:	d020      	beq.n	81de8 <Cl_alarms_scanforAlarms+0x7c8>
   81da6:	4b04      	ldr	r3, [pc, #16]	; (81db8 <Cl_alarms_scanforAlarms+0x798>)
   81da8:	4798      	blx	r3
   81daa:	e01d      	b.n	81de8 <Cl_alarms_scanforAlarms+0x7c8>
   81dac:	200728e0 	.word	0x200728e0
   81db0:	000a5e28 	.word	0x000a5e28
   81db4:	00099729 	.word	0x00099729
   81db8:	00088725 	.word	0x00088725
   81dbc:	20072d08 	.word	0x20072d08
   81dc0:	20071614 	.word	0x20071614
   81dc4:	000a4151 	.word	0x000a4151
   81dc8:	20072ec4 	.word	0x20072ec4
   81dcc:	20071611 	.word	0x20071611
   81dd0:	20072d04 	.word	0x20072d04
   81dd4:	00082e69 	.word	0x00082e69
   81dd8:	000a418d 	.word	0x000a418d
   81ddc:	20072e28 	.word	0x20072e28
   81de0:	4b96      	ldr	r3, [pc, #600]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81de2:	2204      	movs	r2, #4
   81de4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   81de8:	4b94      	ldr	r3, [pc, #592]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81dea:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
   81dee:	2b00      	cmp	r3, #0
   81df0:	d045      	beq.n	81e7e <Cl_alarms_scanforAlarms+0x85e>
   81df2:	4b92      	ldr	r3, [pc, #584]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81df4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   81df8:	2b01      	cmp	r3, #1
   81dfa:	d104      	bne.n	81e06 <Cl_alarms_scanforAlarms+0x7e6>
   81dfc:	4b90      	ldr	r3, [pc, #576]	; (82040 <Cl_alarms_scanforAlarms+0xa20>)
   81dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81e02:	2b00      	cmp	r3, #0
   81e04:	d10c      	bne.n	81e20 <Cl_alarms_scanforAlarms+0x800>
   81e06:	4b8d      	ldr	r3, [pc, #564]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81e08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   81e0c:	2b00      	cmp	r3, #0
   81e0e:	d132      	bne.n	81e76 <Cl_alarms_scanforAlarms+0x856>
   81e10:	4b8b      	ldr	r3, [pc, #556]	; (82040 <Cl_alarms_scanforAlarms+0xa20>)
   81e12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81e16:	f083 0301 	eor.w	r3, r3, #1
   81e1a:	b2db      	uxtb	r3, r3
   81e1c:	2b00      	cmp	r3, #0
   81e1e:	d02a      	beq.n	81e76 <Cl_alarms_scanforAlarms+0x856>
   81e20:	4b86      	ldr	r3, [pc, #536]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81e22:	2201      	movs	r2, #1
   81e24:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
   81e28:	4b86      	ldr	r3, [pc, #536]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81e2a:	781b      	ldrb	r3, [r3, #0]
   81e2c:	4a85      	ldr	r2, [pc, #532]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81e2e:	3301      	adds	r3, #1
   81e30:	00db      	lsls	r3, r3, #3
   81e32:	4413      	add	r3, r2
   81e34:	2203      	movs	r2, #3
   81e36:	809a      	strh	r2, [r3, #4]
   81e38:	4b80      	ldr	r3, [pc, #512]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81e3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   81e3e:	3301      	adds	r3, #1
   81e40:	b2da      	uxtb	r2, r3
   81e42:	4b7e      	ldr	r3, [pc, #504]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81e44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   81e48:	4b7f      	ldr	r3, [pc, #508]	; (82048 <Cl_alarms_scanforAlarms+0xa28>)
   81e4a:	2201      	movs	r2, #1
   81e4c:	701a      	strb	r2, [r3, #0]
   81e4e:	4b7f      	ldr	r3, [pc, #508]	; (8204c <Cl_alarms_scanforAlarms+0xa2c>)
   81e50:	2205      	movs	r2, #5
   81e52:	701a      	strb	r2, [r3, #0]
   81e54:	4b7b      	ldr	r3, [pc, #492]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81e56:	781b      	ldrb	r3, [r3, #0]
   81e58:	461a      	mov	r2, r3
   81e5a:	4b7a      	ldr	r3, [pc, #488]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81e5c:	4413      	add	r3, r2
   81e5e:	222e      	movs	r2, #46	; 0x2e
   81e60:	709a      	strb	r2, [r3, #2]
   81e62:	4b7b      	ldr	r3, [pc, #492]	; (82050 <Cl_alarms_scanforAlarms+0xa30>)
   81e64:	4798      	blx	r3
   81e66:	4603      	mov	r3, r0
   81e68:	71fb      	strb	r3, [r7, #7]
   81e6a:	79fb      	ldrb	r3, [r7, #7]
   81e6c:	2b00      	cmp	r3, #0
   81e6e:	d006      	beq.n	81e7e <Cl_alarms_scanforAlarms+0x85e>
   81e70:	4b78      	ldr	r3, [pc, #480]	; (82054 <Cl_alarms_scanforAlarms+0xa34>)
   81e72:	4798      	blx	r3
   81e74:	e003      	b.n	81e7e <Cl_alarms_scanforAlarms+0x85e>
   81e76:	4b71      	ldr	r3, [pc, #452]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81e78:	2204      	movs	r2, #4
   81e7a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
   81e7e:	4b6f      	ldr	r3, [pc, #444]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81e80:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   81e84:	2b00      	cmp	r3, #0
   81e86:	d045      	beq.n	81f14 <Cl_alarms_scanforAlarms+0x8f4>
   81e88:	4b6c      	ldr	r3, [pc, #432]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81e8e:	2b01      	cmp	r3, #1
   81e90:	d104      	bne.n	81e9c <Cl_alarms_scanforAlarms+0x87c>
   81e92:	4b6b      	ldr	r3, [pc, #428]	; (82040 <Cl_alarms_scanforAlarms+0xa20>)
   81e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81e98:	2b00      	cmp	r3, #0
   81e9a:	d10c      	bne.n	81eb6 <Cl_alarms_scanforAlarms+0x896>
   81e9c:	4b67      	ldr	r3, [pc, #412]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81ea2:	2b00      	cmp	r3, #0
   81ea4:	d132      	bne.n	81f0c <Cl_alarms_scanforAlarms+0x8ec>
   81ea6:	4b66      	ldr	r3, [pc, #408]	; (82040 <Cl_alarms_scanforAlarms+0xa20>)
   81ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81eac:	f083 0301 	eor.w	r3, r3, #1
   81eb0:	b2db      	uxtb	r3, r3
   81eb2:	2b00      	cmp	r3, #0
   81eb4:	d02a      	beq.n	81f0c <Cl_alarms_scanforAlarms+0x8ec>
   81eb6:	4b61      	ldr	r3, [pc, #388]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81eb8:	2201      	movs	r2, #1
   81eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
   81ebe:	4b61      	ldr	r3, [pc, #388]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81ec0:	781b      	ldrb	r3, [r3, #0]
   81ec2:	4a60      	ldr	r2, [pc, #384]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81ec4:	3301      	adds	r3, #1
   81ec6:	00db      	lsls	r3, r3, #3
   81ec8:	4413      	add	r3, r2
   81eca:	2204      	movs	r2, #4
   81ecc:	809a      	strh	r2, [r3, #4]
   81ece:	4b5b      	ldr	r3, [pc, #364]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81ed0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
   81ed4:	3301      	adds	r3, #1
   81ed6:	b2da      	uxtb	r2, r3
   81ed8:	4b58      	ldr	r3, [pc, #352]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81eda:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
   81ede:	4b5a      	ldr	r3, [pc, #360]	; (82048 <Cl_alarms_scanforAlarms+0xa28>)
   81ee0:	2201      	movs	r2, #1
   81ee2:	701a      	strb	r2, [r3, #0]
   81ee4:	4b59      	ldr	r3, [pc, #356]	; (8204c <Cl_alarms_scanforAlarms+0xa2c>)
   81ee6:	2204      	movs	r2, #4
   81ee8:	701a      	strb	r2, [r3, #0]
   81eea:	4b56      	ldr	r3, [pc, #344]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81eec:	781b      	ldrb	r3, [r3, #0]
   81eee:	461a      	mov	r2, r3
   81ef0:	4b54      	ldr	r3, [pc, #336]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81ef2:	4413      	add	r3, r2
   81ef4:	222e      	movs	r2, #46	; 0x2e
   81ef6:	709a      	strb	r2, [r3, #2]
   81ef8:	4b55      	ldr	r3, [pc, #340]	; (82050 <Cl_alarms_scanforAlarms+0xa30>)
   81efa:	4798      	blx	r3
   81efc:	4603      	mov	r3, r0
   81efe:	71fb      	strb	r3, [r7, #7]
   81f00:	79fb      	ldrb	r3, [r7, #7]
   81f02:	2b00      	cmp	r3, #0
   81f04:	d006      	beq.n	81f14 <Cl_alarms_scanforAlarms+0x8f4>
   81f06:	4b53      	ldr	r3, [pc, #332]	; (82054 <Cl_alarms_scanforAlarms+0xa34>)
   81f08:	4798      	blx	r3
   81f0a:	e003      	b.n	81f14 <Cl_alarms_scanforAlarms+0x8f4>
   81f0c:	4b4b      	ldr	r3, [pc, #300]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81f0e:	2204      	movs	r2, #4
   81f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
   81f14:	4b49      	ldr	r3, [pc, #292]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81f16:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
   81f1a:	2b00      	cmp	r3, #0
   81f1c:	d045      	beq.n	81faa <Cl_alarms_scanforAlarms+0x98a>
   81f1e:	4b47      	ldr	r3, [pc, #284]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81f20:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   81f24:	2b01      	cmp	r3, #1
   81f26:	d104      	bne.n	81f32 <Cl_alarms_scanforAlarms+0x912>
   81f28:	4b45      	ldr	r3, [pc, #276]	; (82040 <Cl_alarms_scanforAlarms+0xa20>)
   81f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81f2e:	2b00      	cmp	r3, #0
   81f30:	d10c      	bne.n	81f4c <Cl_alarms_scanforAlarms+0x92c>
   81f32:	4b42      	ldr	r3, [pc, #264]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81f34:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   81f38:	2b00      	cmp	r3, #0
   81f3a:	d132      	bne.n	81fa2 <Cl_alarms_scanforAlarms+0x982>
   81f3c:	4b40      	ldr	r3, [pc, #256]	; (82040 <Cl_alarms_scanforAlarms+0xa20>)
   81f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81f42:	f083 0301 	eor.w	r3, r3, #1
   81f46:	b2db      	uxtb	r3, r3
   81f48:	2b00      	cmp	r3, #0
   81f4a:	d02a      	beq.n	81fa2 <Cl_alarms_scanforAlarms+0x982>
   81f4c:	4b3b      	ldr	r3, [pc, #236]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81f4e:	2201      	movs	r2, #1
   81f50:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
   81f54:	4b3b      	ldr	r3, [pc, #236]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81f56:	781b      	ldrb	r3, [r3, #0]
   81f58:	4a3a      	ldr	r2, [pc, #232]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81f5a:	3301      	adds	r3, #1
   81f5c:	00db      	lsls	r3, r3, #3
   81f5e:	4413      	add	r3, r2
   81f60:	2206      	movs	r2, #6
   81f62:	809a      	strh	r2, [r3, #4]
   81f64:	4b35      	ldr	r3, [pc, #212]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81f66:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
   81f6a:	3301      	adds	r3, #1
   81f6c:	b2da      	uxtb	r2, r3
   81f6e:	4b33      	ldr	r3, [pc, #204]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81f70:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
   81f74:	4b34      	ldr	r3, [pc, #208]	; (82048 <Cl_alarms_scanforAlarms+0xa28>)
   81f76:	2201      	movs	r2, #1
   81f78:	701a      	strb	r2, [r3, #0]
   81f7a:	4b34      	ldr	r3, [pc, #208]	; (8204c <Cl_alarms_scanforAlarms+0xa2c>)
   81f7c:	2206      	movs	r2, #6
   81f7e:	701a      	strb	r2, [r3, #0]
   81f80:	4b30      	ldr	r3, [pc, #192]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81f82:	781b      	ldrb	r3, [r3, #0]
   81f84:	461a      	mov	r2, r3
   81f86:	4b2f      	ldr	r3, [pc, #188]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81f88:	4413      	add	r3, r2
   81f8a:	222e      	movs	r2, #46	; 0x2e
   81f8c:	709a      	strb	r2, [r3, #2]
   81f8e:	4b30      	ldr	r3, [pc, #192]	; (82050 <Cl_alarms_scanforAlarms+0xa30>)
   81f90:	4798      	blx	r3
   81f92:	4603      	mov	r3, r0
   81f94:	71fb      	strb	r3, [r7, #7]
   81f96:	79fb      	ldrb	r3, [r7, #7]
   81f98:	2b00      	cmp	r3, #0
   81f9a:	d006      	beq.n	81faa <Cl_alarms_scanforAlarms+0x98a>
   81f9c:	4b2d      	ldr	r3, [pc, #180]	; (82054 <Cl_alarms_scanforAlarms+0xa34>)
   81f9e:	4798      	blx	r3
   81fa0:	e003      	b.n	81faa <Cl_alarms_scanforAlarms+0x98a>
   81fa2:	4b26      	ldr	r3, [pc, #152]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81fa4:	2204      	movs	r2, #4
   81fa6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
   81faa:	4b24      	ldr	r3, [pc, #144]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81fac:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
   81fb0:	2b00      	cmp	r3, #0
   81fb2:	d060      	beq.n	82076 <Cl_alarms_scanforAlarms+0xa56>
   81fb4:	4b22      	ldr	r3, [pc, #136]	; (82040 <Cl_alarms_scanforAlarms+0xa20>)
   81fb6:	8b9b      	ldrh	r3, [r3, #28]
   81fb8:	2b01      	cmp	r3, #1
   81fba:	d14f      	bne.n	8205c <Cl_alarms_scanforAlarms+0xa3c>
   81fbc:	4b26      	ldr	r3, [pc, #152]	; (82058 <Cl_alarms_scanforAlarms+0xa38>)
   81fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
   81fc2:	2b00      	cmp	r3, #0
   81fc4:	d14a      	bne.n	8205c <Cl_alarms_scanforAlarms+0xa3c>
   81fc6:	4b1d      	ldr	r3, [pc, #116]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81fc8:	2201      	movs	r2, #1
   81fca:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
   81fce:	4b1d      	ldr	r3, [pc, #116]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81fd0:	781b      	ldrb	r3, [r3, #0]
   81fd2:	4a1c      	ldr	r2, [pc, #112]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81fd4:	3301      	adds	r3, #1
   81fd6:	00db      	lsls	r3, r3, #3
   81fd8:	4413      	add	r3, r2
   81fda:	223c      	movs	r2, #60	; 0x3c
   81fdc:	809a      	strh	r2, [r3, #4]
   81fde:	4b17      	ldr	r3, [pc, #92]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81fe0:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
   81fe4:	3301      	adds	r3, #1
   81fe6:	b2da      	uxtb	r2, r3
   81fe8:	4b14      	ldr	r3, [pc, #80]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81fea:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
   81fee:	4b16      	ldr	r3, [pc, #88]	; (82048 <Cl_alarms_scanforAlarms+0xa28>)
   81ff0:	2201      	movs	r2, #1
   81ff2:	701a      	strb	r2, [r3, #0]
   81ff4:	4b15      	ldr	r3, [pc, #84]	; (8204c <Cl_alarms_scanforAlarms+0xa2c>)
   81ff6:	223c      	movs	r2, #60	; 0x3c
   81ff8:	701a      	strb	r2, [r3, #0]
   81ffa:	4b12      	ldr	r3, [pc, #72]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81ffc:	781b      	ldrb	r3, [r3, #0]
   81ffe:	461a      	mov	r2, r3
   82000:	4b10      	ldr	r3, [pc, #64]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   82002:	4413      	add	r3, r2
   82004:	222d      	movs	r2, #45	; 0x2d
   82006:	709a      	strb	r2, [r3, #2]
   82008:	4b11      	ldr	r3, [pc, #68]	; (82050 <Cl_alarms_scanforAlarms+0xa30>)
   8200a:	4798      	blx	r3
   8200c:	4603      	mov	r3, r0
   8200e:	71fb      	strb	r3, [r7, #7]
   82010:	79fb      	ldrb	r3, [r7, #7]
   82012:	2b00      	cmp	r3, #0
   82014:	d001      	beq.n	8201a <Cl_alarms_scanforAlarms+0x9fa>
   82016:	4b0f      	ldr	r3, [pc, #60]	; (82054 <Cl_alarms_scanforAlarms+0xa34>)
   82018:	4798      	blx	r3
   8201a:	4b0a      	ldr	r3, [pc, #40]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   8201c:	781b      	ldrb	r3, [r3, #0]
   8201e:	461a      	mov	r2, r3
   82020:	4b08      	ldr	r3, [pc, #32]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   82022:	4413      	add	r3, r2
   82024:	222f      	movs	r2, #47	; 0x2f
   82026:	709a      	strb	r2, [r3, #2]
   82028:	4b09      	ldr	r3, [pc, #36]	; (82050 <Cl_alarms_scanforAlarms+0xa30>)
   8202a:	4798      	blx	r3
   8202c:	4603      	mov	r3, r0
   8202e:	71fb      	strb	r3, [r7, #7]
   82030:	79fb      	ldrb	r3, [r7, #7]
   82032:	2b00      	cmp	r3, #0
   82034:	d01a      	beq.n	8206c <Cl_alarms_scanforAlarms+0xa4c>
   82036:	4b07      	ldr	r3, [pc, #28]	; (82054 <Cl_alarms_scanforAlarms+0xa34>)
   82038:	4798      	blx	r3
   8203a:	e017      	b.n	8206c <Cl_alarms_scanforAlarms+0xa4c>
   8203c:	200728e0 	.word	0x200728e0
   82040:	20072e28 	.word	0x20072e28
   82044:	20072ec4 	.word	0x20072ec4
   82048:	20071611 	.word	0x20071611
   8204c:	20072d04 	.word	0x20072d04
   82050:	00082e69 	.word	0x00082e69
   82054:	00088725 	.word	0x00088725
   82058:	20071612 	.word	0x20071612
   8205c:	4b9b      	ldr	r3, [pc, #620]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   8205e:	2204      	movs	r2, #4
   82060:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
   82064:	4b99      	ldr	r3, [pc, #612]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82066:	2200      	movs	r2, #0
   82068:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
   8206c:	4b98      	ldr	r3, [pc, #608]	; (822d0 <Cl_alarms_scanforAlarms+0xcb0>)
   8206e:	8b9b      	ldrh	r3, [r3, #28]
   82070:	b21a      	sxth	r2, r3
   82072:	4b98      	ldr	r3, [pc, #608]	; (822d4 <Cl_alarms_scanforAlarms+0xcb4>)
   82074:	801a      	strh	r2, [r3, #0]
   82076:	4b96      	ldr	r3, [pc, #600]	; (822d0 <Cl_alarms_scanforAlarms+0xcb0>)
   82078:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   8207a:	2b00      	cmp	r3, #0
   8207c:	d002      	beq.n	82084 <Cl_alarms_scanforAlarms+0xa64>
   8207e:	4b96      	ldr	r3, [pc, #600]	; (822d8 <Cl_alarms_scanforAlarms+0xcb8>)
   82080:	2201      	movs	r2, #1
   82082:	701a      	strb	r2, [r3, #0]
   82084:	4b92      	ldr	r3, [pc, #584]	; (822d0 <Cl_alarms_scanforAlarms+0xcb0>)
   82086:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   82088:	2b00      	cmp	r3, #0
   8208a:	d102      	bne.n	82092 <Cl_alarms_scanforAlarms+0xa72>
   8208c:	4b92      	ldr	r3, [pc, #584]	; (822d8 <Cl_alarms_scanforAlarms+0xcb8>)
   8208e:	2202      	movs	r2, #2
   82090:	701a      	strb	r2, [r3, #0]
   82092:	4b8e      	ldr	r3, [pc, #568]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82094:	f893 33de 	ldrb.w	r3, [r3, #990]	; 0x3de
   82098:	2b00      	cmp	r3, #0
   8209a:	d046      	beq.n	8212a <Cl_alarms_scanforAlarms+0xb0a>
   8209c:	4b8c      	ldr	r3, [pc, #560]	; (822d0 <Cl_alarms_scanforAlarms+0xcb0>)
   8209e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   820a2:	2b00      	cmp	r3, #0
   820a4:	d004      	beq.n	820b0 <Cl_alarms_scanforAlarms+0xa90>
   820a6:	4b89      	ldr	r3, [pc, #548]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   820a8:	f893 33d1 	ldrb.w	r3, [r3, #977]	; 0x3d1
   820ac:	2b01      	cmp	r3, #1
   820ae:	d00c      	beq.n	820ca <Cl_alarms_scanforAlarms+0xaaa>
   820b0:	4b87      	ldr	r3, [pc, #540]	; (822d0 <Cl_alarms_scanforAlarms+0xcb0>)
   820b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   820b6:	f083 0301 	eor.w	r3, r3, #1
   820ba:	b2db      	uxtb	r3, r3
   820bc:	2b00      	cmp	r3, #0
   820be:	d034      	beq.n	8212a <Cl_alarms_scanforAlarms+0xb0a>
   820c0:	4b82      	ldr	r3, [pc, #520]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   820c2:	f893 33d1 	ldrb.w	r3, [r3, #977]	; 0x3d1
   820c6:	2b00      	cmp	r3, #0
   820c8:	d12f      	bne.n	8212a <Cl_alarms_scanforAlarms+0xb0a>
   820ca:	4b80      	ldr	r3, [pc, #512]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   820cc:	f893 33d2 	ldrb.w	r3, [r3, #978]	; 0x3d2
   820d0:	2b01      	cmp	r3, #1
   820d2:	d020      	beq.n	82116 <Cl_alarms_scanforAlarms+0xaf6>
   820d4:	4b7d      	ldr	r3, [pc, #500]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   820d6:	2202      	movs	r2, #2
   820d8:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
   820dc:	4b7b      	ldr	r3, [pc, #492]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   820de:	2201      	movs	r2, #1
   820e0:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
   820e4:	4b7d      	ldr	r3, [pc, #500]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   820e6:	781b      	ldrb	r3, [r3, #0]
   820e8:	4a7c      	ldr	r2, [pc, #496]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   820ea:	3301      	adds	r3, #1
   820ec:	00db      	lsls	r3, r3, #3
   820ee:	4413      	add	r3, r2
   820f0:	223d      	movs	r2, #61	; 0x3d
   820f2:	809a      	strh	r2, [r3, #4]
   820f4:	4b7a      	ldr	r3, [pc, #488]	; (822e0 <Cl_alarms_scanforAlarms+0xcc0>)
   820f6:	2201      	movs	r2, #1
   820f8:	701a      	strb	r2, [r3, #0]
   820fa:	4b7a      	ldr	r3, [pc, #488]	; (822e4 <Cl_alarms_scanforAlarms+0xcc4>)
   820fc:	223d      	movs	r2, #61	; 0x3d
   820fe:	701a      	strb	r2, [r3, #0]
   82100:	4b76      	ldr	r3, [pc, #472]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   82102:	781b      	ldrb	r3, [r3, #0]
   82104:	461a      	mov	r2, r3
   82106:	4b75      	ldr	r3, [pc, #468]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   82108:	4413      	add	r3, r2
   8210a:	222e      	movs	r2, #46	; 0x2e
   8210c:	709a      	strb	r2, [r3, #2]
   8210e:	4b76      	ldr	r3, [pc, #472]	; (822e8 <Cl_alarms_scanforAlarms+0xcc8>)
   82110:	2201      	movs	r2, #1
   82112:	701a      	strb	r2, [r3, #0]
   82114:	e006      	b.n	82124 <Cl_alarms_scanforAlarms+0xb04>
   82116:	4b6d      	ldr	r3, [pc, #436]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82118:	2200      	movs	r2, #0
   8211a:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
   8211e:	4b70      	ldr	r3, [pc, #448]	; (822e0 <Cl_alarms_scanforAlarms+0xcc0>)
   82120:	2200      	movs	r2, #0
   82122:	701a      	strb	r2, [r3, #0]
   82124:	4b71      	ldr	r3, [pc, #452]	; (822ec <Cl_alarms_scanforAlarms+0xccc>)
   82126:	2200      	movs	r2, #0
   82128:	701a      	strb	r2, [r3, #0]
   8212a:	4b68      	ldr	r3, [pc, #416]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   8212c:	f893 33ee 	ldrb.w	r3, [r3, #1006]	; 0x3ee
   82130:	2b00      	cmp	r3, #0
   82132:	d043      	beq.n	821bc <Cl_alarms_scanforAlarms+0xb9c>
   82134:	4b66      	ldr	r3, [pc, #408]	; (822d0 <Cl_alarms_scanforAlarms+0xcb0>)
   82136:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8213a:	2b00      	cmp	r3, #0
   8213c:	d004      	beq.n	82148 <Cl_alarms_scanforAlarms+0xb28>
   8213e:	4b63      	ldr	r3, [pc, #396]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82140:	f893 33e1 	ldrb.w	r3, [r3, #993]	; 0x3e1
   82144:	2b01      	cmp	r3, #1
   82146:	d00c      	beq.n	82162 <Cl_alarms_scanforAlarms+0xb42>
   82148:	4b61      	ldr	r3, [pc, #388]	; (822d0 <Cl_alarms_scanforAlarms+0xcb0>)
   8214a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8214e:	f083 0301 	eor.w	r3, r3, #1
   82152:	b2db      	uxtb	r3, r3
   82154:	2b00      	cmp	r3, #0
   82156:	d031      	beq.n	821bc <Cl_alarms_scanforAlarms+0xb9c>
   82158:	4b5c      	ldr	r3, [pc, #368]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   8215a:	f893 33e1 	ldrb.w	r3, [r3, #993]	; 0x3e1
   8215e:	2b00      	cmp	r3, #0
   82160:	d12c      	bne.n	821bc <Cl_alarms_scanforAlarms+0xb9c>
   82162:	4b5a      	ldr	r3, [pc, #360]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82164:	f893 33e2 	ldrb.w	r3, [r3, #994]	; 0x3e2
   82168:	2b01      	cmp	r3, #1
   8216a:	d01d      	beq.n	821a8 <Cl_alarms_scanforAlarms+0xb88>
   8216c:	4b57      	ldr	r3, [pc, #348]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   8216e:	f893 33ee 	ldrb.w	r3, [r3, #1006]	; 0x3ee
   82172:	2b00      	cmp	r3, #0
   82174:	d01f      	beq.n	821b6 <Cl_alarms_scanforAlarms+0xb96>
   82176:	4b55      	ldr	r3, [pc, #340]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82178:	2202      	movs	r2, #2
   8217a:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
   8217e:	4b53      	ldr	r3, [pc, #332]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82180:	2201      	movs	r2, #1
   82182:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
   82186:	4b56      	ldr	r3, [pc, #344]	; (822e0 <Cl_alarms_scanforAlarms+0xcc0>)
   82188:	2201      	movs	r2, #1
   8218a:	701a      	strb	r2, [r3, #0]
   8218c:	4b55      	ldr	r3, [pc, #340]	; (822e4 <Cl_alarms_scanforAlarms+0xcc4>)
   8218e:	223e      	movs	r2, #62	; 0x3e
   82190:	701a      	strb	r2, [r3, #0]
   82192:	4b52      	ldr	r3, [pc, #328]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   82194:	781b      	ldrb	r3, [r3, #0]
   82196:	461a      	mov	r2, r3
   82198:	4b50      	ldr	r3, [pc, #320]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   8219a:	4413      	add	r3, r2
   8219c:	222e      	movs	r2, #46	; 0x2e
   8219e:	709a      	strb	r2, [r3, #2]
   821a0:	4b51      	ldr	r3, [pc, #324]	; (822e8 <Cl_alarms_scanforAlarms+0xcc8>)
   821a2:	2202      	movs	r2, #2
   821a4:	701a      	strb	r2, [r3, #0]
   821a6:	e006      	b.n	821b6 <Cl_alarms_scanforAlarms+0xb96>
   821a8:	4b48      	ldr	r3, [pc, #288]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   821aa:	2200      	movs	r2, #0
   821ac:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed
   821b0:	4b4b      	ldr	r3, [pc, #300]	; (822e0 <Cl_alarms_scanforAlarms+0xcc0>)
   821b2:	2200      	movs	r2, #0
   821b4:	701a      	strb	r2, [r3, #0]
   821b6:	4b4d      	ldr	r3, [pc, #308]	; (822ec <Cl_alarms_scanforAlarms+0xccc>)
   821b8:	2201      	movs	r2, #1
   821ba:	701a      	strb	r2, [r3, #0]
   821bc:	4b43      	ldr	r3, [pc, #268]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   821be:	f893 315e 	ldrb.w	r3, [r3, #350]	; 0x15e
   821c2:	2b00      	cmp	r3, #0
   821c4:	d042      	beq.n	8224c <Cl_alarms_scanforAlarms+0xc2c>
   821c6:	4b41      	ldr	r3, [pc, #260]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   821c8:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
   821cc:	2b01      	cmp	r3, #1
   821ce:	d034      	beq.n	8223a <Cl_alarms_scanforAlarms+0xc1a>
   821d0:	4b47      	ldr	r3, [pc, #284]	; (822f0 <Cl_alarms_scanforAlarms+0xcd0>)
   821d2:	699a      	ldr	r2, [r3, #24]
   821d4:	4b47      	ldr	r3, [pc, #284]	; (822f4 <Cl_alarms_scanforAlarms+0xcd4>)
   821d6:	6819      	ldr	r1, [r3, #0]
   821d8:	4b47      	ldr	r3, [pc, #284]	; (822f8 <Cl_alarms_scanforAlarms+0xcd8>)
   821da:	4610      	mov	r0, r2
   821dc:	4798      	blx	r3
   821de:	4603      	mov	r3, r0
   821e0:	2b00      	cmp	r3, #0
   821e2:	d033      	beq.n	8224c <Cl_alarms_scanforAlarms+0xc2c>
   821e4:	4b39      	ldr	r3, [pc, #228]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   821e6:	2201      	movs	r2, #1
   821e8:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
   821ec:	4b3b      	ldr	r3, [pc, #236]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   821ee:	781b      	ldrb	r3, [r3, #0]
   821f0:	4a3a      	ldr	r2, [pc, #232]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   821f2:	3301      	adds	r3, #1
   821f4:	00db      	lsls	r3, r3, #3
   821f6:	4413      	add	r3, r2
   821f8:	2215      	movs	r2, #21
   821fa:	809a      	strh	r2, [r3, #4]
   821fc:	4b33      	ldr	r3, [pc, #204]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   821fe:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
   82202:	3301      	adds	r3, #1
   82204:	b2da      	uxtb	r2, r3
   82206:	4b31      	ldr	r3, [pc, #196]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82208:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
   8220c:	4b34      	ldr	r3, [pc, #208]	; (822e0 <Cl_alarms_scanforAlarms+0xcc0>)
   8220e:	2201      	movs	r2, #1
   82210:	701a      	strb	r2, [r3, #0]
   82212:	4b34      	ldr	r3, [pc, #208]	; (822e4 <Cl_alarms_scanforAlarms+0xcc4>)
   82214:	2215      	movs	r2, #21
   82216:	701a      	strb	r2, [r3, #0]
   82218:	4b30      	ldr	r3, [pc, #192]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   8221a:	781b      	ldrb	r3, [r3, #0]
   8221c:	461a      	mov	r2, r3
   8221e:	4b2f      	ldr	r3, [pc, #188]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   82220:	4413      	add	r3, r2
   82222:	222e      	movs	r2, #46	; 0x2e
   82224:	709a      	strb	r2, [r3, #2]
   82226:	4b35      	ldr	r3, [pc, #212]	; (822fc <Cl_alarms_scanforAlarms+0xcdc>)
   82228:	4798      	blx	r3
   8222a:	4603      	mov	r3, r0
   8222c:	71fb      	strb	r3, [r7, #7]
   8222e:	79fb      	ldrb	r3, [r7, #7]
   82230:	2b00      	cmp	r3, #0
   82232:	d00b      	beq.n	8224c <Cl_alarms_scanforAlarms+0xc2c>
   82234:	4b32      	ldr	r3, [pc, #200]	; (82300 <Cl_alarms_scanforAlarms+0xce0>)
   82236:	4798      	blx	r3
   82238:	e008      	b.n	8224c <Cl_alarms_scanforAlarms+0xc2c>
   8223a:	4b24      	ldr	r3, [pc, #144]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   8223c:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
   82240:	2b01      	cmp	r3, #1
   82242:	d103      	bne.n	8224c <Cl_alarms_scanforAlarms+0xc2c>
   82244:	4b21      	ldr	r3, [pc, #132]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82246:	2204      	movs	r2, #4
   82248:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
   8224c:	4b1f      	ldr	r3, [pc, #124]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   8224e:	f893 316e 	ldrb.w	r3, [r3, #366]	; 0x16e
   82252:	2b00      	cmp	r3, #0
   82254:	d061      	beq.n	8231a <Cl_alarms_scanforAlarms+0xcfa>
   82256:	4b1d      	ldr	r3, [pc, #116]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82258:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
   8225c:	2b01      	cmp	r3, #1
   8225e:	d053      	beq.n	82308 <Cl_alarms_scanforAlarms+0xce8>
   82260:	4b23      	ldr	r3, [pc, #140]	; (822f0 <Cl_alarms_scanforAlarms+0xcd0>)
   82262:	69da      	ldr	r2, [r3, #28]
   82264:	4b23      	ldr	r3, [pc, #140]	; (822f4 <Cl_alarms_scanforAlarms+0xcd4>)
   82266:	6819      	ldr	r1, [r3, #0]
   82268:	4b26      	ldr	r3, [pc, #152]	; (82304 <Cl_alarms_scanforAlarms+0xce4>)
   8226a:	4610      	mov	r0, r2
   8226c:	4798      	blx	r3
   8226e:	4603      	mov	r3, r0
   82270:	2b00      	cmp	r3, #0
   82272:	d052      	beq.n	8231a <Cl_alarms_scanforAlarms+0xcfa>
   82274:	4b15      	ldr	r3, [pc, #84]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82276:	2201      	movs	r2, #1
   82278:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
   8227c:	4b17      	ldr	r3, [pc, #92]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   8227e:	781b      	ldrb	r3, [r3, #0]
   82280:	4a16      	ldr	r2, [pc, #88]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   82282:	3301      	adds	r3, #1
   82284:	00db      	lsls	r3, r3, #3
   82286:	4413      	add	r3, r2
   82288:	2216      	movs	r2, #22
   8228a:	809a      	strh	r2, [r3, #4]
   8228c:	4b0f      	ldr	r3, [pc, #60]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   8228e:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
   82292:	3301      	adds	r3, #1
   82294:	b2da      	uxtb	r2, r3
   82296:	4b0d      	ldr	r3, [pc, #52]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82298:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
   8229c:	4b10      	ldr	r3, [pc, #64]	; (822e0 <Cl_alarms_scanforAlarms+0xcc0>)
   8229e:	2201      	movs	r2, #1
   822a0:	701a      	strb	r2, [r3, #0]
   822a2:	4b10      	ldr	r3, [pc, #64]	; (822e4 <Cl_alarms_scanforAlarms+0xcc4>)
   822a4:	2216      	movs	r2, #22
   822a6:	701a      	strb	r2, [r3, #0]
   822a8:	4b0c      	ldr	r3, [pc, #48]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   822aa:	781b      	ldrb	r3, [r3, #0]
   822ac:	461a      	mov	r2, r3
   822ae:	4b0b      	ldr	r3, [pc, #44]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   822b0:	4413      	add	r3, r2
   822b2:	222e      	movs	r2, #46	; 0x2e
   822b4:	709a      	strb	r2, [r3, #2]
   822b6:	4b11      	ldr	r3, [pc, #68]	; (822fc <Cl_alarms_scanforAlarms+0xcdc>)
   822b8:	4798      	blx	r3
   822ba:	4603      	mov	r3, r0
   822bc:	71fb      	strb	r3, [r7, #7]
   822be:	79fb      	ldrb	r3, [r7, #7]
   822c0:	2b00      	cmp	r3, #0
   822c2:	d02a      	beq.n	8231a <Cl_alarms_scanforAlarms+0xcfa>
   822c4:	4b0e      	ldr	r3, [pc, #56]	; (82300 <Cl_alarms_scanforAlarms+0xce0>)
   822c6:	4798      	blx	r3
   822c8:	e027      	b.n	8231a <Cl_alarms_scanforAlarms+0xcfa>
   822ca:	bf00      	nop
   822cc:	200728e0 	.word	0x200728e0
   822d0:	20072e28 	.word	0x20072e28
   822d4:	20071612 	.word	0x20071612
   822d8:	2007269c 	.word	0x2007269c
   822dc:	20072ec4 	.word	0x20072ec4
   822e0:	20071611 	.word	0x20071611
   822e4:	20072d04 	.word	0x20072d04
   822e8:	200726c8 	.word	0x200726c8
   822ec:	20070100 	.word	0x20070100
   822f0:	20072d08 	.word	0x20072d08
   822f4:	20071618 	.word	0x20071618
   822f8:	000a4151 	.word	0x000a4151
   822fc:	00082e69 	.word	0x00082e69
   82300:	00088725 	.word	0x00088725
   82304:	000a418d 	.word	0x000a418d
   82308:	4b99      	ldr	r3, [pc, #612]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8230a:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
   8230e:	2b01      	cmp	r3, #1
   82310:	d103      	bne.n	8231a <Cl_alarms_scanforAlarms+0xcfa>
   82312:	4b97      	ldr	r3, [pc, #604]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   82314:	2204      	movs	r2, #4
   82316:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
   8231a:	4b95      	ldr	r3, [pc, #596]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8231c:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   82320:	2b00      	cmp	r3, #0
   82322:	d042      	beq.n	823aa <Cl_alarms_scanforAlarms+0xd8a>
   82324:	4b92      	ldr	r3, [pc, #584]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   82326:	f893 3172 	ldrb.w	r3, [r3, #370]	; 0x172
   8232a:	2b01      	cmp	r3, #1
   8232c:	d034      	beq.n	82398 <Cl_alarms_scanforAlarms+0xd78>
   8232e:	4b91      	ldr	r3, [pc, #580]	; (82574 <Cl_alarms_scanforAlarms+0xf54>)
   82330:	6a1a      	ldr	r2, [r3, #32]
   82332:	4b91      	ldr	r3, [pc, #580]	; (82578 <Cl_alarms_scanforAlarms+0xf58>)
   82334:	6819      	ldr	r1, [r3, #0]
   82336:	4b91      	ldr	r3, [pc, #580]	; (8257c <Cl_alarms_scanforAlarms+0xf5c>)
   82338:	4610      	mov	r0, r2
   8233a:	4798      	blx	r3
   8233c:	4603      	mov	r3, r0
   8233e:	2b00      	cmp	r3, #0
   82340:	d033      	beq.n	823aa <Cl_alarms_scanforAlarms+0xd8a>
   82342:	4b8b      	ldr	r3, [pc, #556]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   82344:	2201      	movs	r2, #1
   82346:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
   8234a:	4b8d      	ldr	r3, [pc, #564]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   8234c:	781b      	ldrb	r3, [r3, #0]
   8234e:	4a8c      	ldr	r2, [pc, #560]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   82350:	3301      	adds	r3, #1
   82352:	00db      	lsls	r3, r3, #3
   82354:	4413      	add	r3, r2
   82356:	2217      	movs	r2, #23
   82358:	809a      	strh	r2, [r3, #4]
   8235a:	4b85      	ldr	r3, [pc, #532]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8235c:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
   82360:	3301      	adds	r3, #1
   82362:	b2da      	uxtb	r2, r3
   82364:	4b82      	ldr	r3, [pc, #520]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   82366:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
   8236a:	4b86      	ldr	r3, [pc, #536]	; (82584 <Cl_alarms_scanforAlarms+0xf64>)
   8236c:	2201      	movs	r2, #1
   8236e:	701a      	strb	r2, [r3, #0]
   82370:	4b85      	ldr	r3, [pc, #532]	; (82588 <Cl_alarms_scanforAlarms+0xf68>)
   82372:	2217      	movs	r2, #23
   82374:	701a      	strb	r2, [r3, #0]
   82376:	4b82      	ldr	r3, [pc, #520]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   82378:	781b      	ldrb	r3, [r3, #0]
   8237a:	461a      	mov	r2, r3
   8237c:	4b80      	ldr	r3, [pc, #512]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   8237e:	4413      	add	r3, r2
   82380:	222e      	movs	r2, #46	; 0x2e
   82382:	709a      	strb	r2, [r3, #2]
   82384:	4b81      	ldr	r3, [pc, #516]	; (8258c <Cl_alarms_scanforAlarms+0xf6c>)
   82386:	4798      	blx	r3
   82388:	4603      	mov	r3, r0
   8238a:	71fb      	strb	r3, [r7, #7]
   8238c:	79fb      	ldrb	r3, [r7, #7]
   8238e:	2b00      	cmp	r3, #0
   82390:	d00b      	beq.n	823aa <Cl_alarms_scanforAlarms+0xd8a>
   82392:	4b7f      	ldr	r3, [pc, #508]	; (82590 <Cl_alarms_scanforAlarms+0xf70>)
   82394:	4798      	blx	r3
   82396:	e008      	b.n	823aa <Cl_alarms_scanforAlarms+0xd8a>
   82398:	4b75      	ldr	r3, [pc, #468]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8239a:	f893 3172 	ldrb.w	r3, [r3, #370]	; 0x172
   8239e:	2b01      	cmp	r3, #1
   823a0:	d103      	bne.n	823aa <Cl_alarms_scanforAlarms+0xd8a>
   823a2:	4b73      	ldr	r3, [pc, #460]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   823a4:	2204      	movs	r2, #4
   823a6:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
   823aa:	4b71      	ldr	r3, [pc, #452]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   823ac:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
   823b0:	2b00      	cmp	r3, #0
   823b2:	d042      	beq.n	8243a <Cl_alarms_scanforAlarms+0xe1a>
   823b4:	4b6e      	ldr	r3, [pc, #440]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   823b6:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
   823ba:	2b01      	cmp	r3, #1
   823bc:	d034      	beq.n	82428 <Cl_alarms_scanforAlarms+0xe08>
   823be:	4b6d      	ldr	r3, [pc, #436]	; (82574 <Cl_alarms_scanforAlarms+0xf54>)
   823c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   823c2:	4b6d      	ldr	r3, [pc, #436]	; (82578 <Cl_alarms_scanforAlarms+0xf58>)
   823c4:	6819      	ldr	r1, [r3, #0]
   823c6:	4b73      	ldr	r3, [pc, #460]	; (82594 <Cl_alarms_scanforAlarms+0xf74>)
   823c8:	4610      	mov	r0, r2
   823ca:	4798      	blx	r3
   823cc:	4603      	mov	r3, r0
   823ce:	2b00      	cmp	r3, #0
   823d0:	d033      	beq.n	8243a <Cl_alarms_scanforAlarms+0xe1a>
   823d2:	4b67      	ldr	r3, [pc, #412]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   823d4:	2201      	movs	r2, #1
   823d6:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
   823da:	4b69      	ldr	r3, [pc, #420]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   823dc:	781b      	ldrb	r3, [r3, #0]
   823de:	4a68      	ldr	r2, [pc, #416]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   823e0:	3301      	adds	r3, #1
   823e2:	00db      	lsls	r3, r3, #3
   823e4:	4413      	add	r3, r2
   823e6:	2218      	movs	r2, #24
   823e8:	809a      	strh	r2, [r3, #4]
   823ea:	4b61      	ldr	r3, [pc, #388]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   823ec:	f893 318d 	ldrb.w	r3, [r3, #397]	; 0x18d
   823f0:	3301      	adds	r3, #1
   823f2:	b2da      	uxtb	r2, r3
   823f4:	4b5e      	ldr	r3, [pc, #376]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   823f6:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
   823fa:	4b62      	ldr	r3, [pc, #392]	; (82584 <Cl_alarms_scanforAlarms+0xf64>)
   823fc:	2201      	movs	r2, #1
   823fe:	701a      	strb	r2, [r3, #0]
   82400:	4b61      	ldr	r3, [pc, #388]	; (82588 <Cl_alarms_scanforAlarms+0xf68>)
   82402:	2218      	movs	r2, #24
   82404:	701a      	strb	r2, [r3, #0]
   82406:	4b5e      	ldr	r3, [pc, #376]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   82408:	781b      	ldrb	r3, [r3, #0]
   8240a:	461a      	mov	r2, r3
   8240c:	4b5c      	ldr	r3, [pc, #368]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   8240e:	4413      	add	r3, r2
   82410:	222e      	movs	r2, #46	; 0x2e
   82412:	709a      	strb	r2, [r3, #2]
   82414:	4b5d      	ldr	r3, [pc, #372]	; (8258c <Cl_alarms_scanforAlarms+0xf6c>)
   82416:	4798      	blx	r3
   82418:	4603      	mov	r3, r0
   8241a:	71fb      	strb	r3, [r7, #7]
   8241c:	79fb      	ldrb	r3, [r7, #7]
   8241e:	2b00      	cmp	r3, #0
   82420:	d00b      	beq.n	8243a <Cl_alarms_scanforAlarms+0xe1a>
   82422:	4b5b      	ldr	r3, [pc, #364]	; (82590 <Cl_alarms_scanforAlarms+0xf70>)
   82424:	4798      	blx	r3
   82426:	e008      	b.n	8243a <Cl_alarms_scanforAlarms+0xe1a>
   82428:	4b51      	ldr	r3, [pc, #324]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8242a:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
   8242e:	2b01      	cmp	r3, #1
   82430:	d103      	bne.n	8243a <Cl_alarms_scanforAlarms+0xe1a>
   82432:	4b4f      	ldr	r3, [pc, #316]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   82434:	2204      	movs	r2, #4
   82436:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
   8243a:	4b4d      	ldr	r3, [pc, #308]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8243c:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
   82440:	2b00      	cmp	r3, #0
   82442:	d042      	beq.n	824ca <Cl_alarms_scanforAlarms+0xeaa>
   82444:	4b4b      	ldr	r3, [pc, #300]	; (82574 <Cl_alarms_scanforAlarms+0xf54>)
   82446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   82448:	4b53      	ldr	r3, [pc, #332]	; (82598 <Cl_alarms_scanforAlarms+0xf78>)
   8244a:	6819      	ldr	r1, [r3, #0]
   8244c:	4b4b      	ldr	r3, [pc, #300]	; (8257c <Cl_alarms_scanforAlarms+0xf5c>)
   8244e:	4610      	mov	r0, r2
   82450:	4798      	blx	r3
   82452:	4603      	mov	r3, r0
   82454:	2b00      	cmp	r3, #0
   82456:	d02f      	beq.n	824b8 <Cl_alarms_scanforAlarms+0xe98>
   82458:	4b45      	ldr	r3, [pc, #276]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8245a:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
   8245e:	2b01      	cmp	r3, #1
   82460:	d02a      	beq.n	824b8 <Cl_alarms_scanforAlarms+0xe98>
   82462:	4b43      	ldr	r3, [pc, #268]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   82464:	2201      	movs	r2, #1
   82466:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
   8246a:	4b45      	ldr	r3, [pc, #276]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   8246c:	781b      	ldrb	r3, [r3, #0]
   8246e:	4a44      	ldr	r2, [pc, #272]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   82470:	3301      	adds	r3, #1
   82472:	00db      	lsls	r3, r3, #3
   82474:	4413      	add	r3, r2
   82476:	2227      	movs	r2, #39	; 0x27
   82478:	809a      	strh	r2, [r3, #4]
   8247a:	4b3d      	ldr	r3, [pc, #244]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8247c:	f893 327d 	ldrb.w	r3, [r3, #637]	; 0x27d
   82480:	3301      	adds	r3, #1
   82482:	b2da      	uxtb	r2, r3
   82484:	4b3a      	ldr	r3, [pc, #232]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   82486:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
   8248a:	4b3e      	ldr	r3, [pc, #248]	; (82584 <Cl_alarms_scanforAlarms+0xf64>)
   8248c:	2201      	movs	r2, #1
   8248e:	701a      	strb	r2, [r3, #0]
   82490:	4b3d      	ldr	r3, [pc, #244]	; (82588 <Cl_alarms_scanforAlarms+0xf68>)
   82492:	2227      	movs	r2, #39	; 0x27
   82494:	701a      	strb	r2, [r3, #0]
   82496:	4b3a      	ldr	r3, [pc, #232]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   82498:	781b      	ldrb	r3, [r3, #0]
   8249a:	461a      	mov	r2, r3
   8249c:	4b38      	ldr	r3, [pc, #224]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   8249e:	4413      	add	r3, r2
   824a0:	222e      	movs	r2, #46	; 0x2e
   824a2:	709a      	strb	r2, [r3, #2]
   824a4:	4b39      	ldr	r3, [pc, #228]	; (8258c <Cl_alarms_scanforAlarms+0xf6c>)
   824a6:	4798      	blx	r3
   824a8:	4603      	mov	r3, r0
   824aa:	71fb      	strb	r3, [r7, #7]
   824ac:	79fb      	ldrb	r3, [r7, #7]
   824ae:	2b00      	cmp	r3, #0
   824b0:	d00b      	beq.n	824ca <Cl_alarms_scanforAlarms+0xeaa>
   824b2:	4b37      	ldr	r3, [pc, #220]	; (82590 <Cl_alarms_scanforAlarms+0xf70>)
   824b4:	4798      	blx	r3
   824b6:	e008      	b.n	824ca <Cl_alarms_scanforAlarms+0xeaa>
   824b8:	4b2d      	ldr	r3, [pc, #180]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   824ba:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
   824be:	2b01      	cmp	r3, #1
   824c0:	d103      	bne.n	824ca <Cl_alarms_scanforAlarms+0xeaa>
   824c2:	4b2b      	ldr	r3, [pc, #172]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   824c4:	2204      	movs	r2, #4
   824c6:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
   824ca:	4b29      	ldr	r3, [pc, #164]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   824cc:	f893 328e 	ldrb.w	r3, [r3, #654]	; 0x28e
   824d0:	2b00      	cmp	r3, #0
   824d2:	d070      	beq.n	825b6 <Cl_alarms_scanforAlarms+0xf96>
   824d4:	4b27      	ldr	r3, [pc, #156]	; (82574 <Cl_alarms_scanforAlarms+0xf54>)
   824d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   824d8:	4b2f      	ldr	r3, [pc, #188]	; (82598 <Cl_alarms_scanforAlarms+0xf78>)
   824da:	6819      	ldr	r1, [r3, #0]
   824dc:	4b2d      	ldr	r3, [pc, #180]	; (82594 <Cl_alarms_scanforAlarms+0xf74>)
   824de:	4610      	mov	r0, r2
   824e0:	4798      	blx	r3
   824e2:	4603      	mov	r3, r0
   824e4:	2b00      	cmp	r3, #0
   824e6:	d05d      	beq.n	825a4 <Cl_alarms_scanforAlarms+0xf84>
   824e8:	4b21      	ldr	r3, [pc, #132]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   824ea:	f893 3282 	ldrb.w	r3, [r3, #642]	; 0x282
   824ee:	2b01      	cmp	r3, #1
   824f0:	d058      	beq.n	825a4 <Cl_alarms_scanforAlarms+0xf84>
   824f2:	4b29      	ldr	r3, [pc, #164]	; (82598 <Cl_alarms_scanforAlarms+0xf78>)
   824f4:	681a      	ldr	r2, [r3, #0]
   824f6:	4b21      	ldr	r3, [pc, #132]	; (8257c <Cl_alarms_scanforAlarms+0xf5c>)
   824f8:	f04f 0100 	mov.w	r1, #0
   824fc:	4610      	mov	r0, r2
   824fe:	4798      	blx	r3
   82500:	4603      	mov	r3, r0
   82502:	2b00      	cmp	r3, #0
   82504:	d009      	beq.n	8251a <Cl_alarms_scanforAlarms+0xefa>
   82506:	4b24      	ldr	r3, [pc, #144]	; (82598 <Cl_alarms_scanforAlarms+0xf78>)
   82508:	681a      	ldr	r2, [r3, #0]
   8250a:	4b24      	ldr	r3, [pc, #144]	; (8259c <Cl_alarms_scanforAlarms+0xf7c>)
   8250c:	4924      	ldr	r1, [pc, #144]	; (825a0 <Cl_alarms_scanforAlarms+0xf80>)
   8250e:	4610      	mov	r0, r2
   82510:	4798      	blx	r3
   82512:	4603      	mov	r3, r0
   82514:	461a      	mov	r2, r3
   82516:	4b20      	ldr	r3, [pc, #128]	; (82598 <Cl_alarms_scanforAlarms+0xf78>)
   82518:	601a      	str	r2, [r3, #0]
   8251a:	4b15      	ldr	r3, [pc, #84]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8251c:	2201      	movs	r2, #1
   8251e:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
   82522:	4b17      	ldr	r3, [pc, #92]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   82524:	781b      	ldrb	r3, [r3, #0]
   82526:	4a16      	ldr	r2, [pc, #88]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   82528:	3301      	adds	r3, #1
   8252a:	00db      	lsls	r3, r3, #3
   8252c:	4413      	add	r3, r2
   8252e:	2228      	movs	r2, #40	; 0x28
   82530:	809a      	strh	r2, [r3, #4]
   82532:	4b0f      	ldr	r3, [pc, #60]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   82534:	f893 328d 	ldrb.w	r3, [r3, #653]	; 0x28d
   82538:	3301      	adds	r3, #1
   8253a:	b2da      	uxtb	r2, r3
   8253c:	4b0c      	ldr	r3, [pc, #48]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8253e:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
   82542:	4b10      	ldr	r3, [pc, #64]	; (82584 <Cl_alarms_scanforAlarms+0xf64>)
   82544:	2201      	movs	r2, #1
   82546:	701a      	strb	r2, [r3, #0]
   82548:	4b0f      	ldr	r3, [pc, #60]	; (82588 <Cl_alarms_scanforAlarms+0xf68>)
   8254a:	2228      	movs	r2, #40	; 0x28
   8254c:	701a      	strb	r2, [r3, #0]
   8254e:	4b0c      	ldr	r3, [pc, #48]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   82550:	781b      	ldrb	r3, [r3, #0]
   82552:	461a      	mov	r2, r3
   82554:	4b0a      	ldr	r3, [pc, #40]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   82556:	4413      	add	r3, r2
   82558:	222e      	movs	r2, #46	; 0x2e
   8255a:	709a      	strb	r2, [r3, #2]
   8255c:	4b0b      	ldr	r3, [pc, #44]	; (8258c <Cl_alarms_scanforAlarms+0xf6c>)
   8255e:	4798      	blx	r3
   82560:	4603      	mov	r3, r0
   82562:	71fb      	strb	r3, [r7, #7]
   82564:	79fb      	ldrb	r3, [r7, #7]
   82566:	2b00      	cmp	r3, #0
   82568:	d025      	beq.n	825b6 <Cl_alarms_scanforAlarms+0xf96>
   8256a:	4b09      	ldr	r3, [pc, #36]	; (82590 <Cl_alarms_scanforAlarms+0xf70>)
   8256c:	4798      	blx	r3
   8256e:	e022      	b.n	825b6 <Cl_alarms_scanforAlarms+0xf96>
   82570:	200728e0 	.word	0x200728e0
   82574:	20072d08 	.word	0x20072d08
   82578:	2007161c 	.word	0x2007161c
   8257c:	000a4151 	.word	0x000a4151
   82580:	20072ec4 	.word	0x20072ec4
   82584:	20071611 	.word	0x20071611
   82588:	20072d04 	.word	0x20072d04
   8258c:	00082e69 	.word	0x00082e69
   82590:	00088725 	.word	0x00088725
   82594:	000a418d 	.word	0x000a418d
   82598:	20071620 	.word	0x20071620
   8259c:	000a3c05 	.word	0x000a3c05
   825a0:	447a0000 	.word	0x447a0000
   825a4:	4b99      	ldr	r3, [pc, #612]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   825a6:	f893 3282 	ldrb.w	r3, [r3, #642]	; 0x282
   825aa:	2b01      	cmp	r3, #1
   825ac:	d103      	bne.n	825b6 <Cl_alarms_scanforAlarms+0xf96>
   825ae:	4b97      	ldr	r3, [pc, #604]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   825b0:	2204      	movs	r2, #4
   825b2:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
   825b6:	4b95      	ldr	r3, [pc, #596]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   825b8:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
   825bc:	2b00      	cmp	r3, #0
   825be:	d045      	beq.n	8264c <Cl_alarms_scanforAlarms+0x102c>
   825c0:	4b92      	ldr	r3, [pc, #584]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   825c2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
   825c6:	4b92      	ldr	r3, [pc, #584]	; (82810 <Cl_alarms_scanforAlarms+0x11f0>)
   825c8:	6819      	ldr	r1, [r3, #0]
   825ca:	4b92      	ldr	r3, [pc, #584]	; (82814 <Cl_alarms_scanforAlarms+0x11f4>)
   825cc:	4610      	mov	r0, r2
   825ce:	4798      	blx	r3
   825d0:	4603      	mov	r3, r0
   825d2:	2b00      	cmp	r3, #0
   825d4:	d02a      	beq.n	8262c <Cl_alarms_scanforAlarms+0x100c>
   825d6:	4b8d      	ldr	r3, [pc, #564]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   825d8:	2201      	movs	r2, #1
   825da:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
   825de:	4b8e      	ldr	r3, [pc, #568]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   825e0:	781b      	ldrb	r3, [r3, #0]
   825e2:	4a8d      	ldr	r2, [pc, #564]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   825e4:	3301      	adds	r3, #1
   825e6:	00db      	lsls	r3, r3, #3
   825e8:	4413      	add	r3, r2
   825ea:	220f      	movs	r2, #15
   825ec:	809a      	strh	r2, [r3, #4]
   825ee:	4b87      	ldr	r3, [pc, #540]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   825f0:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
   825f4:	3301      	adds	r3, #1
   825f6:	b2da      	uxtb	r2, r3
   825f8:	4b84      	ldr	r3, [pc, #528]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   825fa:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
   825fe:	4b87      	ldr	r3, [pc, #540]	; (8281c <Cl_alarms_scanforAlarms+0x11fc>)
   82600:	2201      	movs	r2, #1
   82602:	701a      	strb	r2, [r3, #0]
   82604:	4b86      	ldr	r3, [pc, #536]	; (82820 <Cl_alarms_scanforAlarms+0x1200>)
   82606:	220f      	movs	r2, #15
   82608:	701a      	strb	r2, [r3, #0]
   8260a:	4b83      	ldr	r3, [pc, #524]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   8260c:	781b      	ldrb	r3, [r3, #0]
   8260e:	461a      	mov	r2, r3
   82610:	4b81      	ldr	r3, [pc, #516]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   82612:	4413      	add	r3, r2
   82614:	222e      	movs	r2, #46	; 0x2e
   82616:	709a      	strb	r2, [r3, #2]
   82618:	4b82      	ldr	r3, [pc, #520]	; (82824 <Cl_alarms_scanforAlarms+0x1204>)
   8261a:	4798      	blx	r3
   8261c:	4603      	mov	r3, r0
   8261e:	71fb      	strb	r3, [r7, #7]
   82620:	79fb      	ldrb	r3, [r7, #7]
   82622:	2b00      	cmp	r3, #0
   82624:	d012      	beq.n	8264c <Cl_alarms_scanforAlarms+0x102c>
   82626:	4b80      	ldr	r3, [pc, #512]	; (82828 <Cl_alarms_scanforAlarms+0x1208>)
   82628:	4798      	blx	r3
   8262a:	e00f      	b.n	8264c <Cl_alarms_scanforAlarms+0x102c>
   8262c:	4b77      	ldr	r3, [pc, #476]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   8262e:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
   82632:	2b01      	cmp	r3, #1
   82634:	d10a      	bne.n	8264c <Cl_alarms_scanforAlarms+0x102c>
   82636:	4b75      	ldr	r3, [pc, #468]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82638:	2204      	movs	r2, #4
   8263a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
   8263e:	4b73      	ldr	r3, [pc, #460]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82640:	2200      	movs	r2, #0
   82642:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
   82646:	4b75      	ldr	r3, [pc, #468]	; (8281c <Cl_alarms_scanforAlarms+0x11fc>)
   82648:	2200      	movs	r2, #0
   8264a:	701a      	strb	r2, [r3, #0]
   8264c:	4b6f      	ldr	r3, [pc, #444]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   8264e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
   82652:	2b00      	cmp	r3, #0
   82654:	d04a      	beq.n	826ec <Cl_alarms_scanforAlarms+0x10cc>
   82656:	4b6d      	ldr	r3, [pc, #436]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82658:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   8265c:	4b6c      	ldr	r3, [pc, #432]	; (82810 <Cl_alarms_scanforAlarms+0x11f0>)
   8265e:	6819      	ldr	r1, [r3, #0]
   82660:	4b72      	ldr	r3, [pc, #456]	; (8282c <Cl_alarms_scanforAlarms+0x120c>)
   82662:	4610      	mov	r0, r2
   82664:	4798      	blx	r3
   82666:	4603      	mov	r3, r0
   82668:	2b00      	cmp	r3, #0
   8266a:	d02f      	beq.n	826cc <Cl_alarms_scanforAlarms+0x10ac>
   8266c:	4b67      	ldr	r3, [pc, #412]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   8266e:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   82672:	2b01      	cmp	r3, #1
   82674:	d03a      	beq.n	826ec <Cl_alarms_scanforAlarms+0x10cc>
   82676:	4b65      	ldr	r3, [pc, #404]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82678:	2201      	movs	r2, #1
   8267a:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
   8267e:	4b66      	ldr	r3, [pc, #408]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   82680:	781b      	ldrb	r3, [r3, #0]
   82682:	4a65      	ldr	r2, [pc, #404]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   82684:	3301      	adds	r3, #1
   82686:	00db      	lsls	r3, r3, #3
   82688:	4413      	add	r3, r2
   8268a:	2210      	movs	r2, #16
   8268c:	809a      	strh	r2, [r3, #4]
   8268e:	4b5f      	ldr	r3, [pc, #380]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82690:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
   82694:	3301      	adds	r3, #1
   82696:	b2da      	uxtb	r2, r3
   82698:	4b5c      	ldr	r3, [pc, #368]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   8269a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
   8269e:	4b5f      	ldr	r3, [pc, #380]	; (8281c <Cl_alarms_scanforAlarms+0x11fc>)
   826a0:	2201      	movs	r2, #1
   826a2:	701a      	strb	r2, [r3, #0]
   826a4:	4b5e      	ldr	r3, [pc, #376]	; (82820 <Cl_alarms_scanforAlarms+0x1200>)
   826a6:	2210      	movs	r2, #16
   826a8:	701a      	strb	r2, [r3, #0]
   826aa:	4b5b      	ldr	r3, [pc, #364]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   826ac:	781b      	ldrb	r3, [r3, #0]
   826ae:	461a      	mov	r2, r3
   826b0:	4b59      	ldr	r3, [pc, #356]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   826b2:	4413      	add	r3, r2
   826b4:	222e      	movs	r2, #46	; 0x2e
   826b6:	709a      	strb	r2, [r3, #2]
   826b8:	4b5a      	ldr	r3, [pc, #360]	; (82824 <Cl_alarms_scanforAlarms+0x1204>)
   826ba:	4798      	blx	r3
   826bc:	4603      	mov	r3, r0
   826be:	71fb      	strb	r3, [r7, #7]
   826c0:	79fb      	ldrb	r3, [r7, #7]
   826c2:	2b00      	cmp	r3, #0
   826c4:	d012      	beq.n	826ec <Cl_alarms_scanforAlarms+0x10cc>
   826c6:	4b58      	ldr	r3, [pc, #352]	; (82828 <Cl_alarms_scanforAlarms+0x1208>)
   826c8:	4798      	blx	r3
   826ca:	e00f      	b.n	826ec <Cl_alarms_scanforAlarms+0x10cc>
   826cc:	4b4f      	ldr	r3, [pc, #316]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   826ce:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   826d2:	2b01      	cmp	r3, #1
   826d4:	d10a      	bne.n	826ec <Cl_alarms_scanforAlarms+0x10cc>
   826d6:	4b4d      	ldr	r3, [pc, #308]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   826d8:	2204      	movs	r2, #4
   826da:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
   826de:	4b4b      	ldr	r3, [pc, #300]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   826e0:	2200      	movs	r2, #0
   826e2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
   826e6:	4b4d      	ldr	r3, [pc, #308]	; (8281c <Cl_alarms_scanforAlarms+0x11fc>)
   826e8:	2200      	movs	r2, #0
   826ea:	701a      	strb	r2, [r3, #0]
   826ec:	4b47      	ldr	r3, [pc, #284]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   826ee:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
   826f2:	2b00      	cmp	r3, #0
   826f4:	d04a      	beq.n	8278c <Cl_alarms_scanforAlarms+0x116c>
   826f6:	4b45      	ldr	r3, [pc, #276]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   826f8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
   826fc:	4b4c      	ldr	r3, [pc, #304]	; (82830 <Cl_alarms_scanforAlarms+0x1210>)
   826fe:	6819      	ldr	r1, [r3, #0]
   82700:	4b44      	ldr	r3, [pc, #272]	; (82814 <Cl_alarms_scanforAlarms+0x11f4>)
   82702:	4610      	mov	r0, r2
   82704:	4798      	blx	r3
   82706:	4603      	mov	r3, r0
   82708:	2b00      	cmp	r3, #0
   8270a:	d02f      	beq.n	8276c <Cl_alarms_scanforAlarms+0x114c>
   8270c:	4b3f      	ldr	r3, [pc, #252]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   8270e:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
   82712:	2b01      	cmp	r3, #1
   82714:	d03a      	beq.n	8278c <Cl_alarms_scanforAlarms+0x116c>
   82716:	4b3d      	ldr	r3, [pc, #244]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82718:	2201      	movs	r2, #1
   8271a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
   8271e:	4b3e      	ldr	r3, [pc, #248]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   82720:	781b      	ldrb	r3, [r3, #0]
   82722:	4a3d      	ldr	r2, [pc, #244]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   82724:	3301      	adds	r3, #1
   82726:	00db      	lsls	r3, r3, #3
   82728:	4413      	add	r3, r2
   8272a:	2213      	movs	r2, #19
   8272c:	809a      	strh	r2, [r3, #4]
   8272e:	4b37      	ldr	r3, [pc, #220]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82730:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   82734:	3301      	adds	r3, #1
   82736:	b2da      	uxtb	r2, r3
   82738:	4b34      	ldr	r3, [pc, #208]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   8273a:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
   8273e:	4b37      	ldr	r3, [pc, #220]	; (8281c <Cl_alarms_scanforAlarms+0x11fc>)
   82740:	2201      	movs	r2, #1
   82742:	701a      	strb	r2, [r3, #0]
   82744:	4b36      	ldr	r3, [pc, #216]	; (82820 <Cl_alarms_scanforAlarms+0x1200>)
   82746:	2213      	movs	r2, #19
   82748:	701a      	strb	r2, [r3, #0]
   8274a:	4b33      	ldr	r3, [pc, #204]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   8274c:	781b      	ldrb	r3, [r3, #0]
   8274e:	461a      	mov	r2, r3
   82750:	4b31      	ldr	r3, [pc, #196]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   82752:	4413      	add	r3, r2
   82754:	222e      	movs	r2, #46	; 0x2e
   82756:	709a      	strb	r2, [r3, #2]
   82758:	4b32      	ldr	r3, [pc, #200]	; (82824 <Cl_alarms_scanforAlarms+0x1204>)
   8275a:	4798      	blx	r3
   8275c:	4603      	mov	r3, r0
   8275e:	71fb      	strb	r3, [r7, #7]
   82760:	79fb      	ldrb	r3, [r7, #7]
   82762:	2b00      	cmp	r3, #0
   82764:	d012      	beq.n	8278c <Cl_alarms_scanforAlarms+0x116c>
   82766:	4b30      	ldr	r3, [pc, #192]	; (82828 <Cl_alarms_scanforAlarms+0x1208>)
   82768:	4798      	blx	r3
   8276a:	e00f      	b.n	8278c <Cl_alarms_scanforAlarms+0x116c>
   8276c:	4b27      	ldr	r3, [pc, #156]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   8276e:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
   82772:	2b01      	cmp	r3, #1
   82774:	d10a      	bne.n	8278c <Cl_alarms_scanforAlarms+0x116c>
   82776:	4b25      	ldr	r3, [pc, #148]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82778:	2204      	movs	r2, #4
   8277a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
   8277e:	4b23      	ldr	r3, [pc, #140]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82780:	2200      	movs	r2, #0
   82782:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
   82786:	4b25      	ldr	r3, [pc, #148]	; (8281c <Cl_alarms_scanforAlarms+0x11fc>)
   82788:	2200      	movs	r2, #0
   8278a:	701a      	strb	r2, [r3, #0]
   8278c:	4b1f      	ldr	r3, [pc, #124]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   8278e:	f893 314e 	ldrb.w	r3, [r3, #334]	; 0x14e
   82792:	2b00      	cmp	r3, #0
   82794:	d05e      	beq.n	82854 <Cl_alarms_scanforAlarms+0x1234>
   82796:	4b1d      	ldr	r3, [pc, #116]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82798:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   8279c:	4b24      	ldr	r3, [pc, #144]	; (82830 <Cl_alarms_scanforAlarms+0x1210>)
   8279e:	6819      	ldr	r1, [r3, #0]
   827a0:	4b22      	ldr	r3, [pc, #136]	; (8282c <Cl_alarms_scanforAlarms+0x120c>)
   827a2:	4610      	mov	r0, r2
   827a4:	4798      	blx	r3
   827a6:	4603      	mov	r3, r0
   827a8:	2b00      	cmp	r3, #0
   827aa:	d043      	beq.n	82834 <Cl_alarms_scanforAlarms+0x1214>
   827ac:	4b17      	ldr	r3, [pc, #92]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   827ae:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
   827b2:	2b01      	cmp	r3, #1
   827b4:	d04e      	beq.n	82854 <Cl_alarms_scanforAlarms+0x1234>
   827b6:	4b15      	ldr	r3, [pc, #84]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   827b8:	2201      	movs	r2, #1
   827ba:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
   827be:	4b16      	ldr	r3, [pc, #88]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   827c0:	781b      	ldrb	r3, [r3, #0]
   827c2:	4a15      	ldr	r2, [pc, #84]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   827c4:	3301      	adds	r3, #1
   827c6:	00db      	lsls	r3, r3, #3
   827c8:	4413      	add	r3, r2
   827ca:	2214      	movs	r2, #20
   827cc:	809a      	strh	r2, [r3, #4]
   827ce:	4b0f      	ldr	r3, [pc, #60]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   827d0:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
   827d4:	3301      	adds	r3, #1
   827d6:	b2da      	uxtb	r2, r3
   827d8:	4b0c      	ldr	r3, [pc, #48]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   827da:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
   827de:	4b0f      	ldr	r3, [pc, #60]	; (8281c <Cl_alarms_scanforAlarms+0x11fc>)
   827e0:	2201      	movs	r2, #1
   827e2:	701a      	strb	r2, [r3, #0]
   827e4:	4b0e      	ldr	r3, [pc, #56]	; (82820 <Cl_alarms_scanforAlarms+0x1200>)
   827e6:	2214      	movs	r2, #20
   827e8:	701a      	strb	r2, [r3, #0]
   827ea:	4b0b      	ldr	r3, [pc, #44]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   827ec:	781b      	ldrb	r3, [r3, #0]
   827ee:	461a      	mov	r2, r3
   827f0:	4b09      	ldr	r3, [pc, #36]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   827f2:	4413      	add	r3, r2
   827f4:	222e      	movs	r2, #46	; 0x2e
   827f6:	709a      	strb	r2, [r3, #2]
   827f8:	4b0a      	ldr	r3, [pc, #40]	; (82824 <Cl_alarms_scanforAlarms+0x1204>)
   827fa:	4798      	blx	r3
   827fc:	4603      	mov	r3, r0
   827fe:	71fb      	strb	r3, [r7, #7]
   82800:	79fb      	ldrb	r3, [r7, #7]
   82802:	2b00      	cmp	r3, #0
   82804:	d026      	beq.n	82854 <Cl_alarms_scanforAlarms+0x1234>
   82806:	4b08      	ldr	r3, [pc, #32]	; (82828 <Cl_alarms_scanforAlarms+0x1208>)
   82808:	4798      	blx	r3
   8280a:	e023      	b.n	82854 <Cl_alarms_scanforAlarms+0x1234>
   8280c:	200728e0 	.word	0x200728e0
   82810:	20071624 	.word	0x20071624
   82814:	000a4151 	.word	0x000a4151
   82818:	20072ec4 	.word	0x20072ec4
   8281c:	20071611 	.word	0x20071611
   82820:	20072d04 	.word	0x20072d04
   82824:	00082e69 	.word	0x00082e69
   82828:	00088725 	.word	0x00088725
   8282c:	000a418d 	.word	0x000a418d
   82830:	2007162c 	.word	0x2007162c
   82834:	4b9a      	ldr	r3, [pc, #616]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82836:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
   8283a:	2b01      	cmp	r3, #1
   8283c:	d10a      	bne.n	82854 <Cl_alarms_scanforAlarms+0x1234>
   8283e:	4b98      	ldr	r3, [pc, #608]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82840:	2204      	movs	r2, #4
   82842:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
   82846:	4b96      	ldr	r3, [pc, #600]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82848:	2200      	movs	r2, #0
   8284a:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
   8284e:	4b95      	ldr	r3, [pc, #596]	; (82aa4 <Cl_alarms_scanforAlarms+0x1484>)
   82850:	2200      	movs	r2, #0
   82852:	701a      	strb	r2, [r3, #0]
   82854:	4b92      	ldr	r3, [pc, #584]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82856:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
   8285a:	2b00      	cmp	r3, #0
   8285c:	d04a      	beq.n	828f4 <Cl_alarms_scanforAlarms+0x12d4>
   8285e:	4b90      	ldr	r3, [pc, #576]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82860:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   82864:	4b90      	ldr	r3, [pc, #576]	; (82aa8 <Cl_alarms_scanforAlarms+0x1488>)
   82866:	6819      	ldr	r1, [r3, #0]
   82868:	4b90      	ldr	r3, [pc, #576]	; (82aac <Cl_alarms_scanforAlarms+0x148c>)
   8286a:	4610      	mov	r0, r2
   8286c:	4798      	blx	r3
   8286e:	4603      	mov	r3, r0
   82870:	2b00      	cmp	r3, #0
   82872:	d02f      	beq.n	828d4 <Cl_alarms_scanforAlarms+0x12b4>
   82874:	4b8a      	ldr	r3, [pc, #552]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82876:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
   8287a:	2b01      	cmp	r3, #1
   8287c:	d03a      	beq.n	828f4 <Cl_alarms_scanforAlarms+0x12d4>
   8287e:	4b88      	ldr	r3, [pc, #544]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82880:	2201      	movs	r2, #1
   82882:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
   82886:	4b8a      	ldr	r3, [pc, #552]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   82888:	781b      	ldrb	r3, [r3, #0]
   8288a:	4a89      	ldr	r2, [pc, #548]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   8288c:	3301      	adds	r3, #1
   8288e:	00db      	lsls	r3, r3, #3
   82890:	4413      	add	r3, r2
   82892:	2211      	movs	r2, #17
   82894:	809a      	strh	r2, [r3, #4]
   82896:	4b82      	ldr	r3, [pc, #520]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82898:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
   8289c:	3301      	adds	r3, #1
   8289e:	b2da      	uxtb	r2, r3
   828a0:	4b7f      	ldr	r3, [pc, #508]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   828a2:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
   828a6:	4b7f      	ldr	r3, [pc, #508]	; (82aa4 <Cl_alarms_scanforAlarms+0x1484>)
   828a8:	2201      	movs	r2, #1
   828aa:	701a      	strb	r2, [r3, #0]
   828ac:	4b81      	ldr	r3, [pc, #516]	; (82ab4 <Cl_alarms_scanforAlarms+0x1494>)
   828ae:	2211      	movs	r2, #17
   828b0:	701a      	strb	r2, [r3, #0]
   828b2:	4b7f      	ldr	r3, [pc, #508]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   828b4:	781b      	ldrb	r3, [r3, #0]
   828b6:	461a      	mov	r2, r3
   828b8:	4b7d      	ldr	r3, [pc, #500]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   828ba:	4413      	add	r3, r2
   828bc:	222e      	movs	r2, #46	; 0x2e
   828be:	709a      	strb	r2, [r3, #2]
   828c0:	4b7d      	ldr	r3, [pc, #500]	; (82ab8 <Cl_alarms_scanforAlarms+0x1498>)
   828c2:	4798      	blx	r3
   828c4:	4603      	mov	r3, r0
   828c6:	71fb      	strb	r3, [r7, #7]
   828c8:	79fb      	ldrb	r3, [r7, #7]
   828ca:	2b00      	cmp	r3, #0
   828cc:	d012      	beq.n	828f4 <Cl_alarms_scanforAlarms+0x12d4>
   828ce:	4b7b      	ldr	r3, [pc, #492]	; (82abc <Cl_alarms_scanforAlarms+0x149c>)
   828d0:	4798      	blx	r3
   828d2:	e00f      	b.n	828f4 <Cl_alarms_scanforAlarms+0x12d4>
   828d4:	4b72      	ldr	r3, [pc, #456]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   828d6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
   828da:	2b01      	cmp	r3, #1
   828dc:	d10a      	bne.n	828f4 <Cl_alarms_scanforAlarms+0x12d4>
   828de:	4b70      	ldr	r3, [pc, #448]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   828e0:	2204      	movs	r2, #4
   828e2:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
   828e6:	4b6e      	ldr	r3, [pc, #440]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   828e8:	2200      	movs	r2, #0
   828ea:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
   828ee:	4b6d      	ldr	r3, [pc, #436]	; (82aa4 <Cl_alarms_scanforAlarms+0x1484>)
   828f0:	2200      	movs	r2, #0
   828f2:	701a      	strb	r2, [r3, #0]
   828f4:	4b6a      	ldr	r3, [pc, #424]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   828f6:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
   828fa:	2b00      	cmp	r3, #0
   828fc:	d04a      	beq.n	82994 <Cl_alarms_scanforAlarms+0x1374>
   828fe:	4b68      	ldr	r3, [pc, #416]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82900:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
   82904:	4b68      	ldr	r3, [pc, #416]	; (82aa8 <Cl_alarms_scanforAlarms+0x1488>)
   82906:	6819      	ldr	r1, [r3, #0]
   82908:	4b6d      	ldr	r3, [pc, #436]	; (82ac0 <Cl_alarms_scanforAlarms+0x14a0>)
   8290a:	4610      	mov	r0, r2
   8290c:	4798      	blx	r3
   8290e:	4603      	mov	r3, r0
   82910:	2b00      	cmp	r3, #0
   82912:	d02f      	beq.n	82974 <Cl_alarms_scanforAlarms+0x1354>
   82914:	4b62      	ldr	r3, [pc, #392]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82916:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
   8291a:	2b01      	cmp	r3, #1
   8291c:	d03a      	beq.n	82994 <Cl_alarms_scanforAlarms+0x1374>
   8291e:	4b60      	ldr	r3, [pc, #384]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82920:	2201      	movs	r2, #1
   82922:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
   82926:	4b62      	ldr	r3, [pc, #392]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   82928:	781b      	ldrb	r3, [r3, #0]
   8292a:	4a61      	ldr	r2, [pc, #388]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   8292c:	3301      	adds	r3, #1
   8292e:	00db      	lsls	r3, r3, #3
   82930:	4413      	add	r3, r2
   82932:	2212      	movs	r2, #18
   82934:	809a      	strh	r2, [r3, #4]
   82936:	4b5a      	ldr	r3, [pc, #360]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82938:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
   8293c:	3301      	adds	r3, #1
   8293e:	b2da      	uxtb	r2, r3
   82940:	4b57      	ldr	r3, [pc, #348]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82942:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
   82946:	4b57      	ldr	r3, [pc, #348]	; (82aa4 <Cl_alarms_scanforAlarms+0x1484>)
   82948:	2201      	movs	r2, #1
   8294a:	701a      	strb	r2, [r3, #0]
   8294c:	4b59      	ldr	r3, [pc, #356]	; (82ab4 <Cl_alarms_scanforAlarms+0x1494>)
   8294e:	2212      	movs	r2, #18
   82950:	701a      	strb	r2, [r3, #0]
   82952:	4b57      	ldr	r3, [pc, #348]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   82954:	781b      	ldrb	r3, [r3, #0]
   82956:	461a      	mov	r2, r3
   82958:	4b55      	ldr	r3, [pc, #340]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   8295a:	4413      	add	r3, r2
   8295c:	222e      	movs	r2, #46	; 0x2e
   8295e:	709a      	strb	r2, [r3, #2]
   82960:	4b55      	ldr	r3, [pc, #340]	; (82ab8 <Cl_alarms_scanforAlarms+0x1498>)
   82962:	4798      	blx	r3
   82964:	4603      	mov	r3, r0
   82966:	71fb      	strb	r3, [r7, #7]
   82968:	79fb      	ldrb	r3, [r7, #7]
   8296a:	2b00      	cmp	r3, #0
   8296c:	d012      	beq.n	82994 <Cl_alarms_scanforAlarms+0x1374>
   8296e:	4b53      	ldr	r3, [pc, #332]	; (82abc <Cl_alarms_scanforAlarms+0x149c>)
   82970:	4798      	blx	r3
   82972:	e00f      	b.n	82994 <Cl_alarms_scanforAlarms+0x1374>
   82974:	4b4a      	ldr	r3, [pc, #296]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82976:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
   8297a:	2b01      	cmp	r3, #1
   8297c:	d10a      	bne.n	82994 <Cl_alarms_scanforAlarms+0x1374>
   8297e:	4b48      	ldr	r3, [pc, #288]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82980:	2204      	movs	r2, #4
   82982:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
   82986:	4b46      	ldr	r3, [pc, #280]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82988:	2200      	movs	r2, #0
   8298a:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
   8298e:	4b45      	ldr	r3, [pc, #276]	; (82aa4 <Cl_alarms_scanforAlarms+0x1484>)
   82990:	2200      	movs	r2, #0
   82992:	701a      	strb	r2, [r3, #0]
   82994:	4b42      	ldr	r3, [pc, #264]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82996:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
   8299a:	2b00      	cmp	r3, #0
   8299c:	d045      	beq.n	82a2a <Cl_alarms_scanforAlarms+0x140a>
   8299e:	4b40      	ldr	r3, [pc, #256]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   829a0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   829a4:	4b47      	ldr	r3, [pc, #284]	; (82ac4 <Cl_alarms_scanforAlarms+0x14a4>)
   829a6:	6819      	ldr	r1, [r3, #0]
   829a8:	4b40      	ldr	r3, [pc, #256]	; (82aac <Cl_alarms_scanforAlarms+0x148c>)
   829aa:	4610      	mov	r0, r2
   829ac:	4798      	blx	r3
   829ae:	4603      	mov	r3, r0
   829b0:	2b00      	cmp	r3, #0
   829b2:	d02a      	beq.n	82a0a <Cl_alarms_scanforAlarms+0x13ea>
   829b4:	4b3a      	ldr	r3, [pc, #232]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   829b6:	2201      	movs	r2, #1
   829b8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
   829bc:	4b3c      	ldr	r3, [pc, #240]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   829be:	781b      	ldrb	r3, [r3, #0]
   829c0:	4a3b      	ldr	r2, [pc, #236]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   829c2:	3301      	adds	r3, #1
   829c4:	00db      	lsls	r3, r3, #3
   829c6:	4413      	add	r3, r2
   829c8:	2208      	movs	r2, #8
   829ca:	809a      	strh	r2, [r3, #4]
   829cc:	4b34      	ldr	r3, [pc, #208]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   829ce:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
   829d2:	3301      	adds	r3, #1
   829d4:	b2da      	uxtb	r2, r3
   829d6:	4b32      	ldr	r3, [pc, #200]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   829d8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
   829dc:	4b31      	ldr	r3, [pc, #196]	; (82aa4 <Cl_alarms_scanforAlarms+0x1484>)
   829de:	2201      	movs	r2, #1
   829e0:	701a      	strb	r2, [r3, #0]
   829e2:	4b34      	ldr	r3, [pc, #208]	; (82ab4 <Cl_alarms_scanforAlarms+0x1494>)
   829e4:	2208      	movs	r2, #8
   829e6:	701a      	strb	r2, [r3, #0]
   829e8:	4b31      	ldr	r3, [pc, #196]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   829ea:	781b      	ldrb	r3, [r3, #0]
   829ec:	461a      	mov	r2, r3
   829ee:	4b30      	ldr	r3, [pc, #192]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   829f0:	4413      	add	r3, r2
   829f2:	222e      	movs	r2, #46	; 0x2e
   829f4:	709a      	strb	r2, [r3, #2]
   829f6:	4b30      	ldr	r3, [pc, #192]	; (82ab8 <Cl_alarms_scanforAlarms+0x1498>)
   829f8:	4798      	blx	r3
   829fa:	4603      	mov	r3, r0
   829fc:	71fb      	strb	r3, [r7, #7]
   829fe:	79fb      	ldrb	r3, [r7, #7]
   82a00:	2b00      	cmp	r3, #0
   82a02:	d012      	beq.n	82a2a <Cl_alarms_scanforAlarms+0x140a>
   82a04:	4b2d      	ldr	r3, [pc, #180]	; (82abc <Cl_alarms_scanforAlarms+0x149c>)
   82a06:	4798      	blx	r3
   82a08:	e00f      	b.n	82a2a <Cl_alarms_scanforAlarms+0x140a>
   82a0a:	4b25      	ldr	r3, [pc, #148]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82a0c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   82a10:	2b01      	cmp	r3, #1
   82a12:	d10a      	bne.n	82a2a <Cl_alarms_scanforAlarms+0x140a>
   82a14:	4b22      	ldr	r3, [pc, #136]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82a16:	2204      	movs	r2, #4
   82a18:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
   82a1c:	4b20      	ldr	r3, [pc, #128]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82a1e:	2200      	movs	r2, #0
   82a20:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
   82a24:	4b1f      	ldr	r3, [pc, #124]	; (82aa4 <Cl_alarms_scanforAlarms+0x1484>)
   82a26:	2200      	movs	r2, #0
   82a28:	701a      	strb	r2, [r3, #0]
   82a2a:	4b1d      	ldr	r3, [pc, #116]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82a2c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
   82a30:	2b00      	cmp	r3, #0
   82a32:	d059      	beq.n	82ae8 <Cl_alarms_scanforAlarms+0x14c8>
   82a34:	4b1a      	ldr	r3, [pc, #104]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82a36:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   82a38:	4b22      	ldr	r3, [pc, #136]	; (82ac4 <Cl_alarms_scanforAlarms+0x14a4>)
   82a3a:	6819      	ldr	r1, [r3, #0]
   82a3c:	4b20      	ldr	r3, [pc, #128]	; (82ac0 <Cl_alarms_scanforAlarms+0x14a0>)
   82a3e:	4610      	mov	r0, r2
   82a40:	4798      	blx	r3
   82a42:	4603      	mov	r3, r0
   82a44:	2b00      	cmp	r3, #0
   82a46:	d03f      	beq.n	82ac8 <Cl_alarms_scanforAlarms+0x14a8>
   82a48:	4b15      	ldr	r3, [pc, #84]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82a4a:	2201      	movs	r2, #1
   82a4c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
   82a50:	4b17      	ldr	r3, [pc, #92]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   82a52:	781b      	ldrb	r3, [r3, #0]
   82a54:	4a16      	ldr	r2, [pc, #88]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   82a56:	3301      	adds	r3, #1
   82a58:	00db      	lsls	r3, r3, #3
   82a5a:	4413      	add	r3, r2
   82a5c:	2207      	movs	r2, #7
   82a5e:	809a      	strh	r2, [r3, #4]
   82a60:	4b0f      	ldr	r3, [pc, #60]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82a62:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
   82a66:	3301      	adds	r3, #1
   82a68:	b2da      	uxtb	r2, r3
   82a6a:	4b0d      	ldr	r3, [pc, #52]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82a6c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
   82a70:	4b0c      	ldr	r3, [pc, #48]	; (82aa4 <Cl_alarms_scanforAlarms+0x1484>)
   82a72:	2201      	movs	r2, #1
   82a74:	701a      	strb	r2, [r3, #0]
   82a76:	4b0f      	ldr	r3, [pc, #60]	; (82ab4 <Cl_alarms_scanforAlarms+0x1494>)
   82a78:	2207      	movs	r2, #7
   82a7a:	701a      	strb	r2, [r3, #0]
   82a7c:	4b0c      	ldr	r3, [pc, #48]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   82a7e:	781b      	ldrb	r3, [r3, #0]
   82a80:	461a      	mov	r2, r3
   82a82:	4b0b      	ldr	r3, [pc, #44]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   82a84:	4413      	add	r3, r2
   82a86:	222e      	movs	r2, #46	; 0x2e
   82a88:	709a      	strb	r2, [r3, #2]
   82a8a:	4b0b      	ldr	r3, [pc, #44]	; (82ab8 <Cl_alarms_scanforAlarms+0x1498>)
   82a8c:	4798      	blx	r3
   82a8e:	4603      	mov	r3, r0
   82a90:	71fb      	strb	r3, [r7, #7]
   82a92:	79fb      	ldrb	r3, [r7, #7]
   82a94:	2b00      	cmp	r3, #0
   82a96:	d027      	beq.n	82ae8 <Cl_alarms_scanforAlarms+0x14c8>
   82a98:	4b08      	ldr	r3, [pc, #32]	; (82abc <Cl_alarms_scanforAlarms+0x149c>)
   82a9a:	4798      	blx	r3
   82a9c:	e024      	b.n	82ae8 <Cl_alarms_scanforAlarms+0x14c8>
   82a9e:	bf00      	nop
   82aa0:	200728e0 	.word	0x200728e0
   82aa4:	20071611 	.word	0x20071611
   82aa8:	20071628 	.word	0x20071628
   82aac:	000a4151 	.word	0x000a4151
   82ab0:	20072ec4 	.word	0x20072ec4
   82ab4:	20072d04 	.word	0x20072d04
   82ab8:	00082e69 	.word	0x00082e69
   82abc:	00088725 	.word	0x00088725
   82ac0:	000a418d 	.word	0x000a418d
   82ac4:	20071634 	.word	0x20071634
   82ac8:	4b82      	ldr	r3, [pc, #520]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82aca:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
   82ace:	2b01      	cmp	r3, #1
   82ad0:	d10a      	bne.n	82ae8 <Cl_alarms_scanforAlarms+0x14c8>
   82ad2:	4b80      	ldr	r3, [pc, #512]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82ad4:	2204      	movs	r2, #4
   82ad6:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
   82ada:	4b7e      	ldr	r3, [pc, #504]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82adc:	2200      	movs	r2, #0
   82ade:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
   82ae2:	4b7d      	ldr	r3, [pc, #500]	; (82cd8 <Cl_alarms_scanforAlarms+0x16b8>)
   82ae4:	2200      	movs	r2, #0
   82ae6:	701a      	strb	r2, [r3, #0]
   82ae8:	4b7a      	ldr	r3, [pc, #488]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82aea:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
   82aee:	2b00      	cmp	r3, #0
   82af0:	d10a      	bne.n	82b08 <Cl_alarms_scanforAlarms+0x14e8>
   82af2:	4b78      	ldr	r3, [pc, #480]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82af4:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
   82af8:	2b00      	cmp	r3, #0
   82afa:	d105      	bne.n	82b08 <Cl_alarms_scanforAlarms+0x14e8>
   82afc:	4b75      	ldr	r3, [pc, #468]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82afe:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
   82b02:	2b00      	cmp	r3, #0
   82b04:	f000 80f7 	beq.w	82cf6 <Cl_alarms_scanforAlarms+0x16d6>
   82b08:	4b74      	ldr	r3, [pc, #464]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82b0a:	2200      	movs	r2, #0
   82b0c:	701a      	strb	r2, [r3, #0]
   82b0e:	4873      	ldr	r0, [pc, #460]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82b10:	4b73      	ldr	r3, [pc, #460]	; (82ce0 <Cl_alarms_scanforAlarms+0x16c0>)
   82b12:	4798      	blx	r3
   82b14:	4603      	mov	r3, r0
   82b16:	71fb      	strb	r3, [r7, #7]
   82b18:	79fb      	ldrb	r3, [r7, #7]
   82b1a:	2b00      	cmp	r3, #0
   82b1c:	d001      	beq.n	82b22 <Cl_alarms_scanforAlarms+0x1502>
   82b1e:	4b71      	ldr	r3, [pc, #452]	; (82ce4 <Cl_alarms_scanforAlarms+0x16c4>)
   82b20:	4798      	blx	r3
   82b22:	4b6e      	ldr	r3, [pc, #440]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82b24:	781b      	ldrb	r3, [r3, #0]
   82b26:	2b0a      	cmp	r3, #10
   82b28:	d049      	beq.n	82bbe <Cl_alarms_scanforAlarms+0x159e>
   82b2a:	2b0b      	cmp	r3, #11
   82b2c:	f000 808a 	beq.w	82c44 <Cl_alarms_scanforAlarms+0x1624>
   82b30:	2b09      	cmp	r3, #9
   82b32:	f040 80e0 	bne.w	82cf6 <Cl_alarms_scanforAlarms+0x16d6>
   82b36:	4b69      	ldr	r3, [pc, #420]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82b38:	781b      	ldrb	r3, [r3, #0]
   82b3a:	4a66      	ldr	r2, [pc, #408]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82b3c:	011b      	lsls	r3, r3, #4
   82b3e:	4413      	add	r3, r2
   82b40:	3302      	adds	r3, #2
   82b42:	2201      	movs	r2, #1
   82b44:	701a      	strb	r2, [r3, #0]
   82b46:	4b63      	ldr	r3, [pc, #396]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82b48:	2204      	movs	r2, #4
   82b4a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
   82b4e:	4b61      	ldr	r3, [pc, #388]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82b50:	2204      	movs	r2, #4
   82b52:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
   82b56:	4b64      	ldr	r3, [pc, #400]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82b58:	781b      	ldrb	r3, [r3, #0]
   82b5a:	4618      	mov	r0, r3
   82b5c:	4b5f      	ldr	r3, [pc, #380]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82b5e:	781b      	ldrb	r3, [r3, #0]
   82b60:	b299      	uxth	r1, r3
   82b62:	4a61      	ldr	r2, [pc, #388]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82b64:	1c43      	adds	r3, r0, #1
   82b66:	00db      	lsls	r3, r3, #3
   82b68:	4413      	add	r3, r2
   82b6a:	460a      	mov	r2, r1
   82b6c:	809a      	strh	r2, [r3, #4]
   82b6e:	4b5b      	ldr	r3, [pc, #364]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82b70:	781b      	ldrb	r3, [r3, #0]
   82b72:	4958      	ldr	r1, [pc, #352]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82b74:	011a      	lsls	r2, r3, #4
   82b76:	440a      	add	r2, r1
   82b78:	320d      	adds	r2, #13
   82b7a:	7812      	ldrb	r2, [r2, #0]
   82b7c:	3201      	adds	r2, #1
   82b7e:	b2d1      	uxtb	r1, r2
   82b80:	4a54      	ldr	r2, [pc, #336]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82b82:	011b      	lsls	r3, r3, #4
   82b84:	4413      	add	r3, r2
   82b86:	330d      	adds	r3, #13
   82b88:	460a      	mov	r2, r1
   82b8a:	701a      	strb	r2, [r3, #0]
   82b8c:	4b52      	ldr	r3, [pc, #328]	; (82cd8 <Cl_alarms_scanforAlarms+0x16b8>)
   82b8e:	2201      	movs	r2, #1
   82b90:	701a      	strb	r2, [r3, #0]
   82b92:	4b52      	ldr	r3, [pc, #328]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82b94:	781a      	ldrb	r2, [r3, #0]
   82b96:	4b55      	ldr	r3, [pc, #340]	; (82cec <Cl_alarms_scanforAlarms+0x16cc>)
   82b98:	701a      	strb	r2, [r3, #0]
   82b9a:	4b53      	ldr	r3, [pc, #332]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82b9c:	781b      	ldrb	r3, [r3, #0]
   82b9e:	461a      	mov	r2, r3
   82ba0:	4b51      	ldr	r3, [pc, #324]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82ba2:	4413      	add	r3, r2
   82ba4:	222e      	movs	r2, #46	; 0x2e
   82ba6:	709a      	strb	r2, [r3, #2]
   82ba8:	4b51      	ldr	r3, [pc, #324]	; (82cf0 <Cl_alarms_scanforAlarms+0x16d0>)
   82baa:	4798      	blx	r3
   82bac:	4603      	mov	r3, r0
   82bae:	71fb      	strb	r3, [r7, #7]
   82bb0:	79fb      	ldrb	r3, [r7, #7]
   82bb2:	2b00      	cmp	r3, #0
   82bb4:	f000 8089 	beq.w	82cca <Cl_alarms_scanforAlarms+0x16aa>
   82bb8:	4b4a      	ldr	r3, [pc, #296]	; (82ce4 <Cl_alarms_scanforAlarms+0x16c4>)
   82bba:	4798      	blx	r3
   82bbc:	e085      	b.n	82cca <Cl_alarms_scanforAlarms+0x16aa>
   82bbe:	4b47      	ldr	r3, [pc, #284]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82bc0:	781b      	ldrb	r3, [r3, #0]
   82bc2:	4a44      	ldr	r2, [pc, #272]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82bc4:	011b      	lsls	r3, r3, #4
   82bc6:	4413      	add	r3, r2
   82bc8:	3302      	adds	r3, #2
   82bca:	2201      	movs	r2, #1
   82bcc:	701a      	strb	r2, [r3, #0]
   82bce:	4b41      	ldr	r3, [pc, #260]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82bd0:	2204      	movs	r2, #4
   82bd2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
   82bd6:	4b3f      	ldr	r3, [pc, #252]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82bd8:	2204      	movs	r2, #4
   82bda:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
   82bde:	4b42      	ldr	r3, [pc, #264]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82be0:	781b      	ldrb	r3, [r3, #0]
   82be2:	4618      	mov	r0, r3
   82be4:	4b3d      	ldr	r3, [pc, #244]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82be6:	781b      	ldrb	r3, [r3, #0]
   82be8:	b299      	uxth	r1, r3
   82bea:	4a3f      	ldr	r2, [pc, #252]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82bec:	1c43      	adds	r3, r0, #1
   82bee:	00db      	lsls	r3, r3, #3
   82bf0:	4413      	add	r3, r2
   82bf2:	460a      	mov	r2, r1
   82bf4:	809a      	strh	r2, [r3, #4]
   82bf6:	4b39      	ldr	r3, [pc, #228]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82bf8:	781b      	ldrb	r3, [r3, #0]
   82bfa:	4936      	ldr	r1, [pc, #216]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82bfc:	011a      	lsls	r2, r3, #4
   82bfe:	440a      	add	r2, r1
   82c00:	320d      	adds	r2, #13
   82c02:	7812      	ldrb	r2, [r2, #0]
   82c04:	3201      	adds	r2, #1
   82c06:	b2d1      	uxtb	r1, r2
   82c08:	4a32      	ldr	r2, [pc, #200]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82c0a:	011b      	lsls	r3, r3, #4
   82c0c:	4413      	add	r3, r2
   82c0e:	330d      	adds	r3, #13
   82c10:	460a      	mov	r2, r1
   82c12:	701a      	strb	r2, [r3, #0]
   82c14:	4b30      	ldr	r3, [pc, #192]	; (82cd8 <Cl_alarms_scanforAlarms+0x16b8>)
   82c16:	2201      	movs	r2, #1
   82c18:	701a      	strb	r2, [r3, #0]
   82c1a:	4b30      	ldr	r3, [pc, #192]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82c1c:	781a      	ldrb	r2, [r3, #0]
   82c1e:	4b33      	ldr	r3, [pc, #204]	; (82cec <Cl_alarms_scanforAlarms+0x16cc>)
   82c20:	701a      	strb	r2, [r3, #0]
   82c22:	4b31      	ldr	r3, [pc, #196]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82c24:	781b      	ldrb	r3, [r3, #0]
   82c26:	461a      	mov	r2, r3
   82c28:	4b2f      	ldr	r3, [pc, #188]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82c2a:	4413      	add	r3, r2
   82c2c:	222e      	movs	r2, #46	; 0x2e
   82c2e:	709a      	strb	r2, [r3, #2]
   82c30:	4b2f      	ldr	r3, [pc, #188]	; (82cf0 <Cl_alarms_scanforAlarms+0x16d0>)
   82c32:	4798      	blx	r3
   82c34:	4603      	mov	r3, r0
   82c36:	71fb      	strb	r3, [r7, #7]
   82c38:	79fb      	ldrb	r3, [r7, #7]
   82c3a:	2b00      	cmp	r3, #0
   82c3c:	d047      	beq.n	82cce <Cl_alarms_scanforAlarms+0x16ae>
   82c3e:	4b29      	ldr	r3, [pc, #164]	; (82ce4 <Cl_alarms_scanforAlarms+0x16c4>)
   82c40:	4798      	blx	r3
   82c42:	e044      	b.n	82cce <Cl_alarms_scanforAlarms+0x16ae>
   82c44:	4b25      	ldr	r3, [pc, #148]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82c46:	781b      	ldrb	r3, [r3, #0]
   82c48:	4a22      	ldr	r2, [pc, #136]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82c4a:	011b      	lsls	r3, r3, #4
   82c4c:	4413      	add	r3, r2
   82c4e:	3302      	adds	r3, #2
   82c50:	2201      	movs	r2, #1
   82c52:	701a      	strb	r2, [r3, #0]
   82c54:	4b1f      	ldr	r3, [pc, #124]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82c56:	2204      	movs	r2, #4
   82c58:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
   82c5c:	4b1d      	ldr	r3, [pc, #116]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82c5e:	2204      	movs	r2, #4
   82c60:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
   82c64:	4b20      	ldr	r3, [pc, #128]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82c66:	781b      	ldrb	r3, [r3, #0]
   82c68:	4618      	mov	r0, r3
   82c6a:	4b1c      	ldr	r3, [pc, #112]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82c6c:	781b      	ldrb	r3, [r3, #0]
   82c6e:	b299      	uxth	r1, r3
   82c70:	4a1d      	ldr	r2, [pc, #116]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82c72:	1c43      	adds	r3, r0, #1
   82c74:	00db      	lsls	r3, r3, #3
   82c76:	4413      	add	r3, r2
   82c78:	460a      	mov	r2, r1
   82c7a:	809a      	strh	r2, [r3, #4]
   82c7c:	4b17      	ldr	r3, [pc, #92]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82c7e:	781b      	ldrb	r3, [r3, #0]
   82c80:	4914      	ldr	r1, [pc, #80]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82c82:	011a      	lsls	r2, r3, #4
   82c84:	440a      	add	r2, r1
   82c86:	320d      	adds	r2, #13
   82c88:	7812      	ldrb	r2, [r2, #0]
   82c8a:	3201      	adds	r2, #1
   82c8c:	b2d1      	uxtb	r1, r2
   82c8e:	4a11      	ldr	r2, [pc, #68]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82c90:	011b      	lsls	r3, r3, #4
   82c92:	4413      	add	r3, r2
   82c94:	330d      	adds	r3, #13
   82c96:	460a      	mov	r2, r1
   82c98:	701a      	strb	r2, [r3, #0]
   82c9a:	4b0f      	ldr	r3, [pc, #60]	; (82cd8 <Cl_alarms_scanforAlarms+0x16b8>)
   82c9c:	2201      	movs	r2, #1
   82c9e:	701a      	strb	r2, [r3, #0]
   82ca0:	4b0e      	ldr	r3, [pc, #56]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82ca2:	781a      	ldrb	r2, [r3, #0]
   82ca4:	4b11      	ldr	r3, [pc, #68]	; (82cec <Cl_alarms_scanforAlarms+0x16cc>)
   82ca6:	701a      	strb	r2, [r3, #0]
   82ca8:	4b0f      	ldr	r3, [pc, #60]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82caa:	781b      	ldrb	r3, [r3, #0]
   82cac:	461a      	mov	r2, r3
   82cae:	4b0e      	ldr	r3, [pc, #56]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82cb0:	4413      	add	r3, r2
   82cb2:	222e      	movs	r2, #46	; 0x2e
   82cb4:	709a      	strb	r2, [r3, #2]
   82cb6:	4b0e      	ldr	r3, [pc, #56]	; (82cf0 <Cl_alarms_scanforAlarms+0x16d0>)
   82cb8:	4798      	blx	r3
   82cba:	4603      	mov	r3, r0
   82cbc:	71fb      	strb	r3, [r7, #7]
   82cbe:	79fb      	ldrb	r3, [r7, #7]
   82cc0:	2b00      	cmp	r3, #0
   82cc2:	d017      	beq.n	82cf4 <Cl_alarms_scanforAlarms+0x16d4>
   82cc4:	4b07      	ldr	r3, [pc, #28]	; (82ce4 <Cl_alarms_scanforAlarms+0x16c4>)
   82cc6:	4798      	blx	r3
   82cc8:	e014      	b.n	82cf4 <Cl_alarms_scanforAlarms+0x16d4>
   82cca:	bf00      	nop
   82ccc:	e013      	b.n	82cf6 <Cl_alarms_scanforAlarms+0x16d6>
   82cce:	bf00      	nop
   82cd0:	e011      	b.n	82cf6 <Cl_alarms_scanforAlarms+0x16d6>
   82cd2:	bf00      	nop
   82cd4:	200728e0 	.word	0x200728e0
   82cd8:	20071611 	.word	0x20071611
   82cdc:	20071610 	.word	0x20071610
   82ce0:	00083211 	.word	0x00083211
   82ce4:	00088725 	.word	0x00088725
   82ce8:	20072ec4 	.word	0x20072ec4
   82cec:	20072d04 	.word	0x20072d04
   82cf0:	00082e69 	.word	0x00082e69
   82cf4:	bf00      	nop
   82cf6:	4b50      	ldr	r3, [pc, #320]	; (82e38 <Cl_alarms_scanforAlarms+0x1818>)
   82cf8:	781b      	ldrb	r3, [r3, #0]
   82cfa:	2b00      	cmp	r3, #0
   82cfc:	f000 8097 	beq.w	82e2e <Cl_alarms_scanforAlarms+0x180e>
   82d00:	4b4e      	ldr	r3, [pc, #312]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82d02:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   82d06:	2b00      	cmp	r3, #0
   82d08:	d10a      	bne.n	82d20 <Cl_alarms_scanforAlarms+0x1700>
   82d0a:	4b4c      	ldr	r3, [pc, #304]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82d0c:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   82d10:	2b00      	cmp	r3, #0
   82d12:	d105      	bne.n	82d20 <Cl_alarms_scanforAlarms+0x1700>
   82d14:	4b49      	ldr	r3, [pc, #292]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82d16:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
   82d1a:	2b00      	cmp	r3, #0
   82d1c:	f000 8087 	beq.w	82e2e <Cl_alarms_scanforAlarms+0x180e>
   82d20:	4b47      	ldr	r3, [pc, #284]	; (82e40 <Cl_alarms_scanforAlarms+0x1820>)
   82d22:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   82d24:	461a      	mov	r2, r3
   82d26:	4b47      	ldr	r3, [pc, #284]	; (82e44 <Cl_alarms_scanforAlarms+0x1824>)
   82d28:	681b      	ldr	r3, [r3, #0]
   82d2a:	429a      	cmp	r2, r3
   82d2c:	d00c      	beq.n	82d48 <Cl_alarms_scanforAlarms+0x1728>
   82d2e:	4b46      	ldr	r3, [pc, #280]	; (82e48 <Cl_alarms_scanforAlarms+0x1828>)
   82d30:	2200      	movs	r2, #0
   82d32:	601a      	str	r2, [r3, #0]
   82d34:	4b45      	ldr	r3, [pc, #276]	; (82e4c <Cl_alarms_scanforAlarms+0x182c>)
   82d36:	681b      	ldr	r3, [r3, #0]
   82d38:	3301      	adds	r3, #1
   82d3a:	4a44      	ldr	r2, [pc, #272]	; (82e4c <Cl_alarms_scanforAlarms+0x182c>)
   82d3c:	6013      	str	r3, [r2, #0]
   82d3e:	4b44      	ldr	r3, [pc, #272]	; (82e50 <Cl_alarms_scanforAlarms+0x1830>)
   82d40:	681b      	ldr	r3, [r3, #0]
   82d42:	3301      	adds	r3, #1
   82d44:	4a42      	ldr	r2, [pc, #264]	; (82e50 <Cl_alarms_scanforAlarms+0x1830>)
   82d46:	6013      	str	r3, [r2, #0]
   82d48:	4b3f      	ldr	r3, [pc, #252]	; (82e48 <Cl_alarms_scanforAlarms+0x1828>)
   82d4a:	681b      	ldr	r3, [r3, #0]
   82d4c:	2b28      	cmp	r3, #40	; 0x28
   82d4e:	d932      	bls.n	82db6 <Cl_alarms_scanforAlarms+0x1796>
   82d50:	4b3a      	ldr	r3, [pc, #232]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82d52:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   82d56:	2b01      	cmp	r3, #1
   82d58:	d02d      	beq.n	82db6 <Cl_alarms_scanforAlarms+0x1796>
   82d5a:	4b38      	ldr	r3, [pc, #224]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82d5c:	2201      	movs	r2, #1
   82d5e:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
   82d62:	4b3c      	ldr	r3, [pc, #240]	; (82e54 <Cl_alarms_scanforAlarms+0x1834>)
   82d64:	781b      	ldrb	r3, [r3, #0]
   82d66:	4a3b      	ldr	r2, [pc, #236]	; (82e54 <Cl_alarms_scanforAlarms+0x1834>)
   82d68:	3301      	adds	r3, #1
   82d6a:	00db      	lsls	r3, r3, #3
   82d6c:	4413      	add	r3, r2
   82d6e:	220c      	movs	r2, #12
   82d70:	809a      	strh	r2, [r3, #4]
   82d72:	4b32      	ldr	r3, [pc, #200]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82d74:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   82d78:	3301      	adds	r3, #1
   82d7a:	b2da      	uxtb	r2, r3
   82d7c:	4b2f      	ldr	r3, [pc, #188]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82d7e:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   82d82:	4b2e      	ldr	r3, [pc, #184]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82d84:	2204      	movs	r2, #4
   82d86:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
   82d8a:	4b33      	ldr	r3, [pc, #204]	; (82e58 <Cl_alarms_scanforAlarms+0x1838>)
   82d8c:	2201      	movs	r2, #1
   82d8e:	701a      	strb	r2, [r3, #0]
   82d90:	4b32      	ldr	r3, [pc, #200]	; (82e5c <Cl_alarms_scanforAlarms+0x183c>)
   82d92:	220c      	movs	r2, #12
   82d94:	701a      	strb	r2, [r3, #0]
   82d96:	4b2f      	ldr	r3, [pc, #188]	; (82e54 <Cl_alarms_scanforAlarms+0x1834>)
   82d98:	781b      	ldrb	r3, [r3, #0]
   82d9a:	461a      	mov	r2, r3
   82d9c:	4b2d      	ldr	r3, [pc, #180]	; (82e54 <Cl_alarms_scanforAlarms+0x1834>)
   82d9e:	4413      	add	r3, r2
   82da0:	222d      	movs	r2, #45	; 0x2d
   82da2:	709a      	strb	r2, [r3, #2]
   82da4:	4b2e      	ldr	r3, [pc, #184]	; (82e60 <Cl_alarms_scanforAlarms+0x1840>)
   82da6:	4798      	blx	r3
   82da8:	4603      	mov	r3, r0
   82daa:	71fb      	strb	r3, [r7, #7]
   82dac:	79fb      	ldrb	r3, [r7, #7]
   82dae:	2b00      	cmp	r3, #0
   82db0:	d001      	beq.n	82db6 <Cl_alarms_scanforAlarms+0x1796>
   82db2:	4b2c      	ldr	r3, [pc, #176]	; (82e64 <Cl_alarms_scanforAlarms+0x1844>)
   82db4:	4798      	blx	r3
   82db6:	4b25      	ldr	r3, [pc, #148]	; (82e4c <Cl_alarms_scanforAlarms+0x182c>)
   82db8:	681b      	ldr	r3, [r3, #0]
   82dba:	2b02      	cmp	r3, #2
   82dbc:	d932      	bls.n	82e24 <Cl_alarms_scanforAlarms+0x1804>
   82dbe:	4b1f      	ldr	r3, [pc, #124]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82dc0:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
   82dc4:	2b01      	cmp	r3, #1
   82dc6:	d02d      	beq.n	82e24 <Cl_alarms_scanforAlarms+0x1804>
   82dc8:	4b1c      	ldr	r3, [pc, #112]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82dca:	2201      	movs	r2, #1
   82dcc:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
   82dd0:	4b20      	ldr	r3, [pc, #128]	; (82e54 <Cl_alarms_scanforAlarms+0x1834>)
   82dd2:	781b      	ldrb	r3, [r3, #0]
   82dd4:	4a1f      	ldr	r2, [pc, #124]	; (82e54 <Cl_alarms_scanforAlarms+0x1834>)
   82dd6:	3301      	adds	r3, #1
   82dd8:	00db      	lsls	r3, r3, #3
   82dda:	4413      	add	r3, r2
   82ddc:	220e      	movs	r2, #14
   82dde:	809a      	strh	r2, [r3, #4]
   82de0:	4b16      	ldr	r3, [pc, #88]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82de2:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
   82de6:	3301      	adds	r3, #1
   82de8:	b2da      	uxtb	r2, r3
   82dea:	4b14      	ldr	r3, [pc, #80]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82dec:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
   82df0:	4b12      	ldr	r3, [pc, #72]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82df2:	2204      	movs	r2, #4
   82df4:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
   82df8:	4b17      	ldr	r3, [pc, #92]	; (82e58 <Cl_alarms_scanforAlarms+0x1838>)
   82dfa:	2201      	movs	r2, #1
   82dfc:	701a      	strb	r2, [r3, #0]
   82dfe:	4b17      	ldr	r3, [pc, #92]	; (82e5c <Cl_alarms_scanforAlarms+0x183c>)
   82e00:	220e      	movs	r2, #14
   82e02:	701a      	strb	r2, [r3, #0]
   82e04:	4b13      	ldr	r3, [pc, #76]	; (82e54 <Cl_alarms_scanforAlarms+0x1834>)
   82e06:	781b      	ldrb	r3, [r3, #0]
   82e08:	461a      	mov	r2, r3
   82e0a:	4b12      	ldr	r3, [pc, #72]	; (82e54 <Cl_alarms_scanforAlarms+0x1834>)
   82e0c:	4413      	add	r3, r2
   82e0e:	222d      	movs	r2, #45	; 0x2d
   82e10:	709a      	strb	r2, [r3, #2]
   82e12:	4b13      	ldr	r3, [pc, #76]	; (82e60 <Cl_alarms_scanforAlarms+0x1840>)
   82e14:	4798      	blx	r3
   82e16:	4603      	mov	r3, r0
   82e18:	71fb      	strb	r3, [r7, #7]
   82e1a:	79fb      	ldrb	r3, [r7, #7]
   82e1c:	2b00      	cmp	r3, #0
   82e1e:	d001      	beq.n	82e24 <Cl_alarms_scanforAlarms+0x1804>
   82e20:	4b10      	ldr	r3, [pc, #64]	; (82e64 <Cl_alarms_scanforAlarms+0x1844>)
   82e22:	4798      	blx	r3
   82e24:	4b06      	ldr	r3, [pc, #24]	; (82e40 <Cl_alarms_scanforAlarms+0x1820>)
   82e26:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   82e28:	461a      	mov	r2, r3
   82e2a:	4b06      	ldr	r3, [pc, #24]	; (82e44 <Cl_alarms_scanforAlarms+0x1824>)
   82e2c:	601a      	str	r2, [r3, #0]
   82e2e:	2300      	movs	r3, #0
   82e30:	4618      	mov	r0, r3
   82e32:	3708      	adds	r7, #8
   82e34:	46bd      	mov	sp, r7
   82e36:	bd80      	pop	{r7, pc}
   82e38:	2007263f 	.word	0x2007263f
   82e3c:	200728e0 	.word	0x200728e0
   82e40:	20072e28 	.word	0x20072e28
   82e44:	20071600 	.word	0x20071600
   82e48:	20071604 	.word	0x20071604
   82e4c:	20071608 	.word	0x20071608
   82e50:	2007160c 	.word	0x2007160c
   82e54:	20072ec4 	.word	0x20072ec4
   82e58:	20071611 	.word	0x20071611
   82e5c:	20072d04 	.word	0x20072d04
   82e60:	00082e69 	.word	0x00082e69
   82e64:	00088725 	.word	0x00088725

00082e68 <Cl_UpdateMacAlarmEventTable>:
   82e68:	b480      	push	{r7}
   82e6a:	af00      	add	r7, sp, #0
   82e6c:	4b0a      	ldr	r3, [pc, #40]	; (82e98 <Cl_UpdateMacAlarmEventTable+0x30>)
   82e6e:	781b      	ldrb	r3, [r3, #0]
   82e70:	2b00      	cmp	r3, #0
   82e72:	d00c      	beq.n	82e8e <Cl_UpdateMacAlarmEventTable+0x26>
   82e74:	4b09      	ldr	r3, [pc, #36]	; (82e9c <Cl_UpdateMacAlarmEventTable+0x34>)
   82e76:	781b      	ldrb	r3, [r3, #0]
   82e78:	2b0a      	cmp	r3, #10
   82e7a:	d808      	bhi.n	82e8e <Cl_UpdateMacAlarmEventTable+0x26>
   82e7c:	4b07      	ldr	r3, [pc, #28]	; (82e9c <Cl_UpdateMacAlarmEventTable+0x34>)
   82e7e:	2201      	movs	r2, #1
   82e80:	705a      	strb	r2, [r3, #1]
   82e82:	4b06      	ldr	r3, [pc, #24]	; (82e9c <Cl_UpdateMacAlarmEventTable+0x34>)
   82e84:	781b      	ldrb	r3, [r3, #0]
   82e86:	3301      	adds	r3, #1
   82e88:	b2da      	uxtb	r2, r3
   82e8a:	4b04      	ldr	r3, [pc, #16]	; (82e9c <Cl_UpdateMacAlarmEventTable+0x34>)
   82e8c:	701a      	strb	r2, [r3, #0]
   82e8e:	2300      	movs	r3, #0
   82e90:	4618      	mov	r0, r3
   82e92:	46bd      	mov	sp, r7
   82e94:	bc80      	pop	{r7}
   82e96:	4770      	bx	lr
   82e98:	20071611 	.word	0x20071611
   82e9c:	20072ec4 	.word	0x20072ec4

00082ea0 <Cl_AlarmConfigureAlarmType>:
   82ea0:	b480      	push	{r7}
   82ea2:	b085      	sub	sp, #20
   82ea4:	af00      	add	r7, sp, #0
   82ea6:	60ba      	str	r2, [r7, #8]
   82ea8:	607b      	str	r3, [r7, #4]
   82eaa:	4603      	mov	r3, r0
   82eac:	73fb      	strb	r3, [r7, #15]
   82eae:	460b      	mov	r3, r1
   82eb0:	73bb      	strb	r3, [r7, #14]
   82eb2:	7bfb      	ldrb	r3, [r7, #15]
   82eb4:	4a10      	ldr	r2, [pc, #64]	; (82ef8 <Cl_AlarmConfigureAlarmType+0x58>)
   82eb6:	011b      	lsls	r3, r3, #4
   82eb8:	4413      	add	r3, r2
   82eba:	3301      	adds	r3, #1
   82ebc:	7bba      	ldrb	r2, [r7, #14]
   82ebe:	701a      	strb	r2, [r3, #0]
   82ec0:	7bfb      	ldrb	r3, [r7, #15]
   82ec2:	4a0d      	ldr	r2, [pc, #52]	; (82ef8 <Cl_AlarmConfigureAlarmType+0x58>)
   82ec4:	011b      	lsls	r3, r3, #4
   82ec6:	4413      	add	r3, r2
   82ec8:	3308      	adds	r3, #8
   82eca:	687a      	ldr	r2, [r7, #4]
   82ecc:	601a      	str	r2, [r3, #0]
   82ece:	7bfb      	ldrb	r3, [r7, #15]
   82ed0:	4a09      	ldr	r2, [pc, #36]	; (82ef8 <Cl_AlarmConfigureAlarmType+0x58>)
   82ed2:	011b      	lsls	r3, r3, #4
   82ed4:	4413      	add	r3, r2
   82ed6:	3304      	adds	r3, #4
   82ed8:	68ba      	ldr	r2, [r7, #8]
   82eda:	601a      	str	r2, [r3, #0]
   82edc:	7bfb      	ldrb	r3, [r7, #15]
   82ede:	4a06      	ldr	r2, [pc, #24]	; (82ef8 <Cl_AlarmConfigureAlarmType+0x58>)
   82ee0:	011b      	lsls	r3, r3, #4
   82ee2:	4413      	add	r3, r2
   82ee4:	330c      	adds	r3, #12
   82ee6:	7e3a      	ldrb	r2, [r7, #24]
   82ee8:	701a      	strb	r2, [r3, #0]
   82eea:	2300      	movs	r3, #0
   82eec:	4618      	mov	r0, r3
   82eee:	3714      	adds	r7, #20
   82ef0:	46bd      	mov	sp, r7
   82ef2:	bc80      	pop	{r7}
   82ef4:	4770      	bx	lr
   82ef6:	bf00      	nop
   82ef8:	200728e0 	.word	0x200728e0

00082efc <Cl_AlarmActivateAlarms>:
   82efc:	b580      	push	{r7, lr}
   82efe:	b084      	sub	sp, #16
   82f00:	af00      	add	r7, sp, #0
   82f02:	4603      	mov	r3, r0
   82f04:	460a      	mov	r2, r1
   82f06:	71fb      	strb	r3, [r7, #7]
   82f08:	4613      	mov	r3, r2
   82f0a:	71bb      	strb	r3, [r7, #6]
   82f0c:	2300      	movs	r3, #0
   82f0e:	73fb      	strb	r3, [r7, #15]
   82f10:	79fb      	ldrb	r3, [r7, #7]
   82f12:	2b00      	cmp	r3, #0
   82f14:	d059      	beq.n	82fca <Cl_AlarmActivateAlarms+0xce>
   82f16:	79fb      	ldrb	r3, [r7, #7]
   82f18:	2b41      	cmp	r3, #65	; 0x41
   82f1a:	d856      	bhi.n	82fca <Cl_AlarmActivateAlarms+0xce>
   82f1c:	79fb      	ldrb	r3, [r7, #7]
   82f1e:	2b3d      	cmp	r3, #61	; 0x3d
   82f20:	d005      	beq.n	82f2e <Cl_AlarmActivateAlarms+0x32>
   82f22:	79fb      	ldrb	r3, [r7, #7]
   82f24:	2b3e      	cmp	r3, #62	; 0x3e
   82f26:	d002      	beq.n	82f2e <Cl_AlarmActivateAlarms+0x32>
   82f28:	79fb      	ldrb	r3, [r7, #7]
   82f2a:	2b3c      	cmp	r3, #60	; 0x3c
   82f2c:	d114      	bne.n	82f58 <Cl_AlarmActivateAlarms+0x5c>
   82f2e:	79fb      	ldrb	r3, [r7, #7]
   82f30:	4a2c      	ldr	r2, [pc, #176]	; (82fe4 <Cl_AlarmActivateAlarms+0xe8>)
   82f32:	011b      	lsls	r3, r3, #4
   82f34:	4413      	add	r3, r2
   82f36:	330e      	adds	r3, #14
   82f38:	2201      	movs	r2, #1
   82f3a:	701a      	strb	r2, [r3, #0]
   82f3c:	79fb      	ldrb	r3, [r7, #7]
   82f3e:	4a29      	ldr	r2, [pc, #164]	; (82fe4 <Cl_AlarmActivateAlarms+0xe8>)
   82f40:	011b      	lsls	r3, r3, #4
   82f42:	4413      	add	r3, r2
   82f44:	3302      	adds	r3, #2
   82f46:	2202      	movs	r2, #2
   82f48:	701a      	strb	r2, [r3, #0]
   82f4a:	79fb      	ldrb	r3, [r7, #7]
   82f4c:	4a25      	ldr	r2, [pc, #148]	; (82fe4 <Cl_AlarmActivateAlarms+0xe8>)
   82f4e:	011b      	lsls	r3, r3, #4
   82f50:	4413      	add	r3, r2
   82f52:	330d      	adds	r3, #13
   82f54:	2200      	movs	r2, #0
   82f56:	701a      	strb	r2, [r3, #0]
   82f58:	4b23      	ldr	r3, [pc, #140]	; (82fe8 <Cl_AlarmActivateAlarms+0xec>)
   82f5a:	781b      	ldrb	r3, [r3, #0]
   82f5c:	2b00      	cmp	r3, #0
   82f5e:	d036      	beq.n	82fce <Cl_AlarmActivateAlarms+0xd2>
   82f60:	79fb      	ldrb	r3, [r7, #7]
   82f62:	4a20      	ldr	r2, [pc, #128]	; (82fe4 <Cl_AlarmActivateAlarms+0xe8>)
   82f64:	011b      	lsls	r3, r3, #4
   82f66:	4413      	add	r3, r2
   82f68:	79fa      	ldrb	r2, [r7, #7]
   82f6a:	701a      	strb	r2, [r3, #0]
   82f6c:	79bb      	ldrb	r3, [r7, #6]
   82f6e:	2b00      	cmp	r3, #0
   82f70:	d015      	beq.n	82f9e <Cl_AlarmActivateAlarms+0xa2>
   82f72:	79fb      	ldrb	r3, [r7, #7]
   82f74:	4a1b      	ldr	r2, [pc, #108]	; (82fe4 <Cl_AlarmActivateAlarms+0xe8>)
   82f76:	011b      	lsls	r3, r3, #4
   82f78:	4413      	add	r3, r2
   82f7a:	330e      	adds	r3, #14
   82f7c:	2201      	movs	r2, #1
   82f7e:	701a      	strb	r2, [r3, #0]
   82f80:	79fb      	ldrb	r3, [r7, #7]
   82f82:	4a18      	ldr	r2, [pc, #96]	; (82fe4 <Cl_AlarmActivateAlarms+0xe8>)
   82f84:	011b      	lsls	r3, r3, #4
   82f86:	4413      	add	r3, r2
   82f88:	3302      	adds	r3, #2
   82f8a:	2202      	movs	r2, #2
   82f8c:	701a      	strb	r2, [r3, #0]
   82f8e:	79fb      	ldrb	r3, [r7, #7]
   82f90:	4a14      	ldr	r2, [pc, #80]	; (82fe4 <Cl_AlarmActivateAlarms+0xe8>)
   82f92:	011b      	lsls	r3, r3, #4
   82f94:	4413      	add	r3, r2
   82f96:	330d      	adds	r3, #13
   82f98:	2200      	movs	r2, #0
   82f9a:	701a      	strb	r2, [r3, #0]
   82f9c:	e017      	b.n	82fce <Cl_AlarmActivateAlarms+0xd2>
   82f9e:	79fb      	ldrb	r3, [r7, #7]
   82fa0:	4a10      	ldr	r2, [pc, #64]	; (82fe4 <Cl_AlarmActivateAlarms+0xe8>)
   82fa2:	011b      	lsls	r3, r3, #4
   82fa4:	4413      	add	r3, r2
   82fa6:	330e      	adds	r3, #14
   82fa8:	2200      	movs	r2, #0
   82faa:	701a      	strb	r2, [r3, #0]
   82fac:	79fb      	ldrb	r3, [r7, #7]
   82fae:	4a0d      	ldr	r2, [pc, #52]	; (82fe4 <Cl_AlarmActivateAlarms+0xe8>)
   82fb0:	011b      	lsls	r3, r3, #4
   82fb2:	4413      	add	r3, r2
   82fb4:	3302      	adds	r3, #2
   82fb6:	2204      	movs	r2, #4
   82fb8:	701a      	strb	r2, [r3, #0]
   82fba:	79fb      	ldrb	r3, [r7, #7]
   82fbc:	4a09      	ldr	r2, [pc, #36]	; (82fe4 <Cl_AlarmActivateAlarms+0xe8>)
   82fbe:	011b      	lsls	r3, r3, #4
   82fc0:	4413      	add	r3, r2
   82fc2:	330d      	adds	r3, #13
   82fc4:	2200      	movs	r2, #0
   82fc6:	701a      	strb	r2, [r3, #0]
   82fc8:	e001      	b.n	82fce <Cl_AlarmActivateAlarms+0xd2>
   82fca:	2304      	movs	r3, #4
   82fcc:	73fb      	strb	r3, [r7, #15]
   82fce:	7bfb      	ldrb	r3, [r7, #15]
   82fd0:	2b00      	cmp	r3, #0
   82fd2:	d001      	beq.n	82fd8 <Cl_AlarmActivateAlarms+0xdc>
   82fd4:	4b05      	ldr	r3, [pc, #20]	; (82fec <Cl_AlarmActivateAlarms+0xf0>)
   82fd6:	4798      	blx	r3
   82fd8:	7bfb      	ldrb	r3, [r7, #15]
   82fda:	4618      	mov	r0, r3
   82fdc:	3710      	adds	r7, #16
   82fde:	46bd      	mov	sp, r7
   82fe0:	bd80      	pop	{r7, pc}
   82fe2:	bf00      	nop
   82fe4:	200728e0 	.word	0x200728e0
   82fe8:	200709ec 	.word	0x200709ec
   82fec:	00088725 	.word	0x00088725

00082ff0 <Cl_AlarmResetAlarm>:
   82ff0:	b480      	push	{r7}
   82ff2:	b085      	sub	sp, #20
   82ff4:	af00      	add	r7, sp, #0
   82ff6:	4603      	mov	r3, r0
   82ff8:	71fb      	strb	r3, [r7, #7]
   82ffa:	2300      	movs	r3, #0
   82ffc:	73fb      	strb	r3, [r7, #15]
   82ffe:	79fb      	ldrb	r3, [r7, #7]
   83000:	2b00      	cmp	r3, #0
   83002:	d00c      	beq.n	8301e <Cl_AlarmResetAlarm+0x2e>
   83004:	79fb      	ldrb	r3, [r7, #7]
   83006:	2b41      	cmp	r3, #65	; 0x41
   83008:	d809      	bhi.n	8301e <Cl_AlarmResetAlarm+0x2e>
   8300a:	79fb      	ldrb	r3, [r7, #7]
   8300c:	4a08      	ldr	r2, [pc, #32]	; (83030 <Cl_AlarmResetAlarm+0x40>)
   8300e:	011b      	lsls	r3, r3, #4
   83010:	4413      	add	r3, r2
   83012:	3302      	adds	r3, #2
   83014:	2202      	movs	r2, #2
   83016:	701a      	strb	r2, [r3, #0]
   83018:	2300      	movs	r3, #0
   8301a:	73fb      	strb	r3, [r7, #15]
   8301c:	e001      	b.n	83022 <Cl_AlarmResetAlarm+0x32>
   8301e:	2304      	movs	r3, #4
   83020:	73fb      	strb	r3, [r7, #15]
   83022:	7bfb      	ldrb	r3, [r7, #15]
   83024:	4618      	mov	r0, r3
   83026:	3714      	adds	r7, #20
   83028:	46bd      	mov	sp, r7
   8302a:	bc80      	pop	{r7}
   8302c:	4770      	bx	lr
   8302e:	bf00      	nop
   83030:	200728e0 	.word	0x200728e0

00083034 <Cl_Alarm_GetAlarmStatus>:
   83034:	b580      	push	{r7, lr}
   83036:	b084      	sub	sp, #16
   83038:	af00      	add	r7, sp, #0
   8303a:	4603      	mov	r3, r0
   8303c:	6039      	str	r1, [r7, #0]
   8303e:	71fb      	strb	r3, [r7, #7]
   83040:	2300      	movs	r3, #0
   83042:	73fb      	strb	r3, [r7, #15]
   83044:	79fb      	ldrb	r3, [r7, #7]
   83046:	2b00      	cmp	r3, #0
   83048:	d01c      	beq.n	83084 <Cl_Alarm_GetAlarmStatus+0x50>
   8304a:	79fb      	ldrb	r3, [r7, #7]
   8304c:	2b41      	cmp	r3, #65	; 0x41
   8304e:	d819      	bhi.n	83084 <Cl_Alarm_GetAlarmStatus+0x50>
   83050:	79fb      	ldrb	r3, [r7, #7]
   83052:	4a12      	ldr	r2, [pc, #72]	; (8309c <Cl_Alarm_GetAlarmStatus+0x68>)
   83054:	011b      	lsls	r3, r3, #4
   83056:	4413      	add	r3, r2
   83058:	3302      	adds	r3, #2
   8305a:	781b      	ldrb	r3, [r3, #0]
   8305c:	2b01      	cmp	r3, #1
   8305e:	d007      	beq.n	83070 <Cl_Alarm_GetAlarmStatus+0x3c>
   83060:	79fb      	ldrb	r3, [r7, #7]
   83062:	4a0e      	ldr	r2, [pc, #56]	; (8309c <Cl_Alarm_GetAlarmStatus+0x68>)
   83064:	011b      	lsls	r3, r3, #4
   83066:	4413      	add	r3, r2
   83068:	3302      	adds	r3, #2
   8306a:	781b      	ldrb	r3, [r3, #0]
   8306c:	2b03      	cmp	r3, #3
   8306e:	d103      	bne.n	83078 <Cl_Alarm_GetAlarmStatus+0x44>
   83070:	683b      	ldr	r3, [r7, #0]
   83072:	2201      	movs	r2, #1
   83074:	701a      	strb	r2, [r3, #0]
   83076:	e002      	b.n	8307e <Cl_Alarm_GetAlarmStatus+0x4a>
   83078:	683b      	ldr	r3, [r7, #0]
   8307a:	2200      	movs	r2, #0
   8307c:	701a      	strb	r2, [r3, #0]
   8307e:	2300      	movs	r3, #0
   83080:	73fb      	strb	r3, [r7, #15]
   83082:	e001      	b.n	83088 <Cl_Alarm_GetAlarmStatus+0x54>
   83084:	2304      	movs	r3, #4
   83086:	73fb      	strb	r3, [r7, #15]
   83088:	7bfb      	ldrb	r3, [r7, #15]
   8308a:	2b00      	cmp	r3, #0
   8308c:	d001      	beq.n	83092 <Cl_Alarm_GetAlarmStatus+0x5e>
   8308e:	4b04      	ldr	r3, [pc, #16]	; (830a0 <Cl_Alarm_GetAlarmStatus+0x6c>)
   83090:	4798      	blx	r3
   83092:	7bfb      	ldrb	r3, [r7, #15]
   83094:	4618      	mov	r0, r3
   83096:	3710      	adds	r7, #16
   83098:	46bd      	mov	sp, r7
   8309a:	bd80      	pop	{r7, pc}
   8309c:	200728e0 	.word	0x200728e0
   830a0:	00088725 	.word	0x00088725

000830a4 <Cl_Alarm_TriggerAlarm>:
   830a4:	b580      	push	{r7, lr}
   830a6:	b084      	sub	sp, #16
   830a8:	af00      	add	r7, sp, #0
   830aa:	4603      	mov	r3, r0
   830ac:	460a      	mov	r2, r1
   830ae:	71fb      	strb	r3, [r7, #7]
   830b0:	4613      	mov	r3, r2
   830b2:	71bb      	strb	r3, [r7, #6]
   830b4:	2300      	movs	r3, #0
   830b6:	73fb      	strb	r3, [r7, #15]
   830b8:	79fb      	ldrb	r3, [r7, #7]
   830ba:	2b00      	cmp	r3, #0
   830bc:	d063      	beq.n	83186 <Cl_Alarm_TriggerAlarm+0xe2>
   830be:	79fb      	ldrb	r3, [r7, #7]
   830c0:	2b41      	cmp	r3, #65	; 0x41
   830c2:	d860      	bhi.n	83186 <Cl_Alarm_TriggerAlarm+0xe2>
   830c4:	79fb      	ldrb	r3, [r7, #7]
   830c6:	4a36      	ldr	r2, [pc, #216]	; (831a0 <Cl_Alarm_TriggerAlarm+0xfc>)
   830c8:	011b      	lsls	r3, r3, #4
   830ca:	4413      	add	r3, r2
   830cc:	330e      	adds	r3, #14
   830ce:	781b      	ldrb	r3, [r3, #0]
   830d0:	2b00      	cmp	r3, #0
   830d2:	d055      	beq.n	83180 <Cl_Alarm_TriggerAlarm+0xdc>
   830d4:	79bb      	ldrb	r3, [r7, #6]
   830d6:	2b00      	cmp	r3, #0
   830d8:	d039      	beq.n	8314e <Cl_Alarm_TriggerAlarm+0xaa>
   830da:	79fb      	ldrb	r3, [r7, #7]
   830dc:	4a30      	ldr	r2, [pc, #192]	; (831a0 <Cl_Alarm_TriggerAlarm+0xfc>)
   830de:	011b      	lsls	r3, r3, #4
   830e0:	4413      	add	r3, r2
   830e2:	3302      	adds	r3, #2
   830e4:	2201      	movs	r2, #1
   830e6:	701a      	strb	r2, [r3, #0]
   830e8:	4b2e      	ldr	r3, [pc, #184]	; (831a4 <Cl_Alarm_TriggerAlarm+0x100>)
   830ea:	781b      	ldrb	r3, [r3, #0]
   830ec:	79fa      	ldrb	r2, [r7, #7]
   830ee:	b291      	uxth	r1, r2
   830f0:	4a2c      	ldr	r2, [pc, #176]	; (831a4 <Cl_Alarm_TriggerAlarm+0x100>)
   830f2:	3301      	adds	r3, #1
   830f4:	00db      	lsls	r3, r3, #3
   830f6:	4413      	add	r3, r2
   830f8:	460a      	mov	r2, r1
   830fa:	809a      	strh	r2, [r3, #4]
   830fc:	79fb      	ldrb	r3, [r7, #7]
   830fe:	4928      	ldr	r1, [pc, #160]	; (831a0 <Cl_Alarm_TriggerAlarm+0xfc>)
   83100:	011a      	lsls	r2, r3, #4
   83102:	440a      	add	r2, r1
   83104:	320d      	adds	r2, #13
   83106:	7812      	ldrb	r2, [r2, #0]
   83108:	3201      	adds	r2, #1
   8310a:	b2d1      	uxtb	r1, r2
   8310c:	4a24      	ldr	r2, [pc, #144]	; (831a0 <Cl_Alarm_TriggerAlarm+0xfc>)
   8310e:	011b      	lsls	r3, r3, #4
   83110:	4413      	add	r3, r2
   83112:	330d      	adds	r3, #13
   83114:	460a      	mov	r2, r1
   83116:	701a      	strb	r2, [r3, #0]
   83118:	4b23      	ldr	r3, [pc, #140]	; (831a8 <Cl_Alarm_TriggerAlarm+0x104>)
   8311a:	2201      	movs	r2, #1
   8311c:	701a      	strb	r2, [r3, #0]
   8311e:	4a23      	ldr	r2, [pc, #140]	; (831ac <Cl_Alarm_TriggerAlarm+0x108>)
   83120:	79fb      	ldrb	r3, [r7, #7]
   83122:	7013      	strb	r3, [r2, #0]
   83124:	79fb      	ldrb	r3, [r7, #7]
   83126:	2b3c      	cmp	r3, #60	; 0x3c
   83128:	d107      	bne.n	8313a <Cl_Alarm_TriggerAlarm+0x96>
   8312a:	4b1e      	ldr	r3, [pc, #120]	; (831a4 <Cl_Alarm_TriggerAlarm+0x100>)
   8312c:	781b      	ldrb	r3, [r3, #0]
   8312e:	461a      	mov	r2, r3
   83130:	4b1c      	ldr	r3, [pc, #112]	; (831a4 <Cl_Alarm_TriggerAlarm+0x100>)
   83132:	4413      	add	r3, r2
   83134:	222d      	movs	r2, #45	; 0x2d
   83136:	709a      	strb	r2, [r3, #2]
   83138:	e006      	b.n	83148 <Cl_Alarm_TriggerAlarm+0xa4>
   8313a:	4b1a      	ldr	r3, [pc, #104]	; (831a4 <Cl_Alarm_TriggerAlarm+0x100>)
   8313c:	781b      	ldrb	r3, [r3, #0]
   8313e:	461a      	mov	r2, r3
   83140:	4b18      	ldr	r3, [pc, #96]	; (831a4 <Cl_Alarm_TriggerAlarm+0x100>)
   83142:	4413      	add	r3, r2
   83144:	222e      	movs	r2, #46	; 0x2e
   83146:	709a      	strb	r2, [r3, #2]
   83148:	4b19      	ldr	r3, [pc, #100]	; (831b0 <Cl_Alarm_TriggerAlarm+0x10c>)
   8314a:	4798      	blx	r3
   8314c:	e018      	b.n	83180 <Cl_Alarm_TriggerAlarm+0xdc>
   8314e:	79fb      	ldrb	r3, [r7, #7]
   83150:	4a13      	ldr	r2, [pc, #76]	; (831a0 <Cl_Alarm_TriggerAlarm+0xfc>)
   83152:	011b      	lsls	r3, r3, #4
   83154:	4413      	add	r3, r2
   83156:	3302      	adds	r3, #2
   83158:	781b      	ldrb	r3, [r3, #0]
   8315a:	2b01      	cmp	r3, #1
   8315c:	d110      	bne.n	83180 <Cl_Alarm_TriggerAlarm+0xdc>
   8315e:	79fb      	ldrb	r3, [r7, #7]
   83160:	4a0f      	ldr	r2, [pc, #60]	; (831a0 <Cl_Alarm_TriggerAlarm+0xfc>)
   83162:	011b      	lsls	r3, r3, #4
   83164:	4413      	add	r3, r2
   83166:	3302      	adds	r3, #2
   83168:	2204      	movs	r2, #4
   8316a:	701a      	strb	r2, [r3, #0]
   8316c:	79fb      	ldrb	r3, [r7, #7]
   8316e:	4a0c      	ldr	r2, [pc, #48]	; (831a0 <Cl_Alarm_TriggerAlarm+0xfc>)
   83170:	011b      	lsls	r3, r3, #4
   83172:	4413      	add	r3, r2
   83174:	330d      	adds	r3, #13
   83176:	2200      	movs	r2, #0
   83178:	701a      	strb	r2, [r3, #0]
   8317a:	4b0b      	ldr	r3, [pc, #44]	; (831a8 <Cl_Alarm_TriggerAlarm+0x104>)
   8317c:	2200      	movs	r2, #0
   8317e:	701a      	strb	r2, [r3, #0]
   83180:	2300      	movs	r3, #0
   83182:	73fb      	strb	r3, [r7, #15]
   83184:	e001      	b.n	8318a <Cl_Alarm_TriggerAlarm+0xe6>
   83186:	2304      	movs	r3, #4
   83188:	73fb      	strb	r3, [r7, #15]
   8318a:	7bfb      	ldrb	r3, [r7, #15]
   8318c:	2b00      	cmp	r3, #0
   8318e:	d001      	beq.n	83194 <Cl_Alarm_TriggerAlarm+0xf0>
   83190:	4b08      	ldr	r3, [pc, #32]	; (831b4 <Cl_Alarm_TriggerAlarm+0x110>)
   83192:	4798      	blx	r3
   83194:	2300      	movs	r3, #0
   83196:	4618      	mov	r0, r3
   83198:	3710      	adds	r7, #16
   8319a:	46bd      	mov	sp, r7
   8319c:	bd80      	pop	{r7, pc}
   8319e:	bf00      	nop
   831a0:	200728e0 	.word	0x200728e0
   831a4:	20072ec4 	.word	0x20072ec4
   831a8:	20071611 	.word	0x20071611
   831ac:	20072d04 	.word	0x20072d04
   831b0:	00082e69 	.word	0x00082e69
   831b4:	00088725 	.word	0x00088725

000831b8 <Cl_Alarm_timmer_50millisec>:
   831b8:	b480      	push	{r7}
   831ba:	b083      	sub	sp, #12
   831bc:	af00      	add	r7, sp, #0
   831be:	2300      	movs	r3, #0
   831c0:	71fb      	strb	r3, [r7, #7]
   831c2:	4b0f      	ldr	r3, [pc, #60]	; (83200 <Cl_Alarm_timmer_50millisec+0x48>)
   831c4:	881b      	ldrh	r3, [r3, #0]
   831c6:	3301      	adds	r3, #1
   831c8:	b29a      	uxth	r2, r3
   831ca:	4b0d      	ldr	r3, [pc, #52]	; (83200 <Cl_Alarm_timmer_50millisec+0x48>)
   831cc:	801a      	strh	r2, [r3, #0]
   831ce:	4b0d      	ldr	r3, [pc, #52]	; (83204 <Cl_Alarm_timmer_50millisec+0x4c>)
   831d0:	2200      	movs	r2, #0
   831d2:	601a      	str	r2, [r3, #0]
   831d4:	4b0c      	ldr	r3, [pc, #48]	; (83208 <Cl_Alarm_timmer_50millisec+0x50>)
   831d6:	681b      	ldr	r3, [r3, #0]
   831d8:	3301      	adds	r3, #1
   831da:	4a0b      	ldr	r2, [pc, #44]	; (83208 <Cl_Alarm_timmer_50millisec+0x50>)
   831dc:	6013      	str	r3, [r2, #0]
   831de:	4b08      	ldr	r3, [pc, #32]	; (83200 <Cl_Alarm_timmer_50millisec+0x48>)
   831e0:	881b      	ldrh	r3, [r3, #0]
   831e2:	2b14      	cmp	r3, #20
   831e4:	d905      	bls.n	831f2 <Cl_Alarm_timmer_50millisec+0x3a>
   831e6:	4b09      	ldr	r3, [pc, #36]	; (8320c <Cl_Alarm_timmer_50millisec+0x54>)
   831e8:	2200      	movs	r2, #0
   831ea:	601a      	str	r2, [r3, #0]
   831ec:	4b04      	ldr	r3, [pc, #16]	; (83200 <Cl_Alarm_timmer_50millisec+0x48>)
   831ee:	2200      	movs	r2, #0
   831f0:	801a      	strh	r2, [r3, #0]
   831f2:	2300      	movs	r3, #0
   831f4:	4618      	mov	r0, r3
   831f6:	370c      	adds	r7, #12
   831f8:	46bd      	mov	sp, r7
   831fa:	bc80      	pop	{r7}
   831fc:	4770      	bx	lr
   831fe:	bf00      	nop
   83200:	20071638 	.word	0x20071638
   83204:	20071608 	.word	0x20071608
   83208:	20071604 	.word	0x20071604
   8320c:	2007160c 	.word	0x2007160c

00083210 <cl_get_dac_conductivity_info>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms,Cl_MacEventQueue1
 */
  
Cl_ReturnCodeType cl_get_dac_conductivity_info(Cl_NewAlarmIdType* cl_dac_alarmID)
{
   83210:	b480      	push	{r7}
   83212:	b083      	sub	sp, #12
   83214:	af00      	add	r7, sp, #0
   83216:	6078      	str	r0, [r7, #4]
cl_ten_pt_dac_cond_avg = (9*cl_ten_pt_dac_cond_avg + cl_sys_statbuffer.cond_status_dac)/10;	
   83218:	4b3b      	ldr	r3, [pc, #236]	; (83308 <cl_get_dac_conductivity_info+0xf8>)
   8321a:	881b      	ldrh	r3, [r3, #0]
   8321c:	461a      	mov	r2, r3
   8321e:	4613      	mov	r3, r2
   83220:	00db      	lsls	r3, r3, #3
   83222:	4413      	add	r3, r2
   83224:	4a39      	ldr	r2, [pc, #228]	; (8330c <cl_get_dac_conductivity_info+0xfc>)
   83226:	8e52      	ldrh	r2, [r2, #50]	; 0x32
   83228:	4413      	add	r3, r2
   8322a:	4a39      	ldr	r2, [pc, #228]	; (83310 <cl_get_dac_conductivity_info+0x100>)
   8322c:	fb82 1203 	smull	r1, r2, r2, r3
   83230:	1092      	asrs	r2, r2, #2
   83232:	17db      	asrs	r3, r3, #31
   83234:	1ad3      	subs	r3, r2, r3
   83236:	b29a      	uxth	r2, r3
   83238:	4b33      	ldr	r3, [pc, #204]	; (83308 <cl_get_dac_conductivity_info+0xf8>)
   8323a:	801a      	strh	r2, [r3, #0]
switch(dac_cond_state)
   8323c:	4b35      	ldr	r3, [pc, #212]	; (83314 <cl_get_dac_conductivity_info+0x104>)
   8323e:	781b      	ldrb	r3, [r3, #0]
   83240:	2b03      	cmp	r3, #3
   83242:	d85b      	bhi.n	832fc <cl_get_dac_conductivity_info+0xec>
   83244:	a201      	add	r2, pc, #4	; (adr r2, 8324c <cl_get_dac_conductivity_info+0x3c>)
   83246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8324a:	bf00      	nop
   8324c:	0008325d 	.word	0x0008325d
   83250:	00083293 	.word	0x00083293
   83254:	0008325d 	.word	0x0008325d
   83258:	000832bf 	.word	0x000832bf
	{
		case CL_DAC_COND_STATE_NOSTATE:
		//break;
		case CL_DAC_COND_STATE_OPEN:

		if((cl_ten_pt_dac_cond_avg > 50) &&(cl_ten_pt_dac_cond_avg < 2000))
   8325c:	4b2a      	ldr	r3, [pc, #168]	; (83308 <cl_get_dac_conductivity_info+0xf8>)
   8325e:	881b      	ldrh	r3, [r3, #0]
   83260:	2b32      	cmp	r3, #50	; 0x32
   83262:	d90a      	bls.n	8327a <cl_get_dac_conductivity_info+0x6a>
   83264:	4b28      	ldr	r3, [pc, #160]	; (83308 <cl_get_dac_conductivity_info+0xf8>)
   83266:	881b      	ldrh	r3, [r3, #0]
   83268:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   8326c:	d205      	bcs.n	8327a <cl_get_dac_conductivity_info+0x6a>
		{
			*cl_dac_alarmID = COND_DAC_RO;
   8326e:	687b      	ldr	r3, [r7, #4]
   83270:	220a      	movs	r2, #10
   83272:	701a      	strb	r2, [r3, #0]
			dac_cond_state = CL_DAC_COND_STATE_RO;
   83274:	4b27      	ldr	r3, [pc, #156]	; (83314 <cl_get_dac_conductivity_info+0x104>)
   83276:	2201      	movs	r2, #1
   83278:	701a      	strb	r2, [r3, #0]
		}

		if(cl_ten_pt_dac_cond_avg > 2000)
   8327a:	4b23      	ldr	r3, [pc, #140]	; (83308 <cl_get_dac_conductivity_info+0xf8>)
   8327c:	881b      	ldrh	r3, [r3, #0]
   8327e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   83282:	d936      	bls.n	832f2 <cl_get_dac_conductivity_info+0xe2>
		{
			*cl_dac_alarmID = COND_DAC_HIGH;
   83284:	687b      	ldr	r3, [r7, #4]
   83286:	220b      	movs	r2, #11
   83288:	701a      	strb	r2, [r3, #0]
			dac_cond_state = CL_DAC_COND_STATE_HIGH;
   8328a:	4b22      	ldr	r3, [pc, #136]	; (83314 <cl_get_dac_conductivity_info+0x104>)
   8328c:	2203      	movs	r2, #3
   8328e:	701a      	strb	r2, [r3, #0]
		}
		break;
   83290:	e02f      	b.n	832f2 <cl_get_dac_conductivity_info+0xe2>
		
		case CL_DAC_COND_ALARM_RO:
				if(cl_ten_pt_dac_cond_avg > 2000)
   83292:	4b1d      	ldr	r3, [pc, #116]	; (83308 <cl_get_dac_conductivity_info+0xf8>)
   83294:	881b      	ldrh	r3, [r3, #0]
   83296:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   8329a:	d905      	bls.n	832a8 <cl_get_dac_conductivity_info+0x98>
				{
					*cl_dac_alarmID = COND_DAC_HIGH;
   8329c:	687b      	ldr	r3, [r7, #4]
   8329e:	220b      	movs	r2, #11
   832a0:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_HIGH;
   832a2:	4b1c      	ldr	r3, [pc, #112]	; (83314 <cl_get_dac_conductivity_info+0x104>)
   832a4:	2203      	movs	r2, #3
   832a6:	701a      	strb	r2, [r3, #0]
				}
				if(cl_ten_pt_dac_cond_avg < 50)
   832a8:	4b17      	ldr	r3, [pc, #92]	; (83308 <cl_get_dac_conductivity_info+0xf8>)
   832aa:	881b      	ldrh	r3, [r3, #0]
   832ac:	2b31      	cmp	r3, #49	; 0x31
   832ae:	d822      	bhi.n	832f6 <cl_get_dac_conductivity_info+0xe6>
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
   832b0:	687b      	ldr	r3, [r7, #4]
   832b2:	2209      	movs	r2, #9
   832b4:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_OPEN;					
   832b6:	4b17      	ldr	r3, [pc, #92]	; (83314 <cl_get_dac_conductivity_info+0x104>)
   832b8:	2202      	movs	r2, #2
   832ba:	701a      	strb	r2, [r3, #0]
				}
		break;
   832bc:	e01b      	b.n	832f6 <cl_get_dac_conductivity_info+0xe6>
		case CL_DAC_COND_STATE_HIGH:
		if((cl_ten_pt_dac_cond_avg > 50) &&(cl_ten_pt_dac_cond_avg < 2000))
   832be:	4b12      	ldr	r3, [pc, #72]	; (83308 <cl_get_dac_conductivity_info+0xf8>)
   832c0:	881b      	ldrh	r3, [r3, #0]
   832c2:	2b32      	cmp	r3, #50	; 0x32
   832c4:	d90a      	bls.n	832dc <cl_get_dac_conductivity_info+0xcc>
   832c6:	4b10      	ldr	r3, [pc, #64]	; (83308 <cl_get_dac_conductivity_info+0xf8>)
   832c8:	881b      	ldrh	r3, [r3, #0]
   832ca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   832ce:	d205      	bcs.n	832dc <cl_get_dac_conductivity_info+0xcc>
				{
					*cl_dac_alarmID = COND_DAC_RO;
   832d0:	687b      	ldr	r3, [r7, #4]
   832d2:	220a      	movs	r2, #10
   832d4:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_RO;
   832d6:	4b0f      	ldr	r3, [pc, #60]	; (83314 <cl_get_dac_conductivity_info+0x104>)
   832d8:	2201      	movs	r2, #1
   832da:	701a      	strb	r2, [r3, #0]
				}
		if(cl_ten_pt_dac_cond_avg < 50)
   832dc:	4b0a      	ldr	r3, [pc, #40]	; (83308 <cl_get_dac_conductivity_info+0xf8>)
   832de:	881b      	ldrh	r3, [r3, #0]
   832e0:	2b31      	cmp	r3, #49	; 0x31
   832e2:	d80a      	bhi.n	832fa <cl_get_dac_conductivity_info+0xea>
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
   832e4:	687b      	ldr	r3, [r7, #4]
   832e6:	2209      	movs	r2, #9
   832e8:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_OPEN;
   832ea:	4b0a      	ldr	r3, [pc, #40]	; (83314 <cl_get_dac_conductivity_info+0x104>)
   832ec:	2202      	movs	r2, #2
   832ee:	701a      	strb	r2, [r3, #0]
				}
		break;
   832f0:	e003      	b.n	832fa <cl_get_dac_conductivity_info+0xea>
		if(cl_ten_pt_dac_cond_avg > 2000)
		{
			*cl_dac_alarmID = COND_DAC_HIGH;
			dac_cond_state = CL_DAC_COND_STATE_HIGH;
		}
		break;
   832f2:	bf00      	nop
   832f4:	e002      	b.n	832fc <cl_get_dac_conductivity_info+0xec>
				if(cl_ten_pt_dac_cond_avg < 50)
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
					dac_cond_state = CL_DAC_COND_STATE_OPEN;					
				}
		break;
   832f6:	bf00      	nop
   832f8:	e000      	b.n	832fc <cl_get_dac_conductivity_info+0xec>
		if(cl_ten_pt_dac_cond_avg < 50)
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
					dac_cond_state = CL_DAC_COND_STATE_OPEN;
				}
		break;
   832fa:	bf00      	nop
	}
return CL_OK;
   832fc:	2300      	movs	r3, #0
}
   832fe:	4618      	mov	r0, r3
   83300:	370c      	adds	r7, #12
   83302:	46bd      	mov	sp, r7
   83304:	bc80      	pop	{r7}
   83306:	4770      	bx	lr
   83308:	2007163a 	.word	0x2007163a
   8330c:	20072e28 	.word	0x20072e28
   83310:	66666667 	.word	0x66666667
   83314:	2007163c 	.word	0x2007163c

00083318 <Cl_bc_controller>:
   83318:	b580      	push	{r7, lr}
   8331a:	b084      	sub	sp, #16
   8331c:	af00      	add	r7, sp, #0
   8331e:	4603      	mov	r3, r0
   83320:	71fb      	strb	r3, [r7, #7]
   83322:	2300      	movs	r3, #0
   83324:	73fb      	strb	r3, [r7, #15]
   83326:	79fb      	ldrb	r3, [r7, #7]
   83328:	3b04      	subs	r3, #4
   8332a:	2b0a      	cmp	r3, #10
   8332c:	d856      	bhi.n	833dc <Cl_bc_controller+0xc4>
   8332e:	a201      	add	r2, pc, #4	; (adr r2, 83334 <Cl_bc_controller+0x1c>)
   83330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83334:	00083361 	.word	0x00083361
   83338:	000833bf 	.word	0x000833bf
   8333c:	000833dd 	.word	0x000833dd
   83340:	000833dd 	.word	0x000833dd
   83344:	000833dd 	.word	0x000833dd
   83348:	000833dd 	.word	0x000833dd
   8334c:	000833dd 	.word	0x000833dd
   83350:	0008338f 	.word	0x0008338f
   83354:	000833dd 	.word	0x000833dd
   83358:	000833cd 	.word	0x000833cd
   8335c:	000833dd 	.word	0x000833dd
   83360:	2007      	movs	r0, #7
   83362:	4b82      	ldr	r3, [pc, #520]	; (8356c <Cl_bc_controller+0x254>)
   83364:	4798      	blx	r3
   83366:	4603      	mov	r3, r0
   83368:	73fb      	strb	r3, [r7, #15]
   8336a:	f240 414c 	movw	r1, #1100	; 0x44c
   8336e:	2002      	movs	r0, #2
   83370:	4b7f      	ldr	r3, [pc, #508]	; (83570 <Cl_bc_controller+0x258>)
   83372:	4798      	blx	r3
   83374:	f44f 7161 	mov.w	r1, #900	; 0x384
   83378:	2001      	movs	r0, #1
   8337a:	4b7d      	ldr	r3, [pc, #500]	; (83570 <Cl_bc_controller+0x258>)
   8337c:	4798      	blx	r3
   8337e:	4b7d      	ldr	r3, [pc, #500]	; (83574 <Cl_bc_controller+0x25c>)
   83380:	781a      	ldrb	r2, [r3, #0]
   83382:	4b7d      	ldr	r3, [pc, #500]	; (83578 <Cl_bc_controller+0x260>)
   83384:	701a      	strb	r2, [r3, #0]
   83386:	4b7b      	ldr	r3, [pc, #492]	; (83574 <Cl_bc_controller+0x25c>)
   83388:	2202      	movs	r2, #2
   8338a:	701a      	strb	r2, [r3, #0]
   8338c:	e026      	b.n	833dc <Cl_bc_controller+0xc4>
   8338e:	4b79      	ldr	r3, [pc, #484]	; (83574 <Cl_bc_controller+0x25c>)
   83390:	781b      	ldrb	r3, [r3, #0]
   83392:	2b00      	cmp	r3, #0
   83394:	d121      	bne.n	833da <Cl_bc_controller+0xc2>
   83396:	2007      	movs	r0, #7
   83398:	4b74      	ldr	r3, [pc, #464]	; (8356c <Cl_bc_controller+0x254>)
   8339a:	4798      	blx	r3
   8339c:	4603      	mov	r3, r0
   8339e:	73fb      	strb	r3, [r7, #15]
   833a0:	4b75      	ldr	r3, [pc, #468]	; (83578 <Cl_bc_controller+0x260>)
   833a2:	781b      	ldrb	r3, [r3, #0]
   833a4:	461a      	mov	r2, r3
   833a6:	4b75      	ldr	r3, [pc, #468]	; (8357c <Cl_bc_controller+0x264>)
   833a8:	5c9b      	ldrb	r3, [r3, r2]
   833aa:	4618      	mov	r0, r3
   833ac:	4b6f      	ldr	r3, [pc, #444]	; (8356c <Cl_bc_controller+0x254>)
   833ae:	4798      	blx	r3
   833b0:	4603      	mov	r3, r0
   833b2:	73fb      	strb	r3, [r7, #15]
   833b4:	4b70      	ldr	r3, [pc, #448]	; (83578 <Cl_bc_controller+0x260>)
   833b6:	781a      	ldrb	r2, [r3, #0]
   833b8:	4b6e      	ldr	r3, [pc, #440]	; (83574 <Cl_bc_controller+0x25c>)
   833ba:	701a      	strb	r2, [r3, #0]
   833bc:	e00d      	b.n	833da <Cl_bc_controller+0xc2>
   833be:	2011      	movs	r0, #17
   833c0:	4b6a      	ldr	r3, [pc, #424]	; (8356c <Cl_bc_controller+0x254>)
   833c2:	4798      	blx	r3
   833c4:	4b6b      	ldr	r3, [pc, #428]	; (83574 <Cl_bc_controller+0x25c>)
   833c6:	2200      	movs	r2, #0
   833c8:	701a      	strb	r2, [r3, #0]
   833ca:	e007      	b.n	833dc <Cl_bc_controller+0xc4>
   833cc:	4b6c      	ldr	r3, [pc, #432]	; (83580 <Cl_bc_controller+0x268>)
   833ce:	2200      	movs	r2, #0
   833d0:	801a      	strh	r2, [r3, #0]
   833d2:	4b68      	ldr	r3, [pc, #416]	; (83574 <Cl_bc_controller+0x25c>)
   833d4:	2200      	movs	r2, #0
   833d6:	701a      	strb	r2, [r3, #0]
   833d8:	e000      	b.n	833dc <Cl_bc_controller+0xc4>
   833da:	bf00      	nop
   833dc:	4b65      	ldr	r3, [pc, #404]	; (83574 <Cl_bc_controller+0x25c>)
   833de:	781b      	ldrb	r3, [r3, #0]
   833e0:	2b15      	cmp	r3, #21
   833e2:	f200 85b1 	bhi.w	83f48 <Cl_bc_controller+0xc30>
   833e6:	a201      	add	r2, pc, #4	; (adr r2, 833ec <Cl_bc_controller+0xd4>)
   833e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   833ec:	00083f49 	.word	0x00083f49
   833f0:	00083f49 	.word	0x00083f49
   833f4:	00083445 	.word	0x00083445
   833f8:	000834ff 	.word	0x000834ff
   833fc:	00083725 	.word	0x00083725
   83400:	00083759 	.word	0x00083759
   83404:	00083775 	.word	0x00083775
   83408:	000837a9 	.word	0x000837a9
   8340c:	000837c5 	.word	0x000837c5
   83410:	000837eb 	.word	0x000837eb
   83414:	00083807 	.word	0x00083807
   83418:	000838a1 	.word	0x000838a1
   8341c:	000838bd 	.word	0x000838bd
   83420:	0008391f 	.word	0x0008391f
   83424:	00083bbd 	.word	0x00083bbd
   83428:	00083c1f 	.word	0x00083c1f
   8342c:	00083ec1 	.word	0x00083ec1
   83430:	00083f49 	.word	0x00083f49
   83434:	00083f05 	.word	0x00083f05
   83438:	00083f49 	.word	0x00083f49
   8343c:	00083f49 	.word	0x00083f49
   83440:	00083f49 	.word	0x00083f49
   83444:	79fb      	ldrb	r3, [r7, #7]
   83446:	3b01      	subs	r3, #1
   83448:	2b07      	cmp	r3, #7
   8344a:	d84c      	bhi.n	834e6 <Cl_bc_controller+0x1ce>
   8344c:	a201      	add	r2, pc, #4	; (adr r2, 83454 <Cl_bc_controller+0x13c>)
   8344e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83452:	bf00      	nop
   83454:	00083475 	.word	0x00083475
   83458:	0008347d 	.word	0x0008347d
   8345c:	000834e7 	.word	0x000834e7
   83460:	000834e7 	.word	0x000834e7
   83464:	000834e7 	.word	0x000834e7
   83468:	0008349b 	.word	0x0008349b
   8346c:	000834e7 	.word	0x000834e7
   83470:	000834c1 	.word	0x000834c1
   83474:	4b43      	ldr	r3, [pc, #268]	; (83584 <Cl_bc_controller+0x26c>)
   83476:	2201      	movs	r2, #1
   83478:	701a      	strb	r2, [r3, #0]
   8347a:	e03e      	b.n	834fa <Cl_bc_controller+0x1e2>
   8347c:	4b41      	ldr	r3, [pc, #260]	; (83584 <Cl_bc_controller+0x26c>)
   8347e:	781b      	ldrb	r3, [r3, #0]
   83480:	2b00      	cmp	r3, #0
   83482:	d033      	beq.n	834ec <Cl_bc_controller+0x1d4>
   83484:	4b3b      	ldr	r3, [pc, #236]	; (83574 <Cl_bc_controller+0x25c>)
   83486:	781a      	ldrb	r2, [r3, #0]
   83488:	4b3b      	ldr	r3, [pc, #236]	; (83578 <Cl_bc_controller+0x260>)
   8348a:	701a      	strb	r2, [r3, #0]
   8348c:	4b39      	ldr	r3, [pc, #228]	; (83574 <Cl_bc_controller+0x25c>)
   8348e:	2203      	movs	r2, #3
   83490:	701a      	strb	r2, [r3, #0]
   83492:	4b3c      	ldr	r3, [pc, #240]	; (83584 <Cl_bc_controller+0x26c>)
   83494:	2200      	movs	r2, #0
   83496:	701a      	strb	r2, [r3, #0]
   83498:	e028      	b.n	834ec <Cl_bc_controller+0x1d4>
   8349a:	4b39      	ldr	r3, [pc, #228]	; (83580 <Cl_bc_controller+0x268>)
   8349c:	2200      	movs	r2, #0
   8349e:	801a      	strh	r2, [r3, #0]
   834a0:	2005      	movs	r0, #5
   834a2:	4b32      	ldr	r3, [pc, #200]	; (8356c <Cl_bc_controller+0x254>)
   834a4:	4798      	blx	r3
   834a6:	4603      	mov	r3, r0
   834a8:	73fb      	strb	r3, [r7, #15]
   834aa:	7bfb      	ldrb	r3, [r7, #15]
   834ac:	2b00      	cmp	r3, #0
   834ae:	d120      	bne.n	834f2 <Cl_bc_controller+0x1da>
   834b0:	4b30      	ldr	r3, [pc, #192]	; (83574 <Cl_bc_controller+0x25c>)
   834b2:	781a      	ldrb	r2, [r3, #0]
   834b4:	4b30      	ldr	r3, [pc, #192]	; (83578 <Cl_bc_controller+0x260>)
   834b6:	701a      	strb	r2, [r3, #0]
   834b8:	4b2e      	ldr	r3, [pc, #184]	; (83574 <Cl_bc_controller+0x25c>)
   834ba:	2210      	movs	r2, #16
   834bc:	701a      	strb	r2, [r3, #0]
   834be:	e018      	b.n	834f2 <Cl_bc_controller+0x1da>
   834c0:	4b2f      	ldr	r3, [pc, #188]	; (83580 <Cl_bc_controller+0x268>)
   834c2:	2200      	movs	r2, #0
   834c4:	801a      	strh	r2, [r3, #0]
   834c6:	2006      	movs	r0, #6
   834c8:	4b28      	ldr	r3, [pc, #160]	; (8356c <Cl_bc_controller+0x254>)
   834ca:	4798      	blx	r3
   834cc:	4603      	mov	r3, r0
   834ce:	73fb      	strb	r3, [r7, #15]
   834d0:	7bfb      	ldrb	r3, [r7, #15]
   834d2:	2b00      	cmp	r3, #0
   834d4:	d110      	bne.n	834f8 <Cl_bc_controller+0x1e0>
   834d6:	4b27      	ldr	r3, [pc, #156]	; (83574 <Cl_bc_controller+0x25c>)
   834d8:	781a      	ldrb	r2, [r3, #0]
   834da:	4b27      	ldr	r3, [pc, #156]	; (83578 <Cl_bc_controller+0x260>)
   834dc:	701a      	strb	r2, [r3, #0]
   834de:	4b25      	ldr	r3, [pc, #148]	; (83574 <Cl_bc_controller+0x25c>)
   834e0:	2212      	movs	r2, #18
   834e2:	701a      	strb	r2, [r3, #0]
   834e4:	e008      	b.n	834f8 <Cl_bc_controller+0x1e0>
   834e6:	bf00      	nop
   834e8:	f000 bd2f 	b.w	83f4a <Cl_bc_controller+0xc32>
   834ec:	bf00      	nop
   834ee:	f000 bd2c 	b.w	83f4a <Cl_bc_controller+0xc32>
   834f2:	bf00      	nop
   834f4:	f000 bd29 	b.w	83f4a <Cl_bc_controller+0xc32>
   834f8:	bf00      	nop
   834fa:	f000 bd26 	b.w	83f4a <Cl_bc_controller+0xc32>
   834fe:	79fb      	ldrb	r3, [r7, #7]
   83500:	3b01      	subs	r3, #1
   83502:	2b07      	cmp	r3, #7
   83504:	f200 8102 	bhi.w	8370c <Cl_bc_controller+0x3f4>
   83508:	a201      	add	r2, pc, #4	; (adr r2, 83510 <Cl_bc_controller+0x1f8>)
   8350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8350e:	bf00      	nop
   83510:	0008370d 	.word	0x0008370d
   83514:	00083531 	.word	0x00083531
   83518:	0008370d 	.word	0x0008370d
   8351c:	0008370d 	.word	0x0008370d
   83520:	0008370d 	.word	0x0008370d
   83524:	000836c1 	.word	0x000836c1
   83528:	0008370d 	.word	0x0008370d
   8352c:	000836e7 	.word	0x000836e7
   83530:	4b13      	ldr	r3, [pc, #76]	; (83580 <Cl_bc_controller+0x268>)
   83532:	f9b3 3000 	ldrsh.w	r3, [r3]
   83536:	b29a      	uxth	r2, r3
   83538:	3201      	adds	r2, #1
   8353a:	b292      	uxth	r2, r2
   8353c:	b211      	sxth	r1, r2
   8353e:	4a10      	ldr	r2, [pc, #64]	; (83580 <Cl_bc_controller+0x268>)
   83540:	8011      	strh	r1, [r2, #0]
   83542:	2bb4      	cmp	r3, #180	; 0xb4
   83544:	f340 80e5 	ble.w	83712 <Cl_bc_controller+0x3fa>
   83548:	4b0f      	ldr	r3, [pc, #60]	; (83588 <Cl_bc_controller+0x270>)
   8354a:	781b      	ldrb	r3, [r3, #0]
   8354c:	2b01      	cmp	r3, #1
   8354e:	d11d      	bne.n	8358c <Cl_bc_controller+0x274>
   83550:	4b0b      	ldr	r3, [pc, #44]	; (83580 <Cl_bc_controller+0x268>)
   83552:	2200      	movs	r2, #0
   83554:	801a      	strh	r2, [r3, #0]
   83556:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   8355a:	2002      	movs	r0, #2
   8355c:	4b04      	ldr	r3, [pc, #16]	; (83570 <Cl_bc_controller+0x258>)
   8355e:	4798      	blx	r3
   83560:	f44f 71c8 	mov.w	r1, #400	; 0x190
   83564:	2001      	movs	r0, #1
   83566:	4b02      	ldr	r3, [pc, #8]	; (83570 <Cl_bc_controller+0x258>)
   83568:	4798      	blx	r3
   8356a:	e07d      	b.n	83668 <Cl_bc_controller+0x350>
   8356c:	00097b9d 	.word	0x00097b9d
   83570:	00097a25 	.word	0x00097a25
   83574:	2007163d 	.word	0x2007163d
   83578:	2007163e 	.word	0x2007163e
   8357c:	20070104 	.word	0x20070104
   83580:	20071642 	.word	0x20071642
   83584:	2007163f 	.word	0x2007163f
   83588:	200727e6 	.word	0x200727e6
   8358c:	4ba3      	ldr	r3, [pc, #652]	; (8381c <Cl_bc_controller+0x504>)
   8358e:	4798      	blx	r3
   83590:	4ba3      	ldr	r3, [pc, #652]	; (83820 <Cl_bc_controller+0x508>)
   83592:	4798      	blx	r3
   83594:	4ba3      	ldr	r3, [pc, #652]	; (83824 <Cl_bc_controller+0x50c>)
   83596:	2200      	movs	r2, #0
   83598:	801a      	strh	r2, [r3, #0]
   8359a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8359e:	2002      	movs	r0, #2
   835a0:	4ba1      	ldr	r3, [pc, #644]	; (83828 <Cl_bc_controller+0x510>)
   835a2:	4798      	blx	r3
   835a4:	f240 414c 	movw	r1, #1100	; 0x44c
   835a8:	2001      	movs	r0, #1
   835aa:	4b9f      	ldr	r3, [pc, #636]	; (83828 <Cl_bc_controller+0x510>)
   835ac:	4798      	blx	r3
   835ae:	4b9f      	ldr	r3, [pc, #636]	; (8382c <Cl_bc_controller+0x514>)
   835b0:	2244      	movs	r2, #68	; 0x44
   835b2:	801a      	strh	r2, [r3, #0]
   835b4:	4b9d      	ldr	r3, [pc, #628]	; (8382c <Cl_bc_controller+0x514>)
   835b6:	881b      	ldrh	r3, [r3, #0]
   835b8:	4618      	mov	r0, r3
   835ba:	4b9d      	ldr	r3, [pc, #628]	; (83830 <Cl_bc_controller+0x518>)
   835bc:	4798      	blx	r3
   835be:	4b9d      	ldr	r3, [pc, #628]	; (83834 <Cl_bc_controller+0x51c>)
   835c0:	781b      	ldrb	r3, [r3, #0]
   835c2:	2b01      	cmp	r3, #1
   835c4:	d150      	bne.n	83668 <Cl_bc_controller+0x350>
   835c6:	f44f 7116 	mov.w	r1, #600	; 0x258
   835ca:	2002      	movs	r0, #2
   835cc:	4b96      	ldr	r3, [pc, #600]	; (83828 <Cl_bc_controller+0x510>)
   835ce:	4798      	blx	r3
   835d0:	f240 414c 	movw	r1, #1100	; 0x44c
   835d4:	2001      	movs	r0, #1
   835d6:	4b94      	ldr	r3, [pc, #592]	; (83828 <Cl_bc_controller+0x510>)
   835d8:	4798      	blx	r3
   835da:	4b97      	ldr	r3, [pc, #604]	; (83838 <Cl_bc_controller+0x520>)
   835dc:	4798      	blx	r3
   835de:	4b93      	ldr	r3, [pc, #588]	; (8382c <Cl_bc_controller+0x514>)
   835e0:	2251      	movs	r2, #81	; 0x51
   835e2:	801a      	strh	r2, [r3, #0]
   835e4:	4b91      	ldr	r3, [pc, #580]	; (8382c <Cl_bc_controller+0x514>)
   835e6:	881b      	ldrh	r3, [r3, #0]
   835e8:	4618      	mov	r0, r3
   835ea:	4b91      	ldr	r3, [pc, #580]	; (83830 <Cl_bc_controller+0x518>)
   835ec:	4798      	blx	r3
   835ee:	4b93      	ldr	r3, [pc, #588]	; (8383c <Cl_bc_controller+0x524>)
   835f0:	4798      	blx	r3
   835f2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   835f6:	4b92      	ldr	r3, [pc, #584]	; (83840 <Cl_bc_controller+0x528>)
   835f8:	4798      	blx	r3
   835fa:	2001      	movs	r0, #1
   835fc:	4b91      	ldr	r3, [pc, #580]	; (83844 <Cl_bc_controller+0x52c>)
   835fe:	4798      	blx	r3
   83600:	4991      	ldr	r1, [pc, #580]	; (83848 <Cl_bc_controller+0x530>)
   83602:	2005      	movs	r0, #5
   83604:	4b91      	ldr	r3, [pc, #580]	; (8384c <Cl_bc_controller+0x534>)
   83606:	4798      	blx	r3
   83608:	2002      	movs	r0, #2
   8360a:	4b91      	ldr	r3, [pc, #580]	; (83850 <Cl_bc_controller+0x538>)
   8360c:	4798      	blx	r3
   8360e:	2003      	movs	r0, #3
   83610:	4b8f      	ldr	r3, [pc, #572]	; (83850 <Cl_bc_controller+0x538>)
   83612:	4798      	blx	r3
   83614:	4b8f      	ldr	r3, [pc, #572]	; (83854 <Cl_bc_controller+0x53c>)
   83616:	4798      	blx	r3
   83618:	2100      	movs	r1, #0
   8361a:	2002      	movs	r0, #2
   8361c:	4b8e      	ldr	r3, [pc, #568]	; (83858 <Cl_bc_controller+0x540>)
   8361e:	4798      	blx	r3
   83620:	4b8e      	ldr	r3, [pc, #568]	; (8385c <Cl_bc_controller+0x544>)
   83622:	4798      	blx	r3
   83624:	2064      	movs	r0, #100	; 0x64
   83626:	4b8e      	ldr	r3, [pc, #568]	; (83860 <Cl_bc_controller+0x548>)
   83628:	4798      	blx	r3
   8362a:	f242 3128 	movw	r1, #9000	; 0x2328
   8362e:	2001      	movs	r0, #1
   83630:	4b89      	ldr	r3, [pc, #548]	; (83858 <Cl_bc_controller+0x540>)
   83632:	4798      	blx	r3
   83634:	20c8      	movs	r0, #200	; 0xc8
   83636:	4b8a      	ldr	r3, [pc, #552]	; (83860 <Cl_bc_controller+0x548>)
   83638:	4798      	blx	r3
   8363a:	f241 3188 	movw	r1, #5000	; 0x1388
   8363e:	2001      	movs	r0, #1
   83640:	4b85      	ldr	r3, [pc, #532]	; (83858 <Cl_bc_controller+0x540>)
   83642:	4798      	blx	r3
   83644:	f44f 7016 	mov.w	r0, #600	; 0x258
   83648:	4b85      	ldr	r3, [pc, #532]	; (83860 <Cl_bc_controller+0x548>)
   8364a:	4798      	blx	r3
   8364c:	f640 31b8 	movw	r1, #3000	; 0xbb8
   83650:	2001      	movs	r0, #1
   83652:	4b81      	ldr	r3, [pc, #516]	; (83858 <Cl_bc_controller+0x540>)
   83654:	4798      	blx	r3
   83656:	f44f 7048 	mov.w	r0, #800	; 0x320
   8365a:	4b81      	ldr	r3, [pc, #516]	; (83860 <Cl_bc_controller+0x548>)
   8365c:	4798      	blx	r3
   8365e:	f640 11c4 	movw	r1, #2500	; 0x9c4
   83662:	2001      	movs	r0, #1
   83664:	4b7c      	ldr	r3, [pc, #496]	; (83858 <Cl_bc_controller+0x540>)
   83666:	4798      	blx	r3
   83668:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8366c:	2002      	movs	r0, #2
   8366e:	4b6e      	ldr	r3, [pc, #440]	; (83828 <Cl_bc_controller+0x510>)
   83670:	4798      	blx	r3
   83672:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   83676:	2001      	movs	r0, #1
   83678:	4b6b      	ldr	r3, [pc, #428]	; (83828 <Cl_bc_controller+0x510>)
   8367a:	4798      	blx	r3
   8367c:	2005      	movs	r0, #5
   8367e:	4b79      	ldr	r3, [pc, #484]	; (83864 <Cl_bc_controller+0x54c>)
   83680:	4798      	blx	r3
   83682:	4603      	mov	r3, r0
   83684:	73fb      	strb	r3, [r7, #15]
   83686:	2013      	movs	r0, #19
   83688:	4b77      	ldr	r3, [pc, #476]	; (83868 <Cl_bc_controller+0x550>)
   8368a:	4798      	blx	r3
   8368c:	4603      	mov	r3, r0
   8368e:	73fb      	strb	r3, [r7, #15]
   83690:	2051      	movs	r0, #81	; 0x51
   83692:	4b76      	ldr	r3, [pc, #472]	; (8386c <Cl_bc_controller+0x554>)
   83694:	4798      	blx	r3
   83696:	4603      	mov	r3, r0
   83698:	73fb      	strb	r3, [r7, #15]
   8369a:	7bfb      	ldrb	r3, [r7, #15]
   8369c:	2b00      	cmp	r3, #0
   8369e:	d138      	bne.n	83712 <Cl_bc_controller+0x3fa>
   836a0:	2101      	movs	r1, #1
   836a2:	201a      	movs	r0, #26
   836a4:	4b72      	ldr	r3, [pc, #456]	; (83870 <Cl_bc_controller+0x558>)
   836a6:	4798      	blx	r3
   836a8:	4b72      	ldr	r3, [pc, #456]	; (83874 <Cl_bc_controller+0x55c>)
   836aa:	781a      	ldrb	r2, [r3, #0]
   836ac:	4b72      	ldr	r3, [pc, #456]	; (83878 <Cl_bc_controller+0x560>)
   836ae:	701a      	strb	r2, [r3, #0]
   836b0:	4b70      	ldr	r3, [pc, #448]	; (83874 <Cl_bc_controller+0x55c>)
   836b2:	220c      	movs	r2, #12
   836b4:	701a      	strb	r2, [r3, #0]
   836b6:	4b6f      	ldr	r3, [pc, #444]	; (83874 <Cl_bc_controller+0x55c>)
   836b8:	781a      	ldrb	r2, [r3, #0]
   836ba:	4b6f      	ldr	r3, [pc, #444]	; (83878 <Cl_bc_controller+0x560>)
   836bc:	701a      	strb	r2, [r3, #0]
   836be:	e028      	b.n	83712 <Cl_bc_controller+0x3fa>
   836c0:	4b58      	ldr	r3, [pc, #352]	; (83824 <Cl_bc_controller+0x50c>)
   836c2:	2200      	movs	r2, #0
   836c4:	801a      	strh	r2, [r3, #0]
   836c6:	2005      	movs	r0, #5
   836c8:	4b66      	ldr	r3, [pc, #408]	; (83864 <Cl_bc_controller+0x54c>)
   836ca:	4798      	blx	r3
   836cc:	4603      	mov	r3, r0
   836ce:	73fb      	strb	r3, [r7, #15]
   836d0:	7bfb      	ldrb	r3, [r7, #15]
   836d2:	2b00      	cmp	r3, #0
   836d4:	d120      	bne.n	83718 <Cl_bc_controller+0x400>
   836d6:	4b67      	ldr	r3, [pc, #412]	; (83874 <Cl_bc_controller+0x55c>)
   836d8:	781a      	ldrb	r2, [r3, #0]
   836da:	4b67      	ldr	r3, [pc, #412]	; (83878 <Cl_bc_controller+0x560>)
   836dc:	701a      	strb	r2, [r3, #0]
   836de:	4b65      	ldr	r3, [pc, #404]	; (83874 <Cl_bc_controller+0x55c>)
   836e0:	2210      	movs	r2, #16
   836e2:	701a      	strb	r2, [r3, #0]
   836e4:	e018      	b.n	83718 <Cl_bc_controller+0x400>
   836e6:	4b4f      	ldr	r3, [pc, #316]	; (83824 <Cl_bc_controller+0x50c>)
   836e8:	2200      	movs	r2, #0
   836ea:	801a      	strh	r2, [r3, #0]
   836ec:	2006      	movs	r0, #6
   836ee:	4b5d      	ldr	r3, [pc, #372]	; (83864 <Cl_bc_controller+0x54c>)
   836f0:	4798      	blx	r3
   836f2:	4603      	mov	r3, r0
   836f4:	73fb      	strb	r3, [r7, #15]
   836f6:	7bfb      	ldrb	r3, [r7, #15]
   836f8:	2b00      	cmp	r3, #0
   836fa:	d110      	bne.n	8371e <Cl_bc_controller+0x406>
   836fc:	4b5d      	ldr	r3, [pc, #372]	; (83874 <Cl_bc_controller+0x55c>)
   836fe:	781a      	ldrb	r2, [r3, #0]
   83700:	4b5d      	ldr	r3, [pc, #372]	; (83878 <Cl_bc_controller+0x560>)
   83702:	701a      	strb	r2, [r3, #0]
   83704:	4b5b      	ldr	r3, [pc, #364]	; (83874 <Cl_bc_controller+0x55c>)
   83706:	2212      	movs	r2, #18
   83708:	701a      	strb	r2, [r3, #0]
   8370a:	e008      	b.n	8371e <Cl_bc_controller+0x406>
   8370c:	bf00      	nop
   8370e:	f000 bc1c 	b.w	83f4a <Cl_bc_controller+0xc32>
   83712:	bf00      	nop
   83714:	f000 bc19 	b.w	83f4a <Cl_bc_controller+0xc32>
   83718:	bf00      	nop
   8371a:	f000 bc16 	b.w	83f4a <Cl_bc_controller+0xc32>
   8371e:	bf00      	nop
   83720:	f000 bc13 	b.w	83f4a <Cl_bc_controller+0xc32>
   83724:	79fb      	ldrb	r3, [r7, #7]
   83726:	2b01      	cmp	r3, #1
   83728:	d002      	beq.n	83730 <Cl_bc_controller+0x418>
   8372a:	2b02      	cmp	r3, #2
   8372c:	d004      	beq.n	83738 <Cl_bc_controller+0x420>
   8372e:	e012      	b.n	83756 <Cl_bc_controller+0x43e>
   83730:	4b52      	ldr	r3, [pc, #328]	; (8387c <Cl_bc_controller+0x564>)
   83732:	2201      	movs	r2, #1
   83734:	701a      	strb	r2, [r3, #0]
   83736:	e00e      	b.n	83756 <Cl_bc_controller+0x43e>
   83738:	4b50      	ldr	r3, [pc, #320]	; (8387c <Cl_bc_controller+0x564>)
   8373a:	781b      	ldrb	r3, [r3, #0]
   8373c:	2b00      	cmp	r3, #0
   8373e:	d009      	beq.n	83754 <Cl_bc_controller+0x43c>
   83740:	4b4c      	ldr	r3, [pc, #304]	; (83874 <Cl_bc_controller+0x55c>)
   83742:	781a      	ldrb	r2, [r3, #0]
   83744:	4b4c      	ldr	r3, [pc, #304]	; (83878 <Cl_bc_controller+0x560>)
   83746:	701a      	strb	r2, [r3, #0]
   83748:	4b4a      	ldr	r3, [pc, #296]	; (83874 <Cl_bc_controller+0x55c>)
   8374a:	2205      	movs	r2, #5
   8374c:	701a      	strb	r2, [r3, #0]
   8374e:	4b4b      	ldr	r3, [pc, #300]	; (8387c <Cl_bc_controller+0x564>)
   83750:	2200      	movs	r2, #0
   83752:	701a      	strb	r2, [r3, #0]
   83754:	bf00      	nop
   83756:	e3f8      	b.n	83f4a <Cl_bc_controller+0xc32>
   83758:	79fb      	ldrb	r3, [r7, #7]
   8375a:	2b02      	cmp	r3, #2
   8375c:	d004      	beq.n	83768 <Cl_bc_controller+0x450>
   8375e:	2b03      	cmp	r3, #3
   83760:	d004      	beq.n	8376c <Cl_bc_controller+0x454>
   83762:	2b01      	cmp	r3, #1
   83764:	d004      	beq.n	83770 <Cl_bc_controller+0x458>
   83766:	e004      	b.n	83772 <Cl_bc_controller+0x45a>
   83768:	bf00      	nop
   8376a:	e3ee      	b.n	83f4a <Cl_bc_controller+0xc32>
   8376c:	bf00      	nop
   8376e:	e3ec      	b.n	83f4a <Cl_bc_controller+0xc32>
   83770:	bf00      	nop
   83772:	e3ea      	b.n	83f4a <Cl_bc_controller+0xc32>
   83774:	79fb      	ldrb	r3, [r7, #7]
   83776:	2b01      	cmp	r3, #1
   83778:	d002      	beq.n	83780 <Cl_bc_controller+0x468>
   8377a:	2b02      	cmp	r3, #2
   8377c:	d004      	beq.n	83788 <Cl_bc_controller+0x470>
   8377e:	e012      	b.n	837a6 <Cl_bc_controller+0x48e>
   83780:	4b3e      	ldr	r3, [pc, #248]	; (8387c <Cl_bc_controller+0x564>)
   83782:	2201      	movs	r2, #1
   83784:	701a      	strb	r2, [r3, #0]
   83786:	e00e      	b.n	837a6 <Cl_bc_controller+0x48e>
   83788:	4b3c      	ldr	r3, [pc, #240]	; (8387c <Cl_bc_controller+0x564>)
   8378a:	781b      	ldrb	r3, [r3, #0]
   8378c:	2b00      	cmp	r3, #0
   8378e:	d009      	beq.n	837a4 <Cl_bc_controller+0x48c>
   83790:	4b38      	ldr	r3, [pc, #224]	; (83874 <Cl_bc_controller+0x55c>)
   83792:	781a      	ldrb	r2, [r3, #0]
   83794:	4b38      	ldr	r3, [pc, #224]	; (83878 <Cl_bc_controller+0x560>)
   83796:	701a      	strb	r2, [r3, #0]
   83798:	4b36      	ldr	r3, [pc, #216]	; (83874 <Cl_bc_controller+0x55c>)
   8379a:	2207      	movs	r2, #7
   8379c:	701a      	strb	r2, [r3, #0]
   8379e:	4b37      	ldr	r3, [pc, #220]	; (8387c <Cl_bc_controller+0x564>)
   837a0:	2200      	movs	r2, #0
   837a2:	701a      	strb	r2, [r3, #0]
   837a4:	bf00      	nop
   837a6:	e3d0      	b.n	83f4a <Cl_bc_controller+0xc32>
   837a8:	79fb      	ldrb	r3, [r7, #7]
   837aa:	2b02      	cmp	r3, #2
   837ac:	d004      	beq.n	837b8 <Cl_bc_controller+0x4a0>
   837ae:	2b03      	cmp	r3, #3
   837b0:	d004      	beq.n	837bc <Cl_bc_controller+0x4a4>
   837b2:	2b01      	cmp	r3, #1
   837b4:	d004      	beq.n	837c0 <Cl_bc_controller+0x4a8>
   837b6:	e004      	b.n	837c2 <Cl_bc_controller+0x4aa>
   837b8:	bf00      	nop
   837ba:	e3c6      	b.n	83f4a <Cl_bc_controller+0xc32>
   837bc:	bf00      	nop
   837be:	e3c4      	b.n	83f4a <Cl_bc_controller+0xc32>
   837c0:	bf00      	nop
   837c2:	e3c2      	b.n	83f4a <Cl_bc_controller+0xc32>
   837c4:	79fb      	ldrb	r3, [r7, #7]
   837c6:	2b01      	cmp	r3, #1
   837c8:	d002      	beq.n	837d0 <Cl_bc_controller+0x4b8>
   837ca:	2b02      	cmp	r3, #2
   837cc:	d00b      	beq.n	837e6 <Cl_bc_controller+0x4ce>
   837ce:	e00b      	b.n	837e8 <Cl_bc_controller+0x4d0>
   837d0:	4b28      	ldr	r3, [pc, #160]	; (83874 <Cl_bc_controller+0x55c>)
   837d2:	781a      	ldrb	r2, [r3, #0]
   837d4:	4b28      	ldr	r3, [pc, #160]	; (83878 <Cl_bc_controller+0x560>)
   837d6:	701a      	strb	r2, [r3, #0]
   837d8:	4b26      	ldr	r3, [pc, #152]	; (83874 <Cl_bc_controller+0x55c>)
   837da:	2209      	movs	r2, #9
   837dc:	701a      	strb	r2, [r3, #0]
   837de:	4b27      	ldr	r3, [pc, #156]	; (8387c <Cl_bc_controller+0x564>)
   837e0:	2200      	movs	r2, #0
   837e2:	701a      	strb	r2, [r3, #0]
   837e4:	e000      	b.n	837e8 <Cl_bc_controller+0x4d0>
   837e6:	bf00      	nop
   837e8:	e3af      	b.n	83f4a <Cl_bc_controller+0xc32>
   837ea:	79fb      	ldrb	r3, [r7, #7]
   837ec:	2b02      	cmp	r3, #2
   837ee:	d004      	beq.n	837fa <Cl_bc_controller+0x4e2>
   837f0:	2b03      	cmp	r3, #3
   837f2:	d004      	beq.n	837fe <Cl_bc_controller+0x4e6>
   837f4:	2b01      	cmp	r3, #1
   837f6:	d004      	beq.n	83802 <Cl_bc_controller+0x4ea>
   837f8:	e004      	b.n	83804 <Cl_bc_controller+0x4ec>
   837fa:	bf00      	nop
   837fc:	e3a5      	b.n	83f4a <Cl_bc_controller+0xc32>
   837fe:	bf00      	nop
   83800:	e3a3      	b.n	83f4a <Cl_bc_controller+0xc32>
   83802:	bf00      	nop
   83804:	e3a1      	b.n	83f4a <Cl_bc_controller+0xc32>
   83806:	79fb      	ldrb	r3, [r7, #7]
   83808:	2b01      	cmp	r3, #1
   8380a:	d002      	beq.n	83812 <Cl_bc_controller+0x4fa>
   8380c:	2b02      	cmp	r3, #2
   8380e:	d037      	beq.n	83880 <Cl_bc_controller+0x568>
   83810:	e045      	b.n	8389e <Cl_bc_controller+0x586>
   83812:	4b1a      	ldr	r3, [pc, #104]	; (8387c <Cl_bc_controller+0x564>)
   83814:	2201      	movs	r2, #1
   83816:	701a      	strb	r2, [r3, #0]
   83818:	e041      	b.n	8389e <Cl_bc_controller+0x586>
   8381a:	bf00      	nop
   8381c:	00097e2d 	.word	0x00097e2d
   83820:	00097d29 	.word	0x00097d29
   83824:	20071642 	.word	0x20071642
   83828:	00097a25 	.word	0x00097a25
   8382c:	20071644 	.word	0x20071644
   83830:	00097e55 	.word	0x00097e55
   83834:	2007288d 	.word	0x2007288d
   83838:	00097b21 	.word	0x00097b21
   8383c:	00097985 	.word	0x00097985
   83840:	00097a8d 	.word	0x00097a8d
   83844:	00088a91 	.word	0x00088a91
   83848:	42960000 	.word	0x42960000
   8384c:	00088a19 	.word	0x00088a19
   83850:	000979ad 	.word	0x000979ad
   83854:	00097d55 	.word	0x00097d55
   83858:	00093cd9 	.word	0x00093cd9
   8385c:	00093c41 	.word	0x00093c41
   83860:	00091e2d 	.word	0x00091e2d
   83864:	00097b9d 	.word	0x00097b9d
   83868:	000979cd 	.word	0x000979cd
   8386c:	0008a611 	.word	0x0008a611
   83870:	00082efd 	.word	0x00082efd
   83874:	2007163d 	.word	0x2007163d
   83878:	2007163e 	.word	0x2007163e
   8387c:	2007163f 	.word	0x2007163f
   83880:	4b9c      	ldr	r3, [pc, #624]	; (83af4 <Cl_bc_controller+0x7dc>)
   83882:	781b      	ldrb	r3, [r3, #0]
   83884:	2b00      	cmp	r3, #0
   83886:	d009      	beq.n	8389c <Cl_bc_controller+0x584>
   83888:	4b9b      	ldr	r3, [pc, #620]	; (83af8 <Cl_bc_controller+0x7e0>)
   8388a:	781a      	ldrb	r2, [r3, #0]
   8388c:	4b9b      	ldr	r3, [pc, #620]	; (83afc <Cl_bc_controller+0x7e4>)
   8388e:	701a      	strb	r2, [r3, #0]
   83890:	4b99      	ldr	r3, [pc, #612]	; (83af8 <Cl_bc_controller+0x7e0>)
   83892:	220b      	movs	r2, #11
   83894:	701a      	strb	r2, [r3, #0]
   83896:	4b97      	ldr	r3, [pc, #604]	; (83af4 <Cl_bc_controller+0x7dc>)
   83898:	2200      	movs	r2, #0
   8389a:	701a      	strb	r2, [r3, #0]
   8389c:	bf00      	nop
   8389e:	e354      	b.n	83f4a <Cl_bc_controller+0xc32>
   838a0:	79fb      	ldrb	r3, [r7, #7]
   838a2:	2b02      	cmp	r3, #2
   838a4:	d004      	beq.n	838b0 <Cl_bc_controller+0x598>
   838a6:	2b03      	cmp	r3, #3
   838a8:	d004      	beq.n	838b4 <Cl_bc_controller+0x59c>
   838aa:	2b01      	cmp	r3, #1
   838ac:	d004      	beq.n	838b8 <Cl_bc_controller+0x5a0>
   838ae:	e004      	b.n	838ba <Cl_bc_controller+0x5a2>
   838b0:	bf00      	nop
   838b2:	e34a      	b.n	83f4a <Cl_bc_controller+0xc32>
   838b4:	bf00      	nop
   838b6:	e348      	b.n	83f4a <Cl_bc_controller+0xc32>
   838b8:	bf00      	nop
   838ba:	e346      	b.n	83f4a <Cl_bc_controller+0xc32>
   838bc:	79fb      	ldrb	r3, [r7, #7]
   838be:	2b00      	cmp	r3, #0
   838c0:	d001      	beq.n	838c6 <Cl_bc_controller+0x5ae>
   838c2:	2b02      	cmp	r3, #2
   838c4:	e02a      	b.n	8391c <Cl_bc_controller+0x604>
   838c6:	4b8e      	ldr	r3, [pc, #568]	; (83b00 <Cl_bc_controller+0x7e8>)
   838c8:	f9b3 3000 	ldrsh.w	r3, [r3]
   838cc:	b29b      	uxth	r3, r3
   838ce:	3301      	adds	r3, #1
   838d0:	b29b      	uxth	r3, r3
   838d2:	b21a      	sxth	r2, r3
   838d4:	4b8a      	ldr	r3, [pc, #552]	; (83b00 <Cl_bc_controller+0x7e8>)
   838d6:	801a      	strh	r2, [r3, #0]
   838d8:	4b8a      	ldr	r3, [pc, #552]	; (83b04 <Cl_bc_controller+0x7ec>)
   838da:	f9b3 3000 	ldrsh.w	r3, [r3]
   838de:	2b13      	cmp	r3, #19
   838e0:	dc11      	bgt.n	83906 <Cl_bc_controller+0x5ee>
   838e2:	4b88      	ldr	r3, [pc, #544]	; (83b04 <Cl_bc_controller+0x7ec>)
   838e4:	f9b3 3000 	ldrsh.w	r3, [r3]
   838e8:	2b02      	cmp	r3, #2
   838ea:	d102      	bne.n	838f2 <Cl_bc_controller+0x5da>
   838ec:	2013      	movs	r0, #19
   838ee:	4b86      	ldr	r3, [pc, #536]	; (83b08 <Cl_bc_controller+0x7f0>)
   838f0:	4798      	blx	r3
   838f2:	4b84      	ldr	r3, [pc, #528]	; (83b04 <Cl_bc_controller+0x7ec>)
   838f4:	f9b3 3000 	ldrsh.w	r3, [r3]
   838f8:	b29b      	uxth	r3, r3
   838fa:	3301      	adds	r3, #1
   838fc:	b29b      	uxth	r3, r3
   838fe:	b21a      	sxth	r2, r3
   83900:	4b80      	ldr	r3, [pc, #512]	; (83b04 <Cl_bc_controller+0x7ec>)
   83902:	801a      	strh	r2, [r3, #0]
   83904:	e009      	b.n	8391a <Cl_bc_controller+0x602>
   83906:	4b7f      	ldr	r3, [pc, #508]	; (83b04 <Cl_bc_controller+0x7ec>)
   83908:	2200      	movs	r2, #0
   8390a:	801a      	strh	r2, [r3, #0]
   8390c:	4b7a      	ldr	r3, [pc, #488]	; (83af8 <Cl_bc_controller+0x7e0>)
   8390e:	781a      	ldrb	r2, [r3, #0]
   83910:	4b7a      	ldr	r3, [pc, #488]	; (83afc <Cl_bc_controller+0x7e4>)
   83912:	701a      	strb	r2, [r3, #0]
   83914:	4b78      	ldr	r3, [pc, #480]	; (83af8 <Cl_bc_controller+0x7e0>)
   83916:	220d      	movs	r2, #13
   83918:	701a      	strb	r2, [r3, #0]
   8391a:	bf00      	nop
   8391c:	e315      	b.n	83f4a <Cl_bc_controller+0xc32>
   8391e:	79fb      	ldrb	r3, [r7, #7]
   83920:	2b03      	cmp	r3, #3
   83922:	f200 8145 	bhi.w	83bb0 <Cl_bc_controller+0x898>
   83926:	a201      	add	r2, pc, #4	; (adr r2, 8392c <Cl_bc_controller+0x614>)
   83928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8392c:	0008393d 	.word	0x0008393d
   83930:	00083bb1 	.word	0x00083bb1
   83934:	00083951 	.word	0x00083951
   83938:	00083983 	.word	0x00083983
   8393c:	4b70      	ldr	r3, [pc, #448]	; (83b00 <Cl_bc_controller+0x7e8>)
   8393e:	f9b3 3000 	ldrsh.w	r3, [r3]
   83942:	b29b      	uxth	r3, r3
   83944:	3301      	adds	r3, #1
   83946:	b29b      	uxth	r3, r3
   83948:	b21a      	sxth	r2, r3
   8394a:	4b6d      	ldr	r3, [pc, #436]	; (83b00 <Cl_bc_controller+0x7e8>)
   8394c:	801a      	strh	r2, [r3, #0]
   8394e:	e134      	b.n	83bba <Cl_bc_controller+0x8a2>
   83950:	4b6b      	ldr	r3, [pc, #428]	; (83b00 <Cl_bc_controller+0x7e8>)
   83952:	f9b3 3000 	ldrsh.w	r3, [r3]
   83956:	2b96      	cmp	r3, #150	; 0x96
   83958:	f340 812c 	ble.w	83bb4 <Cl_bc_controller+0x89c>
   8395c:	4b6b      	ldr	r3, [pc, #428]	; (83b0c <Cl_bc_controller+0x7f4>)
   8395e:	4798      	blx	r3
   83960:	2004      	movs	r0, #4
   83962:	4b6b      	ldr	r3, [pc, #428]	; (83b10 <Cl_bc_controller+0x7f8>)
   83964:	4798      	blx	r3
   83966:	2032      	movs	r0, #50	; 0x32
   83968:	4b6a      	ldr	r3, [pc, #424]	; (83b14 <Cl_bc_controller+0x7fc>)
   8396a:	4798      	blx	r3
   8396c:	2004      	movs	r0, #4
   8396e:	4b66      	ldr	r3, [pc, #408]	; (83b08 <Cl_bc_controller+0x7f0>)
   83970:	4798      	blx	r3
   83972:	2032      	movs	r0, #50	; 0x32
   83974:	4b67      	ldr	r3, [pc, #412]	; (83b14 <Cl_bc_controller+0x7fc>)
   83976:	4798      	blx	r3
   83978:	2101      	movs	r1, #1
   8397a:	201a      	movs	r0, #26
   8397c:	4b66      	ldr	r3, [pc, #408]	; (83b18 <Cl_bc_controller+0x800>)
   8397e:	4798      	blx	r3
   83980:	e118      	b.n	83bb4 <Cl_bc_controller+0x89c>
   83982:	4b66      	ldr	r3, [pc, #408]	; (83b1c <Cl_bc_controller+0x804>)
   83984:	2201      	movs	r2, #1
   83986:	701a      	strb	r2, [r3, #0]
   83988:	4b65      	ldr	r3, [pc, #404]	; (83b20 <Cl_bc_controller+0x808>)
   8398a:	2200      	movs	r2, #0
   8398c:	601a      	str	r2, [r3, #0]
   8398e:	4b5c      	ldr	r3, [pc, #368]	; (83b00 <Cl_bc_controller+0x7e8>)
   83990:	f9b3 3000 	ldrsh.w	r3, [r3]
   83994:	b29a      	uxth	r2, r3
   83996:	4b62      	ldr	r3, [pc, #392]	; (83b20 <Cl_bc_controller+0x808>)
   83998:	801a      	strh	r2, [r3, #0]
   8399a:	4b61      	ldr	r3, [pc, #388]	; (83b20 <Cl_bc_controller+0x808>)
   8399c:	2216      	movs	r2, #22
   8399e:	709a      	strb	r2, [r3, #2]
   839a0:	4b57      	ldr	r3, [pc, #348]	; (83b00 <Cl_bc_controller+0x7e8>)
   839a2:	f9b3 3000 	ldrsh.w	r3, [r3]
   839a6:	b29a      	uxth	r2, r3
   839a8:	4b5e      	ldr	r3, [pc, #376]	; (83b24 <Cl_bc_controller+0x80c>)
   839aa:	801a      	strh	r2, [r3, #0]
   839ac:	4b5e      	ldr	r3, [pc, #376]	; (83b28 <Cl_bc_controller+0x810>)
   839ae:	781b      	ldrb	r3, [r3, #0]
   839b0:	2b01      	cmp	r3, #1
   839b2:	f040 80dd 	bne.w	83b70 <Cl_bc_controller+0x858>
   839b6:	4b5d      	ldr	r3, [pc, #372]	; (83b2c <Cl_bc_controller+0x814>)
   839b8:	681b      	ldr	r3, [r3, #0]
   839ba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   839be:	f000 80d6 	beq.w	83b6e <Cl_bc_controller+0x856>
   839c2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   839c6:	d806      	bhi.n	839d6 <Cl_bc_controller+0x6be>
   839c8:	2bc8      	cmp	r3, #200	; 0xc8
   839ca:	f000 80b5 	beq.w	83b38 <Cl_bc_controller+0x820>
   839ce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   839d2:	d061      	beq.n	83a98 <Cl_bc_controller+0x780>
   839d4:	e0cc      	b.n	83b70 <Cl_bc_controller+0x858>
   839d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   839da:	d030      	beq.n	83a3e <Cl_bc_controller+0x726>
   839dc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   839e0:	f040 80c6 	bne.w	83b70 <Cl_bc_controller+0x858>
   839e4:	4b46      	ldr	r3, [pc, #280]	; (83b00 <Cl_bc_controller+0x7e8>)
   839e6:	f9b3 3000 	ldrsh.w	r3, [r3]
   839ea:	2b37      	cmp	r3, #55	; 0x37
   839ec:	dc04      	bgt.n	839f8 <Cl_bc_controller+0x6e0>
   839ee:	4b44      	ldr	r3, [pc, #272]	; (83b00 <Cl_bc_controller+0x7e8>)
   839f0:	f9b3 3000 	ldrsh.w	r3, [r3]
   839f4:	2b2c      	cmp	r3, #44	; 0x2c
   839f6:	dc1b      	bgt.n	83a30 <Cl_bc_controller+0x718>
   839f8:	4b4d      	ldr	r3, [pc, #308]	; (83b30 <Cl_bc_controller+0x818>)
   839fa:	681b      	ldr	r3, [r3, #0]
   839fc:	3301      	adds	r3, #1
   839fe:	4a4c      	ldr	r2, [pc, #304]	; (83b30 <Cl_bc_controller+0x818>)
   83a00:	6013      	str	r3, [r2, #0]
   83a02:	4b4b      	ldr	r3, [pc, #300]	; (83b30 <Cl_bc_controller+0x818>)
   83a04:	681b      	ldr	r3, [r3, #0]
   83a06:	2b03      	cmp	r3, #3
   83a08:	dd18      	ble.n	83a3c <Cl_bc_controller+0x724>
   83a0a:	4b40      	ldr	r3, [pc, #256]	; (83b0c <Cl_bc_controller+0x7f4>)
   83a0c:	4798      	blx	r3
   83a0e:	2004      	movs	r0, #4
   83a10:	4b3f      	ldr	r3, [pc, #252]	; (83b10 <Cl_bc_controller+0x7f8>)
   83a12:	4798      	blx	r3
   83a14:	2032      	movs	r0, #50	; 0x32
   83a16:	4b3f      	ldr	r3, [pc, #252]	; (83b14 <Cl_bc_controller+0x7fc>)
   83a18:	4798      	blx	r3
   83a1a:	2004      	movs	r0, #4
   83a1c:	4b3a      	ldr	r3, [pc, #232]	; (83b08 <Cl_bc_controller+0x7f0>)
   83a1e:	4798      	blx	r3
   83a20:	2032      	movs	r0, #50	; 0x32
   83a22:	4b3c      	ldr	r3, [pc, #240]	; (83b14 <Cl_bc_controller+0x7fc>)
   83a24:	4798      	blx	r3
   83a26:	2101      	movs	r1, #1
   83a28:	201a      	movs	r0, #26
   83a2a:	4b3b      	ldr	r3, [pc, #236]	; (83b18 <Cl_bc_controller+0x800>)
   83a2c:	4798      	blx	r3
   83a2e:	e005      	b.n	83a3c <Cl_bc_controller+0x724>
   83a30:	4b3f      	ldr	r3, [pc, #252]	; (83b30 <Cl_bc_controller+0x818>)
   83a32:	2200      	movs	r2, #0
   83a34:	601a      	str	r2, [r3, #0]
   83a36:	4b3f      	ldr	r3, [pc, #252]	; (83b34 <Cl_bc_controller+0x81c>)
   83a38:	4798      	blx	r3
   83a3a:	e099      	b.n	83b70 <Cl_bc_controller+0x858>
   83a3c:	e098      	b.n	83b70 <Cl_bc_controller+0x858>
   83a3e:	4b30      	ldr	r3, [pc, #192]	; (83b00 <Cl_bc_controller+0x7e8>)
   83a40:	f9b3 3000 	ldrsh.w	r3, [r3]
   83a44:	2b4d      	cmp	r3, #77	; 0x4d
   83a46:	dc04      	bgt.n	83a52 <Cl_bc_controller+0x73a>
   83a48:	4b2d      	ldr	r3, [pc, #180]	; (83b00 <Cl_bc_controller+0x7e8>)
   83a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
   83a4e:	2b42      	cmp	r3, #66	; 0x42
   83a50:	dc1b      	bgt.n	83a8a <Cl_bc_controller+0x772>
   83a52:	4b37      	ldr	r3, [pc, #220]	; (83b30 <Cl_bc_controller+0x818>)
   83a54:	681b      	ldr	r3, [r3, #0]
   83a56:	3301      	adds	r3, #1
   83a58:	4a35      	ldr	r2, [pc, #212]	; (83b30 <Cl_bc_controller+0x818>)
   83a5a:	6013      	str	r3, [r2, #0]
   83a5c:	4b34      	ldr	r3, [pc, #208]	; (83b30 <Cl_bc_controller+0x818>)
   83a5e:	681b      	ldr	r3, [r3, #0]
   83a60:	2b03      	cmp	r3, #3
   83a62:	dd18      	ble.n	83a96 <Cl_bc_controller+0x77e>
   83a64:	4b29      	ldr	r3, [pc, #164]	; (83b0c <Cl_bc_controller+0x7f4>)
   83a66:	4798      	blx	r3
   83a68:	2004      	movs	r0, #4
   83a6a:	4b29      	ldr	r3, [pc, #164]	; (83b10 <Cl_bc_controller+0x7f8>)
   83a6c:	4798      	blx	r3
   83a6e:	2032      	movs	r0, #50	; 0x32
   83a70:	4b28      	ldr	r3, [pc, #160]	; (83b14 <Cl_bc_controller+0x7fc>)
   83a72:	4798      	blx	r3
   83a74:	2004      	movs	r0, #4
   83a76:	4b24      	ldr	r3, [pc, #144]	; (83b08 <Cl_bc_controller+0x7f0>)
   83a78:	4798      	blx	r3
   83a7a:	2032      	movs	r0, #50	; 0x32
   83a7c:	4b25      	ldr	r3, [pc, #148]	; (83b14 <Cl_bc_controller+0x7fc>)
   83a7e:	4798      	blx	r3
   83a80:	2101      	movs	r1, #1
   83a82:	201a      	movs	r0, #26
   83a84:	4b24      	ldr	r3, [pc, #144]	; (83b18 <Cl_bc_controller+0x800>)
   83a86:	4798      	blx	r3
   83a88:	e005      	b.n	83a96 <Cl_bc_controller+0x77e>
   83a8a:	4b29      	ldr	r3, [pc, #164]	; (83b30 <Cl_bc_controller+0x818>)
   83a8c:	2200      	movs	r2, #0
   83a8e:	601a      	str	r2, [r3, #0]
   83a90:	4b28      	ldr	r3, [pc, #160]	; (83b34 <Cl_bc_controller+0x81c>)
   83a92:	4798      	blx	r3
   83a94:	e06c      	b.n	83b70 <Cl_bc_controller+0x858>
   83a96:	e06b      	b.n	83b70 <Cl_bc_controller+0x858>
   83a98:	4b19      	ldr	r3, [pc, #100]	; (83b00 <Cl_bc_controller+0x7e8>)
   83a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
   83a9e:	2b7d      	cmp	r3, #125	; 0x7d
   83aa0:	dc04      	bgt.n	83aac <Cl_bc_controller+0x794>
   83aa2:	4b17      	ldr	r3, [pc, #92]	; (83b00 <Cl_bc_controller+0x7e8>)
   83aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
   83aa8:	2b72      	cmp	r3, #114	; 0x72
   83aaa:	dc1b      	bgt.n	83ae4 <Cl_bc_controller+0x7cc>
   83aac:	4b20      	ldr	r3, [pc, #128]	; (83b30 <Cl_bc_controller+0x818>)
   83aae:	681b      	ldr	r3, [r3, #0]
   83ab0:	3301      	adds	r3, #1
   83ab2:	4a1f      	ldr	r2, [pc, #124]	; (83b30 <Cl_bc_controller+0x818>)
   83ab4:	6013      	str	r3, [r2, #0]
   83ab6:	4b1e      	ldr	r3, [pc, #120]	; (83b30 <Cl_bc_controller+0x818>)
   83ab8:	681b      	ldr	r3, [r3, #0]
   83aba:	2b03      	cmp	r3, #3
   83abc:	dd18      	ble.n	83af0 <Cl_bc_controller+0x7d8>
   83abe:	4b13      	ldr	r3, [pc, #76]	; (83b0c <Cl_bc_controller+0x7f4>)
   83ac0:	4798      	blx	r3
   83ac2:	2004      	movs	r0, #4
   83ac4:	4b12      	ldr	r3, [pc, #72]	; (83b10 <Cl_bc_controller+0x7f8>)
   83ac6:	4798      	blx	r3
   83ac8:	2032      	movs	r0, #50	; 0x32
   83aca:	4b12      	ldr	r3, [pc, #72]	; (83b14 <Cl_bc_controller+0x7fc>)
   83acc:	4798      	blx	r3
   83ace:	2004      	movs	r0, #4
   83ad0:	4b0d      	ldr	r3, [pc, #52]	; (83b08 <Cl_bc_controller+0x7f0>)
   83ad2:	4798      	blx	r3
   83ad4:	2032      	movs	r0, #50	; 0x32
   83ad6:	4b0f      	ldr	r3, [pc, #60]	; (83b14 <Cl_bc_controller+0x7fc>)
   83ad8:	4798      	blx	r3
   83ada:	2101      	movs	r1, #1
   83adc:	201a      	movs	r0, #26
   83ade:	4b0e      	ldr	r3, [pc, #56]	; (83b18 <Cl_bc_controller+0x800>)
   83ae0:	4798      	blx	r3
   83ae2:	e005      	b.n	83af0 <Cl_bc_controller+0x7d8>
   83ae4:	4b12      	ldr	r3, [pc, #72]	; (83b30 <Cl_bc_controller+0x818>)
   83ae6:	2200      	movs	r2, #0
   83ae8:	601a      	str	r2, [r3, #0]
   83aea:	4b12      	ldr	r3, [pc, #72]	; (83b34 <Cl_bc_controller+0x81c>)
   83aec:	4798      	blx	r3
   83aee:	e03f      	b.n	83b70 <Cl_bc_controller+0x858>
   83af0:	e03e      	b.n	83b70 <Cl_bc_controller+0x858>
   83af2:	bf00      	nop
   83af4:	2007163f 	.word	0x2007163f
   83af8:	2007163d 	.word	0x2007163d
   83afc:	2007163e 	.word	0x2007163e
   83b00:	20071650 	.word	0x20071650
   83b04:	20071640 	.word	0x20071640
   83b08:	000979cd 	.word	0x000979cd
   83b0c:	00097c19 	.word	0x00097c19
   83b10:	000979ad 	.word	0x000979ad
   83b14:	00091e2d 	.word	0x00091e2d
   83b18:	000830a5 	.word	0x000830a5
   83b1c:	20072634 	.word	0x20072634
   83b20:	20071654 	.word	0x20071654
   83b24:	20071658 	.word	0x20071658
   83b28:	200720ef 	.word	0x200720ef
   83b2c:	200720f0 	.word	0x200720f0
   83b30:	20071648 	.word	0x20071648
   83b34:	00097c69 	.word	0x00097c69
   83b38:	4b9a      	ldr	r3, [pc, #616]	; (83da4 <Cl_bc_controller+0xa8c>)
   83b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
   83b3e:	2bbe      	cmp	r3, #190	; 0xbe
   83b40:	dd12      	ble.n	83b68 <Cl_bc_controller+0x850>
   83b42:	4b99      	ldr	r3, [pc, #612]	; (83da8 <Cl_bc_controller+0xa90>)
   83b44:	4798      	blx	r3
   83b46:	2004      	movs	r0, #4
   83b48:	4b98      	ldr	r3, [pc, #608]	; (83dac <Cl_bc_controller+0xa94>)
   83b4a:	4798      	blx	r3
   83b4c:	2032      	movs	r0, #50	; 0x32
   83b4e:	4b98      	ldr	r3, [pc, #608]	; (83db0 <Cl_bc_controller+0xa98>)
   83b50:	4798      	blx	r3
   83b52:	2004      	movs	r0, #4
   83b54:	4b97      	ldr	r3, [pc, #604]	; (83db4 <Cl_bc_controller+0xa9c>)
   83b56:	4798      	blx	r3
   83b58:	2032      	movs	r0, #50	; 0x32
   83b5a:	4b95      	ldr	r3, [pc, #596]	; (83db0 <Cl_bc_controller+0xa98>)
   83b5c:	4798      	blx	r3
   83b5e:	2101      	movs	r1, #1
   83b60:	201a      	movs	r0, #26
   83b62:	4b95      	ldr	r3, [pc, #596]	; (83db8 <Cl_bc_controller+0xaa0>)
   83b64:	4798      	blx	r3
   83b66:	e003      	b.n	83b70 <Cl_bc_controller+0x858>
   83b68:	4b94      	ldr	r3, [pc, #592]	; (83dbc <Cl_bc_controller+0xaa4>)
   83b6a:	4798      	blx	r3
   83b6c:	e000      	b.n	83b70 <Cl_bc_controller+0x858>
   83b6e:	bf00      	nop
   83b70:	2006      	movs	r0, #6
   83b72:	4b93      	ldr	r3, [pc, #588]	; (83dc0 <Cl_bc_controller+0xaa8>)
   83b74:	4798      	blx	r3
   83b76:	4603      	mov	r3, r0
   83b78:	73fb      	strb	r3, [r7, #15]
   83b7a:	2013      	movs	r0, #19
   83b7c:	4b8b      	ldr	r3, [pc, #556]	; (83dac <Cl_bc_controller+0xa94>)
   83b7e:	4798      	blx	r3
   83b80:	2204      	movs	r2, #4
   83b82:	4990      	ldr	r1, [pc, #576]	; (83dc4 <Cl_bc_controller+0xaac>)
   83b84:	2037      	movs	r0, #55	; 0x37
   83b86:	4b90      	ldr	r3, [pc, #576]	; (83dc8 <Cl_bc_controller+0xab0>)
   83b88:	4798      	blx	r3
   83b8a:	2204      	movs	r2, #4
   83b8c:	498f      	ldr	r1, [pc, #572]	; (83dcc <Cl_bc_controller+0xab4>)
   83b8e:	2049      	movs	r0, #73	; 0x49
   83b90:	4b8d      	ldr	r3, [pc, #564]	; (83dc8 <Cl_bc_controller+0xab0>)
   83b92:	4798      	blx	r3
   83b94:	7bfb      	ldrb	r3, [r7, #15]
   83b96:	2b00      	cmp	r3, #0
   83b98:	d10e      	bne.n	83bb8 <Cl_bc_controller+0x8a0>
   83b9a:	4b8d      	ldr	r3, [pc, #564]	; (83dd0 <Cl_bc_controller+0xab8>)
   83b9c:	781a      	ldrb	r2, [r3, #0]
   83b9e:	4b8d      	ldr	r3, [pc, #564]	; (83dd4 <Cl_bc_controller+0xabc>)
   83ba0:	701a      	strb	r2, [r3, #0]
   83ba2:	4b8b      	ldr	r3, [pc, #556]	; (83dd0 <Cl_bc_controller+0xab8>)
   83ba4:	220e      	movs	r2, #14
   83ba6:	701a      	strb	r2, [r3, #0]
   83ba8:	4b7e      	ldr	r3, [pc, #504]	; (83da4 <Cl_bc_controller+0xa8c>)
   83baa:	2200      	movs	r2, #0
   83bac:	801a      	strh	r2, [r3, #0]
   83bae:	e003      	b.n	83bb8 <Cl_bc_controller+0x8a0>
   83bb0:	bf00      	nop
   83bb2:	e1ca      	b.n	83f4a <Cl_bc_controller+0xc32>
   83bb4:	bf00      	nop
   83bb6:	e1c8      	b.n	83f4a <Cl_bc_controller+0xc32>
   83bb8:	bf00      	nop
   83bba:	e1c6      	b.n	83f4a <Cl_bc_controller+0xc32>
   83bbc:	79fb      	ldrb	r3, [r7, #7]
   83bbe:	2b00      	cmp	r3, #0
   83bc0:	d001      	beq.n	83bc6 <Cl_bc_controller+0x8ae>
   83bc2:	2b02      	cmp	r3, #2
   83bc4:	e02a      	b.n	83c1c <Cl_bc_controller+0x904>
   83bc6:	4b77      	ldr	r3, [pc, #476]	; (83da4 <Cl_bc_controller+0xa8c>)
   83bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
   83bcc:	b29b      	uxth	r3, r3
   83bce:	3301      	adds	r3, #1
   83bd0:	b29b      	uxth	r3, r3
   83bd2:	b21a      	sxth	r2, r3
   83bd4:	4b73      	ldr	r3, [pc, #460]	; (83da4 <Cl_bc_controller+0xa8c>)
   83bd6:	801a      	strh	r2, [r3, #0]
   83bd8:	4b7f      	ldr	r3, [pc, #508]	; (83dd8 <Cl_bc_controller+0xac0>)
   83bda:	f9b3 3000 	ldrsh.w	r3, [r3]
   83bde:	2b13      	cmp	r3, #19
   83be0:	dc11      	bgt.n	83c06 <Cl_bc_controller+0x8ee>
   83be2:	4b7d      	ldr	r3, [pc, #500]	; (83dd8 <Cl_bc_controller+0xac0>)
   83be4:	f9b3 3000 	ldrsh.w	r3, [r3]
   83be8:	2b02      	cmp	r3, #2
   83bea:	d102      	bne.n	83bf2 <Cl_bc_controller+0x8da>
   83bec:	2013      	movs	r0, #19
   83bee:	4b71      	ldr	r3, [pc, #452]	; (83db4 <Cl_bc_controller+0xa9c>)
   83bf0:	4798      	blx	r3
   83bf2:	4b79      	ldr	r3, [pc, #484]	; (83dd8 <Cl_bc_controller+0xac0>)
   83bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
   83bf8:	b29b      	uxth	r3, r3
   83bfa:	3301      	adds	r3, #1
   83bfc:	b29b      	uxth	r3, r3
   83bfe:	b21a      	sxth	r2, r3
   83c00:	4b75      	ldr	r3, [pc, #468]	; (83dd8 <Cl_bc_controller+0xac0>)
   83c02:	801a      	strh	r2, [r3, #0]
   83c04:	e009      	b.n	83c1a <Cl_bc_controller+0x902>
   83c06:	4b74      	ldr	r3, [pc, #464]	; (83dd8 <Cl_bc_controller+0xac0>)
   83c08:	2200      	movs	r2, #0
   83c0a:	801a      	strh	r2, [r3, #0]
   83c0c:	4b70      	ldr	r3, [pc, #448]	; (83dd0 <Cl_bc_controller+0xab8>)
   83c0e:	781a      	ldrb	r2, [r3, #0]
   83c10:	4b70      	ldr	r3, [pc, #448]	; (83dd4 <Cl_bc_controller+0xabc>)
   83c12:	701a      	strb	r2, [r3, #0]
   83c14:	4b6e      	ldr	r3, [pc, #440]	; (83dd0 <Cl_bc_controller+0xab8>)
   83c16:	220f      	movs	r2, #15
   83c18:	701a      	strb	r2, [r3, #0]
   83c1a:	bf00      	nop
   83c1c:	e195      	b.n	83f4a <Cl_bc_controller+0xc32>
   83c1e:	79fb      	ldrb	r3, [r7, #7]
   83c20:	2b03      	cmp	r3, #3
   83c22:	f200 8147 	bhi.w	83eb4 <Cl_bc_controller+0xb9c>
   83c26:	a201      	add	r2, pc, #4	; (adr r2, 83c2c <Cl_bc_controller+0x914>)
   83c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83c2c:	00083c3d 	.word	0x00083c3d
   83c30:	00083eb5 	.word	0x00083eb5
   83c34:	00083c51 	.word	0x00083c51
   83c38:	00083c83 	.word	0x00083c83
   83c3c:	4b59      	ldr	r3, [pc, #356]	; (83da4 <Cl_bc_controller+0xa8c>)
   83c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
   83c42:	b29b      	uxth	r3, r3
   83c44:	3301      	adds	r3, #1
   83c46:	b29b      	uxth	r3, r3
   83c48:	b21a      	sxth	r2, r3
   83c4a:	4b56      	ldr	r3, [pc, #344]	; (83da4 <Cl_bc_controller+0xa8c>)
   83c4c:	801a      	strh	r2, [r3, #0]
   83c4e:	e136      	b.n	83ebe <Cl_bc_controller+0xba6>
   83c50:	4b54      	ldr	r3, [pc, #336]	; (83da4 <Cl_bc_controller+0xa8c>)
   83c52:	f9b3 3000 	ldrsh.w	r3, [r3]
   83c56:	2b96      	cmp	r3, #150	; 0x96
   83c58:	f340 812e 	ble.w	83eb8 <Cl_bc_controller+0xba0>
   83c5c:	4b52      	ldr	r3, [pc, #328]	; (83da8 <Cl_bc_controller+0xa90>)
   83c5e:	4798      	blx	r3
   83c60:	2004      	movs	r0, #4
   83c62:	4b52      	ldr	r3, [pc, #328]	; (83dac <Cl_bc_controller+0xa94>)
   83c64:	4798      	blx	r3
   83c66:	2032      	movs	r0, #50	; 0x32
   83c68:	4b51      	ldr	r3, [pc, #324]	; (83db0 <Cl_bc_controller+0xa98>)
   83c6a:	4798      	blx	r3
   83c6c:	2004      	movs	r0, #4
   83c6e:	4b51      	ldr	r3, [pc, #324]	; (83db4 <Cl_bc_controller+0xa9c>)
   83c70:	4798      	blx	r3
   83c72:	2032      	movs	r0, #50	; 0x32
   83c74:	4b4e      	ldr	r3, [pc, #312]	; (83db0 <Cl_bc_controller+0xa98>)
   83c76:	4798      	blx	r3
   83c78:	2101      	movs	r1, #1
   83c7a:	201a      	movs	r0, #26
   83c7c:	4b4e      	ldr	r3, [pc, #312]	; (83db8 <Cl_bc_controller+0xaa0>)
   83c7e:	4798      	blx	r3
   83c80:	e11a      	b.n	83eb8 <Cl_bc_controller+0xba0>
   83c82:	4b56      	ldr	r3, [pc, #344]	; (83ddc <Cl_bc_controller+0xac4>)
   83c84:	2201      	movs	r2, #1
   83c86:	701a      	strb	r2, [r3, #0]
   83c88:	4b4e      	ldr	r3, [pc, #312]	; (83dc4 <Cl_bc_controller+0xaac>)
   83c8a:	2200      	movs	r2, #0
   83c8c:	601a      	str	r2, [r3, #0]
   83c8e:	4b45      	ldr	r3, [pc, #276]	; (83da4 <Cl_bc_controller+0xa8c>)
   83c90:	f9b3 3000 	ldrsh.w	r3, [r3]
   83c94:	b29a      	uxth	r2, r3
   83c96:	4b4b      	ldr	r3, [pc, #300]	; (83dc4 <Cl_bc_controller+0xaac>)
   83c98:	801a      	strh	r2, [r3, #0]
   83c9a:	4b4a      	ldr	r3, [pc, #296]	; (83dc4 <Cl_bc_controller+0xaac>)
   83c9c:	2215      	movs	r2, #21
   83c9e:	709a      	strb	r2, [r3, #2]
   83ca0:	4b40      	ldr	r3, [pc, #256]	; (83da4 <Cl_bc_controller+0xa8c>)
   83ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
   83ca6:	b29a      	uxth	r2, r3
   83ca8:	4b48      	ldr	r3, [pc, #288]	; (83dcc <Cl_bc_controller+0xab4>)
   83caa:	801a      	strh	r2, [r3, #0]
   83cac:	4b47      	ldr	r3, [pc, #284]	; (83dcc <Cl_bc_controller+0xab4>)
   83cae:	681b      	ldr	r3, [r3, #0]
   83cb0:	041b      	lsls	r3, r3, #16
   83cb2:	4a46      	ldr	r2, [pc, #280]	; (83dcc <Cl_bc_controller+0xab4>)
   83cb4:	6013      	str	r3, [r2, #0]
   83cb6:	4b4a      	ldr	r3, [pc, #296]	; (83de0 <Cl_bc_controller+0xac8>)
   83cb8:	781b      	ldrb	r3, [r3, #0]
   83cba:	2b01      	cmp	r3, #1
   83cbc:	f040 80df 	bne.w	83e7e <Cl_bc_controller+0xb66>
   83cc0:	4b48      	ldr	r3, [pc, #288]	; (83de4 <Cl_bc_controller+0xacc>)
   83cc2:	681b      	ldr	r3, [r3, #0]
   83cc4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   83cc8:	f000 80d8 	beq.w	83e7c <Cl_bc_controller+0xb64>
   83ccc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   83cd0:	d807      	bhi.n	83ce2 <Cl_bc_controller+0x9ca>
   83cd2:	2bc8      	cmp	r3, #200	; 0xc8
   83cd4:	f000 80b7 	beq.w	83e46 <Cl_bc_controller+0xb2e>
   83cd8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   83cdc:	f000 8086 	beq.w	83dec <Cl_bc_controller+0xad4>
   83ce0:	e0cd      	b.n	83e7e <Cl_bc_controller+0xb66>
   83ce2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   83ce6:	d030      	beq.n	83d4a <Cl_bc_controller+0xa32>
   83ce8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   83cec:	f040 80c7 	bne.w	83e7e <Cl_bc_controller+0xb66>
   83cf0:	4b2c      	ldr	r3, [pc, #176]	; (83da4 <Cl_bc_controller+0xa8c>)
   83cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
   83cf6:	2b37      	cmp	r3, #55	; 0x37
   83cf8:	dc04      	bgt.n	83d04 <Cl_bc_controller+0x9ec>
   83cfa:	4b2a      	ldr	r3, [pc, #168]	; (83da4 <Cl_bc_controller+0xa8c>)
   83cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
   83d00:	2b2c      	cmp	r3, #44	; 0x2c
   83d02:	dc1b      	bgt.n	83d3c <Cl_bc_controller+0xa24>
   83d04:	4b38      	ldr	r3, [pc, #224]	; (83de8 <Cl_bc_controller+0xad0>)
   83d06:	681b      	ldr	r3, [r3, #0]
   83d08:	3301      	adds	r3, #1
   83d0a:	4a37      	ldr	r2, [pc, #220]	; (83de8 <Cl_bc_controller+0xad0>)
   83d0c:	6013      	str	r3, [r2, #0]
   83d0e:	4b36      	ldr	r3, [pc, #216]	; (83de8 <Cl_bc_controller+0xad0>)
   83d10:	681b      	ldr	r3, [r3, #0]
   83d12:	2b03      	cmp	r3, #3
   83d14:	dd18      	ble.n	83d48 <Cl_bc_controller+0xa30>
   83d16:	4b24      	ldr	r3, [pc, #144]	; (83da8 <Cl_bc_controller+0xa90>)
   83d18:	4798      	blx	r3
   83d1a:	2004      	movs	r0, #4
   83d1c:	4b23      	ldr	r3, [pc, #140]	; (83dac <Cl_bc_controller+0xa94>)
   83d1e:	4798      	blx	r3
   83d20:	2032      	movs	r0, #50	; 0x32
   83d22:	4b23      	ldr	r3, [pc, #140]	; (83db0 <Cl_bc_controller+0xa98>)
   83d24:	4798      	blx	r3
   83d26:	2004      	movs	r0, #4
   83d28:	4b22      	ldr	r3, [pc, #136]	; (83db4 <Cl_bc_controller+0xa9c>)
   83d2a:	4798      	blx	r3
   83d2c:	2032      	movs	r0, #50	; 0x32
   83d2e:	4b20      	ldr	r3, [pc, #128]	; (83db0 <Cl_bc_controller+0xa98>)
   83d30:	4798      	blx	r3
   83d32:	2101      	movs	r1, #1
   83d34:	201a      	movs	r0, #26
   83d36:	4b20      	ldr	r3, [pc, #128]	; (83db8 <Cl_bc_controller+0xaa0>)
   83d38:	4798      	blx	r3
   83d3a:	e005      	b.n	83d48 <Cl_bc_controller+0xa30>
   83d3c:	4b2a      	ldr	r3, [pc, #168]	; (83de8 <Cl_bc_controller+0xad0>)
   83d3e:	2200      	movs	r2, #0
   83d40:	601a      	str	r2, [r3, #0]
   83d42:	4b1e      	ldr	r3, [pc, #120]	; (83dbc <Cl_bc_controller+0xaa4>)
   83d44:	4798      	blx	r3
   83d46:	e09a      	b.n	83e7e <Cl_bc_controller+0xb66>
   83d48:	e099      	b.n	83e7e <Cl_bc_controller+0xb66>
   83d4a:	4b16      	ldr	r3, [pc, #88]	; (83da4 <Cl_bc_controller+0xa8c>)
   83d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
   83d50:	2b4d      	cmp	r3, #77	; 0x4d
   83d52:	dc04      	bgt.n	83d5e <Cl_bc_controller+0xa46>
   83d54:	4b13      	ldr	r3, [pc, #76]	; (83da4 <Cl_bc_controller+0xa8c>)
   83d56:	f9b3 3000 	ldrsh.w	r3, [r3]
   83d5a:	2b42      	cmp	r3, #66	; 0x42
   83d5c:	dc1b      	bgt.n	83d96 <Cl_bc_controller+0xa7e>
   83d5e:	4b22      	ldr	r3, [pc, #136]	; (83de8 <Cl_bc_controller+0xad0>)
   83d60:	681b      	ldr	r3, [r3, #0]
   83d62:	3301      	adds	r3, #1
   83d64:	4a20      	ldr	r2, [pc, #128]	; (83de8 <Cl_bc_controller+0xad0>)
   83d66:	6013      	str	r3, [r2, #0]
   83d68:	4b1f      	ldr	r3, [pc, #124]	; (83de8 <Cl_bc_controller+0xad0>)
   83d6a:	681b      	ldr	r3, [r3, #0]
   83d6c:	2b03      	cmp	r3, #3
   83d6e:	dd18      	ble.n	83da2 <Cl_bc_controller+0xa8a>
   83d70:	4b0d      	ldr	r3, [pc, #52]	; (83da8 <Cl_bc_controller+0xa90>)
   83d72:	4798      	blx	r3
   83d74:	2004      	movs	r0, #4
   83d76:	4b0d      	ldr	r3, [pc, #52]	; (83dac <Cl_bc_controller+0xa94>)
   83d78:	4798      	blx	r3
   83d7a:	2032      	movs	r0, #50	; 0x32
   83d7c:	4b0c      	ldr	r3, [pc, #48]	; (83db0 <Cl_bc_controller+0xa98>)
   83d7e:	4798      	blx	r3
   83d80:	2004      	movs	r0, #4
   83d82:	4b0c      	ldr	r3, [pc, #48]	; (83db4 <Cl_bc_controller+0xa9c>)
   83d84:	4798      	blx	r3
   83d86:	2032      	movs	r0, #50	; 0x32
   83d88:	4b09      	ldr	r3, [pc, #36]	; (83db0 <Cl_bc_controller+0xa98>)
   83d8a:	4798      	blx	r3
   83d8c:	2101      	movs	r1, #1
   83d8e:	201a      	movs	r0, #26
   83d90:	4b09      	ldr	r3, [pc, #36]	; (83db8 <Cl_bc_controller+0xaa0>)
   83d92:	4798      	blx	r3
   83d94:	e005      	b.n	83da2 <Cl_bc_controller+0xa8a>
   83d96:	4b14      	ldr	r3, [pc, #80]	; (83de8 <Cl_bc_controller+0xad0>)
   83d98:	2200      	movs	r2, #0
   83d9a:	601a      	str	r2, [r3, #0]
   83d9c:	4b07      	ldr	r3, [pc, #28]	; (83dbc <Cl_bc_controller+0xaa4>)
   83d9e:	4798      	blx	r3
   83da0:	e06d      	b.n	83e7e <Cl_bc_controller+0xb66>
   83da2:	e06c      	b.n	83e7e <Cl_bc_controller+0xb66>
   83da4:	20071650 	.word	0x20071650
   83da8:	00097c19 	.word	0x00097c19
   83dac:	000979ad 	.word	0x000979ad
   83db0:	00091e2d 	.word	0x00091e2d
   83db4:	000979cd 	.word	0x000979cd
   83db8:	000830a5 	.word	0x000830a5
   83dbc:	00097c69 	.word	0x00097c69
   83dc0:	00097b9d 	.word	0x00097b9d
   83dc4:	20071654 	.word	0x20071654
   83dc8:	00099729 	.word	0x00099729
   83dcc:	20071658 	.word	0x20071658
   83dd0:	2007163d 	.word	0x2007163d
   83dd4:	2007163e 	.word	0x2007163e
   83dd8:	20071640 	.word	0x20071640
   83ddc:	20072634 	.word	0x20072634
   83de0:	200720ef 	.word	0x200720ef
   83de4:	200720f0 	.word	0x200720f0
   83de8:	2007164c 	.word	0x2007164c
   83dec:	4b59      	ldr	r3, [pc, #356]	; (83f54 <Cl_bc_controller+0xc3c>)
   83dee:	f9b3 3000 	ldrsh.w	r3, [r3]
   83df2:	2b7d      	cmp	r3, #125	; 0x7d
   83df4:	dc04      	bgt.n	83e00 <Cl_bc_controller+0xae8>
   83df6:	4b57      	ldr	r3, [pc, #348]	; (83f54 <Cl_bc_controller+0xc3c>)
   83df8:	f9b3 3000 	ldrsh.w	r3, [r3]
   83dfc:	2b72      	cmp	r3, #114	; 0x72
   83dfe:	dc1b      	bgt.n	83e38 <Cl_bc_controller+0xb20>
   83e00:	4b55      	ldr	r3, [pc, #340]	; (83f58 <Cl_bc_controller+0xc40>)
   83e02:	681b      	ldr	r3, [r3, #0]
   83e04:	3301      	adds	r3, #1
   83e06:	4a54      	ldr	r2, [pc, #336]	; (83f58 <Cl_bc_controller+0xc40>)
   83e08:	6013      	str	r3, [r2, #0]
   83e0a:	4b53      	ldr	r3, [pc, #332]	; (83f58 <Cl_bc_controller+0xc40>)
   83e0c:	681b      	ldr	r3, [r3, #0]
   83e0e:	2b03      	cmp	r3, #3
   83e10:	dd18      	ble.n	83e44 <Cl_bc_controller+0xb2c>
   83e12:	4b52      	ldr	r3, [pc, #328]	; (83f5c <Cl_bc_controller+0xc44>)
   83e14:	4798      	blx	r3
   83e16:	2004      	movs	r0, #4
   83e18:	4b51      	ldr	r3, [pc, #324]	; (83f60 <Cl_bc_controller+0xc48>)
   83e1a:	4798      	blx	r3
   83e1c:	2032      	movs	r0, #50	; 0x32
   83e1e:	4b51      	ldr	r3, [pc, #324]	; (83f64 <Cl_bc_controller+0xc4c>)
   83e20:	4798      	blx	r3
   83e22:	2004      	movs	r0, #4
   83e24:	4b50      	ldr	r3, [pc, #320]	; (83f68 <Cl_bc_controller+0xc50>)
   83e26:	4798      	blx	r3
   83e28:	2032      	movs	r0, #50	; 0x32
   83e2a:	4b4e      	ldr	r3, [pc, #312]	; (83f64 <Cl_bc_controller+0xc4c>)
   83e2c:	4798      	blx	r3
   83e2e:	2101      	movs	r1, #1
   83e30:	201a      	movs	r0, #26
   83e32:	4b4e      	ldr	r3, [pc, #312]	; (83f6c <Cl_bc_controller+0xc54>)
   83e34:	4798      	blx	r3
   83e36:	e005      	b.n	83e44 <Cl_bc_controller+0xb2c>
   83e38:	4b47      	ldr	r3, [pc, #284]	; (83f58 <Cl_bc_controller+0xc40>)
   83e3a:	2200      	movs	r2, #0
   83e3c:	601a      	str	r2, [r3, #0]
   83e3e:	4b4c      	ldr	r3, [pc, #304]	; (83f70 <Cl_bc_controller+0xc58>)
   83e40:	4798      	blx	r3
   83e42:	e01c      	b.n	83e7e <Cl_bc_controller+0xb66>
   83e44:	e01b      	b.n	83e7e <Cl_bc_controller+0xb66>
   83e46:	4b43      	ldr	r3, [pc, #268]	; (83f54 <Cl_bc_controller+0xc3c>)
   83e48:	f9b3 3000 	ldrsh.w	r3, [r3]
   83e4c:	2bbe      	cmp	r3, #190	; 0xbe
   83e4e:	dd12      	ble.n	83e76 <Cl_bc_controller+0xb5e>
   83e50:	4b42      	ldr	r3, [pc, #264]	; (83f5c <Cl_bc_controller+0xc44>)
   83e52:	4798      	blx	r3
   83e54:	2004      	movs	r0, #4
   83e56:	4b42      	ldr	r3, [pc, #264]	; (83f60 <Cl_bc_controller+0xc48>)
   83e58:	4798      	blx	r3
   83e5a:	2032      	movs	r0, #50	; 0x32
   83e5c:	4b41      	ldr	r3, [pc, #260]	; (83f64 <Cl_bc_controller+0xc4c>)
   83e5e:	4798      	blx	r3
   83e60:	2004      	movs	r0, #4
   83e62:	4b41      	ldr	r3, [pc, #260]	; (83f68 <Cl_bc_controller+0xc50>)
   83e64:	4798      	blx	r3
   83e66:	2032      	movs	r0, #50	; 0x32
   83e68:	4b3e      	ldr	r3, [pc, #248]	; (83f64 <Cl_bc_controller+0xc4c>)
   83e6a:	4798      	blx	r3
   83e6c:	2101      	movs	r1, #1
   83e6e:	201a      	movs	r0, #26
   83e70:	4b3e      	ldr	r3, [pc, #248]	; (83f6c <Cl_bc_controller+0xc54>)
   83e72:	4798      	blx	r3
   83e74:	e003      	b.n	83e7e <Cl_bc_controller+0xb66>
   83e76:	4b3e      	ldr	r3, [pc, #248]	; (83f70 <Cl_bc_controller+0xc58>)
   83e78:	4798      	blx	r3
   83e7a:	e000      	b.n	83e7e <Cl_bc_controller+0xb66>
   83e7c:	bf00      	nop
   83e7e:	2005      	movs	r0, #5
   83e80:	4b3c      	ldr	r3, [pc, #240]	; (83f74 <Cl_bc_controller+0xc5c>)
   83e82:	4798      	blx	r3
   83e84:	4603      	mov	r3, r0
   83e86:	73fb      	strb	r3, [r7, #15]
   83e88:	2013      	movs	r0, #19
   83e8a:	4b35      	ldr	r3, [pc, #212]	; (83f60 <Cl_bc_controller+0xc48>)
   83e8c:	4798      	blx	r3
   83e8e:	2204      	movs	r2, #4
   83e90:	4939      	ldr	r1, [pc, #228]	; (83f78 <Cl_bc_controller+0xc60>)
   83e92:	2037      	movs	r0, #55	; 0x37
   83e94:	4b39      	ldr	r3, [pc, #228]	; (83f7c <Cl_bc_controller+0xc64>)
   83e96:	4798      	blx	r3
   83e98:	7bfb      	ldrb	r3, [r7, #15]
   83e9a:	2b00      	cmp	r3, #0
   83e9c:	d10e      	bne.n	83ebc <Cl_bc_controller+0xba4>
   83e9e:	4b38      	ldr	r3, [pc, #224]	; (83f80 <Cl_bc_controller+0xc68>)
   83ea0:	781a      	ldrb	r2, [r3, #0]
   83ea2:	4b38      	ldr	r3, [pc, #224]	; (83f84 <Cl_bc_controller+0xc6c>)
   83ea4:	701a      	strb	r2, [r3, #0]
   83ea6:	4b2b      	ldr	r3, [pc, #172]	; (83f54 <Cl_bc_controller+0xc3c>)
   83ea8:	2200      	movs	r2, #0
   83eaa:	801a      	strh	r2, [r3, #0]
   83eac:	4b34      	ldr	r3, [pc, #208]	; (83f80 <Cl_bc_controller+0xc68>)
   83eae:	220c      	movs	r2, #12
   83eb0:	701a      	strb	r2, [r3, #0]
   83eb2:	e003      	b.n	83ebc <Cl_bc_controller+0xba4>
   83eb4:	bf00      	nop
   83eb6:	e048      	b.n	83f4a <Cl_bc_controller+0xc32>
   83eb8:	bf00      	nop
   83eba:	e046      	b.n	83f4a <Cl_bc_controller+0xc32>
   83ebc:	bf00      	nop
   83ebe:	e044      	b.n	83f4a <Cl_bc_controller+0xc32>
   83ec0:	79fb      	ldrb	r3, [r7, #7]
   83ec2:	2b04      	cmp	r3, #4
   83ec4:	d00b      	beq.n	83ede <Cl_bc_controller+0xbc6>
   83ec6:	2b07      	cmp	r3, #7
   83ec8:	d000      	beq.n	83ecc <Cl_bc_controller+0xbb4>
   83eca:	e01a      	b.n	83f02 <Cl_bc_controller+0xbea>
   83ecc:	2005      	movs	r0, #5
   83ece:	4b29      	ldr	r3, [pc, #164]	; (83f74 <Cl_bc_controller+0xc5c>)
   83ed0:	4798      	blx	r3
   83ed2:	4603      	mov	r3, r0
   83ed4:	73fb      	strb	r3, [r7, #15]
   83ed6:	4b2a      	ldr	r3, [pc, #168]	; (83f80 <Cl_bc_controller+0xc68>)
   83ed8:	2211      	movs	r2, #17
   83eda:	701a      	strb	r2, [r3, #0]
   83edc:	e011      	b.n	83f02 <Cl_bc_controller+0xbea>
   83ede:	2007      	movs	r0, #7
   83ee0:	4b24      	ldr	r3, [pc, #144]	; (83f74 <Cl_bc_controller+0xc5c>)
   83ee2:	4798      	blx	r3
   83ee4:	4603      	mov	r3, r0
   83ee6:	73fb      	strb	r3, [r7, #15]
   83ee8:	4b25      	ldr	r3, [pc, #148]	; (83f80 <Cl_bc_controller+0xc68>)
   83eea:	781a      	ldrb	r2, [r3, #0]
   83eec:	4b25      	ldr	r3, [pc, #148]	; (83f84 <Cl_bc_controller+0xc6c>)
   83eee:	701a      	strb	r2, [r3, #0]
   83ef0:	4b23      	ldr	r3, [pc, #140]	; (83f80 <Cl_bc_controller+0xc68>)
   83ef2:	2202      	movs	r2, #2
   83ef4:	701a      	strb	r2, [r3, #0]
   83ef6:	2013      	movs	r0, #19
   83ef8:	4b19      	ldr	r3, [pc, #100]	; (83f60 <Cl_bc_controller+0xc48>)
   83efa:	4798      	blx	r3
   83efc:	4603      	mov	r3, r0
   83efe:	73fb      	strb	r3, [r7, #15]
   83f00:	bf00      	nop
   83f02:	e022      	b.n	83f4a <Cl_bc_controller+0xc32>
   83f04:	79fb      	ldrb	r3, [r7, #7]
   83f06:	2b04      	cmp	r3, #4
   83f08:	d00b      	beq.n	83f22 <Cl_bc_controller+0xc0a>
   83f0a:	2b09      	cmp	r3, #9
   83f0c:	d000      	beq.n	83f10 <Cl_bc_controller+0xbf8>
   83f0e:	e01a      	b.n	83f46 <Cl_bc_controller+0xc2e>
   83f10:	2006      	movs	r0, #6
   83f12:	4b18      	ldr	r3, [pc, #96]	; (83f74 <Cl_bc_controller+0xc5c>)
   83f14:	4798      	blx	r3
   83f16:	4603      	mov	r3, r0
   83f18:	73fb      	strb	r3, [r7, #15]
   83f1a:	4b19      	ldr	r3, [pc, #100]	; (83f80 <Cl_bc_controller+0xc68>)
   83f1c:	2213      	movs	r2, #19
   83f1e:	701a      	strb	r2, [r3, #0]
   83f20:	e011      	b.n	83f46 <Cl_bc_controller+0xc2e>
   83f22:	2007      	movs	r0, #7
   83f24:	4b13      	ldr	r3, [pc, #76]	; (83f74 <Cl_bc_controller+0xc5c>)
   83f26:	4798      	blx	r3
   83f28:	4603      	mov	r3, r0
   83f2a:	73fb      	strb	r3, [r7, #15]
   83f2c:	4b14      	ldr	r3, [pc, #80]	; (83f80 <Cl_bc_controller+0xc68>)
   83f2e:	781a      	ldrb	r2, [r3, #0]
   83f30:	4b14      	ldr	r3, [pc, #80]	; (83f84 <Cl_bc_controller+0xc6c>)
   83f32:	701a      	strb	r2, [r3, #0]
   83f34:	2013      	movs	r0, #19
   83f36:	4b0a      	ldr	r3, [pc, #40]	; (83f60 <Cl_bc_controller+0xc48>)
   83f38:	4798      	blx	r3
   83f3a:	4603      	mov	r3, r0
   83f3c:	73fb      	strb	r3, [r7, #15]
   83f3e:	4b10      	ldr	r3, [pc, #64]	; (83f80 <Cl_bc_controller+0xc68>)
   83f40:	2202      	movs	r2, #2
   83f42:	701a      	strb	r2, [r3, #0]
   83f44:	bf00      	nop
   83f46:	e000      	b.n	83f4a <Cl_bc_controller+0xc32>
   83f48:	bf00      	nop
   83f4a:	2300      	movs	r3, #0
   83f4c:	4618      	mov	r0, r3
   83f4e:	3710      	adds	r7, #16
   83f50:	46bd      	mov	sp, r7
   83f52:	bd80      	pop	{r7, pc}
   83f54:	20071650 	.word	0x20071650
   83f58:	2007164c 	.word	0x2007164c
   83f5c:	00097c19 	.word	0x00097c19
   83f60:	000979ad 	.word	0x000979ad
   83f64:	00091e2d 	.word	0x00091e2d
   83f68:	000979cd 	.word	0x000979cd
   83f6c:	000830a5 	.word	0x000830a5
   83f70:	00097c69 	.word	0x00097c69
   83f74:	00097b9d 	.word	0x00097b9d
   83f78:	20071654 	.word	0x20071654
   83f7c:	00099729 	.word	0x00099729
   83f80:	2007163d 	.word	0x2007163d
   83f84:	2007163e 	.word	0x2007163e

00083f88 <hep_calibration>:
   83f88:	b480      	push	{r7}
   83f8a:	b085      	sub	sp, #20
   83f8c:	af00      	add	r7, sp, #0
   83f8e:	6078      	str	r0, [r7, #4]
   83f90:	2300      	movs	r3, #0
   83f92:	60fb      	str	r3, [r7, #12]
   83f94:	e05d      	b.n	84052 <hep_calibration+0xca>
   83f96:	4a33      	ldr	r2, [pc, #204]	; (84064 <hep_calibration+0xdc>)
   83f98:	68fb      	ldr	r3, [r7, #12]
   83f9a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83f9e:	b29b      	uxth	r3, r3
   83fa0:	461a      	mov	r2, r3
   83fa2:	687b      	ldr	r3, [r7, #4]
   83fa4:	429a      	cmp	r2, r3
   83fa6:	d109      	bne.n	83fbc <hep_calibration+0x34>
   83fa8:	4a2e      	ldr	r2, [pc, #184]	; (84064 <hep_calibration+0xdc>)
   83faa:	68fb      	ldr	r3, [r7, #12]
   83fac:	009b      	lsls	r3, r3, #2
   83fae:	4413      	add	r3, r2
   83fb0:	885b      	ldrh	r3, [r3, #2]
   83fb2:	b29b      	uxth	r3, r3
   83fb4:	461a      	mov	r2, r3
   83fb6:	4b2c      	ldr	r3, [pc, #176]	; (84068 <hep_calibration+0xe0>)
   83fb8:	601a      	str	r2, [r3, #0]
   83fba:	e04d      	b.n	84058 <hep_calibration+0xd0>
   83fbc:	4a29      	ldr	r2, [pc, #164]	; (84064 <hep_calibration+0xdc>)
   83fbe:	68fb      	ldr	r3, [r7, #12]
   83fc0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83fc4:	b29b      	uxth	r3, r3
   83fc6:	461a      	mov	r2, r3
   83fc8:	687b      	ldr	r3, [r7, #4]
   83fca:	429a      	cmp	r2, r3
   83fcc:	d23e      	bcs.n	8404c <hep_calibration+0xc4>
   83fce:	68fb      	ldr	r3, [r7, #12]
   83fd0:	3301      	adds	r3, #1
   83fd2:	4a24      	ldr	r2, [pc, #144]	; (84064 <hep_calibration+0xdc>)
   83fd4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83fd8:	b29b      	uxth	r3, r3
   83fda:	461a      	mov	r2, r3
   83fdc:	687b      	ldr	r3, [r7, #4]
   83fde:	429a      	cmp	r2, r3
   83fe0:	d934      	bls.n	8404c <hep_calibration+0xc4>
   83fe2:	68fb      	ldr	r3, [r7, #12]
   83fe4:	3301      	adds	r3, #1
   83fe6:	4a1f      	ldr	r2, [pc, #124]	; (84064 <hep_calibration+0xdc>)
   83fe8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83fec:	b29b      	uxth	r3, r3
   83fee:	4619      	mov	r1, r3
   83ff0:	4a1c      	ldr	r2, [pc, #112]	; (84064 <hep_calibration+0xdc>)
   83ff2:	68fb      	ldr	r3, [r7, #12]
   83ff4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83ff8:	b29b      	uxth	r3, r3
   83ffa:	1aca      	subs	r2, r1, r3
   83ffc:	68fb      	ldr	r3, [r7, #12]
   83ffe:	3301      	adds	r3, #1
   84000:	4918      	ldr	r1, [pc, #96]	; (84064 <hep_calibration+0xdc>)
   84002:	009b      	lsls	r3, r3, #2
   84004:	440b      	add	r3, r1
   84006:	885b      	ldrh	r3, [r3, #2]
   84008:	b29b      	uxth	r3, r3
   8400a:	4618      	mov	r0, r3
   8400c:	4915      	ldr	r1, [pc, #84]	; (84064 <hep_calibration+0xdc>)
   8400e:	68fb      	ldr	r3, [r7, #12]
   84010:	009b      	lsls	r3, r3, #2
   84012:	440b      	add	r3, r1
   84014:	885b      	ldrh	r3, [r3, #2]
   84016:	b29b      	uxth	r3, r3
   84018:	1ac3      	subs	r3, r0, r3
   8401a:	fb92 f3f3 	sdiv	r3, r2, r3
   8401e:	817b      	strh	r3, [r7, #10]
   84020:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   84024:	490f      	ldr	r1, [pc, #60]	; (84064 <hep_calibration+0xdc>)
   84026:	68fa      	ldr	r2, [r7, #12]
   84028:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   8402c:	b292      	uxth	r2, r2
   8402e:	4611      	mov	r1, r2
   84030:	687a      	ldr	r2, [r7, #4]
   84032:	1a52      	subs	r2, r2, r1
   84034:	fb02 f203 	mul.w	r2, r2, r3
   84038:	490a      	ldr	r1, [pc, #40]	; (84064 <hep_calibration+0xdc>)
   8403a:	68fb      	ldr	r3, [r7, #12]
   8403c:	009b      	lsls	r3, r3, #2
   8403e:	440b      	add	r3, r1
   84040:	885b      	ldrh	r3, [r3, #2]
   84042:	b29b      	uxth	r3, r3
   84044:	4413      	add	r3, r2
   84046:	4a08      	ldr	r2, [pc, #32]	; (84068 <hep_calibration+0xe0>)
   84048:	6013      	str	r3, [r2, #0]
   8404a:	e005      	b.n	84058 <hep_calibration+0xd0>
   8404c:	68fb      	ldr	r3, [r7, #12]
   8404e:	3301      	adds	r3, #1
   84050:	60fb      	str	r3, [r7, #12]
   84052:	68fb      	ldr	r3, [r7, #12]
   84054:	2b01      	cmp	r3, #1
   84056:	dd9e      	ble.n	83f96 <hep_calibration+0xe>
   84058:	bf00      	nop
   8405a:	3714      	adds	r7, #20
   8405c:	46bd      	mov	sp, r7
   8405e:	bc80      	pop	{r7}
   84060:	4770      	bx	lr
   84062:	bf00      	nop
   84064:	20071f40 	.word	0x20071f40
   84068:	20072d78 	.word	0x20072d78

0008406c <calibration_apt>:
   8406c:	b590      	push	{r4, r7, lr}
   8406e:	b085      	sub	sp, #20
   84070:	af00      	add	r7, sp, #0
   84072:	4603      	mov	r3, r0
   84074:	80fb      	strh	r3, [r7, #6]
   84076:	2300      	movs	r3, #0
   84078:	60fb      	str	r3, [r7, #12]
   8407a:	e0a1      	b.n	841c0 <calibration_apt+0x154>
   8407c:	4a54      	ldr	r2, [pc, #336]	; (841d0 <calibration_apt+0x164>)
   8407e:	68fb      	ldr	r3, [r7, #12]
   84080:	009b      	lsls	r3, r3, #2
   84082:	4413      	add	r3, r2
   84084:	885b      	ldrh	r3, [r3, #2]
   84086:	b21b      	sxth	r3, r3
   84088:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8408c:	429a      	cmp	r2, r3
   8408e:	d10b      	bne.n	840a8 <calibration_apt+0x3c>
   84090:	4a4f      	ldr	r2, [pc, #316]	; (841d0 <calibration_apt+0x164>)
   84092:	68fb      	ldr	r3, [r7, #12]
   84094:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84098:	b21a      	sxth	r2, r3
   8409a:	4b4e      	ldr	r3, [pc, #312]	; (841d4 <calibration_apt+0x168>)
   8409c:	4610      	mov	r0, r2
   8409e:	4798      	blx	r3
   840a0:	4602      	mov	r2, r0
   840a2:	4b4d      	ldr	r3, [pc, #308]	; (841d8 <calibration_apt+0x16c>)
   840a4:	601a      	str	r2, [r3, #0]
   840a6:	e088      	b.n	841ba <calibration_apt+0x14e>
   840a8:	4a49      	ldr	r2, [pc, #292]	; (841d0 <calibration_apt+0x164>)
   840aa:	68fb      	ldr	r3, [r7, #12]
   840ac:	009b      	lsls	r3, r3, #2
   840ae:	4413      	add	r3, r2
   840b0:	885b      	ldrh	r3, [r3, #2]
   840b2:	b21b      	sxth	r3, r3
   840b4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   840b8:	429a      	cmp	r2, r3
   840ba:	dd5b      	ble.n	84174 <calibration_apt+0x108>
   840bc:	68fb      	ldr	r3, [r7, #12]
   840be:	3301      	adds	r3, #1
   840c0:	4a43      	ldr	r2, [pc, #268]	; (841d0 <calibration_apt+0x164>)
   840c2:	009b      	lsls	r3, r3, #2
   840c4:	4413      	add	r3, r2
   840c6:	885b      	ldrh	r3, [r3, #2]
   840c8:	b21b      	sxth	r3, r3
   840ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   840ce:	429a      	cmp	r2, r3
   840d0:	da50      	bge.n	84174 <calibration_apt+0x108>
   840d2:	68fb      	ldr	r3, [r7, #12]
   840d4:	3301      	adds	r3, #1
   840d6:	4a3e      	ldr	r2, [pc, #248]	; (841d0 <calibration_apt+0x164>)
   840d8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   840dc:	b21b      	sxth	r3, r3
   840de:	4619      	mov	r1, r3
   840e0:	4a3b      	ldr	r2, [pc, #236]	; (841d0 <calibration_apt+0x164>)
   840e2:	68fb      	ldr	r3, [r7, #12]
   840e4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   840e8:	b21b      	sxth	r3, r3
   840ea:	1acb      	subs	r3, r1, r3
   840ec:	2264      	movs	r2, #100	; 0x64
   840ee:	fb02 f203 	mul.w	r2, r2, r3
   840f2:	68fb      	ldr	r3, [r7, #12]
   840f4:	3301      	adds	r3, #1
   840f6:	4936      	ldr	r1, [pc, #216]	; (841d0 <calibration_apt+0x164>)
   840f8:	009b      	lsls	r3, r3, #2
   840fa:	440b      	add	r3, r1
   840fc:	885b      	ldrh	r3, [r3, #2]
   840fe:	b21b      	sxth	r3, r3
   84100:	4618      	mov	r0, r3
   84102:	4933      	ldr	r1, [pc, #204]	; (841d0 <calibration_apt+0x164>)
   84104:	68fb      	ldr	r3, [r7, #12]
   84106:	009b      	lsls	r3, r3, #2
   84108:	440b      	add	r3, r1
   8410a:	885b      	ldrh	r3, [r3, #2]
   8410c:	b21b      	sxth	r3, r3
   8410e:	1ac3      	subs	r3, r0, r3
   84110:	fb92 f2f3 	sdiv	r2, r2, r3
   84114:	4b2f      	ldr	r3, [pc, #188]	; (841d4 <calibration_apt+0x168>)
   84116:	4610      	mov	r0, r2
   84118:	4798      	blx	r3
   8411a:	4603      	mov	r3, r0
   8411c:	60bb      	str	r3, [r7, #8]
   8411e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84122:	492b      	ldr	r1, [pc, #172]	; (841d0 <calibration_apt+0x164>)
   84124:	68fb      	ldr	r3, [r7, #12]
   84126:	009b      	lsls	r3, r3, #2
   84128:	440b      	add	r3, r1
   8412a:	885b      	ldrh	r3, [r3, #2]
   8412c:	b21b      	sxth	r3, r3
   8412e:	1ad2      	subs	r2, r2, r3
   84130:	4b28      	ldr	r3, [pc, #160]	; (841d4 <calibration_apt+0x168>)
   84132:	4610      	mov	r0, r2
   84134:	4798      	blx	r3
   84136:	4602      	mov	r2, r0
   84138:	4b28      	ldr	r3, [pc, #160]	; (841dc <calibration_apt+0x170>)
   8413a:	68b9      	ldr	r1, [r7, #8]
   8413c:	4610      	mov	r0, r2
   8413e:	4798      	blx	r3
   84140:	4603      	mov	r3, r0
   84142:	461a      	mov	r2, r3
   84144:	4b26      	ldr	r3, [pc, #152]	; (841e0 <calibration_apt+0x174>)
   84146:	4927      	ldr	r1, [pc, #156]	; (841e4 <calibration_apt+0x178>)
   84148:	4610      	mov	r0, r2
   8414a:	4798      	blx	r3
   8414c:	4603      	mov	r3, r0
   8414e:	461c      	mov	r4, r3
   84150:	4a1f      	ldr	r2, [pc, #124]	; (841d0 <calibration_apt+0x164>)
   84152:	68fb      	ldr	r3, [r7, #12]
   84154:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84158:	b21a      	sxth	r2, r3
   8415a:	4b1e      	ldr	r3, [pc, #120]	; (841d4 <calibration_apt+0x168>)
   8415c:	4610      	mov	r0, r2
   8415e:	4798      	blx	r3
   84160:	4602      	mov	r2, r0
   84162:	4b21      	ldr	r3, [pc, #132]	; (841e8 <calibration_apt+0x17c>)
   84164:	4611      	mov	r1, r2
   84166:	4620      	mov	r0, r4
   84168:	4798      	blx	r3
   8416a:	4603      	mov	r3, r0
   8416c:	461a      	mov	r2, r3
   8416e:	4b1a      	ldr	r3, [pc, #104]	; (841d8 <calibration_apt+0x16c>)
   84170:	601a      	str	r2, [r3, #0]
   84172:	e022      	b.n	841ba <calibration_apt+0x14e>
   84174:	4b16      	ldr	r3, [pc, #88]	; (841d0 <calibration_apt+0x164>)
   84176:	885b      	ldrh	r3, [r3, #2]
   84178:	b21b      	sxth	r3, r3
   8417a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8417e:	429a      	cmp	r2, r3
   84180:	da09      	bge.n	84196 <calibration_apt+0x12a>
   84182:	4b13      	ldr	r3, [pc, #76]	; (841d0 <calibration_apt+0x164>)
   84184:	881b      	ldrh	r3, [r3, #0]
   84186:	b21a      	sxth	r2, r3
   84188:	4b12      	ldr	r3, [pc, #72]	; (841d4 <calibration_apt+0x168>)
   8418a:	4610      	mov	r0, r2
   8418c:	4798      	blx	r3
   8418e:	4602      	mov	r2, r0
   84190:	4b11      	ldr	r3, [pc, #68]	; (841d8 <calibration_apt+0x16c>)
   84192:	601a      	str	r2, [r3, #0]
   84194:	e011      	b.n	841ba <calibration_apt+0x14e>
   84196:	4b0e      	ldr	r3, [pc, #56]	; (841d0 <calibration_apt+0x164>)
   84198:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
   8419c:	b21b      	sxth	r3, r3
   8419e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   841a2:	429a      	cmp	r2, r3
   841a4:	dd09      	ble.n	841ba <calibration_apt+0x14e>
   841a6:	4b0a      	ldr	r3, [pc, #40]	; (841d0 <calibration_apt+0x164>)
   841a8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
   841ac:	b21a      	sxth	r2, r3
   841ae:	4b09      	ldr	r3, [pc, #36]	; (841d4 <calibration_apt+0x168>)
   841b0:	4610      	mov	r0, r2
   841b2:	4798      	blx	r3
   841b4:	4602      	mov	r2, r0
   841b6:	4b08      	ldr	r3, [pc, #32]	; (841d8 <calibration_apt+0x16c>)
   841b8:	601a      	str	r2, [r3, #0]
   841ba:	68fb      	ldr	r3, [r7, #12]
   841bc:	3301      	adds	r3, #1
   841be:	60fb      	str	r3, [r7, #12]
   841c0:	68fb      	ldr	r3, [r7, #12]
   841c2:	2b19      	cmp	r3, #25
   841c4:	f77f af5a 	ble.w	8407c <calibration_apt+0x10>
   841c8:	bf00      	nop
   841ca:	3714      	adds	r7, #20
   841cc:	46bd      	mov	sp, r7
   841ce:	bd90      	pop	{r4, r7, pc}
   841d0:	2007011c 	.word	0x2007011c
   841d4:	000a3d6d 	.word	0x000a3d6d
   841d8:	20072d74 	.word	0x20072d74
   841dc:	000a3e15 	.word	0x000a3e15
   841e0:	000a3f7d 	.word	0x000a3f7d
   841e4:	42c80000 	.word	0x42c80000
   841e8:	000a3c05 	.word	0x000a3c05

000841ec <calibration_vpt>:
   841ec:	b590      	push	{r4, r7, lr}
   841ee:	b085      	sub	sp, #20
   841f0:	af00      	add	r7, sp, #0
   841f2:	4603      	mov	r3, r0
   841f4:	80fb      	strh	r3, [r7, #6]
   841f6:	2300      	movs	r3, #0
   841f8:	60fb      	str	r3, [r7, #12]
   841fa:	e0a1      	b.n	84340 <calibration_vpt+0x154>
   841fc:	4a54      	ldr	r2, [pc, #336]	; (84350 <calibration_vpt+0x164>)
   841fe:	68fb      	ldr	r3, [r7, #12]
   84200:	009b      	lsls	r3, r3, #2
   84202:	4413      	add	r3, r2
   84204:	885b      	ldrh	r3, [r3, #2]
   84206:	b21b      	sxth	r3, r3
   84208:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8420c:	429a      	cmp	r2, r3
   8420e:	d10b      	bne.n	84228 <calibration_vpt+0x3c>
   84210:	4a4f      	ldr	r2, [pc, #316]	; (84350 <calibration_vpt+0x164>)
   84212:	68fb      	ldr	r3, [r7, #12]
   84214:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84218:	b21a      	sxth	r2, r3
   8421a:	4b4e      	ldr	r3, [pc, #312]	; (84354 <calibration_vpt+0x168>)
   8421c:	4610      	mov	r0, r2
   8421e:	4798      	blx	r3
   84220:	4602      	mov	r2, r0
   84222:	4b4d      	ldr	r3, [pc, #308]	; (84358 <calibration_vpt+0x16c>)
   84224:	601a      	str	r2, [r3, #0]
   84226:	e08f      	b.n	84348 <calibration_vpt+0x15c>
   84228:	4a49      	ldr	r2, [pc, #292]	; (84350 <calibration_vpt+0x164>)
   8422a:	68fb      	ldr	r3, [r7, #12]
   8422c:	009b      	lsls	r3, r3, #2
   8422e:	4413      	add	r3, r2
   84230:	885b      	ldrh	r3, [r3, #2]
   84232:	b21b      	sxth	r3, r3
   84234:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84238:	429a      	cmp	r2, r3
   8423a:	dd5b      	ble.n	842f4 <calibration_vpt+0x108>
   8423c:	68fb      	ldr	r3, [r7, #12]
   8423e:	3301      	adds	r3, #1
   84240:	4a43      	ldr	r2, [pc, #268]	; (84350 <calibration_vpt+0x164>)
   84242:	009b      	lsls	r3, r3, #2
   84244:	4413      	add	r3, r2
   84246:	885b      	ldrh	r3, [r3, #2]
   84248:	b21b      	sxth	r3, r3
   8424a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8424e:	429a      	cmp	r2, r3
   84250:	da50      	bge.n	842f4 <calibration_vpt+0x108>
   84252:	68fb      	ldr	r3, [r7, #12]
   84254:	3301      	adds	r3, #1
   84256:	4a3e      	ldr	r2, [pc, #248]	; (84350 <calibration_vpt+0x164>)
   84258:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8425c:	b21b      	sxth	r3, r3
   8425e:	4619      	mov	r1, r3
   84260:	4a3b      	ldr	r2, [pc, #236]	; (84350 <calibration_vpt+0x164>)
   84262:	68fb      	ldr	r3, [r7, #12]
   84264:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84268:	b21b      	sxth	r3, r3
   8426a:	1acb      	subs	r3, r1, r3
   8426c:	2264      	movs	r2, #100	; 0x64
   8426e:	fb02 f203 	mul.w	r2, r2, r3
   84272:	68fb      	ldr	r3, [r7, #12]
   84274:	3301      	adds	r3, #1
   84276:	4936      	ldr	r1, [pc, #216]	; (84350 <calibration_vpt+0x164>)
   84278:	009b      	lsls	r3, r3, #2
   8427a:	440b      	add	r3, r1
   8427c:	885b      	ldrh	r3, [r3, #2]
   8427e:	b21b      	sxth	r3, r3
   84280:	4618      	mov	r0, r3
   84282:	4933      	ldr	r1, [pc, #204]	; (84350 <calibration_vpt+0x164>)
   84284:	68fb      	ldr	r3, [r7, #12]
   84286:	009b      	lsls	r3, r3, #2
   84288:	440b      	add	r3, r1
   8428a:	885b      	ldrh	r3, [r3, #2]
   8428c:	b21b      	sxth	r3, r3
   8428e:	1ac3      	subs	r3, r0, r3
   84290:	fb92 f2f3 	sdiv	r2, r2, r3
   84294:	4b2f      	ldr	r3, [pc, #188]	; (84354 <calibration_vpt+0x168>)
   84296:	4610      	mov	r0, r2
   84298:	4798      	blx	r3
   8429a:	4603      	mov	r3, r0
   8429c:	60bb      	str	r3, [r7, #8]
   8429e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   842a2:	492b      	ldr	r1, [pc, #172]	; (84350 <calibration_vpt+0x164>)
   842a4:	68fb      	ldr	r3, [r7, #12]
   842a6:	009b      	lsls	r3, r3, #2
   842a8:	440b      	add	r3, r1
   842aa:	885b      	ldrh	r3, [r3, #2]
   842ac:	b21b      	sxth	r3, r3
   842ae:	1ad2      	subs	r2, r2, r3
   842b0:	4b28      	ldr	r3, [pc, #160]	; (84354 <calibration_vpt+0x168>)
   842b2:	4610      	mov	r0, r2
   842b4:	4798      	blx	r3
   842b6:	4602      	mov	r2, r0
   842b8:	4b28      	ldr	r3, [pc, #160]	; (8435c <calibration_vpt+0x170>)
   842ba:	68b9      	ldr	r1, [r7, #8]
   842bc:	4610      	mov	r0, r2
   842be:	4798      	blx	r3
   842c0:	4603      	mov	r3, r0
   842c2:	461a      	mov	r2, r3
   842c4:	4b26      	ldr	r3, [pc, #152]	; (84360 <calibration_vpt+0x174>)
   842c6:	4927      	ldr	r1, [pc, #156]	; (84364 <calibration_vpt+0x178>)
   842c8:	4610      	mov	r0, r2
   842ca:	4798      	blx	r3
   842cc:	4603      	mov	r3, r0
   842ce:	461c      	mov	r4, r3
   842d0:	4a1f      	ldr	r2, [pc, #124]	; (84350 <calibration_vpt+0x164>)
   842d2:	68fb      	ldr	r3, [r7, #12]
   842d4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   842d8:	b21a      	sxth	r2, r3
   842da:	4b1e      	ldr	r3, [pc, #120]	; (84354 <calibration_vpt+0x168>)
   842dc:	4610      	mov	r0, r2
   842de:	4798      	blx	r3
   842e0:	4602      	mov	r2, r0
   842e2:	4b21      	ldr	r3, [pc, #132]	; (84368 <calibration_vpt+0x17c>)
   842e4:	4611      	mov	r1, r2
   842e6:	4620      	mov	r0, r4
   842e8:	4798      	blx	r3
   842ea:	4603      	mov	r3, r0
   842ec:	461a      	mov	r2, r3
   842ee:	4b1a      	ldr	r3, [pc, #104]	; (84358 <calibration_vpt+0x16c>)
   842f0:	601a      	str	r2, [r3, #0]
   842f2:	e029      	b.n	84348 <calibration_vpt+0x15c>
   842f4:	4b16      	ldr	r3, [pc, #88]	; (84350 <calibration_vpt+0x164>)
   842f6:	885b      	ldrh	r3, [r3, #2]
   842f8:	b21b      	sxth	r3, r3
   842fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   842fe:	429a      	cmp	r2, r3
   84300:	da09      	bge.n	84316 <calibration_vpt+0x12a>
   84302:	4b13      	ldr	r3, [pc, #76]	; (84350 <calibration_vpt+0x164>)
   84304:	881b      	ldrh	r3, [r3, #0]
   84306:	b21a      	sxth	r2, r3
   84308:	4b12      	ldr	r3, [pc, #72]	; (84354 <calibration_vpt+0x168>)
   8430a:	4610      	mov	r0, r2
   8430c:	4798      	blx	r3
   8430e:	4602      	mov	r2, r0
   84310:	4b16      	ldr	r3, [pc, #88]	; (8436c <calibration_vpt+0x180>)
   84312:	601a      	str	r2, [r3, #0]
   84314:	e011      	b.n	8433a <calibration_vpt+0x14e>
   84316:	4b0e      	ldr	r3, [pc, #56]	; (84350 <calibration_vpt+0x164>)
   84318:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
   8431c:	b21b      	sxth	r3, r3
   8431e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84322:	429a      	cmp	r2, r3
   84324:	dd09      	ble.n	8433a <calibration_vpt+0x14e>
   84326:	4b0a      	ldr	r3, [pc, #40]	; (84350 <calibration_vpt+0x164>)
   84328:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
   8432c:	b21a      	sxth	r2, r3
   8432e:	4b09      	ldr	r3, [pc, #36]	; (84354 <calibration_vpt+0x168>)
   84330:	4610      	mov	r0, r2
   84332:	4798      	blx	r3
   84334:	4602      	mov	r2, r0
   84336:	4b0d      	ldr	r3, [pc, #52]	; (8436c <calibration_vpt+0x180>)
   84338:	601a      	str	r2, [r3, #0]
   8433a:	68fb      	ldr	r3, [r7, #12]
   8433c:	3301      	adds	r3, #1
   8433e:	60fb      	str	r3, [r7, #12]
   84340:	68fb      	ldr	r3, [r7, #12]
   84342:	2b19      	cmp	r3, #25
   84344:	f77f af5a 	ble.w	841fc <calibration_vpt+0x10>
   84348:	bf00      	nop
   8434a:	3714      	adds	r7, #20
   8434c:	46bd      	mov	sp, r7
   8434e:	bd90      	pop	{r4, r7, pc}
   84350:	20070184 	.word	0x20070184
   84354:	000a3d6d 	.word	0x000a3d6d
   84358:	2007165c 	.word	0x2007165c
   8435c:	000a3e15 	.word	0x000a3e15
   84360:	000a3f7d 	.word	0x000a3f7d
   84364:	42c80000 	.word	0x42c80000
   84368:	000a3c05 	.word	0x000a3c05
   8436c:	20072d74 	.word	0x20072d74

00084370 <calibration_ps1>:
   84370:	b580      	push	{r7, lr}
   84372:	b084      	sub	sp, #16
   84374:	af00      	add	r7, sp, #0
   84376:	4603      	mov	r3, r0
   84378:	80fb      	strh	r3, [r7, #6]
   8437a:	2300      	movs	r3, #0
   8437c:	60fb      	str	r3, [r7, #12]
   8437e:	e06f      	b.n	84460 <calibration_ps1+0xf0>
   84380:	4a3b      	ldr	r2, [pc, #236]	; (84470 <calibration_ps1+0x100>)
   84382:	68fb      	ldr	r3, [r7, #12]
   84384:	009b      	lsls	r3, r3, #2
   84386:	4413      	add	r3, r2
   84388:	885b      	ldrh	r3, [r3, #2]
   8438a:	b21b      	sxth	r3, r3
   8438c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84390:	429a      	cmp	r2, r3
   84392:	d10b      	bne.n	843ac <calibration_ps1+0x3c>
   84394:	4a36      	ldr	r2, [pc, #216]	; (84470 <calibration_ps1+0x100>)
   84396:	68fb      	ldr	r3, [r7, #12]
   84398:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8439c:	b21a      	sxth	r2, r3
   8439e:	4b35      	ldr	r3, [pc, #212]	; (84474 <calibration_ps1+0x104>)
   843a0:	4610      	mov	r0, r2
   843a2:	4798      	blx	r3
   843a4:	4602      	mov	r2, r0
   843a6:	4b34      	ldr	r3, [pc, #208]	; (84478 <calibration_ps1+0x108>)
   843a8:	601a      	str	r2, [r3, #0]
   843aa:	e05c      	b.n	84466 <calibration_ps1+0xf6>
   843ac:	4a30      	ldr	r2, [pc, #192]	; (84470 <calibration_ps1+0x100>)
   843ae:	68fb      	ldr	r3, [r7, #12]
   843b0:	009b      	lsls	r3, r3, #2
   843b2:	4413      	add	r3, r2
   843b4:	885b      	ldrh	r3, [r3, #2]
   843b6:	b21b      	sxth	r3, r3
   843b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   843bc:	429a      	cmp	r2, r3
   843be:	dd4c      	ble.n	8445a <calibration_ps1+0xea>
   843c0:	68fb      	ldr	r3, [r7, #12]
   843c2:	3301      	adds	r3, #1
   843c4:	4a2a      	ldr	r2, [pc, #168]	; (84470 <calibration_ps1+0x100>)
   843c6:	009b      	lsls	r3, r3, #2
   843c8:	4413      	add	r3, r2
   843ca:	885b      	ldrh	r3, [r3, #2]
   843cc:	b21b      	sxth	r3, r3
   843ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   843d2:	429a      	cmp	r2, r3
   843d4:	da41      	bge.n	8445a <calibration_ps1+0xea>
   843d6:	68fb      	ldr	r3, [r7, #12]
   843d8:	3301      	adds	r3, #1
   843da:	4a25      	ldr	r2, [pc, #148]	; (84470 <calibration_ps1+0x100>)
   843dc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   843e0:	b21b      	sxth	r3, r3
   843e2:	4619      	mov	r1, r3
   843e4:	4a22      	ldr	r2, [pc, #136]	; (84470 <calibration_ps1+0x100>)
   843e6:	68fb      	ldr	r3, [r7, #12]
   843e8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   843ec:	b21b      	sxth	r3, r3
   843ee:	1acb      	subs	r3, r1, r3
   843f0:	2264      	movs	r2, #100	; 0x64
   843f2:	fb02 f203 	mul.w	r2, r2, r3
   843f6:	68fb      	ldr	r3, [r7, #12]
   843f8:	3301      	adds	r3, #1
   843fa:	491d      	ldr	r1, [pc, #116]	; (84470 <calibration_ps1+0x100>)
   843fc:	009b      	lsls	r3, r3, #2
   843fe:	440b      	add	r3, r1
   84400:	885b      	ldrh	r3, [r3, #2]
   84402:	b21b      	sxth	r3, r3
   84404:	4618      	mov	r0, r3
   84406:	491a      	ldr	r1, [pc, #104]	; (84470 <calibration_ps1+0x100>)
   84408:	68fb      	ldr	r3, [r7, #12]
   8440a:	009b      	lsls	r3, r3, #2
   8440c:	440b      	add	r3, r1
   8440e:	885b      	ldrh	r3, [r3, #2]
   84410:	b21b      	sxth	r3, r3
   84412:	1ac3      	subs	r3, r0, r3
   84414:	fb92 f3f3 	sdiv	r3, r2, r3
   84418:	817b      	strh	r3, [r7, #10]
   8441a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   8441e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   84422:	4813      	ldr	r0, [pc, #76]	; (84470 <calibration_ps1+0x100>)
   84424:	68fb      	ldr	r3, [r7, #12]
   84426:	009b      	lsls	r3, r3, #2
   84428:	4403      	add	r3, r0
   8442a:	885b      	ldrh	r3, [r3, #2]
   8442c:	b21b      	sxth	r3, r3
   8442e:	1acb      	subs	r3, r1, r3
   84430:	fb03 f302 	mul.w	r3, r3, r2
   84434:	4a11      	ldr	r2, [pc, #68]	; (8447c <calibration_ps1+0x10c>)
   84436:	fb82 1203 	smull	r1, r2, r2, r3
   8443a:	1152      	asrs	r2, r2, #5
   8443c:	17db      	asrs	r3, r3, #31
   8443e:	1ad3      	subs	r3, r2, r3
   84440:	490b      	ldr	r1, [pc, #44]	; (84470 <calibration_ps1+0x100>)
   84442:	68fa      	ldr	r2, [r7, #12]
   84444:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   84448:	b212      	sxth	r2, r2
   8444a:	441a      	add	r2, r3
   8444c:	4b09      	ldr	r3, [pc, #36]	; (84474 <calibration_ps1+0x104>)
   8444e:	4610      	mov	r0, r2
   84450:	4798      	blx	r3
   84452:	4602      	mov	r2, r0
   84454:	4b08      	ldr	r3, [pc, #32]	; (84478 <calibration_ps1+0x108>)
   84456:	601a      	str	r2, [r3, #0]
   84458:	e005      	b.n	84466 <calibration_ps1+0xf6>
   8445a:	68fb      	ldr	r3, [r7, #12]
   8445c:	3301      	adds	r3, #1
   8445e:	60fb      	str	r3, [r7, #12]
   84460:	68fb      	ldr	r3, [r7, #12]
   84462:	2b1a      	cmp	r3, #26
   84464:	dd8c      	ble.n	84380 <calibration_ps1+0x10>
   84466:	bf00      	nop
   84468:	3710      	adds	r7, #16
   8446a:	46bd      	mov	sp, r7
   8446c:	bd80      	pop	{r7, pc}
   8446e:	bf00      	nop
   84470:	20070224 	.word	0x20070224
   84474:	000a3d6d 	.word	0x000a3d6d
   84478:	20071660 	.word	0x20071660
   8447c:	51eb851f 	.word	0x51eb851f

00084480 <calibration_ps2>:
   84480:	b580      	push	{r7, lr}
   84482:	b084      	sub	sp, #16
   84484:	af00      	add	r7, sp, #0
   84486:	4603      	mov	r3, r0
   84488:	80fb      	strh	r3, [r7, #6]
   8448a:	2300      	movs	r3, #0
   8448c:	60fb      	str	r3, [r7, #12]
   8448e:	e06f      	b.n	84570 <calibration_ps2+0xf0>
   84490:	4a3b      	ldr	r2, [pc, #236]	; (84580 <calibration_ps2+0x100>)
   84492:	68fb      	ldr	r3, [r7, #12]
   84494:	009b      	lsls	r3, r3, #2
   84496:	4413      	add	r3, r2
   84498:	885b      	ldrh	r3, [r3, #2]
   8449a:	b21b      	sxth	r3, r3
   8449c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   844a0:	429a      	cmp	r2, r3
   844a2:	d10b      	bne.n	844bc <calibration_ps2+0x3c>
   844a4:	4a36      	ldr	r2, [pc, #216]	; (84580 <calibration_ps2+0x100>)
   844a6:	68fb      	ldr	r3, [r7, #12]
   844a8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   844ac:	b21a      	sxth	r2, r3
   844ae:	4b35      	ldr	r3, [pc, #212]	; (84584 <calibration_ps2+0x104>)
   844b0:	4610      	mov	r0, r2
   844b2:	4798      	blx	r3
   844b4:	4602      	mov	r2, r0
   844b6:	4b34      	ldr	r3, [pc, #208]	; (84588 <calibration_ps2+0x108>)
   844b8:	601a      	str	r2, [r3, #0]
   844ba:	e05c      	b.n	84576 <calibration_ps2+0xf6>
   844bc:	4a30      	ldr	r2, [pc, #192]	; (84580 <calibration_ps2+0x100>)
   844be:	68fb      	ldr	r3, [r7, #12]
   844c0:	009b      	lsls	r3, r3, #2
   844c2:	4413      	add	r3, r2
   844c4:	885b      	ldrh	r3, [r3, #2]
   844c6:	b21b      	sxth	r3, r3
   844c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   844cc:	429a      	cmp	r2, r3
   844ce:	dd4c      	ble.n	8456a <calibration_ps2+0xea>
   844d0:	68fb      	ldr	r3, [r7, #12]
   844d2:	3301      	adds	r3, #1
   844d4:	4a2a      	ldr	r2, [pc, #168]	; (84580 <calibration_ps2+0x100>)
   844d6:	009b      	lsls	r3, r3, #2
   844d8:	4413      	add	r3, r2
   844da:	885b      	ldrh	r3, [r3, #2]
   844dc:	b21b      	sxth	r3, r3
   844de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   844e2:	429a      	cmp	r2, r3
   844e4:	da41      	bge.n	8456a <calibration_ps2+0xea>
   844e6:	68fb      	ldr	r3, [r7, #12]
   844e8:	3301      	adds	r3, #1
   844ea:	4a25      	ldr	r2, [pc, #148]	; (84580 <calibration_ps2+0x100>)
   844ec:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   844f0:	b21b      	sxth	r3, r3
   844f2:	4619      	mov	r1, r3
   844f4:	4a22      	ldr	r2, [pc, #136]	; (84580 <calibration_ps2+0x100>)
   844f6:	68fb      	ldr	r3, [r7, #12]
   844f8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   844fc:	b21b      	sxth	r3, r3
   844fe:	1acb      	subs	r3, r1, r3
   84500:	2264      	movs	r2, #100	; 0x64
   84502:	fb02 f203 	mul.w	r2, r2, r3
   84506:	68fb      	ldr	r3, [r7, #12]
   84508:	3301      	adds	r3, #1
   8450a:	491d      	ldr	r1, [pc, #116]	; (84580 <calibration_ps2+0x100>)
   8450c:	009b      	lsls	r3, r3, #2
   8450e:	440b      	add	r3, r1
   84510:	885b      	ldrh	r3, [r3, #2]
   84512:	b21b      	sxth	r3, r3
   84514:	4618      	mov	r0, r3
   84516:	491a      	ldr	r1, [pc, #104]	; (84580 <calibration_ps2+0x100>)
   84518:	68fb      	ldr	r3, [r7, #12]
   8451a:	009b      	lsls	r3, r3, #2
   8451c:	440b      	add	r3, r1
   8451e:	885b      	ldrh	r3, [r3, #2]
   84520:	b21b      	sxth	r3, r3
   84522:	1ac3      	subs	r3, r0, r3
   84524:	fb92 f3f3 	sdiv	r3, r2, r3
   84528:	817b      	strh	r3, [r7, #10]
   8452a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   8452e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   84532:	4813      	ldr	r0, [pc, #76]	; (84580 <calibration_ps2+0x100>)
   84534:	68fb      	ldr	r3, [r7, #12]
   84536:	009b      	lsls	r3, r3, #2
   84538:	4403      	add	r3, r0
   8453a:	885b      	ldrh	r3, [r3, #2]
   8453c:	b21b      	sxth	r3, r3
   8453e:	1acb      	subs	r3, r1, r3
   84540:	fb03 f302 	mul.w	r3, r3, r2
   84544:	4a11      	ldr	r2, [pc, #68]	; (8458c <calibration_ps2+0x10c>)
   84546:	fb82 1203 	smull	r1, r2, r2, r3
   8454a:	1152      	asrs	r2, r2, #5
   8454c:	17db      	asrs	r3, r3, #31
   8454e:	1ad3      	subs	r3, r2, r3
   84550:	490b      	ldr	r1, [pc, #44]	; (84580 <calibration_ps2+0x100>)
   84552:	68fa      	ldr	r2, [r7, #12]
   84554:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   84558:	b212      	sxth	r2, r2
   8455a:	441a      	add	r2, r3
   8455c:	4b09      	ldr	r3, [pc, #36]	; (84584 <calibration_ps2+0x104>)
   8455e:	4610      	mov	r0, r2
   84560:	4798      	blx	r3
   84562:	4602      	mov	r2, r0
   84564:	4b08      	ldr	r3, [pc, #32]	; (84588 <calibration_ps2+0x108>)
   84566:	601a      	str	r2, [r3, #0]
   84568:	e005      	b.n	84576 <calibration_ps2+0xf6>
   8456a:	68fb      	ldr	r3, [r7, #12]
   8456c:	3301      	adds	r3, #1
   8456e:	60fb      	str	r3, [r7, #12]
   84570:	68fb      	ldr	r3, [r7, #12]
   84572:	2b1a      	cmp	r3, #26
   84574:	dd8c      	ble.n	84490 <calibration_ps2+0x10>
   84576:	bf00      	nop
   84578:	3710      	adds	r7, #16
   8457a:	46bd      	mov	sp, r7
   8457c:	bd80      	pop	{r7, pc}
   8457e:	bf00      	nop
   84580:	20070290 	.word	0x20070290
   84584:	000a3d6d 	.word	0x000a3d6d
   84588:	20071664 	.word	0x20071664
   8458c:	51eb851f 	.word	0x51eb851f

00084590 <calibration_ps3>:
   84590:	b580      	push	{r7, lr}
   84592:	b084      	sub	sp, #16
   84594:	af00      	add	r7, sp, #0
   84596:	4603      	mov	r3, r0
   84598:	80fb      	strh	r3, [r7, #6]
   8459a:	2300      	movs	r3, #0
   8459c:	60fb      	str	r3, [r7, #12]
   8459e:	e06f      	b.n	84680 <calibration_ps3+0xf0>
   845a0:	4a3b      	ldr	r2, [pc, #236]	; (84690 <calibration_ps3+0x100>)
   845a2:	68fb      	ldr	r3, [r7, #12]
   845a4:	009b      	lsls	r3, r3, #2
   845a6:	4413      	add	r3, r2
   845a8:	885b      	ldrh	r3, [r3, #2]
   845aa:	b21b      	sxth	r3, r3
   845ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   845b0:	429a      	cmp	r2, r3
   845b2:	d10b      	bne.n	845cc <calibration_ps3+0x3c>
   845b4:	4a36      	ldr	r2, [pc, #216]	; (84690 <calibration_ps3+0x100>)
   845b6:	68fb      	ldr	r3, [r7, #12]
   845b8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   845bc:	b21a      	sxth	r2, r3
   845be:	4b35      	ldr	r3, [pc, #212]	; (84694 <calibration_ps3+0x104>)
   845c0:	4610      	mov	r0, r2
   845c2:	4798      	blx	r3
   845c4:	4602      	mov	r2, r0
   845c6:	4b34      	ldr	r3, [pc, #208]	; (84698 <calibration_ps3+0x108>)
   845c8:	601a      	str	r2, [r3, #0]
   845ca:	e05c      	b.n	84686 <calibration_ps3+0xf6>
   845cc:	4a30      	ldr	r2, [pc, #192]	; (84690 <calibration_ps3+0x100>)
   845ce:	68fb      	ldr	r3, [r7, #12]
   845d0:	009b      	lsls	r3, r3, #2
   845d2:	4413      	add	r3, r2
   845d4:	885b      	ldrh	r3, [r3, #2]
   845d6:	b21b      	sxth	r3, r3
   845d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   845dc:	429a      	cmp	r2, r3
   845de:	dd4c      	ble.n	8467a <calibration_ps3+0xea>
   845e0:	68fb      	ldr	r3, [r7, #12]
   845e2:	3301      	adds	r3, #1
   845e4:	4a2a      	ldr	r2, [pc, #168]	; (84690 <calibration_ps3+0x100>)
   845e6:	009b      	lsls	r3, r3, #2
   845e8:	4413      	add	r3, r2
   845ea:	885b      	ldrh	r3, [r3, #2]
   845ec:	b21b      	sxth	r3, r3
   845ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   845f2:	429a      	cmp	r2, r3
   845f4:	da41      	bge.n	8467a <calibration_ps3+0xea>
   845f6:	68fb      	ldr	r3, [r7, #12]
   845f8:	3301      	adds	r3, #1
   845fa:	4a25      	ldr	r2, [pc, #148]	; (84690 <calibration_ps3+0x100>)
   845fc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84600:	b21b      	sxth	r3, r3
   84602:	4619      	mov	r1, r3
   84604:	4a22      	ldr	r2, [pc, #136]	; (84690 <calibration_ps3+0x100>)
   84606:	68fb      	ldr	r3, [r7, #12]
   84608:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8460c:	b21b      	sxth	r3, r3
   8460e:	1acb      	subs	r3, r1, r3
   84610:	2264      	movs	r2, #100	; 0x64
   84612:	fb02 f203 	mul.w	r2, r2, r3
   84616:	68fb      	ldr	r3, [r7, #12]
   84618:	3301      	adds	r3, #1
   8461a:	491d      	ldr	r1, [pc, #116]	; (84690 <calibration_ps3+0x100>)
   8461c:	009b      	lsls	r3, r3, #2
   8461e:	440b      	add	r3, r1
   84620:	885b      	ldrh	r3, [r3, #2]
   84622:	b21b      	sxth	r3, r3
   84624:	4618      	mov	r0, r3
   84626:	491a      	ldr	r1, [pc, #104]	; (84690 <calibration_ps3+0x100>)
   84628:	68fb      	ldr	r3, [r7, #12]
   8462a:	009b      	lsls	r3, r3, #2
   8462c:	440b      	add	r3, r1
   8462e:	885b      	ldrh	r3, [r3, #2]
   84630:	b21b      	sxth	r3, r3
   84632:	1ac3      	subs	r3, r0, r3
   84634:	fb92 f3f3 	sdiv	r3, r2, r3
   84638:	817b      	strh	r3, [r7, #10]
   8463a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   8463e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   84642:	4813      	ldr	r0, [pc, #76]	; (84690 <calibration_ps3+0x100>)
   84644:	68fb      	ldr	r3, [r7, #12]
   84646:	009b      	lsls	r3, r3, #2
   84648:	4403      	add	r3, r0
   8464a:	885b      	ldrh	r3, [r3, #2]
   8464c:	b21b      	sxth	r3, r3
   8464e:	1acb      	subs	r3, r1, r3
   84650:	fb03 f302 	mul.w	r3, r3, r2
   84654:	4a11      	ldr	r2, [pc, #68]	; (8469c <calibration_ps3+0x10c>)
   84656:	fb82 1203 	smull	r1, r2, r2, r3
   8465a:	1152      	asrs	r2, r2, #5
   8465c:	17db      	asrs	r3, r3, #31
   8465e:	1ad3      	subs	r3, r2, r3
   84660:	490f      	ldr	r1, [pc, #60]	; (846a0 <calibration_ps3+0x110>)
   84662:	68fa      	ldr	r2, [r7, #12]
   84664:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   84668:	b212      	sxth	r2, r2
   8466a:	441a      	add	r2, r3
   8466c:	4b09      	ldr	r3, [pc, #36]	; (84694 <calibration_ps3+0x104>)
   8466e:	4610      	mov	r0, r2
   84670:	4798      	blx	r3
   84672:	4602      	mov	r2, r0
   84674:	4b08      	ldr	r3, [pc, #32]	; (84698 <calibration_ps3+0x108>)
   84676:	601a      	str	r2, [r3, #0]
   84678:	e005      	b.n	84686 <calibration_ps3+0xf6>
   8467a:	68fb      	ldr	r3, [r7, #12]
   8467c:	3301      	adds	r3, #1
   8467e:	60fb      	str	r3, [r7, #12]
   84680:	68fb      	ldr	r3, [r7, #12]
   84682:	2b31      	cmp	r3, #49	; 0x31
   84684:	dd8c      	ble.n	845a0 <calibration_ps3+0x10>
   84686:	bf00      	nop
   84688:	3710      	adds	r7, #16
   8468a:	46bd      	mov	sp, r7
   8468c:	bd80      	pop	{r7, pc}
   8468e:	bf00      	nop
   84690:	200702fc 	.word	0x200702fc
   84694:	000a3d6d 	.word	0x000a3d6d
   84698:	20071668 	.word	0x20071668
   8469c:	51eb851f 	.word	0x51eb851f
   846a0:	20071e78 	.word	0x20071e78

000846a4 <calibration_cond>:
   846a4:	b590      	push	{r4, r7, lr}
   846a6:	b087      	sub	sp, #28
   846a8:	af00      	add	r7, sp, #0
   846aa:	6078      	str	r0, [r7, #4]
   846ac:	f04f 0300 	mov.w	r3, #0
   846b0:	613b      	str	r3, [r7, #16]
   846b2:	687b      	ldr	r3, [r7, #4]
   846b4:	613b      	str	r3, [r7, #16]
   846b6:	f04f 0300 	mov.w	r3, #0
   846ba:	60fb      	str	r3, [r7, #12]
   846bc:	2300      	movs	r3, #0
   846be:	617b      	str	r3, [r7, #20]
   846c0:	e08f      	b.n	847e2 <calibration_cond+0x13e>
   846c2:	4a4c      	ldr	r2, [pc, #304]	; (847f4 <calibration_cond+0x150>)
   846c4:	697b      	ldr	r3, [r7, #20]
   846c6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   846ca:	b29b      	uxth	r3, r3
   846cc:	461a      	mov	r2, r3
   846ce:	4b4a      	ldr	r3, [pc, #296]	; (847f8 <calibration_cond+0x154>)
   846d0:	4610      	mov	r0, r2
   846d2:	4798      	blx	r3
   846d4:	4602      	mov	r2, r0
   846d6:	4b49      	ldr	r3, [pc, #292]	; (847fc <calibration_cond+0x158>)
   846d8:	6939      	ldr	r1, [r7, #16]
   846da:	4610      	mov	r0, r2
   846dc:	4798      	blx	r3
   846de:	4603      	mov	r3, r0
   846e0:	2b00      	cmp	r3, #0
   846e2:	d00c      	beq.n	846fe <calibration_cond+0x5a>
   846e4:	4a43      	ldr	r2, [pc, #268]	; (847f4 <calibration_cond+0x150>)
   846e6:	697b      	ldr	r3, [r7, #20]
   846e8:	009b      	lsls	r3, r3, #2
   846ea:	4413      	add	r3, r2
   846ec:	885b      	ldrh	r3, [r3, #2]
   846ee:	b29a      	uxth	r2, r3
   846f0:	4b43      	ldr	r3, [pc, #268]	; (84800 <calibration_cond+0x15c>)
   846f2:	4610      	mov	r0, r2
   846f4:	4798      	blx	r3
   846f6:	4602      	mov	r2, r0
   846f8:	4b42      	ldr	r3, [pc, #264]	; (84804 <calibration_cond+0x160>)
   846fa:	601a      	str	r2, [r3, #0]
   846fc:	e06e      	b.n	847dc <calibration_cond+0x138>
   846fe:	4a3d      	ldr	r2, [pc, #244]	; (847f4 <calibration_cond+0x150>)
   84700:	697b      	ldr	r3, [r7, #20]
   84702:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84706:	b29b      	uxth	r3, r3
   84708:	461a      	mov	r2, r3
   8470a:	4b3b      	ldr	r3, [pc, #236]	; (847f8 <calibration_cond+0x154>)
   8470c:	4610      	mov	r0, r2
   8470e:	4798      	blx	r3
   84710:	4602      	mov	r2, r0
   84712:	4b3d      	ldr	r3, [pc, #244]	; (84808 <calibration_cond+0x164>)
   84714:	6939      	ldr	r1, [r7, #16]
   84716:	4610      	mov	r0, r2
   84718:	4798      	blx	r3
   8471a:	4603      	mov	r3, r0
   8471c:	2b00      	cmp	r3, #0
   8471e:	d05d      	beq.n	847dc <calibration_cond+0x138>
   84720:	697b      	ldr	r3, [r7, #20]
   84722:	3301      	adds	r3, #1
   84724:	4a33      	ldr	r2, [pc, #204]	; (847f4 <calibration_cond+0x150>)
   84726:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8472a:	b29b      	uxth	r3, r3
   8472c:	461a      	mov	r2, r3
   8472e:	4b32      	ldr	r3, [pc, #200]	; (847f8 <calibration_cond+0x154>)
   84730:	4610      	mov	r0, r2
   84732:	4798      	blx	r3
   84734:	4602      	mov	r2, r0
   84736:	4b35      	ldr	r3, [pc, #212]	; (8480c <calibration_cond+0x168>)
   84738:	6939      	ldr	r1, [r7, #16]
   8473a:	4610      	mov	r0, r2
   8473c:	4798      	blx	r3
   8473e:	4603      	mov	r3, r0
   84740:	2b00      	cmp	r3, #0
   84742:	d04b      	beq.n	847dc <calibration_cond+0x138>
   84744:	697b      	ldr	r3, [r7, #20]
   84746:	3301      	adds	r3, #1
   84748:	4a2a      	ldr	r2, [pc, #168]	; (847f4 <calibration_cond+0x150>)
   8474a:	009b      	lsls	r3, r3, #2
   8474c:	4413      	add	r3, r2
   8474e:	885b      	ldrh	r3, [r3, #2]
   84750:	b29b      	uxth	r3, r3
   84752:	4619      	mov	r1, r3
   84754:	4a27      	ldr	r2, [pc, #156]	; (847f4 <calibration_cond+0x150>)
   84756:	697b      	ldr	r3, [r7, #20]
   84758:	009b      	lsls	r3, r3, #2
   8475a:	4413      	add	r3, r2
   8475c:	885b      	ldrh	r3, [r3, #2]
   8475e:	b29b      	uxth	r3, r3
   84760:	1aca      	subs	r2, r1, r3
   84762:	697b      	ldr	r3, [r7, #20]
   84764:	3301      	adds	r3, #1
   84766:	4923      	ldr	r1, [pc, #140]	; (847f4 <calibration_cond+0x150>)
   84768:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   8476c:	b29b      	uxth	r3, r3
   8476e:	4618      	mov	r0, r3
   84770:	4920      	ldr	r1, [pc, #128]	; (847f4 <calibration_cond+0x150>)
   84772:	697b      	ldr	r3, [r7, #20]
   84774:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   84778:	b29b      	uxth	r3, r3
   8477a:	1ac3      	subs	r3, r0, r3
   8477c:	fb92 f2f3 	sdiv	r2, r2, r3
   84780:	4b1d      	ldr	r3, [pc, #116]	; (847f8 <calibration_cond+0x154>)
   84782:	4610      	mov	r0, r2
   84784:	4798      	blx	r3
   84786:	4603      	mov	r3, r0
   84788:	60fb      	str	r3, [r7, #12]
   8478a:	4a1a      	ldr	r2, [pc, #104]	; (847f4 <calibration_cond+0x150>)
   8478c:	697b      	ldr	r3, [r7, #20]
   8478e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84792:	b29b      	uxth	r3, r3
   84794:	461a      	mov	r2, r3
   84796:	4b18      	ldr	r3, [pc, #96]	; (847f8 <calibration_cond+0x154>)
   84798:	4610      	mov	r0, r2
   8479a:	4798      	blx	r3
   8479c:	4602      	mov	r2, r0
   8479e:	4b1c      	ldr	r3, [pc, #112]	; (84810 <calibration_cond+0x16c>)
   847a0:	4611      	mov	r1, r2
   847a2:	6938      	ldr	r0, [r7, #16]
   847a4:	4798      	blx	r3
   847a6:	4603      	mov	r3, r0
   847a8:	461a      	mov	r2, r3
   847aa:	4b1a      	ldr	r3, [pc, #104]	; (84814 <calibration_cond+0x170>)
   847ac:	68f9      	ldr	r1, [r7, #12]
   847ae:	4610      	mov	r0, r2
   847b0:	4798      	blx	r3
   847b2:	4603      	mov	r3, r0
   847b4:	461c      	mov	r4, r3
   847b6:	4a0f      	ldr	r2, [pc, #60]	; (847f4 <calibration_cond+0x150>)
   847b8:	697b      	ldr	r3, [r7, #20]
   847ba:	009b      	lsls	r3, r3, #2
   847bc:	4413      	add	r3, r2
   847be:	885b      	ldrh	r3, [r3, #2]
   847c0:	b29b      	uxth	r3, r3
   847c2:	461a      	mov	r2, r3
   847c4:	4b0c      	ldr	r3, [pc, #48]	; (847f8 <calibration_cond+0x154>)
   847c6:	4610      	mov	r0, r2
   847c8:	4798      	blx	r3
   847ca:	4602      	mov	r2, r0
   847cc:	4b12      	ldr	r3, [pc, #72]	; (84818 <calibration_cond+0x174>)
   847ce:	4611      	mov	r1, r2
   847d0:	4620      	mov	r0, r4
   847d2:	4798      	blx	r3
   847d4:	4603      	mov	r3, r0
   847d6:	461a      	mov	r2, r3
   847d8:	4b0a      	ldr	r3, [pc, #40]	; (84804 <calibration_cond+0x160>)
   847da:	601a      	str	r2, [r3, #0]
   847dc:	697b      	ldr	r3, [r7, #20]
   847de:	3301      	adds	r3, #1
   847e0:	617b      	str	r3, [r7, #20]
   847e2:	697b      	ldr	r3, [r7, #20]
   847e4:	2b31      	cmp	r3, #49	; 0x31
   847e6:	f77f af6c 	ble.w	846c2 <calibration_cond+0x1e>
   847ea:	bf00      	nop
   847ec:	371c      	adds	r7, #28
   847ee:	46bd      	mov	sp, r7
   847f0:	bd90      	pop	{r4, r7, pc}
   847f2:	bf00      	nop
   847f4:	20072008 	.word	0x20072008
   847f8:	000a3d6d 	.word	0x000a3d6d
   847fc:	000a413d 	.word	0x000a413d
   84800:	000a3d65 	.word	0x000a3d65
   84804:	20071674 	.word	0x20071674
   84808:	000a4151 	.word	0x000a4151
   8480c:	000a418d 	.word	0x000a418d
   84810:	000a3c01 	.word	0x000a3c01
   84814:	000a3e15 	.word	0x000a3e15
   84818:	000a3c05 	.word	0x000a3c05

0008481c <calibrate_uf>:
   8481c:	b590      	push	{r4, r7, lr}
   8481e:	b087      	sub	sp, #28
   84820:	af00      	add	r7, sp, #0
   84822:	4603      	mov	r3, r0
   84824:	80fb      	strh	r3, [r7, #6]
   84826:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8482a:	4b51      	ldr	r3, [pc, #324]	; (84970 <calibrate_uf+0x154>)
   8482c:	4610      	mov	r0, r2
   8482e:	4798      	blx	r3
   84830:	4603      	mov	r3, r0
   84832:	613b      	str	r3, [r7, #16]
   84834:	2300      	movs	r3, #0
   84836:	82fb      	strh	r3, [r7, #22]
   84838:	e092      	b.n	84960 <calibrate_uf+0x144>
   8483a:	8afb      	ldrh	r3, [r7, #22]
   8483c:	4a4d      	ldr	r2, [pc, #308]	; (84974 <calibrate_uf+0x158>)
   8483e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84842:	b29b      	uxth	r3, r3
   84844:	461a      	mov	r2, r3
   84846:	4b4a      	ldr	r3, [pc, #296]	; (84970 <calibrate_uf+0x154>)
   84848:	4610      	mov	r0, r2
   8484a:	4798      	blx	r3
   8484c:	4602      	mov	r2, r0
   8484e:	4b4a      	ldr	r3, [pc, #296]	; (84978 <calibrate_uf+0x15c>)
   84850:	6939      	ldr	r1, [r7, #16]
   84852:	4610      	mov	r0, r2
   84854:	4798      	blx	r3
   84856:	4603      	mov	r3, r0
   84858:	2b00      	cmp	r3, #0
   8485a:	d00a      	beq.n	84872 <calibrate_uf+0x56>
   8485c:	8afb      	ldrh	r3, [r7, #22]
   8485e:	4a45      	ldr	r2, [pc, #276]	; (84974 <calibrate_uf+0x158>)
   84860:	009b      	lsls	r3, r3, #2
   84862:	4413      	add	r3, r2
   84864:	885b      	ldrh	r3, [r3, #2]
   84866:	b29b      	uxth	r3, r3
   84868:	60bb      	str	r3, [r7, #8]
   8486a:	4a44      	ldr	r2, [pc, #272]	; (8497c <calibrate_uf+0x160>)
   8486c:	68bb      	ldr	r3, [r7, #8]
   8486e:	6013      	str	r3, [r2, #0]
   84870:	e07a      	b.n	84968 <calibrate_uf+0x14c>
   84872:	8afb      	ldrh	r3, [r7, #22]
   84874:	4a3f      	ldr	r2, [pc, #252]	; (84974 <calibrate_uf+0x158>)
   84876:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8487a:	b29b      	uxth	r3, r3
   8487c:	461a      	mov	r2, r3
   8487e:	4b3c      	ldr	r3, [pc, #240]	; (84970 <calibrate_uf+0x154>)
   84880:	4610      	mov	r0, r2
   84882:	4798      	blx	r3
   84884:	4602      	mov	r2, r0
   84886:	4b3e      	ldr	r3, [pc, #248]	; (84980 <calibrate_uf+0x164>)
   84888:	6939      	ldr	r1, [r7, #16]
   8488a:	4610      	mov	r0, r2
   8488c:	4798      	blx	r3
   8488e:	4603      	mov	r3, r0
   84890:	2b00      	cmp	r3, #0
   84892:	d062      	beq.n	8495a <calibrate_uf+0x13e>
   84894:	8afb      	ldrh	r3, [r7, #22]
   84896:	3301      	adds	r3, #1
   84898:	4a36      	ldr	r2, [pc, #216]	; (84974 <calibrate_uf+0x158>)
   8489a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8489e:	b29b      	uxth	r3, r3
   848a0:	461a      	mov	r2, r3
   848a2:	4b33      	ldr	r3, [pc, #204]	; (84970 <calibrate_uf+0x154>)
   848a4:	4610      	mov	r0, r2
   848a6:	4798      	blx	r3
   848a8:	4602      	mov	r2, r0
   848aa:	4b36      	ldr	r3, [pc, #216]	; (84984 <calibrate_uf+0x168>)
   848ac:	6939      	ldr	r1, [r7, #16]
   848ae:	4610      	mov	r0, r2
   848b0:	4798      	blx	r3
   848b2:	4603      	mov	r3, r0
   848b4:	2b00      	cmp	r3, #0
   848b6:	d050      	beq.n	8495a <calibrate_uf+0x13e>
   848b8:	8afb      	ldrh	r3, [r7, #22]
   848ba:	3301      	adds	r3, #1
   848bc:	4a2d      	ldr	r2, [pc, #180]	; (84974 <calibrate_uf+0x158>)
   848be:	009b      	lsls	r3, r3, #2
   848c0:	4413      	add	r3, r2
   848c2:	885b      	ldrh	r3, [r3, #2]
   848c4:	b29b      	uxth	r3, r3
   848c6:	4619      	mov	r1, r3
   848c8:	8afb      	ldrh	r3, [r7, #22]
   848ca:	4a2a      	ldr	r2, [pc, #168]	; (84974 <calibrate_uf+0x158>)
   848cc:	009b      	lsls	r3, r3, #2
   848ce:	4413      	add	r3, r2
   848d0:	885b      	ldrh	r3, [r3, #2]
   848d2:	b29b      	uxth	r3, r3
   848d4:	1aca      	subs	r2, r1, r3
   848d6:	8afb      	ldrh	r3, [r7, #22]
   848d8:	3301      	adds	r3, #1
   848da:	4926      	ldr	r1, [pc, #152]	; (84974 <calibrate_uf+0x158>)
   848dc:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   848e0:	b29b      	uxth	r3, r3
   848e2:	4618      	mov	r0, r3
   848e4:	8afb      	ldrh	r3, [r7, #22]
   848e6:	4923      	ldr	r1, [pc, #140]	; (84974 <calibrate_uf+0x158>)
   848e8:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   848ec:	b29b      	uxth	r3, r3
   848ee:	1ac3      	subs	r3, r0, r3
   848f0:	fb92 f2f3 	sdiv	r2, r2, r3
   848f4:	4b1e      	ldr	r3, [pc, #120]	; (84970 <calibrate_uf+0x154>)
   848f6:	4610      	mov	r0, r2
   848f8:	4798      	blx	r3
   848fa:	4603      	mov	r3, r0
   848fc:	60fb      	str	r3, [r7, #12]
   848fe:	8afb      	ldrh	r3, [r7, #22]
   84900:	4a1c      	ldr	r2, [pc, #112]	; (84974 <calibrate_uf+0x158>)
   84902:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84906:	b29b      	uxth	r3, r3
   84908:	461a      	mov	r2, r3
   8490a:	4b19      	ldr	r3, [pc, #100]	; (84970 <calibrate_uf+0x154>)
   8490c:	4610      	mov	r0, r2
   8490e:	4798      	blx	r3
   84910:	4602      	mov	r2, r0
   84912:	4b1d      	ldr	r3, [pc, #116]	; (84988 <calibrate_uf+0x16c>)
   84914:	4611      	mov	r1, r2
   84916:	6938      	ldr	r0, [r7, #16]
   84918:	4798      	blx	r3
   8491a:	4603      	mov	r3, r0
   8491c:	461a      	mov	r2, r3
   8491e:	4b1b      	ldr	r3, [pc, #108]	; (8498c <calibrate_uf+0x170>)
   84920:	68f9      	ldr	r1, [r7, #12]
   84922:	4610      	mov	r0, r2
   84924:	4798      	blx	r3
   84926:	4603      	mov	r3, r0
   84928:	461c      	mov	r4, r3
   8492a:	8afb      	ldrh	r3, [r7, #22]
   8492c:	4a11      	ldr	r2, [pc, #68]	; (84974 <calibrate_uf+0x158>)
   8492e:	009b      	lsls	r3, r3, #2
   84930:	4413      	add	r3, r2
   84932:	885b      	ldrh	r3, [r3, #2]
   84934:	b29b      	uxth	r3, r3
   84936:	461a      	mov	r2, r3
   84938:	4b0d      	ldr	r3, [pc, #52]	; (84970 <calibrate_uf+0x154>)
   8493a:	4610      	mov	r0, r2
   8493c:	4798      	blx	r3
   8493e:	4602      	mov	r2, r0
   84940:	4b13      	ldr	r3, [pc, #76]	; (84990 <calibrate_uf+0x174>)
   84942:	4611      	mov	r1, r2
   84944:	4620      	mov	r0, r4
   84946:	4798      	blx	r3
   84948:	4603      	mov	r3, r0
   8494a:	461a      	mov	r2, r3
   8494c:	4b11      	ldr	r3, [pc, #68]	; (84994 <calibrate_uf+0x178>)
   8494e:	4610      	mov	r0, r2
   84950:	4798      	blx	r3
   84952:	4602      	mov	r2, r0
   84954:	4b09      	ldr	r3, [pc, #36]	; (8497c <calibrate_uf+0x160>)
   84956:	601a      	str	r2, [r3, #0]
   84958:	e006      	b.n	84968 <calibrate_uf+0x14c>
   8495a:	8afb      	ldrh	r3, [r7, #22]
   8495c:	3301      	adds	r3, #1
   8495e:	82fb      	strh	r3, [r7, #22]
   84960:	8afb      	ldrh	r3, [r7, #22]
   84962:	2b0d      	cmp	r3, #13
   84964:	f67f af69 	bls.w	8483a <calibrate_uf+0x1e>
   84968:	bf00      	nop
   8496a:	371c      	adds	r7, #28
   8496c:	46bd      	mov	sp, r7
   8496e:	bd90      	pop	{r4, r7, pc}
   84970:	000a3d6d 	.word	0x000a3d6d
   84974:	200701ec 	.word	0x200701ec
   84978:	000a413d 	.word	0x000a413d
   8497c:	20071678 	.word	0x20071678
   84980:	000a4151 	.word	0x000a4151
   84984:	000a418d 	.word	0x000a418d
   84988:	000a3c01 	.word	0x000a3c01
   8498c:	000a3e15 	.word	0x000a3e15
   84990:	000a3c05 	.word	0x000a3c05
   84994:	000a41ed 	.word	0x000a41ed

00084998 <cl_datamanager_init>:
extern Cl_Uint32Type Treatdata[ID_MAX_TREAT_PARAM] ;
extern Cl_AlarmThresholdType  Cl_alarmThresholdTable;


Cl_ReturnCodeType cl_datamanager_init()
{
   84998:	b480      	push	{r7}
   8499a:	af00      	add	r7, sp, #0
	Treatdata[ID_dflow] = 500;
   8499c:	4b1e      	ldr	r3, [pc, #120]	; (84a18 <cl_datamanager_init+0x80>)
   8499e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   849a2:	615a      	str	r2, [r3, #20]
	Treatdata[ID_settemp] = 370;
   849a4:	4b1c      	ldr	r3, [pc, #112]	; (84a18 <cl_datamanager_init+0x80>)
   849a6:	f44f 72b9 	mov.w	r2, #370	; 0x172
   849aa:	619a      	str	r2, [r3, #24]
	Treatdata[ID_setcond] = 138;
   849ac:	4b1a      	ldr	r3, [pc, #104]	; (84a18 <cl_datamanager_init+0x80>)
   849ae:	228a      	movs	r2, #138	; 0x8a
   849b0:	62da      	str	r2, [r3, #44]	; 0x2c
	
	Treatdata[ID_tempulimit] = 375;
   849b2:	4b19      	ldr	r3, [pc, #100]	; (84a18 <cl_datamanager_init+0x80>)
   849b4:	f240 1277 	movw	r2, #375	; 0x177
   849b8:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_tempulimit] = 365;
   849ba:	4b17      	ldr	r3, [pc, #92]	; (84a18 <cl_datamanager_init+0x80>)
   849bc:	f240 126d 	movw	r2, #365	; 0x16d
   849c0:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_condulimit] = 139;
   849c2:	4b15      	ldr	r3, [pc, #84]	; (84a18 <cl_datamanager_init+0x80>)
   849c4:	228b      	movs	r2, #139	; 0x8b
   849c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	Treatdata[ID_condulimit] = 137;
   849ca:	4b13      	ldr	r3, [pc, #76]	; (84a18 <cl_datamanager_init+0x80>)
   849cc:	2289      	movs	r2, #137	; 0x89
   849ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	Treatdata[ID_aptulimit] =  400;
   849d2:	4b11      	ldr	r3, [pc, #68]	; (84a18 <cl_datamanager_init+0x80>)
   849d4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   849d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	Treatdata[ID_aptllimit] = 0;
   849dc:	4b0e      	ldr	r3, [pc, #56]	; (84a18 <cl_datamanager_init+0x80>)
   849de:	2200      	movs	r2, #0
   849e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	Treatdata[ID_vptulimit] = 400;
   849e4:	4b0c      	ldr	r3, [pc, #48]	; (84a18 <cl_datamanager_init+0x80>)
   849e6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   849ea:	675a      	str	r2, [r3, #116]	; 0x74
	Treatdata[ID_vptllimit] = 0;
   849ec:	4b0a      	ldr	r3, [pc, #40]	; (84a18 <cl_datamanager_init+0x80>)
   849ee:	2200      	movs	r2, #0
   849f0:	671a      	str	r2, [r3, #112]	; 0x70
	Treatdata[ID_tempulimit] = 50;
   849f2:	4b09      	ldr	r3, [pc, #36]	; (84a18 <cl_datamanager_init+0x80>)
   849f4:	2232      	movs	r2, #50	; 0x32
   849f6:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_templlimit] = 0;
   849f8:	4b07      	ldr	r3, [pc, #28]	; (84a18 <cl_datamanager_init+0x80>)
   849fa:	2200      	movs	r2, #0
   849fc:	665a      	str	r2, [r3, #100]	; 0x64
	Treatdata[ID_ufgoal] = 4800; // added default to check uf func
   849fe:	4b06      	ldr	r3, [pc, #24]	; (84a18 <cl_datamanager_init+0x80>)
   84a00:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   84a04:	635a      	str	r2, [r3, #52]	; 0x34
	Treatdata[ID_treattime] = 240;
   84a06:	4b04      	ldr	r3, [pc, #16]	; (84a18 <cl_datamanager_init+0x80>)
   84a08:	22f0      	movs	r2, #240	; 0xf0
   84a0a:	655a      	str	r2, [r3, #84]	; 0x54
	return CL_OK;
   84a0c:	2300      	movs	r3, #0
	
}
   84a0e:	4618      	mov	r0, r3
   84a10:	46bd      	mov	sp, r7
   84a12:	bc80      	pop	{r7}
   84a14:	4770      	bx	lr
   84a16:	bf00      	nop
   84a18:	200731a4 	.word	0x200731a4

00084a1c <cl_datamamanager>:
 * \return CL_OK on success. 
 * \Globals used : Treatdata,Cl_ConsoleRxMsg
 */

Cl_ReturnCodeType cl_datamamanager(Cl_Mac_EventsType cl_data_event)
{
   84a1c:	b580      	push	{r7, lr}
   84a1e:	b092      	sub	sp, #72	; 0x48
   84a20:	af00      	add	r7, sp, #0
   84a22:	4603      	mov	r3, r0
   84a24:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_data_ret_val = CL_ERROR;
   84a26:	2304      	movs	r3, #4
   84a28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   84a2c:	234d      	movs	r3, #77	; 0x4d
   84a2e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	rxstreamtype datastream;
	Cl_Uint8Type dataarray[50] = {};
   84a32:	f107 030c 	add.w	r3, r7, #12
   84a36:	2232      	movs	r2, #50	; 0x32
   84a38:	2100      	movs	r1, #0
   84a3a:	4618      	mov	r0, r3
   84a3c:	4bbc      	ldr	r3, [pc, #752]	; (84d30 <cl_datamamanager+0x314>)
   84a3e:	4798      	blx	r3
	
	switch(cl_data_event)
   84a40:	79fb      	ldrb	r3, [r7, #7]
   84a42:	2b0d      	cmp	r3, #13
   84a44:	f000 8361 	beq.w	8510a <cl_datamamanager+0x6ee>
   84a48:	2b0e      	cmp	r3, #14
   84a4a:	d001      	beq.n	84a50 <cl_datamamanager+0x34>
							
		}
		break;
		
		default:
		break;
   84a4c:	f000 bc54 	b.w	852f8 <cl_datamamanager+0x8dc>
	Cl_Uint8Type dataarray[50] = {};
	
	switch(cl_data_event)
	{
		case EVT_CONSOLE_COMMAND_GET_DATA:
		if(Cl_ConsoleRxMsg.msgready == true)
   84a50:	4bb8      	ldr	r3, [pc, #736]	; (84d34 <cl_datamamanager+0x318>)
   84a52:	7e1b      	ldrb	r3, [r3, #24]
   84a54:	2b00      	cmp	r3, #0
   84a56:	f000 844c 	beq.w	852f2 <cl_datamamanager+0x8d6>
		{
			switch(Cl_ConsoleRxMsg.data.byte[0])
   84a5a:	4bb6      	ldr	r3, [pc, #728]	; (84d34 <cl_datamamanager+0x318>)
   84a5c:	791b      	ldrb	r3, [r3, #4]
   84a5e:	3b01      	subs	r3, #1
   84a60:	2b20      	cmp	r3, #32
   84a62:	f200 834e 	bhi.w	85102 <cl_datamamanager+0x6e6>
   84a66:	a201      	add	r2, pc, #4	; (adr r2, 84a6c <cl_datamamanager+0x50>)
   84a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84a6c:	00084af1 	.word	0x00084af1
   84a70:	00084b27 	.word	0x00084b27
   84a74:	00084bcb 	.word	0x00084bcb
   84a78:	00084bf1 	.word	0x00084bf1
   84a7c:	00085103 	.word	0x00085103
   84a80:	00085103 	.word	0x00085103
   84a84:	00085103 	.word	0x00085103
   84a88:	00085103 	.word	0x00085103
   84a8c:	00085103 	.word	0x00085103
   84a90:	00085103 	.word	0x00085103
   84a94:	00085103 	.word	0x00085103
   84a98:	00085103 	.word	0x00085103
   84a9c:	00085103 	.word	0x00085103
   84aa0:	00085103 	.word	0x00085103
   84aa4:	00085103 	.word	0x00085103
   84aa8:	00085103 	.word	0x00085103
   84aac:	00085103 	.word	0x00085103
   84ab0:	00084c27 	.word	0x00084c27
   84ab4:	00085103 	.word	0x00085103
   84ab8:	00085103 	.word	0x00085103
   84abc:	00085103 	.word	0x00085103
   84ac0:	00085103 	.word	0x00085103
   84ac4:	00085103 	.word	0x00085103
   84ac8:	00085103 	.word	0x00085103
   84acc:	00085103 	.word	0x00085103
   84ad0:	00085103 	.word	0x00085103
   84ad4:	00085103 	.word	0x00085103
   84ad8:	00085103 	.word	0x00085103
   84adc:	00085103 	.word	0x00085103
   84ae0:	00084b5d 	.word	0x00084b5d
   84ae4:	00085103 	.word	0x00085103
   84ae8:	00084b83 	.word	0x00084b83
   84aec:	00084ba9 	.word	0x00084ba9
			{
				case CON_RX_PARAM_DATA_RINSE_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84af0:	2316      	movs	r3, #22
   84af2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   84af6:	2301      	movs	r3, #1
   84af8:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   84afa:	f107 030c 	add.w	r3, r7, #12
   84afe:	3301      	adds	r3, #1
   84b00:	4619      	mov	r1, r3
   84b02:	2001      	movs	r0, #1
   84b04:	4b8c      	ldr	r3, [pc, #560]	; (84d38 <cl_datamamanager+0x31c>)
   84b06:	4798      	blx	r3
   84b08:	4603      	mov	r3, r0
   84b0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84b0e:	f107 010c 	add.w	r1, r7, #12
   84b12:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84b16:	2202      	movs	r2, #2
   84b18:	4618      	mov	r0, r3
   84b1a:	4b88      	ldr	r3, [pc, #544]	; (84d3c <cl_datamamanager+0x320>)
   84b1c:	4798      	blx	r3
   84b1e:	4603      	mov	r3, r0
   84b20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84b24:	e2f0      	b.n	85108 <cl_datamamanager+0x6ec>
				case CON_RX_PARAM_DATA_PRIME_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84b26:	2316      	movs	r3, #22
   84b28:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   84b2c:	2302      	movs	r3, #2
   84b2e:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   84b30:	f107 030c 	add.w	r3, r7, #12
   84b34:	3301      	adds	r3, #1
   84b36:	4619      	mov	r1, r3
   84b38:	2002      	movs	r0, #2
   84b3a:	4b7f      	ldr	r3, [pc, #508]	; (84d38 <cl_datamamanager+0x31c>)
   84b3c:	4798      	blx	r3
   84b3e:	4603      	mov	r3, r0
   84b40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84b44:	f107 010c 	add.w	r1, r7, #12
   84b48:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84b4c:	2202      	movs	r2, #2
   84b4e:	4618      	mov	r0, r3
   84b50:	4b7a      	ldr	r3, [pc, #488]	; (84d3c <cl_datamamanager+0x320>)
   84b52:	4798      	blx	r3
   84b54:	4603      	mov	r3, r0
   84b56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84b5a:	e2d5      	b.n	85108 <cl_datamamanager+0x6ec>
				case CON_RX_PARAM_DATA_MIXING_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84b5c:	2316      	movs	r3, #22
   84b5e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_MIXING;
   84b62:	2320      	movs	r3, #32
   84b64:	733b      	strb	r3, [r7, #12]
				//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
				dataarray[1] = 0;
   84b66:	2300      	movs	r3, #0
   84b68:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84b6a:	f107 010c 	add.w	r1, r7, #12
   84b6e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84b72:	2202      	movs	r2, #2
   84b74:	4618      	mov	r0, r3
   84b76:	4b71      	ldr	r3, [pc, #452]	; (84d3c <cl_datamamanager+0x320>)
   84b78:	4798      	blx	r3
   84b7a:	4603      	mov	r3, r0
   84b7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84b80:	e2c2      	b.n	85108 <cl_datamamanager+0x6ec>
				case CON_RX_PARAM_DATA_RECIRC_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84b82:	2316      	movs	r3, #22
   84b84:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   84b88:	2321      	movs	r3, #33	; 0x21
   84b8a:	733b      	strb	r3, [r7, #12]
				//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
				dataarray[1] = 0;
   84b8c:	2300      	movs	r3, #0
   84b8e:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84b90:	f107 010c 	add.w	r1, r7, #12
   84b94:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84b98:	2202      	movs	r2, #2
   84b9a:	4618      	mov	r0, r3
   84b9c:	4b67      	ldr	r3, [pc, #412]	; (84d3c <cl_datamamanager+0x320>)
   84b9e:	4798      	blx	r3
   84ba0:	4603      	mov	r3, r0
   84ba2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84ba6:	e2af      	b.n	85108 <cl_datamamanager+0x6ec>
				case CON_RX_PARAM_DATA_DISINF_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84ba8:	2316      	movs	r3, #22
   84baa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   84bae:	2323      	movs	r3, #35	; 0x23
   84bb0:	733b      	strb	r3, [r7, #12]
				
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84bb2:	f107 010c 	add.w	r1, r7, #12
   84bb6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84bba:	2202      	movs	r2, #2
   84bbc:	4618      	mov	r0, r3
   84bbe:	4b5f      	ldr	r3, [pc, #380]	; (84d3c <cl_datamamanager+0x320>)
   84bc0:	4798      	blx	r3
   84bc2:	4603      	mov	r3, r0
   84bc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84bc8:	e29e      	b.n	85108 <cl_datamamanager+0x6ec>
				case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84bca:	2316      	movs	r3, #22
   84bcc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   84bd0:	2303      	movs	r3, #3
   84bd2:	733b      	strb	r3, [r7, #12]
				dataarray[1] = 0;									
   84bd4:	2300      	movs	r3, #0
   84bd6:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84bd8:	f107 010c 	add.w	r1, r7, #12
   84bdc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84be0:	2202      	movs	r2, #2
   84be2:	4618      	mov	r0, r3
   84be4:	4b55      	ldr	r3, [pc, #340]	; (84d3c <cl_datamamanager+0x320>)
   84be6:	4798      	blx	r3
   84be8:	4603      	mov	r3, r0
   84bea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84bee:	e28b      	b.n	85108 <cl_datamamanager+0x6ec>
				
				case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84bf0:	2316      	movs	r3, #22
   84bf2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   84bf6:	2304      	movs	r3, #4
   84bf8:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   84bfa:	f107 030c 	add.w	r3, r7, #12
   84bfe:	3301      	adds	r3, #1
   84c00:	4619      	mov	r1, r3
   84c02:	2004      	movs	r0, #4
   84c04:	4b4c      	ldr	r3, [pc, #304]	; (84d38 <cl_datamamanager+0x31c>)
   84c06:	4798      	blx	r3
   84c08:	4603      	mov	r3, r0
   84c0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84c0e:	f107 010c 	add.w	r1, r7, #12
   84c12:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84c16:	2202      	movs	r2, #2
   84c18:	4618      	mov	r0, r3
   84c1a:	4b48      	ldr	r3, [pc, #288]	; (84d3c <cl_datamamanager+0x320>)
   84c1c:	4798      	blx	r3
   84c1e:	4603      	mov	r3, r0
   84c20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84c24:	e270      	b.n	85108 <cl_datamamanager+0x6ec>

				case CON_RX_PARAM_DATA_TREATMENT_DATA:
				
				command = CON_TX_COMMAND_SYSDATA;
   84c26:	2316      	movs	r3, #22
   84c28:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] =   CON_TX_PARAM_DATA_TREATMENT_DATA;
   84c2c:	2312      	movs	r3, #18
   84c2e:	733b      	strb	r3, [r7, #12]
				if(Cl_ConsoleRxMsg.data.byte[1] < ID_b_Dlaystedata)
   84c30:	4b40      	ldr	r3, [pc, #256]	; (84d34 <cl_datamamanager+0x318>)
   84c32:	795b      	ldrb	r3, [r3, #5]
   84c34:	2b25      	cmp	r3, #37	; 0x25
   84c36:	d820      	bhi.n	84c7a <cl_datamamanager+0x25e>
				{
					dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   84c38:	4b3e      	ldr	r3, [pc, #248]	; (84d34 <cl_datamamanager+0x318>)
   84c3a:	795b      	ldrb	r3, [r3, #5]
   84c3c:	737b      	strb	r3, [r7, #13]
					datastream.word = Treatdata[dataarray[1]];
   84c3e:	7b7b      	ldrb	r3, [r7, #13]
   84c40:	461a      	mov	r2, r3
   84c42:	4b3f      	ldr	r3, [pc, #252]	; (84d40 <cl_datamamanager+0x324>)
   84c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   84c48:	643b      	str	r3, [r7, #64]	; 0x40
					dataarray[2] = datastream.bytearray[0];
   84c4a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84c4e:	73bb      	strb	r3, [r7, #14]
					dataarray[3] = datastream.bytearray[1];
   84c50:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84c54:	73fb      	strb	r3, [r7, #15]
					dataarray[4] = datastream.bytearray[2];
   84c56:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84c5a:	743b      	strb	r3, [r7, #16]
					dataarray[5] = datastream.bytearray[3];
   84c5c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84c60:	747b      	strb	r3, [r7, #17]

					cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,6);
   84c62:	f107 010c 	add.w	r1, r7, #12
   84c66:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84c6a:	2206      	movs	r2, #6
   84c6c:	4618      	mov	r0, r3
   84c6e:	4b33      	ldr	r3, [pc, #204]	; (84d3c <cl_datamamanager+0x320>)
   84c70:	4798      	blx	r3
   84c72:	4603      	mov	r3, r0
   84c74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					}
					
				}
		

				break;
   84c78:	e245      	b.n	85106 <cl_datamamanager+0x6ea>
					dataarray[4] = datastream.bytearray[2];
					dataarray[5] = datastream.bytearray[3];

					cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,6);
				}
				else if(Cl_ConsoleRxMsg.data.byte[1] < ID_MAX_TREAT_PARAM)
   84c7a:	4b2e      	ldr	r3, [pc, #184]	; (84d34 <cl_datamamanager+0x318>)
   84c7c:	795b      	ldrb	r3, [r3, #5]
   84c7e:	2b2d      	cmp	r3, #45	; 0x2d
   84c80:	f200 8241 	bhi.w	85106 <cl_datamamanager+0x6ea>
				{
					dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   84c84:	4b2b      	ldr	r3, [pc, #172]	; (84d34 <cl_datamamanager+0x318>)
   84c86:	795b      	ldrb	r3, [r3, #5]
   84c88:	737b      	strb	r3, [r7, #13]
					
					switch (Cl_ConsoleRxMsg.data.byte[1])
   84c8a:	4b2a      	ldr	r3, [pc, #168]	; (84d34 <cl_datamamanager+0x318>)
   84c8c:	795b      	ldrb	r3, [r3, #5]
   84c8e:	3b26      	subs	r3, #38	; 0x26
   84c90:	2b07      	cmp	r3, #7
   84c92:	f200 8234 	bhi.w	850fe <cl_datamamanager+0x6e2>
   84c96:	a201      	add	r2, pc, #4	; (adr r2, 84c9c <cl_datamamanager+0x280>)
   84c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84c9c:	00084cbd 	.word	0x00084cbd
   84ca0:	00084dbd 	.word	0x00084dbd
   84ca4:	000850ff 	.word	0x000850ff
   84ca8:	00084d45 	.word	0x00084d45
   84cac:	00084e2f 	.word	0x00084e2f
   84cb0:	00085089 	.word	0x00085089
   84cb4:	0008500f 	.word	0x0008500f
   84cb8:	00084e9f 	.word	0x00084e9f
					{
						case ID_b_Dlaystedata:
											datastream.word = Treatdata[ID_dflow];
   84cbc:	4b20      	ldr	r3, [pc, #128]	; (84d40 <cl_datamamanager+0x324>)
   84cbe:	695b      	ldr	r3, [r3, #20]
   84cc0:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84cc2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84cc6:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84cc8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84ccc:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84cce:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84cd2:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84cd4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84cd8:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_settemp];
   84cda:	4b19      	ldr	r3, [pc, #100]	; (84d40 <cl_datamamanager+0x324>)
   84cdc:	699b      	ldr	r3, [r3, #24]
   84cde:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84ce0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84ce4:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84ce6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84cea:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84cec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84cf0:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84cf2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84cf6:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_setcond];
   84cf8:	4b11      	ldr	r3, [pc, #68]	; (84d40 <cl_datamamanager+0x324>)
   84cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84cfc:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84cfe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84d02:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84d04:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84d08:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84d0a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84d0e:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84d10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84d14:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84d16:	f107 010c 	add.w	r1, r7, #12
   84d1a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84d1e:	220e      	movs	r2, #14
   84d20:	4618      	mov	r0, r3
   84d22:	4b06      	ldr	r3, [pc, #24]	; (84d3c <cl_datamamanager+0x320>)
   84d24:	4798      	blx	r3
   84d26:	4603      	mov	r3, r0
   84d28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84d2c:	e1e8      	b.n	85100 <cl_datamamanager+0x6e4>
   84d2e:	bf00      	nop
   84d30:	000a4369 	.word	0x000a4369
   84d34:	20072f98 	.word	0x20072f98
   84d38:	00098239 	.word	0x00098239
   84d3c:	00099729 	.word	0x00099729
   84d40:	200731a4 	.word	0x200731a4
						case ID_b_Conddata:
											datastream.word = Treatdata[ID_condllimit];
   84d44:	4bce      	ldr	r3, [pc, #824]	; (85080 <cl_datamamanager+0x664>)
   84d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   84d4a:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84d4c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84d50:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84d52:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84d56:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84d58:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84d5c:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84d5e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84d62:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_condulimit];
   84d64:	4bc6      	ldr	r3, [pc, #792]	; (85080 <cl_datamamanager+0x664>)
   84d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   84d6a:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84d6c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84d70:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84d72:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84d76:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84d78:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84d7c:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84d7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84d82:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_b_Conddata];;
   84d84:	4bbe      	ldr	r3, [pc, #760]	; (85080 <cl_datamamanager+0x664>)
   84d86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   84d8a:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84d8c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84d90:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84d92:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84d96:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84d98:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84d9c:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84d9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84da2:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84da4:	f107 010c 	add.w	r1, r7, #12
   84da8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84dac:	220e      	movs	r2, #14
   84dae:	4618      	mov	r0, r3
   84db0:	4bb4      	ldr	r3, [pc, #720]	; (85084 <cl_datamamanager+0x668>)
   84db2:	4798      	blx	r3
   84db4:	4603      	mov	r3, r0
   84db6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84dba:	e1a1      	b.n	85100 <cl_datamamanager+0x6e4>
						case ID_b_TempData:
											datastream.word = Treatdata[ID_templlimit];
   84dbc:	4bb0      	ldr	r3, [pc, #704]	; (85080 <cl_datamamanager+0x664>)
   84dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   84dc0:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84dc2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84dc6:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84dc8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84dcc:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84dce:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84dd2:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84dd4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84dd8:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_tempulimit];
   84dda:	4ba9      	ldr	r3, [pc, #676]	; (85080 <cl_datamamanager+0x664>)
   84ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   84dde:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84de0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84de4:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84de6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84dea:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84dec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84df0:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84df2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84df6:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_settemp];
   84df8:	4ba1      	ldr	r3, [pc, #644]	; (85080 <cl_datamamanager+0x664>)
   84dfa:	699b      	ldr	r3, [r3, #24]
   84dfc:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84dfe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e02:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84e04:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e08:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84e0a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e0e:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84e10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e14:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84e16:	f107 010c 	add.w	r1, r7, #12
   84e1a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84e1e:	220e      	movs	r2, #14
   84e20:	4618      	mov	r0, r3
   84e22:	4b98      	ldr	r3, [pc, #608]	; (85084 <cl_datamamanager+0x668>)
   84e24:	4798      	blx	r3
   84e26:	4603      	mov	r3, r0
   84e28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84e2c:	e168      	b.n	85100 <cl_datamamanager+0x6e4>
						case ID_b_tmp:
											datastream.word = Treatdata[ID_tmpllimit];
   84e2e:	4b94      	ldr	r3, [pc, #592]	; (85080 <cl_datamamanager+0x664>)
   84e30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84e32:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84e34:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e38:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84e3a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e3e:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84e40:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e44:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84e46:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e4a:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_tmpulimit];
   84e4c:	4b8c      	ldr	r3, [pc, #560]	; (85080 <cl_datamamanager+0x664>)
   84e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   84e50:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84e52:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e56:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84e58:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e5c:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84e5e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e62:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84e64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e68:	757b      	strb	r3, [r7, #21]
											datastream.word = 200;
   84e6a:	23c8      	movs	r3, #200	; 0xc8
   84e6c:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84e6e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e72:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84e74:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e78:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84e7a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e7e:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84e80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e84:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84e86:	f107 010c 	add.w	r1, r7, #12
   84e8a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84e8e:	220e      	movs	r2, #14
   84e90:	4618      	mov	r0, r3
   84e92:	4b7c      	ldr	r3, [pc, #496]	; (85084 <cl_datamamanager+0x668>)
   84e94:	4798      	blx	r3
   84e96:	4603      	mov	r3, r0
   84e98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84e9c:	e130      	b.n	85100 <cl_datamamanager+0x6e4>
						case ID_b_treatmentdata:
											datastream.word = Treatdata[ID_setcond];
   84e9e:	4b78      	ldr	r3, [pc, #480]	; (85080 <cl_datamamanager+0x664>)
   84ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84ea2:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84ea4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84ea8:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84eaa:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84eae:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84eb0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84eb4:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84eb6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84eba:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_settemp];
   84ebc:	4b70      	ldr	r3, [pc, #448]	; (85080 <cl_datamamanager+0x664>)
   84ebe:	699b      	ldr	r3, [r3, #24]
   84ec0:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84ec2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84ec6:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84ec8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84ecc:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84ece:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84ed2:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84ed4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84ed8:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_dflow];
   84eda:	4b69      	ldr	r3, [pc, #420]	; (85080 <cl_datamamanager+0x664>)
   84edc:	695b      	ldr	r3, [r3, #20]
   84ede:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84ee0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84ee4:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84ee6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84eea:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84eec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84ef0:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84ef2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84ef6:	767b      	strb	r3, [r7, #25]
											datastream.word = Treatdata[ID_ufgoal];
   84ef8:	4b61      	ldr	r3, [pc, #388]	; (85080 <cl_datamamanager+0x664>)
   84efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   84efc:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[14] = datastream.bytearray[0];
   84efe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f02:	76bb      	strb	r3, [r7, #26]
											dataarray[15] = datastream.bytearray[1];
   84f04:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f08:	76fb      	strb	r3, [r7, #27]
											dataarray[16] = datastream.bytearray[2];
   84f0a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f0e:	773b      	strb	r3, [r7, #28]
											dataarray[17] = datastream.bytearray[3];
   84f10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f14:	777b      	strb	r3, [r7, #29]
											datastream.word = Treatdata[ID_ufrate];
   84f16:	4b5a      	ldr	r3, [pc, #360]	; (85080 <cl_datamamanager+0x664>)
   84f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84f1a:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[18] = datastream.bytearray[0];
   84f1c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f20:	77bb      	strb	r3, [r7, #30]
											dataarray[19] = datastream.bytearray[1];
   84f22:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f26:	77fb      	strb	r3, [r7, #31]
											dataarray[20] = datastream.bytearray[2];
   84f28:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f2c:	f887 3020 	strb.w	r3, [r7, #32]
											dataarray[21] = datastream.bytearray[3];
   84f30:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f34:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
											datastream.word = Treatdata[ID_minufrate];
   84f38:	4b51      	ldr	r3, [pc, #324]	; (85080 <cl_datamamanager+0x664>)
   84f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   84f3c:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[22] = datastream.bytearray[0];
   84f3e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f42:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
											dataarray[23] = datastream.bytearray[1];
   84f46:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
											dataarray[24] = datastream.bytearray[2];
   84f4e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f52:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
											dataarray[25] = datastream.bytearray[3];
   84f56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
											datastream.word = Treatdata[ID_bloodratetreat];
   84f5e:	4b48      	ldr	r3, [pc, #288]	; (85080 <cl_datamamanager+0x664>)
   84f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   84f62:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[26] = datastream.bytearray[0];
   84f64:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
											dataarray[27] = datastream.bytearray[1];
   84f6c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
											dataarray[28] = datastream.bytearray[2];
   84f74:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f78:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
											dataarray[29] = datastream.bytearray[3];
   84f7c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f80:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
											datastream.word = Treatdata[ID_treattime];
   84f84:	4b3e      	ldr	r3, [pc, #248]	; (85080 <cl_datamamanager+0x664>)
   84f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   84f88:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[30] = datastream.bytearray[0];
   84f8a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
											dataarray[31] = datastream.bytearray[1];
   84f92:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
											dataarray[32] = datastream.bytearray[2];
   84f9a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f9e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
											dataarray[33] = datastream.bytearray[3];
   84fa2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84fa6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
											datastream.word = Treatdata[ID_heprate];
   84faa:	4b35      	ldr	r3, [pc, #212]	; (85080 <cl_datamamanager+0x664>)
   84fac:	69db      	ldr	r3, [r3, #28]
   84fae:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[34] = datastream.bytearray[0];
   84fb0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84fb4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
											dataarray[35] = datastream.bytearray[1];
   84fb8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84fbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
											dataarray[36] = datastream.bytearray[2];
   84fc0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84fc4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
											dataarray[37] = datastream.bytearray[3];
   84fc8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84fcc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
											datastream.word = Treatdata[ID_bolusvol];
   84fd0:	4b2b      	ldr	r3, [pc, #172]	; (85080 <cl_datamamanager+0x664>)
   84fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   84fd4:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[38] = datastream.bytearray[0];
   84fd6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84fda:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
											dataarray[39] = datastream.bytearray[1];
   84fde:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
											dataarray[40] = datastream.bytearray[2];
   84fe6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84fea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
											dataarray[41] = datastream.bytearray[3];
   84fee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84ff2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,42);
   84ff6:	f107 010c 	add.w	r1, r7, #12
   84ffa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84ffe:	222a      	movs	r2, #42	; 0x2a
   85000:	4618      	mov	r0, r3
   85002:	4b20      	ldr	r3, [pc, #128]	; (85084 <cl_datamamanager+0x668>)
   85004:	4798      	blx	r3
   85006:	4603      	mov	r3, r0
   85008:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   8500c:	e078      	b.n	85100 <cl_datamamanager+0x6e4>
						case ID_b_vpt:
											datastream.word = Treatdata[ID_vptllimit];
   8500e:	4b1c      	ldr	r3, [pc, #112]	; (85080 <cl_datamamanager+0x664>)
   85010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   85012:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   85014:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85018:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   8501a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8501e:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   85020:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85024:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   85026:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8502a:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_vptulimit];
   8502c:	4b14      	ldr	r3, [pc, #80]	; (85080 <cl_datamamanager+0x664>)
   8502e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   85030:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   85032:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85036:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   85038:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8503c:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   8503e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85042:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   85044:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85048:	757b      	strb	r3, [r7, #21]
											datastream.word = 400;
   8504a:	f44f 73c8 	mov.w	r3, #400	; 0x190
   8504e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   85050:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85054:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   85056:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8505a:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   8505c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85060:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   85062:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85066:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   85068:	f107 010c 	add.w	r1, r7, #12
   8506c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85070:	220e      	movs	r2, #14
   85072:	4618      	mov	r0, r3
   85074:	4b03      	ldr	r3, [pc, #12]	; (85084 <cl_datamamanager+0x668>)
   85076:	4798      	blx	r3
   85078:	4603      	mov	r3, r0
   8507a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   8507e:	e03f      	b.n	85100 <cl_datamamanager+0x6e4>
   85080:	200731a4 	.word	0x200731a4
   85084:	00099729 	.word	0x00099729
						case ID_b_apt:
											datastream.word = Treatdata[ID_aptllimit];
   85088:	4b9e      	ldr	r3, [pc, #632]	; (85304 <cl_datamamanager+0x8e8>)
   8508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   8508e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   85090:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85094:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   85096:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8509a:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   8509c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   850a0:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   850a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   850a6:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_aptulimit];
   850a8:	4b96      	ldr	r3, [pc, #600]	; (85304 <cl_datamamanager+0x8e8>)
   850aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   850ae:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   850b0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   850b4:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   850b6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   850ba:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   850bc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   850c0:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   850c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   850c6:	757b      	strb	r3, [r7, #21]
											datastream.word = 500;
   850c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   850cc:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   850ce:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   850d2:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   850d4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   850d8:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   850da:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   850de:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   850e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   850e4:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   850e6:	f107 010c 	add.w	r1, r7, #12
   850ea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   850ee:	220e      	movs	r2, #14
   850f0:	4618      	mov	r0, r3
   850f2:	4b85      	ldr	r3, [pc, #532]	; (85308 <cl_datamamanager+0x8ec>)
   850f4:	4798      	blx	r3
   850f6:	4603      	mov	r3, r0
   850f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   850fc:	e000      	b.n	85100 <cl_datamamanager+0x6e4>
						
						default:break;
   850fe:	bf00      	nop
					}
					
				}
		

				break;
   85100:	e001      	b.n	85106 <cl_datamamanager+0x6ea>
				
				default:
				break;
   85102:	bf00      	nop
   85104:	e0f5      	b.n	852f2 <cl_datamamanager+0x8d6>
					}
					
				}
		

				break;
   85106:	bf00      	nop
				
				default:
				break;
			}
		}
		break;
   85108:	e0f3      	b.n	852f2 <cl_datamamanager+0x8d6>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		if(Cl_ConsoleRxMsg.msgready == true)
   8510a:	4b80      	ldr	r3, [pc, #512]	; (8530c <cl_datamamanager+0x8f0>)
   8510c:	7e1b      	ldrb	r3, [r3, #24]
   8510e:	2b00      	cmp	r3, #0
   85110:	f000 80f1 	beq.w	852f6 <cl_datamamanager+0x8da>
		{
			cl_Datastreamtype cl_temp  ;

			switch(Cl_ConsoleRxMsg.data.byte[0])
   85114:	4b7d      	ldr	r3, [pc, #500]	; (8530c <cl_datamamanager+0x8f0>)
   85116:	791b      	ldrb	r3, [r3, #4]
   85118:	2b12      	cmp	r3, #18
   8511a:	d000      	beq.n	8511e <cl_datamamanager+0x702>
						break;

						default:break;
					}
				break;
				default:break;
   8511c:	e0e8      	b.n	852f0 <cl_datamamanager+0x8d4>
			switch(Cl_ConsoleRxMsg.data.byte[0])
				{
					
					case CON_RX_PARAM_DATA_TREATMENT_DATA:
			
					if(Cl_ConsoleRxMsg.data.byte[1] < ID_b_Dlaystedata)
   8511e:	4b7b      	ldr	r3, [pc, #492]	; (8530c <cl_datamamanager+0x8f0>)
   85120:	795b      	ldrb	r3, [r3, #5]
   85122:	2b25      	cmp	r3, #37	; 0x25
   85124:	d818      	bhi.n	85158 <cl_datamamanager+0x73c>
					{
						dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   85126:	4b79      	ldr	r3, [pc, #484]	; (8530c <cl_datamamanager+0x8f0>)
   85128:	795b      	ldrb	r3, [r3, #5]
   8512a:	737b      	strb	r3, [r7, #13]
						
						datastream.bytearray[0] = Cl_ConsoleRxMsg.data.byte[2];
   8512c:	4b77      	ldr	r3, [pc, #476]	; (8530c <cl_datamamanager+0x8f0>)
   8512e:	799b      	ldrb	r3, [r3, #6]
   85130:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
						datastream.bytearray[1] = Cl_ConsoleRxMsg.data.byte[3];
   85134:	4b75      	ldr	r3, [pc, #468]	; (8530c <cl_datamamanager+0x8f0>)
   85136:	79db      	ldrb	r3, [r3, #7]
   85138:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
						datastream.bytearray[2] = Cl_ConsoleRxMsg.data.byte[4];
   8513c:	4b73      	ldr	r3, [pc, #460]	; (8530c <cl_datamamanager+0x8f0>)
   8513e:	7a1b      	ldrb	r3, [r3, #8]
   85140:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
						datastream.bytearray[3] = Cl_ConsoleRxMsg.data.byte[5];
   85144:	4b71      	ldr	r3, [pc, #452]	; (8530c <cl_datamamanager+0x8f0>)
   85146:	7a5b      	ldrb	r3, [r3, #9]
   85148:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

						Treatdata[dataarray[1]] = datastream.word ;
   8514c:	7b7b      	ldrb	r3, [r7, #13]
   8514e:	4619      	mov	r1, r3
   85150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85152:	4a6c      	ldr	r2, [pc, #432]	; (85304 <cl_datamamanager+0x8e8>)
   85154:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					}

			

			
					switch(Cl_ConsoleRxMsg.data.byte[1])
   85158:	4b6c      	ldr	r3, [pc, #432]	; (8530c <cl_datamamanager+0x8f0>)
   8515a:	795b      	ldrb	r3, [r3, #5]
   8515c:	3b05      	subs	r3, #5
   8515e:	2b20      	cmp	r3, #32
   85160:	f200 80c4 	bhi.w	852ec <cl_datamamanager+0x8d0>
   85164:	a201      	add	r2, pc, #4	; (adr r2, 8516c <cl_datamamanager+0x750>)
   85166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8516a:	bf00      	nop
   8516c:	000851f1 	.word	0x000851f1
   85170:	000851f9 	.word	0x000851f9
   85174:	000852ed 	.word	0x000852ed
   85178:	000852ed 	.word	0x000852ed
   8517c:	000852ed 	.word	0x000852ed
   85180:	000852ed 	.word	0x000852ed
   85184:	00085201 	.word	0x00085201
   85188:	00085209 	.word	0x00085209
   8518c:	00085219 	.word	0x00085219
   85190:	000852ed 	.word	0x000852ed
   85194:	000852ed 	.word	0x000852ed
   85198:	000852ed 	.word	0x000852ed
   8519c:	000852ed 	.word	0x000852ed
   851a0:	000852ed 	.word	0x000852ed
   851a4:	000852ed 	.word	0x000852ed
   851a8:	000852ed 	.word	0x000852ed
   851ac:	00085221 	.word	0x00085221
   851b0:	000852ed 	.word	0x000852ed
   851b4:	000852ed 	.word	0x000852ed
   851b8:	00085229 	.word	0x00085229
   851bc:	00085241 	.word	0x00085241
   851c0:	00085259 	.word	0x00085259
   851c4:	00085269 	.word	0x00085269
   851c8:	00085279 	.word	0x00085279
   851cc:	00085289 	.word	0x00085289
   851d0:	000852ed 	.word	0x000852ed
   851d4:	000852ed 	.word	0x000852ed
   851d8:	000852ed 	.word	0x000852ed
   851dc:	000852ed 	.word	0x000852ed
   851e0:	000852a1 	.word	0x000852a1
   851e4:	000852b3 	.word	0x000852b3
   851e8:	000852c5 	.word	0x000852c5
   851ec:	000852d5 	.word	0x000852d5
					{
						case ID_dflow:
						Treatdata[ID_dflow] = (datastream.word);
   851f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   851f2:	4a44      	ldr	r2, [pc, #272]	; (85304 <cl_datamamanager+0x8e8>)
   851f4:	6153      	str	r3, [r2, #20]
						break;
   851f6:	e07a      	b.n	852ee <cl_datamamanager+0x8d2>
						case ID_settemp:
							Treatdata[ID_settemp] = (datastream.word);
   851f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   851fa:	4a42      	ldr	r2, [pc, #264]	; (85304 <cl_datamamanager+0x8e8>)
   851fc:	6193      	str	r3, [r2, #24]
						break;
   851fe:	e076      	b.n	852ee <cl_datamamanager+0x8d2>
						case ID_heprate:
						break;
						case ID_setcond:
							Treatdata[ID_setcond] = (datastream.word);
   85200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85202:	4a40      	ldr	r2, [pc, #256]	; (85304 <cl_datamamanager+0x8e8>)
   85204:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
   85206:	e072      	b.n	852ee <cl_datamamanager+0x8d2>
						case ID_ufrate:
						Treatdata[ID_ufrate] = (datastream.word)/10; // added to get uf rate from ui
   85208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8520a:	4a41      	ldr	r2, [pc, #260]	; (85310 <cl_datamamanager+0x8f4>)
   8520c:	fba2 2303 	umull	r2, r3, r2, r3
   85210:	08db      	lsrs	r3, r3, #3
   85212:	4a3c      	ldr	r2, [pc, #240]	; (85304 <cl_datamamanager+0x8e8>)
   85214:	6313      	str	r3, [r2, #48]	; 0x30
						break;
   85216:	e06a      	b.n	852ee <cl_datamamanager+0x8d2>
						case ID_ufgoal:
						Treatdata[ID_ufgoal] = datastream.word; // added to get uf goal data from ui
   85218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8521a:	4a3a      	ldr	r2, [pc, #232]	; (85304 <cl_datamamanager+0x8e8>)
   8521c:	6353      	str	r3, [r2, #52]	; 0x34
						break;
   8521e:	e066      	b.n	852ee <cl_datamamanager+0x8d2>
						case ID_heparincheck:
						break;
						case ID_minufrate:
						break;
						case ID_treattime:
						Treatdata[ID_treattime] = datastream.word;
   85220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85222:	4a38      	ldr	r2, [pc, #224]	; (85304 <cl_datamamanager+0x8e8>)
   85224:	6553      	str	r3, [r2, #84]	; 0x54
						break;
   85226:	e062      	b.n	852ee <cl_datamamanager+0x8d2>
						case ID_bloodratereturn:
						break;
						case ID_bloodratetreat:
						break;
						case ID_tempulimit:
						Cl_alarmThresholdTable.temp3_high_threshold =  (datastream.word)/10;
   85228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8522a:	4a39      	ldr	r2, [pc, #228]	; (85310 <cl_datamamanager+0x8f4>)
   8522c:	fba2 2303 	umull	r2, r3, r2, r3
   85230:	08da      	lsrs	r2, r3, #3
   85232:	4b38      	ldr	r3, [pc, #224]	; (85314 <cl_datamamanager+0x8f8>)
   85234:	4610      	mov	r0, r2
   85236:	4798      	blx	r3
   85238:	4602      	mov	r2, r0
   8523a:	4b37      	ldr	r3, [pc, #220]	; (85318 <cl_datamamanager+0x8fc>)
   8523c:	649a      	str	r2, [r3, #72]	; 0x48
						break;
   8523e:	e056      	b.n	852ee <cl_datamamanager+0x8d2>
						case ID_templlimit:
						Cl_alarmThresholdTable.temp3_low_threshold =  (datastream.word)/10;
   85240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85242:	4a33      	ldr	r2, [pc, #204]	; (85310 <cl_datamamanager+0x8f4>)
   85244:	fba2 2303 	umull	r2, r3, r2, r3
   85248:	08da      	lsrs	r2, r3, #3
   8524a:	4b32      	ldr	r3, [pc, #200]	; (85314 <cl_datamamanager+0x8f8>)
   8524c:	4610      	mov	r0, r2
   8524e:	4798      	blx	r3
   85250:	4602      	mov	r2, r0
   85252:	4b31      	ldr	r3, [pc, #196]	; (85318 <cl_datamamanager+0x8fc>)
   85254:	64da      	str	r2, [r3, #76]	; 0x4c
						break;
   85256:	e04a      	b.n	852ee <cl_datamamanager+0x8d2>
						case ID_tmpllimit:
						Cl_alarmThresholdTable.tmp_low_threshold =  datastream.word;
   85258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   8525a:	4b2e      	ldr	r3, [pc, #184]	; (85314 <cl_datamamanager+0x8f8>)
   8525c:	4610      	mov	r0, r2
   8525e:	4798      	blx	r3
   85260:	4602      	mov	r2, r0
   85262:	4b2d      	ldr	r3, [pc, #180]	; (85318 <cl_datamamanager+0x8fc>)
   85264:	635a      	str	r2, [r3, #52]	; 0x34
						break;
   85266:	e042      	b.n	852ee <cl_datamamanager+0x8d2>
						case ID_tmpulimit:
						Cl_alarmThresholdTable.tmp_high_threshold =  datastream.word;
   85268:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   8526a:	4b2a      	ldr	r3, [pc, #168]	; (85314 <cl_datamamanager+0x8f8>)
   8526c:	4610      	mov	r0, r2
   8526e:	4798      	blx	r3
   85270:	4602      	mov	r2, r0
   85272:	4b29      	ldr	r3, [pc, #164]	; (85318 <cl_datamamanager+0x8fc>)
   85274:	631a      	str	r2, [r3, #48]	; 0x30
						break;
   85276:	e03a      	b.n	852ee <cl_datamamanager+0x8d2>
						case ID_vptllimit:
						Cl_alarmThresholdTable.vpt_low_threshold =  (datastream.word);
   85278:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   8527a:	4b26      	ldr	r3, [pc, #152]	; (85314 <cl_datamamanager+0x8f8>)
   8527c:	4610      	mov	r0, r2
   8527e:	4798      	blx	r3
   85280:	4602      	mov	r2, r0
   85282:	4b25      	ldr	r3, [pc, #148]	; (85318 <cl_datamamanager+0x8fc>)
   85284:	615a      	str	r2, [r3, #20]
						break;
   85286:	e032      	b.n	852ee <cl_datamamanager+0x8d2>
						case ID_vptulimit:
						Cl_alarmThresholdTable.vpt_high_threshold =  (datastream.word)/100;
   85288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8528a:	4a24      	ldr	r2, [pc, #144]	; (8531c <cl_datamamanager+0x900>)
   8528c:	fba2 2303 	umull	r2, r3, r2, r3
   85290:	095a      	lsrs	r2, r3, #5
   85292:	4b20      	ldr	r3, [pc, #128]	; (85314 <cl_datamamanager+0x8f8>)
   85294:	4610      	mov	r0, r2
   85296:	4798      	blx	r3
   85298:	4602      	mov	r2, r0
   8529a:	4b1f      	ldr	r3, [pc, #124]	; (85318 <cl_datamamanager+0x8fc>)
   8529c:	611a      	str	r2, [r3, #16]
						break;
   8529e:	e026      	b.n	852ee <cl_datamamanager+0x8d2>
						case ID_dflowllimit:
						break;
						case ID_dflowulimit:
						break;
						case ID_condllimit:
						Cl_alarmThresholdTable.cond_low_threshold =  datastream.word/10;
   852a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   852a2:	4a1b      	ldr	r2, [pc, #108]	; (85310 <cl_datamamanager+0x8f4>)
   852a4:	fba2 2303 	umull	r2, r3, r2, r3
   852a8:	08db      	lsrs	r3, r3, #3
   852aa:	b21a      	sxth	r2, r3
   852ac:	4b1a      	ldr	r3, [pc, #104]	; (85318 <cl_datamamanager+0x8fc>)
   852ae:	801a      	strh	r2, [r3, #0]
						break;
   852b0:	e01d      	b.n	852ee <cl_datamamanager+0x8d2>
						case ID_condulimit:
						Cl_alarmThresholdTable.cond_high_threshold =  datastream.word/10;
   852b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   852b4:	4a16      	ldr	r2, [pc, #88]	; (85310 <cl_datamamanager+0x8f4>)
   852b6:	fba2 2303 	umull	r2, r3, r2, r3
   852ba:	08db      	lsrs	r3, r3, #3
   852bc:	b21a      	sxth	r2, r3
   852be:	4b16      	ldr	r3, [pc, #88]	; (85318 <cl_datamamanager+0x8fc>)
   852c0:	805a      	strh	r2, [r3, #2]
						break;
   852c2:	e014      	b.n	852ee <cl_datamamanager+0x8d2>
						case ID_aptllimit:
						Cl_alarmThresholdTable.apt_low_threshold =  (datastream.word);
   852c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   852c6:	4b13      	ldr	r3, [pc, #76]	; (85314 <cl_datamamanager+0x8f8>)
   852c8:	4610      	mov	r0, r2
   852ca:	4798      	blx	r3
   852cc:	4602      	mov	r2, r0
   852ce:	4b12      	ldr	r3, [pc, #72]	; (85318 <cl_datamamanager+0x8fc>)
   852d0:	60da      	str	r2, [r3, #12]
						break;
   852d2:	e00c      	b.n	852ee <cl_datamamanager+0x8d2>
						case ID_aptulimit:
						Cl_alarmThresholdTable.apt_high_threshold =  (datastream.word)/100;
   852d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   852d6:	4a11      	ldr	r2, [pc, #68]	; (8531c <cl_datamamanager+0x900>)
   852d8:	fba2 2303 	umull	r2, r3, r2, r3
   852dc:	095a      	lsrs	r2, r3, #5
   852de:	4b0d      	ldr	r3, [pc, #52]	; (85314 <cl_datamamanager+0x8f8>)
   852e0:	4610      	mov	r0, r2
   852e2:	4798      	blx	r3
   852e4:	4602      	mov	r2, r0
   852e6:	4b0c      	ldr	r3, [pc, #48]	; (85318 <cl_datamamanager+0x8fc>)
   852e8:	609a      	str	r2, [r3, #8]
						break;
   852ea:	e000      	b.n	852ee <cl_datamamanager+0x8d2>

						default:break;
   852ec:	bf00      	nop
					}
				break;
   852ee:	bf00      	nop
				default:break;
			}
							
							
		}
		break;
   852f0:	e001      	b.n	852f6 <cl_datamamanager+0x8da>
				
				default:
				break;
			}
		}
		break;
   852f2:	bf00      	nop
   852f4:	e000      	b.n	852f8 <cl_datamamanager+0x8dc>
				default:break;
			}
							
							
		}
		break;
   852f6:	bf00      	nop
		
		default:
		break;
		
	}
return CL_OK;
   852f8:	2300      	movs	r3, #0
}
   852fa:	4618      	mov	r0, r3
   852fc:	3748      	adds	r7, #72	; 0x48
   852fe:	46bd      	mov	sp, r7
   85300:	bd80      	pop	{r7, pc}
   85302:	bf00      	nop
   85304:	200731a4 	.word	0x200731a4
   85308:	00099729 	.word	0x00099729
   8530c:	20072f98 	.word	0x20072f98
   85310:	cccccccd 	.word	0xcccccccd
   85314:	000a3d65 	.word	0x000a3d65
   85318:	20072d08 	.word	0x20072d08
   8531c:	51eb851f 	.word	0x51eb851f

00085320 <Cl_dlsis_init>:
{FPCURRENTSTATUS,false,false,false},
*/
};
volatile Cl_Uint8Type var=0;
 Cl_ReturnCodeType Cl_dlsis_init(void)
 {
   85320:	b480      	push	{r7}
   85322:	af00      	add	r7, sp, #0
  Cl_dlsissecondscounter_1 =0;Cl_dlsisMinutescounter_1=0; Cl_dlsishourscounter_1=0;
   85324:	4b2a      	ldr	r3, [pc, #168]	; (853d0 <Cl_dlsis_init+0xb0>)
   85326:	2200      	movs	r2, #0
   85328:	601a      	str	r2, [r3, #0]
   8532a:	4b2a      	ldr	r3, [pc, #168]	; (853d4 <Cl_dlsis_init+0xb4>)
   8532c:	2200      	movs	r2, #0
   8532e:	601a      	str	r2, [r3, #0]
   85330:	4b29      	ldr	r3, [pc, #164]	; (853d8 <Cl_dlsis_init+0xb8>)
   85332:	2200      	movs	r2, #0
   85334:	601a      	str	r2, [r3, #0]
  Cl_dlsisTotalMinutescounter_1=0; Cl_dlsisTotalhourscounter_1=0;
   85336:	4b29      	ldr	r3, [pc, #164]	; (853dc <Cl_dlsis_init+0xbc>)
   85338:	2200      	movs	r2, #0
   8533a:	601a      	str	r2, [r3, #0]
   8533c:	4b28      	ldr	r3, [pc, #160]	; (853e0 <Cl_dlsis_init+0xc0>)
   8533e:	2200      	movs	r2, #0
   85340:	601a      	str	r2, [r3, #0]
 Cl_dlsisOpenFillTimeOut = false; heater_stable_status = false;
   85342:	4b28      	ldr	r3, [pc, #160]	; (853e4 <Cl_dlsis_init+0xc4>)
   85344:	2200      	movs	r2, #0
   85346:	701a      	strb	r2, [r3, #0]
   85348:	4b27      	ldr	r3, [pc, #156]	; (853e8 <Cl_dlsis_init+0xc8>)
   8534a:	2200      	movs	r2, #0
   8534c:	701a      	strb	r2, [r3, #0]
  dlis_wait_cnt =0;
   8534e:	4b27      	ldr	r3, [pc, #156]	; (853ec <Cl_dlsis_init+0xcc>)
   85350:	2200      	movs	r2, #0
   85352:	801a      	strh	r2, [r3, #0]

  wait_cnt_dls = 0;TmpVal_dls =0;
   85354:	4b26      	ldr	r3, [pc, #152]	; (853f0 <Cl_dlsis_init+0xd0>)
   85356:	2200      	movs	r2, #0
   85358:	801a      	strh	r2, [r3, #0]
   8535a:	4b26      	ldr	r3, [pc, #152]	; (853f4 <Cl_dlsis_init+0xd4>)
   8535c:	2200      	movs	r2, #0
   8535e:	801a      	strh	r2, [r3, #0]
  temp1_dls =0 ;temp2_dls =0;
   85360:	4b25      	ldr	r3, [pc, #148]	; (853f8 <Cl_dlsis_init+0xd8>)
   85362:	2200      	movs	r2, #0
   85364:	801a      	strh	r2, [r3, #0]
   85366:	4b25      	ldr	r3, [pc, #148]	; (853fc <Cl_dlsis_init+0xdc>)
   85368:	2200      	movs	r2, #0
   8536a:	801a      	strh	r2, [r3, #0]
  bypass_flag=0;
   8536c:	4b24      	ldr	r3, [pc, #144]	; (85400 <Cl_dlsis_init+0xe0>)
   8536e:	2200      	movs	r2, #0
   85370:	701a      	strb	r2, [r3, #0]
   bc_flag=1;
   85372:	4b24      	ldr	r3, [pc, #144]	; (85404 <Cl_dlsis_init+0xe4>)
   85374:	2201      	movs	r2, #1
   85376:	701a      	strb	r2, [r3, #0]
  flow_rate=0;
   85378:	4b23      	ldr	r3, [pc, #140]	; (85408 <Cl_dlsis_init+0xe8>)
   8537a:	2200      	movs	r2, #0
   8537c:	601a      	str	r2, [r3, #0]
 dlsis_ps1 = 0; dlsis_ps2=0; dlsis_ps3=0;dlsis_apt = 0; dlsis_vpt=0;
   8537e:	4b23      	ldr	r3, [pc, #140]	; (8540c <Cl_dlsis_init+0xec>)
   85380:	f04f 0200 	mov.w	r2, #0
   85384:	601a      	str	r2, [r3, #0]
   85386:	4b22      	ldr	r3, [pc, #136]	; (85410 <Cl_dlsis_init+0xf0>)
   85388:	f04f 0200 	mov.w	r2, #0
   8538c:	601a      	str	r2, [r3, #0]
   8538e:	4b21      	ldr	r3, [pc, #132]	; (85414 <Cl_dlsis_init+0xf4>)
   85390:	f04f 0200 	mov.w	r2, #0
   85394:	601a      	str	r2, [r3, #0]
   85396:	4b20      	ldr	r3, [pc, #128]	; (85418 <Cl_dlsis_init+0xf8>)
   85398:	f04f 0200 	mov.w	r2, #0
   8539c:	601a      	str	r2, [r3, #0]
   8539e:	4b1f      	ldr	r3, [pc, #124]	; (8541c <Cl_dlsis_init+0xfc>)
   853a0:	f04f 0200 	mov.w	r2, #0
   853a4:	601a      	str	r2, [r3, #0]
 dlsis_temp1=0;dlsis_temp2=0;dlsis_temp3=0;dlsis_cond=0;
   853a6:	4b1e      	ldr	r3, [pc, #120]	; (85420 <Cl_dlsis_init+0x100>)
   853a8:	f04f 0200 	mov.w	r2, #0
   853ac:	601a      	str	r2, [r3, #0]
   853ae:	4b1d      	ldr	r3, [pc, #116]	; (85424 <Cl_dlsis_init+0x104>)
   853b0:	f04f 0200 	mov.w	r2, #0
   853b4:	601a      	str	r2, [r3, #0]
   853b6:	4b1c      	ldr	r3, [pc, #112]	; (85428 <Cl_dlsis_init+0x108>)
   853b8:	f04f 0200 	mov.w	r2, #0
   853bc:	601a      	str	r2, [r3, #0]
   853be:	4b1b      	ldr	r3, [pc, #108]	; (8542c <Cl_dlsis_init+0x10c>)
   853c0:	f04f 0200 	mov.w	r2, #0
   853c4:	601a      	str	r2, [r3, #0]
 
	 return CL_OK;
   853c6:	2300      	movs	r3, #0
 }
   853c8:	4618      	mov	r0, r3
   853ca:	46bd      	mov	sp, r7
   853cc:	bc80      	pop	{r7}
   853ce:	4770      	bx	lr
   853d0:	200720d4 	.word	0x200720d4
   853d4:	200720d8 	.word	0x200720d8
   853d8:	200720dc 	.word	0x200720dc
   853dc:	200720e0 	.word	0x200720e0
   853e0:	200720e4 	.word	0x200720e4
   853e4:	200720e8 	.word	0x200720e8
   853e8:	200720e9 	.word	0x200720e9
   853ec:	20072d80 	.word	0x20072d80
   853f0:	200720ea 	.word	0x200720ea
   853f4:	200720ec 	.word	0x200720ec
   853f8:	20072d7c 	.word	0x20072d7c
   853fc:	20072d82 	.word	0x20072d82
   85400:	200720ee 	.word	0x200720ee
   85404:	200720ef 	.word	0x200720ef
   85408:	200720f0 	.word	0x200720f0
   8540c:	200720f4 	.word	0x200720f4
   85410:	200720f8 	.word	0x200720f8
   85414:	200720fc 	.word	0x200720fc
   85418:	20072100 	.word	0x20072100
   8541c:	20072104 	.word	0x20072104
   85420:	20072108 	.word	0x20072108
   85424:	2007210c 	.word	0x2007210c
   85428:	20072110 	.word	0x20072110
   8542c:	20072114 	.word	0x20072114

00085430 <Cl_Dlsis_controller>:
 
 
Cl_ReturnCodeType Cl_Dlsis_controller(Cl_Mac_EventsType Cl_MacDlsisEvent)
{
   85430:	b580      	push	{r7, lr}
   85432:	b092      	sub	sp, #72	; 0x48
   85434:	af00      	add	r7, sp, #0
   85436:	4603      	mov	r3, r0
   85438:	71fb      	strb	r3, [r7, #7]
	
Cl_ReturnCodeType Cl_dlsisretcode;
Cl_Dlsis_Eevents cl_dlsis_event = EVENT_NULL_EVENT;
   8543a:	2300      	movs	r3, #0
   8543c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   85440:	2300      	movs	r3, #0
   85442:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   85446:	2300      	movs	r3, #0
   85448:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
   8544c:	2300      	movs	r3, #0
   8544e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
   85452:	2300      	movs	r3, #0
   85454:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
static Cl_BoolType bcs_wait = false;
static Cl_BoolType V2_toggle = false;
Cl_Uint16Type Tmp2Val = 0;
   85458:	2300      	movs	r3, #0
   8545a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
Cl_Uint8Type dataarray[8] =  {0,0,0,0};
   8545e:	f107 0334 	add.w	r3, r7, #52	; 0x34
   85462:	2200      	movs	r2, #0
   85464:	601a      	str	r2, [r3, #0]
   85466:	605a      	str	r2, [r3, #4]
extern Cl_BoolType BC_window; //test
extern Cl_BoolType g_testbcfreeze; //test
extern Cl_BoolType Current_sense_trigger; // test
Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   85468:	234d      	movs	r3, #77	; 0x4d
   8546a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
Cl_Uint8Type data = 0;
   8546e:	2300      	movs	r3, #0
   85470:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
Cl_Uint16Type tempcount=0;
   85474:	2300      	movs	r3, #0
   85476:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
float temp;
//static float apt=0, vpt=0;

Cl_dlsisretcode =  cl_dlsis_translatemacevent( Cl_MacDlsisEvent, &cl_dlsis_event);
   8547a:	f107 023e 	add.w	r2, r7, #62	; 0x3e
   8547e:	79fb      	ldrb	r3, [r7, #7]
   85480:	4611      	mov	r1, r2
   85482:	4618      	mov	r0, r3
   85484:	4bc4      	ldr	r3, [pc, #784]	; (85798 <Cl_Dlsis_controller+0x368>)
   85486:	4798      	blx	r3
   85488:	4603      	mov	r3, r0
   8548a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	
	switch(cl_dlsis_event)
   8548e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   85492:	3b11      	subs	r3, #17
   85494:	2b11      	cmp	r3, #17
   85496:	f200 8086 	bhi.w	855a6 <Cl_Dlsis_controller+0x176>
   8549a:	a201      	add	r2, pc, #4	; (adr r2, 854a0 <Cl_Dlsis_controller+0x70>)
   8549c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   854a0:	000855a7 	.word	0x000855a7
   854a4:	000855a7 	.word	0x000855a7
   854a8:	000854e9 	.word	0x000854e9
   854ac:	000855a7 	.word	0x000855a7
   854b0:	000855a7 	.word	0x000855a7
   854b4:	000855a7 	.word	0x000855a7
   854b8:	000855a7 	.word	0x000855a7
   854bc:	000855a7 	.word	0x000855a7
   854c0:	000855a7 	.word	0x000855a7
   854c4:	000855a7 	.word	0x000855a7
   854c8:	000855a7 	.word	0x000855a7
   854cc:	000855a7 	.word	0x000855a7
   854d0:	0008556b 	.word	0x0008556b
   854d4:	00085557 	.word	0x00085557
   854d8:	00085561 	.word	0x00085561
   854dc:	000854f7 	.word	0x000854f7
   854e0:	0008553f 	.word	0x0008553f
   854e4:	0008554d 	.word	0x0008554d
	{
		case EVENT_DLSIS_TICK_SECOND:
		Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_SECOND);
   854e8:	2002      	movs	r0, #2
   854ea:	4bac      	ldr	r3, [pc, #688]	; (8579c <Cl_Dlsis_controller+0x36c>)
   854ec:	4798      	blx	r3
   854ee:	4603      	mov	r3, r0
   854f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
   854f4:	e05c      	b.n	855b0 <Cl_Dlsis_controller+0x180>
		case EVENT_DLSIS_TICK_50MS:
		//Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
		case EVENT_DLSIS_HEP_RATE:
			if(Cl_ConsoleRxMsg.msgready == true)
   854f6:	4baa      	ldr	r3, [pc, #680]	; (857a0 <Cl_Dlsis_controller+0x370>)
   854f8:	7e1b      	ldrb	r3, [r3, #24]
   854fa:	2b00      	cmp	r3, #0
   854fc:	d055      	beq.n	855aa <Cl_Dlsis_controller+0x17a>
			{
				
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   854fe:	4ba8      	ldr	r3, [pc, #672]	; (857a0 <Cl_Dlsis_controller+0x370>)
   85500:	791b      	ldrb	r3, [r3, #4]
   85502:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   85506:	4ba6      	ldr	r3, [pc, #664]	; (857a0 <Cl_Dlsis_controller+0x370>)
   85508:	795b      	ldrb	r3, [r3, #5]
   8550a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   8550e:	4ba4      	ldr	r3, [pc, #656]	; (857a0 <Cl_Dlsis_controller+0x370>)
   85510:	799b      	ldrb	r3, [r3, #6]
   85512:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   85516:	4ba2      	ldr	r3, [pc, #648]	; (857a0 <Cl_Dlsis_controller+0x370>)
   85518:	79db      	ldrb	r3, [r3, #7]
   8551a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				Treatdata[ID_heprate] = cl_temp.Twobyte;
   8551e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   85520:	461a      	mov	r2, r3
   85522:	4ba0      	ldr	r3, [pc, #640]	; (857a4 <Cl_Dlsis_controller+0x374>)
   85524:	61da      	str	r2, [r3, #28]
				hep_calibration(Treatdata[ID_heprate]);
   85526:	4b9f      	ldr	r3, [pc, #636]	; (857a4 <Cl_Dlsis_controller+0x374>)
   85528:	69db      	ldr	r3, [r3, #28]
   8552a:	4618      	mov	r0, r3
   8552c:	4b9e      	ldr	r3, [pc, #632]	; (857a8 <Cl_Dlsis_controller+0x378>)
   8552e:	4798      	blx	r3
				cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   85530:	4b9e      	ldr	r3, [pc, #632]	; (857ac <Cl_Dlsis_controller+0x37c>)
   85532:	681b      	ldr	r3, [r3, #0]
   85534:	4619      	mov	r1, r3
   85536:	2006      	movs	r0, #6
   85538:	4b9d      	ldr	r3, [pc, #628]	; (857b0 <Cl_Dlsis_controller+0x380>)
   8553a:	4798      	blx	r3
			}
		break;
   8553c:	e035      	b.n	855aa <Cl_Dlsis_controller+0x17a>
		case EVENT_DLSIS_HEP_ON:
			cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,hep_speed);
   8553e:	4b9b      	ldr	r3, [pc, #620]	; (857ac <Cl_Dlsis_controller+0x37c>)
   85540:	681b      	ldr	r3, [r3, #0]
   85542:	4619      	mov	r1, r3
   85544:	200a      	movs	r0, #10
   85546:	4b9a      	ldr	r3, [pc, #616]	; (857b0 <Cl_Dlsis_controller+0x380>)
   85548:	4798      	blx	r3
		break;
   8554a:	e031      	b.n	855b0 <Cl_Dlsis_controller+0x180>
		case EVENT_DLSIS_HEP_OFF:
			cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   8554c:	2100      	movs	r1, #0
   8554e:	2009      	movs	r0, #9
   85550:	4b97      	ldr	r3, [pc, #604]	; (857b0 <Cl_Dlsis_controller+0x380>)
   85552:	4798      	blx	r3
		break;
   85554:	e02c      	b.n	855b0 <Cl_Dlsis_controller+0x180>
		case EVENT_DLSIS_COMMAND_SET_BLDPMP_ON:
		cl_bp_controller(CL_BP_EVENT_START,0);
   85556:	2100      	movs	r1, #0
   85558:	2002      	movs	r0, #2
   8555a:	4b96      	ldr	r3, [pc, #600]	; (857b4 <Cl_Dlsis_controller+0x384>)
   8555c:	4798      	blx	r3
		break;
   8555e:	e027      	b.n	855b0 <Cl_Dlsis_controller+0x180>
		case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:
		cl_bp_controller(CL_BP_EVENT_STOP,0);
   85560:	2100      	movs	r1, #0
   85562:	2004      	movs	r0, #4
   85564:	4b93      	ldr	r3, [pc, #588]	; (857b4 <Cl_Dlsis_controller+0x384>)
   85566:	4798      	blx	r3
		break;
   85568:	e022      	b.n	855b0 <Cl_Dlsis_controller+0x180>
		case EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE:
		if(Cl_ConsoleRxMsg.msgready == true)
   8556a:	4b8d      	ldr	r3, [pc, #564]	; (857a0 <Cl_Dlsis_controller+0x370>)
   8556c:	7e1b      	ldrb	r3, [r3, #24]
   8556e:	2b00      	cmp	r3, #0
   85570:	d01d      	beq.n	855ae <Cl_Dlsis_controller+0x17e>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   85572:	4b8b      	ldr	r3, [pc, #556]	; (857a0 <Cl_Dlsis_controller+0x370>)
   85574:	791b      	ldrb	r3, [r3, #4]
   85576:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   8557a:	4b89      	ldr	r3, [pc, #548]	; (857a0 <Cl_Dlsis_controller+0x370>)
   8557c:	795b      	ldrb	r3, [r3, #5]
   8557e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   85582:	4b87      	ldr	r3, [pc, #540]	; (857a0 <Cl_Dlsis_controller+0x370>)
   85584:	799b      	ldrb	r3, [r3, #6]
   85586:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   8558a:	4b85      	ldr	r3, [pc, #532]	; (857a0 <Cl_Dlsis_controller+0x370>)
   8558c:	79db      	ldrb	r3, [r3, #7]
   8558e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   85592:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   85594:	4619      	mov	r1, r3
   85596:	2001      	movs	r0, #1
   85598:	4b86      	ldr	r3, [pc, #536]	; (857b4 <Cl_Dlsis_controller+0x384>)
   8559a:	4798      	blx	r3
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   8559c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   8559e:	461a      	mov	r2, r3
   855a0:	4b80      	ldr	r3, [pc, #512]	; (857a4 <Cl_Dlsis_controller+0x374>)
   855a2:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		break;
   855a4:	e003      	b.n	855ae <Cl_Dlsis_controller+0x17e>
		default:break;
   855a6:	bf00      	nop
   855a8:	e002      	b.n	855b0 <Cl_Dlsis_controller+0x180>
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
				Treatdata[ID_heprate] = cl_temp.Twobyte;
				hep_calibration(Treatdata[ID_heprate]);
				cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
			}
		break;
   855aa:	bf00      	nop
   855ac:	e000      	b.n	855b0 <Cl_Dlsis_controller+0x180>
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
		}
		break;
   855ae:	bf00      	nop
		default:break;
		
	}
	if(cl_dlsis_event == EVENT_DLSIS_TICK_SECOND)
   855b0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   855b4:	2b13      	cmp	r3, #19
   855b6:	d115      	bne.n	855e4 <Cl_Dlsis_controller+0x1b4>
	{

		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP3_HIGH_THRESHOLD);
		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP3_LOW_THRESHOLD);
		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP2_HIGH_THRESHOLD);
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_NO_FLOW );
   855b8:	200c      	movs	r0, #12
   855ba:	4b7f      	ldr	r3, [pc, #508]	; (857b8 <Cl_Dlsis_controller+0x388>)
   855bc:	4798      	blx	r3
   855be:	4603      	mov	r3, r0
   855c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_HIGH_FLOWRATE );
   855c4:	200e      	movs	r0, #14
   855c6:	4b7c      	ldr	r3, [pc, #496]	; (857b8 <Cl_Dlsis_controller+0x388>)
   855c8:	4798      	blx	r3
   855ca:	4603      	mov	r3, r0
   855cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_LOW_FLOWRATE );
   855d0:	200d      	movs	r0, #13
   855d2:	4b79      	ldr	r3, [pc, #484]	; (857b8 <Cl_Dlsis_controller+0x388>)
   855d4:	4798      	blx	r3
   855d6:	4603      	mov	r3, r0
   855d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		
		cl_dlsis_state_dummy = cl_dlsis_state;
   855dc:	4b77      	ldr	r3, [pc, #476]	; (857bc <Cl_Dlsis_controller+0x38c>)
   855de:	781a      	ldrb	r2, [r3, #0]
   855e0:	4b77      	ldr	r3, [pc, #476]	; (857c0 <Cl_Dlsis_controller+0x390>)
   855e2:	701a      	strb	r2, [r3, #0]
	}


	switch(cl_dlsis_state)
   855e4:	4b75      	ldr	r3, [pc, #468]	; (857bc <Cl_Dlsis_controller+0x38c>)
   855e6:	781b      	ldrb	r3, [r3, #0]
   855e8:	2b0a      	cmp	r3, #10
   855ea:	f200 864d 	bhi.w	86288 <Cl_Dlsis_controller+0xe58>
   855ee:	a201      	add	r2, pc, #4	; (adr r2, 855f4 <Cl_Dlsis_controller+0x1c4>)
   855f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   855f4:	00085621 	.word	0x00085621
   855f8:	00086289 	.word	0x00086289
   855fc:	00085899 	.word	0x00085899
   85600:	000858c5 	.word	0x000858c5
   85604:	00085995 	.word	0x00085995
   85608:	00085971 	.word	0x00085971
   8560c:	00085f7f 	.word	0x00085f7f
   85610:	00085e35 	.word	0x00085e35
   85614:	00085e13 	.word	0x00085e13
   85618:	00085e51 	.word	0x00085e51
   8561c:	00085e6f 	.word	0x00085e6f
	{

		case CL_DLSIS_STATE_INIT:
		break;
		case CL_DLSIS_STATE_IDLE:
		switch (cl_dlsis_event)
   85620:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   85624:	3b02      	subs	r3, #2
   85626:	2b14      	cmp	r3, #20
   85628:	f200 812d 	bhi.w	85886 <Cl_Dlsis_controller+0x456>
   8562c:	a201      	add	r2, pc, #4	; (adr r2, 85634 <Cl_Dlsis_controller+0x204>)
   8562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85632:	bf00      	nop
   85634:	00085689 	.word	0x00085689
   85638:	000856d7 	.word	0x000856d7
   8563c:	00085887 	.word	0x00085887
   85640:	00085875 	.word	0x00085875
   85644:	00085887 	.word	0x00085887
   85648:	00085887 	.word	0x00085887
   8564c:	00085887 	.word	0x00085887
   85650:	00085887 	.word	0x00085887
   85654:	00085887 	.word	0x00085887
   85658:	00085887 	.word	0x00085887
   8565c:	00085887 	.word	0x00085887
   85660:	00085887 	.word	0x00085887
   85664:	00085887 	.word	0x00085887
   85668:	00085887 	.word	0x00085887
   8566c:	00085887 	.word	0x00085887
   85670:	00085887 	.word	0x00085887
   85674:	00085887 	.word	0x00085887
   85678:	00085887 	.word	0x00085887
   8567c:	00085887 	.word	0x00085887
   85680:	00085887 	.word	0x00085887
   85684:	0008587b 	.word	0x0008587b
		{
			case EVENT_DLSIS_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   85688:	4b45      	ldr	r3, [pc, #276]	; (857a0 <Cl_Dlsis_controller+0x370>)
   8568a:	7e1b      	ldrb	r3, [r3, #24]
   8568c:	2b00      	cmp	r3, #0
   8568e:	f000 80fd 	beq.w	8588c <Cl_Dlsis_controller+0x45c>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   85692:	4b43      	ldr	r3, [pc, #268]	; (857a0 <Cl_Dlsis_controller+0x370>)
   85694:	791b      	ldrb	r3, [r3, #4]
   85696:	2b04      	cmp	r3, #4
   85698:	d000      	beq.n	8569c <Cl_Dlsis_controller+0x26c>
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;

							
						default:
						break;
   8569a:	e01b      	b.n	856d4 <Cl_Dlsis_controller+0x2a4>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   8569c:	2316      	movs	r3, #22
   8569e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   856a2:	2304      	movs	r3, #4
   856a4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   856a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
   856ac:	3301      	adds	r3, #1
   856ae:	4619      	mov	r1, r3
   856b0:	2004      	movs	r0, #4
   856b2:	4b44      	ldr	r3, [pc, #272]	; (857c4 <Cl_Dlsis_controller+0x394>)
   856b4:	4798      	blx	r3
   856b6:	4603      	mov	r3, r0
   856b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   856bc:	f107 0134 	add.w	r1, r7, #52	; 0x34
   856c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   856c4:	2202      	movs	r2, #2
   856c6:	4618      	mov	r0, r3
   856c8:	4b3f      	ldr	r3, [pc, #252]	; (857c8 <Cl_Dlsis_controller+0x398>)
   856ca:	4798      	blx	r3
   856cc:	4603      	mov	r3, r0
   856ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						break;
   856d2:	bf00      	nop
							
						default:
						break;
					}
				}
			break;
   856d4:	e0da      	b.n	8588c <Cl_Dlsis_controller+0x45c>
			case EVENT_DLSIS_SET_DATA:
			if(Cl_ConsoleRxMsg.msgready == true)
   856d6:	4b32      	ldr	r3, [pc, #200]	; (857a0 <Cl_Dlsis_controller+0x370>)
   856d8:	7e1b      	ldrb	r3, [r3, #24]
   856da:	2b00      	cmp	r3, #0
   856dc:	f000 80d9 	beq.w	85892 <Cl_Dlsis_controller+0x462>
			{
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   856e0:	4b2f      	ldr	r3, [pc, #188]	; (857a0 <Cl_Dlsis_controller+0x370>)
   856e2:	795b      	ldrb	r3, [r3, #5]
   856e4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   856e8:	4b2d      	ldr	r3, [pc, #180]	; (857a0 <Cl_Dlsis_controller+0x370>)
   856ea:	799b      	ldrb	r3, [r3, #6]
   856ec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   856f0:	4b2b      	ldr	r3, [pc, #172]	; (857a0 <Cl_Dlsis_controller+0x370>)
   856f2:	79db      	ldrb	r3, [r3, #7]
   856f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   856f8:	4b29      	ldr	r3, [pc, #164]	; (857a0 <Cl_Dlsis_controller+0x370>)
   856fa:	7a1b      	ldrb	r3, [r3, #8]
   856fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				
				switch(Cl_ConsoleRxMsg.data.byte[0])
   85700:	4b27      	ldr	r3, [pc, #156]	; (857a0 <Cl_Dlsis_controller+0x370>)
   85702:	791b      	ldrb	r3, [r3, #4]
   85704:	3b05      	subs	r3, #5
   85706:	2b20      	cmp	r3, #32
   85708:	f200 80b2 	bhi.w	85870 <Cl_Dlsis_controller+0x440>
   8570c:	a201      	add	r2, pc, #4	; (adr r2, 85714 <Cl_Dlsis_controller+0x2e4>)
   8570e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85712:	bf00      	nop
   85714:	00085871 	.word	0x00085871
   85718:	00085871 	.word	0x00085871
   8571c:	00085871 	.word	0x00085871
   85720:	00085871 	.word	0x00085871
   85724:	00085871 	.word	0x00085871
   85728:	00085871 	.word	0x00085871
   8572c:	00085871 	.word	0x00085871
   85730:	00085871 	.word	0x00085871
   85734:	00085871 	.word	0x00085871
   85738:	00085871 	.word	0x00085871
   8573c:	00085871 	.word	0x00085871
   85740:	00085871 	.word	0x00085871
   85744:	00085871 	.word	0x00085871
   85748:	00085871 	.word	0x00085871
   8574c:	00085871 	.word	0x00085871
   85750:	00085871 	.word	0x00085871
   85754:	00085871 	.word	0x00085871
   85758:	00085871 	.word	0x00085871
   8575c:	00085871 	.word	0x00085871
   85760:	000857cd 	.word	0x000857cd
   85764:	000857e5 	.word	0x000857e5
   85768:	000857fd 	.word	0x000857fd
   8576c:	0008580d 	.word	0x0008580d
   85770:	0008581d 	.word	0x0008581d
   85774:	0008582d 	.word	0x0008582d
   85778:	00085871 	.word	0x00085871
   8577c:	00085871 	.word	0x00085871
   85780:	00085871 	.word	0x00085871
   85784:	00085871 	.word	0x00085871
   85788:	0008583d 	.word	0x0008583d
   8578c:	00085847 	.word	0x00085847
   85790:	00085851 	.word	0x00085851
   85794:	00085861 	.word	0x00085861
   85798:	000862b1 	.word	0x000862b1
   8579c:	00083319 	.word	0x00083319
   857a0:	20072f98 	.word	0x20072f98
   857a4:	200731a4 	.word	0x200731a4
   857a8:	00083f89 	.word	0x00083f89
   857ac:	20072d78 	.word	0x20072d78
   857b0:	000925a9 	.word	0x000925a9
   857b4:	00091eb5 	.word	0x00091eb5
   857b8:	00082ff1 	.word	0x00082ff1
   857bc:	200720d0 	.word	0x200720d0
   857c0:	2007319e 	.word	0x2007319e
   857c4:	00098239 	.word	0x00098239
   857c8:	00099729 	.word	0x00099729
					case ID_bloodratereturn:
					break;
					case ID_bloodratetreat:
					break;
					case ID_tempulimit:
					Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   857cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   857ce:	4aab      	ldr	r2, [pc, #684]	; (85a7c <Cl_Dlsis_controller+0x64c>)
   857d0:	fba2 2303 	umull	r2, r3, r2, r3
   857d4:	08da      	lsrs	r2, r3, #3
   857d6:	4baa      	ldr	r3, [pc, #680]	; (85a80 <Cl_Dlsis_controller+0x650>)
   857d8:	4610      	mov	r0, r2
   857da:	4798      	blx	r3
   857dc:	4602      	mov	r2, r0
   857de:	4ba9      	ldr	r3, [pc, #676]	; (85a84 <Cl_Dlsis_controller+0x654>)
   857e0:	649a      	str	r2, [r3, #72]	; 0x48
					break;
   857e2:	e046      	b.n	85872 <Cl_Dlsis_controller+0x442>
					case ID_templlimit:
					Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   857e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   857e6:	4aa5      	ldr	r2, [pc, #660]	; (85a7c <Cl_Dlsis_controller+0x64c>)
   857e8:	fba2 2303 	umull	r2, r3, r2, r3
   857ec:	08da      	lsrs	r2, r3, #3
   857ee:	4ba4      	ldr	r3, [pc, #656]	; (85a80 <Cl_Dlsis_controller+0x650>)
   857f0:	4610      	mov	r0, r2
   857f2:	4798      	blx	r3
   857f4:	4602      	mov	r2, r0
   857f6:	4ba3      	ldr	r3, [pc, #652]	; (85a84 <Cl_Dlsis_controller+0x654>)
   857f8:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
   857fa:	e03a      	b.n	85872 <Cl_Dlsis_controller+0x442>
					case ID_tmpllimit:
					Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   857fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   857fe:	4ba0      	ldr	r3, [pc, #640]	; (85a80 <Cl_Dlsis_controller+0x650>)
   85800:	4610      	mov	r0, r2
   85802:	4798      	blx	r3
   85804:	4602      	mov	r2, r0
   85806:	4b9f      	ldr	r3, [pc, #636]	; (85a84 <Cl_Dlsis_controller+0x654>)
   85808:	635a      	str	r2, [r3, #52]	; 0x34
					break;
   8580a:	e032      	b.n	85872 <Cl_Dlsis_controller+0x442>
					case ID_tmpulimit:
					Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   8580c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   8580e:	4b9c      	ldr	r3, [pc, #624]	; (85a80 <Cl_Dlsis_controller+0x650>)
   85810:	4610      	mov	r0, r2
   85812:	4798      	blx	r3
   85814:	4602      	mov	r2, r0
   85816:	4b9b      	ldr	r3, [pc, #620]	; (85a84 <Cl_Dlsis_controller+0x654>)
   85818:	631a      	str	r2, [r3, #48]	; 0x30
					break;
   8581a:	e02a      	b.n	85872 <Cl_Dlsis_controller+0x442>
					case ID_vptllimit:
					Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   8581c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   8581e:	4b98      	ldr	r3, [pc, #608]	; (85a80 <Cl_Dlsis_controller+0x650>)
   85820:	4610      	mov	r0, r2
   85822:	4798      	blx	r3
   85824:	4602      	mov	r2, r0
   85826:	4b97      	ldr	r3, [pc, #604]	; (85a84 <Cl_Dlsis_controller+0x654>)
   85828:	615a      	str	r2, [r3, #20]
					break;
   8582a:	e022      	b.n	85872 <Cl_Dlsis_controller+0x442>
					case ID_vptulimit:
					Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   8582c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   8582e:	4b94      	ldr	r3, [pc, #592]	; (85a80 <Cl_Dlsis_controller+0x650>)
   85830:	4610      	mov	r0, r2
   85832:	4798      	blx	r3
   85834:	4602      	mov	r2, r0
   85836:	4b93      	ldr	r3, [pc, #588]	; (85a84 <Cl_Dlsis_controller+0x654>)
   85838:	611a      	str	r2, [r3, #16]
					break;
   8583a:	e01a      	b.n	85872 <Cl_Dlsis_controller+0x442>
					case ID_dflowllimit:
					break;
					case ID_dflowulimit:
					break;
					case ID_condllimit:
					Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   8583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8583e:	b21a      	sxth	r2, r3
   85840:	4b90      	ldr	r3, [pc, #576]	; (85a84 <Cl_Dlsis_controller+0x654>)
   85842:	801a      	strh	r2, [r3, #0]
					break;
   85844:	e015      	b.n	85872 <Cl_Dlsis_controller+0x442>
					case ID_condulimit:
					Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   85846:	6abb      	ldr	r3, [r7, #40]	; 0x28
   85848:	b21a      	sxth	r2, r3
   8584a:	4b8e      	ldr	r3, [pc, #568]	; (85a84 <Cl_Dlsis_controller+0x654>)
   8584c:	805a      	strh	r2, [r3, #2]
					break;
   8584e:	e010      	b.n	85872 <Cl_Dlsis_controller+0x442>
					case ID_aptllimit:
					Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   85850:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85852:	4b8b      	ldr	r3, [pc, #556]	; (85a80 <Cl_Dlsis_controller+0x650>)
   85854:	4610      	mov	r0, r2
   85856:	4798      	blx	r3
   85858:	4602      	mov	r2, r0
   8585a:	4b8a      	ldr	r3, [pc, #552]	; (85a84 <Cl_Dlsis_controller+0x654>)
   8585c:	60da      	str	r2, [r3, #12]
					break;
   8585e:	e008      	b.n	85872 <Cl_Dlsis_controller+0x442>
					case ID_aptulimit:
					Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   85860:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85862:	4b87      	ldr	r3, [pc, #540]	; (85a80 <Cl_Dlsis_controller+0x650>)
   85864:	4610      	mov	r0, r2
   85866:	4798      	blx	r3
   85868:	4602      	mov	r2, r0
   8586a:	4b86      	ldr	r3, [pc, #536]	; (85a84 <Cl_Dlsis_controller+0x654>)
   8586c:	609a      	str	r2, [r3, #8]
					break;
   8586e:	e000      	b.n	85872 <Cl_Dlsis_controller+0x442>

					default:break;
   85870:	bf00      	nop
				}
			}
			
			
			break;
   85872:	e00e      	b.n	85892 <Cl_Dlsis_controller+0x462>
			case EVENT_DLSIS_START_DIALYSIS:
					Cl_Dlsis_StartDialysis();
   85874:	4b84      	ldr	r3, [pc, #528]	; (85a88 <Cl_Dlsis_controller+0x658>)
   85876:	4798      	blx	r3
			break;
   85878:	e00c      	b.n	85894 <Cl_Dlsis_controller+0x464>
			case EVENT_DLSIS_ALARM:
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   8587a:	4b84      	ldr	r3, [pc, #528]	; (85a8c <Cl_Dlsis_controller+0x65c>)
   8587c:	4798      	blx	r3
   8587e:	4603      	mov	r3, r0
   85880:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
   85884:	e006      	b.n	85894 <Cl_Dlsis_controller+0x464>
			default:
			break;
   85886:	bf00      	nop
   85888:	f000 bd01 	b.w	8628e <Cl_Dlsis_controller+0xe5e>
							
						default:
						break;
					}
				}
			break;
   8588c:	bf00      	nop
   8588e:	f000 bcfe 	b.w	8628e <Cl_Dlsis_controller+0xe5e>
					default:break;
				}
			}
			
			
			break;
   85892:	bf00      	nop
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
			break;
			default:
			break;
		}
		break;
   85894:	f000 bcfb 	b.w	8628e <Cl_Dlsis_controller+0xe5e>
		case CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY:
		
			switch(cl_dlsis_event)
   85898:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   8589c:	2b12      	cmp	r3, #18
   8589e:	d000      	beq.n	858a2 <Cl_Dlsis_controller+0x472>
				
					}
				break;
				
				
				default:break;
   858a0:	e00e      	b.n	858c0 <Cl_Dlsis_controller+0x490>
			{
				
				case EVENT_DLSIS_TICK_500MS:
				
				
					Cl_Heater_GetHeaterStableStatus(&heater_stable_status);
   858a2:	487b      	ldr	r0, [pc, #492]	; (85a90 <Cl_Dlsis_controller+0x660>)
   858a4:	4b7b      	ldr	r3, [pc, #492]	; (85a94 <Cl_Dlsis_controller+0x664>)
   858a6:	4798      	blx	r3
					Cl_Uint16Type temp = 0;
   858a8:	2300      	movs	r3, #0
   858aa:	84fb      	strh	r3, [r7, #38]	; 0x26
					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS , &temp);	
   858ac:	f107 0326 	add.w	r3, r7, #38	; 0x26
   858b0:	4619      	mov	r1, r3
   858b2:	2007      	movs	r0, #7
   858b4:	4b78      	ldr	r3, [pc, #480]	; (85a98 <Cl_Dlsis_controller+0x668>)
   858b6:	4798      	blx	r3
				//	if ((heater_stable_status) &&  (temp < 14) && (temp > 13.3))
					//if( (temp == 0))
					{
				
						cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT;
   858b8:	4b78      	ldr	r3, [pc, #480]	; (85a9c <Cl_Dlsis_controller+0x66c>)
   858ba:	2203      	movs	r2, #3
   858bc:	701a      	strb	r2, [r3, #0]
				
				

				
					}
				break;
   858be:	bf00      	nop
				
				
				default:break;
			}

		break;
   858c0:	f000 bce5 	b.w	8628e <Cl_Dlsis_controller+0xe5e>
		case CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT:
		
		switch(cl_dlsis_event)
   858c4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   858c8:	2b12      	cmp	r3, #18
   858ca:	d000      	beq.n	858ce <Cl_Dlsis_controller+0x49e>
						cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS; // added 
						//cl_dlsis_state = CL_DLSIS_STATE_UF_ACTIVATION; // commented as uf tick second event is under event dialysis tick seconds
					}
					}
			break;
			default:break;
   858cc:	e04e      	b.n	8596c <Cl_Dlsis_controller+0x53c>
		switch(cl_dlsis_event)
		{
			
			case EVENT_DLSIS_TICK_500MS:
					{
						Cl_Uint16Type temp = 0;
   858ce:	2300      	movs	r3, #0
   858d0:	84bb      	strh	r3, [r7, #36]	; 0x24
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   858d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
   858d6:	4619      	mov	r1, r3
   858d8:	200a      	movs	r0, #10
   858da:	4b6f      	ldr	r3, [pc, #444]	; (85a98 <Cl_Dlsis_controller+0x668>)
   858dc:	4798      	blx	r3
					if( temp == 1)  // need to change as per the blood detector status
   858de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   858e0:	2b01      	cmp	r3, #1
   858e2:	d142      	bne.n	8596a <Cl_Dlsis_controller+0x53a>
					{
						
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD_DL",8);
   858e4:	2208      	movs	r2, #8
   858e6:	496e      	ldr	r1, [pc, #440]	; (85aa0 <Cl_Dlsis_controller+0x670>)
   858e8:	2018      	movs	r0, #24
   858ea:	4b6e      	ldr	r3, [pc, #440]	; (85aa4 <Cl_Dlsis_controller+0x674>)
   858ec:	4798      	blx	r3
							cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,1000);
   858ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   858f2:	2006      	movs	r0, #6
   858f4:	4b6c      	ldr	r3, [pc, #432]	; (85aa8 <Cl_Dlsis_controller+0x678>)
   858f6:	4798      	blx	r3
							cl_wait(100);
   858f8:	2064      	movs	r0, #100	; 0x64
   858fa:	4b6c      	ldr	r3, [pc, #432]	; (85aac <Cl_Dlsis_controller+0x67c>)
   858fc:	4798      	blx	r3
							cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   858fe:	2100      	movs	r1, #0
   85900:	200a      	movs	r0, #10
   85902:	4b69      	ldr	r3, [pc, #420]	; (85aa8 <Cl_Dlsis_controller+0x678>)
   85904:	4798      	blx	r3
							cl_wait(100);
   85906:	2064      	movs	r0, #100	; 0x64
   85908:	4b68      	ldr	r3, [pc, #416]	; (85aac <Cl_Dlsis_controller+0x67c>)
   8590a:	4798      	blx	r3
							Cl_Uint32Type temp1 = Treatdata[ID_heprate];
   8590c:	4b68      	ldr	r3, [pc, #416]	; (85ab0 <Cl_Dlsis_controller+0x680>)
   8590e:	69db      	ldr	r3, [r3, #28]
   85910:	623b      	str	r3, [r7, #32]
							hep_calibration(temp1);
   85912:	6a3b      	ldr	r3, [r7, #32]
   85914:	4618      	mov	r0, r3
   85916:	4b67      	ldr	r3, [pc, #412]	; (85ab4 <Cl_Dlsis_controller+0x684>)
   85918:	4798      	blx	r3
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   8591a:	f107 0320 	add.w	r3, r7, #32
   8591e:	2202      	movs	r2, #2
   85920:	4619      	mov	r1, r3
   85922:	2019      	movs	r0, #25
   85924:	4b5f      	ldr	r3, [pc, #380]	; (85aa4 <Cl_Dlsis_controller+0x674>)
   85926:	4798      	blx	r3
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_speed,2);
   85928:	2202      	movs	r2, #2
   8592a:	4963      	ldr	r1, [pc, #396]	; (85ab8 <Cl_Dlsis_controller+0x688>)
   8592c:	2019      	movs	r0, #25
   8592e:	4b5d      	ldr	r3, [pc, #372]	; (85aa4 <Cl_Dlsis_controller+0x674>)
   85930:	4798      	blx	r3
							cl_wait(100);
   85932:	2064      	movs	r0, #100	; 0x64
   85934:	4b5d      	ldr	r3, [pc, #372]	; (85aac <Cl_Dlsis_controller+0x67c>)
   85936:	4798      	blx	r3
							cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   85938:	4b5f      	ldr	r3, [pc, #380]	; (85ab8 <Cl_Dlsis_controller+0x688>)
   8593a:	681b      	ldr	r3, [r3, #0]
   8593c:	4619      	mov	r1, r3
   8593e:	2006      	movs	r0, #6
   85940:	4b59      	ldr	r3, [pc, #356]	; (85aa8 <Cl_Dlsis_controller+0x678>)
   85942:	4798      	blx	r3
							cl_wait(100);
   85944:	2064      	movs	r0, #100	; 0x64
   85946:	4b59      	ldr	r3, [pc, #356]	; (85aac <Cl_Dlsis_controller+0x67c>)
   85948:	4798      	blx	r3
							cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   8594a:	2100      	movs	r1, #0
   8594c:	200a      	movs	r0, #10
   8594e:	4b56      	ldr	r3, [pc, #344]	; (85aa8 <Cl_Dlsis_controller+0x678>)
   85950:	4798      	blx	r3
						
						sv_cntrl_disable_bypass();
   85952:	4b5a      	ldr	r3, [pc, #360]	; (85abc <Cl_Dlsis_controller+0x68c>)
   85954:	4798      	blx	r3
					//	Cl_Uint32Type temp = Treatdata[ID_ufgoal];
					//	Cl_Uint32Type temptime = Treatdata[ID_treattime]; // added to get the dialysis duration
			
						cl_uf_controller(CL_UF_EVENT_START,0);
   85956:	2100      	movs	r1, #0
   85958:	2002      	movs	r0, #2
   8595a:	4b59      	ldr	r3, [pc, #356]	; (85ac0 <Cl_Dlsis_controller+0x690>)
   8595c:	4798      	blx	r3
						cl_wait(100);
   8595e:	2064      	movs	r0, #100	; 0x64
   85960:	4b52      	ldr	r3, [pc, #328]	; (85aac <Cl_Dlsis_controller+0x67c>)
   85962:	4798      	blx	r3
						cl_wait(600);
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,3000);
						cl_wait(800);
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);*/
			
						cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS; // added 
   85964:	4b4d      	ldr	r3, [pc, #308]	; (85a9c <Cl_Dlsis_controller+0x66c>)
   85966:	2204      	movs	r2, #4
   85968:	701a      	strb	r2, [r3, #0]
						//cl_dlsis_state = CL_DLSIS_STATE_UF_ACTIVATION; // commented as uf tick second event is under event dialysis tick seconds
					}
					}
			break;
   8596a:	bf00      	nop
			default:break;
		}
		break;
   8596c:	f000 bc8f 	b.w	8628e <Cl_Dlsis_controller+0xe5e>
		case CL_DLSIS_STATE_UF_ACTIVATION:
		switch (cl_dlsis_event)
   85970:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   85974:	2b13      	cmp	r3, #19
   85976:	d000      	beq.n	8597a <Cl_Dlsis_controller+0x54a>
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
			cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
				cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS;
			break;
			default:break;
   85978:	e00a      	b.n	85990 <Cl_Dlsis_controller+0x560>
		case CL_DLSIS_STATE_UF_ACTIVATION:
		switch (cl_dlsis_event)
		{
			
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
   8597a:	4b52      	ldr	r3, [pc, #328]	; (85ac4 <Cl_Dlsis_controller+0x694>)
   8597c:	4798      	blx	r3
			cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   8597e:	f640 11c4 	movw	r1, #2500	; 0x9c4
   85982:	2001      	movs	r0, #1
   85984:	4b4e      	ldr	r3, [pc, #312]	; (85ac0 <Cl_Dlsis_controller+0x690>)
   85986:	4798      	blx	r3
				cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS;
   85988:	4b44      	ldr	r3, [pc, #272]	; (85a9c <Cl_Dlsis_controller+0x66c>)
   8598a:	2204      	movs	r2, #4
   8598c:	701a      	strb	r2, [r3, #0]
			break;
   8598e:	bf00      	nop
			default:break;
		}
		
		break;
   85990:	f000 bc7d 	b.w	8628e <Cl_Dlsis_controller+0xe5e>
		
		case CL_DLSIS_STATE_DIALYSIS:
		switch (cl_dlsis_event)
   85994:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   85998:	3b02      	subs	r3, #2
   8599a:	2b1d      	cmp	r3, #29
   8599c:	f200 8476 	bhi.w	8628c <Cl_Dlsis_controller+0xe5c>
   859a0:	a201      	add	r2, pc, #4	; (adr r2, 859a8 <Cl_Dlsis_controller+0x578>)
   859a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   859a6:	bf00      	nop
   859a8:	00085a2d 	.word	0x00085a2d
   859ac:	00085ad5 	.word	0x00085ad5
   859b0:	0008628d 	.word	0x0008628d
   859b4:	0008628d 	.word	0x0008628d
   859b8:	00085d4b 	.word	0x00085d4b
   859bc:	00085dc5 	.word	0x00085dc5
   859c0:	00085dd1 	.word	0x00085dd1
   859c4:	00085dd7 	.word	0x00085dd7
   859c8:	0008628d 	.word	0x0008628d
   859cc:	0008628d 	.word	0x0008628d
   859d0:	0008628d 	.word	0x0008628d
   859d4:	0008628d 	.word	0x0008628d
   859d8:	0008628d 	.word	0x0008628d
   859dc:	0008628d 	.word	0x0008628d
   859e0:	0008628d 	.word	0x0008628d
   859e4:	00085e03 	.word	0x00085e03
   859e8:	00085e03 	.word	0x00085e03
   859ec:	00085c63 	.word	0x00085c63
   859f0:	0008628d 	.word	0x0008628d
   859f4:	0008628d 	.word	0x0008628d
   859f8:	00085ddd 	.word	0x00085ddd
   859fc:	00085de9 	.word	0x00085de9
   85a00:	0008628d 	.word	0x0008628d
   85a04:	0008628d 	.word	0x0008628d
   85a08:	0008628d 	.word	0x0008628d
   85a0c:	00085e03 	.word	0x00085e03
   85a10:	00085e03 	.word	0x00085e03
   85a14:	0008628d 	.word	0x0008628d
   85a18:	0008628d 	.word	0x0008628d
   85a1c:	00085a21 	.word	0x00085a21
		{
			

			case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:			
			Cl_Dlsis_PauseDialysis();
   85a20:	4b29      	ldr	r3, [pc, #164]	; (85ac8 <Cl_Dlsis_controller+0x698>)
   85a22:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   85a24:	4b1d      	ldr	r3, [pc, #116]	; (85a9c <Cl_Dlsis_controller+0x66c>)
   85a26:	2207      	movs	r2, #7
   85a28:	701a      	strb	r2, [r3, #0]
			break;
   85a2a:	e1f1      	b.n	85e10 <Cl_Dlsis_controller+0x9e0>
			case EVENT_DLSIS_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   85a2c:	4b27      	ldr	r3, [pc, #156]	; (85acc <Cl_Dlsis_controller+0x69c>)
   85a2e:	7e1b      	ldrb	r3, [r3, #24]
   85a30:	2b00      	cmp	r3, #0
   85a32:	f000 81e8 	beq.w	85e06 <Cl_Dlsis_controller+0x9d6>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   85a36:	4b25      	ldr	r3, [pc, #148]	; (85acc <Cl_Dlsis_controller+0x69c>)
   85a38:	791b      	ldrb	r3, [r3, #4]
   85a3a:	2b04      	cmp	r3, #4
   85a3c:	d000      	beq.n	85a40 <Cl_Dlsis_controller+0x610>
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;

						default:
						break;
   85a3e:	e01b      	b.n	85a78 <Cl_Dlsis_controller+0x648>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   85a40:	2316      	movs	r3, #22
   85a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   85a46:	2304      	movs	r3, #4
   85a48:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   85a4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
   85a50:	3301      	adds	r3, #1
   85a52:	4619      	mov	r1, r3
   85a54:	2004      	movs	r0, #4
   85a56:	4b1e      	ldr	r3, [pc, #120]	; (85ad0 <Cl_Dlsis_controller+0x6a0>)
   85a58:	4798      	blx	r3
   85a5a:	4603      	mov	r3, r0
   85a5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   85a60:	f107 0134 	add.w	r1, r7, #52	; 0x34
   85a64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85a68:	2202      	movs	r2, #2
   85a6a:	4618      	mov	r0, r3
   85a6c:	4b0d      	ldr	r3, [pc, #52]	; (85aa4 <Cl_Dlsis_controller+0x674>)
   85a6e:	4798      	blx	r3
   85a70:	4603      	mov	r3, r0
   85a72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						break;
   85a76:	bf00      	nop

						default:
						break;
					}
				}
			break;
   85a78:	e1c5      	b.n	85e06 <Cl_Dlsis_controller+0x9d6>
   85a7a:	bf00      	nop
   85a7c:	cccccccd 	.word	0xcccccccd
   85a80:	000a3d65 	.word	0x000a3d65
   85a84:	20072d08 	.word	0x20072d08
   85a88:	000877f1 	.word	0x000877f1
   85a8c:	00086db5 	.word	0x00086db5
   85a90:	200720e9 	.word	0x200720e9
   85a94:	00088959 	.word	0x00088959
   85a98:	0008d6b1 	.word	0x0008d6b1
   85a9c:	200720d0 	.word	0x200720d0
   85aa0:	000a5e30 	.word	0x000a5e30
   85aa4:	00099729 	.word	0x00099729
   85aa8:	000925a9 	.word	0x000925a9
   85aac:	00091e2d 	.word	0x00091e2d
   85ab0:	200731a4 	.word	0x200731a4
   85ab4:	00083f89 	.word	0x00083f89
   85ab8:	20072d78 	.word	0x20072d78
   85abc:	00097b81 	.word	0x00097b81
   85ac0:	00093cd9 	.word	0x00093cd9
   85ac4:	00086dfd 	.word	0x00086dfd
   85ac8:	00086d61 	.word	0x00086d61
   85acc:	20072f98 	.word	0x20072f98
   85ad0:	00098239 	.word	0x00098239
			case EVENT_DLSIS_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   85ad4:	4ba2      	ldr	r3, [pc, #648]	; (85d60 <Cl_Dlsis_controller+0x930>)
   85ad6:	7e1b      	ldrb	r3, [r3, #24]
   85ad8:	2b00      	cmp	r3, #0
   85ada:	f000 8196 	beq.w	85e0a <Cl_Dlsis_controller+0x9da>
										{
													cl_Datastreamtype cl_temp  ;	
													cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   85ade:	4ba0      	ldr	r3, [pc, #640]	; (85d60 <Cl_Dlsis_controller+0x930>)
   85ae0:	795b      	ldrb	r3, [r3, #5]
   85ae2:	773b      	strb	r3, [r7, #28]
													cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   85ae4:	4b9e      	ldr	r3, [pc, #632]	; (85d60 <Cl_Dlsis_controller+0x930>)
   85ae6:	799b      	ldrb	r3, [r3, #6]
   85ae8:	777b      	strb	r3, [r7, #29]
													cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   85aea:	4b9d      	ldr	r3, [pc, #628]	; (85d60 <Cl_Dlsis_controller+0x930>)
   85aec:	79db      	ldrb	r3, [r3, #7]
   85aee:	77bb      	strb	r3, [r7, #30]
													cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   85af0:	4b9b      	ldr	r3, [pc, #620]	; (85d60 <Cl_Dlsis_controller+0x930>)
   85af2:	7a1b      	ldrb	r3, [r3, #8]
   85af4:	77fb      	strb	r3, [r7, #31]
											
											switch(Cl_ConsoleRxMsg.data.byte[0])
   85af6:	4b9a      	ldr	r3, [pc, #616]	; (85d60 <Cl_Dlsis_controller+0x930>)
   85af8:	791b      	ldrb	r3, [r3, #4]
   85afa:	3b05      	subs	r3, #5
   85afc:	2b20      	cmp	r3, #32
   85afe:	f200 80ae 	bhi.w	85c5e <Cl_Dlsis_controller+0x82e>
   85b02:	a201      	add	r2, pc, #4	; (adr r2, 85b08 <Cl_Dlsis_controller+0x6d8>)
   85b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85b08:	00085c5f 	.word	0x00085c5f
   85b0c:	00085c5f 	.word	0x00085c5f
   85b10:	00085c5f 	.word	0x00085c5f
   85b14:	00085c5f 	.word	0x00085c5f
   85b18:	00085c5f 	.word	0x00085c5f
   85b1c:	00085c5f 	.word	0x00085c5f
   85b20:	00085c5f 	.word	0x00085c5f
   85b24:	00085c5f 	.word	0x00085c5f
   85b28:	00085b8d 	.word	0x00085b8d
   85b2c:	00085c5f 	.word	0x00085c5f
   85b30:	00085c5f 	.word	0x00085c5f
   85b34:	00085c5f 	.word	0x00085c5f
   85b38:	00085c5f 	.word	0x00085c5f
   85b3c:	00085c5f 	.word	0x00085c5f
   85b40:	00085c5f 	.word	0x00085c5f
   85b44:	00085c5f 	.word	0x00085c5f
   85b48:	00085bab 	.word	0x00085bab
   85b4c:	00085c5f 	.word	0x00085c5f
   85b50:	00085c5f 	.word	0x00085c5f
   85b54:	00085bbb 	.word	0x00085bbb
   85b58:	00085bd3 	.word	0x00085bd3
   85b5c:	00085beb 	.word	0x00085beb
   85b60:	00085bfb 	.word	0x00085bfb
   85b64:	00085c0b 	.word	0x00085c0b
   85b68:	00085c1b 	.word	0x00085c1b
   85b6c:	00085c5f 	.word	0x00085c5f
   85b70:	00085c5f 	.word	0x00085c5f
   85b74:	00085c5f 	.word	0x00085c5f
   85b78:	00085c5f 	.word	0x00085c5f
   85b7c:	00085c2b 	.word	0x00085c2b
   85b80:	00085c35 	.word	0x00085c35
   85b84:	00085c3f 	.word	0x00085c3f
   85b88:	00085c4f 	.word	0x00085c4f
													case ID_setcond:
													break;
													case ID_ufrate:
													break;
													case ID_ufgoal:
													if(cl_temp.word == 0){
   85b8c:	69fb      	ldr	r3, [r7, #28]
   85b8e:	2b00      	cmp	r3, #0
   85b90:	d103      	bne.n	85b9a <Cl_Dlsis_controller+0x76a>
														cl_uf_controller(CL_UF_EVENT_STOP,0);
   85b92:	2100      	movs	r1, #0
   85b94:	2004      	movs	r0, #4
   85b96:	4b73      	ldr	r3, [pc, #460]	; (85d64 <Cl_Dlsis_controller+0x934>)
   85b98:	4798      	blx	r3
													}
													Treatdata[ID_ufgoal] = cl_temp.word;
   85b9a:	69fb      	ldr	r3, [r7, #28]
   85b9c:	4a72      	ldr	r2, [pc, #456]	; (85d68 <Cl_Dlsis_controller+0x938>)
   85b9e:	6353      	str	r3, [r2, #52]	; 0x34
													cl_uf_controller(CL_UF_EVENT_RESET,0);
   85ba0:	2100      	movs	r1, #0
   85ba2:	2008      	movs	r0, #8
   85ba4:	4b6f      	ldr	r3, [pc, #444]	; (85d64 <Cl_Dlsis_controller+0x934>)
   85ba6:	4798      	blx	r3
													
													break;
   85ba8:	e05a      	b.n	85c60 <Cl_Dlsis_controller+0x830>
													case ID_heparincheck:
													break;
													case ID_minufrate:
													break;
													case ID_treattime:
													Treatdata[ID_treattime] = cl_temp.word;
   85baa:	69fb      	ldr	r3, [r7, #28]
   85bac:	4a6e      	ldr	r2, [pc, #440]	; (85d68 <Cl_Dlsis_controller+0x938>)
   85bae:	6553      	str	r3, [r2, #84]	; 0x54
													cl_uf_controller(CL_UF_EVENT_RESET,0);
   85bb0:	2100      	movs	r1, #0
   85bb2:	2008      	movs	r0, #8
   85bb4:	4b6b      	ldr	r3, [pc, #428]	; (85d64 <Cl_Dlsis_controller+0x934>)
   85bb6:	4798      	blx	r3
													
													break;
   85bb8:	e052      	b.n	85c60 <Cl_Dlsis_controller+0x830>
													case ID_bloodratereturn:
													break;
													case ID_bloodratetreat:
													break;
													case ID_tempulimit:
														Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   85bba:	69fb      	ldr	r3, [r7, #28]
   85bbc:	4a6b      	ldr	r2, [pc, #428]	; (85d6c <Cl_Dlsis_controller+0x93c>)
   85bbe:	fba2 2303 	umull	r2, r3, r2, r3
   85bc2:	08da      	lsrs	r2, r3, #3
   85bc4:	4b6a      	ldr	r3, [pc, #424]	; (85d70 <Cl_Dlsis_controller+0x940>)
   85bc6:	4610      	mov	r0, r2
   85bc8:	4798      	blx	r3
   85bca:	4602      	mov	r2, r0
   85bcc:	4b69      	ldr	r3, [pc, #420]	; (85d74 <Cl_Dlsis_controller+0x944>)
   85bce:	649a      	str	r2, [r3, #72]	; 0x48
													break;
   85bd0:	e046      	b.n	85c60 <Cl_Dlsis_controller+0x830>
													case ID_templlimit:
														Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   85bd2:	69fb      	ldr	r3, [r7, #28]
   85bd4:	4a65      	ldr	r2, [pc, #404]	; (85d6c <Cl_Dlsis_controller+0x93c>)
   85bd6:	fba2 2303 	umull	r2, r3, r2, r3
   85bda:	08da      	lsrs	r2, r3, #3
   85bdc:	4b64      	ldr	r3, [pc, #400]	; (85d70 <Cl_Dlsis_controller+0x940>)
   85bde:	4610      	mov	r0, r2
   85be0:	4798      	blx	r3
   85be2:	4602      	mov	r2, r0
   85be4:	4b63      	ldr	r3, [pc, #396]	; (85d74 <Cl_Dlsis_controller+0x944>)
   85be6:	64da      	str	r2, [r3, #76]	; 0x4c
													break;
   85be8:	e03a      	b.n	85c60 <Cl_Dlsis_controller+0x830>
													case ID_tmpllimit:
													Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   85bea:	69fa      	ldr	r2, [r7, #28]
   85bec:	4b60      	ldr	r3, [pc, #384]	; (85d70 <Cl_Dlsis_controller+0x940>)
   85bee:	4610      	mov	r0, r2
   85bf0:	4798      	blx	r3
   85bf2:	4602      	mov	r2, r0
   85bf4:	4b5f      	ldr	r3, [pc, #380]	; (85d74 <Cl_Dlsis_controller+0x944>)
   85bf6:	635a      	str	r2, [r3, #52]	; 0x34
													break;
   85bf8:	e032      	b.n	85c60 <Cl_Dlsis_controller+0x830>
													case ID_tmpulimit:
													Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   85bfa:	69fa      	ldr	r2, [r7, #28]
   85bfc:	4b5c      	ldr	r3, [pc, #368]	; (85d70 <Cl_Dlsis_controller+0x940>)
   85bfe:	4610      	mov	r0, r2
   85c00:	4798      	blx	r3
   85c02:	4602      	mov	r2, r0
   85c04:	4b5b      	ldr	r3, [pc, #364]	; (85d74 <Cl_Dlsis_controller+0x944>)
   85c06:	631a      	str	r2, [r3, #48]	; 0x30
													break;
   85c08:	e02a      	b.n	85c60 <Cl_Dlsis_controller+0x830>
													case ID_vptllimit:
														Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   85c0a:	69fa      	ldr	r2, [r7, #28]
   85c0c:	4b58      	ldr	r3, [pc, #352]	; (85d70 <Cl_Dlsis_controller+0x940>)
   85c0e:	4610      	mov	r0, r2
   85c10:	4798      	blx	r3
   85c12:	4602      	mov	r2, r0
   85c14:	4b57      	ldr	r3, [pc, #348]	; (85d74 <Cl_Dlsis_controller+0x944>)
   85c16:	615a      	str	r2, [r3, #20]
													break;
   85c18:	e022      	b.n	85c60 <Cl_Dlsis_controller+0x830>
													case ID_vptulimit:
														Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   85c1a:	69fa      	ldr	r2, [r7, #28]
   85c1c:	4b54      	ldr	r3, [pc, #336]	; (85d70 <Cl_Dlsis_controller+0x940>)
   85c1e:	4610      	mov	r0, r2
   85c20:	4798      	blx	r3
   85c22:	4602      	mov	r2, r0
   85c24:	4b53      	ldr	r3, [pc, #332]	; (85d74 <Cl_Dlsis_controller+0x944>)
   85c26:	611a      	str	r2, [r3, #16]
													break;
   85c28:	e01a      	b.n	85c60 <Cl_Dlsis_controller+0x830>
													case ID_dflowllimit:
													break;
													case ID_dflowulimit:
													break;
													case ID_condllimit:
													Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   85c2a:	69fb      	ldr	r3, [r7, #28]
   85c2c:	b21a      	sxth	r2, r3
   85c2e:	4b51      	ldr	r3, [pc, #324]	; (85d74 <Cl_Dlsis_controller+0x944>)
   85c30:	801a      	strh	r2, [r3, #0]
													break;
   85c32:	e015      	b.n	85c60 <Cl_Dlsis_controller+0x830>
													case ID_condulimit:
													Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   85c34:	69fb      	ldr	r3, [r7, #28]
   85c36:	b21a      	sxth	r2, r3
   85c38:	4b4e      	ldr	r3, [pc, #312]	; (85d74 <Cl_Dlsis_controller+0x944>)
   85c3a:	805a      	strh	r2, [r3, #2]
													break;
   85c3c:	e010      	b.n	85c60 <Cl_Dlsis_controller+0x830>
													case ID_aptllimit:
														Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   85c3e:	69fa      	ldr	r2, [r7, #28]
   85c40:	4b4b      	ldr	r3, [pc, #300]	; (85d70 <Cl_Dlsis_controller+0x940>)
   85c42:	4610      	mov	r0, r2
   85c44:	4798      	blx	r3
   85c46:	4602      	mov	r2, r0
   85c48:	4b4a      	ldr	r3, [pc, #296]	; (85d74 <Cl_Dlsis_controller+0x944>)
   85c4a:	60da      	str	r2, [r3, #12]
													break;
   85c4c:	e008      	b.n	85c60 <Cl_Dlsis_controller+0x830>
													case ID_aptulimit:
													Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   85c4e:	69fa      	ldr	r2, [r7, #28]
   85c50:	4b47      	ldr	r3, [pc, #284]	; (85d70 <Cl_Dlsis_controller+0x940>)
   85c52:	4610      	mov	r0, r2
   85c54:	4798      	blx	r3
   85c56:	4602      	mov	r2, r0
   85c58:	4b46      	ldr	r3, [pc, #280]	; (85d74 <Cl_Dlsis_controller+0x944>)
   85c5a:	609a      	str	r2, [r3, #8]
													break;
   85c5c:	e000      	b.n	85c60 <Cl_Dlsis_controller+0x830>

												default:break;
   85c5e:	bf00      	nop
											}
										}
						
			break;
   85c60:	e0d3      	b.n	85e0a <Cl_Dlsis_controller+0x9da>
			
			case EVENT_DLSIS_TICK_500MS:
				//UpdateHeaterControls();
			break;
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
   85c62:	4b45      	ldr	r3, [pc, #276]	; (85d78 <Cl_Dlsis_controller+0x948>)
   85c64:	4798      	blx	r3
			//	UpdateHeaterControls();
				//cl_uf_controller(CL_UF_EVENT_SECOND,0);
				cl_hep_controller(CL_HEP_EVENT_SEC_TICK,0);
   85c66:	2100      	movs	r1, #0
   85c68:	200d      	movs	r0, #13
   85c6a:	4b44      	ldr	r3, [pc, #272]	; (85d7c <Cl_Dlsis_controller+0x94c>)
   85c6c:	4798      	blx	r3
				Cl_Dlsis_SenddlsisData();
   85c6e:	4b44      	ldr	r3, [pc, #272]	; (85d80 <Cl_Dlsis_controller+0x950>)
   85c70:	4798      	blx	r3
				DlsisTime.Cl_dlsissecondscounter++;
   85c72:	4b44      	ldr	r3, [pc, #272]	; (85d84 <Cl_Dlsis_controller+0x954>)
   85c74:	781b      	ldrb	r3, [r3, #0]
   85c76:	3301      	adds	r3, #1
   85c78:	b2da      	uxtb	r2, r3
   85c7a:	4b42      	ldr	r3, [pc, #264]	; (85d84 <Cl_Dlsis_controller+0x954>)
   85c7c:	701a      	strb	r2, [r3, #0]
			/*	if ((DlsisTime.Cl_dlsissecondscounter == 30)&&(flag_bc == 1))
				{
					sv_cs_setpotvalue(1900);
					flag_bc =0 ;
				}*/
				if(DlsisTime.Cl_dlsissecondscounter == 60)
   85c7e:	4b41      	ldr	r3, [pc, #260]	; (85d84 <Cl_Dlsis_controller+0x954>)
   85c80:	781b      	ldrb	r3, [r3, #0]
   85c82:	2b3c      	cmp	r3, #60	; 0x3c
   85c84:	d13f      	bne.n	85d06 <Cl_Dlsis_controller+0x8d6>
				{
					
					Cl_dlsisretcode = Cl_Dlsis_UpdateTimeInfo();
   85c86:	4b40      	ldr	r3, [pc, #256]	; (85d88 <Cl_Dlsis_controller+0x958>)
   85c88:	4798      	blx	r3
   85c8a:	4603      	mov	r3, r0
   85c8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					DlsisTime.Cl_dlsissecondscounter = 0;
   85c90:	4b3c      	ldr	r3, [pc, #240]	; (85d84 <Cl_Dlsis_controller+0x954>)
   85c92:	2200      	movs	r2, #0
   85c94:	701a      	strb	r2, [r3, #0]
					DlsisTime.Cl_dlsisMinutescounter++;
   85c96:	4b3b      	ldr	r3, [pc, #236]	; (85d84 <Cl_Dlsis_controller+0x954>)
   85c98:	785b      	ldrb	r3, [r3, #1]
   85c9a:	3301      	adds	r3, #1
   85c9c:	b2da      	uxtb	r2, r3
   85c9e:	4b39      	ldr	r3, [pc, #228]	; (85d84 <Cl_Dlsis_controller+0x954>)
   85ca0:	705a      	strb	r2, [r3, #1]
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);
						bypass_flag = 0;*/
					}
                          if (DlsisTime.Cl_dlsisMinutescounter == 1)
   85ca2:	4b38      	ldr	r3, [pc, #224]	; (85d84 <Cl_Dlsis_controller+0x954>)
   85ca4:	785b      	ldrb	r3, [r3, #1]
   85ca6:	2b01      	cmp	r3, #1
   85ca8:	d127      	bne.n	85cfa <Cl_Dlsis_controller+0x8ca>
								/*Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);*/
						
									Cl_Uint16Type temp_ps=0, low_threshold=0, high_threshold=0;
   85caa:	2300      	movs	r3, #0
   85cac:	837b      	strh	r3, [r7, #26]
   85cae:	2300      	movs	r3, #0
   85cb0:	833b      	strh	r3, [r7, #24]
   85cb2:	2300      	movs	r3, #0
   85cb4:	82fb      	strh	r3, [r7, #22]
									temp_ps=apt;
   85cb6:	4b35      	ldr	r3, [pc, #212]	; (85d8c <Cl_Dlsis_controller+0x95c>)
   85cb8:	681a      	ldr	r2, [r3, #0]
   85cba:	4b35      	ldr	r3, [pc, #212]	; (85d90 <Cl_Dlsis_controller+0x960>)
   85cbc:	4610      	mov	r0, r2
   85cbe:	4798      	blx	r3
   85cc0:	4603      	mov	r3, r0
   85cc2:	b29b      	uxth	r3, r3
   85cc4:	837b      	strh	r3, [r7, #26]
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT",4);
   85cc6:	2204      	movs	r2, #4
   85cc8:	4932      	ldr	r1, [pc, #200]	; (85d94 <Cl_Dlsis_controller+0x964>)
   85cca:	2018      	movs	r0, #24
   85ccc:	4b32      	ldr	r3, [pc, #200]	; (85d98 <Cl_Dlsis_controller+0x968>)
   85cce:	4798      	blx	r3
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
   85cd0:	f107 031a 	add.w	r3, r7, #26
   85cd4:	2202      	movs	r2, #2
   85cd6:	4619      	mov	r1, r3
   85cd8:	2019      	movs	r0, #25
   85cda:	4b2f      	ldr	r3, [pc, #188]	; (85d98 <Cl_Dlsis_controller+0x968>)
   85cdc:	4798      	blx	r3
										//Cl_alarmThresholdTable.apt_high_threshold = apt + 50;
										//Cl_alarmThresholdTable.apt_low_threshold = apt - 50;
										//low_threshold = Cl_alarmThresholdTable.apt_low_threshold;
										//high_threshold = Cl_alarmThresholdTable.apt_high_threshold;
						
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&low_threshold,2);
   85cde:	f107 0318 	add.w	r3, r7, #24
   85ce2:	2202      	movs	r2, #2
   85ce4:	4619      	mov	r1, r3
   85ce6:	2019      	movs	r0, #25
   85ce8:	4b2b      	ldr	r3, [pc, #172]	; (85d98 <Cl_Dlsis_controller+0x968>)
   85cea:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&high_threshold,2);
   85cec:	f107 0316 	add.w	r3, r7, #22
   85cf0:	2202      	movs	r2, #2
   85cf2:	4619      	mov	r1, r3
   85cf4:	2019      	movs	r0, #25
   85cf6:	4b28      	ldr	r3, [pc, #160]	; (85d98 <Cl_Dlsis_controller+0x968>)
   85cf8:	4798      	blx	r3
						
										//Cl_alarmThresholdTable.vpt_high_threshold = vpt + 50;
										//Cl_alarmThresholdTable.vpt_low_threshold = vpt - 50;
							}
					DlsisTime.Cl_dlsisTotalMinutescounter++;
   85cfa:	4b22      	ldr	r3, [pc, #136]	; (85d84 <Cl_Dlsis_controller+0x954>)
   85cfc:	78db      	ldrb	r3, [r3, #3]
   85cfe:	3301      	adds	r3, #1
   85d00:	b2da      	uxtb	r2, r3
   85d02:	4b20      	ldr	r3, [pc, #128]	; (85d84 <Cl_Dlsis_controller+0x954>)
   85d04:	70da      	strb	r2, [r3, #3]
					if (DlsisTime.Cl_dlsisTotalMinutescounter == CL_DLSIS_TIMEOUT_MIN);//Treatdata[ID_treattime])
					{
						//cl_testvirus();
					}
				}
				if(cl_Dlsis_CheckforDialysisCompletion() == CL_OK )
   85d06:	4b25      	ldr	r3, [pc, #148]	; (85d9c <Cl_Dlsis_controller+0x96c>)
   85d08:	4798      	blx	r3
   85d0a:	4603      	mov	r3, r0
   85d0c:	2b00      	cmp	r3, #0
   85d0e:	d17e      	bne.n	85e0e <Cl_Dlsis_controller+0x9de>
				{
					sv_cntrl_setgreenalarm();
   85d10:	4b23      	ldr	r3, [pc, #140]	; (85da0 <Cl_Dlsis_controller+0x970>)
   85d12:	4798      	blx	r3
				//	sv_cntrl_deactivatepump(BLOODPUMP);
					Cl_dlsisretcode = cl_Dlsis_notifydacandgotorinsestandby();
   85d14:	4b23      	ldr	r3, [pc, #140]	; (85da4 <Cl_Dlsis_controller+0x974>)
   85d16:	4798      	blx	r3
   85d18:	4603      	mov	r3, r0
   85d1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					sv_cntrl_poweroffheater();
   85d1e:	4b22      	ldr	r3, [pc, #136]	; (85da8 <Cl_Dlsis_controller+0x978>)
   85d20:	4798      	blx	r3
					SetHeaterState(CL_HEATER_STATE_OFF);
   85d22:	2004      	movs	r0, #4
   85d24:	4b21      	ldr	r3, [pc, #132]	; (85dac <Cl_Dlsis_controller+0x97c>)
   85d26:	4798      	blx	r3
					sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   85d28:	2011      	movs	r0, #17
   85d2a:	4b21      	ldr	r3, [pc, #132]	; (85db0 <Cl_Dlsis_controller+0x980>)
   85d2c:	4798      	blx	r3
					Cl_DlsisFillingFlowOff();
   85d2e:	4b21      	ldr	r3, [pc, #132]	; (85db4 <Cl_Dlsis_controller+0x984>)
   85d30:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_STOP,0);
   85d32:	2100      	movs	r1, #0
   85d34:	2004      	movs	r0, #4
   85d36:	4b0b      	ldr	r3, [pc, #44]	; (85d64 <Cl_Dlsis_controller+0x934>)
   85d38:	4798      	blx	r3
					cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   85d3a:	2100      	movs	r1, #0
   85d3c:	200c      	movs	r0, #12
   85d3e:	4b0f      	ldr	r3, [pc, #60]	; (85d7c <Cl_Dlsis_controller+0x94c>)
   85d40:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_POST_DIALYSIS_STANDBY;
   85d42:	4b1d      	ldr	r3, [pc, #116]	; (85db8 <Cl_Dlsis_controller+0x988>)
   85d44:	2206      	movs	r2, #6
   85d46:	701a      	strb	r2, [r3, #0]
				}
			break;
   85d48:	e061      	b.n	85e0e <Cl_Dlsis_controller+0x9de>
			case EVENT_DLSIS_STOP_DIALYSIS:
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   85d4a:	4b1c      	ldr	r3, [pc, #112]	; (85dbc <Cl_Dlsis_controller+0x98c>)
   85d4c:	4798      	blx	r3
   85d4e:	4603      	mov	r3, r0
   85d50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Cl_Dlsis_StopDialysis();
   85d54:	4b1a      	ldr	r3, [pc, #104]	; (85dc0 <Cl_Dlsis_controller+0x990>)
   85d56:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_STOPPED;
   85d58:	4b17      	ldr	r3, [pc, #92]	; (85db8 <Cl_Dlsis_controller+0x988>)
   85d5a:	2209      	movs	r2, #9
   85d5c:	701a      	strb	r2, [r3, #0]
			break;
   85d5e:	e057      	b.n	85e10 <Cl_Dlsis_controller+0x9e0>
   85d60:	20072f98 	.word	0x20072f98
   85d64:	00093cd9 	.word	0x00093cd9
   85d68:	200731a4 	.word	0x200731a4
   85d6c:	cccccccd 	.word	0xcccccccd
   85d70:	000a3d65 	.word	0x000a3d65
   85d74:	20072d08 	.word	0x20072d08
   85d78:	00086dfd 	.word	0x00086dfd
   85d7c:	000925a9 	.word	0x000925a9
   85d80:	00086f69 	.word	0x00086f69
   85d84:	20072d84 	.word	0x20072d84
   85d88:	00086491 	.word	0x00086491
   85d8c:	20072d00 	.word	0x20072d00
   85d90:	000a41ed 	.word	0x000a41ed
   85d94:	000a5e3c 	.word	0x000a5e3c
   85d98:	00099729 	.word	0x00099729
   85d9c:	00086509 	.word	0x00086509
   85da0:	00097c2d 	.word	0x00097c2d
   85da4:	00086539 	.word	0x00086539
   85da8:	00097999 	.word	0x00097999
   85dac:	00088a91 	.word	0x00088a91
   85db0:	00097b9d 	.word	0x00097b9d
   85db4:	00086ddd 	.word	0x00086ddd
   85db8:	200720d0 	.word	0x200720d0
   85dbc:	00097b59 	.word	0x00097b59
   85dc0:	000869b5 	.word	0x000869b5
			case EVENT_DLSIS_PAUSE_DIALYSIS:
			Cl_Dlsis_PauseDialysis();
   85dc4:	4baf      	ldr	r3, [pc, #700]	; (86084 <Cl_Dlsis_controller+0xc54>)
   85dc6:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   85dc8:	4baf      	ldr	r3, [pc, #700]	; (86088 <Cl_Dlsis_controller+0xc58>)
   85dca:	2207      	movs	r2, #7
   85dcc:	701a      	strb	r2, [r3, #0]
			break;
   85dce:	e01f      	b.n	85e10 <Cl_Dlsis_controller+0x9e0>
			case EVENT_DLSIS_BYPASS_ON:
			Cl_Dlsis_BypassDialysis();
   85dd0:	4bae      	ldr	r3, [pc, #696]	; (8608c <Cl_Dlsis_controller+0xc5c>)
   85dd2:	4798      	blx	r3
			break;
   85dd4:	e01c      	b.n	85e10 <Cl_Dlsis_controller+0x9e0>
			case EVENT_DLSIS_BYPASS_OFF:
			Cl_Dlsis_BypassOff();
   85dd6:	4bae      	ldr	r3, [pc, #696]	; (86090 <Cl_Dlsis_controller+0xc60>)
   85dd8:	4798      	blx	r3
			break;
   85dda:	e019      	b.n	85e10 <Cl_Dlsis_controller+0x9e0>
			case EVENT_DLSIS__MINUF_ON:
			break;
			case EVENT_DLSIS__MINUF_OFF:
			break;
			case EVENT_DLSIS_ALARM:
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   85ddc:	4bad      	ldr	r3, [pc, #692]	; (86094 <Cl_Dlsis_controller+0xc64>)
   85dde:	4798      	blx	r3
   85de0:	4603      	mov	r3, r0
   85de2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
   85de6:	e013      	b.n	85e10 <Cl_Dlsis_controller+0x9e0>
					//Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
					if(alarmstatus1)
					{
						//Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_CS);
					}
					Cl_Alarm_GetAlarmStatus(TEMP2_HIGH_THRESHOLD,&alarmstatus3);
   85de8:	f107 033d 	add.w	r3, r7, #61	; 0x3d
   85dec:	4619      	mov	r1, r3
   85dee:	2011      	movs	r0, #17
   85df0:	4ba9      	ldr	r3, [pc, #676]	; (86098 <Cl_Dlsis_controller+0xc68>)
   85df2:	4798      	blx	r3
					if(alarmstatus3)
					{
						//	UpdateHeaterControls();
					}
			
					Cl_Alarm_GetAlarmStatus(FLOW_HIGH_FLOWRATE,&flowstatus);
   85df4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   85df8:	4619      	mov	r1, r3
   85dfa:	200e      	movs	r0, #14
   85dfc:	4ba6      	ldr	r3, [pc, #664]	; (86098 <Cl_Dlsis_controller+0xc68>)
   85dfe:	4798      	blx	r3
					//	if(flowstatus)
					//	{
					//		Cl_rinseretcode = sv_cntrl_poweroffheater();
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					//	}
			break;
   85e00:	e006      	b.n	85e10 <Cl_Dlsis_controller+0x9e0>
										}
						
			break;
			case EVENT_DLSIS_TICK_50MS:
			
			break;
   85e02:	bf00      	nop
   85e04:	e242      	b.n	8628c <Cl_Dlsis_controller+0xe5c>

						default:
						break;
					}
				}
			break;
   85e06:	bf00      	nop
   85e08:	e240      	b.n	8628c <Cl_Dlsis_controller+0xe5c>

												default:break;
											}
										}
						
			break;
   85e0a:	bf00      	nop
   85e0c:	e23e      	b.n	8628c <Cl_Dlsis_controller+0xe5c>
					Cl_DlsisFillingFlowOff();
					cl_uf_controller(CL_UF_EVENT_STOP,0);
					cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
					cl_dlsis_state = CL_DLSIS_STATE_POST_DIALYSIS_STANDBY;
				}
			break;
   85e0e:	bf00      	nop
					//	}
			break;


		}
		break;
   85e10:	e23c      	b.n	8628c <Cl_Dlsis_controller+0xe5c>
		case CL_DLSIS_STATE_BYPASS:
									switch (cl_dlsis_event)
   85e12:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   85e16:	2b09      	cmp	r3, #9
   85e18:	d008      	beq.n	85e2c <Cl_Dlsis_controller+0x9fc>
   85e1a:	2b16      	cmp	r3, #22
   85e1c:	d000      	beq.n	85e20 <Cl_Dlsis_controller+0x9f0>
										Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
										break;
										case EVENT_DLSIS_BYPASS_OFF:
										Cl_Dlsis_BypassOff();
										break;
										default:break;
   85e1e:	e008      	b.n	85e32 <Cl_Dlsis_controller+0xa02>
		break;
		case CL_DLSIS_STATE_BYPASS:
									switch (cl_dlsis_event)
									{
										case EVENT_DLSIS_ALARM:
										Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   85e20:	4b9c      	ldr	r3, [pc, #624]	; (86094 <Cl_Dlsis_controller+0xc64>)
   85e22:	4798      	blx	r3
   85e24:	4603      	mov	r3, r0
   85e26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
										break;
   85e2a:	e002      	b.n	85e32 <Cl_Dlsis_controller+0xa02>
										case EVENT_DLSIS_BYPASS_OFF:
										Cl_Dlsis_BypassOff();
   85e2c:	4b98      	ldr	r3, [pc, #608]	; (86090 <Cl_Dlsis_controller+0xc60>)
   85e2e:	4798      	blx	r3
										break;
   85e30:	bf00      	nop
										default:break;
									}

					
		break;
   85e32:	e22c      	b.n	8628e <Cl_Dlsis_controller+0xe5e>
		
		
		case CL_DLSIS_STATE_PAUSED:
							switch (cl_dlsis_event)
   85e34:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   85e38:	2b05      	cmp	r3, #5
   85e3a:	d002      	beq.n	85e42 <Cl_Dlsis_controller+0xa12>
   85e3c:	2b06      	cmp	r3, #6
   85e3e:	d003      	beq.n	85e48 <Cl_Dlsis_controller+0xa18>
								Cl_Dlsis_ResumeDialysis();
								break;
								case  EVENT_DLSIS_STOP_DIALYSIS:
								Cl_Dlsis_StopDialysis();
								break;
								default:break;
   85e40:	e005      	b.n	85e4e <Cl_Dlsis_controller+0xa1e>
		
		case CL_DLSIS_STATE_PAUSED:
							switch (cl_dlsis_event)
							{
								case EVENT_DLSIS_START_DIALYSIS:
								Cl_Dlsis_ResumeDialysis();
   85e42:	4b96      	ldr	r3, [pc, #600]	; (8609c <Cl_Dlsis_controller+0xc6c>)
   85e44:	4798      	blx	r3
								break;
   85e46:	e002      	b.n	85e4e <Cl_Dlsis_controller+0xa1e>
								case  EVENT_DLSIS_STOP_DIALYSIS:
								Cl_Dlsis_StopDialysis();
   85e48:	4b95      	ldr	r3, [pc, #596]	; (860a0 <Cl_Dlsis_controller+0xc70>)
   85e4a:	4798      	blx	r3
								break;
   85e4c:	bf00      	nop
								default:break;
							}
		
		break;
   85e4e:	e21e      	b.n	8628e <Cl_Dlsis_controller+0xe5e>
		case CL_DLSIS_STATE_STOPPED:
							switch (cl_dlsis_event)
   85e50:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   85e54:	2b04      	cmp	r3, #4
   85e56:	d005      	beq.n	85e64 <Cl_Dlsis_controller+0xa34>
   85e58:	2b05      	cmp	r3, #5
   85e5a:	d000      	beq.n	85e5e <Cl_Dlsis_controller+0xa2e>
								Cl_Dlsis_StartDialysis();
								break;
								case EVENT_DLSIS_START_RINSE:
								Cl_mac_apprequesthandler(MACREQ_POST_DIALYSIS_RINSE_REQ);
								break;
								default:break;
   85e5c:	e006      	b.n	85e6c <Cl_Dlsis_controller+0xa3c>
		break;
		case CL_DLSIS_STATE_STOPPED:
							switch (cl_dlsis_event)
							{
								case EVENT_DLSIS_START_DIALYSIS:
								Cl_Dlsis_StartDialysis();
   85e5e:	4b91      	ldr	r3, [pc, #580]	; (860a4 <Cl_Dlsis_controller+0xc74>)
   85e60:	4798      	blx	r3
								break;
   85e62:	e003      	b.n	85e6c <Cl_Dlsis_controller+0xa3c>
								case EVENT_DLSIS_START_RINSE:
								Cl_mac_apprequesthandler(MACREQ_POST_DIALYSIS_RINSE_REQ);
   85e64:	2056      	movs	r0, #86	; 0x56
   85e66:	4b90      	ldr	r3, [pc, #576]	; (860a8 <Cl_Dlsis_controller+0xc78>)
   85e68:	4798      	blx	r3
								break;
   85e6a:	bf00      	nop
								default:break;
							}
							
		break;
   85e6c:	e20f      	b.n	8628e <Cl_Dlsis_controller+0xe5e>

		case CL_DLSIS_STATE_CRITICAL_ALARM:
					switch (cl_dlsis_event)
   85e6e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   85e72:	3b01      	subs	r3, #1
   85e74:	2b19      	cmp	r3, #25
   85e76:	d87e      	bhi.n	85f76 <Cl_Dlsis_controller+0xb46>
   85e78:	a201      	add	r2, pc, #4	; (adr r2, 85e80 <Cl_Dlsis_controller+0xa50>)
   85e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85e7e:	bf00      	nop
   85e80:	00085f41 	.word	0x00085f41
   85e84:	00085eef 	.word	0x00085eef
   85e88:	00085f77 	.word	0x00085f77
   85e8c:	00085f77 	.word	0x00085f77
   85e90:	00085ee9 	.word	0x00085ee9
   85e94:	00085f77 	.word	0x00085f77
   85e98:	00085f77 	.word	0x00085f77
   85e9c:	00085f6b 	.word	0x00085f6b
   85ea0:	00085f71 	.word	0x00085f71
   85ea4:	00085f77 	.word	0x00085f77
   85ea8:	00085f77 	.word	0x00085f77
   85eac:	00085f77 	.word	0x00085f77
   85eb0:	00085f77 	.word	0x00085f77
   85eb4:	00085f77 	.word	0x00085f77
   85eb8:	00085f77 	.word	0x00085f77
   85ebc:	00085f77 	.word	0x00085f77
   85ec0:	00085f77 	.word	0x00085f77
   85ec4:	00085f77 	.word	0x00085f77
   85ec8:	00085f3b 	.word	0x00085f3b
   85ecc:	00085f77 	.word	0x00085f77
   85ed0:	00085f77 	.word	0x00085f77
   85ed4:	00085f5f 	.word	0x00085f5f
   85ed8:	00085f77 	.word	0x00085f77
   85edc:	00085f77 	.word	0x00085f77
   85ee0:	00085f77 	.word	0x00085f77
   85ee4:	00085f77 	.word	0x00085f77
					{
						case EVENT_DLSIS_START_DIALYSIS:
						Cl_Dlsis_ResumeDialysis();
   85ee8:	4b6c      	ldr	r3, [pc, #432]	; (8609c <Cl_Dlsis_controller+0xc6c>)
   85eea:	4798      	blx	r3
						break;
   85eec:	e046      	b.n	85f7c <Cl_Dlsis_controller+0xb4c>
						break;
						case EVENT_DLSIS__STOP_RETURN:
						break;
						case EVENT_DLSIS_GET_DATA:

							if(Cl_ConsoleRxMsg.msgready == true)
   85eee:	4b6f      	ldr	r3, [pc, #444]	; (860ac <Cl_Dlsis_controller+0xc7c>)
   85ef0:	7e1b      	ldrb	r3, [r3, #24]
   85ef2:	2b00      	cmp	r3, #0
   85ef4:	d041      	beq.n	85f7a <Cl_Dlsis_controller+0xb4a>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   85ef6:	4b6d      	ldr	r3, [pc, #436]	; (860ac <Cl_Dlsis_controller+0xc7c>)
   85ef8:	791b      	ldrb	r3, [r3, #4]
   85efa:	2b04      	cmp	r3, #4
   85efc:	d000      	beq.n	85f00 <Cl_Dlsis_controller+0xad0>
									Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;

									default:
									break;
   85efe:	e01b      	b.n	85f38 <Cl_Dlsis_controller+0xb08>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   85f00:	2316      	movs	r3, #22
   85f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   85f06:	2304      	movs	r3, #4
   85f08:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
									Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   85f0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
   85f10:	3301      	adds	r3, #1
   85f12:	4619      	mov	r1, r3
   85f14:	2004      	movs	r0, #4
   85f16:	4b66      	ldr	r3, [pc, #408]	; (860b0 <Cl_Dlsis_controller+0xc80>)
   85f18:	4798      	blx	r3
   85f1a:	4603      	mov	r3, r0
   85f1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   85f20:	f107 0134 	add.w	r1, r7, #52	; 0x34
   85f24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85f28:	2202      	movs	r2, #2
   85f2a:	4618      	mov	r0, r3
   85f2c:	4b61      	ldr	r3, [pc, #388]	; (860b4 <Cl_Dlsis_controller+0xc84>)
   85f2e:	4798      	blx	r3
   85f30:	4603      	mov	r3, r0
   85f32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
									break;
   85f36:	bf00      	nop

									default:
									break;
								}
							}
						break;
   85f38:	e01f      	b.n	85f7a <Cl_Dlsis_controller+0xb4a>
						case EVENT_DLSIS_TICK_SECOND:
						
						Cl_Dlsis_SenddlsisData();
   85f3a:	4b5f      	ldr	r3, [pc, #380]	; (860b8 <Cl_Dlsis_controller+0xc88>)
   85f3c:	4798      	blx	r3
						/*	if (dlsisalarm != _NO_ALARM)
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
								dlsis_check_alarm(dlsisalarm);
							}*/
						break;
   85f3e:	e01d      	b.n	85f7c <Cl_Dlsis_controller+0xb4c>
						case EVENT_DLSIS_CLR_ALARM:
										sv_cntrl_resetredalarm();
   85f40:	4b5e      	ldr	r3, [pc, #376]	; (860bc <Cl_Dlsis_controller+0xc8c>)
   85f42:	4798      	blx	r3
										sv_cntrl_resetyellowalarm();
   85f44:	4b5e      	ldr	r3, [pc, #376]	; (860c0 <Cl_Dlsis_controller+0xc90>)
   85f46:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   85f48:	4b5e      	ldr	r3, [pc, #376]	; (860c4 <Cl_Dlsis_controller+0xc94>)
   85f4a:	4798      	blx	r3
										cl_bp_controller(CL_BP_EVENT_START,0);
   85f4c:	2100      	movs	r1, #0
   85f4e:	2002      	movs	r0, #2
   85f50:	4b5d      	ldr	r3, [pc, #372]	; (860c8 <Cl_Dlsis_controller+0xc98>)
   85f52:	4798      	blx	r3
										sv_cntrl_activatevenousclamp();
   85f54:	4b5d      	ldr	r3, [pc, #372]	; (860cc <Cl_Dlsis_controller+0xc9c>)
   85f56:	4798      	blx	r3
										Cl_Dlsis_BypassOff();
   85f58:	4b4d      	ldr	r3, [pc, #308]	; (86090 <Cl_Dlsis_controller+0xc60>)
   85f5a:	4798      	blx	r3
						break;
   85f5c:	e00e      	b.n	85f7c <Cl_Dlsis_controller+0xb4c>
						case EVENT_DLSIS_ALARM:
						Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   85f5e:	4b4d      	ldr	r3, [pc, #308]	; (86094 <Cl_Dlsis_controller+0xc64>)
   85f60:	4798      	blx	r3
   85f62:	4603      	mov	r3, r0
   85f64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						break;
   85f68:	e008      	b.n	85f7c <Cl_Dlsis_controller+0xb4c>
						case EVENT_DLSIS_BYPASS_ON:
						Cl_Dlsis_BypassDialysis();
   85f6a:	4b48      	ldr	r3, [pc, #288]	; (8608c <Cl_Dlsis_controller+0xc5c>)
   85f6c:	4798      	blx	r3
						break;
   85f6e:	e005      	b.n	85f7c <Cl_Dlsis_controller+0xb4c>
						case EVENT_DLSIS_BYPASS_OFF:
						Cl_Dlsis_BypassOff();
   85f70:	4b47      	ldr	r3, [pc, #284]	; (86090 <Cl_Dlsis_controller+0xc60>)
   85f72:	4798      	blx	r3
						break;
   85f74:	e002      	b.n	85f7c <Cl_Dlsis_controller+0xb4c>
						
						default:break;
   85f76:	bf00      	nop
   85f78:	e189      	b.n	8628e <Cl_Dlsis_controller+0xe5e>

									default:
									break;
								}
							}
						break;
   85f7a:	bf00      	nop
						Cl_Dlsis_BypassOff();
						break;
						
						default:break;
					}
		break;
   85f7c:	e187      	b.n	8628e <Cl_Dlsis_controller+0xe5e>
		case CL_DLSIS_STATE_POST_DIALYSIS_STANDBY:
				switch(cl_dlsis_event)
   85f7e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   85f82:	3b02      	subs	r3, #2
   85f84:	2b20      	cmp	r3, #32
   85f86:	f200 8177 	bhi.w	86278 <Cl_Dlsis_controller+0xe48>
   85f8a:	a201      	add	r2, pc, #4	; (adr r2, 85f90 <Cl_Dlsis_controller+0xb60>)
   85f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85f90:	00086015 	.word	0x00086015
   85f94:	00086117 	.word	0x00086117
   85f98:	00086279 	.word	0x00086279
   85f9c:	00086279 	.word	0x00086279
   85fa0:	00086279 	.word	0x00086279
   85fa4:	00086279 	.word	0x00086279
   85fa8:	00086279 	.word	0x00086279
   85fac:	00086279 	.word	0x00086279
   85fb0:	00086279 	.word	0x00086279
   85fb4:	00086279 	.word	0x00086279
   85fb8:	00086279 	.word	0x00086279
   85fbc:	00086279 	.word	0x00086279
   85fc0:	00086279 	.word	0x00086279
   85fc4:	00086279 	.word	0x00086279
   85fc8:	00086279 	.word	0x00086279
   85fcc:	00086279 	.word	0x00086279
   85fd0:	00086279 	.word	0x00086279
   85fd4:	00086279 	.word	0x00086279
   85fd8:	00086279 	.word	0x00086279
   85fdc:	00086279 	.word	0x00086279
   85fe0:	00086279 	.word	0x00086279
   85fe4:	00086279 	.word	0x00086279
   85fe8:	00086279 	.word	0x00086279
   85fec:	00086279 	.word	0x00086279
   85ff0:	00086279 	.word	0x00086279
   85ff4:	00086279 	.word	0x00086279
   85ff8:	00086279 	.word	0x00086279
   85ffc:	000860e1 	.word	0x000860e1
   86000:	0008606f 	.word	0x0008606f
   86004:	00086079 	.word	0x00086079
   86008:	00086015 	.word	0x00086015
   8600c:	00086057 	.word	0x00086057
   86010:	00086065 	.word	0x00086065
						
						case EVENT_DLSIS_GET_DATA:

	
						case EVENT_DLSIS_HEP_RATE:
							if(Cl_ConsoleRxMsg.msgready == true)
   86014:	4b25      	ldr	r3, [pc, #148]	; (860ac <Cl_Dlsis_controller+0xc7c>)
   86016:	7e1b      	ldrb	r3, [r3, #24]
   86018:	2b00      	cmp	r3, #0
   8601a:	f000 812f 	beq.w	8627c <Cl_Dlsis_controller+0xe4c>
							{
				
								cl_Datastreamtype cl_temp  ;
								cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   8601e:	4b23      	ldr	r3, [pc, #140]	; (860ac <Cl_Dlsis_controller+0xc7c>)
   86020:	791b      	ldrb	r3, [r3, #4]
   86022:	743b      	strb	r3, [r7, #16]
								cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   86024:	4b21      	ldr	r3, [pc, #132]	; (860ac <Cl_Dlsis_controller+0xc7c>)
   86026:	795b      	ldrb	r3, [r3, #5]
   86028:	747b      	strb	r3, [r7, #17]
								cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   8602a:	4b20      	ldr	r3, [pc, #128]	; (860ac <Cl_Dlsis_controller+0xc7c>)
   8602c:	799b      	ldrb	r3, [r3, #6]
   8602e:	74bb      	strb	r3, [r7, #18]
								cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   86030:	4b1e      	ldr	r3, [pc, #120]	; (860ac <Cl_Dlsis_controller+0xc7c>)
   86032:	79db      	ldrb	r3, [r3, #7]
   86034:	74fb      	strb	r3, [r7, #19]
								Treatdata[ID_heprate] = cl_temp.Twobyte;
   86036:	8a3b      	ldrh	r3, [r7, #16]
   86038:	461a      	mov	r2, r3
   8603a:	4b25      	ldr	r3, [pc, #148]	; (860d0 <Cl_Dlsis_controller+0xca0>)
   8603c:	61da      	str	r2, [r3, #28]
								hep_calibration(Treatdata[ID_heprate]);
   8603e:	4b24      	ldr	r3, [pc, #144]	; (860d0 <Cl_Dlsis_controller+0xca0>)
   86040:	69db      	ldr	r3, [r3, #28]
   86042:	4618      	mov	r0, r3
   86044:	4b23      	ldr	r3, [pc, #140]	; (860d4 <Cl_Dlsis_controller+0xca4>)
   86046:	4798      	blx	r3
								cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   86048:	4b23      	ldr	r3, [pc, #140]	; (860d8 <Cl_Dlsis_controller+0xca8>)
   8604a:	681b      	ldr	r3, [r3, #0]
   8604c:	4619      	mov	r1, r3
   8604e:	2006      	movs	r0, #6
   86050:	4b22      	ldr	r3, [pc, #136]	; (860dc <Cl_Dlsis_controller+0xcac>)
   86052:	4798      	blx	r3
							}
						break;
   86054:	e112      	b.n	8627c <Cl_Dlsis_controller+0xe4c>
						case EVENT_DLSIS_HEP_ON:
							cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,hep_speed);
   86056:	4b20      	ldr	r3, [pc, #128]	; (860d8 <Cl_Dlsis_controller+0xca8>)
   86058:	681b      	ldr	r3, [r3, #0]
   8605a:	4619      	mov	r1, r3
   8605c:	200a      	movs	r0, #10
   8605e:	4b1f      	ldr	r3, [pc, #124]	; (860dc <Cl_Dlsis_controller+0xcac>)
   86060:	4798      	blx	r3
						break;
   86062:	e110      	b.n	86286 <Cl_Dlsis_controller+0xe56>
						case EVENT_DLSIS_HEP_OFF:
							cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   86064:	2100      	movs	r1, #0
   86066:	2009      	movs	r0, #9
   86068:	4b1c      	ldr	r3, [pc, #112]	; (860dc <Cl_Dlsis_controller+0xcac>)
   8606a:	4798      	blx	r3
						break;
   8606c:	e10b      	b.n	86286 <Cl_Dlsis_controller+0xe56>
						case EVENT_DLSIS_COMMAND_SET_BLDPMP_ON:
						cl_bp_controller(CL_BP_EVENT_START,0);
   8606e:	2100      	movs	r1, #0
   86070:	2002      	movs	r0, #2
   86072:	4b15      	ldr	r3, [pc, #84]	; (860c8 <Cl_Dlsis_controller+0xc98>)
   86074:	4798      	blx	r3
						break;
   86076:	e106      	b.n	86286 <Cl_Dlsis_controller+0xe56>
						case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   86078:	2100      	movs	r1, #0
   8607a:	2004      	movs	r0, #4
   8607c:	4b12      	ldr	r3, [pc, #72]	; (860c8 <Cl_Dlsis_controller+0xc98>)
   8607e:	4798      	blx	r3
						break;
   86080:	e101      	b.n	86286 <Cl_Dlsis_controller+0xe56>
   86082:	bf00      	nop
   86084:	00086d61 	.word	0x00086d61
   86088:	200720d0 	.word	0x200720d0
   8608c:	00086a8d 	.word	0x00086a8d
   86090:	00086be5 	.word	0x00086be5
   86094:	00086db5 	.word	0x00086db5
   86098:	00083035 	.word	0x00083035
   8609c:	0008786d 	.word	0x0008786d
   860a0:	000869b5 	.word	0x000869b5
   860a4:	000877f1 	.word	0x000877f1
   860a8:	0008a611 	.word	0x0008a611
   860ac:	20072f98 	.word	0x20072f98
   860b0:	00098239 	.word	0x00098239
   860b4:	00099729 	.word	0x00099729
   860b8:	00086f69 	.word	0x00086f69
   860bc:	00097c55 	.word	0x00097c55
   860c0:	00097c69 	.word	0x00097c69
   860c4:	00097c91 	.word	0x00097c91
   860c8:	00091eb5 	.word	0x00091eb5
   860cc:	00097af9 	.word	0x00097af9
   860d0:	200731a4 	.word	0x200731a4
   860d4:	00083f89 	.word	0x00083f89
   860d8:	20072d78 	.word	0x20072d78
   860dc:	000925a9 	.word	0x000925a9
						case EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   860e0:	4b6d      	ldr	r3, [pc, #436]	; (86298 <Cl_Dlsis_controller+0xe68>)
   860e2:	7e1b      	ldrb	r3, [r3, #24]
   860e4:	2b00      	cmp	r3, #0
   860e6:	f000 80cb 	beq.w	86280 <Cl_Dlsis_controller+0xe50>
						{
			
							cl_Datastreamtype cl_temp  ;
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   860ea:	4b6b      	ldr	r3, [pc, #428]	; (86298 <Cl_Dlsis_controller+0xe68>)
   860ec:	791b      	ldrb	r3, [r3, #4]
   860ee:	733b      	strb	r3, [r7, #12]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   860f0:	4b69      	ldr	r3, [pc, #420]	; (86298 <Cl_Dlsis_controller+0xe68>)
   860f2:	795b      	ldrb	r3, [r3, #5]
   860f4:	737b      	strb	r3, [r7, #13]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   860f6:	4b68      	ldr	r3, [pc, #416]	; (86298 <Cl_Dlsis_controller+0xe68>)
   860f8:	799b      	ldrb	r3, [r3, #6]
   860fa:	73bb      	strb	r3, [r7, #14]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   860fc:	4b66      	ldr	r3, [pc, #408]	; (86298 <Cl_Dlsis_controller+0xe68>)
   860fe:	79db      	ldrb	r3, [r3, #7]
   86100:	73fb      	strb	r3, [r7, #15]
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   86102:	89bb      	ldrh	r3, [r7, #12]
   86104:	4619      	mov	r1, r3
   86106:	2001      	movs	r0, #1
   86108:	4b64      	ldr	r3, [pc, #400]	; (8629c <Cl_Dlsis_controller+0xe6c>)
   8610a:	4798      	blx	r3
							Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   8610c:	89bb      	ldrh	r3, [r7, #12]
   8610e:	461a      	mov	r2, r3
   86110:	4b63      	ldr	r3, [pc, #396]	; (862a0 <Cl_Dlsis_controller+0xe70>)
   86112:	65da      	str	r2, [r3, #92]	; 0x5c
						}
						break;
   86114:	e0b4      	b.n	86280 <Cl_Dlsis_controller+0xe50>
							case EVENT_DLSIS_SET_DATA:
									if(Cl_ConsoleRxMsg.msgready == true)
   86116:	4b60      	ldr	r3, [pc, #384]	; (86298 <Cl_Dlsis_controller+0xe68>)
   86118:	7e1b      	ldrb	r3, [r3, #24]
   8611a:	2b00      	cmp	r3, #0
   8611c:	f000 80b2 	beq.w	86284 <Cl_Dlsis_controller+0xe54>
									{
										cl_Datastreamtype cl_temp  ;
										cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   86120:	4b5d      	ldr	r3, [pc, #372]	; (86298 <Cl_Dlsis_controller+0xe68>)
   86122:	795b      	ldrb	r3, [r3, #5]
   86124:	723b      	strb	r3, [r7, #8]
										cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   86126:	4b5c      	ldr	r3, [pc, #368]	; (86298 <Cl_Dlsis_controller+0xe68>)
   86128:	799b      	ldrb	r3, [r3, #6]
   8612a:	727b      	strb	r3, [r7, #9]
										cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   8612c:	4b5a      	ldr	r3, [pc, #360]	; (86298 <Cl_Dlsis_controller+0xe68>)
   8612e:	79db      	ldrb	r3, [r3, #7]
   86130:	72bb      	strb	r3, [r7, #10]
										cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   86132:	4b59      	ldr	r3, [pc, #356]	; (86298 <Cl_Dlsis_controller+0xe68>)
   86134:	7a1b      	ldrb	r3, [r3, #8]
   86136:	72fb      	strb	r3, [r7, #11]
				
										switch(Cl_ConsoleRxMsg.data.byte[0])
   86138:	4b57      	ldr	r3, [pc, #348]	; (86298 <Cl_Dlsis_controller+0xe68>)
   8613a:	791b      	ldrb	r3, [r3, #4]
   8613c:	3b05      	subs	r3, #5
   8613e:	2b20      	cmp	r3, #32
   86140:	f200 8098 	bhi.w	86274 <Cl_Dlsis_controller+0xe44>
   86144:	a201      	add	r2, pc, #4	; (adr r2, 8614c <Cl_Dlsis_controller+0xd1c>)
   86146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8614a:	bf00      	nop
   8614c:	00086275 	.word	0x00086275
   86150:	00086275 	.word	0x00086275
   86154:	00086275 	.word	0x00086275
   86158:	00086275 	.word	0x00086275
   8615c:	00086275 	.word	0x00086275
   86160:	00086275 	.word	0x00086275
   86164:	00086275 	.word	0x00086275
   86168:	00086275 	.word	0x00086275
   8616c:	00086275 	.word	0x00086275
   86170:	00086275 	.word	0x00086275
   86174:	00086275 	.word	0x00086275
   86178:	00086275 	.word	0x00086275
   8617c:	00086275 	.word	0x00086275
   86180:	00086275 	.word	0x00086275
   86184:	00086275 	.word	0x00086275
   86188:	00086275 	.word	0x00086275
   8618c:	00086275 	.word	0x00086275
   86190:	00086275 	.word	0x00086275
   86194:	00086275 	.word	0x00086275
   86198:	000861d1 	.word	0x000861d1
   8619c:	000861e9 	.word	0x000861e9
   861a0:	00086201 	.word	0x00086201
   861a4:	00086211 	.word	0x00086211
   861a8:	00086221 	.word	0x00086221
   861ac:	00086231 	.word	0x00086231
   861b0:	00086275 	.word	0x00086275
   861b4:	00086275 	.word	0x00086275
   861b8:	00086275 	.word	0x00086275
   861bc:	00086275 	.word	0x00086275
   861c0:	00086241 	.word	0x00086241
   861c4:	0008624b 	.word	0x0008624b
   861c8:	00086255 	.word	0x00086255
   861cc:	00086265 	.word	0x00086265
											case ID_bloodratereturn:
											break;
											case ID_bloodratetreat:
											break;
											case ID_tempulimit:
											Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   861d0:	68bb      	ldr	r3, [r7, #8]
   861d2:	4a34      	ldr	r2, [pc, #208]	; (862a4 <Cl_Dlsis_controller+0xe74>)
   861d4:	fba2 2303 	umull	r2, r3, r2, r3
   861d8:	08da      	lsrs	r2, r3, #3
   861da:	4b33      	ldr	r3, [pc, #204]	; (862a8 <Cl_Dlsis_controller+0xe78>)
   861dc:	4610      	mov	r0, r2
   861de:	4798      	blx	r3
   861e0:	4602      	mov	r2, r0
   861e2:	4b32      	ldr	r3, [pc, #200]	; (862ac <Cl_Dlsis_controller+0xe7c>)
   861e4:	649a      	str	r2, [r3, #72]	; 0x48
											break;
   861e6:	e046      	b.n	86276 <Cl_Dlsis_controller+0xe46>
											case ID_templlimit:
											Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   861e8:	68bb      	ldr	r3, [r7, #8]
   861ea:	4a2e      	ldr	r2, [pc, #184]	; (862a4 <Cl_Dlsis_controller+0xe74>)
   861ec:	fba2 2303 	umull	r2, r3, r2, r3
   861f0:	08da      	lsrs	r2, r3, #3
   861f2:	4b2d      	ldr	r3, [pc, #180]	; (862a8 <Cl_Dlsis_controller+0xe78>)
   861f4:	4610      	mov	r0, r2
   861f6:	4798      	blx	r3
   861f8:	4602      	mov	r2, r0
   861fa:	4b2c      	ldr	r3, [pc, #176]	; (862ac <Cl_Dlsis_controller+0xe7c>)
   861fc:	64da      	str	r2, [r3, #76]	; 0x4c
											break;
   861fe:	e03a      	b.n	86276 <Cl_Dlsis_controller+0xe46>
											case ID_tmpllimit:
											Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   86200:	68ba      	ldr	r2, [r7, #8]
   86202:	4b29      	ldr	r3, [pc, #164]	; (862a8 <Cl_Dlsis_controller+0xe78>)
   86204:	4610      	mov	r0, r2
   86206:	4798      	blx	r3
   86208:	4602      	mov	r2, r0
   8620a:	4b28      	ldr	r3, [pc, #160]	; (862ac <Cl_Dlsis_controller+0xe7c>)
   8620c:	635a      	str	r2, [r3, #52]	; 0x34
											break;
   8620e:	e032      	b.n	86276 <Cl_Dlsis_controller+0xe46>
											case ID_tmpulimit:
											Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   86210:	68ba      	ldr	r2, [r7, #8]
   86212:	4b25      	ldr	r3, [pc, #148]	; (862a8 <Cl_Dlsis_controller+0xe78>)
   86214:	4610      	mov	r0, r2
   86216:	4798      	blx	r3
   86218:	4602      	mov	r2, r0
   8621a:	4b24      	ldr	r3, [pc, #144]	; (862ac <Cl_Dlsis_controller+0xe7c>)
   8621c:	631a      	str	r2, [r3, #48]	; 0x30
											break;
   8621e:	e02a      	b.n	86276 <Cl_Dlsis_controller+0xe46>
											case ID_vptllimit:
											Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   86220:	68ba      	ldr	r2, [r7, #8]
   86222:	4b21      	ldr	r3, [pc, #132]	; (862a8 <Cl_Dlsis_controller+0xe78>)
   86224:	4610      	mov	r0, r2
   86226:	4798      	blx	r3
   86228:	4602      	mov	r2, r0
   8622a:	4b20      	ldr	r3, [pc, #128]	; (862ac <Cl_Dlsis_controller+0xe7c>)
   8622c:	615a      	str	r2, [r3, #20]
											break;
   8622e:	e022      	b.n	86276 <Cl_Dlsis_controller+0xe46>
											case ID_vptulimit:
											Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   86230:	68ba      	ldr	r2, [r7, #8]
   86232:	4b1d      	ldr	r3, [pc, #116]	; (862a8 <Cl_Dlsis_controller+0xe78>)
   86234:	4610      	mov	r0, r2
   86236:	4798      	blx	r3
   86238:	4602      	mov	r2, r0
   8623a:	4b1c      	ldr	r3, [pc, #112]	; (862ac <Cl_Dlsis_controller+0xe7c>)
   8623c:	611a      	str	r2, [r3, #16]
											break;
   8623e:	e01a      	b.n	86276 <Cl_Dlsis_controller+0xe46>
											case ID_dflowllimit:
											break;
											case ID_dflowulimit:
											break;
											case ID_condllimit:
											Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   86240:	68bb      	ldr	r3, [r7, #8]
   86242:	b21a      	sxth	r2, r3
   86244:	4b19      	ldr	r3, [pc, #100]	; (862ac <Cl_Dlsis_controller+0xe7c>)
   86246:	801a      	strh	r2, [r3, #0]
											break;
   86248:	e015      	b.n	86276 <Cl_Dlsis_controller+0xe46>
											case ID_condulimit:
											Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   8624a:	68bb      	ldr	r3, [r7, #8]
   8624c:	b21a      	sxth	r2, r3
   8624e:	4b17      	ldr	r3, [pc, #92]	; (862ac <Cl_Dlsis_controller+0xe7c>)
   86250:	805a      	strh	r2, [r3, #2]
											break;
   86252:	e010      	b.n	86276 <Cl_Dlsis_controller+0xe46>
											case ID_aptllimit:
											Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   86254:	68ba      	ldr	r2, [r7, #8]
   86256:	4b14      	ldr	r3, [pc, #80]	; (862a8 <Cl_Dlsis_controller+0xe78>)
   86258:	4610      	mov	r0, r2
   8625a:	4798      	blx	r3
   8625c:	4602      	mov	r2, r0
   8625e:	4b13      	ldr	r3, [pc, #76]	; (862ac <Cl_Dlsis_controller+0xe7c>)
   86260:	60da      	str	r2, [r3, #12]
											break;
   86262:	e008      	b.n	86276 <Cl_Dlsis_controller+0xe46>
											case ID_aptulimit:
											Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   86264:	68ba      	ldr	r2, [r7, #8]
   86266:	4b10      	ldr	r3, [pc, #64]	; (862a8 <Cl_Dlsis_controller+0xe78>)
   86268:	4610      	mov	r0, r2
   8626a:	4798      	blx	r3
   8626c:	4602      	mov	r2, r0
   8626e:	4b0f      	ldr	r3, [pc, #60]	; (862ac <Cl_Dlsis_controller+0xe7c>)
   86270:	609a      	str	r2, [r3, #8]
											
											break;
   86272:	e000      	b.n	86276 <Cl_Dlsis_controller+0xe46>

											default:break;
   86274:	bf00      	nop
											}
										
										}
			
						break;
   86276:	e005      	b.n	86284 <Cl_Dlsis_controller+0xe54>
						default:
						break;
   86278:	bf00      	nop
   8627a:	e008      	b.n	8628e <Cl_Dlsis_controller+0xe5e>
								cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
								Treatdata[ID_heprate] = cl_temp.Twobyte;
								hep_calibration(Treatdata[ID_heprate]);
								cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
							}
						break;
   8627c:	bf00      	nop
   8627e:	e006      	b.n	8628e <Cl_Dlsis_controller+0xe5e>
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
							Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
						}
						break;
   86280:	bf00      	nop
   86282:	e004      	b.n	8628e <Cl_Dlsis_controller+0xe5e>
											default:break;
											}
										
										}
			
						break;
   86284:	bf00      	nop
						default:
						break;
					}
		break;
   86286:	e002      	b.n	8628e <Cl_Dlsis_controller+0xe5e>
		default:break;
   86288:	bf00      	nop
   8628a:	e000      	b.n	8628e <Cl_Dlsis_controller+0xe5e>
					//	}
			break;


		}
		break;
   8628c:	bf00      	nop
		default:break;
	}



return CL_OK;
   8628e:	2300      	movs	r3, #0
}
   86290:	4618      	mov	r0, r3
   86292:	3748      	adds	r7, #72	; 0x48
   86294:	46bd      	mov	sp, r7
   86296:	bd80      	pop	{r7, pc}
   86298:	20072f98 	.word	0x20072f98
   8629c:	00091eb5 	.word	0x00091eb5
   862a0:	200731a4 	.word	0x200731a4
   862a4:	cccccccd 	.word	0xcccccccd
   862a8:	000a3d65 	.word	0x000a3d65
   862ac:	20072d08 	.word	0x20072d08

000862b0 <cl_dlsis_translatemacevent>:
	}
return CL_OK;
}

Cl_ReturnCodeType  cl_dlsis_translatemacevent(Cl_Mac_EventsType Cl_MacRinseEvt,Cl_Dlsis_Eevents* cl_dlsis_event)
{
   862b0:	b480      	push	{r7}
   862b2:	b083      	sub	sp, #12
   862b4:	af00      	add	r7, sp, #0
   862b6:	4603      	mov	r3, r0
   862b8:	6039      	str	r1, [r7, #0]
   862ba:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacRinseEvt)
   862bc:	79fb      	ldrb	r3, [r7, #7]
   862be:	3b07      	subs	r3, #7
   862c0:	2b36      	cmp	r3, #54	; 0x36
   862c2:	f200 80dd 	bhi.w	86480 <cl_dlsis_translatemacevent+0x1d0>
   862c6:	a201      	add	r2, pc, #4	; (adr r2, 862cc <cl_dlsis_translatemacevent+0x1c>)
   862c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   862cc:	000863d9 	.word	0x000863d9
   862d0:	00086481 	.word	0x00086481
   862d4:	00086481 	.word	0x00086481
   862d8:	000863b9 	.word	0x000863b9
   862dc:	000863c1 	.word	0x000863c1
   862e0:	000863b1 	.word	0x000863b1
   862e4:	000863d1 	.word	0x000863d1
   862e8:	000863c9 	.word	0x000863c9
   862ec:	00086481 	.word	0x00086481
   862f0:	00086481 	.word	0x00086481
   862f4:	00086481 	.word	0x00086481
   862f8:	00086481 	.word	0x00086481
   862fc:	00086481 	.word	0x00086481
   86300:	00086481 	.word	0x00086481
   86304:	00086469 	.word	0x00086469
   86308:	00086481 	.word	0x00086481
   8630c:	000863e1 	.word	0x000863e1
   86310:	000863e9 	.word	0x000863e9
   86314:	000863f1 	.word	0x000863f1
   86318:	000863f9 	.word	0x000863f9
   8631c:	00086401 	.word	0x00086401
   86320:	00086481 	.word	0x00086481
   86324:	00086481 	.word	0x00086481
   86328:	00086481 	.word	0x00086481
   8632c:	00086481 	.word	0x00086481
   86330:	00086481 	.word	0x00086481
   86334:	00086441 	.word	0x00086441
   86338:	00086449 	.word	0x00086449
   8633c:	00086451 	.word	0x00086451
   86340:	00086459 	.word	0x00086459
   86344:	00086461 	.word	0x00086461
   86348:	00086481 	.word	0x00086481
   8634c:	00086471 	.word	0x00086471
   86350:	00086479 	.word	0x00086479
   86354:	000863a9 	.word	0x000863a9
   86358:	00086481 	.word	0x00086481
   8635c:	00086481 	.word	0x00086481
   86360:	00086481 	.word	0x00086481
   86364:	00086439 	.word	0x00086439
   86368:	00086431 	.word	0x00086431
   8636c:	00086481 	.word	0x00086481
   86370:	00086481 	.word	0x00086481
   86374:	00086481 	.word	0x00086481
   86378:	00086481 	.word	0x00086481
   8637c:	00086481 	.word	0x00086481
   86380:	00086481 	.word	0x00086481
   86384:	00086481 	.word	0x00086481
   86388:	00086481 	.word	0x00086481
   8638c:	00086481 	.word	0x00086481
   86390:	00086409 	.word	0x00086409
   86394:	00086481 	.word	0x00086481
   86398:	00086411 	.word	0x00086411
   8639c:	00086419 	.word	0x00086419
   863a0:	00086421 	.word	0x00086421
   863a4:	00086429 	.word	0x00086429
	{
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_dlsis_event = EVENT_DLSIS_CLR_ALARM;	
   863a8:	683b      	ldr	r3, [r7, #0]
   863aa:	2201      	movs	r2, #1
   863ac:	701a      	strb	r2, [r3, #0]
		break;
   863ae:	e068      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE;
   863b0:	683b      	ldr	r3, [r7, #0]
   863b2:	221d      	movs	r2, #29
   863b4:	701a      	strb	r2, [r3, #0]
		break;
   863b6:	e064      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPMP_ON;
   863b8:	683b      	ldr	r3, [r7, #0]
   863ba:	221e      	movs	r2, #30
   863bc:	701a      	strb	r2, [r3, #0]
		break;
   863be:	e060      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF;
   863c0:	683b      	ldr	r3, [r7, #0]
   863c2:	221f      	movs	r2, #31
   863c4:	701a      	strb	r2, [r3, #0]
		break;
   863c6:	e05c      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
	
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_dlsis_event = EVENT_DLSIS_GET_DATA;
   863c8:	683b      	ldr	r3, [r7, #0]
   863ca:	2202      	movs	r2, #2
   863cc:	701a      	strb	r2, [r3, #0]
		break;
   863ce:	e058      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_dlsis_event = EVENT_DLSIS_SET_DATA;
   863d0:	683b      	ldr	r3, [r7, #0]
   863d2:	2203      	movs	r2, #3
   863d4:	701a      	strb	r2, [r3, #0]
		break;
   863d6:	e054      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_dlsis_event= EVENT_DLSIS_START_RINSE;
   863d8:	683b      	ldr	r3, [r7, #0]
   863da:	2204      	movs	r2, #4
   863dc:	701a      	strb	r2, [r3, #0]
		break;
   863de:	e050      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case  EVT_CONSOLE_COMMAND_DIALYSIS_START:
		*cl_dlsis_event= EVENT_DLSIS_START_DIALYSIS;
   863e0:	683b      	ldr	r3, [r7, #0]
   863e2:	2205      	movs	r2, #5
   863e4:	701a      	strb	r2, [r3, #0]
		break;
   863e6:	e04c      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
		*cl_dlsis_event= EVENT_DLSIS_STOP_DIALYSIS;
   863e8:	683b      	ldr	r3, [r7, #0]
   863ea:	2206      	movs	r2, #6
   863ec:	701a      	strb	r2, [r3, #0]
		break;
   863ee:	e048      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE:
		*cl_dlsis_event= EVENT_DLSIS_PAUSE_DIALYSIS;
   863f0:	683b      	ldr	r3, [r7, #0]
   863f2:	2207      	movs	r2, #7
   863f4:	701a      	strb	r2, [r3, #0]
		break;
   863f6:	e044      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_BYPASS_ON:
		*cl_dlsis_event= EVENT_DLSIS_BYPASS_ON;
   863f8:	683b      	ldr	r3, [r7, #0]
   863fa:	2208      	movs	r2, #8
   863fc:	701a      	strb	r2, [r3, #0]
		break;
   863fe:	e040      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_BYPASS_OFF:
		*cl_dlsis_event= EVENT_DLSIS_BYPASS_OFF;
   86400:	683b      	ldr	r3, [r7, #0]
   86402:	2209      	movs	r2, #9
   86404:	701a      	strb	r2, [r3, #0]
		break;
   86406:	e03c      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case  EVT_TIMER_EXPIRED:
		
		break;
		case EVT_TICK_50M:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_50MS;
   86408:	683b      	ldr	r3, [r7, #0]
   8640a:	2211      	movs	r2, #17
   8640c:	701a      	strb	r2, [r3, #0]
		break;
   8640e:	e038      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_TICK_500M:
		*cl_dlsis_event = EVENT_DLSIS_TICK_500MS;
   86410:	683b      	ldr	r3, [r7, #0]
   86412:	2212      	movs	r2, #18
   86414:	701a      	strb	r2, [r3, #0]
		break;
   86416:	e034      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_TICK_SEC:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_SECOND;
   86418:	683b      	ldr	r3, [r7, #0]
   8641a:	2213      	movs	r2, #19
   8641c:	701a      	strb	r2, [r3, #0]
		break;
   8641e:	e030      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_TICK_MIN:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_MINUTE;
   86420:	683b      	ldr	r3, [r7, #0]
   86422:	2214      	movs	r2, #20
   86424:	701a      	strb	r2, [r3, #0]
		break;
   86426:	e02c      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_TICK_HOUR:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_HOUR;
   86428:	683b      	ldr	r3, [r7, #0]
   8642a:	2215      	movs	r2, #21
   8642c:	701a      	strb	r2, [r3, #0]
		break;
   8642e:	e028      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_ALARM_TRIGGERED:
		*cl_dlsis_event =   EVENT_DLSIS_ALARM;		
   86430:	683b      	ldr	r3, [r7, #0]
   86432:	2216      	movs	r2, #22
   86434:	701a      	strb	r2, [r3, #0]
		break;
   86436:	e024      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_ALERT_TRIGGERED:
		*cl_dlsis_event =   EVENT_DLSIS_ALERT;
   86438:	683b      	ldr	r3, [r7, #0]
   8643a:	2217      	movs	r2, #23
   8643c:	701a      	strb	r2, [r3, #0]
		break;
   8643e:	e020      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_PATIENT_READY:
		
			*cl_dlsis_event =   EVENT_DLSIS__START_RETURN;
   86440:	683b      	ldr	r3, [r7, #0]
   86442:	2219      	movs	r2, #25
   86444:	701a      	strb	r2, [r3, #0]

		break;
   86446:	e01c      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_START_RETURN:
			*cl_dlsis_event =   EVENT_DLSIS__STOP_RETURN;
   86448:	683b      	ldr	r3, [r7, #0]
   8644a:	221a      	movs	r2, #26
   8644c:	701a      	strb	r2, [r3, #0]
		break;
   8644e:	e018      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_STOP_RETURN:
			*cl_dlsis_event =   EVENT_DLSIS__STOP_RETURN;
   86450:	683b      	ldr	r3, [r7, #0]
   86452:	221a      	movs	r2, #26
   86454:	701a      	strb	r2, [r3, #0]
		break;
   86456:	e014      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_MINUF_ON:
			*cl_dlsis_event =   EVENT_DLSIS__MINUF_ON;
   86458:	683b      	ldr	r3, [r7, #0]
   8645a:	221b      	movs	r2, #27
   8645c:	701a      	strb	r2, [r3, #0]
		break;
   8645e:	e010      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_MINUF_OFF:
			*cl_dlsis_event =   EVENT_DLSIS__MINUF_OFF;
   86460:	683b      	ldr	r3, [r7, #0]
   86462:	221c      	movs	r2, #28
   86464:	701a      	strb	r2, [r3, #0]
		break;
   86466:	e00c      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_HEP_PMP_RATE:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_RATE;
   86468:	683b      	ldr	r3, [r7, #0]
   8646a:	2220      	movs	r2, #32
   8646c:	701a      	strb	r2, [r3, #0]
		break;
   8646e:	e008      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_ON;
   86470:	683b      	ldr	r3, [r7, #0]
   86472:	2221      	movs	r2, #33	; 0x21
   86474:	701a      	strb	r2, [r3, #0]
		break;
   86476:	e004      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_OFF;
   86478:	683b      	ldr	r3, [r7, #0]
   8647a:	2222      	movs	r2, #34	; 0x22
   8647c:	701a      	strb	r2, [r3, #0]
		break;
   8647e:	e000      	b.n	86482 <cl_dlsis_translatemacevent+0x1d2>
		default:
		break;
   86480:	bf00      	nop
	}
	return CL_OK;
   86482:	2300      	movs	r3, #0
}
   86484:	4618      	mov	r0, r3
   86486:	370c      	adds	r7, #12
   86488:	46bd      	mov	sp, r7
   8648a:	bc80      	pop	{r7}
   8648c:	4770      	bx	lr
   8648e:	bf00      	nop

00086490 <Cl_Dlsis_UpdateTimeInfo>:



Cl_ReturnCodeType Cl_Dlsis_UpdateTimeInfo(void)
{
   86490:	b580      	push	{r7, lr}
   86492:	b084      	sub	sp, #16
   86494:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_dlsisretcode = CL_ERROR;
   86496:	2304      	movs	r3, #4
   86498:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   8649a:	234d      	movs	r3, #77	; 0x4d
   8649c:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0 ,0,0};
   8649e:	1d3b      	adds	r3, r7, #4
   864a0:	2200      	movs	r2, #0
   864a2:	601a      	str	r2, [r3, #0]
   864a4:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   864a8:	230a      	movs	r3, #10
   864aa:	73bb      	strb	r3, [r7, #14]
	data[0] = (Cl_Uint8Type) DIALYSIS_DATA;
   864ac:	2305      	movs	r3, #5
   864ae:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)DlsisTime.Cl_dlsisTotalMinutescounter;
   864b0:	4b13      	ldr	r3, [pc, #76]	; (86500 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   864b2:	78db      	ldrb	r3, [r3, #3]
   864b4:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)DlsisTime.Cl_dlsisTotalhourscounter;
   864b6:	4b12      	ldr	r3, [pc, #72]	; (86500 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   864b8:	791b      	ldrb	r3, [r3, #4]
   864ba:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)DlsisTime.Cl_dlsissecondscounter;
   864bc:	4b10      	ldr	r3, [pc, #64]	; (86500 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   864be:	781b      	ldrb	r3, [r3, #0]
   864c0:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_DLSIS_TIMEOUT_MIN - DlsisTime.Cl_dlsisTotalMinutescounter );
   864c2:	4b0f      	ldr	r3, [pc, #60]	; (86500 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   864c4:	78da      	ldrb	r2, [r3, #3]
   864c6:	f06f 030f 	mvn.w	r3, #15
   864ca:	1a9b      	subs	r3, r3, r2
   864cc:	b2db      	uxtb	r3, r3
   864ce:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) (CL_DLSIS_TIMEOUT_HRS - DlsisTime.Cl_dlsisTotalhourscounter );
   864d0:	4b0b      	ldr	r3, [pc, #44]	; (86500 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   864d2:	791b      	ldrb	r3, [r3, #4]
   864d4:	425b      	negs	r3, r3
   864d6:	b2db      	uxtb	r3, r3
   864d8:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) (60 - DlsisTime.Cl_dlsissecondscounter );
   864da:	4b09      	ldr	r3, [pc, #36]	; (86500 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   864dc:	781b      	ldrb	r3, [r3, #0]
   864de:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   864e2:	b2db      	uxtb	r3, r3
   864e4:	72bb      	strb	r3, [r7, #10]
	
	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,7);
   864e6:	1d39      	adds	r1, r7, #4
   864e8:	7bbb      	ldrb	r3, [r7, #14]
   864ea:	2207      	movs	r2, #7
   864ec:	4618      	mov	r0, r3
   864ee:	4b05      	ldr	r3, [pc, #20]	; (86504 <Cl_Dlsis_UpdateTimeInfo+0x74>)
   864f0:	4798      	blx	r3
   864f2:	4603      	mov	r3, r0
   864f4:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   864f6:	2300      	movs	r3, #0
	}
   864f8:	4618      	mov	r0, r3
   864fa:	3710      	adds	r7, #16
   864fc:	46bd      	mov	sp, r7
   864fe:	bd80      	pop	{r7, pc}
   86500:	20072d84 	.word	0x20072d84
   86504:	00099729 	.word	0x00099729

00086508 <cl_Dlsis_CheckforDialysisCompletion>:
	
	 Cl_ReturnCodeType cl_Dlsis_CheckforDialysisCompletion(void)
	 {
   86508:	b480      	push	{r7}
   8650a:	b083      	sub	sp, #12
   8650c:	af00      	add	r7, sp, #0
		 Cl_ReturnCodeType Cl_dlsisretcode = CL_ERROR;
   8650e:	2304      	movs	r3, #4
   86510:	71fb      	strb	r3, [r7, #7]
		 
		 if(DlsisTime.Cl_dlsisTotalMinutescounter > Treatdata[ID_treattime] )
   86512:	4b07      	ldr	r3, [pc, #28]	; (86530 <cl_Dlsis_CheckforDialysisCompletion+0x28>)
   86514:	78db      	ldrb	r3, [r3, #3]
   86516:	461a      	mov	r2, r3
   86518:	4b06      	ldr	r3, [pc, #24]	; (86534 <cl_Dlsis_CheckforDialysisCompletion+0x2c>)
   8651a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   8651c:	429a      	cmp	r2, r3
   8651e:	d901      	bls.n	86524 <cl_Dlsis_CheckforDialysisCompletion+0x1c>
		 {
			 
			 Cl_dlsisretcode = CL_OK;
   86520:	2300      	movs	r3, #0
   86522:	71fb      	strb	r3, [r7, #7]
		 }
		 
		 return (Cl_dlsisretcode);
   86524:	79fb      	ldrb	r3, [r7, #7]
		 
	 }
   86526:	4618      	mov	r0, r3
   86528:	370c      	adds	r7, #12
   8652a:	46bd      	mov	sp, r7
   8652c:	bc80      	pop	{r7}
   8652e:	4770      	bx	lr
   86530:	20072d84 	.word	0x20072d84
   86534:	200731a4 	.word	0x200731a4

00086538 <cl_Dlsis_notifydacandgotorinsestandby>:
	
	Cl_ReturnCodeType cl_Dlsis_notifydacandgotorinsestandby(void)
	{
   86538:	b580      	push	{r7, lr}
   8653a:	b082      	sub	sp, #8
   8653c:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   8653e:	2300      	movs	r3, #0
   86540:	71fb      	strb	r3, [r7, #7]
		
		Cl_Uint8Type data =0;
   86542:	2300      	movs	r3, #0
   86544:	71bb      	strb	r3, [r7, #6]
		//inform DAC about rinse completed state.
		DlsisTime.Cl_dlsissecondscounter = 0;
   86546:	4b10      	ldr	r3, [pc, #64]	; (86588 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   86548:	2200      	movs	r2, #0
   8654a:	701a      	strb	r2, [r3, #0]
		DlsisTime.Cl_dlsisMinutescounter= 0;
   8654c:	4b0e      	ldr	r3, [pc, #56]	; (86588 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   8654e:	2200      	movs	r2, #0
   86550:	705a      	strb	r2, [r3, #1]
		DlsisTime.Cl_dlsishourscounter= 0;
   86552:	4b0d      	ldr	r3, [pc, #52]	; (86588 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   86554:	2200      	movs	r2, #0
   86556:	709a      	strb	r2, [r3, #2]
		DlsisTime.Cl_dlsisTotalMinutescounter= 0;
   86558:	4b0b      	ldr	r3, [pc, #44]	; (86588 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   8655a:	2200      	movs	r2, #0
   8655c:	70da      	strb	r2, [r3, #3]
		DlsisTime.Cl_dlsisTotalhourscounter=0;
   8655e:	4b0a      	ldr	r3, [pc, #40]	; (86588 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   86560:	2200      	movs	r2, #0
   86562:	711a      	strb	r2, [r3, #4]
		
		
		Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYS_COMPLTED,&data,0);
   86564:	1dbb      	adds	r3, r7, #6
   86566:	2200      	movs	r2, #0
   86568:	4619      	mov	r1, r3
   8656a:	2015      	movs	r0, #21
   8656c:	4b07      	ldr	r3, [pc, #28]	; (8658c <cl_Dlsis_notifydacandgotorinsestandby+0x54>)
   8656e:	4798      	blx	r3
   86570:	4603      	mov	r3, r0
   86572:	71fb      	strb	r3, [r7, #7]
		Cl_dlsisretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSIS_COMPLETED);
   86574:	2050      	movs	r0, #80	; 0x50
   86576:	4b06      	ldr	r3, [pc, #24]	; (86590 <cl_Dlsis_notifydacandgotorinsestandby+0x58>)
   86578:	4798      	blx	r3
   8657a:	4603      	mov	r3, r0
   8657c:	71fb      	strb	r3, [r7, #7]
		
		return Cl_dlsisretcode;
   8657e:	79fb      	ldrb	r3, [r7, #7]
	}
   86580:	4618      	mov	r0, r3
   86582:	3708      	adds	r7, #8
   86584:	46bd      	mov	sp, r7
   86586:	bd80      	pop	{r7, pc}
   86588:	20072d84 	.word	0x20072d84
   8658c:	00099729 	.word	0x00099729
   86590:	0008a611 	.word	0x0008a611

00086594 <Cl_Dlsis_UpdateAlarmTable>:
	
	
Cl_ReturnCodeType Cl_Dlsis_UpdateAlarmTable(ClDlsisAlarmIdType * ClRinseAlarmId )
{
   86594:	b580      	push	{r7, lr}
   86596:	b084      	sub	sp, #16
   86598:	af00      	add	r7, sp, #0
   8659a:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   8659c:	2300      	movs	r3, #0
   8659e:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
   865a0:	2300      	movs	r3, #0
   865a2:	73bb      	strb	r3, [r7, #14]
			Cl_Uint8Type data[2];
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   865a4:	234d      	movs	r3, #77	; 0x4d
   865a6:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   865a8:	2300      	movs	r3, #0
   865aa:	73bb      	strb	r3, [r7, #14]
   865ac:	e068      	b.n	86680 <Cl_Dlsis_UpdateAlarmTable+0xec>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId,&Cl_DlsisAlarmTable[tempcount].IsActive);
   865ae:	7bba      	ldrb	r2, [r7, #14]
   865b0:	4937      	ldr	r1, [pc, #220]	; (86690 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   865b2:	4613      	mov	r3, r2
   865b4:	00db      	lsls	r3, r3, #3
   865b6:	1a9b      	subs	r3, r3, r2
   865b8:	440b      	add	r3, r1
   865ba:	7818      	ldrb	r0, [r3, #0]
   865bc:	7bba      	ldrb	r2, [r7, #14]
   865be:	4613      	mov	r3, r2
   865c0:	00db      	lsls	r3, r3, #3
   865c2:	1a9b      	subs	r3, r3, r2
   865c4:	4a32      	ldr	r2, [pc, #200]	; (86690 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   865c6:	4413      	add	r3, r2
   865c8:	3302      	adds	r3, #2
   865ca:	4619      	mov	r1, r3
   865cc:	4b31      	ldr	r3, [pc, #196]	; (86694 <Cl_Dlsis_UpdateAlarmTable+0x100>)
   865ce:	4798      	blx	r3
		if (Cl_DlsisAlarmTable[tempcount].IsActive)
   865d0:	7bba      	ldrb	r2, [r7, #14]
   865d2:	492f      	ldr	r1, [pc, #188]	; (86690 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   865d4:	4613      	mov	r3, r2
   865d6:	00db      	lsls	r3, r3, #3
   865d8:	1a9b      	subs	r3, r3, r2
   865da:	440b      	add	r3, r1
   865dc:	3302      	adds	r3, #2
   865de:	781b      	ldrb	r3, [r3, #0]
   865e0:	2b00      	cmp	r3, #0
   865e2:	d022      	beq.n	8662a <Cl_Dlsis_UpdateAlarmTable+0x96>
		{
			if(!Cl_DlsisAlarmTable[tempcount].IsRaised)
   865e4:	7bba      	ldrb	r2, [r7, #14]
   865e6:	492a      	ldr	r1, [pc, #168]	; (86690 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   865e8:	4613      	mov	r3, r2
   865ea:	00db      	lsls	r3, r3, #3
   865ec:	1a9b      	subs	r3, r3, r2
   865ee:	440b      	add	r3, r1
   865f0:	3303      	adds	r3, #3
   865f2:	781b      	ldrb	r3, [r3, #0]
   865f4:	f083 0301 	eor.w	r3, r3, #1
   865f8:	b2db      	uxtb	r3, r3
   865fa:	2b00      	cmp	r3, #0
   865fc:	d03d      	beq.n	8667a <Cl_Dlsis_UpdateAlarmTable+0xe6>
				//	data[0] = (Cl_Uint8Type)Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId;
				//	data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
				//	data[1] = (Cl_Uint8Type) CRITICAL;
				//	command = CON_TX_COMMAND_ALARM;
				//	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
					Cl_DlsisAlarmTable[tempcount].IsRaised = true;
   865fe:	7bba      	ldrb	r2, [r7, #14]
   86600:	4923      	ldr	r1, [pc, #140]	; (86690 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86602:	4613      	mov	r3, r2
   86604:	00db      	lsls	r3, r3, #3
   86606:	1a9b      	subs	r3, r3, r2
   86608:	440b      	add	r3, r1
   8660a:	3303      	adds	r3, #3
   8660c:	2201      	movs	r2, #1
   8660e:	701a      	strb	r2, [r3, #0]
					Cl_dlsisretcode = CL_DlsisAlarmActon(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId);
   86610:	7bba      	ldrb	r2, [r7, #14]
   86612:	491f      	ldr	r1, [pc, #124]	; (86690 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86614:	4613      	mov	r3, r2
   86616:	00db      	lsls	r3, r3, #3
   86618:	1a9b      	subs	r3, r3, r2
   8661a:	440b      	add	r3, r1
   8661c:	781b      	ldrb	r3, [r3, #0]
   8661e:	4618      	mov	r0, r3
   86620:	4b1d      	ldr	r3, [pc, #116]	; (86698 <Cl_Dlsis_UpdateAlarmTable+0x104>)
   86622:	4798      	blx	r3
   86624:	4603      	mov	r3, r0
   86626:	73fb      	strb	r3, [r7, #15]
   86628:	e027      	b.n	8667a <Cl_Dlsis_UpdateAlarmTable+0xe6>
			
		}
		else
			{
				// alarm was present before , but not active now.
				if(Cl_DlsisAlarmTable[tempcount].IsRaised == true)
   8662a:	7bba      	ldrb	r2, [r7, #14]
   8662c:	4918      	ldr	r1, [pc, #96]	; (86690 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   8662e:	4613      	mov	r3, r2
   86630:	00db      	lsls	r3, r3, #3
   86632:	1a9b      	subs	r3, r3, r2
   86634:	440b      	add	r3, r1
   86636:	3303      	adds	r3, #3
   86638:	781b      	ldrb	r3, [r3, #0]
   8663a:	2b00      	cmp	r3, #0
   8663c:	d01d      	beq.n	8667a <Cl_Dlsis_UpdateAlarmTable+0xe6>
				{
					Cl_DlsisAlarmTable[tempcount].IsRaised = false;
   8663e:	7bba      	ldrb	r2, [r7, #14]
   86640:	4913      	ldr	r1, [pc, #76]	; (86690 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86642:	4613      	mov	r3, r2
   86644:	00db      	lsls	r3, r3, #3
   86646:	1a9b      	subs	r3, r3, r2
   86648:	440b      	add	r3, r1
   8664a:	3303      	adds	r3, #3
   8664c:	2200      	movs	r2, #0
   8664e:	701a      	strb	r2, [r3, #0]
					command = CON_TX_COMMAND_ALARM;
   86650:	2307      	movs	r3, #7
   86652:	737b      	strb	r3, [r7, #13]
					data[0] = (Cl_Uint8Type)(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId);
   86654:	7bba      	ldrb	r2, [r7, #14]
   86656:	490e      	ldr	r1, [pc, #56]	; (86690 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86658:	4613      	mov	r3, r2
   8665a:	00db      	lsls	r3, r3, #3
   8665c:	1a9b      	subs	r3, r3, r2
   8665e:	440b      	add	r3, r1
   86660:	781b      	ldrb	r3, [r3, #0]
   86662:	723b      	strb	r3, [r7, #8]
					data[1] = (Cl_Uint8Type) 0;
   86664:	2300      	movs	r3, #0
   86666:	727b      	strb	r3, [r7, #9]
					Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
   86668:	f107 0108 	add.w	r1, r7, #8
   8666c:	7b7b      	ldrb	r3, [r7, #13]
   8666e:	2202      	movs	r2, #2
   86670:	4618      	mov	r0, r3
   86672:	4b0a      	ldr	r3, [pc, #40]	; (8669c <Cl_Dlsis_UpdateAlarmTable+0x108>)
   86674:	4798      	blx	r3
   86676:	4603      	mov	r3, r0
   86678:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
			Cl_Uint8Type data[2];
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   8667a:	7bbb      	ldrb	r3, [r7, #14]
   8667c:	3301      	adds	r3, #1
   8667e:	73bb      	strb	r3, [r7, #14]
   86680:	7bbb      	ldrb	r3, [r7, #14]
   86682:	2b1d      	cmp	r3, #29
   86684:	d993      	bls.n	865ae <Cl_Dlsis_UpdateAlarmTable+0x1a>
	}
	

	

return (Cl_dlsisretcode );
   86686:	7bfb      	ldrb	r3, [r7, #15]
}
   86688:	4618      	mov	r0, r3
   8668a:	3710      	adds	r7, #16
   8668c:	46bd      	mov	sp, r7
   8668e:	bd80      	pop	{r7, pc}
   86690:	2007039c 	.word	0x2007039c
   86694:	00083035 	.word	0x00083035
   86698:	000866a1 	.word	0x000866a1
   8669c:	00099729 	.word	0x00099729

000866a0 <CL_DlsisAlarmActon>:


Cl_ReturnCodeType  CL_DlsisAlarmActon(Cl_NewAlarmIdType cl_dlsisalarmid)
{
   866a0:	b580      	push	{r7, lr}
   866a2:	b086      	sub	sp, #24
   866a4:	af00      	add	r7, sp, #0
   866a6:	4603      	mov	r3, r0
   866a8:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   866aa:	2300      	movs	r3, #0
   866ac:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   866ae:	f107 0308 	add.w	r3, r7, #8
   866b2:	2100      	movs	r1, #0
   866b4:	460a      	mov	r2, r1
   866b6:	801a      	strh	r2, [r3, #0]
   866b8:	460a      	mov	r2, r1
   866ba:	709a      	strb	r2, [r3, #2]
   866bc:	2300      	movs	r3, #0
   866be:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   866c0:	234d      	movs	r3, #77	; 0x4d
   866c2:	73fb      	strb	r3, [r7, #15]
			Cl_Uint16Type levelswitchstatus = 0;	
   866c4:	2300      	movs	r3, #0
   866c6:	81bb      	strh	r3, [r7, #12]
			static Cl_Uint8Type fillseccounter = 0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   866c8:	2300      	movs	r3, #0
   866ca:	72fb      	strb	r3, [r7, #11]
		

			

							
		switch(cl_dlsisalarmid)
   866cc:	79fb      	ldrb	r3, [r7, #7]
   866ce:	3b01      	subs	r3, #1
   866d0:	2b3a      	cmp	r3, #58	; 0x3a
   866d2:	f200 811d 	bhi.w	86910 <CL_DlsisAlarmActon+0x270>
   866d6:	a201      	add	r2, pc, #4	; (adr r2, 866dc <CL_DlsisAlarmActon+0x3c>)
   866d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   866dc:	000867c9 	.word	0x000867c9
   866e0:	00086911 	.word	0x00086911
   866e4:	00086911 	.word	0x00086911
   866e8:	00086911 	.word	0x00086911
   866ec:	000867d7 	.word	0x000867d7
   866f0:	000867e5 	.word	0x000867e5
   866f4:	0008689b 	.word	0x0008689b
   866f8:	0008689b 	.word	0x0008689b
   866fc:	000868a9 	.word	0x000868a9
   86700:	00086911 	.word	0x00086911
   86704:	00086911 	.word	0x00086911
   86708:	00086863 	.word	0x00086863
   8670c:	0008686f 	.word	0x0008686f
   86710:	00086885 	.word	0x00086885
   86714:	000867f3 	.word	0x000867f3
   86718:	000867f3 	.word	0x000867f3
   8671c:	00086801 	.word	0x00086801
   86720:	00086801 	.word	0x00086801
   86724:	0008680f 	.word	0x0008680f
   86728:	0008680f 	.word	0x0008680f
   8672c:	0008681d 	.word	0x0008681d
   86730:	0008681d 	.word	0x0008681d
   86734:	0008682b 	.word	0x0008682b
   86738:	0008682b 	.word	0x0008682b
   8673c:	00086911 	.word	0x00086911
   86740:	00086911 	.word	0x00086911
   86744:	00086911 	.word	0x00086911
   86748:	00086911 	.word	0x00086911
   8674c:	00086911 	.word	0x00086911
   86750:	00086911 	.word	0x00086911
   86754:	00086911 	.word	0x00086911
   86758:	000868eb 	.word	0x000868eb
   8675c:	000868cd 	.word	0x000868cd
   86760:	00086903 	.word	0x00086903
   86764:	00086847 	.word	0x00086847
   86768:	00086847 	.word	0x00086847
   8676c:	00086855 	.word	0x00086855
   86770:	00086855 	.word	0x00086855
   86774:	00086839 	.word	0x00086839
   86778:	00086839 	.word	0x00086839
   8677c:	00086911 	.word	0x00086911
   86780:	00086911 	.word	0x00086911
   86784:	00086911 	.word	0x00086911
   86788:	00086911 	.word	0x00086911
   8678c:	00086911 	.word	0x00086911
   86790:	00086911 	.word	0x00086911
   86794:	00086911 	.word	0x00086911
   86798:	00086911 	.word	0x00086911
   8679c:	00086911 	.word	0x00086911
   867a0:	000868b5 	.word	0x000868b5
   867a4:	000868b5 	.word	0x000868b5
   867a8:	00086911 	.word	0x00086911
   867ac:	00086911 	.word	0x00086911
   867b0:	00086911 	.word	0x00086911
   867b4:	00086911 	.word	0x00086911
   867b8:	00086911 	.word	0x00086911
   867bc:	000868c1 	.word	0x000868c1
   867c0:	000868c1 	.word	0x000868c1
   867c4:	000868c1 	.word	0x000868c1
		{
			case BLOODDOOR_STATUS_OPEN:
				sv_cntrl_setredalarm();
   867c8:	4b6b      	ldr	r3, [pc, #428]	; (86978 <CL_DlsisAlarmActon+0x2d8>)
   867ca:	4798      	blx	r3
				sv_cntrl_buzzer();
   867cc:	4b6b      	ldr	r3, [pc, #428]	; (8697c <CL_DlsisAlarmActon+0x2dc>)
   867ce:	4798      	blx	r3
				Cl_Dlsis_safesate();	
   867d0:	4b6b      	ldr	r3, [pc, #428]	; (86980 <CL_DlsisAlarmActon+0x2e0>)
   867d2:	4798      	blx	r3
			break;
   867d4:	e09d      	b.n	86912 <CL_DlsisAlarmActon+0x272>
			
			
			case HOLDER1STATUS_CLOSED:
				sv_cntrl_setyellowalarm();
   867d6:	4b6b      	ldr	r3, [pc, #428]	; (86984 <CL_DlsisAlarmActon+0x2e4>)
   867d8:	4798      	blx	r3
				sv_cntrl_buzzer();
   867da:	4b68      	ldr	r3, [pc, #416]	; (8697c <CL_DlsisAlarmActon+0x2dc>)
   867dc:	4798      	blx	r3
				cl_temp_safestate();
   867de:	4b6a      	ldr	r3, [pc, #424]	; (86988 <CL_DlsisAlarmActon+0x2e8>)
   867e0:	4798      	blx	r3
			break;
   867e2:	e096      	b.n	86912 <CL_DlsisAlarmActon+0x272>
			
			case HOLDER2STATUS_CLOSED:
				sv_cntrl_setyellowalarm();
   867e4:	4b67      	ldr	r3, [pc, #412]	; (86984 <CL_DlsisAlarmActon+0x2e4>)
   867e6:	4798      	blx	r3
				sv_cntrl_buzzer();
   867e8:	4b64      	ldr	r3, [pc, #400]	; (8697c <CL_DlsisAlarmActon+0x2dc>)
   867ea:	4798      	blx	r3
				cl_temp_safestate();
   867ec:	4b66      	ldr	r3, [pc, #408]	; (86988 <CL_DlsisAlarmActon+0x2e8>)
   867ee:	4798      	blx	r3
			break;
   867f0:	e08f      	b.n	86912 <CL_DlsisAlarmActon+0x272>

			case TEMP1_HIGH_THRESHOLD:
			case TEMP1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   867f2:	4b64      	ldr	r3, [pc, #400]	; (86984 <CL_DlsisAlarmActon+0x2e4>)
   867f4:	4798      	blx	r3
				sv_cntrl_buzzer();
   867f6:	4b61      	ldr	r3, [pc, #388]	; (8697c <CL_DlsisAlarmActon+0x2dc>)
   867f8:	4798      	blx	r3
				cl_temp_safestate();
   867fa:	4b63      	ldr	r3, [pc, #396]	; (86988 <CL_DlsisAlarmActon+0x2e8>)
   867fc:	4798      	blx	r3
			break;
   867fe:	e088      	b.n	86912 <CL_DlsisAlarmActon+0x272>
			
			case TEMP2_HIGH_THRESHOLD:
			case TEMP2_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   86800:	4b60      	ldr	r3, [pc, #384]	; (86984 <CL_DlsisAlarmActon+0x2e4>)
   86802:	4798      	blx	r3
				sv_cntrl_buzzer();
   86804:	4b5d      	ldr	r3, [pc, #372]	; (8697c <CL_DlsisAlarmActon+0x2dc>)
   86806:	4798      	blx	r3
				cl_temp_safestate();
   86808:	4b5f      	ldr	r3, [pc, #380]	; (86988 <CL_DlsisAlarmActon+0x2e8>)
   8680a:	4798      	blx	r3
			break;
   8680c:	e081      	b.n	86912 <CL_DlsisAlarmActon+0x272>
			
			case TEMP3_HIGH_THRESHOLD:
			case TEMP3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   8680e:	4b5d      	ldr	r3, [pc, #372]	; (86984 <CL_DlsisAlarmActon+0x2e4>)
   86810:	4798      	blx	r3
				sv_cntrl_buzzer();
   86812:	4b5a      	ldr	r3, [pc, #360]	; (8697c <CL_DlsisAlarmActon+0x2dc>)
   86814:	4798      	blx	r3
				cl_temp_safestate();
   86816:	4b5c      	ldr	r3, [pc, #368]	; (86988 <CL_DlsisAlarmActon+0x2e8>)
   86818:	4798      	blx	r3
			break;
   8681a:	e07a      	b.n	86912 <CL_DlsisAlarmActon+0x272>
			
			case 	PS1_HIGH_THRESHOLD:
			case    PS1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   8681c:	4b59      	ldr	r3, [pc, #356]	; (86984 <CL_DlsisAlarmActon+0x2e4>)
   8681e:	4798      	blx	r3
				sv_cntrl_buzzer();
   86820:	4b56      	ldr	r3, [pc, #344]	; (8697c <CL_DlsisAlarmActon+0x2dc>)
   86822:	4798      	blx	r3
				cl_temp_safestate();
   86824:	4b58      	ldr	r3, [pc, #352]	; (86988 <CL_DlsisAlarmActon+0x2e8>)
   86826:	4798      	blx	r3
			break;
   86828:	e073      	b.n	86912 <CL_DlsisAlarmActon+0x272>
			
			case 	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   8682a:	4b56      	ldr	r3, [pc, #344]	; (86984 <CL_DlsisAlarmActon+0x2e4>)
   8682c:	4798      	blx	r3
				sv_cntrl_buzzer();
   8682e:	4b53      	ldr	r3, [pc, #332]	; (8697c <CL_DlsisAlarmActon+0x2dc>)
   86830:	4798      	blx	r3
				cl_temp_safestate();
   86832:	4b55      	ldr	r3, [pc, #340]	; (86988 <CL_DlsisAlarmActon+0x2e8>)
   86834:	4798      	blx	r3
			break;
   86836:	e06c      	b.n	86912 <CL_DlsisAlarmActon+0x272>
			
			case 	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   86838:	4b52      	ldr	r3, [pc, #328]	; (86984 <CL_DlsisAlarmActon+0x2e4>)
   8683a:	4798      	blx	r3
				sv_cntrl_buzzer();
   8683c:	4b4f      	ldr	r3, [pc, #316]	; (8697c <CL_DlsisAlarmActon+0x2dc>)
   8683e:	4798      	blx	r3
				cl_temp_safestate();
   86840:	4b51      	ldr	r3, [pc, #324]	; (86988 <CL_DlsisAlarmActon+0x2e8>)
   86842:	4798      	blx	r3
			break;
   86844:	e065      	b.n	86912 <CL_DlsisAlarmActon+0x272>
			
			case APTSTATUS_LOW:
			case APTSTATUS_HIGH:
				sv_cntrl_setredalarm();
   86846:	4b4c      	ldr	r3, [pc, #304]	; (86978 <CL_DlsisAlarmActon+0x2d8>)
   86848:	4798      	blx	r3
				sv_cntrl_buzzer();
   8684a:	4b4c      	ldr	r3, [pc, #304]	; (8697c <CL_DlsisAlarmActon+0x2dc>)
   8684c:	4798      	blx	r3
				Cl_Dlsis_safesate();
   8684e:	4b4c      	ldr	r3, [pc, #304]	; (86980 <CL_DlsisAlarmActon+0x2e0>)
   86850:	4798      	blx	r3
			break;
   86852:	e05e      	b.n	86912 <CL_DlsisAlarmActon+0x272>
			
			case VPTSTATUS_LOW:
			case VPTSTATUS_HIGH:
				sv_cntrl_setredalarm();
   86854:	4b48      	ldr	r3, [pc, #288]	; (86978 <CL_DlsisAlarmActon+0x2d8>)
   86856:	4798      	blx	r3
				sv_cntrl_buzzer();
   86858:	4b48      	ldr	r3, [pc, #288]	; (8697c <CL_DlsisAlarmActon+0x2dc>)
   8685a:	4798      	blx	r3
				Cl_Dlsis_safesate();
   8685c:	4b48      	ldr	r3, [pc, #288]	; (86980 <CL_DlsisAlarmActon+0x2e0>)
   8685e:	4798      	blx	r3
			break;
   86860:	e057      	b.n	86912 <CL_DlsisAlarmActon+0x272>
			
			case FLOW_NO_FLOW:
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
			Cl_Dlsis_StopDialysis();
   86862:	4b4a      	ldr	r3, [pc, #296]	; (8698c <CL_DlsisAlarmActon+0x2ec>)
   86864:	4798      	blx	r3
		//	NewAlarmId = _FLOW_NO_FLOW;
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86866:	4b4a      	ldr	r3, [pc, #296]	; (86990 <CL_DlsisAlarmActon+0x2f0>)
   86868:	220a      	movs	r2, #10
   8686a:	701a      	strb	r2, [r3, #0]
			break;
   8686c:	e051      	b.n	86912 <CL_DlsisAlarmActon+0x272>
			case FLOW_LOW_FLOWRATE:
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
   8686e:	2203      	movs	r2, #3
   86870:	4948      	ldr	r1, [pc, #288]	; (86994 <CL_DlsisAlarmActon+0x2f4>)
   86872:	2018      	movs	r0, #24
   86874:	4b48      	ldr	r3, [pc, #288]	; (86998 <CL_DlsisAlarmActon+0x2f8>)
   86876:	4798      	blx	r3
		//	NewAlarmId = _FLOW_LOW_FLOWRATE;
			Cl_Dlsis_StopDialysis();
   86878:	4b44      	ldr	r3, [pc, #272]	; (8698c <CL_DlsisAlarmActon+0x2ec>)
   8687a:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8687c:	4b44      	ldr	r3, [pc, #272]	; (86990 <CL_DlsisAlarmActon+0x2f0>)
   8687e:	220a      	movs	r2, #10
   86880:	701a      	strb	r2, [r3, #0]
			break;
   86882:	e046      	b.n	86912 <CL_DlsisAlarmActon+0x272>
			case FLOW_HIGH_FLOWRATE:
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
   86884:	2203      	movs	r2, #3
   86886:	4943      	ldr	r1, [pc, #268]	; (86994 <CL_DlsisAlarmActon+0x2f4>)
   86888:	2018      	movs	r0, #24
   8688a:	4b43      	ldr	r3, [pc, #268]	; (86998 <CL_DlsisAlarmActon+0x2f8>)
   8688c:	4798      	blx	r3
			//	NewAlarmId = _FLOW_LOW_FLOWRATE;
			Cl_Dlsis_StopDialysis();
   8688e:	4b3f      	ldr	r3, [pc, #252]	; (8698c <CL_DlsisAlarmActon+0x2ec>)
   86890:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86892:	4b3f      	ldr	r3, [pc, #252]	; (86990 <CL_DlsisAlarmActon+0x2f0>)
   86894:	220a      	movs	r2, #10
   86896:	701a      	strb	r2, [r3, #0]
			break;
   86898:	e03b      	b.n	86912 <CL_DlsisAlarmActon+0x272>
			
			case COND_STATUS_LOW:
			case COND_STATUS_HIGH:
				sv_cntrl_setyellowalarm();
   8689a:	4b3a      	ldr	r3, [pc, #232]	; (86984 <CL_DlsisAlarmActon+0x2e4>)
   8689c:	4798      	blx	r3
				sv_cntrl_buzzer();
   8689e:	4b37      	ldr	r3, [pc, #220]	; (8697c <CL_DlsisAlarmActon+0x2dc>)
   868a0:	4798      	blx	r3
				cl_cond_safestate();
   868a2:	4b3e      	ldr	r3, [pc, #248]	; (8699c <CL_DlsisAlarmActon+0x2fc>)
   868a4:	4798      	blx	r3
			break;
   868a6:	e034      	b.n	86912 <CL_DlsisAlarmActon+0x272>
			
			case COND_DAC_OPEN:
				// air trapped in DAC2 or no flow
	//				 Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DAC_OPEN",8);
			//		NewAlarmId = _COND_DAC_OPEN;
					Cl_Dlsis_StopDialysis();
   868a8:	4b38      	ldr	r3, [pc, #224]	; (8698c <CL_DlsisAlarmActon+0x2ec>)
   868aa:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   868ac:	4b38      	ldr	r3, [pc, #224]	; (86990 <CL_DlsisAlarmActon+0x2f0>)
   868ae:	220a      	movs	r2, #10
   868b0:	701a      	strb	r2, [r3, #0]
			break;
   868b2:	e02e      	b.n	86912 <CL_DlsisAlarmActon+0x272>
				// Rinse incomplete.
			break;
			case 	UFP_OVERRUN:
			case	UFP_UNDERRUN:
			//		NewAlarmId = _UF_ALARM_FOR_RINSE;
					Cl_Dlsis_StopDialysis();
   868b4:	4b35      	ldr	r3, [pc, #212]	; (8698c <CL_DlsisAlarmActon+0x2ec>)
   868b6:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   868b8:	4b35      	ldr	r3, [pc, #212]	; (86990 <CL_DlsisAlarmActon+0x2f0>)
   868ba:	220a      	movs	r2, #10
   868bc:	701a      	strb	r2, [r3, #0]
			break;
   868be:	e028      	b.n	86912 <CL_DlsisAlarmActon+0x272>
			case 	BC_OVERRUN:
			case	BC_UNDERRUN:
			case	BC_FAILED:
				//	NewAlarmId = _BC_ALARM;
					Cl_Dlsis_StopDialysis();
   868c0:	4b32      	ldr	r3, [pc, #200]	; (8698c <CL_DlsisAlarmActon+0x2ec>)
   868c2:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   868c4:	4b32      	ldr	r3, [pc, #200]	; (86990 <CL_DlsisAlarmActon+0x2f0>)
   868c6:	220a      	movs	r2, #10
   868c8:	701a      	strb	r2, [r3, #0]
			break;
   868ca:	e022      	b.n	86912 <CL_DlsisAlarmActon+0x272>

			case WATCHDOG_TIMER: //27
			//	NewAlarmId = _WATCHDOG_TIMER;
			break;
			case BD_EVENT:
				sv_cntrl_setredalarm();
   868cc:	4b2a      	ldr	r3, [pc, #168]	; (86978 <CL_DlsisAlarmActon+0x2d8>)
   868ce:	4798      	blx	r3
				sv_cntrl_buzzer();
   868d0:	4b2a      	ldr	r3, [pc, #168]	; (8697c <CL_DlsisAlarmActon+0x2dc>)
   868d2:	4798      	blx	r3
				Cl_Dlsis_StopDialysis();
   868d4:	4b2d      	ldr	r3, [pc, #180]	; (8698c <CL_DlsisAlarmActon+0x2ec>)
   868d6:	4798      	blx	r3
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BD",2);
   868d8:	2202      	movs	r2, #2
   868da:	4931      	ldr	r1, [pc, #196]	; (869a0 <CL_DlsisAlarmActon+0x300>)
   868dc:	2018      	movs	r0, #24
   868de:	4b2e      	ldr	r3, [pc, #184]	; (86998 <CL_DlsisAlarmActon+0x2f8>)
   868e0:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   868e2:	4b2b      	ldr	r3, [pc, #172]	; (86990 <CL_DlsisAlarmActon+0x2f0>)
   868e4:	220a      	movs	r2, #10
   868e6:	701a      	strb	r2, [r3, #0]
			break;
   868e8:	e013      	b.n	86912 <CL_DlsisAlarmActon+0x272>
			
			case ABD_EVENT:
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ABD",3);
   868ea:	2203      	movs	r2, #3
   868ec:	492d      	ldr	r1, [pc, #180]	; (869a4 <CL_DlsisAlarmActon+0x304>)
   868ee:	2018      	movs	r0, #24
   868f0:	4b29      	ldr	r3, [pc, #164]	; (86998 <CL_DlsisAlarmActon+0x2f8>)
   868f2:	4798      	blx	r3
				sv_cntrl_setredalarm();
   868f4:	4b20      	ldr	r3, [pc, #128]	; (86978 <CL_DlsisAlarmActon+0x2d8>)
   868f6:	4798      	blx	r3
				sv_cntrl_buzzer();
   868f8:	4b20      	ldr	r3, [pc, #128]	; (8697c <CL_DlsisAlarmActon+0x2dc>)
   868fa:	4798      	blx	r3
				Cl_Dlsis_safesate();
   868fc:	4b20      	ldr	r3, [pc, #128]	; (86980 <CL_DlsisAlarmActon+0x2e0>)
   868fe:	4798      	blx	r3
			break;
   86900:	e007      	b.n	86912 <CL_DlsisAlarmActon+0x272>
			
			case BLD_EVENT:
				sv_cntrl_setredalarm();
   86902:	4b1d      	ldr	r3, [pc, #116]	; (86978 <CL_DlsisAlarmActon+0x2d8>)
   86904:	4798      	blx	r3
				sv_cntrl_buzzer();
   86906:	4b1d      	ldr	r3, [pc, #116]	; (8697c <CL_DlsisAlarmActon+0x2dc>)
   86908:	4798      	blx	r3
				Cl_Dlsis_safesate();
   8690a:	4b1d      	ldr	r3, [pc, #116]	; (86980 <CL_DlsisAlarmActon+0x2e0>)
   8690c:	4798      	blx	r3
			break;
   8690e:	e000      	b.n	86912 <CL_DlsisAlarmActon+0x272>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND",4);
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			break;*/
			
			default:
			break;
   86910:	bf00      	nop

		}
		 if(cl_dlsisalarmid != _NO_ALARM)
   86912:	79fb      	ldrb	r3, [r7, #7]
   86914:	2b00      	cmp	r3, #0
   86916:	d029      	beq.n	8696c <CL_DlsisAlarmActon+0x2cc>
		 {
			 dlsisalarm = cl_dlsisalarmid;
   86918:	4a23      	ldr	r2, [pc, #140]	; (869a8 <CL_DlsisAlarmActon+0x308>)
   8691a:	79fb      	ldrb	r3, [r7, #7]
   8691c:	7013      	strb	r3, [r2, #0]
			 dlsisalarm1 = dlsisalarm;
   8691e:	4b22      	ldr	r3, [pc, #136]	; (869a8 <CL_DlsisAlarmActon+0x308>)
   86920:	781a      	ldrb	r2, [r3, #0]
   86922:	4b22      	ldr	r3, [pc, #136]	; (869ac <CL_DlsisAlarmActon+0x30c>)
   86924:	701a      	strb	r2, [r3, #0]
			data[0] = (Cl_Uint8Type)cl_dlsisalarmid;
   86926:	79fb      	ldrb	r3, [r7, #7]
   86928:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   8692a:	2301      	movs	r3, #1
   8692c:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   8692e:	2302      	movs	r3, #2
   86930:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   86932:	2307      	movs	r3, #7
   86934:	73fb      	strb	r3, [r7, #15]
			cl_wait(10);
   86936:	200a      	movs	r0, #10
   86938:	4b1d      	ldr	r3, [pc, #116]	; (869b0 <CL_DlsisAlarmActon+0x310>)
   8693a:	4798      	blx	r3
			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
   8693c:	f107 0108 	add.w	r1, r7, #8
   86940:	7bfb      	ldrb	r3, [r7, #15]
   86942:	2203      	movs	r2, #3
   86944:	4618      	mov	r0, r3
   86946:	4b14      	ldr	r3, [pc, #80]	; (86998 <CL_DlsisAlarmActon+0x2f8>)
   86948:	4798      	blx	r3
   8694a:	4603      	mov	r3, r0
   8694c:	75fb      	strb	r3, [r7, #23]
			
					
			command = CON_TX_COMMAND_CL_SYS_STATE;
   8694e:	232b      	movs	r3, #43	; 0x2b
   86950:	73fb      	strb	r3, [r7, #15]
			data[0] = (Cl_Uint8Type)CLEANING;
   86952:	2301      	movs	r3, #1
   86954:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type)CLEAN_CLEAN_ALARM_STOPPED;
   86956:	2302      	movs	r3, #2
   86958:	727b      	strb	r3, [r7, #9]
			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
   8695a:	f107 0108 	add.w	r1, r7, #8
   8695e:	7bfb      	ldrb	r3, [r7, #15]
   86960:	2202      	movs	r2, #2
   86962:	4618      	mov	r0, r3
   86964:	4b0c      	ldr	r3, [pc, #48]	; (86998 <CL_DlsisAlarmActon+0x2f8>)
   86966:	4798      	blx	r3
   86968:	4603      	mov	r3, r0
   8696a:	75fb      	strb	r3, [r7, #23]
		 }
return CL_OK;			
   8696c:	2300      	movs	r3, #0
}
   8696e:	4618      	mov	r0, r3
   86970:	3718      	adds	r7, #24
   86972:	46bd      	mov	sp, r7
   86974:	bd80      	pop	{r7, pc}
   86976:	bf00      	nop
   86978:	00097c05 	.word	0x00097c05
   8697c:	00097c41 	.word	0x00097c41
   86980:	00087bb5 	.word	0x00087bb5
   86984:	00097c19 	.word	0x00097c19
   86988:	00087bf9 	.word	0x00087bf9
   8698c:	000869b5 	.word	0x000869b5
   86990:	200720d0 	.word	0x200720d0
   86994:	000a5e58 	.word	0x000a5e58
   86998:	00099729 	.word	0x00099729
   8699c:	00087c45 	.word	0x00087c45
   869a0:	000a5e5c 	.word	0x000a5e5c
   869a4:	000a5e60 	.word	0x000a5e60
   869a8:	20072d89 	.word	0x20072d89
   869ac:	20072d7e 	.word	0x20072d7e
   869b0:	00091e2d 	.word	0x00091e2d

000869b4 <Cl_Dlsis_StopDialysis>:


Cl_ReturnCodeType Cl_Dlsis_StopDialysis(void)
{
   869b4:	b580      	push	{r7, lr}
   869b6:	b082      	sub	sp, #8
   869b8:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   869ba:	2300      	movs	r3, #0
   869bc:	71fb      	strb	r3, [r7, #7]
	
				if(!((cl_dlsis_state == CL_DLSIS_STATE_IDLE ) || (cl_dlsis_state == CL_DLSIS_STATE_STOPPED )|| (cl_dlsis_state == CL_DLSIS_STATE_PAUSED ) ||(cl_dlsis_state == CL_DLSIS_STATE_CRITICAL_ALARM )  ))
   869be:	4b29      	ldr	r3, [pc, #164]	; (86a64 <Cl_Dlsis_StopDialysis+0xb0>)
   869c0:	781b      	ldrb	r3, [r3, #0]
   869c2:	2b00      	cmp	r3, #0
   869c4:	d048      	beq.n	86a58 <Cl_Dlsis_StopDialysis+0xa4>
   869c6:	4b27      	ldr	r3, [pc, #156]	; (86a64 <Cl_Dlsis_StopDialysis+0xb0>)
   869c8:	781b      	ldrb	r3, [r3, #0]
   869ca:	2b09      	cmp	r3, #9
   869cc:	d044      	beq.n	86a58 <Cl_Dlsis_StopDialysis+0xa4>
   869ce:	4b25      	ldr	r3, [pc, #148]	; (86a64 <Cl_Dlsis_StopDialysis+0xb0>)
   869d0:	781b      	ldrb	r3, [r3, #0]
   869d2:	2b07      	cmp	r3, #7
   869d4:	d040      	beq.n	86a58 <Cl_Dlsis_StopDialysis+0xa4>
   869d6:	4b23      	ldr	r3, [pc, #140]	; (86a64 <Cl_Dlsis_StopDialysis+0xb0>)
   869d8:	781b      	ldrb	r3, [r3, #0]
   869da:	2b0a      	cmp	r3, #10
   869dc:	d03c      	beq.n	86a58 <Cl_Dlsis_StopDialysis+0xa4>
				{

					
					 	DlsisTime.Cl_dlsissecondscounter = 0;
   869de:	4b22      	ldr	r3, [pc, #136]	; (86a68 <Cl_Dlsis_StopDialysis+0xb4>)
   869e0:	2200      	movs	r2, #0
   869e2:	701a      	strb	r2, [r3, #0]
					 	DlsisTime.Cl_dlsisMinutescounter= 0;
   869e4:	4b20      	ldr	r3, [pc, #128]	; (86a68 <Cl_Dlsis_StopDialysis+0xb4>)
   869e6:	2200      	movs	r2, #0
   869e8:	705a      	strb	r2, [r3, #1]
					 	DlsisTime.Cl_dlsishourscounter= 0;
   869ea:	4b1f      	ldr	r3, [pc, #124]	; (86a68 <Cl_Dlsis_StopDialysis+0xb4>)
   869ec:	2200      	movs	r2, #0
   869ee:	709a      	strb	r2, [r3, #2]
					 	DlsisTime.Cl_dlsisTotalMinutescounter= 0;
   869f0:	4b1d      	ldr	r3, [pc, #116]	; (86a68 <Cl_Dlsis_StopDialysis+0xb4>)
   869f2:	2200      	movs	r2, #0
   869f4:	70da      	strb	r2, [r3, #3]
					 	DlsisTime.Cl_dlsisTotalhourscounter=0;
   869f6:	4b1c      	ldr	r3, [pc, #112]	; (86a68 <Cl_Dlsis_StopDialysis+0xb4>)
   869f8:	2200      	movs	r2, #0
   869fa:	711a      	strb	r2, [r3, #4]

				Cl_dlsisretcode =  sv_cntrl_deactivatevenousclamp();
   869fc:	4b1b      	ldr	r3, [pc, #108]	; (86a6c <Cl_Dlsis_StopDialysis+0xb8>)
   869fe:	4798      	blx	r3
   86a00:	4603      	mov	r3, r0
   86a02:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode =  sv_cntrl_deactivatepump(UFPUMP);
   86a04:	2004      	movs	r0, #4
   86a06:	4b1a      	ldr	r3, [pc, #104]	; (86a70 <Cl_Dlsis_StopDialysis+0xbc>)
   86a08:	4798      	blx	r3
   86a0a:	4603      	mov	r3, r0
   86a0c:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   86a0e:	2011      	movs	r0, #17
   86a10:	4b18      	ldr	r3, [pc, #96]	; (86a74 <Cl_Dlsis_StopDialysis+0xc0>)
   86a12:	4798      	blx	r3
   86a14:	4603      	mov	r3, r0
   86a16:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = sv_cntrl_poweroffheater();
   86a18:	4b17      	ldr	r3, [pc, #92]	; (86a78 <Cl_Dlsis_StopDialysis+0xc4>)
   86a1a:	4798      	blx	r3
   86a1c:	4603      	mov	r3, r0
   86a1e:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   86a20:	2004      	movs	r0, #4
   86a22:	4b16      	ldr	r3, [pc, #88]	; (86a7c <Cl_Dlsis_StopDialysis+0xc8>)
   86a24:	4798      	blx	r3
   86a26:	4603      	mov	r3, r0
   86a28:	71fb      	strb	r3, [r7, #7]
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   86a2a:	2100      	movs	r1, #0
   86a2c:	2004      	movs	r0, #4
   86a2e:	4b14      	ldr	r3, [pc, #80]	; (86a80 <Cl_Dlsis_StopDialysis+0xcc>)
   86a30:	4798      	blx	r3
				Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   86a32:	2011      	movs	r0, #17
   86a34:	4b0f      	ldr	r3, [pc, #60]	; (86a74 <Cl_Dlsis_StopDialysis+0xc0>)
   86a36:	4798      	blx	r3
   86a38:	4603      	mov	r3, r0
   86a3a:	71fb      	strb	r3, [r7, #7]
				cl_dlsis_state = CL_DLSIS_STATE_IDLE;
   86a3c:	4b09      	ldr	r3, [pc, #36]	; (86a64 <Cl_Dlsis_StopDialysis+0xb0>)
   86a3e:	2200      	movs	r2, #0
   86a40:	701a      	strb	r2, [r3, #0]
				Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_STOPPED,&data,0);
   86a42:	1dbb      	adds	r3, r7, #6
   86a44:	2200      	movs	r2, #0
   86a46:	4619      	mov	r1, r3
   86a48:	2014      	movs	r0, #20
   86a4a:	4b0e      	ldr	r3, [pc, #56]	; (86a84 <Cl_Dlsis_StopDialysis+0xd0>)
   86a4c:	4798      	blx	r3
   86a4e:	4603      	mov	r3, r0
   86a50:	71fb      	strb	r3, [r7, #7]
				bc_flag = 0;
   86a52:	4b0d      	ldr	r3, [pc, #52]	; (86a88 <Cl_Dlsis_StopDialysis+0xd4>)
   86a54:	2200      	movs	r2, #0
   86a56:	701a      	strb	r2, [r3, #0]
					
				}
				return CL_OK;
   86a58:	2300      	movs	r3, #0
}
   86a5a:	4618      	mov	r0, r3
   86a5c:	3708      	adds	r7, #8
   86a5e:	46bd      	mov	sp, r7
   86a60:	bd80      	pop	{r7, pc}
   86a62:	bf00      	nop
   86a64:	200720d0 	.word	0x200720d0
   86a68:	20072d84 	.word	0x20072d84
   86a6c:	00097b0d 	.word	0x00097b0d
   86a70:	00097949 	.word	0x00097949
   86a74:	00097b9d 	.word	0x00097b9d
   86a78:	00097999 	.word	0x00097999
   86a7c:	00088a91 	.word	0x00088a91
   86a80:	00091eb5 	.word	0x00091eb5
   86a84:	00099729 	.word	0x00099729
   86a88:	200720ef 	.word	0x200720ef

00086a8c <Cl_Dlsis_BypassDialysis>:

Cl_ReturnCodeType Cl_Dlsis_BypassDialysis(void)
{
   86a8c:	b580      	push	{r7, lr}
   86a8e:	b082      	sub	sp, #8
   86a90:	af00      	add	r7, sp, #0
			Cl_Uint8Type data;
			Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   86a92:	2300      	movs	r3, #0
   86a94:	71fb      	strb	r3, [r7, #7]
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   86a96:	4b48      	ldr	r3, [pc, #288]	; (86bb8 <Cl_Dlsis_BypassDialysis+0x12c>)
   86a98:	4798      	blx	r3
   86a9a:	4603      	mov	r3, r0
   86a9c:	71fb      	strb	r3, [r7, #7]
			Cl_dlsisretcode =  sv_cntrl_deactivatepump(UFPUMP);
   86a9e:	2004      	movs	r0, #4
   86aa0:	4b46      	ldr	r3, [pc, #280]	; (86bbc <Cl_Dlsis_BypassDialysis+0x130>)
   86aa2:	4798      	blx	r3
   86aa4:	4603      	mov	r3, r0
   86aa6:	71fb      	strb	r3, [r7, #7]
			
			Cl_dlsissecondscounter_1 = DlsisTime.Cl_dlsissecondscounter;
   86aa8:	4b45      	ldr	r3, [pc, #276]	; (86bc0 <Cl_Dlsis_BypassDialysis+0x134>)
   86aaa:	781b      	ldrb	r3, [r3, #0]
   86aac:	461a      	mov	r2, r3
   86aae:	4b45      	ldr	r3, [pc, #276]	; (86bc4 <Cl_Dlsis_BypassDialysis+0x138>)
   86ab0:	601a      	str	r2, [r3, #0]
			Cl_dlsishourscounter_1 = DlsisTime.Cl_dlsishourscounter;
   86ab2:	4b43      	ldr	r3, [pc, #268]	; (86bc0 <Cl_Dlsis_BypassDialysis+0x134>)
   86ab4:	789b      	ldrb	r3, [r3, #2]
   86ab6:	461a      	mov	r2, r3
   86ab8:	4b43      	ldr	r3, [pc, #268]	; (86bc8 <Cl_Dlsis_BypassDialysis+0x13c>)
   86aba:	601a      	str	r2, [r3, #0]
			Cl_dlsisMinutescounter_1 = DlsisTime.Cl_dlsisMinutescounter;
   86abc:	4b40      	ldr	r3, [pc, #256]	; (86bc0 <Cl_Dlsis_BypassDialysis+0x134>)
   86abe:	785b      	ldrb	r3, [r3, #1]
   86ac0:	461a      	mov	r2, r3
   86ac2:	4b42      	ldr	r3, [pc, #264]	; (86bcc <Cl_Dlsis_BypassDialysis+0x140>)
   86ac4:	601a      	str	r2, [r3, #0]
			Cl_dlsisTotalMinutescounter_1 = DlsisTime.Cl_dlsisTotalMinutescounter;
   86ac6:	4b3e      	ldr	r3, [pc, #248]	; (86bc0 <Cl_Dlsis_BypassDialysis+0x134>)
   86ac8:	78db      	ldrb	r3, [r3, #3]
   86aca:	461a      	mov	r2, r3
   86acc:	4b40      	ldr	r3, [pc, #256]	; (86bd0 <Cl_Dlsis_BypassDialysis+0x144>)
   86ace:	601a      	str	r2, [r3, #0]
			Cl_dlsisTotalhourscounter_1 = DlsisTime.Cl_dlsisTotalhourscounter;
   86ad0:	4b3b      	ldr	r3, [pc, #236]	; (86bc0 <Cl_Dlsis_BypassDialysis+0x134>)
   86ad2:	791b      	ldrb	r3, [r3, #4]
   86ad4:	461a      	mov	r2, r3
   86ad6:	4b3f      	ldr	r3, [pc, #252]	; (86bd4 <Cl_Dlsis_BypassDialysis+0x148>)
   86ad8:	601a      	str	r2, [r3, #0]
			DlsisTime.Cl_dlsissecondscounter = 0;
   86ada:	4b39      	ldr	r3, [pc, #228]	; (86bc0 <Cl_Dlsis_BypassDialysis+0x134>)
   86adc:	2200      	movs	r2, #0
   86ade:	701a      	strb	r2, [r3, #0]
			DlsisTime.Cl_dlsishourscounter = 0;
   86ae0:	4b37      	ldr	r3, [pc, #220]	; (86bc0 <Cl_Dlsis_BypassDialysis+0x134>)
   86ae2:	2200      	movs	r2, #0
   86ae4:	709a      	strb	r2, [r3, #2]
			DlsisTime.Cl_dlsisMinutescounter = 0;
   86ae6:	4b36      	ldr	r3, [pc, #216]	; (86bc0 <Cl_Dlsis_BypassDialysis+0x134>)
   86ae8:	2200      	movs	r2, #0
   86aea:	705a      	strb	r2, [r3, #1]
			DlsisTime.Cl_dlsisTotalhourscounter = 0;
   86aec:	4b34      	ldr	r3, [pc, #208]	; (86bc0 <Cl_Dlsis_BypassDialysis+0x134>)
   86aee:	2200      	movs	r2, #0
   86af0:	711a      	strb	r2, [r3, #4]
			 DlsisTime.Cl_dlsisTotalMinutescounter = 0;
   86af2:	4b33      	ldr	r3, [pc, #204]	; (86bc0 <Cl_Dlsis_BypassDialysis+0x134>)
   86af4:	2200      	movs	r2, #0
   86af6:	70da      	strb	r2, [r3, #3]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false );
   86af8:	2100      	movs	r1, #0
   86afa:	2001      	movs	r0, #1
   86afc:	4b36      	ldr	r3, [pc, #216]	; (86bd8 <Cl_Dlsis_BypassDialysis+0x14c>)
   86afe:	4798      	blx	r3
   86b00:	4603      	mov	r3, r0
   86b02:	71fb      	strb	r3, [r7, #7]
		//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,false );
		//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,false);
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,false );
   86b04:	2100      	movs	r1, #0
   86b06:	2005      	movs	r0, #5
   86b08:	4b33      	ldr	r3, [pc, #204]	; (86bd8 <Cl_Dlsis_BypassDialysis+0x14c>)
   86b0a:	4798      	blx	r3
   86b0c:	4603      	mov	r3, r0
   86b0e:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,false );
   86b10:	2100      	movs	r1, #0
   86b12:	2006      	movs	r0, #6
   86b14:	4b30      	ldr	r3, [pc, #192]	; (86bd8 <Cl_Dlsis_BypassDialysis+0x14c>)
   86b16:	4798      	blx	r3
   86b18:	4603      	mov	r3, r0
   86b1a:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   86b1c:	2100      	movs	r1, #0
   86b1e:	2003      	movs	r0, #3
   86b20:	4b2d      	ldr	r3, [pc, #180]	; (86bd8 <Cl_Dlsis_BypassDialysis+0x14c>)
   86b22:	4798      	blx	r3
   86b24:	4603      	mov	r3, r0
   86b26:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   86b28:	2100      	movs	r1, #0
   86b2a:	2004      	movs	r0, #4
   86b2c:	4b2a      	ldr	r3, [pc, #168]	; (86bd8 <Cl_Dlsis_BypassDialysis+0x14c>)
   86b2e:	4798      	blx	r3
   86b30:	4603      	mov	r3, r0
   86b32:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   86b34:	2100      	movs	r1, #0
   86b36:	2007      	movs	r0, #7
   86b38:	4b27      	ldr	r3, [pc, #156]	; (86bd8 <Cl_Dlsis_BypassDialysis+0x14c>)
   86b3a:	4798      	blx	r3
   86b3c:	4603      	mov	r3, r0
   86b3e:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   86b40:	2100      	movs	r1, #0
   86b42:	2008      	movs	r0, #8
   86b44:	4b24      	ldr	r3, [pc, #144]	; (86bd8 <Cl_Dlsis_BypassDialysis+0x14c>)
   86b46:	4798      	blx	r3
   86b48:	4603      	mov	r3, r0
   86b4a:	71fb      	strb	r3, [r7, #7]
			 //Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false);
   86b4c:	2100      	movs	r1, #0
   86b4e:	2029      	movs	r0, #41	; 0x29
   86b50:	4b21      	ldr	r3, [pc, #132]	; (86bd8 <Cl_Dlsis_BypassDialysis+0x14c>)
   86b52:	4798      	blx	r3
   86b54:	4603      	mov	r3, r0
   86b56:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   86b58:	2100      	movs	r1, #0
   86b5a:	202b      	movs	r0, #43	; 0x2b
   86b5c:	4b1e      	ldr	r3, [pc, #120]	; (86bd8 <Cl_Dlsis_BypassDialysis+0x14c>)
   86b5e:	4798      	blx	r3
   86b60:	4603      	mov	r3, r0
   86b62:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   86b64:	2100      	movs	r1, #0
   86b66:	2021      	movs	r0, #33	; 0x21
   86b68:	4b1b      	ldr	r3, [pc, #108]	; (86bd8 <Cl_Dlsis_BypassDialysis+0x14c>)
   86b6a:	4798      	blx	r3
   86b6c:	4603      	mov	r3, r0
   86b6e:	71fb      	strb	r3, [r7, #7]
			 //Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLD_EVENT,true );
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   86b70:	2100      	movs	r1, #0
   86b72:	2013      	movs	r0, #19
   86b74:	4b18      	ldr	r3, [pc, #96]	; (86bd8 <Cl_Dlsis_BypassDialysis+0x14c>)
   86b76:	4798      	blx	r3
   86b78:	4603      	mov	r3, r0
   86b7a:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   86b7c:	2100      	movs	r1, #0
   86b7e:	2014      	movs	r0, #20
   86b80:	4b15      	ldr	r3, [pc, #84]	; (86bd8 <Cl_Dlsis_BypassDialysis+0x14c>)
   86b82:	4798      	blx	r3
   86b84:	4603      	mov	r3, r0
   86b86:	71fb      	strb	r3, [r7, #7]
			 
			cl_dlsis_state = CL_DLSIS_STATE_BYPASS;
   86b88:	4b14      	ldr	r3, [pc, #80]	; (86bdc <Cl_Dlsis_BypassDialysis+0x150>)
   86b8a:	2208      	movs	r2, #8
   86b8c:	701a      	strb	r2, [r3, #0]
						
			Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_BYPASS_ON,&data,0);
   86b8e:	1dbb      	adds	r3, r7, #6
   86b90:	2200      	movs	r2, #0
   86b92:	4619      	mov	r1, r3
   86b94:	2041      	movs	r0, #65	; 0x41
   86b96:	4b12      	ldr	r3, [pc, #72]	; (86be0 <Cl_Dlsis_BypassDialysis+0x154>)
   86b98:	4798      	blx	r3
   86b9a:	4603      	mov	r3, r0
   86b9c:	71fb      	strb	r3, [r7, #7]
	
			Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PAUSED,&data,0);
   86b9e:	1dbb      	adds	r3, r7, #6
   86ba0:	2200      	movs	r2, #0
   86ba2:	4619      	mov	r1, r3
   86ba4:	2040      	movs	r0, #64	; 0x40
   86ba6:	4b0e      	ldr	r3, [pc, #56]	; (86be0 <Cl_Dlsis_BypassDialysis+0x154>)
   86ba8:	4798      	blx	r3
   86baa:	4603      	mov	r3, r0
   86bac:	71fb      	strb	r3, [r7, #7]
return CL_OK;	
   86bae:	2300      	movs	r3, #0
}
   86bb0:	4618      	mov	r0, r3
   86bb2:	3708      	adds	r7, #8
   86bb4:	46bd      	mov	sp, r7
   86bb6:	bd80      	pop	{r7, pc}
   86bb8:	00097b59 	.word	0x00097b59
   86bbc:	00097949 	.word	0x00097949
   86bc0:	20072d84 	.word	0x20072d84
   86bc4:	200720d4 	.word	0x200720d4
   86bc8:	200720dc 	.word	0x200720dc
   86bcc:	200720d8 	.word	0x200720d8
   86bd0:	200720e0 	.word	0x200720e0
   86bd4:	200720e4 	.word	0x200720e4
   86bd8:	00082efd 	.word	0x00082efd
   86bdc:	200720d0 	.word	0x200720d0
   86be0:	00099729 	.word	0x00099729

00086be4 <Cl_Dlsis_BypassOff>:

Cl_ReturnCodeType Cl_Dlsis_BypassOff(void)
{
   86be4:	b580      	push	{r7, lr}
   86be6:	b082      	sub	sp, #8
   86be8:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   86bea:	2300      	movs	r3, #0
   86bec:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode = sv_cntrl_disable_bypass();
   86bee:	4b4f      	ldr	r3, [pc, #316]	; (86d2c <Cl_Dlsis_BypassOff+0x148>)
   86bf0:	4798      	blx	r3
   86bf2:	4603      	mov	r3, r0
   86bf4:	71fb      	strb	r3, [r7, #7]
	
	 DlsisTime.Cl_dlsissecondscounter = Cl_dlsissecondscounter_1 ;
   86bf6:	4b4e      	ldr	r3, [pc, #312]	; (86d30 <Cl_Dlsis_BypassOff+0x14c>)
   86bf8:	681b      	ldr	r3, [r3, #0]
   86bfa:	b2da      	uxtb	r2, r3
   86bfc:	4b4d      	ldr	r3, [pc, #308]	; (86d34 <Cl_Dlsis_BypassOff+0x150>)
   86bfe:	701a      	strb	r2, [r3, #0]
	 DlsisTime.Cl_dlsishourscounter = Cl_dlsishourscounter_1 ;
   86c00:	4b4d      	ldr	r3, [pc, #308]	; (86d38 <Cl_Dlsis_BypassOff+0x154>)
   86c02:	681b      	ldr	r3, [r3, #0]
   86c04:	b2da      	uxtb	r2, r3
   86c06:	4b4b      	ldr	r3, [pc, #300]	; (86d34 <Cl_Dlsis_BypassOff+0x150>)
   86c08:	709a      	strb	r2, [r3, #2]
	 DlsisTime.Cl_dlsisMinutescounter = Cl_dlsisMinutescounter_1 ;
   86c0a:	4b4c      	ldr	r3, [pc, #304]	; (86d3c <Cl_Dlsis_BypassOff+0x158>)
   86c0c:	681b      	ldr	r3, [r3, #0]
   86c0e:	b2da      	uxtb	r2, r3
   86c10:	4b48      	ldr	r3, [pc, #288]	; (86d34 <Cl_Dlsis_BypassOff+0x150>)
   86c12:	705a      	strb	r2, [r3, #1]
	DlsisTime.Cl_dlsisTotalMinutescounter =  Cl_dlsisTotalMinutescounter_1;
   86c14:	4b4a      	ldr	r3, [pc, #296]	; (86d40 <Cl_Dlsis_BypassOff+0x15c>)
   86c16:	681b      	ldr	r3, [r3, #0]
   86c18:	b2da      	uxtb	r2, r3
   86c1a:	4b46      	ldr	r3, [pc, #280]	; (86d34 <Cl_Dlsis_BypassOff+0x150>)
   86c1c:	70da      	strb	r2, [r3, #3]
	  DlsisTime.Cl_dlsisTotalhourscounter = Cl_dlsisTotalhourscounter_1 ;
   86c1e:	4b49      	ldr	r3, [pc, #292]	; (86d44 <Cl_Dlsis_BypassOff+0x160>)
   86c20:	681b      	ldr	r3, [r3, #0]
   86c22:	b2da      	uxtb	r2, r3
   86c24:	4b43      	ldr	r3, [pc, #268]	; (86d34 <Cl_Dlsis_BypassOff+0x150>)
   86c26:	711a      	strb	r2, [r3, #4]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   86c28:	2101      	movs	r1, #1
   86c2a:	2001      	movs	r0, #1
   86c2c:	4b46      	ldr	r3, [pc, #280]	; (86d48 <Cl_Dlsis_BypassOff+0x164>)
   86c2e:	4798      	blx	r3
   86c30:	4603      	mov	r3, r0
   86c32:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   86c34:	2101      	movs	r1, #1
   86c36:	203d      	movs	r0, #61	; 0x3d
   86c38:	4b43      	ldr	r3, [pc, #268]	; (86d48 <Cl_Dlsis_BypassOff+0x164>)
   86c3a:	4798      	blx	r3
   86c3c:	4603      	mov	r3, r0
   86c3e:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   86c40:	2101      	movs	r1, #1
   86c42:	203e      	movs	r0, #62	; 0x3e
   86c44:	4b40      	ldr	r3, [pc, #256]	; (86d48 <Cl_Dlsis_BypassOff+0x164>)
   86c46:	4798      	blx	r3
   86c48:	4603      	mov	r3, r0
   86c4a:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   86c4c:	2101      	movs	r1, #1
   86c4e:	2005      	movs	r0, #5
   86c50:	4b3d      	ldr	r3, [pc, #244]	; (86d48 <Cl_Dlsis_BypassOff+0x164>)
   86c52:	4798      	blx	r3
   86c54:	4603      	mov	r3, r0
   86c56:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   86c58:	2101      	movs	r1, #1
   86c5a:	2006      	movs	r0, #6
   86c5c:	4b3a      	ldr	r3, [pc, #232]	; (86d48 <Cl_Dlsis_BypassOff+0x164>)
   86c5e:	4798      	blx	r3
   86c60:	4603      	mov	r3, r0
   86c62:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   86c64:	2100      	movs	r1, #0
   86c66:	2003      	movs	r0, #3
   86c68:	4b37      	ldr	r3, [pc, #220]	; (86d48 <Cl_Dlsis_BypassOff+0x164>)
   86c6a:	4798      	blx	r3
   86c6c:	4603      	mov	r3, r0
   86c6e:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   86c70:	2100      	movs	r1, #0
   86c72:	2004      	movs	r0, #4
   86c74:	4b34      	ldr	r3, [pc, #208]	; (86d48 <Cl_Dlsis_BypassOff+0x164>)
   86c76:	4798      	blx	r3
   86c78:	4603      	mov	r3, r0
   86c7a:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   86c7c:	2100      	movs	r1, #0
   86c7e:	2007      	movs	r0, #7
   86c80:	4b31      	ldr	r3, [pc, #196]	; (86d48 <Cl_Dlsis_BypassOff+0x164>)
   86c82:	4798      	blx	r3
   86c84:	4603      	mov	r3, r0
   86c86:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   86c88:	2100      	movs	r1, #0
   86c8a:	2008      	movs	r0, #8
   86c8c:	4b2e      	ldr	r3, [pc, #184]	; (86d48 <Cl_Dlsis_BypassOff+0x164>)
   86c8e:	4798      	blx	r3
   86c90:	4603      	mov	r3, r0
   86c92:	71fb      	strb	r3, [r7, #7]
	  //Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true );
   86c94:	2101      	movs	r1, #1
   86c96:	202a      	movs	r0, #42	; 0x2a
   86c98:	4b2b      	ldr	r3, [pc, #172]	; (86d48 <Cl_Dlsis_BypassOff+0x164>)
   86c9a:	4798      	blx	r3
   86c9c:	4603      	mov	r3, r0
   86c9e:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   86ca0:	2101      	movs	r1, #1
   86ca2:	202c      	movs	r0, #44	; 0x2c
   86ca4:	4b28      	ldr	r3, [pc, #160]	; (86d48 <Cl_Dlsis_BypassOff+0x164>)
   86ca6:	4798      	blx	r3
   86ca8:	4603      	mov	r3, r0
   86caa:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   86cac:	2100      	movs	r1, #0
   86cae:	2029      	movs	r0, #41	; 0x29
   86cb0:	4b25      	ldr	r3, [pc, #148]	; (86d48 <Cl_Dlsis_BypassOff+0x164>)
   86cb2:	4798      	blx	r3
   86cb4:	4603      	mov	r3, r0
   86cb6:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   86cb8:	2100      	movs	r1, #0
   86cba:	202b      	movs	r0, #43	; 0x2b
   86cbc:	4b22      	ldr	r3, [pc, #136]	; (86d48 <Cl_Dlsis_BypassOff+0x164>)
   86cbe:	4798      	blx	r3
   86cc0:	4603      	mov	r3, r0
   86cc2:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   86cc4:	2100      	movs	r1, #0
   86cc6:	2021      	movs	r0, #33	; 0x21
   86cc8:	4b1f      	ldr	r3, [pc, #124]	; (86d48 <Cl_Dlsis_BypassOff+0x164>)
   86cca:	4798      	blx	r3
   86ccc:	4603      	mov	r3, r0
   86cce:	71fb      	strb	r3, [r7, #7]
	  //Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLD_EVENT,true );
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   86cd0:	2100      	movs	r1, #0
   86cd2:	2013      	movs	r0, #19
   86cd4:	4b1c      	ldr	r3, [pc, #112]	; (86d48 <Cl_Dlsis_BypassOff+0x164>)
   86cd6:	4798      	blx	r3
   86cd8:	4603      	mov	r3, r0
   86cda:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   86cdc:	2100      	movs	r1, #0
   86cde:	2014      	movs	r0, #20
   86ce0:	4b19      	ldr	r3, [pc, #100]	; (86d48 <Cl_Dlsis_BypassOff+0x164>)
   86ce2:	4798      	blx	r3
   86ce4:	4603      	mov	r3, r0
   86ce6:	71fb      	strb	r3, [r7, #7]
	  
	Cl_dlsisretcode =  sv_cntrl_activatepump(UFPUMP);
   86ce8:	2004      	movs	r0, #4
   86cea:	4b18      	ldr	r3, [pc, #96]	; (86d4c <Cl_Dlsis_BypassOff+0x168>)
   86cec:	4798      	blx	r3
   86cee:	4603      	mov	r3, r0
   86cf0:	71fb      	strb	r3, [r7, #7]
	cl_dlsis_state = CL_DLSIS_STATE_DIALYSIS;
   86cf2:	4b17      	ldr	r3, [pc, #92]	; (86d50 <Cl_Dlsis_BypassOff+0x16c>)
   86cf4:	2204      	movs	r2, #4
   86cf6:	701a      	strb	r2, [r3, #0]
	Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_BYPASS_OFF,&data,0);
   86cf8:	1dbb      	adds	r3, r7, #6
   86cfa:	2200      	movs	r2, #0
   86cfc:	4619      	mov	r1, r3
   86cfe:	2042      	movs	r0, #66	; 0x42
   86d00:	4b14      	ldr	r3, [pc, #80]	; (86d54 <Cl_Dlsis_BypassOff+0x170>)
   86d02:	4798      	blx	r3
   86d04:	4603      	mov	r3, r0
   86d06:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_RESUMED,&data,0);
   86d08:	1dbb      	adds	r3, r7, #6
   86d0a:	2200      	movs	r2, #0
   86d0c:	4619      	mov	r1, r3
   86d0e:	2043      	movs	r0, #67	; 0x43
   86d10:	4b10      	ldr	r3, [pc, #64]	; (86d54 <Cl_Dlsis_BypassOff+0x170>)
   86d12:	4798      	blx	r3
   86d14:	4603      	mov	r3, r0
   86d16:	71fb      	strb	r3, [r7, #7]
		Cl_Dlsis_UpdateTimeInfo();
   86d18:	4b0f      	ldr	r3, [pc, #60]	; (86d58 <Cl_Dlsis_BypassOff+0x174>)
   86d1a:	4798      	blx	r3
	bypass_flag = 1;
   86d1c:	4b0f      	ldr	r3, [pc, #60]	; (86d5c <Cl_Dlsis_BypassOff+0x178>)
   86d1e:	2201      	movs	r2, #1
   86d20:	701a      	strb	r2, [r3, #0]
return CL_OK;
   86d22:	2300      	movs	r3, #0
}
   86d24:	4618      	mov	r0, r3
   86d26:	3708      	adds	r7, #8
   86d28:	46bd      	mov	sp, r7
   86d2a:	bd80      	pop	{r7, pc}
   86d2c:	00097b81 	.word	0x00097b81
   86d30:	200720d4 	.word	0x200720d4
   86d34:	20072d84 	.word	0x20072d84
   86d38:	200720dc 	.word	0x200720dc
   86d3c:	200720d8 	.word	0x200720d8
   86d40:	200720e0 	.word	0x200720e0
   86d44:	200720e4 	.word	0x200720e4
   86d48:	00082efd 	.word	0x00082efd
   86d4c:	0009790d 	.word	0x0009790d
   86d50:	200720d0 	.word	0x200720d0
   86d54:	00099729 	.word	0x00099729
   86d58:	00086491 	.word	0x00086491
   86d5c:	200720ee 	.word	0x200720ee

00086d60 <Cl_Dlsis_PauseDialysis>:


Cl_ReturnCodeType Cl_Dlsis_PauseDialysis(void)
{
   86d60:	b580      	push	{r7, lr}
   86d62:	b082      	sub	sp, #8
   86d64:	af00      	add	r7, sp, #0
		Cl_Uint8Type data;
		Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   86d66:	2300      	movs	r3, #0
   86d68:	71fb      	strb	r3, [r7, #7]
		
		if(!(cl_dlsis_state == CL_DLSIS_STATE_IDLE ) )
   86d6a:	4b0f      	ldr	r3, [pc, #60]	; (86da8 <Cl_Dlsis_PauseDialysis+0x48>)
   86d6c:	781b      	ldrb	r3, [r3, #0]
   86d6e:	2b00      	cmp	r3, #0
   86d70:	d015      	beq.n	86d9e <Cl_Dlsis_PauseDialysis+0x3e>
		
		switch (cl_dlsis_state)
   86d72:	4b0d      	ldr	r3, [pc, #52]	; (86da8 <Cl_Dlsis_PauseDialysis+0x48>)
   86d74:	781b      	ldrb	r3, [r3, #0]
   86d76:	3b02      	subs	r3, #2
   86d78:	2b03      	cmp	r3, #3
   86d7a:	d80f      	bhi.n	86d9c <Cl_Dlsis_PauseDialysis+0x3c>
			case CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT:
			case CL_DLSIS_STATE_DIALYSIS:
			case CL_DLSIS_STATE_UF_ACTIVATION:
			
	
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   86d7c:	4b0b      	ldr	r3, [pc, #44]	; (86dac <Cl_Dlsis_PauseDialysis+0x4c>)
   86d7e:	4798      	blx	r3
   86d80:	4603      	mov	r3, r0
   86d82:	71fb      	strb	r3, [r7, #7]
					//	Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
					//	Cl_dlsisretcode = sv_cntrl_poweroffheater();
					//	Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_OFF);
					//	cl_bp_controller(CL_BP_EVENT_STOP,0);
					//	Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
						cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   86d84:	4b08      	ldr	r3, [pc, #32]	; (86da8 <Cl_Dlsis_PauseDialysis+0x48>)
   86d86:	2207      	movs	r2, #7
   86d88:	701a      	strb	r2, [r3, #0]
						Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PAUSED,&data,0);
   86d8a:	1dbb      	adds	r3, r7, #6
   86d8c:	2200      	movs	r2, #0
   86d8e:	4619      	mov	r1, r3
   86d90:	2040      	movs	r0, #64	; 0x40
   86d92:	4b07      	ldr	r3, [pc, #28]	; (86db0 <Cl_Dlsis_PauseDialysis+0x50>)
   86d94:	4798      	blx	r3
   86d96:	4603      	mov	r3, r0
   86d98:	71fb      	strb	r3, [r7, #7]
			
			break;
   86d9a:	e000      	b.n	86d9e <Cl_Dlsis_PauseDialysis+0x3e>
			default:break;
   86d9c:	bf00      	nop
		}
return CL_OK;
   86d9e:	2300      	movs	r3, #0
	
}
   86da0:	4618      	mov	r0, r3
   86da2:	3708      	adds	r7, #8
   86da4:	46bd      	mov	sp, r7
   86da6:	bd80      	pop	{r7, pc}
   86da8:	200720d0 	.word	0x200720d0
   86dac:	00097b59 	.word	0x00097b59
   86db0:	00099729 	.word	0x00099729

00086db4 <Cl_Dlsis_ProcessAlarms>:
Cl_ReturnCodeType Cl_Dlsis_ProcessAlarms( )
{
   86db4:	b580      	push	{r7, lr}
   86db6:	b082      	sub	sp, #8
   86db8:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   86dba:	2300      	movs	r3, #0
   86dbc:	71fb      	strb	r3, [r7, #7]
		ClDlsisAlarmIdType  ClDlsisAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86dbe:	234d      	movs	r3, #77	; 0x4d
   86dc0:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_alarmid;
		
	   Cl_dlsisretcode = Cl_Dlsis_UpdateAlarmTable(&ClDlsisAlarmId);
   86dc2:	1d7b      	adds	r3, r7, #5
   86dc4:	4618      	mov	r0, r3
   86dc6:	4b04      	ldr	r3, [pc, #16]	; (86dd8 <Cl_Dlsis_ProcessAlarms+0x24>)
   86dc8:	4798      	blx	r3
   86dca:	4603      	mov	r3, r0
   86dcc:	71fb      	strb	r3, [r7, #7]
	//   	Cl_rinseretcode =	Cl_Alarm_GetLastAlarm(&cl_rinsealarmid);
	//   	data = (Cl_Uint8Type)cl_rinsealarmid;
	//   	command = CON_TX_COMMAND_ALARM;
	//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
		   
		   return (Cl_dlsisretcode );
   86dce:	79fb      	ldrb	r3, [r7, #7]
	   	
}
   86dd0:	4618      	mov	r0, r3
   86dd2:	3708      	adds	r7, #8
   86dd4:	46bd      	mov	sp, r7
   86dd6:	bd80      	pop	{r7, pc}
   86dd8:	00086595 	.word	0x00086595

00086ddc <Cl_DlsisFillingFlowOff>:
	return Cl_RetVal;
	
}

Cl_ReturnCodeType  Cl_DlsisFillingFlowOff(void )
{
   86ddc:	b580      	push	{r7, lr}
   86dde:	b082      	sub	sp, #8
   86de0:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   86de2:	2300      	movs	r3, #0
   86de4:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_deactivate_valve(VALVE_ID1);
   86de6:	2001      	movs	r0, #1
   86de8:	4b03      	ldr	r3, [pc, #12]	; (86df8 <Cl_DlsisFillingFlowOff+0x1c>)
   86dea:	4798      	blx	r3
	//cl_gfillinprogress = false;
	return Cl_RetVal;
   86dec:	79fb      	ldrb	r3, [r7, #7]
	
}
   86dee:	4618      	mov	r0, r3
   86df0:	3708      	adds	r7, #8
   86df2:	46bd      	mov	sp, r7
   86df4:	bd80      	pop	{r7, pc}
   86df6:	bf00      	nop
   86df8:	000979cd 	.word	0x000979cd

00086dfc <Cl_Dlsis_ResetAlertsforReassertion>:
Cl_ReturnCodeType Cl_Dlsis_ResetAlertsforReassertion(void )
{
   86dfc:	b580      	push	{r7, lr}
   86dfe:	b082      	sub	sp, #8
   86e00:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   86e02:	2300      	movs	r3, #0
   86e04:	71fb      	strb	r3, [r7, #7]
	ClDlsisAlarmIdType ClDlsisAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86e06:	234d      	movs	r3, #77	; 0x4d
   86e08:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dlsisalarmid;
	
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_HOLDER1STATUS_CLOSE].IsRaised = false;
   86e0a:	4b55      	ldr	r3, [pc, #340]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86e0c:	2200      	movs	r2, #0
   86e0e:	70da      	strb	r2, [r3, #3]
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_HOLDER2STATUS_CLOSE].IsRaised = false;
   86e10:	4b53      	ldr	r3, [pc, #332]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86e12:	2200      	movs	r2, #0
   86e14:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   86e16:	2005      	movs	r0, #5
   86e18:	4b52      	ldr	r3, [pc, #328]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86e1a:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   86e1c:	2006      	movs	r0, #6
   86e1e:	4b51      	ldr	r3, [pc, #324]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86e20:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   86e22:	4b4f      	ldr	r3, [pc, #316]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86e24:	2200      	movs	r2, #0
   86e26:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   86e2a:	2001      	movs	r0, #1
   86e2c:	4b4d      	ldr	r3, [pc, #308]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86e2e:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_HIGH);
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   86e30:	4b4b      	ldr	r3, [pc, #300]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86e32:	2200      	movs	r2, #0
   86e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   86e38:	4b49      	ldr	r3, [pc, #292]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86e3a:	2200      	movs	r2, #0
   86e3c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   86e40:	2015      	movs	r0, #21
   86e42:	4b48      	ldr	r3, [pc, #288]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86e44:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   86e46:	2016      	movs	r0, #22
   86e48:	4b46      	ldr	r3, [pc, #280]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86e4a:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   86e4c:	4b44      	ldr	r3, [pc, #272]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86e4e:	2200      	movs	r2, #0
   86e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   86e54:	4b42      	ldr	r3, [pc, #264]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86e56:	2200      	movs	r2, #0
   86e58:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   86e5c:	2017      	movs	r0, #23
   86e5e:	4b41      	ldr	r3, [pc, #260]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86e60:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   86e62:	2018      	movs	r0, #24
   86e64:	4b3f      	ldr	r3, [pc, #252]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86e66:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   86e68:	4b3d      	ldr	r3, [pc, #244]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86e6a:	2200      	movs	r2, #0
   86e6c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   86e70:	4b3b      	ldr	r3, [pc, #236]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86e72:	2200      	movs	r2, #0
   86e74:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   86e78:	2027      	movs	r0, #39	; 0x27
   86e7a:	4b3a      	ldr	r3, [pc, #232]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86e7c:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   86e7e:	2028      	movs	r0, #40	; 0x28
   86e80:	4b38      	ldr	r3, [pc, #224]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86e82:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_BDSTATUS].IsRaised = false;
   86e84:	4b36      	ldr	r3, [pc, #216]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86e86:	2200      	movs	r2, #0
   86e88:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_AlarmResetAlarm(BD_EVENT);
   86e8c:	2021      	movs	r0, #33	; 0x21
   86e8e:	4b35      	ldr	r3, [pc, #212]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86e90:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_ABDSTATUS].IsRaised = false;
   86e92:	4b33      	ldr	r3, [pc, #204]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86e94:	2200      	movs	r2, #0
   86e96:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(ABD_EVENT);
   86e9a:	2020      	movs	r0, #32
   86e9c:	4b31      	ldr	r3, [pc, #196]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86e9e:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_BLDSTATUS].IsRaised = false;
   86ea0:	4b2f      	ldr	r3, [pc, #188]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86ea2:	2200      	movs	r2, #0
   86ea4:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_AlarmResetAlarm(BLD_EVENT);
   86ea8:	2022      	movs	r0, #34	; 0x22
   86eaa:	4b2e      	ldr	r3, [pc, #184]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86eac:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_APTSTATUS_HIGH].IsRaised = false;
   86eae:	4b2c      	ldr	r3, [pc, #176]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86eb0:	2200      	movs	r2, #0
   86eb2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_DlsisAlarmTable[CL_DLSIS_APTSTATUS_LOW].IsRaised = false;
   86eb6:	4b2a      	ldr	r3, [pc, #168]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86eb8:	2200      	movs	r2, #0
   86eba:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_AlarmResetAlarm(APTSTATUS_HIGH);
   86ebe:	2024      	movs	r0, #36	; 0x24
   86ec0:	4b28      	ldr	r3, [pc, #160]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86ec2:	4798      	blx	r3
	Cl_AlarmResetAlarm(APTSTATUS_LOW);
   86ec4:	2023      	movs	r0, #35	; 0x23
   86ec6:	4b27      	ldr	r3, [pc, #156]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86ec8:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_VPTSTATUS_HIGH].IsRaised = false;
   86eca:	4b25      	ldr	r3, [pc, #148]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86ecc:	2200      	movs	r2, #0
   86ece:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_DlsisAlarmTable[CL_DLSIS_VPTSTATUS_LOW].IsRaised = false;
   86ed2:	4b23      	ldr	r3, [pc, #140]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86ed4:	2200      	movs	r2, #0
   86ed6:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_AlarmResetAlarm(VPTSTATUS_HIGH);
   86eda:	2026      	movs	r0, #38	; 0x26
   86edc:	4b21      	ldr	r3, [pc, #132]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86ede:	4798      	blx	r3
	Cl_AlarmResetAlarm(VPTSTATUS_LOW);
   86ee0:	2025      	movs	r0, #37	; 0x25
   86ee2:	4b20      	ldr	r3, [pc, #128]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86ee4:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_COND_STATUS_LOW].IsRaised = false;
   86ee6:	4b1e      	ldr	r3, [pc, #120]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86ee8:	2200      	movs	r2, #0
   86eea:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_DlsisAlarmTable[CL_DLSIS_COND_STATUS_HIGH].IsRaised = false;
   86eee:	4b1c      	ldr	r3, [pc, #112]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86ef0:	2200      	movs	r2, #0
   86ef2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   86ef6:	2007      	movs	r0, #7
   86ef8:	4b1a      	ldr	r3, [pc, #104]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86efa:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   86efc:	2008      	movs	r0, #8
   86efe:	4b19      	ldr	r3, [pc, #100]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86f00:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   86f02:	4b17      	ldr	r3, [pc, #92]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f04:	2200      	movs	r2, #0
   86f06:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   86f0a:	4b15      	ldr	r3, [pc, #84]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f0c:	2200      	movs	r2, #0
   86f0e:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   86f12:	2013      	movs	r0, #19
   86f14:	4b13      	ldr	r3, [pc, #76]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86f16:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   86f18:	2014      	movs	r0, #20
   86f1a:	4b12      	ldr	r3, [pc, #72]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86f1c:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   86f1e:	4b10      	ldr	r3, [pc, #64]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f20:	2200      	movs	r2, #0
   86f22:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   86f26:	4b0e      	ldr	r3, [pc, #56]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f28:	2200      	movs	r2, #0
   86f2a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   86f2e:	2011      	movs	r0, #17
   86f30:	4b0c      	ldr	r3, [pc, #48]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86f32:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   86f34:	2012      	movs	r0, #18
   86f36:	4b0b      	ldr	r3, [pc, #44]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86f38:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   86f3a:	4b09      	ldr	r3, [pc, #36]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f3c:	2200      	movs	r2, #0
   86f3e:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   86f42:	4b07      	ldr	r3, [pc, #28]	; (86f60 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f44:	2200      	movs	r2, #0
   86f46:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   86f4a:	200f      	movs	r0, #15
   86f4c:	4b05      	ldr	r3, [pc, #20]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86f4e:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   86f50:	2010      	movs	r0, #16
   86f52:	4b04      	ldr	r3, [pc, #16]	; (86f64 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86f54:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;*/
	
	
	
	return (Cl_dlsisretcode);
   86f56:	79fb      	ldrb	r3, [r7, #7]
}
   86f58:	4618      	mov	r0, r3
   86f5a:	3708      	adds	r7, #8
   86f5c:	46bd      	mov	sp, r7
   86f5e:	bd80      	pop	{r7, pc}
   86f60:	2007039c 	.word	0x2007039c
   86f64:	00082ff1 	.word	0x00082ff1

00086f68 <Cl_Dlsis_SenddlsisData>:

Cl_ReturnCodeType Cl_Dlsis_SenddlsisData(void)
{
   86f68:	b5f0      	push	{r4, r5, r6, r7, lr}
   86f6a:	b099      	sub	sp, #100	; 0x64
   86f6c:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_Uint8Type systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   86f6e:	f107 0310 	add.w	r3, r7, #16
   86f72:	2228      	movs	r2, #40	; 0x28
   86f74:	2100      	movs	r1, #0
   86f76:	4618      	mov	r0, r3
   86f78:	4bab      	ldr	r3, [pc, #684]	; (87228 <Cl_Dlsis_SenddlsisData+0x2c0>)
   86f7a:	4798      	blx	r3
	cl_DlsisDatatype tempdata;
	Cl_Uint16Type temp=0, temp1=0;
   86f7c:	2300      	movs	r3, #0
   86f7e:	80fb      	strh	r3, [r7, #6]
   86f80:	2300      	movs	r3, #0
   86f82:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	static float avgtmp3=0,apt=0,vpt=0,ps1=0,ps2=0;
	static Cl_Uint32Type timecount = 0;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   86f86:	2300      	movs	r3, #0
   86f88:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	Cl_Uint8Type count = 0;
   86f8c:	2300      	movs	r3, #0
   86f8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86f92:	234d      	movs	r3, #77	; 0x4d
   86f94:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Cl_Uint16Type sensordatamillivolts;
	command = CON_TX_COMMAND_CL_SYS_STATE_DATA ;
   86f98:	232a      	movs	r3, #42	; 0x2a
   86f9a:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	systemdataarray[0] = DIALYSIS_DATA;
   86f9e:	2305      	movs	r3, #5
   86fa0:	743b      	strb	r3, [r7, #16]
	count++;
   86fa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   86fa6:	3301      	adds	r3, #1
   86fa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	APT,
	VPT,
	TMP,
	UF_REMOVED
	*/
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   86fac:	1dbb      	adds	r3, r7, #6
   86fae:	4619      	mov	r1, r3
   86fb0:	2014      	movs	r0, #20
   86fb2:	4b9e      	ldr	r3, [pc, #632]	; (8722c <Cl_Dlsis_SenddlsisData+0x2c4>)
   86fb4:	4798      	blx	r3
		{
							float sensordata,ftemp1,temp1;
							sensordata = temp;
   86fb6:	88fa      	ldrh	r2, [r7, #6]
   86fb8:	4b9d      	ldr	r3, [pc, #628]	; (87230 <Cl_Dlsis_SenddlsisData+0x2c8>)
   86fba:	4610      	mov	r0, r2
   86fbc:	4798      	blx	r3
   86fbe:	4603      	mov	r3, r0
   86fc0:	657b      	str	r3, [r7, #84]	; 0x54
							uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
   86fc2:	4b9c      	ldr	r3, [pc, #624]	; (87234 <Cl_Dlsis_SenddlsisData+0x2cc>)
   86fc4:	499c      	ldr	r1, [pc, #624]	; (87238 <Cl_Dlsis_SenddlsisData+0x2d0>)
   86fc6:	6d78      	ldr	r0, [r7, #84]	; 0x54
   86fc8:	4798      	blx	r3
   86fca:	4603      	mov	r3, r0
   86fcc:	461a      	mov	r2, r3
   86fce:	4b9b      	ldr	r3, [pc, #620]	; (8723c <Cl_Dlsis_SenddlsisData+0x2d4>)
   86fd0:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
   86fd4:	4610      	mov	r0, r2
   86fd6:	4798      	blx	r3
   86fd8:	4603      	mov	r3, r0
   86fda:	461a      	mov	r2, r3
   86fdc:	4b98      	ldr	r3, [pc, #608]	; (87240 <Cl_Dlsis_SenddlsisData+0x2d8>)
   86fde:	4610      	mov	r0, r2
   86fe0:	4798      	blx	r3
   86fe2:	4603      	mov	r3, r0
   86fe4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
							res_temp_lookuptable(cal_data);
   86fe8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
   86fec:	4618      	mov	r0, r3
   86fee:	4b95      	ldr	r3, [pc, #596]	; (87244 <Cl_Dlsis_SenddlsisData+0x2dc>)
   86ff0:	4798      	blx	r3
							//	tmp3 =	(tmp3*5 + res_temp_value)/6;
							temp1 = res_temp_value/10;
   86ff2:	4b95      	ldr	r3, [pc, #596]	; (87248 <Cl_Dlsis_SenddlsisData+0x2e0>)
   86ff4:	681a      	ldr	r2, [r3, #0]
   86ff6:	4b91      	ldr	r3, [pc, #580]	; (8723c <Cl_Dlsis_SenddlsisData+0x2d4>)
   86ff8:	4994      	ldr	r1, [pc, #592]	; (8724c <Cl_Dlsis_SenddlsisData+0x2e4>)
   86ffa:	4610      	mov	r0, r2
   86ffc:	4798      	blx	r3
   86ffe:	4603      	mov	r3, r0
   87000:	64fb      	str	r3, [r7, #76]	; 0x4c
							temp1 = temp1 - 3.1+1.4;                                  // removed offset on 02.07.17
   87002:	4b93      	ldr	r3, [pc, #588]	; (87250 <Cl_Dlsis_SenddlsisData+0x2e8>)
   87004:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   87006:	4798      	blx	r3
   87008:	4c92      	ldr	r4, [pc, #584]	; (87254 <Cl_Dlsis_SenddlsisData+0x2ec>)
   8700a:	a377      	add	r3, pc, #476	; (adr r3, 871e8 <Cl_Dlsis_SenddlsisData+0x280>)
   8700c:	e9d3 2300 	ldrd	r2, r3, [r3]
   87010:	47a0      	blx	r4
   87012:	4603      	mov	r3, r0
   87014:	460c      	mov	r4, r1
   87016:	4618      	mov	r0, r3
   87018:	4621      	mov	r1, r4
   8701a:	4c8f      	ldr	r4, [pc, #572]	; (87258 <Cl_Dlsis_SenddlsisData+0x2f0>)
   8701c:	a374      	add	r3, pc, #464	; (adr r3, 871f0 <Cl_Dlsis_SenddlsisData+0x288>)
   8701e:	e9d3 2300 	ldrd	r2, r3, [r3]
   87022:	47a0      	blx	r4
   87024:	4603      	mov	r3, r0
   87026:	460c      	mov	r4, r1
   87028:	4619      	mov	r1, r3
   8702a:	4622      	mov	r2, r4
   8702c:	4b8b      	ldr	r3, [pc, #556]	; (8725c <Cl_Dlsis_SenddlsisData+0x2f4>)
   8702e:	4608      	mov	r0, r1
   87030:	4611      	mov	r1, r2
   87032:	4798      	blx	r3
   87034:	4603      	mov	r3, r0
   87036:	64fb      	str	r3, [r7, #76]	; 0x4c
							avgtmp3 =(avgtmp3*5 + temp1)/6;
   87038:	4b89      	ldr	r3, [pc, #548]	; (87260 <Cl_Dlsis_SenddlsisData+0x2f8>)
   8703a:	681a      	ldr	r2, [r3, #0]
   8703c:	4b7d      	ldr	r3, [pc, #500]	; (87234 <Cl_Dlsis_SenddlsisData+0x2cc>)
   8703e:	4989      	ldr	r1, [pc, #548]	; (87264 <Cl_Dlsis_SenddlsisData+0x2fc>)
   87040:	4610      	mov	r0, r2
   87042:	4798      	blx	r3
   87044:	4603      	mov	r3, r0
   87046:	461a      	mov	r2, r3
   87048:	4b87      	ldr	r3, [pc, #540]	; (87268 <Cl_Dlsis_SenddlsisData+0x300>)
   8704a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   8704c:	4610      	mov	r0, r2
   8704e:	4798      	blx	r3
   87050:	4603      	mov	r3, r0
   87052:	461a      	mov	r2, r3
   87054:	4b79      	ldr	r3, [pc, #484]	; (8723c <Cl_Dlsis_SenddlsisData+0x2d4>)
   87056:	4985      	ldr	r1, [pc, #532]	; (8726c <Cl_Dlsis_SenddlsisData+0x304>)
   87058:	4610      	mov	r0, r2
   8705a:	4798      	blx	r3
   8705c:	4603      	mov	r3, r0
   8705e:	461a      	mov	r2, r3
   87060:	4b7f      	ldr	r3, [pc, #508]	; (87260 <Cl_Dlsis_SenddlsisData+0x2f8>)
   87062:	601a      	str	r2, [r3, #0]
							
							
		}
		
		uint16_t sensordata = 0;
   87064:	2300      	movs	r3, #0
   87066:	80bb      	strh	r3, [r7, #4]
		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   87068:	1d3b      	adds	r3, r7, #4
   8706a:	4619      	mov	r1, r3
   8706c:	2007      	movs	r0, #7
   8706e:	4b6f      	ldr	r3, [pc, #444]	; (8722c <Cl_Dlsis_SenddlsisData+0x2c4>)
   87070:	4798      	blx	r3
		{
			float cond_comp;
				float temp2;
				float	 cond1,	cond_final, cond1x100, cond_final_X10000;
				sensordata = sensordata/10;
   87072:	88bb      	ldrh	r3, [r7, #4]
   87074:	4a7e      	ldr	r2, [pc, #504]	; (87270 <Cl_Dlsis_SenddlsisData+0x308>)
   87076:	fba2 2303 	umull	r2, r3, r2, r3
   8707a:	08db      	lsrs	r3, r3, #3
   8707c:	b29b      	uxth	r3, r3
   8707e:	80bb      	strh	r3, [r7, #4]
				if (sensordata > 50)
   87080:	88bb      	ldrh	r3, [r7, #4]
   87082:	2b32      	cmp	r3, #50	; 0x32
   87084:	f240 8135 	bls.w	872f2 <Cl_Dlsis_SenddlsisData+0x38a>
				
											
											//	sensordata  = 25600;
											
											
											cond1 = sensordata/100;
   87088:	88bb      	ldrh	r3, [r7, #4]
   8708a:	4a7a      	ldr	r2, [pc, #488]	; (87274 <Cl_Dlsis_SenddlsisData+0x30c>)
   8708c:	fba2 2303 	umull	r2, r3, r2, r3
   87090:	095b      	lsrs	r3, r3, #5
   87092:	b29b      	uxth	r3, r3
   87094:	461a      	mov	r2, r3
   87096:	4b78      	ldr	r3, [pc, #480]	; (87278 <Cl_Dlsis_SenddlsisData+0x310>)
   87098:	4610      	mov	r0, r2
   8709a:	4798      	blx	r3
   8709c:	4603      	mov	r3, r0
   8709e:	64bb      	str	r3, [r7, #72]	; 0x48
											cond_final = 0.0001*cond1*cond1 + 0.032*cond1 +0.91 + 0.4;
   870a0:	4b6b      	ldr	r3, [pc, #428]	; (87250 <Cl_Dlsis_SenddlsisData+0x2e8>)
   870a2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   870a4:	4798      	blx	r3
   870a6:	4c75      	ldr	r4, [pc, #468]	; (8727c <Cl_Dlsis_SenddlsisData+0x314>)
   870a8:	a353      	add	r3, pc, #332	; (adr r3, 871f8 <Cl_Dlsis_SenddlsisData+0x290>)
   870aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   870ae:	47a0      	blx	r4
   870b0:	4603      	mov	r3, r0
   870b2:	460c      	mov	r4, r1
   870b4:	461d      	mov	r5, r3
   870b6:	4626      	mov	r6, r4
   870b8:	4b65      	ldr	r3, [pc, #404]	; (87250 <Cl_Dlsis_SenddlsisData+0x2e8>)
   870ba:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   870bc:	4798      	blx	r3
   870be:	4602      	mov	r2, r0
   870c0:	460b      	mov	r3, r1
   870c2:	4c6e      	ldr	r4, [pc, #440]	; (8727c <Cl_Dlsis_SenddlsisData+0x314>)
   870c4:	4628      	mov	r0, r5
   870c6:	4631      	mov	r1, r6
   870c8:	47a0      	blx	r4
   870ca:	4603      	mov	r3, r0
   870cc:	460c      	mov	r4, r1
   870ce:	461d      	mov	r5, r3
   870d0:	4626      	mov	r6, r4
   870d2:	4b5f      	ldr	r3, [pc, #380]	; (87250 <Cl_Dlsis_SenddlsisData+0x2e8>)
   870d4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   870d6:	4798      	blx	r3
   870d8:	4c68      	ldr	r4, [pc, #416]	; (8727c <Cl_Dlsis_SenddlsisData+0x314>)
   870da:	a349      	add	r3, pc, #292	; (adr r3, 87200 <Cl_Dlsis_SenddlsisData+0x298>)
   870dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   870e0:	47a0      	blx	r4
   870e2:	4603      	mov	r3, r0
   870e4:	460c      	mov	r4, r1
   870e6:	461a      	mov	r2, r3
   870e8:	4623      	mov	r3, r4
   870ea:	4c5b      	ldr	r4, [pc, #364]	; (87258 <Cl_Dlsis_SenddlsisData+0x2f0>)
   870ec:	4628      	mov	r0, r5
   870ee:	4631      	mov	r1, r6
   870f0:	47a0      	blx	r4
   870f2:	4603      	mov	r3, r0
   870f4:	460c      	mov	r4, r1
   870f6:	4618      	mov	r0, r3
   870f8:	4621      	mov	r1, r4
   870fa:	4c57      	ldr	r4, [pc, #348]	; (87258 <Cl_Dlsis_SenddlsisData+0x2f0>)
   870fc:	a342      	add	r3, pc, #264	; (adr r3, 87208 <Cl_Dlsis_SenddlsisData+0x2a0>)
   870fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   87102:	47a0      	blx	r4
   87104:	4603      	mov	r3, r0
   87106:	460c      	mov	r4, r1
   87108:	4618      	mov	r0, r3
   8710a:	4621      	mov	r1, r4
   8710c:	4c52      	ldr	r4, [pc, #328]	; (87258 <Cl_Dlsis_SenddlsisData+0x2f0>)
   8710e:	a340      	add	r3, pc, #256	; (adr r3, 87210 <Cl_Dlsis_SenddlsisData+0x2a8>)
   87110:	e9d3 2300 	ldrd	r2, r3, [r3]
   87114:	47a0      	blx	r4
   87116:	4603      	mov	r3, r0
   87118:	460c      	mov	r4, r1
   8711a:	4619      	mov	r1, r3
   8711c:	4622      	mov	r2, r4
   8711e:	4b4f      	ldr	r3, [pc, #316]	; (8725c <Cl_Dlsis_SenddlsisData+0x2f4>)
   87120:	4608      	mov	r0, r1
   87122:	4611      	mov	r1, r2
   87124:	4798      	blx	r3
   87126:	4603      	mov	r3, r0
   87128:	647b      	str	r3, [r7, #68]	; 0x44
											cond1x100 = cond_final*100; ;
   8712a:	4b42      	ldr	r3, [pc, #264]	; (87234 <Cl_Dlsis_SenddlsisData+0x2cc>)
   8712c:	4954      	ldr	r1, [pc, #336]	; (87280 <Cl_Dlsis_SenddlsisData+0x318>)
   8712e:	6c78      	ldr	r0, [r7, #68]	; 0x44
   87130:	4798      	blx	r3
   87132:	4603      	mov	r3, r0
   87134:	643b      	str	r3, [r7, #64]	; 0x40
											cond_final_X10000= (cond1x100/(1+(avgtmp3/10  -25.0)*0.021));
   87136:	4b46      	ldr	r3, [pc, #280]	; (87250 <Cl_Dlsis_SenddlsisData+0x2e8>)
   87138:	6c38      	ldr	r0, [r7, #64]	; 0x40
   8713a:	4798      	blx	r3
   8713c:	4605      	mov	r5, r0
   8713e:	460e      	mov	r6, r1
   87140:	4b47      	ldr	r3, [pc, #284]	; (87260 <Cl_Dlsis_SenddlsisData+0x2f8>)
   87142:	681a      	ldr	r2, [r3, #0]
   87144:	4b3d      	ldr	r3, [pc, #244]	; (8723c <Cl_Dlsis_SenddlsisData+0x2d4>)
   87146:	4941      	ldr	r1, [pc, #260]	; (8724c <Cl_Dlsis_SenddlsisData+0x2e4>)
   87148:	4610      	mov	r0, r2
   8714a:	4798      	blx	r3
   8714c:	4603      	mov	r3, r0
   8714e:	461a      	mov	r2, r3
   87150:	4b3f      	ldr	r3, [pc, #252]	; (87250 <Cl_Dlsis_SenddlsisData+0x2e8>)
   87152:	4610      	mov	r0, r2
   87154:	4798      	blx	r3
   87156:	4c3f      	ldr	r4, [pc, #252]	; (87254 <Cl_Dlsis_SenddlsisData+0x2ec>)
   87158:	f04f 0200 	mov.w	r2, #0
   8715c:	4b49      	ldr	r3, [pc, #292]	; (87284 <Cl_Dlsis_SenddlsisData+0x31c>)
   8715e:	47a0      	blx	r4
   87160:	4603      	mov	r3, r0
   87162:	460c      	mov	r4, r1
   87164:	4618      	mov	r0, r3
   87166:	4621      	mov	r1, r4
   87168:	4c44      	ldr	r4, [pc, #272]	; (8727c <Cl_Dlsis_SenddlsisData+0x314>)
   8716a:	a32b      	add	r3, pc, #172	; (adr r3, 87218 <Cl_Dlsis_SenddlsisData+0x2b0>)
   8716c:	e9d3 2300 	ldrd	r2, r3, [r3]
   87170:	47a0      	blx	r4
   87172:	4603      	mov	r3, r0
   87174:	460c      	mov	r4, r1
   87176:	4618      	mov	r0, r3
   87178:	4621      	mov	r1, r4
   8717a:	4c37      	ldr	r4, [pc, #220]	; (87258 <Cl_Dlsis_SenddlsisData+0x2f0>)
   8717c:	f04f 0200 	mov.w	r2, #0
   87180:	4b41      	ldr	r3, [pc, #260]	; (87288 <Cl_Dlsis_SenddlsisData+0x320>)
   87182:	47a0      	blx	r4
   87184:	4603      	mov	r3, r0
   87186:	460c      	mov	r4, r1
   87188:	461a      	mov	r2, r3
   8718a:	4623      	mov	r3, r4
   8718c:	4c3f      	ldr	r4, [pc, #252]	; (8728c <Cl_Dlsis_SenddlsisData+0x324>)
   8718e:	4628      	mov	r0, r5
   87190:	4631      	mov	r1, r6
   87192:	47a0      	blx	r4
   87194:	4603      	mov	r3, r0
   87196:	460c      	mov	r4, r1
   87198:	4619      	mov	r1, r3
   8719a:	4622      	mov	r2, r4
   8719c:	4b2f      	ldr	r3, [pc, #188]	; (8725c <Cl_Dlsis_SenddlsisData+0x2f4>)
   8719e:	4608      	mov	r0, r1
   871a0:	4611      	mov	r1, r2
   871a2:	4798      	blx	r3
   871a4:	4603      	mov	r3, r0
   871a6:	63fb      	str	r3, [r7, #60]	; 0x3c
											
											cond_final_X10000 =( cond_final_X10000 * 5.3 )/10;
   871a8:	4b29      	ldr	r3, [pc, #164]	; (87250 <Cl_Dlsis_SenddlsisData+0x2e8>)
   871aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   871ac:	4798      	blx	r3
   871ae:	4c33      	ldr	r4, [pc, #204]	; (8727c <Cl_Dlsis_SenddlsisData+0x314>)
   871b0:	a31b      	add	r3, pc, #108	; (adr r3, 87220 <Cl_Dlsis_SenddlsisData+0x2b8>)
   871b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   871b6:	47a0      	blx	r4
   871b8:	4603      	mov	r3, r0
   871ba:	460c      	mov	r4, r1
   871bc:	4618      	mov	r0, r3
   871be:	4621      	mov	r1, r4
   871c0:	4c32      	ldr	r4, [pc, #200]	; (8728c <Cl_Dlsis_SenddlsisData+0x324>)
   871c2:	f04f 0200 	mov.w	r2, #0
   871c6:	4b32      	ldr	r3, [pc, #200]	; (87290 <Cl_Dlsis_SenddlsisData+0x328>)
   871c8:	47a0      	blx	r4
   871ca:	4603      	mov	r3, r0
   871cc:	460c      	mov	r4, r1
   871ce:	4619      	mov	r1, r3
   871d0:	4622      	mov	r2, r4
   871d2:	4b22      	ldr	r3, [pc, #136]	; (8725c <Cl_Dlsis_SenddlsisData+0x2f4>)
   871d4:	4608      	mov	r0, r1
   871d6:	4611      	mov	r1, r2
   871d8:	4798      	blx	r3
   871da:	4603      	mov	r3, r0
   871dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		
					
					tempdata.word = (cond_final_X10000);
   871de:	4b18      	ldr	r3, [pc, #96]	; (87240 <Cl_Dlsis_SenddlsisData+0x2d8>)
   871e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   871e2:	4798      	blx	r3
   871e4:	e056      	b.n	87294 <Cl_Dlsis_SenddlsisData+0x32c>
   871e6:	bf00      	nop
   871e8:	cccccccd 	.word	0xcccccccd
   871ec:	4008cccc 	.word	0x4008cccc
   871f0:	66666666 	.word	0x66666666
   871f4:	3ff66666 	.word	0x3ff66666
   871f8:	eb1c432d 	.word	0xeb1c432d
   871fc:	3f1a36e2 	.word	0x3f1a36e2
   87200:	d2f1a9fc 	.word	0xd2f1a9fc
   87204:	3fa0624d 	.word	0x3fa0624d
   87208:	51eb851f 	.word	0x51eb851f
   8720c:	3fed1eb8 	.word	0x3fed1eb8
   87210:	9999999a 	.word	0x9999999a
   87214:	3fd99999 	.word	0x3fd99999
   87218:	24dd2f1b 	.word	0x24dd2f1b
   8721c:	3f958106 	.word	0x3f958106
   87220:	33333333 	.word	0x33333333
   87224:	40153333 	.word	0x40153333
   87228:	000a4369 	.word	0x000a4369
   8722c:	0008d6b1 	.word	0x0008d6b1
   87230:	000a3d65 	.word	0x000a3d65
   87234:	000a3e15 	.word	0x000a3e15
   87238:	471d0800 	.word	0x471d0800
   8723c:	000a3f7d 	.word	0x000a3f7d
   87240:	000a41ed 	.word	0x000a41ed
   87244:	0008e8e1 	.word	0x0008e8e1
   87248:	20072630 	.word	0x20072630
   8724c:	41200000 	.word	0x41200000
   87250:	000a34ed 	.word	0x000a34ed
   87254:	000a322d 	.word	0x000a322d
   87258:	000a3231 	.word	0x000a3231
   8725c:	000a3b59 	.word	0x000a3b59
   87260:	20072118 	.word	0x20072118
   87264:	40a00000 	.word	0x40a00000
   87268:	000a3c05 	.word	0x000a3c05
   8726c:	40c00000 	.word	0x40c00000
   87270:	cccccccd 	.word	0xcccccccd
   87274:	51eb851f 	.word	0x51eb851f
   87278:	000a3d6d 	.word	0x000a3d6d
   8727c:	000a3595 	.word	0x000a3595
   87280:	42c80000 	.word	0x42c80000
   87284:	40390000 	.word	0x40390000
   87288:	3ff00000 	.word	0x3ff00000
   8728c:	000a37e9 	.word	0x000a37e9
   87290:	40240000 	.word	0x40240000
   87294:	4603      	mov	r3, r0
   87296:	60bb      	str	r3, [r7, #8]
					systemdataarray[count++] = tempdata.bytearray[0];
   87298:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8729c:	1c5a      	adds	r2, r3, #1
   8729e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   872a2:	7a3a      	ldrb	r2, [r7, #8]
   872a4:	f107 0160 	add.w	r1, r7, #96	; 0x60
   872a8:	440b      	add	r3, r1
   872aa:	f803 2c50 	strb.w	r2, [r3, #-80]
					systemdataarray[count++] = tempdata.bytearray[1];
   872ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   872b2:	1c5a      	adds	r2, r3, #1
   872b4:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   872b8:	7a7a      	ldrb	r2, [r7, #9]
   872ba:	f107 0160 	add.w	r1, r7, #96	; 0x60
   872be:	440b      	add	r3, r1
   872c0:	f803 2c50 	strb.w	r2, [r3, #-80]
					systemdataarray[count++] = tempdata.bytearray[2];
   872c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   872c8:	1c5a      	adds	r2, r3, #1
   872ca:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   872ce:	7aba      	ldrb	r2, [r7, #10]
   872d0:	f107 0160 	add.w	r1, r7, #96	; 0x60
   872d4:	440b      	add	r3, r1
   872d6:	f803 2c50 	strb.w	r2, [r3, #-80]
					systemdataarray[count++] = tempdata.bytearray[3];
   872da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   872de:	1c5a      	adds	r2, r3, #1
   872e0:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   872e4:	7afa      	ldrb	r2, [r7, #11]
   872e6:	f107 0160 	add.w	r1, r7, #96	; 0x60
   872ea:	440b      	add	r3, r1
   872ec:	f803 2c50 	strb.w	r2, [r3, #-80]
   872f0:	e02d      	b.n	8734e <Cl_Dlsis_SenddlsisData+0x3e6>
			}
				else
				{
					tempdata.word = 0;
   872f2:	2300      	movs	r3, #0
   872f4:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0];
   872f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   872fa:	1c5a      	adds	r2, r3, #1
   872fc:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87300:	7a3a      	ldrb	r2, [r7, #8]
   87302:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87306:	440b      	add	r3, r1
   87308:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1];
   8730c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87310:	1c5a      	adds	r2, r3, #1
   87312:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87316:	7a7a      	ldrb	r2, [r7, #9]
   87318:	f107 0160 	add.w	r1, r7, #96	; 0x60
   8731c:	440b      	add	r3, r1
   8731e:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2];
   87322:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87326:	1c5a      	adds	r2, r3, #1
   87328:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   8732c:	7aba      	ldrb	r2, [r7, #10]
   8732e:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87332:	440b      	add	r3, r1
   87334:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3];
   87338:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8733c:	1c5a      	adds	r2, r3, #1
   8733e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87342:	7afa      	ldrb	r2, [r7, #11]
   87344:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87348:	440b      	add	r3, r1
   8734a:	f803 2c50 	strb.w	r2, [r3, #-80]
			
		//	float ftemp,ftemp1;
		//	ftemp = temp * 0.803;
		//	calibration_tmp(ftemp,TS3);
		//	avgtmp3 =(avgtmp3*5 + temprature_final_value_3)/6;
			tempdata.word = (avgtmp3);
   8734e:	4bb0      	ldr	r3, [pc, #704]	; (87610 <Cl_Dlsis_SenddlsisData+0x6a8>)
   87350:	681a      	ldr	r2, [r3, #0]
   87352:	4bb0      	ldr	r3, [pc, #704]	; (87614 <Cl_Dlsis_SenddlsisData+0x6ac>)
   87354:	4610      	mov	r0, r2
   87356:	4798      	blx	r3
   87358:	4603      	mov	r3, r0
   8735a:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0];
   8735c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87360:	1c5a      	adds	r2, r3, #1
   87362:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87366:	7a3a      	ldrb	r2, [r7, #8]
   87368:	f107 0160 	add.w	r1, r7, #96	; 0x60
   8736c:	440b      	add	r3, r1
   8736e:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1];
   87372:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87376:	1c5a      	adds	r2, r3, #1
   87378:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   8737c:	7a7a      	ldrb	r2, [r7, #9]
   8737e:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87382:	440b      	add	r3, r1
   87384:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2];
   87388:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8738c:	1c5a      	adds	r2, r3, #1
   8738e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87392:	7aba      	ldrb	r2, [r7, #10]
   87394:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87398:	440b      	add	r3, r1
   8739a:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3];
   8739e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   873a2:	1c5a      	adds	r2, r3, #1
   873a4:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   873a8:	7afa      	ldrb	r2, [r7, #11]
   873aa:	f107 0160 	add.w	r1, r7, #96	; 0x60
   873ae:	440b      	add	r3, r1
   873b0:	f803 2c50 	strb.w	r2, [r3, #-80]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&tempdata.Twobyte);
   873b4:	f107 0308 	add.w	r3, r7, #8
   873b8:	4619      	mov	r1, r3
   873ba:	200b      	movs	r0, #11
   873bc:	4b96      	ldr	r3, [pc, #600]	; (87618 <Cl_Dlsis_SenddlsisData+0x6b0>)
   873be:	4798      	blx	r3
		{
			
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   873c0:	893b      	ldrh	r3, [r7, #8]
   873c2:	461a      	mov	r2, r3
   873c4:	4b95      	ldr	r3, [pc, #596]	; (8761c <Cl_Dlsis_SenddlsisData+0x6b4>)
   873c6:	4610      	mov	r0, r2
   873c8:	4798      	blx	r3
   873ca:	4c95      	ldr	r4, [pc, #596]	; (87620 <Cl_Dlsis_SenddlsisData+0x6b8>)
   873cc:	a38e      	add	r3, pc, #568	; (adr r3, 87608 <Cl_Dlsis_SenddlsisData+0x6a0>)
   873ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   873d2:	47a0      	blx	r4
   873d4:	4603      	mov	r3, r0
   873d6:	460c      	mov	r4, r1
   873d8:	4619      	mov	r1, r3
   873da:	4622      	mov	r2, r4
   873dc:	4b91      	ldr	r3, [pc, #580]	; (87624 <Cl_Dlsis_SenddlsisData+0x6bc>)
   873de:	4608      	mov	r0, r1
   873e0:	4611      	mov	r1, r2
   873e2:	4798      	blx	r3
   873e4:	4603      	mov	r3, r0
   873e6:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_apt(sensordatamillivolts);
   873e8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   873ec:	4618      	mov	r0, r3
   873ee:	4b8e      	ldr	r3, [pc, #568]	; (87628 <Cl_Dlsis_SenddlsisData+0x6c0>)
   873f0:	4798      	blx	r3
			apt =(apt*5 + pressure_final_apt)/6;
   873f2:	4b8e      	ldr	r3, [pc, #568]	; (8762c <Cl_Dlsis_SenddlsisData+0x6c4>)
   873f4:	681a      	ldr	r2, [r3, #0]
   873f6:	4b8e      	ldr	r3, [pc, #568]	; (87630 <Cl_Dlsis_SenddlsisData+0x6c8>)
   873f8:	498e      	ldr	r1, [pc, #568]	; (87634 <Cl_Dlsis_SenddlsisData+0x6cc>)
   873fa:	4610      	mov	r0, r2
   873fc:	4798      	blx	r3
   873fe:	4603      	mov	r3, r0
   87400:	4618      	mov	r0, r3
   87402:	4b8d      	ldr	r3, [pc, #564]	; (87638 <Cl_Dlsis_SenddlsisData+0x6d0>)
   87404:	681a      	ldr	r2, [r3, #0]
   87406:	4b8d      	ldr	r3, [pc, #564]	; (8763c <Cl_Dlsis_SenddlsisData+0x6d4>)
   87408:	4611      	mov	r1, r2
   8740a:	4798      	blx	r3
   8740c:	4603      	mov	r3, r0
   8740e:	461a      	mov	r2, r3
   87410:	4b8b      	ldr	r3, [pc, #556]	; (87640 <Cl_Dlsis_SenddlsisData+0x6d8>)
   87412:	498c      	ldr	r1, [pc, #560]	; (87644 <Cl_Dlsis_SenddlsisData+0x6dc>)
   87414:	4610      	mov	r0, r2
   87416:	4798      	blx	r3
   87418:	4603      	mov	r3, r0
   8741a:	461a      	mov	r2, r3
   8741c:	4b83      	ldr	r3, [pc, #524]	; (8762c <Cl_Dlsis_SenddlsisData+0x6c4>)
   8741e:	601a      	str	r2, [r3, #0]
			tempdata.word	= apt;
   87420:	4b82      	ldr	r3, [pc, #520]	; (8762c <Cl_Dlsis_SenddlsisData+0x6c4>)
   87422:	681a      	ldr	r2, [r3, #0]
   87424:	4b7b      	ldr	r3, [pc, #492]	; (87614 <Cl_Dlsis_SenddlsisData+0x6ac>)
   87426:	4610      	mov	r0, r2
   87428:	4798      	blx	r3
   8742a:	4603      	mov	r3, r0
   8742c:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   8742e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87432:	1c5a      	adds	r2, r3, #1
   87434:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87438:	7a3a      	ldrb	r2, [r7, #8]
   8743a:	f107 0160 	add.w	r1, r7, #96	; 0x60
   8743e:	440b      	add	r3, r1
   87440:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   87444:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87448:	1c5a      	adds	r2, r3, #1
   8744a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   8744e:	7a7a      	ldrb	r2, [r7, #9]
   87450:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87454:	440b      	add	r3, r1
   87456:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   8745a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8745e:	1c5a      	adds	r2, r3, #1
   87460:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87464:	7aba      	ldrb	r2, [r7, #10]
   87466:	f107 0160 	add.w	r1, r7, #96	; 0x60
   8746a:	440b      	add	r3, r1
   8746c:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   87470:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87474:	1c5a      	adds	r2, r3, #1
   87476:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   8747a:	7afa      	ldrb	r2, [r7, #11]
   8747c:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87480:	440b      	add	r3, r1
   87482:	f803 2c50 	strb.w	r2, [r3, #-80]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&tempdata.Twobyte);
   87486:	f107 0308 	add.w	r3, r7, #8
   8748a:	4619      	mov	r1, r3
   8748c:	200c      	movs	r0, #12
   8748e:	4b62      	ldr	r3, [pc, #392]	; (87618 <Cl_Dlsis_SenddlsisData+0x6b0>)
   87490:	4798      	blx	r3
		{
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   87492:	893b      	ldrh	r3, [r7, #8]
   87494:	461a      	mov	r2, r3
   87496:	4b61      	ldr	r3, [pc, #388]	; (8761c <Cl_Dlsis_SenddlsisData+0x6b4>)
   87498:	4610      	mov	r0, r2
   8749a:	4798      	blx	r3
   8749c:	4c60      	ldr	r4, [pc, #384]	; (87620 <Cl_Dlsis_SenddlsisData+0x6b8>)
   8749e:	a35a      	add	r3, pc, #360	; (adr r3, 87608 <Cl_Dlsis_SenddlsisData+0x6a0>)
   874a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   874a4:	47a0      	blx	r4
   874a6:	4603      	mov	r3, r0
   874a8:	460c      	mov	r4, r1
   874aa:	4619      	mov	r1, r3
   874ac:	4622      	mov	r2, r4
   874ae:	4b5d      	ldr	r3, [pc, #372]	; (87624 <Cl_Dlsis_SenddlsisData+0x6bc>)
   874b0:	4608      	mov	r0, r1
   874b2:	4611      	mov	r1, r2
   874b4:	4798      	blx	r3
   874b6:	4603      	mov	r3, r0
   874b8:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_vpt(sensordatamillivolts);
   874ba:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   874be:	4618      	mov	r0, r3
   874c0:	4b61      	ldr	r3, [pc, #388]	; (87648 <Cl_Dlsis_SenddlsisData+0x6e0>)
   874c2:	4798      	blx	r3
			vpt =(vpt*5 + pressure_final_vpt)/6;
   874c4:	4b61      	ldr	r3, [pc, #388]	; (8764c <Cl_Dlsis_SenddlsisData+0x6e4>)
   874c6:	681a      	ldr	r2, [r3, #0]
   874c8:	4b59      	ldr	r3, [pc, #356]	; (87630 <Cl_Dlsis_SenddlsisData+0x6c8>)
   874ca:	495a      	ldr	r1, [pc, #360]	; (87634 <Cl_Dlsis_SenddlsisData+0x6cc>)
   874cc:	4610      	mov	r0, r2
   874ce:	4798      	blx	r3
   874d0:	4603      	mov	r3, r0
   874d2:	4618      	mov	r0, r3
   874d4:	4b5e      	ldr	r3, [pc, #376]	; (87650 <Cl_Dlsis_SenddlsisData+0x6e8>)
   874d6:	681a      	ldr	r2, [r3, #0]
   874d8:	4b58      	ldr	r3, [pc, #352]	; (8763c <Cl_Dlsis_SenddlsisData+0x6d4>)
   874da:	4611      	mov	r1, r2
   874dc:	4798      	blx	r3
   874de:	4603      	mov	r3, r0
   874e0:	461a      	mov	r2, r3
   874e2:	4b57      	ldr	r3, [pc, #348]	; (87640 <Cl_Dlsis_SenddlsisData+0x6d8>)
   874e4:	4957      	ldr	r1, [pc, #348]	; (87644 <Cl_Dlsis_SenddlsisData+0x6dc>)
   874e6:	4610      	mov	r0, r2
   874e8:	4798      	blx	r3
   874ea:	4603      	mov	r3, r0
   874ec:	461a      	mov	r2, r3
   874ee:	4b57      	ldr	r3, [pc, #348]	; (8764c <Cl_Dlsis_SenddlsisData+0x6e4>)
   874f0:	601a      	str	r2, [r3, #0]
			tempdata.word	 = vpt;
   874f2:	4b56      	ldr	r3, [pc, #344]	; (8764c <Cl_Dlsis_SenddlsisData+0x6e4>)
   874f4:	681a      	ldr	r2, [r3, #0]
   874f6:	4b47      	ldr	r3, [pc, #284]	; (87614 <Cl_Dlsis_SenddlsisData+0x6ac>)
   874f8:	4610      	mov	r0, r2
   874fa:	4798      	blx	r3
   874fc:	4603      	mov	r3, r0
   874fe:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   87500:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87504:	1c5a      	adds	r2, r3, #1
   87506:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   8750a:	7a3a      	ldrb	r2, [r7, #8]
   8750c:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87510:	440b      	add	r3, r1
   87512:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   87516:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8751a:	1c5a      	adds	r2, r3, #1
   8751c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87520:	7a7a      	ldrb	r2, [r7, #9]
   87522:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87526:	440b      	add	r3, r1
   87528:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   8752c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87530:	1c5a      	adds	r2, r3, #1
   87532:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87536:	7aba      	ldrb	r2, [r7, #10]
   87538:	f107 0160 	add.w	r1, r7, #96	; 0x60
   8753c:	440b      	add	r3, r1
   8753e:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   87542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87546:	1c5a      	adds	r2, r3, #1
   87548:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   8754c:	7afa      	ldrb	r2, [r7, #11]
   8754e:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87552:	440b      	add	r3, r1
   87554:	f803 2c50 	strb.w	r2, [r3, #-80]
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&tempdata.Twobyte);
   87558:	f107 0308 	add.w	r3, r7, #8
   8755c:	4619      	mov	r1, r3
   8755e:	200e      	movs	r0, #14
   87560:	4b2d      	ldr	r3, [pc, #180]	; (87618 <Cl_Dlsis_SenddlsisData+0x6b0>)
   87562:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   87564:	893b      	ldrh	r3, [r7, #8]
   87566:	461a      	mov	r2, r3
   87568:	4b2c      	ldr	r3, [pc, #176]	; (8761c <Cl_Dlsis_SenddlsisData+0x6b4>)
   8756a:	4610      	mov	r0, r2
   8756c:	4798      	blx	r3
   8756e:	4c2c      	ldr	r4, [pc, #176]	; (87620 <Cl_Dlsis_SenddlsisData+0x6b8>)
   87570:	a325      	add	r3, pc, #148	; (adr r3, 87608 <Cl_Dlsis_SenddlsisData+0x6a0>)
   87572:	e9d3 2300 	ldrd	r2, r3, [r3]
   87576:	47a0      	blx	r4
   87578:	4603      	mov	r3, r0
   8757a:	460c      	mov	r4, r1
   8757c:	4619      	mov	r1, r3
   8757e:	4622      	mov	r2, r4
   87580:	4b28      	ldr	r3, [pc, #160]	; (87624 <Cl_Dlsis_SenddlsisData+0x6bc>)
   87582:	4608      	mov	r0, r1
   87584:	4611      	mov	r1, r2
   87586:	4798      	blx	r3
   87588:	4603      	mov	r3, r0
   8758a:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_ps1(sensordatamillivolts);
   8758c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   87590:	4618      	mov	r0, r3
   87592:	4b30      	ldr	r3, [pc, #192]	; (87654 <Cl_Dlsis_SenddlsisData+0x6ec>)
   87594:	4798      	blx	r3
			ps1=(ps1*5 + pressure_final_ps1)/6;
   87596:	4b30      	ldr	r3, [pc, #192]	; (87658 <Cl_Dlsis_SenddlsisData+0x6f0>)
   87598:	681a      	ldr	r2, [r3, #0]
   8759a:	4b25      	ldr	r3, [pc, #148]	; (87630 <Cl_Dlsis_SenddlsisData+0x6c8>)
   8759c:	4925      	ldr	r1, [pc, #148]	; (87634 <Cl_Dlsis_SenddlsisData+0x6cc>)
   8759e:	4610      	mov	r0, r2
   875a0:	4798      	blx	r3
   875a2:	4603      	mov	r3, r0
   875a4:	4618      	mov	r0, r3
   875a6:	4b2d      	ldr	r3, [pc, #180]	; (8765c <Cl_Dlsis_SenddlsisData+0x6f4>)
   875a8:	681a      	ldr	r2, [r3, #0]
   875aa:	4b24      	ldr	r3, [pc, #144]	; (8763c <Cl_Dlsis_SenddlsisData+0x6d4>)
   875ac:	4611      	mov	r1, r2
   875ae:	4798      	blx	r3
   875b0:	4603      	mov	r3, r0
   875b2:	461a      	mov	r2, r3
   875b4:	4b22      	ldr	r3, [pc, #136]	; (87640 <Cl_Dlsis_SenddlsisData+0x6d8>)
   875b6:	4923      	ldr	r1, [pc, #140]	; (87644 <Cl_Dlsis_SenddlsisData+0x6dc>)
   875b8:	4610      	mov	r0, r2
   875ba:	4798      	blx	r3
   875bc:	4603      	mov	r3, r0
   875be:	461a      	mov	r2, r3
   875c0:	4b25      	ldr	r3, [pc, #148]	; (87658 <Cl_Dlsis_SenddlsisData+0x6f0>)
   875c2:	601a      	str	r2, [r3, #0]
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&tempdata.Twobyte);
   875c4:	f107 0308 	add.w	r3, r7, #8
   875c8:	4619      	mov	r1, r3
   875ca:	200f      	movs	r0, #15
   875cc:	4b12      	ldr	r3, [pc, #72]	; (87618 <Cl_Dlsis_SenddlsisData+0x6b0>)
   875ce:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   875d0:	893b      	ldrh	r3, [r7, #8]
   875d2:	461a      	mov	r2, r3
   875d4:	4b11      	ldr	r3, [pc, #68]	; (8761c <Cl_Dlsis_SenddlsisData+0x6b4>)
   875d6:	4610      	mov	r0, r2
   875d8:	4798      	blx	r3
   875da:	4c11      	ldr	r4, [pc, #68]	; (87620 <Cl_Dlsis_SenddlsisData+0x6b8>)
   875dc:	a30a      	add	r3, pc, #40	; (adr r3, 87608 <Cl_Dlsis_SenddlsisData+0x6a0>)
   875de:	e9d3 2300 	ldrd	r2, r3, [r3]
   875e2:	47a0      	blx	r4
   875e4:	4603      	mov	r3, r0
   875e6:	460c      	mov	r4, r1
   875e8:	4619      	mov	r1, r3
   875ea:	4622      	mov	r2, r4
   875ec:	4b0d      	ldr	r3, [pc, #52]	; (87624 <Cl_Dlsis_SenddlsisData+0x6bc>)
   875ee:	4608      	mov	r0, r1
   875f0:	4611      	mov	r1, r2
   875f2:	4798      	blx	r3
   875f4:	4603      	mov	r3, r0
   875f6:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_ps2(sensordatamillivolts);
   875f8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   875fc:	4618      	mov	r0, r3
   875fe:	4b18      	ldr	r3, [pc, #96]	; (87660 <Cl_Dlsis_SenddlsisData+0x6f8>)
   87600:	4798      	blx	r3
			ps2=(ps2*5 + pressure_final_ps2)/6;
   87602:	4b18      	ldr	r3, [pc, #96]	; (87664 <Cl_Dlsis_SenddlsisData+0x6fc>)
   87604:	681a      	ldr	r2, [r3, #0]
   87606:	e02f      	b.n	87668 <Cl_Dlsis_SenddlsisData+0x700>
   87608:	58e21965 	.word	0x58e21965
   8760c:	3fe9b717 	.word	0x3fe9b717
   87610:	20072118 	.word	0x20072118
   87614:	000a41ed 	.word	0x000a41ed
   87618:	0008d6b1 	.word	0x0008d6b1
   8761c:	000a34c9 	.word	0x000a34c9
   87620:	000a3595 	.word	0x000a3595
   87624:	000a3b19 	.word	0x000a3b19
   87628:	0008406d 	.word	0x0008406d
   8762c:	2007211c 	.word	0x2007211c
   87630:	000a3e15 	.word	0x000a3e15
   87634:	40a00000 	.word	0x40a00000
   87638:	20072d74 	.word	0x20072d74
   8763c:	000a3c05 	.word	0x000a3c05
   87640:	000a3f7d 	.word	0x000a3f7d
   87644:	40c00000 	.word	0x40c00000
   87648:	000841ed 	.word	0x000841ed
   8764c:	20072120 	.word	0x20072120
   87650:	2007165c 	.word	0x2007165c
   87654:	00084371 	.word	0x00084371
   87658:	20072124 	.word	0x20072124
   8765c:	20071660 	.word	0x20071660
   87660:	00084481 	.word	0x00084481
   87664:	20072128 	.word	0x20072128
   87668:	4b53      	ldr	r3, [pc, #332]	; (877b8 <Cl_Dlsis_SenddlsisData+0x850>)
   8766a:	4954      	ldr	r1, [pc, #336]	; (877bc <Cl_Dlsis_SenddlsisData+0x854>)
   8766c:	4610      	mov	r0, r2
   8766e:	4798      	blx	r3
   87670:	4603      	mov	r3, r0
   87672:	4618      	mov	r0, r3
   87674:	4b52      	ldr	r3, [pc, #328]	; (877c0 <Cl_Dlsis_SenddlsisData+0x858>)
   87676:	681a      	ldr	r2, [r3, #0]
   87678:	4b52      	ldr	r3, [pc, #328]	; (877c4 <Cl_Dlsis_SenddlsisData+0x85c>)
   8767a:	4611      	mov	r1, r2
   8767c:	4798      	blx	r3
   8767e:	4603      	mov	r3, r0
   87680:	461a      	mov	r2, r3
   87682:	4b51      	ldr	r3, [pc, #324]	; (877c8 <Cl_Dlsis_SenddlsisData+0x860>)
   87684:	4951      	ldr	r1, [pc, #324]	; (877cc <Cl_Dlsis_SenddlsisData+0x864>)
   87686:	4610      	mov	r0, r2
   87688:	4798      	blx	r3
   8768a:	4603      	mov	r3, r0
   8768c:	461a      	mov	r2, r3
   8768e:	4b50      	ldr	r3, [pc, #320]	; (877d0 <Cl_Dlsis_SenddlsisData+0x868>)
   87690:	601a      	str	r2, [r3, #0]
			
			tempdata.word	 = (((apt + vpt) - (ps1+ps2))/2)-25;
   87692:	4b50      	ldr	r3, [pc, #320]	; (877d4 <Cl_Dlsis_SenddlsisData+0x86c>)
   87694:	681a      	ldr	r2, [r3, #0]
   87696:	4b50      	ldr	r3, [pc, #320]	; (877d8 <Cl_Dlsis_SenddlsisData+0x870>)
   87698:	6819      	ldr	r1, [r3, #0]
   8769a:	4b4a      	ldr	r3, [pc, #296]	; (877c4 <Cl_Dlsis_SenddlsisData+0x85c>)
   8769c:	4610      	mov	r0, r2
   8769e:	4798      	blx	r3
   876a0:	4603      	mov	r3, r0
   876a2:	461c      	mov	r4, r3
   876a4:	4b4d      	ldr	r3, [pc, #308]	; (877dc <Cl_Dlsis_SenddlsisData+0x874>)
   876a6:	681a      	ldr	r2, [r3, #0]
   876a8:	4b49      	ldr	r3, [pc, #292]	; (877d0 <Cl_Dlsis_SenddlsisData+0x868>)
   876aa:	6819      	ldr	r1, [r3, #0]
   876ac:	4b45      	ldr	r3, [pc, #276]	; (877c4 <Cl_Dlsis_SenddlsisData+0x85c>)
   876ae:	4610      	mov	r0, r2
   876b0:	4798      	blx	r3
   876b2:	4603      	mov	r3, r0
   876b4:	461a      	mov	r2, r3
   876b6:	4b4a      	ldr	r3, [pc, #296]	; (877e0 <Cl_Dlsis_SenddlsisData+0x878>)
   876b8:	4611      	mov	r1, r2
   876ba:	4620      	mov	r0, r4
   876bc:	4798      	blx	r3
   876be:	4603      	mov	r3, r0
   876c0:	461a      	mov	r2, r3
   876c2:	4b41      	ldr	r3, [pc, #260]	; (877c8 <Cl_Dlsis_SenddlsisData+0x860>)
   876c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   876c8:	4610      	mov	r0, r2
   876ca:	4798      	blx	r3
   876cc:	4603      	mov	r3, r0
   876ce:	461a      	mov	r2, r3
   876d0:	4b43      	ldr	r3, [pc, #268]	; (877e0 <Cl_Dlsis_SenddlsisData+0x878>)
   876d2:	4944      	ldr	r1, [pc, #272]	; (877e4 <Cl_Dlsis_SenddlsisData+0x87c>)
   876d4:	4610      	mov	r0, r2
   876d6:	4798      	blx	r3
   876d8:	4603      	mov	r3, r0
   876da:	461a      	mov	r2, r3
   876dc:	4b42      	ldr	r3, [pc, #264]	; (877e8 <Cl_Dlsis_SenddlsisData+0x880>)
   876de:	4610      	mov	r0, r2
   876e0:	4798      	blx	r3
   876e2:	4603      	mov	r3, r0
   876e4:	60bb      	str	r3, [r7, #8]


			systemdataarray[count++] = tempdata.bytearray[0] ;
   876e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   876ea:	1c5a      	adds	r2, r3, #1
   876ec:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   876f0:	7a3a      	ldrb	r2, [r7, #8]
   876f2:	f107 0160 	add.w	r1, r7, #96	; 0x60
   876f6:	440b      	add	r3, r1
   876f8:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   876fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87700:	1c5a      	adds	r2, r3, #1
   87702:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87706:	7a7a      	ldrb	r2, [r7, #9]
   87708:	f107 0160 	add.w	r1, r7, #96	; 0x60
   8770c:	440b      	add	r3, r1
   8770e:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   87712:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87716:	1c5a      	adds	r2, r3, #1
   87718:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   8771c:	7aba      	ldrb	r2, [r7, #10]
   8771e:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87722:	440b      	add	r3, r1
   87724:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   87728:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8772c:	1c5a      	adds	r2, r3, #1
   8772e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87732:	7afa      	ldrb	r2, [r7, #11]
   87734:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87738:	440b      	add	r3, r1
   8773a:	f803 2c50 	strb.w	r2, [r3, #-80]
			
			systemdataarray[count++] = 0x0A; // tmp
   8773e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87742:	1c5a      	adds	r2, r3, #1
   87744:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87748:	f107 0260 	add.w	r2, r7, #96	; 0x60
   8774c:	4413      	add	r3, r2
   8774e:	220a      	movs	r2, #10
   87750:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = 0x0A; // tmp
   87754:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87758:	1c5a      	adds	r2, r3, #1
   8775a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   8775e:	f107 0260 	add.w	r2, r7, #96	; 0x60
   87762:	4413      	add	r3, r2
   87764:	220a      	movs	r2, #10
   87766:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = 0x00;
   8776a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8776e:	1c5a      	adds	r2, r3, #1
   87770:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87774:	f107 0260 	add.w	r2, r7, #96	; 0x60
   87778:	4413      	add	r3, r2
   8777a:	2200      	movs	r2, #0
   8777c:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = 0x00;
   87780:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87784:	1c5a      	adds	r2, r3, #1
   87786:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   8778a:	f107 0260 	add.w	r2, r7, #96	; 0x60
   8778e:	4413      	add	r3, r2
   87790:	2200      	movs	r2, #0
   87792:	f803 2c50 	strb.w	r2, [r3, #-80]
Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&systemdataarray,count);
   87796:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
   8779a:	f107 0310 	add.w	r3, r7, #16
   8779e:	4619      	mov	r1, r3
   877a0:	202a      	movs	r0, #42	; 0x2a
   877a2:	4b12      	ldr	r3, [pc, #72]	; (877ec <Cl_Dlsis_SenddlsisData+0x884>)
   877a4:	4798      	blx	r3
   877a6:	4603      	mov	r3, r0
   877a8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	//Cl_dlsisretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
	
	return CL_OK;
   877ac:	2300      	movs	r3, #0
}
   877ae:	4618      	mov	r0, r3
   877b0:	3764      	adds	r7, #100	; 0x64
   877b2:	46bd      	mov	sp, r7
   877b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   877b6:	bf00      	nop
   877b8:	000a3e15 	.word	0x000a3e15
   877bc:	40a00000 	.word	0x40a00000
   877c0:	20071664 	.word	0x20071664
   877c4:	000a3c05 	.word	0x000a3c05
   877c8:	000a3f7d 	.word	0x000a3f7d
   877cc:	40c00000 	.word	0x40c00000
   877d0:	20072128 	.word	0x20072128
   877d4:	2007211c 	.word	0x2007211c
   877d8:	20072120 	.word	0x20072120
   877dc:	20072124 	.word	0x20072124
   877e0:	000a3c01 	.word	0x000a3c01
   877e4:	41c80000 	.word	0x41c80000
   877e8:	000a41ed 	.word	0x000a41ed
   877ec:	00099729 	.word	0x00099729

000877f0 <Cl_Dlsis_StartDialysis>:
}



Cl_ReturnCodeType	Cl_Dlsis_StartDialysis(void)
{
   877f0:	b580      	push	{r7, lr}
   877f2:	b082      	sub	sp, #8
   877f4:	af00      	add	r7, sp, #0
	
	sv_cntrl_resetgreenalarm();
   877f6:	4b18      	ldr	r3, [pc, #96]	; (87858 <Cl_Dlsis_StartDialysis+0x68>)
   877f8:	4798      	blx	r3
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   877fa:	2300      	movs	r3, #0
   877fc:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   877fe:	234d      	movs	r3, #77	; 0x4d
   87800:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type data = 0;
   87802:	2300      	movs	r3, #0
   87804:	717b      	strb	r3, [r7, #5]
	
	

	//Reset the  OPENFILL time count
	DlsisTime.Cl_dlsisMinutescounter = 0;
   87806:	4b15      	ldr	r3, [pc, #84]	; (8785c <Cl_Dlsis_StartDialysis+0x6c>)
   87808:	2200      	movs	r2, #0
   8780a:	705a      	strb	r2, [r3, #1]
	DlsisTime.Cl_dlsisTotalMinutescounter = 0;
   8780c:	4b13      	ldr	r3, [pc, #76]	; (8785c <Cl_Dlsis_StartDialysis+0x6c>)
   8780e:	2200      	movs	r2, #0
   87810:	70da      	strb	r2, [r3, #3]
	Cl_dlsisOpenFillTimeOut = false;
   87812:	4b13      	ldr	r3, [pc, #76]	; (87860 <Cl_Dlsis_StartDialysis+0x70>)
   87814:	2200      	movs	r2, #0
   87816:	701a      	strb	r2, [r3, #0]
	
		command = CON_TX_COMMAND_DLSIS_CNFRM;
   87818:	2312      	movs	r3, #18
   8781a:	71bb      	strb	r3, [r7, #6]
		data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   8781c:	2301      	movs	r3, #1
   8781e:	717b      	strb	r3, [r7, #5]
		Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,1);
   87820:	1d79      	adds	r1, r7, #5
   87822:	79bb      	ldrb	r3, [r7, #6]
   87824:	2201      	movs	r2, #1
   87826:	4618      	mov	r0, r3
   87828:	4b0e      	ldr	r3, [pc, #56]	; (87864 <Cl_Dlsis_StartDialysis+0x74>)
   8782a:	4798      	blx	r3
   8782c:	4603      	mov	r3, r0
   8782e:	71fb      	strb	r3, [r7, #7]
		command = CON_TX_COMMAND_DLSIS_STARTED;
   87830:	2313      	movs	r3, #19
   87832:	71bb      	strb	r3, [r7, #6]
		data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   87834:	2301      	movs	r3, #1
   87836:	717b      	strb	r3, [r7, #5]
		Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,1);
   87838:	1d79      	adds	r1, r7, #5
   8783a:	79bb      	ldrb	r3, [r7, #6]
   8783c:	2201      	movs	r2, #1
   8783e:	4618      	mov	r0, r3
   87840:	4b08      	ldr	r3, [pc, #32]	; (87864 <Cl_Dlsis_StartDialysis+0x74>)
   87842:	4798      	blx	r3
   87844:	4603      	mov	r3, r0
   87846:	71fb      	strb	r3, [r7, #7]
	Cl_Dlsis_ResumeDialysis();
   87848:	4b07      	ldr	r3, [pc, #28]	; (87868 <Cl_Dlsis_StartDialysis+0x78>)
   8784a:	4798      	blx	r3
	
	return 0;
   8784c:	2300      	movs	r3, #0

}
   8784e:	4618      	mov	r0, r3
   87850:	3708      	adds	r7, #8
   87852:	46bd      	mov	sp, r7
   87854:	bd80      	pop	{r7, pc}
   87856:	bf00      	nop
   87858:	00097c7d 	.word	0x00097c7d
   8785c:	20072d84 	.word	0x20072d84
   87860:	200720e8 	.word	0x200720e8
   87864:	00099729 	.word	0x00099729
   87868:	0008786d 	.word	0x0008786d

0008786c <Cl_Dlsis_ResumeDialysis>:

Cl_ReturnCodeType	Cl_Dlsis_ResumeDialysis(void)
{
   8786c:	b590      	push	{r4, r7, lr}
   8786e:	b087      	sub	sp, #28
   87870:	af02      	add	r7, sp, #8
	
		Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   87872:	2300      	movs	r3, #0
   87874:	73fb      	strb	r3, [r7, #15]
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   87876:	234d      	movs	r3, #77	; 0x4d
   87878:	73bb      	strb	r3, [r7, #14]
		Cl_Uint8Type data = 0;
   8787a:	2300      	movs	r3, #0
   8787c:	737b      	strb	r3, [r7, #13]
									
									
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
   8787e:	2300      	movs	r3, #0
   87880:	9300      	str	r3, [sp, #0]
   87882:	f04f 0300 	mov.w	r3, #0
   87886:	f04f 0200 	mov.w	r2, #0
   8788a:	2101      	movs	r1, #1
   8788c:	2001      	movs	r0, #1
   8788e:	4ca4      	ldr	r4, [pc, #656]	; (87b20 <Cl_Dlsis_ResumeDialysis+0x2b4>)
   87890:	47a0      	blx	r4
   87892:	4603      	mov	r3, r0
   87894:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   87896:	2300      	movs	r3, #0
   87898:	9300      	str	r3, [sp, #0]
   8789a:	f04f 0300 	mov.w	r3, #0
   8789e:	f04f 0200 	mov.w	r2, #0
   878a2:	2100      	movs	r1, #0
   878a4:	2029      	movs	r0, #41	; 0x29
   878a6:	4c9e      	ldr	r4, [pc, #632]	; (87b20 <Cl_Dlsis_ResumeDialysis+0x2b4>)
   878a8:	47a0      	blx	r4
   878aa:	4603      	mov	r3, r0
   878ac:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   878ae:	2300      	movs	r3, #0
   878b0:	9300      	str	r3, [sp, #0]
   878b2:	f04f 0300 	mov.w	r3, #0
   878b6:	f04f 0200 	mov.w	r2, #0
   878ba:	2100      	movs	r1, #0
   878bc:	202b      	movs	r0, #43	; 0x2b
   878be:	4c98      	ldr	r4, [pc, #608]	; (87b20 <Cl_Dlsis_ResumeDialysis+0x2b4>)
   878c0:	47a0      	blx	r4
   878c2:	4603      	mov	r3, r0
   878c4:	73fb      	strb	r3, [r7, #15]
									
									
									//Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   878c6:	2101      	movs	r1, #1
   878c8:	203d      	movs	r0, #61	; 0x3d
   878ca:	4b96      	ldr	r3, [pc, #600]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   878cc:	4798      	blx	r3
   878ce:	4603      	mov	r3, r0
   878d0:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   878d2:	2101      	movs	r1, #1
   878d4:	203e      	movs	r0, #62	; 0x3e
   878d6:	4b93      	ldr	r3, [pc, #588]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   878d8:	4798      	blx	r3
   878da:	4603      	mov	r3, r0
   878dc:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   878de:	2101      	movs	r1, #1
   878e0:	2005      	movs	r0, #5
   878e2:	4b90      	ldr	r3, [pc, #576]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   878e4:	4798      	blx	r3
   878e6:	4603      	mov	r3, r0
   878e8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   878ea:	2101      	movs	r1, #1
   878ec:	2006      	movs	r0, #6
   878ee:	4b8d      	ldr	r3, [pc, #564]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   878f0:	4798      	blx	r3
   878f2:	4603      	mov	r3, r0
   878f4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   878f6:	2100      	movs	r1, #0
   878f8:	2003      	movs	r0, #3
   878fa:	4b8a      	ldr	r3, [pc, #552]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   878fc:	4798      	blx	r3
   878fe:	4603      	mov	r3, r0
   87900:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   87902:	2100      	movs	r1, #0
   87904:	2004      	movs	r0, #4
   87906:	4b87      	ldr	r3, [pc, #540]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87908:	4798      	blx	r3
   8790a:	4603      	mov	r3, r0
   8790c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   8790e:	2100      	movs	r1, #0
   87910:	2007      	movs	r0, #7
   87912:	4b84      	ldr	r3, [pc, #528]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87914:	4798      	blx	r3
   87916:	4603      	mov	r3, r0
   87918:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   8791a:	2100      	movs	r1, #0
   8791c:	2008      	movs	r0, #8
   8791e:	4b81      	ldr	r3, [pc, #516]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87920:	4798      	blx	r3
   87922:	4603      	mov	r3, r0
   87924:	73fb      	strb	r3, [r7, #15]
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_OPEN,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
   87926:	2101      	movs	r1, #1
   87928:	2020      	movs	r0, #32
   8792a:	4b7e      	ldr	r3, [pc, #504]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   8792c:	4798      	blx	r3
   8792e:	4603      	mov	r3, r0
   87930:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   87932:	2100      	movs	r1, #0
   87934:	2021      	movs	r0, #33	; 0x21
   87936:	4b7b      	ldr	r3, [pc, #492]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87938:	4798      	blx	r3
   8793a:	4603      	mov	r3, r0
   8793c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,false );
   8793e:	2100      	movs	r1, #0
   87940:	2024      	movs	r0, #36	; 0x24
   87942:	4b78      	ldr	r3, [pc, #480]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87944:	4798      	blx	r3
   87946:	4603      	mov	r3, r0
   87948:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,false);
   8794a:	2100      	movs	r1, #0
   8794c:	2026      	movs	r0, #38	; 0x26
   8794e:	4b75      	ldr	r3, [pc, #468]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87950:	4798      	blx	r3
   87952:	4603      	mov	r3, r0
   87954:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,false );
   87956:	2100      	movs	r1, #0
   87958:	2023      	movs	r0, #35	; 0x23
   8795a:	4b72      	ldr	r3, [pc, #456]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   8795c:	4798      	blx	r3
   8795e:	4603      	mov	r3, r0
   87960:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,false);
   87962:	2100      	movs	r1, #0
   87964:	2025      	movs	r0, #37	; 0x25
   87966:	4b6f      	ldr	r3, [pc, #444]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87968:	4798      	blx	r3
   8796a:	4603      	mov	r3, r0
   8796c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BLD_EVENT,true );
   8796e:	2101      	movs	r1, #1
   87970:	2022      	movs	r0, #34	; 0x22
   87972:	4b6c      	ldr	r3, [pc, #432]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87974:	4798      	blx	r3
   87976:	4603      	mov	r3, r0
   87978:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   8797a:	2100      	movs	r1, #0
   8797c:	2017      	movs	r0, #23
   8797e:	4b69      	ldr	r3, [pc, #420]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87980:	4798      	blx	r3
   87982:	4603      	mov	r3, r0
   87984:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   87986:	2100      	movs	r1, #0
   87988:	2018      	movs	r0, #24
   8798a:	4b66      	ldr	r3, [pc, #408]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   8798c:	4798      	blx	r3
   8798e:	4603      	mov	r3, r0
   87990:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   87992:	2100      	movs	r1, #0
   87994:	2015      	movs	r0, #21
   87996:	4b63      	ldr	r3, [pc, #396]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87998:	4798      	blx	r3
   8799a:	4603      	mov	r3, r0
   8799c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   8799e:	2100      	movs	r1, #0
   879a0:	2016      	movs	r0, #22
   879a2:	4b60      	ldr	r3, [pc, #384]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   879a4:	4798      	blx	r3
   879a6:	4603      	mov	r3, r0
   879a8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,false);
   879aa:	2100      	movs	r1, #0
   879ac:	2027      	movs	r0, #39	; 0x27
   879ae:	4b5d      	ldr	r3, [pc, #372]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   879b0:	4798      	blx	r3
   879b2:	4603      	mov	r3, r0
   879b4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,false);
   879b6:	2100      	movs	r1, #0
   879b8:	2028      	movs	r0, #40	; 0x28
   879ba:	4b5a      	ldr	r3, [pc, #360]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   879bc:	4798      	blx	r3
   879be:	4603      	mov	r3, r0
   879c0:	73fb      	strb	r3, [r7, #15]
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP3STATUS,false );
   879c2:	2100      	movs	r1, #0
   879c4:	2014      	movs	r0, #20
   879c6:	4b57      	ldr	r3, [pc, #348]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   879c8:	4798      	blx	r3
   879ca:	4603      	mov	r3, r0
   879cc:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP2STATUS,false );
   879ce:	2100      	movs	r1, #0
   879d0:	2013      	movs	r0, #19
   879d2:	4b54      	ldr	r3, [pc, #336]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   879d4:	4798      	blx	r3
   879d6:	4603      	mov	r3, r0
   879d8:	73fb      	strb	r3, [r7, #15]
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   879da:	2100      	movs	r1, #0
   879dc:	200f      	movs	r0, #15
   879de:	4b51      	ldr	r3, [pc, #324]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   879e0:	4798      	blx	r3
   879e2:	4603      	mov	r3, r0
   879e4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );
   879e6:	2100      	movs	r1, #0
   879e8:	2010      	movs	r0, #16
   879ea:	4b4e      	ldr	r3, [pc, #312]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   879ec:	4798      	blx	r3
   879ee:	4603      	mov	r3, r0
   879f0:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,false );
   879f2:	2100      	movs	r1, #0
   879f4:	2011      	movs	r0, #17
   879f6:	4b4b      	ldr	r3, [pc, #300]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   879f8:	4798      	blx	r3
   879fa:	4603      	mov	r3, r0
   879fc:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,false );
   879fe:	2100      	movs	r1, #0
   87a00:	2012      	movs	r0, #18
   87a02:	4b48      	ldr	r3, [pc, #288]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87a04:	4798      	blx	r3
   87a06:	4603      	mov	r3, r0
   87a08:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   87a0a:	2100      	movs	r1, #0
   87a0c:	2013      	movs	r0, #19
   87a0e:	4b45      	ldr	r3, [pc, #276]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87a10:	4798      	blx	r3
   87a12:	4603      	mov	r3, r0
   87a14:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   87a16:	2100      	movs	r1, #0
   87a18:	2014      	movs	r0, #20
   87a1a:	4b42      	ldr	r3, [pc, #264]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87a1c:	4798      	blx	r3
   87a1e:	4603      	mov	r3, r0
   87a20:	73fb      	strb	r3, [r7, #15]
									
									if(Current_sense_trigger)
   87a22:	4b41      	ldr	r3, [pc, #260]	; (87b28 <Cl_Dlsis_ResumeDialysis+0x2bc>)
   87a24:	781b      	ldrb	r3, [r3, #0]
   87a26:	2b00      	cmp	r3, #0
   87a28:	d005      	beq.n	87a36 <Cl_Dlsis_ResumeDialysis+0x1ca>
									{
										Cl_dlsisretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   87a2a:	2101      	movs	r1, #1
   87a2c:	203c      	movs	r0, #60	; 0x3c
   87a2e:	4b3d      	ldr	r3, [pc, #244]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87a30:	4798      	blx	r3
   87a32:	4603      	mov	r3, r0
   87a34:	73fb      	strb	r3, [r7, #15]
									}
									else
									{
										//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
									}
									sv_cntrl_disable_loopback();
   87a36:	4b3d      	ldr	r3, [pc, #244]	; (87b2c <Cl_Dlsis_ResumeDialysis+0x2c0>)
   87a38:	4798      	blx	r3
									//Cl_Dlsis_BypassOff();
									sv_cntrl_activatevenousclamp();
   87a3a:	4b3d      	ldr	r3, [pc, #244]	; (87b30 <Cl_Dlsis_ResumeDialysis+0x2c4>)
   87a3c:	4798      	blx	r3
									Cl_dlsisretcode =  sv_cntrl_activatepump(DCMOTOR1);
   87a3e:	2001      	movs	r0, #1
   87a40:	4b3c      	ldr	r3, [pc, #240]	; (87b34 <Cl_Dlsis_ResumeDialysis+0x2c8>)
   87a42:	4798      	blx	r3
   87a44:	4603      	mov	r3, r0
   87a46:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  sv_cntrl_activatepump(DCMOTOR2);
   87a48:	2002      	movs	r0, #2
   87a4a:	4b3a      	ldr	r3, [pc, #232]	; (87b34 <Cl_Dlsis_ResumeDialysis+0x2c8>)
   87a4c:	4798      	blx	r3
   87a4e:	4603      	mov	r3, r0
   87a50:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_RESUME);
   87a52:	200b      	movs	r0, #11
   87a54:	4b38      	ldr	r3, [pc, #224]	; (87b38 <Cl_Dlsis_ResumeDialysis+0x2cc>)
   87a56:	4798      	blx	r3
   87a58:	4603      	mov	r3, r0
   87a5a:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_DIALYSIS_ON);
   87a5c:	2003      	movs	r0, #3
   87a5e:	4b37      	ldr	r3, [pc, #220]	; (87b3c <Cl_Dlsis_ResumeDialysis+0x2d0>)
   87a60:	4798      	blx	r3
   87a62:	4603      	mov	r3, r0
   87a64:	73fb      	strb	r3, [r7, #15]
									cl_bp_controller(CL_BP_EVENT_START,0);
   87a66:	2100      	movs	r1, #0
   87a68:	2002      	movs	r0, #2
   87a6a:	4b35      	ldr	r3, [pc, #212]	; (87b40 <Cl_Dlsis_ResumeDialysis+0x2d4>)
   87a6c:	4798      	blx	r3
									cl_wait(100);
   87a6e:	2064      	movs	r0, #100	; 0x64
   87a70:	4b34      	ldr	r3, [pc, #208]	; (87b44 <Cl_Dlsis_ResumeDialysis+0x2d8>)
   87a72:	4798      	blx	r3
									Cl_Uint32Type temp1 = Treatdata[ID_bloodratetreat];
   87a74:	4b34      	ldr	r3, [pc, #208]	; (87b48 <Cl_Dlsis_ResumeDialysis+0x2dc>)
   87a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   87a78:	60bb      	str	r3, [r7, #8]
									cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,temp1);
   87a7a:	68b9      	ldr	r1, [r7, #8]
   87a7c:	2001      	movs	r0, #1
   87a7e:	4b30      	ldr	r3, [pc, #192]	; (87b40 <Cl_Dlsis_ResumeDialysis+0x2d4>)
   87a80:	4798      	blx	r3
									cl_wait(100);
   87a82:	2064      	movs	r0, #100	; 0x64
   87a84:	4b2f      	ldr	r3, [pc, #188]	; (87b44 <Cl_Dlsis_ResumeDialysis+0x2d8>)
   87a86:	4798      	blx	r3
									//cl_wait(100);
									Cl_Uint32Type temp = Treatdata[ID_dflow];
   87a88:	4b2f      	ldr	r3, [pc, #188]	; (87b48 <Cl_Dlsis_ResumeDialysis+0x2dc>)
   87a8a:	695b      	ldr	r3, [r3, #20]
   87a8c:	607b      	str	r3, [r7, #4]
									flow_rate = temp;
   87a8e:	4a2f      	ldr	r2, [pc, #188]	; (87b4c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   87a90:	687b      	ldr	r3, [r7, #4]
   87a92:	6013      	str	r3, [r2, #0]
									Cl_Uint16Type potvalue = 0;
   87a94:	2300      	movs	r3, #0
   87a96:	807b      	strh	r3, [r7, #2]
									switch (temp)
   87a98:	687b      	ldr	r3, [r7, #4]
   87a9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   87a9e:	d017      	beq.n	87ad0 <Cl_Dlsis_ResumeDialysis+0x264>
   87aa0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   87aa4:	d003      	beq.n	87aae <Cl_Dlsis_ResumeDialysis+0x242>
   87aa6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   87aaa:	d027      	beq.n	87afc <Cl_Dlsis_ResumeDialysis+0x290>
   87aac:	e058      	b.n	87b60 <Cl_Dlsis_ResumeDialysis+0x2f4>
									{
										case 800:
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   87aae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   87ab2:	2002      	movs	r0, #2
   87ab4:	4b26      	ldr	r3, [pc, #152]	; (87b50 <Cl_Dlsis_ResumeDialysis+0x2e4>)
   87ab6:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1395);
   87ab8:	f240 5173 	movw	r1, #1395	; 0x573
   87abc:	2001      	movs	r0, #1
   87abe:	4b24      	ldr	r3, [pc, #144]	; (87b50 <Cl_Dlsis_ResumeDialysis+0x2e4>)
   87ac0:	4798      	blx	r3
										potvalue = (612 * 1024)/10000;
   87ac2:	233e      	movs	r3, #62	; 0x3e
   87ac4:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   87ac6:	887b      	ldrh	r3, [r7, #2]
   87ac8:	4618      	mov	r0, r3
   87aca:	4b22      	ldr	r3, [pc, #136]	; (87b54 <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87acc:	4798      	blx	r3
										break;
   87ace:	e058      	b.n	87b82 <Cl_Dlsis_ResumeDialysis+0x316>
										
										case 500:
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   87ad0:	2203      	movs	r2, #3
   87ad2:	4921      	ldr	r1, [pc, #132]	; (87b58 <Cl_Dlsis_ResumeDialysis+0x2ec>)
   87ad4:	2018      	movs	r0, #24
   87ad6:	4b21      	ldr	r3, [pc, #132]	; (87b5c <Cl_Dlsis_ResumeDialysis+0x2f0>)
   87ad8:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   87ada:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   87ade:	2002      	movs	r0, #2
   87ae0:	4b1b      	ldr	r3, [pc, #108]	; (87b50 <Cl_Dlsis_ResumeDialysis+0x2e4>)
   87ae2:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   87ae4:	f240 414c 	movw	r1, #1100	; 0x44c
   87ae8:	2001      	movs	r0, #1
   87aea:	4b19      	ldr	r3, [pc, #100]	; (87b50 <Cl_Dlsis_ResumeDialysis+0x2e4>)
   87aec:	4798      	blx	r3
										potvalue = (670 * 1024)/10000;
   87aee:	2344      	movs	r3, #68	; 0x44
   87af0:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   87af2:	887b      	ldrh	r3, [r7, #2]
   87af4:	4618      	mov	r0, r3
   87af6:	4b17      	ldr	r3, [pc, #92]	; (87b54 <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87af8:	4798      	blx	r3
										break;
   87afa:	e042      	b.n	87b82 <Cl_Dlsis_ResumeDialysis+0x316>
										
									
										case 300:
										sv_cntrl_setpumpspeed(DCMOTOR2,1120);
   87afc:	f44f 618c 	mov.w	r1, #1120	; 0x460
   87b00:	2002      	movs	r0, #2
   87b02:	4b13      	ldr	r3, [pc, #76]	; (87b50 <Cl_Dlsis_ResumeDialysis+0x2e4>)
   87b04:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,620);
   87b06:	f44f 711b 	mov.w	r1, #620	; 0x26c
   87b0a:	2001      	movs	r0, #1
   87b0c:	4b10      	ldr	r3, [pc, #64]	; (87b50 <Cl_Dlsis_ResumeDialysis+0x2e4>)
   87b0e:	4798      	blx	r3
										potvalue = (800 * 1024)/10000;
   87b10:	2351      	movs	r3, #81	; 0x51
   87b12:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   87b14:	887b      	ldrh	r3, [r7, #2]
   87b16:	4618      	mov	r0, r3
   87b18:	4b0e      	ldr	r3, [pc, #56]	; (87b54 <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87b1a:	4798      	blx	r3
										break;
   87b1c:	e031      	b.n	87b82 <Cl_Dlsis_ResumeDialysis+0x316>
   87b1e:	bf00      	nop
   87b20:	00082ea1 	.word	0x00082ea1
   87b24:	00082efd 	.word	0x00082efd
   87b28:	200709ee 	.word	0x200709ee
   87b2c:	00097b3d 	.word	0x00097b3d
   87b30:	00097af9 	.word	0x00097af9
   87b34:	0009790d 	.word	0x0009790d
   87b38:	00083319 	.word	0x00083319
   87b3c:	00088a91 	.word	0x00088a91
   87b40:	00091eb5 	.word	0x00091eb5
   87b44:	00091e2d 	.word	0x00091e2d
   87b48:	200731a4 	.word	0x200731a4
   87b4c:	200720f0 	.word	0x200720f0
   87b50:	00097a25 	.word	0x00097a25
   87b54:	00097e55 	.word	0x00097e55
   87b58:	000a5e64 	.word	0x000a5e64
   87b5c:	00099729 	.word	0x00099729
										
										default:
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   87b60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   87b64:	2002      	movs	r0, #2
   87b66:	4b0e      	ldr	r3, [pc, #56]	; (87ba0 <Cl_Dlsis_ResumeDialysis+0x334>)
   87b68:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   87b6a:	f240 414c 	movw	r1, #1100	; 0x44c
   87b6e:	2001      	movs	r0, #1
   87b70:	4b0b      	ldr	r3, [pc, #44]	; (87ba0 <Cl_Dlsis_ResumeDialysis+0x334>)
   87b72:	4798      	blx	r3
										potvalue = (670 * 1024)/10000;
   87b74:	2344      	movs	r3, #68	; 0x44
   87b76:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   87b78:	887b      	ldrh	r3, [r7, #2]
   87b7a:	4618      	mov	r0, r3
   87b7c:	4b09      	ldr	r3, [pc, #36]	; (87ba4 <Cl_Dlsis_ResumeDialysis+0x338>)
   87b7e:	4798      	blx	r3
										break;
   87b80:	bf00      	nop
									}
									bc_flag = 1;
   87b82:	4b09      	ldr	r3, [pc, #36]	; (87ba8 <Cl_Dlsis_ResumeDialysis+0x33c>)
   87b84:	2201      	movs	r2, #1
   87b86:	701a      	strb	r2, [r3, #0]
									Cl_dlsisretcode = Cl_Dlsis_UpdateTimeInfo();
   87b88:	4b08      	ldr	r3, [pc, #32]	; (87bac <Cl_Dlsis_ResumeDialysis+0x340>)
   87b8a:	4798      	blx	r3
   87b8c:	4603      	mov	r3, r0
   87b8e:	73fb      	strb	r3, [r7, #15]
									cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY;
   87b90:	4b07      	ldr	r3, [pc, #28]	; (87bb0 <Cl_Dlsis_ResumeDialysis+0x344>)
   87b92:	2202      	movs	r2, #2
   87b94:	701a      	strb	r2, [r3, #0]
									
									return 0;	
   87b96:	2300      	movs	r3, #0
}
   87b98:	4618      	mov	r0, r3
   87b9a:	3714      	adds	r7, #20
   87b9c:	46bd      	mov	sp, r7
   87b9e:	bd90      	pop	{r4, r7, pc}
   87ba0:	00097a25 	.word	0x00097a25
   87ba4:	00097e55 	.word	0x00097e55
   87ba8:	200720ef 	.word	0x200720ef
   87bac:	00086491 	.word	0x00086491
   87bb0:	200720d0 	.word	0x200720d0

00087bb4 <Cl_Dlsis_safesate>:

Cl_ReturnCodeType	Cl_Dlsis_safesate(void)
{
   87bb4:	b580      	push	{r7, lr}
   87bb6:	af00      	add	r7, sp, #0
	
	sv_cntrl_enable_bypass();
   87bb8:	4b09      	ldr	r3, [pc, #36]	; (87be0 <Cl_Dlsis_safesate+0x2c>)
   87bba:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   87bbc:	2100      	movs	r1, #0
   87bbe:	2004      	movs	r0, #4
   87bc0:	4b08      	ldr	r3, [pc, #32]	; (87be4 <Cl_Dlsis_safesate+0x30>)
   87bc2:	4798      	blx	r3
	cl_bp_controller(CL_BP_EVENT_STOP,0);
   87bc4:	2100      	movs	r1, #0
   87bc6:	2004      	movs	r0, #4
   87bc8:	4b07      	ldr	r3, [pc, #28]	; (87be8 <Cl_Dlsis_safesate+0x34>)
   87bca:	4798      	blx	r3
	sv_cntrl_deactivatevenousclamp();
   87bcc:	4b07      	ldr	r3, [pc, #28]	; (87bec <Cl_Dlsis_safesate+0x38>)
   87bce:	4798      	blx	r3
	Cl_Dlsis_BypassDialysis();
   87bd0:	4b07      	ldr	r3, [pc, #28]	; (87bf0 <Cl_Dlsis_safesate+0x3c>)
   87bd2:	4798      	blx	r3
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   87bd4:	4b07      	ldr	r3, [pc, #28]	; (87bf4 <Cl_Dlsis_safesate+0x40>)
   87bd6:	220a      	movs	r2, #10
   87bd8:	701a      	strb	r2, [r3, #0]
	
	return 0;
   87bda:	2300      	movs	r3, #0
}
   87bdc:	4618      	mov	r0, r3
   87bde:	bd80      	pop	{r7, pc}
   87be0:	00097b59 	.word	0x00097b59
   87be4:	00093cd9 	.word	0x00093cd9
   87be8:	00091eb5 	.word	0x00091eb5
   87bec:	00097b0d 	.word	0x00097b0d
   87bf0:	00086a8d 	.word	0x00086a8d
   87bf4:	200720d0 	.word	0x200720d0

00087bf8 <cl_temp_safestate>:
	//sv_cntrl_nobuzzer();
	
	return 0;
}
Cl_ReturnCodeType cl_temp_safestate(void)
{
   87bf8:	b580      	push	{r7, lr}
   87bfa:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BYPASS",6);
   87bfc:	2206      	movs	r2, #6
   87bfe:	490a      	ldr	r1, [pc, #40]	; (87c28 <cl_temp_safestate+0x30>)
   87c00:	2018      	movs	r0, #24
   87c02:	4b0a      	ldr	r3, [pc, #40]	; (87c2c <cl_temp_safestate+0x34>)
   87c04:	4798      	blx	r3
	sv_cntrl_enable_bypass();
   87c06:	4b0a      	ldr	r3, [pc, #40]	; (87c30 <cl_temp_safestate+0x38>)
   87c08:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   87c0a:	2100      	movs	r1, #0
   87c0c:	2004      	movs	r0, #4
   87c0e:	4b09      	ldr	r3, [pc, #36]	; (87c34 <cl_temp_safestate+0x3c>)
   87c10:	4798      	blx	r3
	sv_cntrl_deactivatevenousclamp();
   87c12:	4b09      	ldr	r3, [pc, #36]	; (87c38 <cl_temp_safestate+0x40>)
   87c14:	4798      	blx	r3
	Cl_Dlsis_BypassDialysis();
   87c16:	4b09      	ldr	r3, [pc, #36]	; (87c3c <cl_temp_safestate+0x44>)
   87c18:	4798      	blx	r3
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   87c1a:	4b09      	ldr	r3, [pc, #36]	; (87c40 <cl_temp_safestate+0x48>)
   87c1c:	220a      	movs	r2, #10
   87c1e:	701a      	strb	r2, [r3, #0]
	return 0;
   87c20:	2300      	movs	r3, #0
}
   87c22:	4618      	mov	r0, r3
   87c24:	bd80      	pop	{r7, pc}
   87c26:	bf00      	nop
   87c28:	000a5e68 	.word	0x000a5e68
   87c2c:	00099729 	.word	0x00099729
   87c30:	00097b59 	.word	0x00097b59
   87c34:	00093cd9 	.word	0x00093cd9
   87c38:	00097b0d 	.word	0x00097b0d
   87c3c:	00086a8d 	.word	0x00086a8d
   87c40:	200720d0 	.word	0x200720d0

00087c44 <cl_cond_safestate>:
	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
	return 0;
}

Cl_ReturnCodeType cl_cond_safestate(void)
{
   87c44:	b580      	push	{r7, lr}
   87c46:	af00      	add	r7, sp, #0
	//sv_cntrl_enable_bypass();
	Cl_Dlsis_BypassDialysis();
   87c48:	4b03      	ldr	r3, [pc, #12]	; (87c58 <cl_cond_safestate+0x14>)
   87c4a:	4798      	blx	r3
	//sv_cntrl_deactivatepump(DCMOTOR1);
	//sv_cntrl_deactivatepump(DCMOTOR2);
	
	//sv_cntrl_setflowpath(FLOW_PATH_BC_ALARM);
	//SetHeaterState(CL_HEATER_STATE_CLOSED_HEATING);
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   87c4c:	4b03      	ldr	r3, [pc, #12]	; (87c5c <cl_cond_safestate+0x18>)
   87c4e:	220a      	movs	r2, #10
   87c50:	701a      	strb	r2, [r3, #0]
	return 0;
   87c52:	2300      	movs	r3, #0
}
   87c54:	4618      	mov	r0, r3
   87c56:	bd80      	pop	{r7, pc}
   87c58:	00086a8d 	.word	0x00086a8d
   87c5c:	200720d0 	.word	0x200720d0

00087c60 <cl_dprep_primeInit>:
   87c60:	b480      	push	{r7}
   87c62:	af00      	add	r7, sp, #0
   87c64:	4b0b      	ldr	r3, [pc, #44]	; (87c94 <cl_dprep_primeInit+0x34>)
   87c66:	2200      	movs	r2, #0
   87c68:	701a      	strb	r2, [r3, #0]
   87c6a:	4b0b      	ldr	r3, [pc, #44]	; (87c98 <cl_dprep_primeInit+0x38>)
   87c6c:	2200      	movs	r2, #0
   87c6e:	701a      	strb	r2, [r3, #0]
   87c70:	4b0a      	ldr	r3, [pc, #40]	; (87c9c <cl_dprep_primeInit+0x3c>)
   87c72:	2200      	movs	r2, #0
   87c74:	701a      	strb	r2, [r3, #0]
   87c76:	4b0a      	ldr	r3, [pc, #40]	; (87ca0 <cl_dprep_primeInit+0x40>)
   87c78:	2200      	movs	r2, #0
   87c7a:	701a      	strb	r2, [r3, #0]
   87c7c:	4b09      	ldr	r3, [pc, #36]	; (87ca4 <cl_dprep_primeInit+0x44>)
   87c7e:	2200      	movs	r2, #0
   87c80:	701a      	strb	r2, [r3, #0]
   87c82:	4b09      	ldr	r3, [pc, #36]	; (87ca8 <cl_dprep_primeInit+0x48>)
   87c84:	2200      	movs	r2, #0
   87c86:	701a      	strb	r2, [r3, #0]
   87c88:	bf00      	nop
   87c8a:	4618      	mov	r0, r3
   87c8c:	46bd      	mov	sp, r7
   87c8e:	bc80      	pop	{r7}
   87c90:	4770      	bx	lr
   87c92:	bf00      	nop
   87c94:	2007212c 	.word	0x2007212c
   87c98:	2007212d 	.word	0x2007212d
   87c9c:	2007212e 	.word	0x2007212e
   87ca0:	2007212f 	.word	0x2007212f
   87ca4:	20072130 	.word	0x20072130
   87ca8:	20072131 	.word	0x20072131

00087cac <cl_dprep_primecontroller>:
   87cac:	b580      	push	{r7, lr}
   87cae:	b084      	sub	sp, #16
   87cb0:	af00      	add	r7, sp, #0
   87cb2:	4603      	mov	r3, r0
   87cb4:	460a      	mov	r2, r1
   87cb6:	71fb      	strb	r3, [r7, #7]
   87cb8:	4613      	mov	r3, r2
   87cba:	80bb      	strh	r3, [r7, #4]
   87cbc:	2304      	movs	r3, #4
   87cbe:	73fb      	strb	r3, [r7, #15]
   87cc0:	79fb      	ldrb	r3, [r7, #7]
   87cc2:	2b0b      	cmp	r3, #11
   87cc4:	d103      	bne.n	87cce <cl_dprep_primecontroller+0x22>
   87cc6:	4bbc      	ldr	r3, [pc, #752]	; (87fb8 <cl_dprep_primecontroller+0x30c>)
   87cc8:	781a      	ldrb	r2, [r3, #0]
   87cca:	4bbc      	ldr	r3, [pc, #752]	; (87fbc <cl_dprep_primecontroller+0x310>)
   87ccc:	701a      	strb	r2, [r3, #0]
   87cce:	4bba      	ldr	r3, [pc, #744]	; (87fb8 <cl_dprep_primecontroller+0x30c>)
   87cd0:	781b      	ldrb	r3, [r3, #0]
   87cd2:	2b0c      	cmp	r3, #12
   87cd4:	f200 849b 	bhi.w	8860e <cl_dprep_primecontroller+0x962>
   87cd8:	a201      	add	r2, pc, #4	; (adr r2, 87ce0 <cl_dprep_primecontroller+0x34>)
   87cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   87cde:	bf00      	nop
   87ce0:	00087d15 	.word	0x00087d15
   87ce4:	00087d79 	.word	0x00087d79
   87ce8:	00088025 	.word	0x00088025
   87cec:	00087e89 	.word	0x00087e89
   87cf0:	00087f39 	.word	0x00087f39
   87cf4:	00088147 	.word	0x00088147
   87cf8:	0008824b 	.word	0x0008824b
   87cfc:	0008860f 	.word	0x0008860f
   87d00:	000882b9 	.word	0x000882b9
   87d04:	000883db 	.word	0x000883db
   87d08:	0008860f 	.word	0x0008860f
   87d0c:	000884c9 	.word	0x000884c9
   87d10:	00088545 	.word	0x00088545
   87d14:	79fb      	ldrb	r3, [r7, #7]
   87d16:	2b01      	cmp	r3, #1
   87d18:	d009      	beq.n	87d2e <cl_dprep_primecontroller+0x82>
   87d1a:	2b0e      	cmp	r3, #14
   87d1c:	d000      	beq.n	87d20 <cl_dprep_primecontroller+0x74>
   87d1e:	e029      	b.n	87d74 <cl_dprep_primecontroller+0xc8>
   87d20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   87d24:	4619      	mov	r1, r3
   87d26:	2001      	movs	r0, #1
   87d28:	4ba5      	ldr	r3, [pc, #660]	; (87fc0 <cl_dprep_primecontroller+0x314>)
   87d2a:	4798      	blx	r3
   87d2c:	e022      	b.n	87d74 <cl_dprep_primecontroller+0xc8>
   87d2e:	2206      	movs	r2, #6
   87d30:	49a4      	ldr	r1, [pc, #656]	; (87fc4 <cl_dprep_primecontroller+0x318>)
   87d32:	2018      	movs	r0, #24
   87d34:	4ba4      	ldr	r3, [pc, #656]	; (87fc8 <cl_dprep_primecontroller+0x31c>)
   87d36:	4798      	blx	r3
   87d38:	4ba4      	ldr	r3, [pc, #656]	; (87fcc <cl_dprep_primecontroller+0x320>)
   87d3a:	4798      	blx	r3
   87d3c:	2100      	movs	r1, #0
   87d3e:	2002      	movs	r0, #2
   87d40:	4b9f      	ldr	r3, [pc, #636]	; (87fc0 <cl_dprep_primecontroller+0x314>)
   87d42:	4798      	blx	r3
   87d44:	1d3b      	adds	r3, r7, #4
   87d46:	2200      	movs	r2, #0
   87d48:	4619      	mov	r1, r3
   87d4a:	200d      	movs	r0, #13
   87d4c:	4b9e      	ldr	r3, [pc, #632]	; (87fc8 <cl_dprep_primecontroller+0x31c>)
   87d4e:	4798      	blx	r3
   87d50:	4603      	mov	r3, r0
   87d52:	73fb      	strb	r3, [r7, #15]
   87d54:	1d3b      	adds	r3, r7, #4
   87d56:	2200      	movs	r2, #0
   87d58:	4619      	mov	r1, r3
   87d5a:	2024      	movs	r0, #36	; 0x24
   87d5c:	4b9a      	ldr	r3, [pc, #616]	; (87fc8 <cl_dprep_primecontroller+0x31c>)
   87d5e:	4798      	blx	r3
   87d60:	4603      	mov	r3, r0
   87d62:	73fb      	strb	r3, [r7, #15]
   87d64:	4b9a      	ldr	r3, [pc, #616]	; (87fd0 <cl_dprep_primecontroller+0x324>)
   87d66:	4798      	blx	r3
   87d68:	4603      	mov	r3, r0
   87d6a:	73fb      	strb	r3, [r7, #15]
   87d6c:	4b92      	ldr	r3, [pc, #584]	; (87fb8 <cl_dprep_primecontroller+0x30c>)
   87d6e:	2201      	movs	r2, #1
   87d70:	701a      	strb	r2, [r3, #0]
   87d72:	bf00      	nop
   87d74:	f000 bc4b 	b.w	8860e <cl_dprep_primecontroller+0x962>
   87d78:	79fb      	ldrb	r3, [r7, #7]
   87d7a:	3b02      	subs	r3, #2
   87d7c:	2b0c      	cmp	r3, #12
   87d7e:	d87f      	bhi.n	87e80 <cl_dprep_primecontroller+0x1d4>
   87d80:	a201      	add	r2, pc, #4	; (adr r2, 87d88 <cl_dprep_primecontroller+0xdc>)
   87d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   87d86:	bf00      	nop
   87d88:	00087e2f 	.word	0x00087e2f
   87d8c:	00087dbd 	.word	0x00087dbd
   87d90:	00087e4f 	.word	0x00087e4f
   87d94:	00087e81 	.word	0x00087e81
   87d98:	00087e81 	.word	0x00087e81
   87d9c:	00087e81 	.word	0x00087e81
   87da0:	00087e81 	.word	0x00087e81
   87da4:	00087e81 	.word	0x00087e81
   87da8:	00087e81 	.word	0x00087e81
   87dac:	00087dc5 	.word	0x00087dc5
   87db0:	00087e5f 	.word	0x00087e5f
   87db4:	00087e69 	.word	0x00087e69
   87db8:	00087e73 	.word	0x00087e73
   87dbc:	4b7e      	ldr	r3, [pc, #504]	; (87fb8 <cl_dprep_primecontroller+0x30c>)
   87dbe:	2203      	movs	r2, #3
   87dc0:	701a      	strb	r2, [r3, #0]
   87dc2:	e060      	b.n	87e86 <cl_dprep_primecontroller+0x1da>
   87dc4:	2002      	movs	r0, #2
   87dc6:	4b83      	ldr	r3, [pc, #524]	; (87fd4 <cl_dprep_primecontroller+0x328>)
   87dc8:	4798      	blx	r3
   87dca:	4603      	mov	r3, r0
   87dcc:	73fb      	strb	r3, [r7, #15]
   87dce:	4b82      	ldr	r3, [pc, #520]	; (87fd8 <cl_dprep_primecontroller+0x32c>)
   87dd0:	f993 3000 	ldrsb.w	r3, [r3]
   87dd4:	b2da      	uxtb	r2, r3
   87dd6:	3201      	adds	r2, #1
   87dd8:	b2d2      	uxtb	r2, r2
   87dda:	b251      	sxtb	r1, r2
   87ddc:	4a7e      	ldr	r2, [pc, #504]	; (87fd8 <cl_dprep_primecontroller+0x32c>)
   87dde:	7011      	strb	r1, [r2, #0]
   87de0:	2b3b      	cmp	r3, #59	; 0x3b
   87de2:	dd0f      	ble.n	87e04 <cl_dprep_primecontroller+0x158>
   87de4:	4b7c      	ldr	r3, [pc, #496]	; (87fd8 <cl_dprep_primecontroller+0x32c>)
   87de6:	2200      	movs	r2, #0
   87de8:	701a      	strb	r2, [r3, #0]
   87dea:	4b7c      	ldr	r3, [pc, #496]	; (87fdc <cl_dprep_primecontroller+0x330>)
   87dec:	f993 3000 	ldrsb.w	r3, [r3]
   87df0:	b2db      	uxtb	r3, r3
   87df2:	3301      	adds	r3, #1
   87df4:	b2db      	uxtb	r3, r3
   87df6:	b25a      	sxtb	r2, r3
   87df8:	4b78      	ldr	r3, [pc, #480]	; (87fdc <cl_dprep_primecontroller+0x330>)
   87dfa:	701a      	strb	r2, [r3, #0]
   87dfc:	4b74      	ldr	r3, [pc, #464]	; (87fd0 <cl_dprep_primecontroller+0x324>)
   87dfe:	4798      	blx	r3
   87e00:	4603      	mov	r3, r0
   87e02:	73fb      	strb	r3, [r7, #15]
   87e04:	4b75      	ldr	r3, [pc, #468]	; (87fdc <cl_dprep_primecontroller+0x330>)
   87e06:	f993 3000 	ldrsb.w	r3, [r3]
   87e0a:	2b00      	cmp	r3, #0
   87e0c:	dd3a      	ble.n	87e84 <cl_dprep_primecontroller+0x1d8>
   87e0e:	2100      	movs	r1, #0
   87e10:	2004      	movs	r0, #4
   87e12:	4b6b      	ldr	r3, [pc, #428]	; (87fc0 <cl_dprep_primecontroller+0x314>)
   87e14:	4798      	blx	r3
   87e16:	1d3b      	adds	r3, r7, #4
   87e18:	2200      	movs	r2, #0
   87e1a:	4619      	mov	r1, r3
   87e1c:	200f      	movs	r0, #15
   87e1e:	4b6a      	ldr	r3, [pc, #424]	; (87fc8 <cl_dprep_primecontroller+0x31c>)
   87e20:	4798      	blx	r3
   87e22:	4603      	mov	r3, r0
   87e24:	73fb      	strb	r3, [r7, #15]
   87e26:	4b64      	ldr	r3, [pc, #400]	; (87fb8 <cl_dprep_primecontroller+0x30c>)
   87e28:	2202      	movs	r2, #2
   87e2a:	701a      	strb	r2, [r3, #0]
   87e2c:	e02a      	b.n	87e84 <cl_dprep_primecontroller+0x1d8>
   87e2e:	2100      	movs	r1, #0
   87e30:	2004      	movs	r0, #4
   87e32:	4b63      	ldr	r3, [pc, #396]	; (87fc0 <cl_dprep_primecontroller+0x314>)
   87e34:	4798      	blx	r3
   87e36:	1d3b      	adds	r3, r7, #4
   87e38:	2200      	movs	r2, #0
   87e3a:	4619      	mov	r1, r3
   87e3c:	2023      	movs	r0, #35	; 0x23
   87e3e:	4b62      	ldr	r3, [pc, #392]	; (87fc8 <cl_dprep_primecontroller+0x31c>)
   87e40:	4798      	blx	r3
   87e42:	4603      	mov	r3, r0
   87e44:	73fb      	strb	r3, [r7, #15]
   87e46:	4b5c      	ldr	r3, [pc, #368]	; (87fb8 <cl_dprep_primecontroller+0x30c>)
   87e48:	2203      	movs	r2, #3
   87e4a:	701a      	strb	r2, [r3, #0]
   87e4c:	e01b      	b.n	87e86 <cl_dprep_primecontroller+0x1da>
   87e4e:	2100      	movs	r1, #0
   87e50:	2004      	movs	r0, #4
   87e52:	4b5b      	ldr	r3, [pc, #364]	; (87fc0 <cl_dprep_primecontroller+0x314>)
   87e54:	4798      	blx	r3
   87e56:	4b58      	ldr	r3, [pc, #352]	; (87fb8 <cl_dprep_primecontroller+0x30c>)
   87e58:	2204      	movs	r2, #4
   87e5a:	701a      	strb	r2, [r3, #0]
   87e5c:	e013      	b.n	87e86 <cl_dprep_primecontroller+0x1da>
   87e5e:	2100      	movs	r1, #0
   87e60:	2002      	movs	r0, #2
   87e62:	4b57      	ldr	r3, [pc, #348]	; (87fc0 <cl_dprep_primecontroller+0x314>)
   87e64:	4798      	blx	r3
   87e66:	e00e      	b.n	87e86 <cl_dprep_primecontroller+0x1da>
   87e68:	2100      	movs	r1, #0
   87e6a:	2004      	movs	r0, #4
   87e6c:	4b54      	ldr	r3, [pc, #336]	; (87fc0 <cl_dprep_primecontroller+0x314>)
   87e6e:	4798      	blx	r3
   87e70:	e009      	b.n	87e86 <cl_dprep_primecontroller+0x1da>
   87e72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   87e76:	4619      	mov	r1, r3
   87e78:	2001      	movs	r0, #1
   87e7a:	4b51      	ldr	r3, [pc, #324]	; (87fc0 <cl_dprep_primecontroller+0x314>)
   87e7c:	4798      	blx	r3
   87e7e:	e002      	b.n	87e86 <cl_dprep_primecontroller+0x1da>
   87e80:	bf00      	nop
   87e82:	e3c4      	b.n	8860e <cl_dprep_primecontroller+0x962>
   87e84:	bf00      	nop
   87e86:	e3c2      	b.n	8860e <cl_dprep_primecontroller+0x962>
   87e88:	79fb      	ldrb	r3, [r7, #7]
   87e8a:	3b01      	subs	r3, #1
   87e8c:	2b0d      	cmp	r3, #13
   87e8e:	f200 8399 	bhi.w	885c4 <cl_dprep_primecontroller+0x918>
   87e92:	a201      	add	r2, pc, #4	; (adr r2, 87e98 <cl_dprep_primecontroller+0x1ec>)
   87e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   87e98:	00087ed1 	.word	0x00087ed1
   87e9c:	000885c5 	.word	0x000885c5
   87ea0:	000885c5 	.word	0x000885c5
   87ea4:	000885c5 	.word	0x000885c5
   87ea8:	000885c5 	.word	0x000885c5
   87eac:	000885c5 	.word	0x000885c5
   87eb0:	000885c5 	.word	0x000885c5
   87eb4:	000885c5 	.word	0x000885c5
   87eb8:	000885c5 	.word	0x000885c5
   87ebc:	000885c5 	.word	0x000885c5
   87ec0:	000885c5 	.word	0x000885c5
   87ec4:	00087f15 	.word	0x00087f15
   87ec8:	00087f1f 	.word	0x00087f1f
   87ecc:	00087f29 	.word	0x00087f29
   87ed0:	2100      	movs	r1, #0
   87ed2:	2002      	movs	r0, #2
   87ed4:	4b3a      	ldr	r3, [pc, #232]	; (87fc0 <cl_dprep_primecontroller+0x314>)
   87ed6:	4798      	blx	r3
   87ed8:	4b40      	ldr	r3, [pc, #256]	; (87fdc <cl_dprep_primecontroller+0x330>)
   87eda:	2200      	movs	r2, #0
   87edc:	701a      	strb	r2, [r3, #0]
   87ede:	4b3e      	ldr	r3, [pc, #248]	; (87fd8 <cl_dprep_primecontroller+0x32c>)
   87ee0:	2200      	movs	r2, #0
   87ee2:	701a      	strb	r2, [r3, #0]
   87ee4:	1d3b      	adds	r3, r7, #4
   87ee6:	2200      	movs	r2, #0
   87ee8:	4619      	mov	r1, r3
   87eea:	200d      	movs	r0, #13
   87eec:	4b36      	ldr	r3, [pc, #216]	; (87fc8 <cl_dprep_primecontroller+0x31c>)
   87eee:	4798      	blx	r3
   87ef0:	4603      	mov	r3, r0
   87ef2:	73fb      	strb	r3, [r7, #15]
   87ef4:	1d3b      	adds	r3, r7, #4
   87ef6:	2200      	movs	r2, #0
   87ef8:	4619      	mov	r1, r3
   87efa:	2024      	movs	r0, #36	; 0x24
   87efc:	4b32      	ldr	r3, [pc, #200]	; (87fc8 <cl_dprep_primecontroller+0x31c>)
   87efe:	4798      	blx	r3
   87f00:	4603      	mov	r3, r0
   87f02:	73fb      	strb	r3, [r7, #15]
   87f04:	4b32      	ldr	r3, [pc, #200]	; (87fd0 <cl_dprep_primecontroller+0x324>)
   87f06:	4798      	blx	r3
   87f08:	4603      	mov	r3, r0
   87f0a:	73fb      	strb	r3, [r7, #15]
   87f0c:	4b2a      	ldr	r3, [pc, #168]	; (87fb8 <cl_dprep_primecontroller+0x30c>)
   87f0e:	2201      	movs	r2, #1
   87f10:	701a      	strb	r2, [r3, #0]
   87f12:	e010      	b.n	87f36 <cl_dprep_primecontroller+0x28a>
   87f14:	2100      	movs	r1, #0
   87f16:	2002      	movs	r0, #2
   87f18:	4b29      	ldr	r3, [pc, #164]	; (87fc0 <cl_dprep_primecontroller+0x314>)
   87f1a:	4798      	blx	r3
   87f1c:	e00b      	b.n	87f36 <cl_dprep_primecontroller+0x28a>
   87f1e:	2100      	movs	r1, #0
   87f20:	2004      	movs	r0, #4
   87f22:	4b27      	ldr	r3, [pc, #156]	; (87fc0 <cl_dprep_primecontroller+0x314>)
   87f24:	4798      	blx	r3
   87f26:	e006      	b.n	87f36 <cl_dprep_primecontroller+0x28a>
   87f28:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   87f2c:	4619      	mov	r1, r3
   87f2e:	2001      	movs	r0, #1
   87f30:	4b23      	ldr	r3, [pc, #140]	; (87fc0 <cl_dprep_primecontroller+0x314>)
   87f32:	4798      	blx	r3
   87f34:	bf00      	nop
   87f36:	e345      	b.n	885c4 <cl_dprep_primecontroller+0x918>
   87f38:	79fb      	ldrb	r3, [r7, #7]
   87f3a:	3b01      	subs	r3, #1
   87f3c:	2b0d      	cmp	r3, #13
   87f3e:	f200 8343 	bhi.w	885c8 <cl_dprep_primecontroller+0x91c>
   87f42:	a201      	add	r2, pc, #4	; (adr r2, 87f48 <cl_dprep_primecontroller+0x29c>)
   87f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   87f48:	00087f81 	.word	0x00087f81
   87f4c:	00087fe1 	.word	0x00087fe1
   87f50:	000885c9 	.word	0x000885c9
   87f54:	000885c9 	.word	0x000885c9
   87f58:	000885c9 	.word	0x000885c9
   87f5c:	000885c9 	.word	0x000885c9
   87f60:	000885c9 	.word	0x000885c9
   87f64:	000885c9 	.word	0x000885c9
   87f68:	000885c9 	.word	0x000885c9
   87f6c:	000885c9 	.word	0x000885c9
   87f70:	000885c9 	.word	0x000885c9
   87f74:	00088001 	.word	0x00088001
   87f78:	0008800b 	.word	0x0008800b
   87f7c:	00088015 	.word	0x00088015
   87f80:	2100      	movs	r1, #0
   87f82:	2002      	movs	r0, #2
   87f84:	4b0e      	ldr	r3, [pc, #56]	; (87fc0 <cl_dprep_primecontroller+0x314>)
   87f86:	4798      	blx	r3
   87f88:	1d3b      	adds	r3, r7, #4
   87f8a:	2200      	movs	r2, #0
   87f8c:	4619      	mov	r1, r3
   87f8e:	200d      	movs	r0, #13
   87f90:	4b0d      	ldr	r3, [pc, #52]	; (87fc8 <cl_dprep_primecontroller+0x31c>)
   87f92:	4798      	blx	r3
   87f94:	4603      	mov	r3, r0
   87f96:	73fb      	strb	r3, [r7, #15]
   87f98:	1d3b      	adds	r3, r7, #4
   87f9a:	2200      	movs	r2, #0
   87f9c:	4619      	mov	r1, r3
   87f9e:	2024      	movs	r0, #36	; 0x24
   87fa0:	4b09      	ldr	r3, [pc, #36]	; (87fc8 <cl_dprep_primecontroller+0x31c>)
   87fa2:	4798      	blx	r3
   87fa4:	4603      	mov	r3, r0
   87fa6:	73fb      	strb	r3, [r7, #15]
   87fa8:	4b09      	ldr	r3, [pc, #36]	; (87fd0 <cl_dprep_primecontroller+0x324>)
   87faa:	4798      	blx	r3
   87fac:	4603      	mov	r3, r0
   87fae:	73fb      	strb	r3, [r7, #15]
   87fb0:	4b01      	ldr	r3, [pc, #4]	; (87fb8 <cl_dprep_primecontroller+0x30c>)
   87fb2:	2201      	movs	r2, #1
   87fb4:	701a      	strb	r2, [r3, #0]
   87fb6:	e034      	b.n	88022 <cl_dprep_primecontroller+0x376>
   87fb8:	2007212c 	.word	0x2007212c
   87fbc:	2007319c 	.word	0x2007319c
   87fc0:	00091eb5 	.word	0x00091eb5
   87fc4:	000a5e70 	.word	0x000a5e70
   87fc8:	00099729 	.word	0x00099729
   87fcc:	00097b81 	.word	0x00097b81
   87fd0:	00088619 	.word	0x00088619
   87fd4:	0009df69 	.word	0x0009df69
   87fd8:	2007212e 	.word	0x2007212e
   87fdc:	2007212f 	.word	0x2007212f
   87fe0:	2100      	movs	r1, #0
   87fe2:	2004      	movs	r0, #4
   87fe4:	4bab      	ldr	r3, [pc, #684]	; (88294 <cl_dprep_primecontroller+0x5e8>)
   87fe6:	4798      	blx	r3
   87fe8:	1d3b      	adds	r3, r7, #4
   87fea:	2200      	movs	r2, #0
   87fec:	4619      	mov	r1, r3
   87fee:	2023      	movs	r0, #35	; 0x23
   87ff0:	4ba9      	ldr	r3, [pc, #676]	; (88298 <cl_dprep_primecontroller+0x5ec>)
   87ff2:	4798      	blx	r3
   87ff4:	4603      	mov	r3, r0
   87ff6:	73fb      	strb	r3, [r7, #15]
   87ff8:	4ba8      	ldr	r3, [pc, #672]	; (8829c <cl_dprep_primecontroller+0x5f0>)
   87ffa:	2203      	movs	r2, #3
   87ffc:	701a      	strb	r2, [r3, #0]
   87ffe:	e010      	b.n	88022 <cl_dprep_primecontroller+0x376>
   88000:	2100      	movs	r1, #0
   88002:	2002      	movs	r0, #2
   88004:	4ba3      	ldr	r3, [pc, #652]	; (88294 <cl_dprep_primecontroller+0x5e8>)
   88006:	4798      	blx	r3
   88008:	e00b      	b.n	88022 <cl_dprep_primecontroller+0x376>
   8800a:	2100      	movs	r1, #0
   8800c:	2004      	movs	r0, #4
   8800e:	4ba1      	ldr	r3, [pc, #644]	; (88294 <cl_dprep_primecontroller+0x5e8>)
   88010:	4798      	blx	r3
   88012:	e006      	b.n	88022 <cl_dprep_primecontroller+0x376>
   88014:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88018:	4619      	mov	r1, r3
   8801a:	2001      	movs	r0, #1
   8801c:	4b9d      	ldr	r3, [pc, #628]	; (88294 <cl_dprep_primecontroller+0x5e8>)
   8801e:	4798      	blx	r3
   88020:	bf00      	nop
   88022:	e2d1      	b.n	885c8 <cl_dprep_primecontroller+0x91c>
   88024:	79fb      	ldrb	r3, [r7, #7]
   88026:	3b01      	subs	r3, #1
   88028:	2b0d      	cmp	r3, #13
   8802a:	f200 82cf 	bhi.w	885cc <cl_dprep_primecontroller+0x920>
   8802e:	a201      	add	r2, pc, #4	; (adr r2, 88034 <cl_dprep_primecontroller+0x388>)
   88030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88034:	000880ab 	.word	0x000880ab
   88038:	000885cd 	.word	0x000885cd
   8803c:	000885cd 	.word	0x000885cd
   88040:	000885cd 	.word	0x000885cd
   88044:	0008806d 	.word	0x0008806d
   88048:	00088143 	.word	0x00088143
   8804c:	000885cd 	.word	0x000885cd
   88050:	000880f9 	.word	0x000880f9
   88054:	000885cd 	.word	0x000885cd
   88058:	000885cd 	.word	0x000885cd
   8805c:	000885cd 	.word	0x000885cd
   88060:	00088121 	.word	0x00088121
   88064:	0008812b 	.word	0x0008812b
   88068:	00088135 	.word	0x00088135
   8806c:	2206      	movs	r2, #6
   8806e:	498c      	ldr	r1, [pc, #560]	; (882a0 <cl_dprep_primecontroller+0x5f4>)
   88070:	2018      	movs	r0, #24
   88072:	4b89      	ldr	r3, [pc, #548]	; (88298 <cl_dprep_primecontroller+0x5ec>)
   88074:	4798      	blx	r3
   88076:	4b8b      	ldr	r3, [pc, #556]	; (882a4 <cl_dprep_primecontroller+0x5f8>)
   88078:	2200      	movs	r2, #0
   8807a:	701a      	strb	r2, [r3, #0]
   8807c:	4b8a      	ldr	r3, [pc, #552]	; (882a8 <cl_dprep_primecontroller+0x5fc>)
   8807e:	2200      	movs	r2, #0
   88080:	701a      	strb	r2, [r3, #0]
   88082:	2100      	movs	r1, #0
   88084:	2002      	movs	r0, #2
   88086:	4b83      	ldr	r3, [pc, #524]	; (88294 <cl_dprep_primecontroller+0x5e8>)
   88088:	4798      	blx	r3
   8808a:	1d3b      	adds	r3, r7, #4
   8808c:	2200      	movs	r2, #0
   8808e:	4619      	mov	r1, r3
   88090:	202f      	movs	r0, #47	; 0x2f
   88092:	4b81      	ldr	r3, [pc, #516]	; (88298 <cl_dprep_primecontroller+0x5ec>)
   88094:	4798      	blx	r3
   88096:	4603      	mov	r3, r0
   88098:	73fb      	strb	r3, [r7, #15]
   8809a:	4b84      	ldr	r3, [pc, #528]	; (882ac <cl_dprep_primecontroller+0x600>)
   8809c:	4798      	blx	r3
   8809e:	4603      	mov	r3, r0
   880a0:	73fb      	strb	r3, [r7, #15]
   880a2:	4b7e      	ldr	r3, [pc, #504]	; (8829c <cl_dprep_primecontroller+0x5f0>)
   880a4:	2205      	movs	r2, #5
   880a6:	701a      	strb	r2, [r3, #0]
   880a8:	e04c      	b.n	88144 <cl_dprep_primecontroller+0x498>
   880aa:	2206      	movs	r2, #6
   880ac:	4980      	ldr	r1, [pc, #512]	; (882b0 <cl_dprep_primecontroller+0x604>)
   880ae:	2018      	movs	r0, #24
   880b0:	4b79      	ldr	r3, [pc, #484]	; (88298 <cl_dprep_primecontroller+0x5ec>)
   880b2:	4798      	blx	r3
   880b4:	4b7b      	ldr	r3, [pc, #492]	; (882a4 <cl_dprep_primecontroller+0x5f8>)
   880b6:	2200      	movs	r2, #0
   880b8:	701a      	strb	r2, [r3, #0]
   880ba:	4b7b      	ldr	r3, [pc, #492]	; (882a8 <cl_dprep_primecontroller+0x5fc>)
   880bc:	2200      	movs	r2, #0
   880be:	701a      	strb	r2, [r3, #0]
   880c0:	2100      	movs	r1, #0
   880c2:	2002      	movs	r0, #2
   880c4:	4b73      	ldr	r3, [pc, #460]	; (88294 <cl_dprep_primecontroller+0x5e8>)
   880c6:	4798      	blx	r3
   880c8:	1d3b      	adds	r3, r7, #4
   880ca:	2200      	movs	r2, #0
   880cc:	4619      	mov	r1, r3
   880ce:	200d      	movs	r0, #13
   880d0:	4b71      	ldr	r3, [pc, #452]	; (88298 <cl_dprep_primecontroller+0x5ec>)
   880d2:	4798      	blx	r3
   880d4:	4603      	mov	r3, r0
   880d6:	73fb      	strb	r3, [r7, #15]
   880d8:	1d3b      	adds	r3, r7, #4
   880da:	2200      	movs	r2, #0
   880dc:	4619      	mov	r1, r3
   880de:	2024      	movs	r0, #36	; 0x24
   880e0:	4b6d      	ldr	r3, [pc, #436]	; (88298 <cl_dprep_primecontroller+0x5ec>)
   880e2:	4798      	blx	r3
   880e4:	4603      	mov	r3, r0
   880e6:	73fb      	strb	r3, [r7, #15]
   880e8:	4b70      	ldr	r3, [pc, #448]	; (882ac <cl_dprep_primecontroller+0x600>)
   880ea:	4798      	blx	r3
   880ec:	4603      	mov	r3, r0
   880ee:	73fb      	strb	r3, [r7, #15]
   880f0:	4b6a      	ldr	r3, [pc, #424]	; (8829c <cl_dprep_primecontroller+0x5f0>)
   880f2:	2201      	movs	r2, #1
   880f4:	701a      	strb	r2, [r3, #0]
   880f6:	e025      	b.n	88144 <cl_dprep_primecontroller+0x498>
   880f8:	2100      	movs	r1, #0
   880fa:	2002      	movs	r0, #2
   880fc:	4b65      	ldr	r3, [pc, #404]	; (88294 <cl_dprep_primecontroller+0x5e8>)
   880fe:	4798      	blx	r3
   88100:	1d3b      	adds	r3, r7, #4
   88102:	2200      	movs	r2, #0
   88104:	4619      	mov	r1, r3
   88106:	2028      	movs	r0, #40	; 0x28
   88108:	4b63      	ldr	r3, [pc, #396]	; (88298 <cl_dprep_primecontroller+0x5ec>)
   8810a:	4798      	blx	r3
   8810c:	4603      	mov	r3, r0
   8810e:	73fb      	strb	r3, [r7, #15]
   88110:	4b68      	ldr	r3, [pc, #416]	; (882b4 <cl_dprep_primecontroller+0x608>)
   88112:	4798      	blx	r3
   88114:	4603      	mov	r3, r0
   88116:	73fb      	strb	r3, [r7, #15]
   88118:	4b60      	ldr	r3, [pc, #384]	; (8829c <cl_dprep_primecontroller+0x5f0>)
   8811a:	2209      	movs	r2, #9
   8811c:	701a      	strb	r2, [r3, #0]
   8811e:	e011      	b.n	88144 <cl_dprep_primecontroller+0x498>
   88120:	2100      	movs	r1, #0
   88122:	2002      	movs	r0, #2
   88124:	4b5b      	ldr	r3, [pc, #364]	; (88294 <cl_dprep_primecontroller+0x5e8>)
   88126:	4798      	blx	r3
   88128:	e00c      	b.n	88144 <cl_dprep_primecontroller+0x498>
   8812a:	2100      	movs	r1, #0
   8812c:	2004      	movs	r0, #4
   8812e:	4b59      	ldr	r3, [pc, #356]	; (88294 <cl_dprep_primecontroller+0x5e8>)
   88130:	4798      	blx	r3
   88132:	e007      	b.n	88144 <cl_dprep_primecontroller+0x498>
   88134:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88138:	4619      	mov	r1, r3
   8813a:	2001      	movs	r0, #1
   8813c:	4b55      	ldr	r3, [pc, #340]	; (88294 <cl_dprep_primecontroller+0x5e8>)
   8813e:	4798      	blx	r3
   88140:	e000      	b.n	88144 <cl_dprep_primecontroller+0x498>
   88142:	bf00      	nop
   88144:	e242      	b.n	885cc <cl_dprep_primecontroller+0x920>
   88146:	79fb      	ldrb	r3, [r7, #7]
   88148:	3b02      	subs	r3, #2
   8814a:	2b0c      	cmp	r3, #12
   8814c:	d879      	bhi.n	88242 <cl_dprep_primecontroller+0x596>
   8814e:	a201      	add	r2, pc, #4	; (adr r2, 88154 <cl_dprep_primecontroller+0x4a8>)
   88150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88154:	000881f1 	.word	0x000881f1
   88158:	00088189 	.word	0x00088189
   8815c:	00088211 	.word	0x00088211
   88160:	00088243 	.word	0x00088243
   88164:	00088243 	.word	0x00088243
   88168:	00088243 	.word	0x00088243
   8816c:	00088243 	.word	0x00088243
   88170:	00088243 	.word	0x00088243
   88174:	00088243 	.word	0x00088243
   88178:	00088191 	.word	0x00088191
   8817c:	00088221 	.word	0x00088221
   88180:	0008822b 	.word	0x0008822b
   88184:	00088235 	.word	0x00088235
   88188:	4b44      	ldr	r3, [pc, #272]	; (8829c <cl_dprep_primecontroller+0x5f0>)
   8818a:	2206      	movs	r2, #6
   8818c:	701a      	strb	r2, [r3, #0]
   8818e:	e05b      	b.n	88248 <cl_dprep_primecontroller+0x59c>
   88190:	4b45      	ldr	r3, [pc, #276]	; (882a8 <cl_dprep_primecontroller+0x5fc>)
   88192:	f993 3000 	ldrsb.w	r3, [r3]
   88196:	b2da      	uxtb	r2, r3
   88198:	3201      	adds	r2, #1
   8819a:	b2d2      	uxtb	r2, r2
   8819c:	b251      	sxtb	r1, r2
   8819e:	4a42      	ldr	r2, [pc, #264]	; (882a8 <cl_dprep_primecontroller+0x5fc>)
   881a0:	7011      	strb	r1, [r2, #0]
   881a2:	2b3b      	cmp	r3, #59	; 0x3b
   881a4:	dd0f      	ble.n	881c6 <cl_dprep_primecontroller+0x51a>
   881a6:	4b40      	ldr	r3, [pc, #256]	; (882a8 <cl_dprep_primecontroller+0x5fc>)
   881a8:	2200      	movs	r2, #0
   881aa:	701a      	strb	r2, [r3, #0]
   881ac:	4b3d      	ldr	r3, [pc, #244]	; (882a4 <cl_dprep_primecontroller+0x5f8>)
   881ae:	f993 3000 	ldrsb.w	r3, [r3]
   881b2:	b2db      	uxtb	r3, r3
   881b4:	3301      	adds	r3, #1
   881b6:	b2db      	uxtb	r3, r3
   881b8:	b25a      	sxtb	r2, r3
   881ba:	4b3a      	ldr	r3, [pc, #232]	; (882a4 <cl_dprep_primecontroller+0x5f8>)
   881bc:	701a      	strb	r2, [r3, #0]
   881be:	4b3b      	ldr	r3, [pc, #236]	; (882ac <cl_dprep_primecontroller+0x600>)
   881c0:	4798      	blx	r3
   881c2:	4603      	mov	r3, r0
   881c4:	73fb      	strb	r3, [r7, #15]
   881c6:	4b37      	ldr	r3, [pc, #220]	; (882a4 <cl_dprep_primecontroller+0x5f8>)
   881c8:	f993 3000 	ldrsb.w	r3, [r3]
   881cc:	2b00      	cmp	r3, #0
   881ce:	dd3a      	ble.n	88246 <cl_dprep_primecontroller+0x59a>
   881d0:	2100      	movs	r1, #0
   881d2:	2004      	movs	r0, #4
   881d4:	4b2f      	ldr	r3, [pc, #188]	; (88294 <cl_dprep_primecontroller+0x5e8>)
   881d6:	4798      	blx	r3
   881d8:	1d3b      	adds	r3, r7, #4
   881da:	2200      	movs	r2, #0
   881dc:	4619      	mov	r1, r3
   881de:	2031      	movs	r0, #49	; 0x31
   881e0:	4b2d      	ldr	r3, [pc, #180]	; (88298 <cl_dprep_primecontroller+0x5ec>)
   881e2:	4798      	blx	r3
   881e4:	4603      	mov	r3, r0
   881e6:	73fb      	strb	r3, [r7, #15]
   881e8:	4b2c      	ldr	r3, [pc, #176]	; (8829c <cl_dprep_primecontroller+0x5f0>)
   881ea:	2208      	movs	r2, #8
   881ec:	701a      	strb	r2, [r3, #0]
   881ee:	e02a      	b.n	88246 <cl_dprep_primecontroller+0x59a>
   881f0:	2100      	movs	r1, #0
   881f2:	2004      	movs	r0, #4
   881f4:	4b27      	ldr	r3, [pc, #156]	; (88294 <cl_dprep_primecontroller+0x5e8>)
   881f6:	4798      	blx	r3
   881f8:	1d3b      	adds	r3, r7, #4
   881fa:	2200      	movs	r2, #0
   881fc:	4619      	mov	r1, r3
   881fe:	2023      	movs	r0, #35	; 0x23
   88200:	4b25      	ldr	r3, [pc, #148]	; (88298 <cl_dprep_primecontroller+0x5ec>)
   88202:	4798      	blx	r3
   88204:	4603      	mov	r3, r0
   88206:	73fb      	strb	r3, [r7, #15]
   88208:	4b24      	ldr	r3, [pc, #144]	; (8829c <cl_dprep_primecontroller+0x5f0>)
   8820a:	2203      	movs	r2, #3
   8820c:	701a      	strb	r2, [r3, #0]
   8820e:	e01b      	b.n	88248 <cl_dprep_primecontroller+0x59c>
   88210:	2100      	movs	r1, #0
   88212:	2004      	movs	r0, #4
   88214:	4b1f      	ldr	r3, [pc, #124]	; (88294 <cl_dprep_primecontroller+0x5e8>)
   88216:	4798      	blx	r3
   88218:	4b20      	ldr	r3, [pc, #128]	; (8829c <cl_dprep_primecontroller+0x5f0>)
   8821a:	2204      	movs	r2, #4
   8821c:	701a      	strb	r2, [r3, #0]
   8821e:	e013      	b.n	88248 <cl_dprep_primecontroller+0x59c>
   88220:	2100      	movs	r1, #0
   88222:	2002      	movs	r0, #2
   88224:	4b1b      	ldr	r3, [pc, #108]	; (88294 <cl_dprep_primecontroller+0x5e8>)
   88226:	4798      	blx	r3
   88228:	e00e      	b.n	88248 <cl_dprep_primecontroller+0x59c>
   8822a:	2100      	movs	r1, #0
   8822c:	2004      	movs	r0, #4
   8822e:	4b19      	ldr	r3, [pc, #100]	; (88294 <cl_dprep_primecontroller+0x5e8>)
   88230:	4798      	blx	r3
   88232:	e009      	b.n	88248 <cl_dprep_primecontroller+0x59c>
   88234:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88238:	4619      	mov	r1, r3
   8823a:	2001      	movs	r0, #1
   8823c:	4b15      	ldr	r3, [pc, #84]	; (88294 <cl_dprep_primecontroller+0x5e8>)
   8823e:	4798      	blx	r3
   88240:	e002      	b.n	88248 <cl_dprep_primecontroller+0x59c>
   88242:	bf00      	nop
   88244:	e1e3      	b.n	8860e <cl_dprep_primecontroller+0x962>
   88246:	bf00      	nop
   88248:	e1e1      	b.n	8860e <cl_dprep_primecontroller+0x962>
   8824a:	79fb      	ldrb	r3, [r7, #7]
   8824c:	2b05      	cmp	r3, #5
   8824e:	d000      	beq.n	88252 <cl_dprep_primecontroller+0x5a6>
   88250:	e01e      	b.n	88290 <cl_dprep_primecontroller+0x5e4>
   88252:	2206      	movs	r2, #6
   88254:	4912      	ldr	r1, [pc, #72]	; (882a0 <cl_dprep_primecontroller+0x5f4>)
   88256:	2018      	movs	r0, #24
   88258:	4b0f      	ldr	r3, [pc, #60]	; (88298 <cl_dprep_primecontroller+0x5ec>)
   8825a:	4798      	blx	r3
   8825c:	4b11      	ldr	r3, [pc, #68]	; (882a4 <cl_dprep_primecontroller+0x5f8>)
   8825e:	2200      	movs	r2, #0
   88260:	701a      	strb	r2, [r3, #0]
   88262:	4b11      	ldr	r3, [pc, #68]	; (882a8 <cl_dprep_primecontroller+0x5fc>)
   88264:	2200      	movs	r2, #0
   88266:	701a      	strb	r2, [r3, #0]
   88268:	2100      	movs	r1, #0
   8826a:	2002      	movs	r0, #2
   8826c:	4b09      	ldr	r3, [pc, #36]	; (88294 <cl_dprep_primecontroller+0x5e8>)
   8826e:	4798      	blx	r3
   88270:	1d3b      	adds	r3, r7, #4
   88272:	2200      	movs	r2, #0
   88274:	4619      	mov	r1, r3
   88276:	202f      	movs	r0, #47	; 0x2f
   88278:	4b07      	ldr	r3, [pc, #28]	; (88298 <cl_dprep_primecontroller+0x5ec>)
   8827a:	4798      	blx	r3
   8827c:	4603      	mov	r3, r0
   8827e:	73fb      	strb	r3, [r7, #15]
   88280:	4b0a      	ldr	r3, [pc, #40]	; (882ac <cl_dprep_primecontroller+0x600>)
   88282:	4798      	blx	r3
   88284:	4603      	mov	r3, r0
   88286:	73fb      	strb	r3, [r7, #15]
   88288:	4b04      	ldr	r3, [pc, #16]	; (8829c <cl_dprep_primecontroller+0x5f0>)
   8828a:	2205      	movs	r2, #5
   8828c:	701a      	strb	r2, [r3, #0]
   8828e:	bf00      	nop
   88290:	e1bd      	b.n	8860e <cl_dprep_primecontroller+0x962>
   88292:	bf00      	nop
   88294:	00091eb5 	.word	0x00091eb5
   88298:	00099729 	.word	0x00099729
   8829c:	2007212c 	.word	0x2007212c
   882a0:	000a5e78 	.word	0x000a5e78
   882a4:	2007212f 	.word	0x2007212f
   882a8:	2007212e 	.word	0x2007212e
   882ac:	00088619 	.word	0x00088619
   882b0:	000a5e70 	.word	0x000a5e70
   882b4:	00088691 	.word	0x00088691
   882b8:	79fb      	ldrb	r3, [r7, #7]
   882ba:	3b01      	subs	r3, #1
   882bc:	2b0d      	cmp	r3, #13
   882be:	f200 8187 	bhi.w	885d0 <cl_dprep_primecontroller+0x924>
   882c2:	a201      	add	r2, pc, #4	; (adr r2, 882c8 <cl_dprep_primecontroller+0x61c>)
   882c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   882c8:	0008833f 	.word	0x0008833f
   882cc:	000885d1 	.word	0x000885d1
   882d0:	000885d1 	.word	0x000885d1
   882d4:	000885d1 	.word	0x000885d1
   882d8:	00088301 	.word	0x00088301
   882dc:	000883d7 	.word	0x000883d7
   882e0:	000885d1 	.word	0x000885d1
   882e4:	0008838d 	.word	0x0008838d
   882e8:	000885d1 	.word	0x000885d1
   882ec:	000885d1 	.word	0x000885d1
   882f0:	000885d1 	.word	0x000885d1
   882f4:	000883b5 	.word	0x000883b5
   882f8:	000883bf 	.word	0x000883bf
   882fc:	000883c9 	.word	0x000883c9
   88300:	2206      	movs	r2, #6
   88302:	49b5      	ldr	r1, [pc, #724]	; (885d8 <cl_dprep_primecontroller+0x92c>)
   88304:	2018      	movs	r0, #24
   88306:	4bb5      	ldr	r3, [pc, #724]	; (885dc <cl_dprep_primecontroller+0x930>)
   88308:	4798      	blx	r3
   8830a:	4bb5      	ldr	r3, [pc, #724]	; (885e0 <cl_dprep_primecontroller+0x934>)
   8830c:	2200      	movs	r2, #0
   8830e:	701a      	strb	r2, [r3, #0]
   88310:	4bb4      	ldr	r3, [pc, #720]	; (885e4 <cl_dprep_primecontroller+0x938>)
   88312:	2200      	movs	r2, #0
   88314:	701a      	strb	r2, [r3, #0]
   88316:	2100      	movs	r1, #0
   88318:	2002      	movs	r0, #2
   8831a:	4bb3      	ldr	r3, [pc, #716]	; (885e8 <cl_dprep_primecontroller+0x93c>)
   8831c:	4798      	blx	r3
   8831e:	1d3b      	adds	r3, r7, #4
   88320:	2200      	movs	r2, #0
   88322:	4619      	mov	r1, r3
   88324:	202f      	movs	r0, #47	; 0x2f
   88326:	4bad      	ldr	r3, [pc, #692]	; (885dc <cl_dprep_primecontroller+0x930>)
   88328:	4798      	blx	r3
   8832a:	4603      	mov	r3, r0
   8832c:	73fb      	strb	r3, [r7, #15]
   8832e:	4baf      	ldr	r3, [pc, #700]	; (885ec <cl_dprep_primecontroller+0x940>)
   88330:	4798      	blx	r3
   88332:	4603      	mov	r3, r0
   88334:	73fb      	strb	r3, [r7, #15]
   88336:	4bae      	ldr	r3, [pc, #696]	; (885f0 <cl_dprep_primecontroller+0x944>)
   88338:	2205      	movs	r2, #5
   8833a:	701a      	strb	r2, [r3, #0]
   8833c:	e04c      	b.n	883d8 <cl_dprep_primecontroller+0x72c>
   8833e:	2206      	movs	r2, #6
   88340:	49ac      	ldr	r1, [pc, #688]	; (885f4 <cl_dprep_primecontroller+0x948>)
   88342:	2018      	movs	r0, #24
   88344:	4ba5      	ldr	r3, [pc, #660]	; (885dc <cl_dprep_primecontroller+0x930>)
   88346:	4798      	blx	r3
   88348:	4ba5      	ldr	r3, [pc, #660]	; (885e0 <cl_dprep_primecontroller+0x934>)
   8834a:	2200      	movs	r2, #0
   8834c:	701a      	strb	r2, [r3, #0]
   8834e:	4ba5      	ldr	r3, [pc, #660]	; (885e4 <cl_dprep_primecontroller+0x938>)
   88350:	2200      	movs	r2, #0
   88352:	701a      	strb	r2, [r3, #0]
   88354:	2100      	movs	r1, #0
   88356:	2002      	movs	r0, #2
   88358:	4ba3      	ldr	r3, [pc, #652]	; (885e8 <cl_dprep_primecontroller+0x93c>)
   8835a:	4798      	blx	r3
   8835c:	1d3b      	adds	r3, r7, #4
   8835e:	2200      	movs	r2, #0
   88360:	4619      	mov	r1, r3
   88362:	200d      	movs	r0, #13
   88364:	4b9d      	ldr	r3, [pc, #628]	; (885dc <cl_dprep_primecontroller+0x930>)
   88366:	4798      	blx	r3
   88368:	4603      	mov	r3, r0
   8836a:	73fb      	strb	r3, [r7, #15]
   8836c:	1d3b      	adds	r3, r7, #4
   8836e:	2200      	movs	r2, #0
   88370:	4619      	mov	r1, r3
   88372:	2024      	movs	r0, #36	; 0x24
   88374:	4b99      	ldr	r3, [pc, #612]	; (885dc <cl_dprep_primecontroller+0x930>)
   88376:	4798      	blx	r3
   88378:	4603      	mov	r3, r0
   8837a:	73fb      	strb	r3, [r7, #15]
   8837c:	4b9b      	ldr	r3, [pc, #620]	; (885ec <cl_dprep_primecontroller+0x940>)
   8837e:	4798      	blx	r3
   88380:	4603      	mov	r3, r0
   88382:	73fb      	strb	r3, [r7, #15]
   88384:	4b9a      	ldr	r3, [pc, #616]	; (885f0 <cl_dprep_primecontroller+0x944>)
   88386:	2201      	movs	r2, #1
   88388:	701a      	strb	r2, [r3, #0]
   8838a:	e025      	b.n	883d8 <cl_dprep_primecontroller+0x72c>
   8838c:	2100      	movs	r1, #0
   8838e:	2002      	movs	r0, #2
   88390:	4b95      	ldr	r3, [pc, #596]	; (885e8 <cl_dprep_primecontroller+0x93c>)
   88392:	4798      	blx	r3
   88394:	1d3b      	adds	r3, r7, #4
   88396:	2200      	movs	r2, #0
   88398:	4619      	mov	r1, r3
   8839a:	2028      	movs	r0, #40	; 0x28
   8839c:	4b8f      	ldr	r3, [pc, #572]	; (885dc <cl_dprep_primecontroller+0x930>)
   8839e:	4798      	blx	r3
   883a0:	4603      	mov	r3, r0
   883a2:	73fb      	strb	r3, [r7, #15]
   883a4:	4b94      	ldr	r3, [pc, #592]	; (885f8 <cl_dprep_primecontroller+0x94c>)
   883a6:	4798      	blx	r3
   883a8:	4603      	mov	r3, r0
   883aa:	73fb      	strb	r3, [r7, #15]
   883ac:	4b90      	ldr	r3, [pc, #576]	; (885f0 <cl_dprep_primecontroller+0x944>)
   883ae:	2209      	movs	r2, #9
   883b0:	701a      	strb	r2, [r3, #0]
   883b2:	e011      	b.n	883d8 <cl_dprep_primecontroller+0x72c>
   883b4:	2100      	movs	r1, #0
   883b6:	2002      	movs	r0, #2
   883b8:	4b8b      	ldr	r3, [pc, #556]	; (885e8 <cl_dprep_primecontroller+0x93c>)
   883ba:	4798      	blx	r3
   883bc:	e00c      	b.n	883d8 <cl_dprep_primecontroller+0x72c>
   883be:	2100      	movs	r1, #0
   883c0:	2004      	movs	r0, #4
   883c2:	4b89      	ldr	r3, [pc, #548]	; (885e8 <cl_dprep_primecontroller+0x93c>)
   883c4:	4798      	blx	r3
   883c6:	e007      	b.n	883d8 <cl_dprep_primecontroller+0x72c>
   883c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   883cc:	4619      	mov	r1, r3
   883ce:	2001      	movs	r0, #1
   883d0:	4b85      	ldr	r3, [pc, #532]	; (885e8 <cl_dprep_primecontroller+0x93c>)
   883d2:	4798      	blx	r3
   883d4:	e000      	b.n	883d8 <cl_dprep_primecontroller+0x72c>
   883d6:	bf00      	nop
   883d8:	e0fa      	b.n	885d0 <cl_dprep_primecontroller+0x924>
   883da:	79fb      	ldrb	r3, [r7, #7]
   883dc:	3b02      	subs	r3, #2
   883de:	2b0c      	cmp	r3, #12
   883e0:	d86e      	bhi.n	884c0 <cl_dprep_primecontroller+0x814>
   883e2:	a201      	add	r2, pc, #4	; (adr r2, 883e8 <cl_dprep_primecontroller+0x73c>)
   883e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   883e8:	00088455 	.word	0x00088455
   883ec:	0008841d 	.word	0x0008841d
   883f0:	000884c1 	.word	0x000884c1
   883f4:	000884c1 	.word	0x000884c1
   883f8:	000884c1 	.word	0x000884c1
   883fc:	000884c1 	.word	0x000884c1
   88400:	000884c1 	.word	0x000884c1
   88404:	00088455 	.word	0x00088455
   88408:	00088497 	.word	0x00088497
   8840c:	00088425 	.word	0x00088425
   88410:	0008849f 	.word	0x0008849f
   88414:	000884a9 	.word	0x000884a9
   88418:	000884b3 	.word	0x000884b3
   8841c:	4b74      	ldr	r3, [pc, #464]	; (885f0 <cl_dprep_primecontroller+0x944>)
   8841e:	220b      	movs	r2, #11
   88420:	701a      	strb	r2, [r3, #0]
   88422:	e050      	b.n	884c6 <cl_dprep_primecontroller+0x81a>
   88424:	4b75      	ldr	r3, [pc, #468]	; (885fc <cl_dprep_primecontroller+0x950>)
   88426:	f993 3000 	ldrsb.w	r3, [r3]
   8842a:	b2da      	uxtb	r2, r3
   8842c:	3201      	adds	r2, #1
   8842e:	b2d2      	uxtb	r2, r2
   88430:	b251      	sxtb	r1, r2
   88432:	4a72      	ldr	r2, [pc, #456]	; (885fc <cl_dprep_primecontroller+0x950>)
   88434:	7011      	strb	r1, [r2, #0]
   88436:	2b3b      	cmp	r3, #59	; 0x3b
   88438:	dd44      	ble.n	884c4 <cl_dprep_primecontroller+0x818>
   8843a:	4b70      	ldr	r3, [pc, #448]	; (885fc <cl_dprep_primecontroller+0x950>)
   8843c:	2200      	movs	r2, #0
   8843e:	701a      	strb	r2, [r3, #0]
   88440:	4b6f      	ldr	r3, [pc, #444]	; (88600 <cl_dprep_primecontroller+0x954>)
   88442:	f993 3000 	ldrsb.w	r3, [r3]
   88446:	b2db      	uxtb	r3, r3
   88448:	3301      	adds	r3, #1
   8844a:	b2db      	uxtb	r3, r3
   8844c:	b25a      	sxtb	r2, r3
   8844e:	4b6c      	ldr	r3, [pc, #432]	; (88600 <cl_dprep_primecontroller+0x954>)
   88450:	701a      	strb	r2, [r3, #0]
   88452:	e037      	b.n	884c4 <cl_dprep_primecontroller+0x818>
   88454:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88458:	2b01      	cmp	r3, #1
   8845a:	d107      	bne.n	8846c <cl_dprep_primecontroller+0x7c0>
   8845c:	2100      	movs	r1, #0
   8845e:	2004      	movs	r0, #4
   88460:	4b61      	ldr	r3, [pc, #388]	; (885e8 <cl_dprep_primecontroller+0x93c>)
   88462:	4798      	blx	r3
   88464:	4b62      	ldr	r3, [pc, #392]	; (885f0 <cl_dprep_primecontroller+0x944>)
   88466:	220a      	movs	r2, #10
   88468:	701a      	strb	r2, [r3, #0]
   8846a:	e02c      	b.n	884c6 <cl_dprep_primecontroller+0x81a>
   8846c:	4b65      	ldr	r3, [pc, #404]	; (88604 <cl_dprep_primecontroller+0x958>)
   8846e:	4798      	blx	r3
   88470:	2100      	movs	r1, #0
   88472:	2004      	movs	r0, #4
   88474:	4b5c      	ldr	r3, [pc, #368]	; (885e8 <cl_dprep_primecontroller+0x93c>)
   88476:	4798      	blx	r3
   88478:	4b60      	ldr	r3, [pc, #384]	; (885fc <cl_dprep_primecontroller+0x950>)
   8847a:	2200      	movs	r2, #0
   8847c:	701a      	strb	r2, [r3, #0]
   8847e:	4b60      	ldr	r3, [pc, #384]	; (88600 <cl_dprep_primecontroller+0x954>)
   88480:	2200      	movs	r2, #0
   88482:	701a      	strb	r2, [r3, #0]
   88484:	4b5a      	ldr	r3, [pc, #360]	; (885f0 <cl_dprep_primecontroller+0x944>)
   88486:	220b      	movs	r2, #11
   88488:	701a      	strb	r2, [r3, #0]
   8848a:	2200      	movs	r2, #0
   8848c:	2100      	movs	r1, #0
   8848e:	2029      	movs	r0, #41	; 0x29
   88490:	4b52      	ldr	r3, [pc, #328]	; (885dc <cl_dprep_primecontroller+0x930>)
   88492:	4798      	blx	r3
   88494:	e017      	b.n	884c6 <cl_dprep_primecontroller+0x81a>
   88496:	4b56      	ldr	r3, [pc, #344]	; (885f0 <cl_dprep_primecontroller+0x944>)
   88498:	220c      	movs	r2, #12
   8849a:	701a      	strb	r2, [r3, #0]
   8849c:	e013      	b.n	884c6 <cl_dprep_primecontroller+0x81a>
   8849e:	2100      	movs	r1, #0
   884a0:	2002      	movs	r0, #2
   884a2:	4b51      	ldr	r3, [pc, #324]	; (885e8 <cl_dprep_primecontroller+0x93c>)
   884a4:	4798      	blx	r3
   884a6:	e00e      	b.n	884c6 <cl_dprep_primecontroller+0x81a>
   884a8:	2100      	movs	r1, #0
   884aa:	2004      	movs	r0, #4
   884ac:	4b4e      	ldr	r3, [pc, #312]	; (885e8 <cl_dprep_primecontroller+0x93c>)
   884ae:	4798      	blx	r3
   884b0:	e009      	b.n	884c6 <cl_dprep_primecontroller+0x81a>
   884b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   884b6:	4619      	mov	r1, r3
   884b8:	2001      	movs	r0, #1
   884ba:	4b4b      	ldr	r3, [pc, #300]	; (885e8 <cl_dprep_primecontroller+0x93c>)
   884bc:	4798      	blx	r3
   884be:	e002      	b.n	884c6 <cl_dprep_primecontroller+0x81a>
   884c0:	bf00      	nop
   884c2:	e0a4      	b.n	8860e <cl_dprep_primecontroller+0x962>
   884c4:	bf00      	nop
   884c6:	e0a2      	b.n	8860e <cl_dprep_primecontroller+0x962>
   884c8:	79fb      	ldrb	r3, [r7, #7]
   884ca:	3b08      	subs	r3, #8
   884cc:	2b06      	cmp	r3, #6
   884ce:	f200 8081 	bhi.w	885d4 <cl_dprep_primecontroller+0x928>
   884d2:	a201      	add	r2, pc, #4	; (adr r2, 884d8 <cl_dprep_primecontroller+0x82c>)
   884d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   884d8:	000884f5 	.word	0x000884f5
   884dc:	000885d5 	.word	0x000885d5
   884e0:	000885d5 	.word	0x000885d5
   884e4:	000885d5 	.word	0x000885d5
   884e8:	00088521 	.word	0x00088521
   884ec:	0008852b 	.word	0x0008852b
   884f0:	00088535 	.word	0x00088535
   884f4:	4b44      	ldr	r3, [pc, #272]	; (88608 <cl_dprep_primecontroller+0x95c>)
   884f6:	4798      	blx	r3
   884f8:	2100      	movs	r1, #0
   884fa:	2002      	movs	r0, #2
   884fc:	4b3a      	ldr	r3, [pc, #232]	; (885e8 <cl_dprep_primecontroller+0x93c>)
   884fe:	4798      	blx	r3
   88500:	1d3b      	adds	r3, r7, #4
   88502:	2200      	movs	r2, #0
   88504:	4619      	mov	r1, r3
   88506:	2028      	movs	r0, #40	; 0x28
   88508:	4b34      	ldr	r3, [pc, #208]	; (885dc <cl_dprep_primecontroller+0x930>)
   8850a:	4798      	blx	r3
   8850c:	4603      	mov	r3, r0
   8850e:	73fb      	strb	r3, [r7, #15]
   88510:	4b39      	ldr	r3, [pc, #228]	; (885f8 <cl_dprep_primecontroller+0x94c>)
   88512:	4798      	blx	r3
   88514:	4603      	mov	r3, r0
   88516:	73fb      	strb	r3, [r7, #15]
   88518:	4b35      	ldr	r3, [pc, #212]	; (885f0 <cl_dprep_primecontroller+0x944>)
   8851a:	2209      	movs	r2, #9
   8851c:	701a      	strb	r2, [r3, #0]
   8851e:	e010      	b.n	88542 <cl_dprep_primecontroller+0x896>
   88520:	2100      	movs	r1, #0
   88522:	2002      	movs	r0, #2
   88524:	4b30      	ldr	r3, [pc, #192]	; (885e8 <cl_dprep_primecontroller+0x93c>)
   88526:	4798      	blx	r3
   88528:	e00b      	b.n	88542 <cl_dprep_primecontroller+0x896>
   8852a:	2100      	movs	r1, #0
   8852c:	2004      	movs	r0, #4
   8852e:	4b2e      	ldr	r3, [pc, #184]	; (885e8 <cl_dprep_primecontroller+0x93c>)
   88530:	4798      	blx	r3
   88532:	e006      	b.n	88542 <cl_dprep_primecontroller+0x896>
   88534:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88538:	4619      	mov	r1, r3
   8853a:	2001      	movs	r0, #1
   8853c:	4b2a      	ldr	r3, [pc, #168]	; (885e8 <cl_dprep_primecontroller+0x93c>)
   8853e:	4798      	blx	r3
   88540:	bf00      	nop
   88542:	e047      	b.n	885d4 <cl_dprep_primecontroller+0x928>
   88544:	79fb      	ldrb	r3, [r7, #7]
   88546:	3b08      	subs	r3, #8
   88548:	2b06      	cmp	r3, #6
   8854a:	d85f      	bhi.n	8860c <cl_dprep_primecontroller+0x960>
   8854c:	a201      	add	r2, pc, #4	; (adr r2, 88554 <cl_dprep_primecontroller+0x8a8>)
   8854e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88552:	bf00      	nop
   88554:	00088571 	.word	0x00088571
   88558:	00088599 	.word	0x00088599
   8855c:	0008860d 	.word	0x0008860d
   88560:	0008860d 	.word	0x0008860d
   88564:	000885a1 	.word	0x000885a1
   88568:	000885ab 	.word	0x000885ab
   8856c:	000885b5 	.word	0x000885b5
   88570:	2100      	movs	r1, #0
   88572:	2002      	movs	r0, #2
   88574:	4b1c      	ldr	r3, [pc, #112]	; (885e8 <cl_dprep_primecontroller+0x93c>)
   88576:	4798      	blx	r3
   88578:	1d3b      	adds	r3, r7, #4
   8857a:	2200      	movs	r2, #0
   8857c:	4619      	mov	r1, r3
   8857e:	2028      	movs	r0, #40	; 0x28
   88580:	4b16      	ldr	r3, [pc, #88]	; (885dc <cl_dprep_primecontroller+0x930>)
   88582:	4798      	blx	r3
   88584:	4603      	mov	r3, r0
   88586:	73fb      	strb	r3, [r7, #15]
   88588:	4b1b      	ldr	r3, [pc, #108]	; (885f8 <cl_dprep_primecontroller+0x94c>)
   8858a:	4798      	blx	r3
   8858c:	4603      	mov	r3, r0
   8858e:	73fb      	strb	r3, [r7, #15]
   88590:	4b17      	ldr	r3, [pc, #92]	; (885f0 <cl_dprep_primecontroller+0x944>)
   88592:	2209      	movs	r2, #9
   88594:	701a      	strb	r2, [r3, #0]
   88596:	e014      	b.n	885c2 <cl_dprep_primecontroller+0x916>
   88598:	4b15      	ldr	r3, [pc, #84]	; (885f0 <cl_dprep_primecontroller+0x944>)
   8859a:	220b      	movs	r2, #11
   8859c:	701a      	strb	r2, [r3, #0]
   8859e:	e010      	b.n	885c2 <cl_dprep_primecontroller+0x916>
   885a0:	2100      	movs	r1, #0
   885a2:	2002      	movs	r0, #2
   885a4:	4b10      	ldr	r3, [pc, #64]	; (885e8 <cl_dprep_primecontroller+0x93c>)
   885a6:	4798      	blx	r3
   885a8:	e00b      	b.n	885c2 <cl_dprep_primecontroller+0x916>
   885aa:	2100      	movs	r1, #0
   885ac:	2004      	movs	r0, #4
   885ae:	4b0e      	ldr	r3, [pc, #56]	; (885e8 <cl_dprep_primecontroller+0x93c>)
   885b0:	4798      	blx	r3
   885b2:	e006      	b.n	885c2 <cl_dprep_primecontroller+0x916>
   885b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   885b8:	4619      	mov	r1, r3
   885ba:	2001      	movs	r0, #1
   885bc:	4b0a      	ldr	r3, [pc, #40]	; (885e8 <cl_dprep_primecontroller+0x93c>)
   885be:	4798      	blx	r3
   885c0:	bf00      	nop
   885c2:	e023      	b.n	8860c <cl_dprep_primecontroller+0x960>
   885c4:	bf00      	nop
   885c6:	e022      	b.n	8860e <cl_dprep_primecontroller+0x962>
   885c8:	bf00      	nop
   885ca:	e020      	b.n	8860e <cl_dprep_primecontroller+0x962>
   885cc:	bf00      	nop
   885ce:	e01e      	b.n	8860e <cl_dprep_primecontroller+0x962>
   885d0:	bf00      	nop
   885d2:	e01c      	b.n	8860e <cl_dprep_primecontroller+0x962>
   885d4:	bf00      	nop
   885d6:	e01a      	b.n	8860e <cl_dprep_primecontroller+0x962>
   885d8:	000a5e78 	.word	0x000a5e78
   885dc:	00099729 	.word	0x00099729
   885e0:	2007212f 	.word	0x2007212f
   885e4:	2007212e 	.word	0x2007212e
   885e8:	00091eb5 	.word	0x00091eb5
   885ec:	00088619 	.word	0x00088619
   885f0:	2007212c 	.word	0x2007212c
   885f4:	000a5e70 	.word	0x000a5e70
   885f8:	00088691 	.word	0x00088691
   885fc:	20072130 	.word	0x20072130
   88600:	20072131 	.word	0x20072131
   88604:	00097b59 	.word	0x00097b59
   88608:	00097b81 	.word	0x00097b81
   8860c:	bf00      	nop
   8860e:	2300      	movs	r3, #0
   88610:	4618      	mov	r0, r3
   88612:	3710      	adds	r7, #16
   88614:	46bd      	mov	sp, r7
   88616:	bd80      	pop	{r7, pc}

00088618 <Cl_Dprep_primeUpdatePrimeTimeInfo>:
   88618:	b580      	push	{r7, lr}
   8861a:	b084      	sub	sp, #16
   8861c:	af00      	add	r7, sp, #0
   8861e:	2304      	movs	r3, #4
   88620:	73fb      	strb	r3, [r7, #15]
   88622:	234d      	movs	r3, #77	; 0x4d
   88624:	73bb      	strb	r3, [r7, #14]
   88626:	1d3b      	adds	r3, r7, #4
   88628:	2200      	movs	r2, #0
   8862a:	601a      	str	r2, [r3, #0]
   8862c:	f8c3 2003 	str.w	r2, [r3, #3]
   88630:	230a      	movs	r3, #10
   88632:	73bb      	strb	r3, [r7, #14]
   88634:	2302      	movs	r3, #2
   88636:	713b      	strb	r3, [r7, #4]
   88638:	4b12      	ldr	r3, [pc, #72]	; (88684 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x6c>)
   8863a:	f993 3000 	ldrsb.w	r3, [r3]
   8863e:	b2db      	uxtb	r3, r3
   88640:	717b      	strb	r3, [r7, #5]
   88642:	2300      	movs	r3, #0
   88644:	71bb      	strb	r3, [r7, #6]
   88646:	4b10      	ldr	r3, [pc, #64]	; (88688 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x70>)
   88648:	f993 3000 	ldrsb.w	r3, [r3]
   8864c:	b2db      	uxtb	r3, r3
   8864e:	71fb      	strb	r3, [r7, #7]
   88650:	4b0c      	ldr	r3, [pc, #48]	; (88684 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x6c>)
   88652:	f993 3000 	ldrsb.w	r3, [r3]
   88656:	b2db      	uxtb	r3, r3
   88658:	f1c3 0301 	rsb	r3, r3, #1
   8865c:	b2db      	uxtb	r3, r3
   8865e:	723b      	strb	r3, [r7, #8]
   88660:	2300      	movs	r3, #0
   88662:	727b      	strb	r3, [r7, #9]
   88664:	2300      	movs	r3, #0
   88666:	72bb      	strb	r3, [r7, #10]
   88668:	1d39      	adds	r1, r7, #4
   8866a:	7bbb      	ldrb	r3, [r7, #14]
   8866c:	2207      	movs	r2, #7
   8866e:	4618      	mov	r0, r3
   88670:	4b06      	ldr	r3, [pc, #24]	; (8868c <Cl_Dprep_primeUpdatePrimeTimeInfo+0x74>)
   88672:	4798      	blx	r3
   88674:	4603      	mov	r3, r0
   88676:	73fb      	strb	r3, [r7, #15]
   88678:	2300      	movs	r3, #0
   8867a:	4618      	mov	r0, r3
   8867c:	3710      	adds	r7, #16
   8867e:	46bd      	mov	sp, r7
   88680:	bd80      	pop	{r7, pc}
   88682:	bf00      	nop
   88684:	2007212f 	.word	0x2007212f
   88688:	2007212e 	.word	0x2007212e
   8868c:	00099729 	.word	0x00099729

00088690 <Cl_Dprep_UpdateDialyserPrimeTimeInfo>:
   88690:	b580      	push	{r7, lr}
   88692:	b084      	sub	sp, #16
   88694:	af00      	add	r7, sp, #0
   88696:	2304      	movs	r3, #4
   88698:	73fb      	strb	r3, [r7, #15]
   8869a:	234d      	movs	r3, #77	; 0x4d
   8869c:	73bb      	strb	r3, [r7, #14]
   8869e:	1d3b      	adds	r3, r7, #4
   886a0:	2200      	movs	r2, #0
   886a2:	601a      	str	r2, [r3, #0]
   886a4:	f8c3 2003 	str.w	r2, [r3, #3]
   886a8:	230a      	movs	r3, #10
   886aa:	73bb      	strb	r3, [r7, #14]
   886ac:	2303      	movs	r3, #3
   886ae:	713b      	strb	r3, [r7, #4]
   886b0:	4b12      	ldr	r3, [pc, #72]	; (886fc <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x6c>)
   886b2:	f993 3000 	ldrsb.w	r3, [r3]
   886b6:	b2db      	uxtb	r3, r3
   886b8:	717b      	strb	r3, [r7, #5]
   886ba:	2300      	movs	r3, #0
   886bc:	71bb      	strb	r3, [r7, #6]
   886be:	4b10      	ldr	r3, [pc, #64]	; (88700 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x70>)
   886c0:	f993 3000 	ldrsb.w	r3, [r3]
   886c4:	b2db      	uxtb	r3, r3
   886c6:	71fb      	strb	r3, [r7, #7]
   886c8:	4b0e      	ldr	r3, [pc, #56]	; (88704 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x74>)
   886ca:	f993 3000 	ldrsb.w	r3, [r3]
   886ce:	b2db      	uxtb	r3, r3
   886d0:	f1c3 0301 	rsb	r3, r3, #1
   886d4:	b2db      	uxtb	r3, r3
   886d6:	723b      	strb	r3, [r7, #8]
   886d8:	2300      	movs	r3, #0
   886da:	727b      	strb	r3, [r7, #9]
   886dc:	2300      	movs	r3, #0
   886de:	72bb      	strb	r3, [r7, #10]
   886e0:	1d39      	adds	r1, r7, #4
   886e2:	7bbb      	ldrb	r3, [r7, #14]
   886e4:	2207      	movs	r2, #7
   886e6:	4618      	mov	r0, r3
   886e8:	4b07      	ldr	r3, [pc, #28]	; (88708 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x78>)
   886ea:	4798      	blx	r3
   886ec:	4603      	mov	r3, r0
   886ee:	73fb      	strb	r3, [r7, #15]
   886f0:	2300      	movs	r3, #0
   886f2:	4618      	mov	r0, r3
   886f4:	3710      	adds	r7, #16
   886f6:	46bd      	mov	sp, r7
   886f8:	bd80      	pop	{r7, pc}
   886fa:	bf00      	nop
   886fc:	20072131 	.word	0x20072131
   88700:	20072130 	.word	0x20072130
   88704:	2007212f 	.word	0x2007212f
   88708:	00099729 	.word	0x00099729

0008870c <cl_dprep_activate_prime_related_alarms>:
   8870c:	b480      	push	{r7}
   8870e:	b083      	sub	sp, #12
   88710:	af00      	add	r7, sp, #0
   88712:	2304      	movs	r3, #4
   88714:	71fb      	strb	r3, [r7, #7]
   88716:	2300      	movs	r3, #0
   88718:	4618      	mov	r0, r3
   8871a:	370c      	adds	r7, #12
   8871c:	46bd      	mov	sp, r7
   8871e:	bc80      	pop	{r7}
   88720:	4770      	bx	lr
   88722:	bf00      	nop

00088724 <Cl_Error_Handle_Error>:
   88724:	b480      	push	{r7}
   88726:	af00      	add	r7, sp, #0
   88728:	2300      	movs	r3, #0
   8872a:	4618      	mov	r0, r3
   8872c:	46bd      	mov	sp, r7
   8872e:	bc80      	pop	{r7}
   88730:	4770      	bx	lr
   88732:	bf00      	nop

00088734 <cl_event_handler>:
   88734:	b580      	push	{r7, lr}
   88736:	b084      	sub	sp, #16
   88738:	af00      	add	r7, sp, #0
   8873a:	4603      	mov	r3, r0
   8873c:	71fb      	strb	r3, [r7, #7]
   8873e:	79fb      	ldrb	r3, [r7, #7]
   88740:	3b0d      	subs	r3, #13
   88742:	2b2f      	cmp	r3, #47	; 0x2f
   88744:	f200 80dc 	bhi.w	88900 <cl_event_handler+0x1cc>
   88748:	a201      	add	r2, pc, #4	; (adr r2, 88750 <cl_event_handler+0x1c>)
   8874a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8874e:	bf00      	nop
   88750:	000888f7 	.word	0x000888f7
   88754:	000888f7 	.word	0x000888f7
   88758:	00088901 	.word	0x00088901
   8875c:	00088901 	.word	0x00088901
   88760:	00088901 	.word	0x00088901
   88764:	00088901 	.word	0x00088901
   88768:	00088901 	.word	0x00088901
   8876c:	00088901 	.word	0x00088901
   88770:	00088901 	.word	0x00088901
   88774:	00088901 	.word	0x00088901
   88778:	00088901 	.word	0x00088901
   8877c:	00088901 	.word	0x00088901
   88780:	00088901 	.word	0x00088901
   88784:	00088901 	.word	0x00088901
   88788:	00088901 	.word	0x00088901
   8878c:	00088901 	.word	0x00088901
   88790:	00088901 	.word	0x00088901
   88794:	00088901 	.word	0x00088901
   88798:	00088901 	.word	0x00088901
   8879c:	00088901 	.word	0x00088901
   887a0:	00088901 	.word	0x00088901
   887a4:	00088901 	.word	0x00088901
   887a8:	00088901 	.word	0x00088901
   887ac:	00088901 	.word	0x00088901
   887b0:	00088901 	.word	0x00088901
   887b4:	00088901 	.word	0x00088901
   887b8:	00088901 	.word	0x00088901
   887bc:	00088901 	.word	0x00088901
   887c0:	00088901 	.word	0x00088901
   887c4:	00088901 	.word	0x00088901
   887c8:	00088901 	.word	0x00088901
   887cc:	00088901 	.word	0x00088901
   887d0:	00088901 	.word	0x00088901
   887d4:	00088901 	.word	0x00088901
   887d8:	000888ef 	.word	0x000888ef
   887dc:	00088901 	.word	0x00088901
   887e0:	00088901 	.word	0x00088901
   887e4:	00088811 	.word	0x00088811
   887e8:	00088901 	.word	0x00088901
   887ec:	00088901 	.word	0x00088901
   887f0:	00088901 	.word	0x00088901
   887f4:	00088901 	.word	0x00088901
   887f8:	0008881f 	.word	0x0008881f
   887fc:	00088825 	.word	0x00088825
   88800:	0008882d 	.word	0x0008882d
   88804:	0008883f 	.word	0x0008883f
   88808:	00088867 	.word	0x00088867
   8880c:	000888e7 	.word	0x000888e7
   88810:	2004      	movs	r0, #4
   88812:	4b3e      	ldr	r3, [pc, #248]	; (8890c <cl_event_handler+0x1d8>)
   88814:	4798      	blx	r3
   88816:	2006      	movs	r0, #6
   88818:	4b3d      	ldr	r3, [pc, #244]	; (88910 <cl_event_handler+0x1dc>)
   8881a:	4798      	blx	r3
   8881c:	e071      	b.n	88902 <cl_event_handler+0x1ce>
   8881e:	4b3d      	ldr	r3, [pc, #244]	; (88914 <cl_event_handler+0x1e0>)
   88820:	4798      	blx	r3
   88822:	e06e      	b.n	88902 <cl_event_handler+0x1ce>
   88824:	2000      	movs	r0, #0
   88826:	4b3c      	ldr	r3, [pc, #240]	; (88918 <cl_event_handler+0x1e4>)
   88828:	4798      	blx	r3
   8882a:	e06a      	b.n	88902 <cl_event_handler+0x1ce>
   8882c:	2001      	movs	r0, #1
   8882e:	4b3b      	ldr	r3, [pc, #236]	; (8891c <cl_event_handler+0x1e8>)
   88830:	4798      	blx	r3
   88832:	2001      	movs	r0, #1
   88834:	4b3a      	ldr	r3, [pc, #232]	; (88920 <cl_event_handler+0x1ec>)
   88836:	4798      	blx	r3
   88838:	4b3a      	ldr	r3, [pc, #232]	; (88924 <cl_event_handler+0x1f0>)
   8883a:	4798      	blx	r3
   8883c:	e061      	b.n	88902 <cl_event_handler+0x1ce>
   8883e:	f04f 0100 	mov.w	r1, #0
   88842:	2001      	movs	r0, #1
   88844:	4b38      	ldr	r3, [pc, #224]	; (88928 <cl_event_handler+0x1f4>)
   88846:	4798      	blx	r3
   88848:	2001      	movs	r0, #1
   8884a:	4b33      	ldr	r3, [pc, #204]	; (88918 <cl_event_handler+0x1e4>)
   8884c:	4798      	blx	r3
   8884e:	4b37      	ldr	r3, [pc, #220]	; (8892c <cl_event_handler+0x1f8>)
   88850:	781b      	ldrb	r3, [r3, #0]
   88852:	2b00      	cmp	r3, #0
   88854:	d003      	beq.n	8885e <cl_event_handler+0x12a>
   88856:	4b35      	ldr	r3, [pc, #212]	; (8892c <cl_event_handler+0x1f8>)
   88858:	2200      	movs	r2, #0
   8885a:	701a      	strb	r2, [r3, #0]
   8885c:	e051      	b.n	88902 <cl_event_handler+0x1ce>
   8885e:	4b33      	ldr	r3, [pc, #204]	; (8892c <cl_event_handler+0x1f8>)
   88860:	2201      	movs	r2, #1
   88862:	701a      	strb	r2, [r3, #0]
   88864:	e04d      	b.n	88902 <cl_event_handler+0x1ce>
   88866:	2001      	movs	r0, #1
   88868:	4b28      	ldr	r3, [pc, #160]	; (8890c <cl_event_handler+0x1d8>)
   8886a:	4798      	blx	r3
   8886c:	2003      	movs	r0, #3
   8886e:	4b28      	ldr	r3, [pc, #160]	; (88910 <cl_event_handler+0x1dc>)
   88870:	4798      	blx	r3
   88872:	2100      	movs	r1, #0
   88874:	200b      	movs	r0, #11
   88876:	4b2e      	ldr	r3, [pc, #184]	; (88930 <cl_event_handler+0x1fc>)
   88878:	4798      	blx	r3
   8887a:	2100      	movs	r1, #0
   8887c:	200d      	movs	r0, #13
   8887e:	4b2d      	ldr	r3, [pc, #180]	; (88934 <cl_event_handler+0x200>)
   88880:	4798      	blx	r3
   88882:	2002      	movs	r0, #2
   88884:	4b24      	ldr	r3, [pc, #144]	; (88918 <cl_event_handler+0x1e4>)
   88886:	4798      	blx	r3
   88888:	f04f 0100 	mov.w	r1, #0
   8888c:	2002      	movs	r0, #2
   8888e:	4b26      	ldr	r3, [pc, #152]	; (88928 <cl_event_handler+0x1f4>)
   88890:	4798      	blx	r3
   88892:	2002      	movs	r0, #2
   88894:	4b28      	ldr	r3, [pc, #160]	; (88938 <cl_event_handler+0x204>)
   88896:	4798      	blx	r3
   88898:	4b28      	ldr	r3, [pc, #160]	; (8893c <cl_event_handler+0x208>)
   8889a:	4798      	blx	r3
   8889c:	4b28      	ldr	r3, [pc, #160]	; (88940 <cl_event_handler+0x20c>)
   8889e:	781b      	ldrb	r3, [r3, #0]
   888a0:	3301      	adds	r3, #1
   888a2:	b2da      	uxtb	r2, r3
   888a4:	4b26      	ldr	r3, [pc, #152]	; (88940 <cl_event_handler+0x20c>)
   888a6:	701a      	strb	r2, [r3, #0]
   888a8:	4b26      	ldr	r3, [pc, #152]	; (88944 <cl_event_handler+0x210>)
   888aa:	781b      	ldrb	r3, [r3, #0]
   888ac:	f083 0301 	eor.w	r3, r3, #1
   888b0:	b2db      	uxtb	r3, r3
   888b2:	2b00      	cmp	r3, #0
   888b4:	d005      	beq.n	888c2 <cl_event_handler+0x18e>
   888b6:	4b24      	ldr	r3, [pc, #144]	; (88948 <cl_event_handler+0x214>)
   888b8:	4798      	blx	r3
   888ba:	4b22      	ldr	r3, [pc, #136]	; (88944 <cl_event_handler+0x210>)
   888bc:	2201      	movs	r2, #1
   888be:	701a      	strb	r2, [r3, #0]
   888c0:	e00b      	b.n	888da <cl_event_handler+0x1a6>
   888c2:	4b22      	ldr	r3, [pc, #136]	; (8894c <cl_event_handler+0x218>)
   888c4:	4798      	blx	r3
   888c6:	4b1f      	ldr	r3, [pc, #124]	; (88944 <cl_event_handler+0x210>)
   888c8:	2200      	movs	r2, #0
   888ca:	701a      	strb	r2, [r3, #0]
   888cc:	4b1c      	ldr	r3, [pc, #112]	; (88940 <cl_event_handler+0x20c>)
   888ce:	781b      	ldrb	r3, [r3, #0]
   888d0:	2b0a      	cmp	r3, #10
   888d2:	d102      	bne.n	888da <cl_event_handler+0x1a6>
   888d4:	4b1a      	ldr	r3, [pc, #104]	; (88940 <cl_event_handler+0x20c>)
   888d6:	2200      	movs	r2, #0
   888d8:	701a      	strb	r2, [r3, #0]
   888da:	4b1d      	ldr	r3, [pc, #116]	; (88950 <cl_event_handler+0x21c>)
   888dc:	681b      	ldr	r3, [r3, #0]
   888de:	3301      	adds	r3, #1
   888e0:	4a1b      	ldr	r2, [pc, #108]	; (88950 <cl_event_handler+0x21c>)
   888e2:	6013      	str	r3, [r2, #0]
   888e4:	e00d      	b.n	88902 <cl_event_handler+0x1ce>
   888e6:	2002      	movs	r0, #2
   888e8:	4b0c      	ldr	r3, [pc, #48]	; (8891c <cl_event_handler+0x1e8>)
   888ea:	4798      	blx	r3
   888ec:	e009      	b.n	88902 <cl_event_handler+0x1ce>
   888ee:	2003      	movs	r0, #3
   888f0:	4b09      	ldr	r3, [pc, #36]	; (88918 <cl_event_handler+0x1e4>)
   888f2:	4798      	blx	r3
   888f4:	e005      	b.n	88902 <cl_event_handler+0x1ce>
   888f6:	79fb      	ldrb	r3, [r7, #7]
   888f8:	4618      	mov	r0, r3
   888fa:	4b16      	ldr	r3, [pc, #88]	; (88954 <cl_event_handler+0x220>)
   888fc:	4798      	blx	r3
   888fe:	e000      	b.n	88902 <cl_event_handler+0x1ce>
   88900:	bf00      	nop
   88902:	2300      	movs	r3, #0
   88904:	4618      	mov	r0, r3
   88906:	3710      	adds	r7, #16
   88908:	46bd      	mov	sp, r7
   8890a:	bd80      	pop	{r7, pc}
   8890c:	00092ddd 	.word	0x00092ddd
   88910:	000923ad 	.word	0x000923ad
   88914:	00092b91 	.word	0x00092b91
   88918:	00083319 	.word	0x00083319
   8891c:	0008ea19 	.word	0x0008ea19
   88920:	0008e611 	.word	0x0008e611
   88924:	00092119 	.word	0x00092119
   88928:	00088a19 	.word	0x00088a19
   8892c:	20072138 	.word	0x20072138
   88930:	00087cad 	.word	0x00087cad
   88934:	000925a9 	.word	0x000925a9
   88938:	0008e401 	.word	0x0008e401
   8893c:	0008daa1 	.word	0x0008daa1
   88940:	20072139 	.word	0x20072139
   88944:	2007213a 	.word	0x2007213a
   88948:	00097829 	.word	0x00097829
   8894c:	00097861 	.word	0x00097861
   88950:	20072134 	.word	0x20072134
   88954:	00084a1d 	.word	0x00084a1d

00088958 <Cl_Heater_GetHeaterStableStatus>:
#define TEMP2_FINE_MIN_300
#define TEMP2_FINE_MAX_300


Cl_ReturnCodeType Cl_Heater_GetHeaterStableStatus(Cl_BoolType* Stable)
{
   88958:	b5f0      	push	{r4, r5, r6, r7, lr}
   8895a:	b083      	sub	sp, #12
   8895c:	af00      	add	r7, sp, #0
   8895e:	6078      	str	r0, [r7, #4]
	if((avgtmp3_cel > prescribed_temp - 0.2) &&(avgtmp3_cel < prescribed_temp + 0.2))
   88960:	4b25      	ldr	r3, [pc, #148]	; (889f8 <Cl_Heater_GetHeaterStableStatus+0xa0>)
   88962:	681a      	ldr	r2, [r3, #0]
   88964:	4b25      	ldr	r3, [pc, #148]	; (889fc <Cl_Heater_GetHeaterStableStatus+0xa4>)
   88966:	4610      	mov	r0, r2
   88968:	4798      	blx	r3
   8896a:	4605      	mov	r5, r0
   8896c:	460e      	mov	r6, r1
   8896e:	4b24      	ldr	r3, [pc, #144]	; (88a00 <Cl_Heater_GetHeaterStableStatus+0xa8>)
   88970:	681a      	ldr	r2, [r3, #0]
   88972:	4b22      	ldr	r3, [pc, #136]	; (889fc <Cl_Heater_GetHeaterStableStatus+0xa4>)
   88974:	4610      	mov	r0, r2
   88976:	4798      	blx	r3
   88978:	4c22      	ldr	r4, [pc, #136]	; (88a04 <Cl_Heater_GetHeaterStableStatus+0xac>)
   8897a:	a31d      	add	r3, pc, #116	; (adr r3, 889f0 <Cl_Heater_GetHeaterStableStatus+0x98>)
   8897c:	e9d3 2300 	ldrd	r2, r3, [r3]
   88980:	47a0      	blx	r4
   88982:	4603      	mov	r3, r0
   88984:	460c      	mov	r4, r1
   88986:	461a      	mov	r2, r3
   88988:	4623      	mov	r3, r4
   8898a:	4c1f      	ldr	r4, [pc, #124]	; (88a08 <Cl_Heater_GetHeaterStableStatus+0xb0>)
   8898c:	4628      	mov	r0, r5
   8898e:	4631      	mov	r1, r6
   88990:	47a0      	blx	r4
   88992:	4603      	mov	r3, r0
   88994:	2b00      	cmp	r3, #0
   88996:	d020      	beq.n	889da <Cl_Heater_GetHeaterStableStatus+0x82>
   88998:	4b17      	ldr	r3, [pc, #92]	; (889f8 <Cl_Heater_GetHeaterStableStatus+0xa0>)
   8899a:	681a      	ldr	r2, [r3, #0]
   8899c:	4b17      	ldr	r3, [pc, #92]	; (889fc <Cl_Heater_GetHeaterStableStatus+0xa4>)
   8899e:	4610      	mov	r0, r2
   889a0:	4798      	blx	r3
   889a2:	4605      	mov	r5, r0
   889a4:	460e      	mov	r6, r1
   889a6:	4b16      	ldr	r3, [pc, #88]	; (88a00 <Cl_Heater_GetHeaterStableStatus+0xa8>)
   889a8:	681a      	ldr	r2, [r3, #0]
   889aa:	4b14      	ldr	r3, [pc, #80]	; (889fc <Cl_Heater_GetHeaterStableStatus+0xa4>)
   889ac:	4610      	mov	r0, r2
   889ae:	4798      	blx	r3
   889b0:	4c16      	ldr	r4, [pc, #88]	; (88a0c <Cl_Heater_GetHeaterStableStatus+0xb4>)
   889b2:	a30f      	add	r3, pc, #60	; (adr r3, 889f0 <Cl_Heater_GetHeaterStableStatus+0x98>)
   889b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   889b8:	47a0      	blx	r4
   889ba:	4603      	mov	r3, r0
   889bc:	460c      	mov	r4, r1
   889be:	461a      	mov	r2, r3
   889c0:	4623      	mov	r3, r4
   889c2:	4c13      	ldr	r4, [pc, #76]	; (88a10 <Cl_Heater_GetHeaterStableStatus+0xb8>)
   889c4:	4628      	mov	r0, r5
   889c6:	4631      	mov	r1, r6
   889c8:	47a0      	blx	r4
   889ca:	4603      	mov	r3, r0
   889cc:	2b00      	cmp	r3, #0
   889ce:	d004      	beq.n	889da <Cl_Heater_GetHeaterStableStatus+0x82>
	{
		*Stable =  cl_temp3_stable;
   889d0:	4b10      	ldr	r3, [pc, #64]	; (88a14 <Cl_Heater_GetHeaterStableStatus+0xbc>)
   889d2:	781a      	ldrb	r2, [r3, #0]
   889d4:	687b      	ldr	r3, [r7, #4]
   889d6:	701a      	strb	r2, [r3, #0]
   889d8:	e002      	b.n	889e0 <Cl_Heater_GetHeaterStableStatus+0x88>
	}
	else
	{
		*Stable =  false;
   889da:	687b      	ldr	r3, [r7, #4]
   889dc:	2200      	movs	r2, #0
   889de:	701a      	strb	r2, [r3, #0]
	}
return CL_OK;
   889e0:	2300      	movs	r3, #0
}
   889e2:	4618      	mov	r0, r3
   889e4:	370c      	adds	r7, #12
   889e6:	46bd      	mov	sp, r7
   889e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   889ea:	bf00      	nop
   889ec:	f3af 8000 	nop.w
   889f0:	9999999a 	.word	0x9999999a
   889f4:	3fc99999 	.word	0x3fc99999
   889f8:	20072148 	.word	0x20072148
   889fc:	000a34ed 	.word	0x000a34ed
   88a00:	20070474 	.word	0x20070474
   88a04:	000a322d 	.word	0x000a322d
   88a08:	000a3ab5 	.word	0x000a3ab5
   88a0c:	000a3231 	.word	0x000a3231
   88a10:	000a3a79 	.word	0x000a3a79
   88a14:	20072835 	.word	0x20072835

00088a18 <Cl_Heater_Event_Handler>:

Cl_ReturnCodeType Cl_Heater_Event_Handler(HeaterEventsType HeaterEvent, float data)
{
   88a18:	b580      	push	{r7, lr}
   88a1a:	b084      	sub	sp, #16
   88a1c:	af00      	add	r7, sp, #0
   88a1e:	4603      	mov	r3, r0
   88a20:	6039      	str	r1, [r7, #0]
   88a22:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_heeater_retcode = CL_OK;
   88a24:	2300      	movs	r3, #0
   88a26:	73fb      	strb	r3, [r7, #15]
	float cl_temp_delta = 0;
   88a28:	f04f 0300 	mov.w	r3, #0
   88a2c:	60bb      	str	r3, [r7, #8]

switch(HeaterEvent)
   88a2e:	79fb      	ldrb	r3, [r7, #7]
   88a30:	2b03      	cmp	r3, #3
   88a32:	d016      	beq.n	88a62 <Cl_Heater_Event_Handler+0x4a>
   88a34:	2b05      	cmp	r3, #5
   88a36:	d010      	beq.n	88a5a <Cl_Heater_Event_Handler+0x42>
   88a38:	2b01      	cmp	r3, #1
   88a3a:	d000      	beq.n	88a3e <Cl_Heater_Event_Handler+0x26>
	case CL_HEATER_EVENT_ON:
// 	sec_clock  = 0;
// 	sec_clock_total = 0;
	cl_temp3_stable = false;
	break;
	default:break;
   88a3c:	e016      	b.n	88a6c <Cl_Heater_Event_Handler+0x54>
{
	
	case CL_HEATER_EVENT_500MS:
										// maintaining coarse timer count, used in heater correction, for waiting temperature to stabilize.
//	UpdateHeaterControls();
		if (hotrinse_flag != 1)
   88a3e:	4b0e      	ldr	r3, [pc, #56]	; (88a78 <Cl_Heater_Event_Handler+0x60>)
   88a40:	781b      	ldrb	r3, [r3, #0]
   88a42:	2b01      	cmp	r3, #1
   88a44:	d002      	beq.n	88a4c <Cl_Heater_Event_Handler+0x34>
		{
			Heat_Correction();
   88a46:	4b0d      	ldr	r3, [pc, #52]	; (88a7c <Cl_Heater_Event_Handler+0x64>)
   88a48:	4798      	blx	r3
// 								
// 								temp3_cel_backup = avgtmp3_cel;
// 							}
							
							
	break;
   88a4a:	e00e      	b.n	88a6a <Cl_Heater_Event_Handler+0x52>
		if (hotrinse_flag != 1)
		{
			Heat_Correction();
		}
		
		else if (hotrinse_flag ==1)
   88a4c:	4b0a      	ldr	r3, [pc, #40]	; (88a78 <Cl_Heater_Event_Handler+0x60>)
   88a4e:	781b      	ldrb	r3, [r3, #0]
   88a50:	2b01      	cmp	r3, #1
   88a52:	d10a      	bne.n	88a6a <Cl_Heater_Event_Handler+0x52>
		{
			Hot_Rinse();
   88a54:	4b0a      	ldr	r3, [pc, #40]	; (88a80 <Cl_Heater_Event_Handler+0x68>)
   88a56:	4798      	blx	r3
// 								
// 								temp3_cel_backup = avgtmp3_cel;
// 							}
							
							
	break;
   88a58:	e007      	b.n	88a6a <Cl_Heater_Event_Handler+0x52>
	case CL_HEATER_EVENT_TARGET_TEMP:
	prescribed_temp = data;
   88a5a:	4a0a      	ldr	r2, [pc, #40]	; (88a84 <Cl_Heater_Event_Handler+0x6c>)
   88a5c:	683b      	ldr	r3, [r7, #0]
   88a5e:	6013      	str	r3, [r2, #0]
 
	break;
   88a60:	e004      	b.n	88a6c <Cl_Heater_Event_Handler+0x54>
	case CL_HEATER_EVENT_ON:
// 	sec_clock  = 0;
// 	sec_clock_total = 0;
	cl_temp3_stable = false;
   88a62:	4b09      	ldr	r3, [pc, #36]	; (88a88 <Cl_Heater_Event_Handler+0x70>)
   88a64:	2200      	movs	r2, #0
   88a66:	701a      	strb	r2, [r3, #0]
	break;
   88a68:	e000      	b.n	88a6c <Cl_Heater_Event_Handler+0x54>
// 								
// 								temp3_cel_backup = avgtmp3_cel;
// 							}
							
							
	break;
   88a6a:	bf00      	nop
	cl_temp3_stable = false;
	break;
	default:break;
}
	
	return (Cl_heeater_retcode);
   88a6c:	7bfb      	ldrb	r3, [r7, #15]
}
   88a6e:	4618      	mov	r0, r3
   88a70:	3710      	adds	r7, #16
   88a72:	46bd      	mov	sp, r7
   88a74:	bd80      	pop	{r7, pc}
   88a76:	bf00      	nop
   88a78:	2007288d 	.word	0x2007288d
   88a7c:	00088ea1 	.word	0x00088ea1
   88a80:	0008a049 	.word	0x0008a049
   88a84:	20070474 	.word	0x20070474
   88a88:	20072835 	.word	0x20072835
   88a8c:	00000000 	.word	0x00000000

00088a90 <SetHeaterState>:

Cl_ReturnCodeType SetHeaterState(HeaterStateType Param_HeaterState)
{
   88a90:	b590      	push	{r4, r7, lr}
   88a92:	b087      	sub	sp, #28
   88a94:	af00      	add	r7, sp, #0
   88a96:	4603      	mov	r3, r0
   88a98:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   88a9a:	2300      	movs	r3, #0
   88a9c:	75fb      	strb	r3, [r7, #23]
	int16_t sensordata;
	
	HeaterPrevState = HeaterState;
   88a9e:	4b41      	ldr	r3, [pc, #260]	; (88ba4 <SetHeaterState+0x114>)
   88aa0:	781a      	ldrb	r2, [r3, #0]
   88aa2:	4b41      	ldr	r3, [pc, #260]	; (88ba8 <SetHeaterState+0x118>)
   88aa4:	701a      	strb	r2, [r3, #0]
	HeaterState = Param_HeaterState;
   88aa6:	4a3f      	ldr	r2, [pc, #252]	; (88ba4 <SetHeaterState+0x114>)
   88aa8:	79fb      	ldrb	r3, [r7, #7]
   88aaa:	7013      	strb	r3, [r2, #0]
	if(Param_HeaterState == CL_HEATER_STATE_OFF)
   88aac:	79fb      	ldrb	r3, [r7, #7]
   88aae:	2b04      	cmp	r3, #4
   88ab0:	d104      	bne.n	88abc <SetHeaterState+0x2c>
	{
		sv_cntrl_poweroffheater();
   88ab2:	4b3e      	ldr	r3, [pc, #248]	; (88bac <SetHeaterState+0x11c>)
   88ab4:	4798      	blx	r3
		heater_substate = CL_HEATER_SUBSTATE_OFF;
   88ab6:	4b3e      	ldr	r3, [pc, #248]	; (88bb0 <SetHeaterState+0x120>)
   88ab8:	2200      	movs	r2, #0
   88aba:	701a      	strb	r2, [r3, #0]
	}
	if(Param_HeaterState == CL_HEATER_STATE_ON)
   88abc:	79fb      	ldrb	r3, [r7, #7]
   88abe:	2b01      	cmp	r3, #1
   88ac0:	d105      	bne.n	88ace <SetHeaterState+0x3e>
	{
// 				sec_clock  = 0;
// 				sec_clock_total = 0;
				cl_temp3_stable = false;
   88ac2:	4b3c      	ldr	r3, [pc, #240]	; (88bb4 <SetHeaterState+0x124>)
   88ac4:	2200      	movs	r2, #0
   88ac6:	701a      	strb	r2, [r3, #0]
				heater_substate = CL_HEATER_SUBSTATE_OFF;
   88ac8:	4b39      	ldr	r3, [pc, #228]	; (88bb0 <SetHeaterState+0x120>)
   88aca:	2200      	movs	r2, #0
   88acc:	701a      	strb	r2, [r3, #0]
	}	

		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);
   88ace:	f107 030c 	add.w	r3, r7, #12
   88ad2:	4619      	mov	r1, r3
   88ad4:	2012      	movs	r0, #18
   88ad6:	4b38      	ldr	r3, [pc, #224]	; (88bb8 <SetHeaterState+0x128>)
   88ad8:	4798      	blx	r3

		if((Param_HeaterState != CL_HEATER_STATE_DIALYSER_PRIME_ON ) && (Param_HeaterState != CL_HEATER_STATE_DIALYSIS_ON))
   88ada:	79fb      	ldrb	r3, [r7, #7]
   88adc:	2b02      	cmp	r3, #2
   88ade:	f000 80c1 	beq.w	88c64 <SetHeaterState+0x1d4>
   88ae2:	79fb      	ldrb	r3, [r7, #7]
   88ae4:	2b03      	cmp	r3, #3
   88ae6:	f000 80bd 	beq.w	88c64 <SetHeaterState+0x1d4>
		{
					
		uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
   88aea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   88aee:	461a      	mov	r2, r3
   88af0:	f649 5308 	movw	r3, #40200	; 0x9d08
   88af4:	fb03 f302 	mul.w	r3, r3, r2
   88af8:	2b00      	cmp	r3, #0
   88afa:	da02      	bge.n	88b02 <SetHeaterState+0x72>
   88afc:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   88b00:	33ff      	adds	r3, #255	; 0xff
   88b02:	141b      	asrs	r3, r3, #16
   88b04:	82bb      	strh	r3, [r7, #20]
		res_temp_lookuptable(cal_data);
   88b06:	8abb      	ldrh	r3, [r7, #20]
   88b08:	4618      	mov	r0, r3
   88b0a:	4b2c      	ldr	r3, [pc, #176]	; (88bbc <SetHeaterState+0x12c>)
   88b0c:	4798      	blx	r3
		Tmp1Val = res_temp_value;
   88b0e:	4b2c      	ldr	r3, [pc, #176]	; (88bc0 <SetHeaterState+0x130>)
   88b10:	681b      	ldr	r3, [r3, #0]
   88b12:	4a2c      	ldr	r2, [pc, #176]	; (88bc4 <SetHeaterState+0x134>)
   88b14:	6013      	str	r3, [r2, #0]
		 Tmp1Val = Tmp1Val - 2.5 + 1.2;
   88b16:	4b2b      	ldr	r3, [pc, #172]	; (88bc4 <SetHeaterState+0x134>)
   88b18:	681a      	ldr	r2, [r3, #0]
   88b1a:	4b2b      	ldr	r3, [pc, #172]	; (88bc8 <SetHeaterState+0x138>)
   88b1c:	4610      	mov	r0, r2
   88b1e:	4798      	blx	r3
   88b20:	4c2a      	ldr	r4, [pc, #168]	; (88bcc <SetHeaterState+0x13c>)
   88b22:	f04f 0200 	mov.w	r2, #0
   88b26:	4b2a      	ldr	r3, [pc, #168]	; (88bd0 <SetHeaterState+0x140>)
   88b28:	47a0      	blx	r4
   88b2a:	4603      	mov	r3, r0
   88b2c:	460c      	mov	r4, r1
   88b2e:	4618      	mov	r0, r3
   88b30:	4621      	mov	r1, r4
   88b32:	4c28      	ldr	r4, [pc, #160]	; (88bd4 <SetHeaterState+0x144>)
   88b34:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   88b38:	4b27      	ldr	r3, [pc, #156]	; (88bd8 <SetHeaterState+0x148>)
   88b3a:	47a0      	blx	r4
   88b3c:	4603      	mov	r3, r0
   88b3e:	460c      	mov	r4, r1
   88b40:	4619      	mov	r1, r3
   88b42:	4622      	mov	r2, r4
   88b44:	4b25      	ldr	r3, [pc, #148]	; (88bdc <SetHeaterState+0x14c>)
   88b46:	4608      	mov	r0, r1
   88b48:	4611      	mov	r1, r2
   88b4a:	4798      	blx	r3
   88b4c:	4602      	mov	r2, r0
   88b4e:	4b1d      	ldr	r3, [pc, #116]	; (88bc4 <SetHeaterState+0x134>)
   88b50:	601a      	str	r2, [r3, #0]
		 
	//	 avg_duty  = -84.24 * initial_temp1 + 5298;

 	//	 avg_duty = 2500;
	 
 SYSTEM_FLOW = Treatdata[ID_dflow];					// Gopal:  will get the system flow rate from the user
   88b52:	4b23      	ldr	r3, [pc, #140]	; (88be0 <SetHeaterState+0x150>)
   88b54:	695b      	ldr	r3, [r3, #20]
   88b56:	4a23      	ldr	r2, [pc, #140]	; (88be4 <SetHeaterState+0x154>)
   88b58:	6013      	str	r3, [r2, #0]
 Prescribed_T3 = Treatdata[ID_settemp]/10;				// Gopal:  will get the user set temperature to prescribed T3
   88b5a:	4b21      	ldr	r3, [pc, #132]	; (88be0 <SetHeaterState+0x150>)
   88b5c:	699b      	ldr	r3, [r3, #24]
   88b5e:	4a22      	ldr	r2, [pc, #136]	; (88be8 <SetHeaterState+0x158>)
   88b60:	fba2 2303 	umull	r2, r3, r2, r3
   88b64:	08da      	lsrs	r2, r3, #3
   88b66:	4b21      	ldr	r3, [pc, #132]	; (88bec <SetHeaterState+0x15c>)
   88b68:	4610      	mov	r0, r2
   88b6a:	4798      	blx	r3
   88b6c:	4602      	mov	r2, r0
   88b6e:	4b20      	ldr	r3, [pc, #128]	; (88bf0 <SetHeaterState+0x160>)
   88b70:	601a      	str	r2, [r3, #0]
 
//			  SYSTEM_FLOW = 300;					// Gopal: this shouldnot be hard coded... Flow rate from UI should be loaded to SYSTEM FLOW
	//	  Treatdata[ID_dflow] = 300; 
		  
		  if (SYSTEM_FLOW == 300 )                   // Gopal: if initial inlet temperature in less than 26 or flow rate is 300 then avg duty is 2400
   88b72:	4b1c      	ldr	r3, [pc, #112]	; (88be4 <SetHeaterState+0x154>)
   88b74:	681b      	ldr	r3, [r3, #0]
   88b76:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   88b7a:	d149      	bne.n	88c10 <SetHeaterState+0x180>
		  {
			  avg_duty = 2500;
   88b7c:	4b1d      	ldr	r3, [pc, #116]	; (88bf4 <SetHeaterState+0x164>)
   88b7e:	f640 12c4 	movw	r2, #2500	; 0x9c4
   88b82:	801a      	strh	r2, [r3, #0]
			 
			  wait_4_TS2Stability = WAIT_4_TS2STABILITY_300;
   88b84:	4b1c      	ldr	r3, [pc, #112]	; (88bf8 <SetHeaterState+0x168>)
   88b86:	22f0      	movs	r2, #240	; 0xf0
   88b88:	801a      	strh	r2, [r3, #0]
			  wait_4_stability = WAIT_4_TS3STABILITY_300;
   88b8a:	4b1c      	ldr	r3, [pc, #112]	; (88bfc <SetHeaterState+0x16c>)
   88b8c:	2278      	movs	r2, #120	; 0x78
   88b8e:	801a      	strh	r2, [r3, #0]
			  post_stability_count = TS2_STABILITY_COUNT_300;
   88b90:	4b1b      	ldr	r3, [pc, #108]	; (88c00 <SetHeaterState+0x170>)
   88b92:	221e      	movs	r2, #30
   88b94:	801a      	strh	r2, [r3, #0]
			  TS3_post_stability_count = TS3_STABILITY_COUNT_300;
   88b96:	4b1b      	ldr	r3, [pc, #108]	; (88c04 <SetHeaterState+0x174>)
   88b98:	223c      	movs	r2, #60	; 0x3c
   88b9a:	801a      	strh	r2, [r3, #0]
			  Prescribed_T2 = PRESCRIBED_TS2_300;
   88b9c:	4b1a      	ldr	r3, [pc, #104]	; (88c08 <SetHeaterState+0x178>)
   88b9e:	4a1b      	ldr	r2, [pc, #108]	; (88c0c <SetHeaterState+0x17c>)
   88ba0:	601a      	str	r2, [r3, #0]
   88ba2:	e05a      	b.n	88c5a <SetHeaterState+0x1ca>
   88ba4:	2007213b 	.word	0x2007213b
   88ba8:	2007213c 	.word	0x2007213c
   88bac:	00097999 	.word	0x00097999
   88bb0:	20072140 	.word	0x20072140
   88bb4:	20072835 	.word	0x20072835
   88bb8:	0008d6b1 	.word	0x0008d6b1
   88bbc:	0008e8e1 	.word	0x0008e8e1
   88bc0:	20072630 	.word	0x20072630
   88bc4:	2007214c 	.word	0x2007214c
   88bc8:	000a34ed 	.word	0x000a34ed
   88bcc:	000a322d 	.word	0x000a322d
   88bd0:	40040000 	.word	0x40040000
   88bd4:	000a3231 	.word	0x000a3231
   88bd8:	3ff33333 	.word	0x3ff33333
   88bdc:	000a3b59 	.word	0x000a3b59
   88be0:	200731a4 	.word	0x200731a4
   88be4:	20070484 	.word	0x20070484
   88be8:	cccccccd 	.word	0xcccccccd
   88bec:	000a3d65 	.word	0x000a3d65
   88bf0:	20070480 	.word	0x20070480
   88bf4:	2007213e 	.word	0x2007213e
   88bf8:	20070478 	.word	0x20070478
   88bfc:	2007047a 	.word	0x2007047a
   88c00:	20072160 	.word	0x20072160
   88c04:	20072162 	.word	0x20072162
   88c08:	2007047c 	.word	0x2007047c
   88c0c:	42200000 	.word	0x42200000
		  }
		  else if (SYSTEM_FLOW == 500)
   88c10:	4b87      	ldr	r3, [pc, #540]	; (88e30 <SetHeaterState+0x3a0>)
   88c12:	681b      	ldr	r3, [r3, #0]
   88c14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   88c18:	d11f      	bne.n	88c5a <SetHeaterState+0x1ca>
		  {
			  avg_duty = 2200;
   88c1a:	4b86      	ldr	r3, [pc, #536]	; (88e34 <SetHeaterState+0x3a4>)
   88c1c:	f640 0298 	movw	r2, #2200	; 0x898
   88c20:	801a      	strh	r2, [r3, #0]
			  if (Tmp1Val <= 26)
   88c22:	4b85      	ldr	r3, [pc, #532]	; (88e38 <SetHeaterState+0x3a8>)
   88c24:	681a      	ldr	r2, [r3, #0]
   88c26:	4b85      	ldr	r3, [pc, #532]	; (88e3c <SetHeaterState+0x3ac>)
   88c28:	4985      	ldr	r1, [pc, #532]	; (88e40 <SetHeaterState+0x3b0>)
   88c2a:	4610      	mov	r0, r2
   88c2c:	4798      	blx	r3
   88c2e:	4603      	mov	r3, r0
   88c30:	2b00      	cmp	r3, #0
   88c32:	d003      	beq.n	88c3c <SetHeaterState+0x1ac>
			  {
				  avg_duty = 2400;
   88c34:	4b7f      	ldr	r3, [pc, #508]	; (88e34 <SetHeaterState+0x3a4>)
   88c36:	f44f 6216 	mov.w	r2, #2400	; 0x960
   88c3a:	801a      	strh	r2, [r3, #0]
			  }
			  wait_4_TS2Stability = WAIT_4_TS2STABILITY_500;
   88c3c:	4b81      	ldr	r3, [pc, #516]	; (88e44 <SetHeaterState+0x3b4>)
   88c3e:	22b4      	movs	r2, #180	; 0xb4
   88c40:	801a      	strh	r2, [r3, #0]
			  wait_4_stability = WAIT_4_STABILITY_500;
   88c42:	4b81      	ldr	r3, [pc, #516]	; (88e48 <SetHeaterState+0x3b8>)
   88c44:	22b4      	movs	r2, #180	; 0xb4
   88c46:	801a      	strh	r2, [r3, #0]
			  post_stability_count =  TS2_STABILITY_COUNT_500;
   88c48:	4b80      	ldr	r3, [pc, #512]	; (88e4c <SetHeaterState+0x3bc>)
   88c4a:	221e      	movs	r2, #30
   88c4c:	801a      	strh	r2, [r3, #0]
			  TS3_post_stability_count = TS3_STABILITY_COUNT_500;
   88c4e:	4b80      	ldr	r3, [pc, #512]	; (88e50 <SetHeaterState+0x3c0>)
   88c50:	223c      	movs	r2, #60	; 0x3c
   88c52:	801a      	strh	r2, [r3, #0]
			  Prescribed_T2 = PRESCRIBED_TS2_500;
   88c54:	4b7f      	ldr	r3, [pc, #508]	; (88e54 <SetHeaterState+0x3c4>)
   88c56:	4a80      	ldr	r2, [pc, #512]	; (88e58 <SetHeaterState+0x3c8>)
   88c58:	601a      	str	r2, [r3, #0]
			  
		  }
		 //avg_duty_bak = avg_duty;
		 
		 avg_duty = avg_duty ;
   88c5a:	4b76      	ldr	r3, [pc, #472]	; (88e34 <SetHeaterState+0x3a4>)
   88c5c:	f9b3 2000 	ldrsh.w	r2, [r3]
   88c60:	4b74      	ldr	r3, [pc, #464]	; (88e34 <SetHeaterState+0x3a4>)
   88c62:	801a      	strh	r2, [r3, #0]
		 
		}

		 
		 	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);
   88c64:	f107 030c 	add.w	r3, r7, #12
   88c68:	4619      	mov	r1, r3
   88c6a:	2012      	movs	r0, #18
   88c6c:	4b7b      	ldr	r3, [pc, #492]	; (88e5c <SetHeaterState+0x3cc>)
   88c6e:	4798      	blx	r3
			 {
		 			uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
   88c70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   88c74:	461a      	mov	r2, r3
   88c76:	f649 5308 	movw	r3, #40200	; 0x9d08
   88c7a:	fb03 f302 	mul.w	r3, r3, r2
   88c7e:	2b00      	cmp	r3, #0
   88c80:	da02      	bge.n	88c88 <SetHeaterState+0x1f8>
   88c82:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   88c86:	33ff      	adds	r3, #255	; 0xff
   88c88:	141b      	asrs	r3, r3, #16
   88c8a:	827b      	strh	r3, [r7, #18]
		 			res_temp_lookuptable(cal_data);
   88c8c:	8a7b      	ldrh	r3, [r7, #18]
   88c8e:	4618      	mov	r0, r3
   88c90:	4b73      	ldr	r3, [pc, #460]	; (88e60 <SetHeaterState+0x3d0>)
   88c92:	4798      	blx	r3
		 			 Tmp1Val = res_temp_value/100;                                      // Temp1 value in XX.yy format
   88c94:	4b73      	ldr	r3, [pc, #460]	; (88e64 <SetHeaterState+0x3d4>)
   88c96:	681a      	ldr	r2, [r3, #0]
   88c98:	4b73      	ldr	r3, [pc, #460]	; (88e68 <SetHeaterState+0x3d8>)
   88c9a:	4974      	ldr	r1, [pc, #464]	; (88e6c <SetHeaterState+0x3dc>)
   88c9c:	4610      	mov	r0, r2
   88c9e:	4798      	blx	r3
   88ca0:	4603      	mov	r3, r0
   88ca2:	461a      	mov	r2, r3
   88ca4:	4b64      	ldr	r3, [pc, #400]	; (88e38 <SetHeaterState+0x3a8>)
   88ca6:	601a      	str	r2, [r3, #0]
					 Tmp1Val = Tmp1Val - 2.5 + 1.2;
   88ca8:	4b63      	ldr	r3, [pc, #396]	; (88e38 <SetHeaterState+0x3a8>)
   88caa:	681a      	ldr	r2, [r3, #0]
   88cac:	4b70      	ldr	r3, [pc, #448]	; (88e70 <SetHeaterState+0x3e0>)
   88cae:	4610      	mov	r0, r2
   88cb0:	4798      	blx	r3
   88cb2:	4c70      	ldr	r4, [pc, #448]	; (88e74 <SetHeaterState+0x3e4>)
   88cb4:	f04f 0200 	mov.w	r2, #0
   88cb8:	4b6f      	ldr	r3, [pc, #444]	; (88e78 <SetHeaterState+0x3e8>)
   88cba:	47a0      	blx	r4
   88cbc:	4603      	mov	r3, r0
   88cbe:	460c      	mov	r4, r1
   88cc0:	4618      	mov	r0, r3
   88cc2:	4621      	mov	r1, r4
   88cc4:	4c6d      	ldr	r4, [pc, #436]	; (88e7c <SetHeaterState+0x3ec>)
   88cc6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   88cca:	4b6d      	ldr	r3, [pc, #436]	; (88e80 <SetHeaterState+0x3f0>)
   88ccc:	47a0      	blx	r4
   88cce:	4603      	mov	r3, r0
   88cd0:	460c      	mov	r4, r1
   88cd2:	4619      	mov	r1, r3
   88cd4:	4622      	mov	r2, r4
   88cd6:	4b6b      	ldr	r3, [pc, #428]	; (88e84 <SetHeaterState+0x3f4>)
   88cd8:	4608      	mov	r0, r1
   88cda:	4611      	mov	r1, r2
   88cdc:	4798      	blx	r3
   88cde:	4602      	mov	r2, r0
   88ce0:	4b55      	ldr	r3, [pc, #340]	; (88e38 <SetHeaterState+0x3a8>)
   88ce2:	601a      	str	r2, [r3, #0]
			//		initial_temp1 = Tmp1Val;
			 }
		 	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);
   88ce4:	f107 030c 	add.w	r3, r7, #12
   88ce8:	4619      	mov	r1, r3
   88cea:	2013      	movs	r0, #19
   88cec:	4b5b      	ldr	r3, [pc, #364]	; (88e5c <SetHeaterState+0x3cc>)
   88cee:	4798      	blx	r3
			 {
				 uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
   88cf0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   88cf4:	461a      	mov	r2, r3
   88cf6:	f649 5308 	movw	r3, #40200	; 0x9d08
   88cfa:	fb03 f302 	mul.w	r3, r3, r2
   88cfe:	2b00      	cmp	r3, #0
   88d00:	da02      	bge.n	88d08 <SetHeaterState+0x278>
   88d02:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   88d06:	33ff      	adds	r3, #255	; 0xff
   88d08:	141b      	asrs	r3, r3, #16
   88d0a:	823b      	strh	r3, [r7, #16]
				 res_temp_lookuptable(cal_data);
   88d0c:	8a3b      	ldrh	r3, [r7, #16]
   88d0e:	4618      	mov	r0, r3
   88d10:	4b53      	ldr	r3, [pc, #332]	; (88e60 <SetHeaterState+0x3d0>)
   88d12:	4798      	blx	r3
				  Tmp2Val = res_temp_value/100;                                      // Temp1 value in XX.yy format
   88d14:	4b53      	ldr	r3, [pc, #332]	; (88e64 <SetHeaterState+0x3d4>)
   88d16:	681a      	ldr	r2, [r3, #0]
   88d18:	4b53      	ldr	r3, [pc, #332]	; (88e68 <SetHeaterState+0x3d8>)
   88d1a:	4954      	ldr	r1, [pc, #336]	; (88e6c <SetHeaterState+0x3dc>)
   88d1c:	4610      	mov	r0, r2
   88d1e:	4798      	blx	r3
   88d20:	4603      	mov	r3, r0
   88d22:	461a      	mov	r2, r3
   88d24:	4b58      	ldr	r3, [pc, #352]	; (88e88 <SetHeaterState+0x3f8>)
   88d26:	601a      	str	r2, [r3, #0]
				  Tmp2Val = Tmp2Val - 2.5 + 1.2;
   88d28:	4b57      	ldr	r3, [pc, #348]	; (88e88 <SetHeaterState+0x3f8>)
   88d2a:	681a      	ldr	r2, [r3, #0]
   88d2c:	4b50      	ldr	r3, [pc, #320]	; (88e70 <SetHeaterState+0x3e0>)
   88d2e:	4610      	mov	r0, r2
   88d30:	4798      	blx	r3
   88d32:	4c50      	ldr	r4, [pc, #320]	; (88e74 <SetHeaterState+0x3e4>)
   88d34:	f04f 0200 	mov.w	r2, #0
   88d38:	4b4f      	ldr	r3, [pc, #316]	; (88e78 <SetHeaterState+0x3e8>)
   88d3a:	47a0      	blx	r4
   88d3c:	4603      	mov	r3, r0
   88d3e:	460c      	mov	r4, r1
   88d40:	4618      	mov	r0, r3
   88d42:	4621      	mov	r1, r4
   88d44:	4c4d      	ldr	r4, [pc, #308]	; (88e7c <SetHeaterState+0x3ec>)
   88d46:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   88d4a:	4b4d      	ldr	r3, [pc, #308]	; (88e80 <SetHeaterState+0x3f0>)
   88d4c:	47a0      	blx	r4
   88d4e:	4603      	mov	r3, r0
   88d50:	460c      	mov	r4, r1
   88d52:	4619      	mov	r1, r3
   88d54:	4622      	mov	r2, r4
   88d56:	4b4b      	ldr	r3, [pc, #300]	; (88e84 <SetHeaterState+0x3f4>)
   88d58:	4608      	mov	r0, r1
   88d5a:	4611      	mov	r1, r2
   88d5c:	4798      	blx	r3
   88d5e:	4602      	mov	r2, r0
   88d60:	4b49      	ldr	r3, [pc, #292]	; (88e88 <SetHeaterState+0x3f8>)
   88d62:	601a      	str	r2, [r3, #0]
				 prev_temp2val = Tmp2Val;
   88d64:	4b48      	ldr	r3, [pc, #288]	; (88e88 <SetHeaterState+0x3f8>)
   88d66:	681a      	ldr	r2, [r3, #0]
   88d68:	4b48      	ldr	r3, [pc, #288]	; (88e8c <SetHeaterState+0x3fc>)
   88d6a:	4610      	mov	r0, r2
   88d6c:	4798      	blx	r3
   88d6e:	4603      	mov	r3, r0
   88d70:	b21a      	sxth	r2, r3
   88d72:	4b47      	ldr	r3, [pc, #284]	; (88e90 <SetHeaterState+0x400>)
   88d74:	801a      	strh	r2, [r3, #0]
			 }
		 	
		 	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   88d76:	f107 030c 	add.w	r3, r7, #12
   88d7a:	4619      	mov	r1, r3
   88d7c:	2014      	movs	r0, #20
   88d7e:	4b37      	ldr	r3, [pc, #220]	; (88e5c <SetHeaterState+0x3cc>)
   88d80:	4798      	blx	r3
			 {
				 uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
   88d82:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   88d86:	461a      	mov	r2, r3
   88d88:	f649 5308 	movw	r3, #40200	; 0x9d08
   88d8c:	fb03 f302 	mul.w	r3, r3, r2
   88d90:	2b00      	cmp	r3, #0
   88d92:	da02      	bge.n	88d9a <SetHeaterState+0x30a>
   88d94:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   88d98:	33ff      	adds	r3, #255	; 0xff
   88d9a:	141b      	asrs	r3, r3, #16
   88d9c:	81fb      	strh	r3, [r7, #14]
				 res_temp_lookuptable(cal_data);
   88d9e:	89fb      	ldrh	r3, [r7, #14]
   88da0:	4618      	mov	r0, r3
   88da2:	4b2f      	ldr	r3, [pc, #188]	; (88e60 <SetHeaterState+0x3d0>)
   88da4:	4798      	blx	r3
				 Tmp3Val = res_temp_value/100;									// Temp3 value in XX.yy format
   88da6:	4b2f      	ldr	r3, [pc, #188]	; (88e64 <SetHeaterState+0x3d4>)
   88da8:	681a      	ldr	r2, [r3, #0]
   88daa:	4b2f      	ldr	r3, [pc, #188]	; (88e68 <SetHeaterState+0x3d8>)
   88dac:	492f      	ldr	r1, [pc, #188]	; (88e6c <SetHeaterState+0x3dc>)
   88dae:	4610      	mov	r0, r2
   88db0:	4798      	blx	r3
   88db2:	4603      	mov	r3, r0
   88db4:	461a      	mov	r2, r3
   88db6:	4b37      	ldr	r3, [pc, #220]	; (88e94 <SetHeaterState+0x404>)
   88db8:	601a      	str	r2, [r3, #0]
				 Tmp3Val = Tmp3Val - 3.1 + 1.4;
   88dba:	4b36      	ldr	r3, [pc, #216]	; (88e94 <SetHeaterState+0x404>)
   88dbc:	681a      	ldr	r2, [r3, #0]
   88dbe:	4b2c      	ldr	r3, [pc, #176]	; (88e70 <SetHeaterState+0x3e0>)
   88dc0:	4610      	mov	r0, r2
   88dc2:	4798      	blx	r3
   88dc4:	4c2b      	ldr	r4, [pc, #172]	; (88e74 <SetHeaterState+0x3e4>)
   88dc6:	a316      	add	r3, pc, #88	; (adr r3, 88e20 <SetHeaterState+0x390>)
   88dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   88dcc:	47a0      	blx	r4
   88dce:	4603      	mov	r3, r0
   88dd0:	460c      	mov	r4, r1
   88dd2:	4618      	mov	r0, r3
   88dd4:	4621      	mov	r1, r4
   88dd6:	4c29      	ldr	r4, [pc, #164]	; (88e7c <SetHeaterState+0x3ec>)
   88dd8:	a313      	add	r3, pc, #76	; (adr r3, 88e28 <SetHeaterState+0x398>)
   88dda:	e9d3 2300 	ldrd	r2, r3, [r3]
   88dde:	47a0      	blx	r4
   88de0:	4603      	mov	r3, r0
   88de2:	460c      	mov	r4, r1
   88de4:	4619      	mov	r1, r3
   88de6:	4622      	mov	r2, r4
   88de8:	4b26      	ldr	r3, [pc, #152]	; (88e84 <SetHeaterState+0x3f4>)
   88dea:	4608      	mov	r0, r1
   88dec:	4611      	mov	r1, r2
   88dee:	4798      	blx	r3
   88df0:	4602      	mov	r2, r0
   88df2:	4b28      	ldr	r3, [pc, #160]	; (88e94 <SetHeaterState+0x404>)
   88df4:	601a      	str	r2, [r3, #0]
				 prev_temp3val = Tmp3Val;
   88df6:	4b27      	ldr	r3, [pc, #156]	; (88e94 <SetHeaterState+0x404>)
   88df8:	681a      	ldr	r2, [r3, #0]
   88dfa:	4b24      	ldr	r3, [pc, #144]	; (88e8c <SetHeaterState+0x3fc>)
   88dfc:	4610      	mov	r0, r2
   88dfe:	4798      	blx	r3
   88e00:	4603      	mov	r3, r0
   88e02:	b21a      	sxth	r2, r3
   88e04:	4b24      	ldr	r3, [pc, #144]	; (88e98 <SetHeaterState+0x408>)
   88e06:	801a      	strh	r2, [r3, #0]
			 }
		 
		 	
	if (HeaterState == CL_HEATER_STATE_CLOSED_HEATING)
   88e08:	4b24      	ldr	r3, [pc, #144]	; (88e9c <SetHeaterState+0x40c>)
   88e0a:	781b      	ldrb	r3, [r3, #0]
   88e0c:	2b06      	cmp	r3, #6
   88e0e:	d102      	bne.n	88e16 <SetHeaterState+0x386>
	{
		//stable_avg_dty = avg_duty;
		avg_duty = 100;
   88e10:	4b08      	ldr	r3, [pc, #32]	; (88e34 <SetHeaterState+0x3a4>)
   88e12:	2264      	movs	r2, #100	; 0x64
   88e14:	801a      	strh	r2, [r3, #0]
	{
	//	avg_duty = stable_avg_dty;
	}

	
	return (Cl_rinseretcode);
   88e16:	7dfb      	ldrb	r3, [r7, #23]
}
   88e18:	4618      	mov	r0, r3
   88e1a:	371c      	adds	r7, #28
   88e1c:	46bd      	mov	sp, r7
   88e1e:	bd90      	pop	{r4, r7, pc}
   88e20:	cccccccd 	.word	0xcccccccd
   88e24:	4008cccc 	.word	0x4008cccc
   88e28:	66666666 	.word	0x66666666
   88e2c:	3ff66666 	.word	0x3ff66666
   88e30:	20070484 	.word	0x20070484
   88e34:	2007213e 	.word	0x2007213e
   88e38:	2007214c 	.word	0x2007214c
   88e3c:	000a4165 	.word	0x000a4165
   88e40:	41d00000 	.word	0x41d00000
   88e44:	20070478 	.word	0x20070478
   88e48:	2007047a 	.word	0x2007047a
   88e4c:	20072160 	.word	0x20072160
   88e50:	20072162 	.word	0x20072162
   88e54:	2007047c 	.word	0x2007047c
   88e58:	42140000 	.word	0x42140000
   88e5c:	0008d6b1 	.word	0x0008d6b1
   88e60:	0008e8e1 	.word	0x0008e8e1
   88e64:	20072630 	.word	0x20072630
   88e68:	000a3f7d 	.word	0x000a3f7d
   88e6c:	42c80000 	.word	0x42c80000
   88e70:	000a34ed 	.word	0x000a34ed
   88e74:	000a322d 	.word	0x000a322d
   88e78:	40040000 	.word	0x40040000
   88e7c:	000a3231 	.word	0x000a3231
   88e80:	3ff33333 	.word	0x3ff33333
   88e84:	000a3b59 	.word	0x000a3b59
   88e88:	20072150 	.word	0x20072150
   88e8c:	000a41a1 	.word	0x000a41a1
   88e90:	20072142 	.word	0x20072142
   88e94:	20072154 	.word	0x20072154
   88e98:	20072144 	.word	0x20072144
   88e9c:	2007213b 	.word	0x2007213b

00088ea0 <Heat_Correction>:

int16_t Heat_Correction()
{
   88ea0:	b590      	push	{r4, r7, lr}
   88ea2:	b083      	sub	sp, #12
   88ea4:	af00      	add	r7, sp, #0
	count_500ms ++;
   88ea6:	4b17      	ldr	r3, [pc, #92]	; (88f04 <Heat_Correction+0x64>)
   88ea8:	881b      	ldrh	r3, [r3, #0]
   88eaa:	3301      	adds	r3, #1
   88eac:	b29a      	uxth	r2, r3
   88eae:	4b15      	ldr	r3, [pc, #84]	; (88f04 <Heat_Correction+0x64>)
   88eb0:	801a      	strh	r2, [r3, #0]
    stability_count++;				//Count used to check if TS3 is stable, is being reset so we need this and cannot use count_500ms
   88eb2:	4b15      	ldr	r3, [pc, #84]	; (88f08 <Heat_Correction+0x68>)
   88eb4:	881b      	ldrh	r3, [r3, #0]
   88eb6:	3301      	adds	r3, #1
   88eb8:	b29a      	uxth	r2, r3
   88eba:	4b13      	ldr	r3, [pc, #76]	; (88f08 <Heat_Correction+0x68>)
   88ebc:	801a      	strh	r2, [r3, #0]
	TS2_stability_count++;
   88ebe:	4b13      	ldr	r3, [pc, #76]	; (88f0c <Heat_Correction+0x6c>)
   88ec0:	881b      	ldrh	r3, [r3, #0]
   88ec2:	3301      	adds	r3, #1
   88ec4:	b29a      	uxth	r2, r3
   88ec6:	4b11      	ldr	r3, [pc, #68]	; (88f0c <Heat_Correction+0x6c>)
   88ec8:	801a      	strh	r2, [r3, #0]
		
	if (!(count_500ms % 600))           // wait for 30 sec for storing TS2 value, used in slope calculation
   88eca:	4b0e      	ldr	r3, [pc, #56]	; (88f04 <Heat_Correction+0x64>)
   88ecc:	881b      	ldrh	r3, [r3, #0]
   88ece:	4a10      	ldr	r2, [pc, #64]	; (88f10 <Heat_Correction+0x70>)
   88ed0:	fba2 1203 	umull	r1, r2, r2, r3
   88ed4:	0992      	lsrs	r2, r2, #6
   88ed6:	f44f 7116 	mov.w	r1, #600	; 0x258
   88eda:	fb01 f202 	mul.w	r2, r1, r2
   88ede:	1a9b      	subs	r3, r3, r2
   88ee0:	b29b      	uxth	r3, r3
   88ee2:	2b00      	cmp	r3, #0
   88ee4:	d107      	bne.n	88ef6 <Heat_Correction+0x56>
	{
		Past_TS2 = Tmp2Val;
   88ee6:	4b0b      	ldr	r3, [pc, #44]	; (88f14 <Heat_Correction+0x74>)
   88ee8:	681b      	ldr	r3, [r3, #0]
   88eea:	4a0b      	ldr	r2, [pc, #44]	; (88f18 <Heat_Correction+0x78>)
   88eec:	6013      	str	r3, [r2, #0]
		count_at_PastTS2 = count_500ms;  //for use in slope calculation
   88eee:	4b05      	ldr	r3, [pc, #20]	; (88f04 <Heat_Correction+0x64>)
   88ef0:	881a      	ldrh	r2, [r3, #0]
   88ef2:	4b0a      	ldr	r3, [pc, #40]	; (88f1c <Heat_Correction+0x7c>)
   88ef4:	801a      	strh	r2, [r3, #0]
	
	// test code to detect pattern
	int16_t sensordata;
	
	
	if(HeaterState == CL_HEATER_STATE_OFF  )
   88ef6:	4b0a      	ldr	r3, [pc, #40]	; (88f20 <Heat_Correction+0x80>)
   88ef8:	781b      	ldrb	r3, [r3, #0]
   88efa:	2b04      	cmp	r3, #4
   88efc:	d114      	bne.n	88f28 <Heat_Correction+0x88>
	{
		sv_cntrl_poweroffheater();
   88efe:	4b09      	ldr	r3, [pc, #36]	; (88f24 <Heat_Correction+0x84>)
   88f00:	4798      	blx	r3
		return;
   88f02:	e27f      	b.n	89404 <Heat_Correction+0x564>
   88f04:	20072158 	.word	0x20072158
   88f08:	2007215a 	.word	0x2007215a
   88f0c:	2007215c 	.word	0x2007215c
   88f10:	1b4e81b5 	.word	0x1b4e81b5
   88f14:	20072150 	.word	0x20072150
   88f18:	20072168 	.word	0x20072168
   88f1c:	2007215e 	.word	0x2007215e
   88f20:	2007213b 	.word	0x2007213b
   88f24:	00097999 	.word	0x00097999
	}
	if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
   88f28:	4ba5      	ldr	r3, [pc, #660]	; (891c0 <Heat_Correction+0x320>)
   88f2a:	781b      	ldrb	r3, [r3, #0]
   88f2c:	2b00      	cmp	r3, #0
   88f2e:	f000 8268 	beq.w	89402 <Heat_Correction+0x562>
   88f32:	4ba3      	ldr	r3, [pc, #652]	; (891c0 <Heat_Correction+0x320>)
   88f34:	781b      	ldrb	r3, [r3, #0]
   88f36:	2b00      	cmp	r3, #0
   88f38:	f000 8263 	beq.w	89402 <Heat_Correction+0x562>
	}
//avg_duty is set to value 2240 for TS3 = 37.4 at global level
    
		
    // Sunil: We are calling power on heater every 500msec, HeaterState is set by Cl_RinseController. Should be turned ON only once?
	if((HeaterState == CL_HEATER_STATE_ON) || (HeaterState == CL_HEATER_STATE_DIALYSER_PRIME_ON) || (HeaterState == CL_HEATER_STATE_DIALYSIS_ON))
   88f3c:	4ba0      	ldr	r3, [pc, #640]	; (891c0 <Heat_Correction+0x320>)
   88f3e:	781b      	ldrb	r3, [r3, #0]
   88f40:	2b01      	cmp	r3, #1
   88f42:	d007      	beq.n	88f54 <Heat_Correction+0xb4>
   88f44:	4b9e      	ldr	r3, [pc, #632]	; (891c0 <Heat_Correction+0x320>)
   88f46:	781b      	ldrb	r3, [r3, #0]
   88f48:	2b02      	cmp	r3, #2
   88f4a:	d003      	beq.n	88f54 <Heat_Correction+0xb4>
   88f4c:	4b9c      	ldr	r3, [pc, #624]	; (891c0 <Heat_Correction+0x320>)
   88f4e:	781b      	ldrb	r3, [r3, #0]
   88f50:	2b03      	cmp	r3, #3
   88f52:	d107      	bne.n	88f64 <Heat_Correction+0xc4>
	{
	 		sv_cntrl_poweronheater();
   88f54:	4b9b      	ldr	r3, [pc, #620]	; (891c4 <Heat_Correction+0x324>)
   88f56:	4798      	blx	r3
			sv_cntrl_incheater(avg_duty);
   88f58:	4b9b      	ldr	r3, [pc, #620]	; (891c8 <Heat_Correction+0x328>)
   88f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
   88f5e:	4618      	mov	r0, r3
   88f60:	4b9a      	ldr	r3, [pc, #616]	; (891cc <Heat_Correction+0x32c>)
   88f62:	4798      	blx	r3
		   
	}
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);      // sensor data of T1
   88f64:	463b      	mov	r3, r7
   88f66:	4619      	mov	r1, r3
   88f68:	2012      	movs	r0, #18
   88f6a:	4b99      	ldr	r3, [pc, #612]	; (891d0 <Heat_Correction+0x330>)
   88f6c:	4798      	blx	r3
	{
	 	uint16_t cal_data  = (402 *100* sensordata)/(2*32768);             // resistance of PT100
   88f6e:	f9b7 3000 	ldrsh.w	r3, [r7]
   88f72:	461a      	mov	r2, r3
   88f74:	f649 5308 	movw	r3, #40200	; 0x9d08
   88f78:	fb03 f302 	mul.w	r3, r3, r2
   88f7c:	2b00      	cmp	r3, #0
   88f7e:	da02      	bge.n	88f86 <Heat_Correction+0xe6>
   88f80:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   88f84:	33ff      	adds	r3, #255	; 0xff
   88f86:	141b      	asrs	r3, r3, #16
   88f88:	80fb      	strh	r3, [r7, #6]
	 	res_temp_lookuptable(cal_data);                                    // temperature from look up table in 4 digits
   88f8a:	88fb      	ldrh	r3, [r7, #6]
   88f8c:	4618      	mov	r0, r3
   88f8e:	4b91      	ldr	r3, [pc, #580]	; (891d4 <Heat_Correction+0x334>)
   88f90:	4798      	blx	r3
	 	Tmp1Val = res_temp_value/100;                                      // Temp1 value in XX.yy format
   88f92:	4b91      	ldr	r3, [pc, #580]	; (891d8 <Heat_Correction+0x338>)
   88f94:	681a      	ldr	r2, [r3, #0]
   88f96:	4b91      	ldr	r3, [pc, #580]	; (891dc <Heat_Correction+0x33c>)
   88f98:	4991      	ldr	r1, [pc, #580]	; (891e0 <Heat_Correction+0x340>)
   88f9a:	4610      	mov	r0, r2
   88f9c:	4798      	blx	r3
   88f9e:	4603      	mov	r3, r0
   88fa0:	461a      	mov	r2, r3
   88fa2:	4b90      	ldr	r3, [pc, #576]	; (891e4 <Heat_Correction+0x344>)
   88fa4:	601a      	str	r2, [r3, #0]
		Tmp1Val = Tmp1Val - 2.5 + 1.2; 
   88fa6:	4b8f      	ldr	r3, [pc, #572]	; (891e4 <Heat_Correction+0x344>)
   88fa8:	681a      	ldr	r2, [r3, #0]
   88faa:	4b8f      	ldr	r3, [pc, #572]	; (891e8 <Heat_Correction+0x348>)
   88fac:	4610      	mov	r0, r2
   88fae:	4798      	blx	r3
   88fb0:	4c8e      	ldr	r4, [pc, #568]	; (891ec <Heat_Correction+0x34c>)
   88fb2:	f04f 0200 	mov.w	r2, #0
   88fb6:	4b8e      	ldr	r3, [pc, #568]	; (891f0 <Heat_Correction+0x350>)
   88fb8:	47a0      	blx	r4
   88fba:	4603      	mov	r3, r0
   88fbc:	460c      	mov	r4, r1
   88fbe:	4618      	mov	r0, r3
   88fc0:	4621      	mov	r1, r4
   88fc2:	4c8c      	ldr	r4, [pc, #560]	; (891f4 <Heat_Correction+0x354>)
   88fc4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   88fc8:	4b8b      	ldr	r3, [pc, #556]	; (891f8 <Heat_Correction+0x358>)
   88fca:	47a0      	blx	r4
   88fcc:	4603      	mov	r3, r0
   88fce:	460c      	mov	r4, r1
   88fd0:	4619      	mov	r1, r3
   88fd2:	4622      	mov	r2, r4
   88fd4:	4b89      	ldr	r3, [pc, #548]	; (891fc <Heat_Correction+0x35c>)
   88fd6:	4608      	mov	r0, r1
   88fd8:	4611      	mov	r1, r2
   88fda:	4798      	blx	r3
   88fdc:	4602      	mov	r2, r0
   88fde:	4b81      	ldr	r3, [pc, #516]	; (891e4 <Heat_Correction+0x344>)
   88fe0:	601a      	str	r2, [r3, #0]
	}
	
	if (!(count_500ms %40))    // 40 28072017
   88fe2:	4b87      	ldr	r3, [pc, #540]	; (89200 <Heat_Correction+0x360>)
   88fe4:	881a      	ldrh	r2, [r3, #0]
   88fe6:	4b87      	ldr	r3, [pc, #540]	; (89204 <Heat_Correction+0x364>)
   88fe8:	fba3 1302 	umull	r1, r3, r3, r2
   88fec:	0959      	lsrs	r1, r3, #5
   88fee:	460b      	mov	r3, r1
   88ff0:	009b      	lsls	r3, r3, #2
   88ff2:	440b      	add	r3, r1
   88ff4:	00db      	lsls	r3, r3, #3
   88ff6:	1ad3      	subs	r3, r2, r3
   88ff8:	b29b      	uxth	r3, r3
   88ffa:	2b00      	cmp	r3, #0
   88ffc:	d103      	bne.n	89006 <Heat_Correction+0x166>
		Tmp2Val_prev = Tmp2Val;  //For calculating if TS2 stable, read once in every 2 sec
   88ffe:	4b82      	ldr	r3, [pc, #520]	; (89208 <Heat_Correction+0x368>)
   89000:	681b      	ldr	r3, [r3, #0]
   89002:	4a82      	ldr	r2, [pc, #520]	; (8920c <Heat_Correction+0x36c>)
   89004:	6013      	str	r3, [r2, #0]
					                                             
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);     // sensor data of T2
   89006:	463b      	mov	r3, r7
   89008:	4619      	mov	r1, r3
   8900a:	2013      	movs	r0, #19
   8900c:	4b70      	ldr	r3, [pc, #448]	; (891d0 <Heat_Correction+0x330>)
   8900e:	4798      	blx	r3
	{
		uint16_t cal_data  = (402 *100* sensordata)/(2*32768);			   // resistance of PT100
   89010:	f9b7 3000 	ldrsh.w	r3, [r7]
   89014:	461a      	mov	r2, r3
   89016:	f649 5308 	movw	r3, #40200	; 0x9d08
   8901a:	fb03 f302 	mul.w	r3, r3, r2
   8901e:	2b00      	cmp	r3, #0
   89020:	da02      	bge.n	89028 <Heat_Correction+0x188>
   89022:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   89026:	33ff      	adds	r3, #255	; 0xff
   89028:	141b      	asrs	r3, r3, #16
   8902a:	80bb      	strh	r3, [r7, #4]
		res_temp_lookuptable(cal_data);									   // temperature from look up table in 4 digits
   8902c:	88bb      	ldrh	r3, [r7, #4]
   8902e:	4618      	mov	r0, r3
   89030:	4b68      	ldr	r3, [pc, #416]	; (891d4 <Heat_Correction+0x334>)
   89032:	4798      	blx	r3
		Tmp2Val = res_temp_value/100;									   // Temp2 value in XX.yy format
   89034:	4b68      	ldr	r3, [pc, #416]	; (891d8 <Heat_Correction+0x338>)
   89036:	681a      	ldr	r2, [r3, #0]
   89038:	4b68      	ldr	r3, [pc, #416]	; (891dc <Heat_Correction+0x33c>)
   8903a:	4969      	ldr	r1, [pc, #420]	; (891e0 <Heat_Correction+0x340>)
   8903c:	4610      	mov	r0, r2
   8903e:	4798      	blx	r3
   89040:	4603      	mov	r3, r0
   89042:	461a      	mov	r2, r3
   89044:	4b70      	ldr	r3, [pc, #448]	; (89208 <Heat_Correction+0x368>)
   89046:	601a      	str	r2, [r3, #0]
		Tmp2Val = Tmp2Val - 2.5 + 1.2;                                     // sensor offset
   89048:	4b6f      	ldr	r3, [pc, #444]	; (89208 <Heat_Correction+0x368>)
   8904a:	681a      	ldr	r2, [r3, #0]
   8904c:	4b66      	ldr	r3, [pc, #408]	; (891e8 <Heat_Correction+0x348>)
   8904e:	4610      	mov	r0, r2
   89050:	4798      	blx	r3
   89052:	4c66      	ldr	r4, [pc, #408]	; (891ec <Heat_Correction+0x34c>)
   89054:	f04f 0200 	mov.w	r2, #0
   89058:	4b65      	ldr	r3, [pc, #404]	; (891f0 <Heat_Correction+0x350>)
   8905a:	47a0      	blx	r4
   8905c:	4603      	mov	r3, r0
   8905e:	460c      	mov	r4, r1
   89060:	4618      	mov	r0, r3
   89062:	4621      	mov	r1, r4
   89064:	4c63      	ldr	r4, [pc, #396]	; (891f4 <Heat_Correction+0x354>)
   89066:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   8906a:	4b63      	ldr	r3, [pc, #396]	; (891f8 <Heat_Correction+0x358>)
   8906c:	47a0      	blx	r4
   8906e:	4603      	mov	r3, r0
   89070:	460c      	mov	r4, r1
   89072:	4619      	mov	r1, r3
   89074:	4622      	mov	r2, r4
   89076:	4b61      	ldr	r3, [pc, #388]	; (891fc <Heat_Correction+0x35c>)
   89078:	4608      	mov	r0, r1
   8907a:	4611      	mov	r1, r2
   8907c:	4798      	blx	r3
   8907e:	4602      	mov	r2, r0
   89080:	4b61      	ldr	r3, [pc, #388]	; (89208 <Heat_Correction+0x368>)
   89082:	601a      	str	r2, [r3, #0]
	}
			 	
	if (!(count_500ms %20))
   89084:	4b5e      	ldr	r3, [pc, #376]	; (89200 <Heat_Correction+0x360>)
   89086:	881a      	ldrh	r2, [r3, #0]
   89088:	4b5e      	ldr	r3, [pc, #376]	; (89204 <Heat_Correction+0x364>)
   8908a:	fba3 1302 	umull	r1, r3, r3, r2
   8908e:	0919      	lsrs	r1, r3, #4
   89090:	460b      	mov	r3, r1
   89092:	009b      	lsls	r3, r3, #2
   89094:	440b      	add	r3, r1
   89096:	009b      	lsls	r3, r3, #2
   89098:	1ad3      	subs	r3, r2, r3
   8909a:	b29b      	uxth	r3, r3
   8909c:	2b00      	cmp	r3, #0
   8909e:	d103      	bne.n	890a8 <Heat_Correction+0x208>
	{
		Tmp3Val_prev = Tmp3Val;		//Sunil: Used for checking TS3 stability
   890a0:	4b5b      	ldr	r3, [pc, #364]	; (89210 <Heat_Correction+0x370>)
   890a2:	681b      	ldr	r3, [r3, #0]
   890a4:	4a5b      	ldr	r2, [pc, #364]	; (89214 <Heat_Correction+0x374>)
   890a6:	6013      	str	r3, [r2, #0]
	}				 
				 
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);                 // sensor data of T3
   890a8:	463b      	mov	r3, r7
   890aa:	4619      	mov	r1, r3
   890ac:	2014      	movs	r0, #20
   890ae:	4b48      	ldr	r3, [pc, #288]	; (891d0 <Heat_Correction+0x330>)
   890b0:	4798      	blx	r3
	{
	 	uint16_t cal_data  = (402 *100* sensordata)/(2*32768);						// resistance of PT100
   890b2:	f9b7 3000 	ldrsh.w	r3, [r7]
   890b6:	461a      	mov	r2, r3
   890b8:	f649 5308 	movw	r3, #40200	; 0x9d08
   890bc:	fb03 f302 	mul.w	r3, r3, r2
   890c0:	2b00      	cmp	r3, #0
   890c2:	da02      	bge.n	890ca <Heat_Correction+0x22a>
   890c4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   890c8:	33ff      	adds	r3, #255	; 0xff
   890ca:	141b      	asrs	r3, r3, #16
   890cc:	807b      	strh	r3, [r7, #2]
	 	res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
   890ce:	887b      	ldrh	r3, [r7, #2]
   890d0:	4618      	mov	r0, r3
   890d2:	4b40      	ldr	r3, [pc, #256]	; (891d4 <Heat_Correction+0x334>)
   890d4:	4798      	blx	r3
	 	Tmp3Val = res_temp_value/100;									// Temp3 value in XX.yy format
   890d6:	4b40      	ldr	r3, [pc, #256]	; (891d8 <Heat_Correction+0x338>)
   890d8:	681a      	ldr	r2, [r3, #0]
   890da:	4b40      	ldr	r3, [pc, #256]	; (891dc <Heat_Correction+0x33c>)
   890dc:	4940      	ldr	r1, [pc, #256]	; (891e0 <Heat_Correction+0x340>)
   890de:	4610      	mov	r0, r2
   890e0:	4798      	blx	r3
   890e2:	4603      	mov	r3, r0
   890e4:	461a      	mov	r2, r3
   890e6:	4b4a      	ldr	r3, [pc, #296]	; (89210 <Heat_Correction+0x370>)
   890e8:	601a      	str	r2, [r3, #0]
	 	Tmp3Val = Tmp3Val - 3.1 + 1.4;										// sensor offset
   890ea:	4b49      	ldr	r3, [pc, #292]	; (89210 <Heat_Correction+0x370>)
   890ec:	681a      	ldr	r2, [r3, #0]
   890ee:	4b3e      	ldr	r3, [pc, #248]	; (891e8 <Heat_Correction+0x348>)
   890f0:	4610      	mov	r0, r2
   890f2:	4798      	blx	r3
   890f4:	4c3d      	ldr	r4, [pc, #244]	; (891ec <Heat_Correction+0x34c>)
   890f6:	a32e      	add	r3, pc, #184	; (adr r3, 891b0 <Heat_Correction+0x310>)
   890f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   890fc:	47a0      	blx	r4
   890fe:	4603      	mov	r3, r0
   89100:	460c      	mov	r4, r1
   89102:	4618      	mov	r0, r3
   89104:	4621      	mov	r1, r4
   89106:	4c3b      	ldr	r4, [pc, #236]	; (891f4 <Heat_Correction+0x354>)
   89108:	a32b      	add	r3, pc, #172	; (adr r3, 891b8 <Heat_Correction+0x318>)
   8910a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8910e:	47a0      	blx	r4
   89110:	4603      	mov	r3, r0
   89112:	460c      	mov	r4, r1
   89114:	4619      	mov	r1, r3
   89116:	4622      	mov	r2, r4
   89118:	4b38      	ldr	r3, [pc, #224]	; (891fc <Heat_Correction+0x35c>)
   8911a:	4608      	mov	r0, r1
   8911c:	4611      	mov	r1, r2
   8911e:	4798      	blx	r3
   89120:	4602      	mov	r2, r0
   89122:	4b3b      	ldr	r3, [pc, #236]	; (89210 <Heat_Correction+0x370>)
   89124:	601a      	str	r2, [r3, #0]
	}
	
	DataDisplay();			 
   89126:	4b3c      	ldr	r3, [pc, #240]	; (89218 <Heat_Correction+0x378>)
   89128:	4798      	blx	r3
	 	
	Calculate_slope();                     // calculate slope for TS2 curve to be used in Duty correction
   8912a:	4b3c      	ldr	r3, [pc, #240]	; (8921c <Heat_Correction+0x37c>)
   8912c:	4798      	blx	r3
	Calculate_direction();					// Calculate if temperature is raising or falling based on T2
   8912e:	4b3c      	ldr	r3, [pc, #240]	; (89220 <Heat_Correction+0x380>)
   89130:	4798      	blx	r3
	  37 +/- 2 degrees of 39 deg.
	- T2 slope is used for calculating the steps.Slope = (T2(Sampled at 30 secs) - Current T2 )/ (current time - Time at sampling).
	  Higher the slope, lesser the duty count and vice versa. The duty cycle value is decreased if Temperature is increasing and 
	  increased if temperature is decreasing.
	*/
	TS2_Stable = Check_4_TS2_Stable();
   89132:	4b3c      	ldr	r3, [pc, #240]	; (89224 <Heat_Correction+0x384>)
   89134:	4798      	blx	r3
   89136:	4603      	mov	r3, r0
   89138:	461a      	mov	r2, r3
   8913a:	4b3b      	ldr	r3, [pc, #236]	; (89228 <Heat_Correction+0x388>)
   8913c:	701a      	strb	r2, [r3, #0]
	
	if (SYSTEM_FLOW == 500)
   8913e:	4b3b      	ldr	r3, [pc, #236]	; (8922c <Heat_Correction+0x38c>)
   89140:	681b      	ldr	r3, [r3, #0]
   89142:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   89146:	d122      	bne.n	8918e <Heat_Correction+0x2ee>
	{
		if ((Tmp2Val >=37.5)  && (Tmp3Val <= 32))      // Restricting forced coarse correction only at the beginning and any time TS3 falls below 32
   89148:	4b2f      	ldr	r3, [pc, #188]	; (89208 <Heat_Correction+0x368>)
   8914a:	681a      	ldr	r2, [r3, #0]
   8914c:	4b38      	ldr	r3, [pc, #224]	; (89230 <Heat_Correction+0x390>)
   8914e:	4939      	ldr	r1, [pc, #228]	; (89234 <Heat_Correction+0x394>)
   89150:	4610      	mov	r0, r2
   89152:	4798      	blx	r3
   89154:	4603      	mov	r3, r0
   89156:	2b00      	cmp	r3, #0
   89158:	d019      	beq.n	8918e <Heat_Correction+0x2ee>
   8915a:	4b2d      	ldr	r3, [pc, #180]	; (89210 <Heat_Correction+0x370>)
   8915c:	681a      	ldr	r2, [r3, #0]
   8915e:	4b36      	ldr	r3, [pc, #216]	; (89238 <Heat_Correction+0x398>)
   89160:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
   89164:	4610      	mov	r0, r2
   89166:	4798      	blx	r3
   89168:	4603      	mov	r3, r0
   8916a:	2b00      	cmp	r3, #0
   8916c:	d00f      	beq.n	8918e <Heat_Correction+0x2ee>
		{
			if (!(count_500ms % 20))                  // force coarse correction if TS2 greater 39 and continues to remain for more than 1 sec
   8916e:	4b24      	ldr	r3, [pc, #144]	; (89200 <Heat_Correction+0x360>)
   89170:	881a      	ldrh	r2, [r3, #0]
   89172:	4b24      	ldr	r3, [pc, #144]	; (89204 <Heat_Correction+0x364>)
   89174:	fba3 1302 	umull	r1, r3, r3, r2
   89178:	0919      	lsrs	r1, r3, #4
   8917a:	460b      	mov	r3, r1
   8917c:	009b      	lsls	r3, r3, #2
   8917e:	440b      	add	r3, r1
   89180:	009b      	lsls	r3, r3, #2
   89182:	1ad3      	subs	r3, r2, r3
   89184:	b29b      	uxth	r3, r3
   89186:	2b00      	cmp	r3, #0
   89188:	d101      	bne.n	8918e <Heat_Correction+0x2ee>
			{
				Coarse_DutyCorrection();
   8918a:	4b2c      	ldr	r3, [pc, #176]	; (8923c <Heat_Correction+0x39c>)
   8918c:	4798      	blx	r3
			}
			
		}
	}
	
	if (SYSTEM_FLOW == 300)
   8918e:	4b27      	ldr	r3, [pc, #156]	; (8922c <Heat_Correction+0x38c>)
   89190:	681b      	ldr	r3, [r3, #0]
   89192:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   89196:	d16f      	bne.n	89278 <Heat_Correction+0x3d8>
	{
		if ((Tmp2Val >=40.5)  && (Tmp3Val <= 32))      // Restricting forced coarse correction only at the beginning and any time TS3 falls below 32
   89198:	4b1b      	ldr	r3, [pc, #108]	; (89208 <Heat_Correction+0x368>)
   8919a:	681a      	ldr	r2, [r3, #0]
   8919c:	4b24      	ldr	r3, [pc, #144]	; (89230 <Heat_Correction+0x390>)
   8919e:	4928      	ldr	r1, [pc, #160]	; (89240 <Heat_Correction+0x3a0>)
   891a0:	4610      	mov	r0, r2
   891a2:	4798      	blx	r3
   891a4:	4603      	mov	r3, r0
   891a6:	2b00      	cmp	r3, #0
   891a8:	d066      	beq.n	89278 <Heat_Correction+0x3d8>
   891aa:	e04b      	b.n	89244 <Heat_Correction+0x3a4>
   891ac:	f3af 8000 	nop.w
   891b0:	cccccccd 	.word	0xcccccccd
   891b4:	4008cccc 	.word	0x4008cccc
   891b8:	66666666 	.word	0x66666666
   891bc:	3ff66666 	.word	0x3ff66666
   891c0:	2007213b 	.word	0x2007213b
   891c4:	00097985 	.word	0x00097985
   891c8:	2007213e 	.word	0x2007213e
   891cc:	00097a8d 	.word	0x00097a8d
   891d0:	0008d6b1 	.word	0x0008d6b1
   891d4:	0008e8e1 	.word	0x0008e8e1
   891d8:	20072630 	.word	0x20072630
   891dc:	000a3f7d 	.word	0x000a3f7d
   891e0:	42c80000 	.word	0x42c80000
   891e4:	2007214c 	.word	0x2007214c
   891e8:	000a34ed 	.word	0x000a34ed
   891ec:	000a322d 	.word	0x000a322d
   891f0:	40040000 	.word	0x40040000
   891f4:	000a3231 	.word	0x000a3231
   891f8:	3ff33333 	.word	0x3ff33333
   891fc:	000a3b59 	.word	0x000a3b59
   89200:	20072158 	.word	0x20072158
   89204:	cccccccd 	.word	0xcccccccd
   89208:	20072150 	.word	0x20072150
   8920c:	20072164 	.word	0x20072164
   89210:	20072154 	.word	0x20072154
   89214:	20072d8c 	.word	0x20072d8c
   89218:	00089f95 	.word	0x00089f95
   8921c:	000895bd 	.word	0x000895bd
   89220:	00089625 	.word	0x00089625
   89224:	0008945d 	.word	0x0008945d
   89228:	20072d90 	.word	0x20072d90
   8922c:	20070484 	.word	0x20070484
   89230:	000a4179 	.word	0x000a4179
   89234:	42160000 	.word	0x42160000
   89238:	000a4165 	.word	0x000a4165
   8923c:	000896c9 	.word	0x000896c9
   89240:	42220000 	.word	0x42220000
   89244:	4b74      	ldr	r3, [pc, #464]	; (89418 <Heat_Correction+0x578>)
   89246:	681a      	ldr	r2, [r3, #0]
   89248:	4b74      	ldr	r3, [pc, #464]	; (8941c <Heat_Correction+0x57c>)
   8924a:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
   8924e:	4610      	mov	r0, r2
   89250:	4798      	blx	r3
   89252:	4603      	mov	r3, r0
   89254:	2b00      	cmp	r3, #0
   89256:	d00f      	beq.n	89278 <Heat_Correction+0x3d8>
		{
			if (!(count_500ms % 20))                  // force coarse correction if TS2 greater 39 and continues to remain for more than 1 sec
   89258:	4b71      	ldr	r3, [pc, #452]	; (89420 <Heat_Correction+0x580>)
   8925a:	881a      	ldrh	r2, [r3, #0]
   8925c:	4b71      	ldr	r3, [pc, #452]	; (89424 <Heat_Correction+0x584>)
   8925e:	fba3 1302 	umull	r1, r3, r3, r2
   89262:	0919      	lsrs	r1, r3, #4
   89264:	460b      	mov	r3, r1
   89266:	009b      	lsls	r3, r3, #2
   89268:	440b      	add	r3, r1
   8926a:	009b      	lsls	r3, r3, #2
   8926c:	1ad3      	subs	r3, r2, r3
   8926e:	b29b      	uxth	r3, r3
   89270:	2b00      	cmp	r3, #0
   89272:	d101      	bne.n	89278 <Heat_Correction+0x3d8>
			{
				Coarse_DutyCorrection();
   89274:	4b6c      	ldr	r3, [pc, #432]	; (89428 <Heat_Correction+0x588>)
   89276:	4798      	blx	r3
			
		}
	}
	
	
	if (SYSTEM_FLOW == 300)
   89278:	4b6c      	ldr	r3, [pc, #432]	; (8942c <Heat_Correction+0x58c>)
   8927a:	681b      	ldr	r3, [r3, #0]
   8927c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   89280:	d15c      	bne.n	8933c <Heat_Correction+0x49c>
	{
		
	if(TS2_Stable)
   89282:	4b6b      	ldr	r3, [pc, #428]	; (89430 <Heat_Correction+0x590>)
   89284:	781b      	ldrb	r3, [r3, #0]
   89286:	2b00      	cmp	r3, #0
   89288:	d058      	beq.n	8933c <Heat_Correction+0x49c>
	{
		//Now TS2 is not rapidly increasing and is at certain Temperature +/- 2 deg. 
		//Start tuning T2 to be at 37 +/- 2 deg.
		if ( ((Tmp2Val - Prescribed_T2) > 0.5) || ((Prescribed_T2 - Tmp2Val) > 2) )
   8928a:	4b6a      	ldr	r3, [pc, #424]	; (89434 <Heat_Correction+0x594>)
   8928c:	681a      	ldr	r2, [r3, #0]
   8928e:	4b6a      	ldr	r3, [pc, #424]	; (89438 <Heat_Correction+0x598>)
   89290:	6819      	ldr	r1, [r3, #0]
   89292:	4b6a      	ldr	r3, [pc, #424]	; (8943c <Heat_Correction+0x59c>)
   89294:	4610      	mov	r0, r2
   89296:	4798      	blx	r3
   89298:	4603      	mov	r3, r0
   8929a:	461a      	mov	r2, r3
   8929c:	4b68      	ldr	r3, [pc, #416]	; (89440 <Heat_Correction+0x5a0>)
   8929e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   892a2:	4610      	mov	r0, r2
   892a4:	4798      	blx	r3
   892a6:	4603      	mov	r3, r0
   892a8:	2b00      	cmp	r3, #0
   892aa:	d110      	bne.n	892ce <Heat_Correction+0x42e>
   892ac:	4b62      	ldr	r3, [pc, #392]	; (89438 <Heat_Correction+0x598>)
   892ae:	681a      	ldr	r2, [r3, #0]
   892b0:	4b60      	ldr	r3, [pc, #384]	; (89434 <Heat_Correction+0x594>)
   892b2:	6819      	ldr	r1, [r3, #0]
   892b4:	4b61      	ldr	r3, [pc, #388]	; (8943c <Heat_Correction+0x59c>)
   892b6:	4610      	mov	r0, r2
   892b8:	4798      	blx	r3
   892ba:	4603      	mov	r3, r0
   892bc:	461a      	mov	r2, r3
   892be:	4b60      	ldr	r3, [pc, #384]	; (89440 <Heat_Correction+0x5a0>)
   892c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   892c4:	4610      	mov	r0, r2
   892c6:	4798      	blx	r3
   892c8:	4603      	mov	r3, r0
   892ca:	2b00      	cmp	r3, #0
   892cc:	d002      	beq.n	892d4 <Heat_Correction+0x434>
		{
			Coarse_DutyCorrection(); 
   892ce:	4b56      	ldr	r3, [pc, #344]	; (89428 <Heat_Correction+0x588>)
   892d0:	4798      	blx	r3
   892d2:	e033      	b.n	8933c <Heat_Correction+0x49c>
		}
		else 
		{
			//T2 is stable and within 37 +/- 2 deg, check for T3 stability and apply fine correction
			TS3_Stable = Check_4_TS3_Stable();
   892d4:	4b5b      	ldr	r3, [pc, #364]	; (89444 <Heat_Correction+0x5a4>)
   892d6:	4798      	blx	r3
   892d8:	4603      	mov	r3, r0
   892da:	461a      	mov	r2, r3
   892dc:	4b5a      	ldr	r3, [pc, #360]	; (89448 <Heat_Correction+0x5a8>)
   892de:	701a      	strb	r2, [r3, #0]
			if(TS3_Stable)
   892e0:	4b59      	ldr	r3, [pc, #356]	; (89448 <Heat_Correction+0x5a8>)
   892e2:	781b      	ldrb	r3, [r3, #0]
   892e4:	2b00      	cmp	r3, #0
   892e6:	d029      	beq.n	8933c <Heat_Correction+0x49c>
			{
			   if ( ((Tmp3Val - Prescribed_T3) > 0.1) || ((Prescribed_T3 - Tmp3Val) > 0.1) )
   892e8:	4b4b      	ldr	r3, [pc, #300]	; (89418 <Heat_Correction+0x578>)
   892ea:	681a      	ldr	r2, [r3, #0]
   892ec:	4b57      	ldr	r3, [pc, #348]	; (8944c <Heat_Correction+0x5ac>)
   892ee:	6819      	ldr	r1, [r3, #0]
   892f0:	4b52      	ldr	r3, [pc, #328]	; (8943c <Heat_Correction+0x59c>)
   892f2:	4610      	mov	r0, r2
   892f4:	4798      	blx	r3
   892f6:	4603      	mov	r3, r0
   892f8:	461a      	mov	r2, r3
   892fa:	4b55      	ldr	r3, [pc, #340]	; (89450 <Heat_Correction+0x5b0>)
   892fc:	4610      	mov	r0, r2
   892fe:	4798      	blx	r3
   89300:	4c54      	ldr	r4, [pc, #336]	; (89454 <Heat_Correction+0x5b4>)
   89302:	a343      	add	r3, pc, #268	; (adr r3, 89410 <Heat_Correction+0x570>)
   89304:	e9d3 2300 	ldrd	r2, r3, [r3]
   89308:	47a0      	blx	r4
   8930a:	4603      	mov	r3, r0
   8930c:	2b00      	cmp	r3, #0
   8930e:	d113      	bne.n	89338 <Heat_Correction+0x498>
   89310:	4b4e      	ldr	r3, [pc, #312]	; (8944c <Heat_Correction+0x5ac>)
   89312:	681a      	ldr	r2, [r3, #0]
   89314:	4b40      	ldr	r3, [pc, #256]	; (89418 <Heat_Correction+0x578>)
   89316:	6819      	ldr	r1, [r3, #0]
   89318:	4b48      	ldr	r3, [pc, #288]	; (8943c <Heat_Correction+0x59c>)
   8931a:	4610      	mov	r0, r2
   8931c:	4798      	blx	r3
   8931e:	4603      	mov	r3, r0
   89320:	461a      	mov	r2, r3
   89322:	4b4b      	ldr	r3, [pc, #300]	; (89450 <Heat_Correction+0x5b0>)
   89324:	4610      	mov	r0, r2
   89326:	4798      	blx	r3
   89328:	4c4a      	ldr	r4, [pc, #296]	; (89454 <Heat_Correction+0x5b4>)
   8932a:	a339      	add	r3, pc, #228	; (adr r3, 89410 <Heat_Correction+0x570>)
   8932c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89330:	47a0      	blx	r4
   89332:	4603      	mov	r3, r0
   89334:	2b00      	cmp	r3, #0
   89336:	d001      	beq.n	8933c <Heat_Correction+0x49c>
			      Fine_DutyCorrection();
   89338:	4b47      	ldr	r3, [pc, #284]	; (89458 <Heat_Correction+0x5b8>)
   8933a:	4798      	blx	r3
	  // TS2 not stable, wait for some more time
	  // Same avg_duty is being applied, no change till stability not achieved
	}	
	}
	
	if (SYSTEM_FLOW == 500)
   8933c:	4b3b      	ldr	r3, [pc, #236]	; (8942c <Heat_Correction+0x58c>)
   8933e:	681b      	ldr	r3, [r3, #0]
   89340:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   89344:	d15e      	bne.n	89404 <Heat_Correction+0x564>
	{
		
			if(TS2_Stable)
   89346:	4b3a      	ldr	r3, [pc, #232]	; (89430 <Heat_Correction+0x590>)
   89348:	781b      	ldrb	r3, [r3, #0]
   8934a:	2b00      	cmp	r3, #0
   8934c:	d05a      	beq.n	89404 <Heat_Correction+0x564>
	{
		//Now TS2 is not rapidly increasing and is at certain Temperature +/- 2 deg. 
		//Start tuning T2 to be at 37 +/- 2 deg.
		if ( ((Tmp2Val - Prescribed_T2) > 1) || ((Prescribed_T2 - Tmp2Val) > 1) )
   8934e:	4b39      	ldr	r3, [pc, #228]	; (89434 <Heat_Correction+0x594>)
   89350:	681a      	ldr	r2, [r3, #0]
   89352:	4b39      	ldr	r3, [pc, #228]	; (89438 <Heat_Correction+0x598>)
   89354:	6819      	ldr	r1, [r3, #0]
   89356:	4b39      	ldr	r3, [pc, #228]	; (8943c <Heat_Correction+0x59c>)
   89358:	4610      	mov	r0, r2
   8935a:	4798      	blx	r3
   8935c:	4603      	mov	r3, r0
   8935e:	461a      	mov	r2, r3
   89360:	4b37      	ldr	r3, [pc, #220]	; (89440 <Heat_Correction+0x5a0>)
   89362:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89366:	4610      	mov	r0, r2
   89368:	4798      	blx	r3
   8936a:	4603      	mov	r3, r0
   8936c:	2b00      	cmp	r3, #0
   8936e:	d110      	bne.n	89392 <Heat_Correction+0x4f2>
   89370:	4b31      	ldr	r3, [pc, #196]	; (89438 <Heat_Correction+0x598>)
   89372:	681a      	ldr	r2, [r3, #0]
   89374:	4b2f      	ldr	r3, [pc, #188]	; (89434 <Heat_Correction+0x594>)
   89376:	6819      	ldr	r1, [r3, #0]
   89378:	4b30      	ldr	r3, [pc, #192]	; (8943c <Heat_Correction+0x59c>)
   8937a:	4610      	mov	r0, r2
   8937c:	4798      	blx	r3
   8937e:	4603      	mov	r3, r0
   89380:	461a      	mov	r2, r3
   89382:	4b2f      	ldr	r3, [pc, #188]	; (89440 <Heat_Correction+0x5a0>)
   89384:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89388:	4610      	mov	r0, r2
   8938a:	4798      	blx	r3
   8938c:	4603      	mov	r3, r0
   8938e:	2b00      	cmp	r3, #0
   89390:	d002      	beq.n	89398 <Heat_Correction+0x4f8>
		{
			Coarse_DutyCorrection(); 
   89392:	4b25      	ldr	r3, [pc, #148]	; (89428 <Heat_Correction+0x588>)
   89394:	4798      	blx	r3
   89396:	e035      	b.n	89404 <Heat_Correction+0x564>
		}
		else 
		{
			//T2 is stable and within 37 +/- 2 deg, check for T3 stability and apply fine correction
			TS3_Stable = Check_4_TS3_Stable();
   89398:	4b2a      	ldr	r3, [pc, #168]	; (89444 <Heat_Correction+0x5a4>)
   8939a:	4798      	blx	r3
   8939c:	4603      	mov	r3, r0
   8939e:	461a      	mov	r2, r3
   893a0:	4b29      	ldr	r3, [pc, #164]	; (89448 <Heat_Correction+0x5a8>)
   893a2:	701a      	strb	r2, [r3, #0]
			if(TS3_Stable)
   893a4:	4b28      	ldr	r3, [pc, #160]	; (89448 <Heat_Correction+0x5a8>)
   893a6:	781b      	ldrb	r3, [r3, #0]
   893a8:	2b00      	cmp	r3, #0
   893aa:	d02b      	beq.n	89404 <Heat_Correction+0x564>
			{
			   if ( ((Tmp3Val - Prescribed_T3) > 0.1) || ((Prescribed_T3 - Tmp3Val) > 0.1) )
   893ac:	4b1a      	ldr	r3, [pc, #104]	; (89418 <Heat_Correction+0x578>)
   893ae:	681a      	ldr	r2, [r3, #0]
   893b0:	4b26      	ldr	r3, [pc, #152]	; (8944c <Heat_Correction+0x5ac>)
   893b2:	6819      	ldr	r1, [r3, #0]
   893b4:	4b21      	ldr	r3, [pc, #132]	; (8943c <Heat_Correction+0x59c>)
   893b6:	4610      	mov	r0, r2
   893b8:	4798      	blx	r3
   893ba:	4603      	mov	r3, r0
   893bc:	461a      	mov	r2, r3
   893be:	4b24      	ldr	r3, [pc, #144]	; (89450 <Heat_Correction+0x5b0>)
   893c0:	4610      	mov	r0, r2
   893c2:	4798      	blx	r3
   893c4:	4c23      	ldr	r4, [pc, #140]	; (89454 <Heat_Correction+0x5b4>)
   893c6:	a312      	add	r3, pc, #72	; (adr r3, 89410 <Heat_Correction+0x570>)
   893c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   893cc:	47a0      	blx	r4
   893ce:	4603      	mov	r3, r0
   893d0:	2b00      	cmp	r3, #0
   893d2:	d113      	bne.n	893fc <Heat_Correction+0x55c>
   893d4:	4b1d      	ldr	r3, [pc, #116]	; (8944c <Heat_Correction+0x5ac>)
   893d6:	681a      	ldr	r2, [r3, #0]
   893d8:	4b0f      	ldr	r3, [pc, #60]	; (89418 <Heat_Correction+0x578>)
   893da:	6819      	ldr	r1, [r3, #0]
   893dc:	4b17      	ldr	r3, [pc, #92]	; (8943c <Heat_Correction+0x59c>)
   893de:	4610      	mov	r0, r2
   893e0:	4798      	blx	r3
   893e2:	4603      	mov	r3, r0
   893e4:	461a      	mov	r2, r3
   893e6:	4b1a      	ldr	r3, [pc, #104]	; (89450 <Heat_Correction+0x5b0>)
   893e8:	4610      	mov	r0, r2
   893ea:	4798      	blx	r3
   893ec:	4c19      	ldr	r4, [pc, #100]	; (89454 <Heat_Correction+0x5b4>)
   893ee:	a308      	add	r3, pc, #32	; (adr r3, 89410 <Heat_Correction+0x570>)
   893f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   893f4:	47a0      	blx	r4
   893f6:	4603      	mov	r3, r0
   893f8:	2b00      	cmp	r3, #0
   893fa:	d003      	beq.n	89404 <Heat_Correction+0x564>
			      Fine_DutyCorrection();
   893fc:	4b16      	ldr	r3, [pc, #88]	; (89458 <Heat_Correction+0x5b8>)
   893fe:	4798      	blx	r3
   89400:	e000      	b.n	89404 <Heat_Correction+0x564>
		sv_cntrl_poweroffheater();
		return;
	}
	if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
	{
		return;
   89402:	bf00      	nop
	  // Same avg_duty is being applied, no change till stability not achieved
	}	
	}
	

}
   89404:	4618      	mov	r0, r3
   89406:	370c      	adds	r7, #12
   89408:	46bd      	mov	sp, r7
   8940a:	bd90      	pop	{r4, r7, pc}
   8940c:	f3af 8000 	nop.w
   89410:	9999999a 	.word	0x9999999a
   89414:	3fb99999 	.word	0x3fb99999
   89418:	20072154 	.word	0x20072154
   8941c:	000a4165 	.word	0x000a4165
   89420:	20072158 	.word	0x20072158
   89424:	cccccccd 	.word	0xcccccccd
   89428:	000896c9 	.word	0x000896c9
   8942c:	20070484 	.word	0x20070484
   89430:	20072d90 	.word	0x20072d90
   89434:	20072150 	.word	0x20072150
   89438:	2007047c 	.word	0x2007047c
   8943c:	000a3c01 	.word	0x000a3c01
   89440:	000a418d 	.word	0x000a418d
   89444:	0008950d 	.word	0x0008950d
   89448:	20072d99 	.word	0x20072d99
   8944c:	20070480 	.word	0x20070480
   89450:	000a34ed 	.word	0x000a34ed
   89454:	000a3ab5 	.word	0x000a3ab5
   89458:	00089b11 	.word	0x00089b11

0008945c <Check_4_TS2_Stable>:

bool Check_4_TS2_Stable()
{
   8945c:	b580      	push	{r7, lr}
   8945e:	b082      	sub	sp, #8
   89460:	af00      	add	r7, sp, #0
	bool ts2_stable = false;
   89462:	2300      	movs	r3, #0
   89464:	71fb      	strb	r3, [r7, #7]
	
	if (TS2_stability_count >= wait_4_TS2Stability) // Based on the profiling curve, it's assumed after wait_4_stability secs,
   89466:	4b21      	ldr	r3, [pc, #132]	; (894ec <Check_4_TS2_Stable+0x90>)
   89468:	881a      	ldrh	r2, [r3, #0]
   8946a:	4b21      	ldr	r3, [pc, #132]	; (894f0 <Check_4_TS2_Stable+0x94>)
   8946c:	881b      	ldrh	r3, [r3, #0]
   8946e:	429a      	cmp	r2, r3
   89470:	d337      	bcc.n	894e2 <Check_4_TS2_Stable+0x86>
	// TS2 is not increasing sharply
	{
		if (Tmp2Val_prev == Tmp2Val)
   89472:	4b20      	ldr	r3, [pc, #128]	; (894f4 <Check_4_TS2_Stable+0x98>)
   89474:	681a      	ldr	r2, [r3, #0]
   89476:	4b20      	ldr	r3, [pc, #128]	; (894f8 <Check_4_TS2_Stable+0x9c>)
   89478:	6819      	ldr	r1, [r3, #0]
   8947a:	4b20      	ldr	r3, [pc, #128]	; (894fc <Check_4_TS2_Stable+0xa0>)
   8947c:	4610      	mov	r0, r2
   8947e:	4798      	blx	r3
   89480:	4603      	mov	r3, r0
   89482:	2b00      	cmp	r3, #0
   89484:	d002      	beq.n	8948c <Check_4_TS2_Stable+0x30>
		{
			ts2_stable = true;
   89486:	2301      	movs	r3, #1
   89488:	71fb      	strb	r3, [r7, #7]
   8948a:	e023      	b.n	894d4 <Check_4_TS2_Stable+0x78>
			
		}
		else if(((Tmp2Val - Tmp2Val_prev) <= 2) || ((Tmp2Val_prev - Tmp2Val) <= 2))
   8948c:	4b1a      	ldr	r3, [pc, #104]	; (894f8 <Check_4_TS2_Stable+0x9c>)
   8948e:	681a      	ldr	r2, [r3, #0]
   89490:	4b18      	ldr	r3, [pc, #96]	; (894f4 <Check_4_TS2_Stable+0x98>)
   89492:	6819      	ldr	r1, [r3, #0]
   89494:	4b1a      	ldr	r3, [pc, #104]	; (89500 <Check_4_TS2_Stable+0xa4>)
   89496:	4610      	mov	r0, r2
   89498:	4798      	blx	r3
   8949a:	4603      	mov	r3, r0
   8949c:	461a      	mov	r2, r3
   8949e:	4b19      	ldr	r3, [pc, #100]	; (89504 <Check_4_TS2_Stable+0xa8>)
   894a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   894a4:	4610      	mov	r0, r2
   894a6:	4798      	blx	r3
   894a8:	4603      	mov	r3, r0
   894aa:	2b00      	cmp	r3, #0
   894ac:	d110      	bne.n	894d0 <Check_4_TS2_Stable+0x74>
   894ae:	4b11      	ldr	r3, [pc, #68]	; (894f4 <Check_4_TS2_Stable+0x98>)
   894b0:	681a      	ldr	r2, [r3, #0]
   894b2:	4b11      	ldr	r3, [pc, #68]	; (894f8 <Check_4_TS2_Stable+0x9c>)
   894b4:	6819      	ldr	r1, [r3, #0]
   894b6:	4b12      	ldr	r3, [pc, #72]	; (89500 <Check_4_TS2_Stable+0xa4>)
   894b8:	4610      	mov	r0, r2
   894ba:	4798      	blx	r3
   894bc:	4603      	mov	r3, r0
   894be:	461a      	mov	r2, r3
   894c0:	4b10      	ldr	r3, [pc, #64]	; (89504 <Check_4_TS2_Stable+0xa8>)
   894c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   894c6:	4610      	mov	r0, r2
   894c8:	4798      	blx	r3
   894ca:	4603      	mov	r3, r0
   894cc:	2b00      	cmp	r3, #0
   894ce:	d001      	beq.n	894d4 <Check_4_TS2_Stable+0x78>
		{
			ts2_stable = true;
   894d0:	2301      	movs	r3, #1
   894d2:	71fb      	strb	r3, [r7, #7]
		}
		wait_4_TS2Stability = post_stability_count;  // Sunil: to ensure new value if temp difference not in band and apply for next stability
   894d4:	4b0c      	ldr	r3, [pc, #48]	; (89508 <Check_4_TS2_Stable+0xac>)
   894d6:	881a      	ldrh	r2, [r3, #0]
   894d8:	4b05      	ldr	r3, [pc, #20]	; (894f0 <Check_4_TS2_Stable+0x94>)
   894da:	801a      	strh	r2, [r3, #0]
													// Count 240 = 2 mins, Count 120 = 1 min
													 // Gopal: 30
		TS2_stability_count = 0;
   894dc:	4b03      	ldr	r3, [pc, #12]	; (894ec <Check_4_TS2_Stable+0x90>)
   894de:	2200      	movs	r2, #0
   894e0:	801a      	strh	r2, [r3, #0]
	}
	return ts2_stable;
   894e2:	79fb      	ldrb	r3, [r7, #7]
}
   894e4:	4618      	mov	r0, r3
   894e6:	3708      	adds	r7, #8
   894e8:	46bd      	mov	sp, r7
   894ea:	bd80      	pop	{r7, pc}
   894ec:	2007215c 	.word	0x2007215c
   894f0:	20070478 	.word	0x20070478
   894f4:	20072164 	.word	0x20072164
   894f8:	20072150 	.word	0x20072150
   894fc:	000a413d 	.word	0x000a413d
   89500:	000a3c01 	.word	0x000a3c01
   89504:	000a4165 	.word	0x000a4165
   89508:	20072160 	.word	0x20072160

0008950c <Check_4_TS3_Stable>:

bool Check_4_TS3_Stable()
{
   8950c:	b580      	push	{r7, lr}
   8950e:	b082      	sub	sp, #8
   89510:	af00      	add	r7, sp, #0
	bool ts3_stable = false;
   89512:	2300      	movs	r3, #0
   89514:	71fb      	strb	r3, [r7, #7]
	if (stability_count >= wait_4_stability) // Based on the profiling curve, it's assumed after wait_4_stability secs, 
   89516:	4b21      	ldr	r3, [pc, #132]	; (8959c <Check_4_TS3_Stable+0x90>)
   89518:	881a      	ldrh	r2, [r3, #0]
   8951a:	4b21      	ldr	r3, [pc, #132]	; (895a0 <Check_4_TS3_Stable+0x94>)
   8951c:	881b      	ldrh	r3, [r3, #0]
   8951e:	429a      	cmp	r2, r3
   89520:	d337      	bcc.n	89592 <Check_4_TS3_Stable+0x86>
											 // TS3 is not increasing sharply
	{
		if (Tmp3Val_prev == Tmp3Val)
   89522:	4b20      	ldr	r3, [pc, #128]	; (895a4 <Check_4_TS3_Stable+0x98>)
   89524:	681a      	ldr	r2, [r3, #0]
   89526:	4b20      	ldr	r3, [pc, #128]	; (895a8 <Check_4_TS3_Stable+0x9c>)
   89528:	6819      	ldr	r1, [r3, #0]
   8952a:	4b20      	ldr	r3, [pc, #128]	; (895ac <Check_4_TS3_Stable+0xa0>)
   8952c:	4610      	mov	r0, r2
   8952e:	4798      	blx	r3
   89530:	4603      	mov	r3, r0
   89532:	2b00      	cmp	r3, #0
   89534:	d002      	beq.n	8953c <Check_4_TS3_Stable+0x30>
		{
			ts3_stable = true;
   89536:	2301      	movs	r3, #1
   89538:	71fb      	strb	r3, [r7, #7]
   8953a:	e023      	b.n	89584 <Check_4_TS3_Stable+0x78>
			
		}
		else if(((Tmp3Val - Tmp3Val_prev) <= 2) || ((Tmp3Val_prev - Tmp3Val) <= 2))  
   8953c:	4b1a      	ldr	r3, [pc, #104]	; (895a8 <Check_4_TS3_Stable+0x9c>)
   8953e:	681a      	ldr	r2, [r3, #0]
   89540:	4b18      	ldr	r3, [pc, #96]	; (895a4 <Check_4_TS3_Stable+0x98>)
   89542:	6819      	ldr	r1, [r3, #0]
   89544:	4b1a      	ldr	r3, [pc, #104]	; (895b0 <Check_4_TS3_Stable+0xa4>)
   89546:	4610      	mov	r0, r2
   89548:	4798      	blx	r3
   8954a:	4603      	mov	r3, r0
   8954c:	461a      	mov	r2, r3
   8954e:	4b19      	ldr	r3, [pc, #100]	; (895b4 <Check_4_TS3_Stable+0xa8>)
   89550:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89554:	4610      	mov	r0, r2
   89556:	4798      	blx	r3
   89558:	4603      	mov	r3, r0
   8955a:	2b00      	cmp	r3, #0
   8955c:	d110      	bne.n	89580 <Check_4_TS3_Stable+0x74>
   8955e:	4b11      	ldr	r3, [pc, #68]	; (895a4 <Check_4_TS3_Stable+0x98>)
   89560:	681a      	ldr	r2, [r3, #0]
   89562:	4b11      	ldr	r3, [pc, #68]	; (895a8 <Check_4_TS3_Stable+0x9c>)
   89564:	6819      	ldr	r1, [r3, #0]
   89566:	4b12      	ldr	r3, [pc, #72]	; (895b0 <Check_4_TS3_Stable+0xa4>)
   89568:	4610      	mov	r0, r2
   8956a:	4798      	blx	r3
   8956c:	4603      	mov	r3, r0
   8956e:	461a      	mov	r2, r3
   89570:	4b10      	ldr	r3, [pc, #64]	; (895b4 <Check_4_TS3_Stable+0xa8>)
   89572:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89576:	4610      	mov	r0, r2
   89578:	4798      	blx	r3
   8957a:	4603      	mov	r3, r0
   8957c:	2b00      	cmp	r3, #0
   8957e:	d001      	beq.n	89584 <Check_4_TS3_Stable+0x78>
		{
			ts3_stable = true;
   89580:	2301      	movs	r3, #1
   89582:	71fb      	strb	r3, [r7, #7]
		}
		wait_4_stability = TS3_post_stability_count;   // Sunil: to ensure new value if temp difference not in band and apply for next stability
   89584:	4b0c      	ldr	r3, [pc, #48]	; (895b8 <Check_4_TS3_Stable+0xac>)
   89586:	881a      	ldrh	r2, [r3, #0]
   89588:	4b05      	ldr	r3, [pc, #20]	; (895a0 <Check_4_TS3_Stable+0x94>)
   8958a:	801a      	strh	r2, [r3, #0]
		                                             // Gopal: 60
								 // Count 240 = 2 mins, Count 120 = 1 min
		stability_count = 0;
   8958c:	4b03      	ldr	r3, [pc, #12]	; (8959c <Check_4_TS3_Stable+0x90>)
   8958e:	2200      	movs	r2, #0
   89590:	801a      	strh	r2, [r3, #0]
	}
 return ts3_stable;
   89592:	79fb      	ldrb	r3, [r7, #7]
}
   89594:	4618      	mov	r0, r3
   89596:	3708      	adds	r7, #8
   89598:	46bd      	mov	sp, r7
   8959a:	bd80      	pop	{r7, pc}
   8959c:	2007215a 	.word	0x2007215a
   895a0:	2007047a 	.word	0x2007047a
   895a4:	20072d8c 	.word	0x20072d8c
   895a8:	20072154 	.word	0x20072154
   895ac:	000a413d 	.word	0x000a413d
   895b0:	000a3c01 	.word	0x000a3c01
   895b4:	000a4165 	.word	0x000a4165
   895b8:	20072162 	.word	0x20072162

000895bc <Calculate_slope>:

void Calculate_slope ()
{
   895bc:	b598      	push	{r3, r4, r7, lr}
   895be:	af00      	add	r7, sp, #0
	TS2_slope = 0;
   895c0:	4b10      	ldr	r3, [pc, #64]	; (89604 <Calculate_slope+0x48>)
   895c2:	f04f 0200 	mov.w	r2, #0
   895c6:	601a      	str	r2, [r3, #0]
	
	// Since slope is calculated every 500msec, we should use 500ms_Count - count at storing Past_TS2.
	 TS2_slope = (Tmp2Val - Past_TS2) / (count_500ms - count_at_PastTS2); 
   895c8:	4b0f      	ldr	r3, [pc, #60]	; (89608 <Calculate_slope+0x4c>)
   895ca:	681a      	ldr	r2, [r3, #0]
   895cc:	4b0f      	ldr	r3, [pc, #60]	; (8960c <Calculate_slope+0x50>)
   895ce:	6819      	ldr	r1, [r3, #0]
   895d0:	4b0f      	ldr	r3, [pc, #60]	; (89610 <Calculate_slope+0x54>)
   895d2:	4610      	mov	r0, r2
   895d4:	4798      	blx	r3
   895d6:	4603      	mov	r3, r0
   895d8:	461c      	mov	r4, r3
   895da:	4b0e      	ldr	r3, [pc, #56]	; (89614 <Calculate_slope+0x58>)
   895dc:	881b      	ldrh	r3, [r3, #0]
   895de:	461a      	mov	r2, r3
   895e0:	4b0d      	ldr	r3, [pc, #52]	; (89618 <Calculate_slope+0x5c>)
   895e2:	881b      	ldrh	r3, [r3, #0]
   895e4:	1ad2      	subs	r2, r2, r3
   895e6:	4b0d      	ldr	r3, [pc, #52]	; (8961c <Calculate_slope+0x60>)
   895e8:	4610      	mov	r0, r2
   895ea:	4798      	blx	r3
   895ec:	4602      	mov	r2, r0
   895ee:	4b0c      	ldr	r3, [pc, #48]	; (89620 <Calculate_slope+0x64>)
   895f0:	4611      	mov	r1, r2
   895f2:	4620      	mov	r0, r4
   895f4:	4798      	blx	r3
   895f6:	4603      	mov	r3, r0
   895f8:	461a      	mov	r2, r3
   895fa:	4b02      	ldr	r3, [pc, #8]	; (89604 <Calculate_slope+0x48>)
   895fc:	601a      	str	r2, [r3, #0]
}
   895fe:	bf00      	nop
   89600:	bd98      	pop	{r3, r4, r7, pc}
   89602:	bf00      	nop
   89604:	2007216c 	.word	0x2007216c
   89608:	20072150 	.word	0x20072150
   8960c:	20072168 	.word	0x20072168
   89610:	000a3c01 	.word	0x000a3c01
   89614:	20072158 	.word	0x20072158
   89618:	2007215e 	.word	0x2007215e
   8961c:	000a3d6d 	.word	0x000a3d6d
   89620:	000a3f7d 	.word	0x000a3f7d

00089624 <Calculate_direction>:

Calculate_direction()
{
   89624:	b580      	push	{r7, lr}
   89626:	af00      	add	r7, sp, #0
	if((Tmp2Val - Tmp2Val_prev) > 0)
   89628:	4b20      	ldr	r3, [pc, #128]	; (896ac <Calculate_direction+0x88>)
   8962a:	681a      	ldr	r2, [r3, #0]
   8962c:	4b20      	ldr	r3, [pc, #128]	; (896b0 <Calculate_direction+0x8c>)
   8962e:	6819      	ldr	r1, [r3, #0]
   89630:	4b20      	ldr	r3, [pc, #128]	; (896b4 <Calculate_direction+0x90>)
   89632:	4610      	mov	r0, r2
   89634:	4798      	blx	r3
   89636:	4603      	mov	r3, r0
   89638:	461a      	mov	r2, r3
   8963a:	4b1f      	ldr	r3, [pc, #124]	; (896b8 <Calculate_direction+0x94>)
   8963c:	f04f 0100 	mov.w	r1, #0
   89640:	4610      	mov	r0, r2
   89642:	4798      	blx	r3
   89644:	4603      	mov	r3, r0
   89646:	2b00      	cmp	r3, #0
   89648:	d003      	beq.n	89652 <Calculate_direction+0x2e>
	    TS2_Direction = UP;
   8964a:	4b1c      	ldr	r3, [pc, #112]	; (896bc <Calculate_direction+0x98>)
   8964c:	2200      	movs	r2, #0
   8964e:	701a      	strb	r2, [r3, #0]
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
	    TS2_Direction = DOWN;
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
		TS2_Direction = NUETRAL;

}
   89650:	e029      	b.n	896a6 <Calculate_direction+0x82>

Calculate_direction()
{
	if((Tmp2Val - Tmp2Val_prev) > 0)
	    TS2_Direction = UP;
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
   89652:	4b17      	ldr	r3, [pc, #92]	; (896b0 <Calculate_direction+0x8c>)
   89654:	681a      	ldr	r2, [r3, #0]
   89656:	4b15      	ldr	r3, [pc, #84]	; (896ac <Calculate_direction+0x88>)
   89658:	6819      	ldr	r1, [r3, #0]
   8965a:	4b16      	ldr	r3, [pc, #88]	; (896b4 <Calculate_direction+0x90>)
   8965c:	4610      	mov	r0, r2
   8965e:	4798      	blx	r3
   89660:	4603      	mov	r3, r0
   89662:	461a      	mov	r2, r3
   89664:	4b14      	ldr	r3, [pc, #80]	; (896b8 <Calculate_direction+0x94>)
   89666:	f04f 0100 	mov.w	r1, #0
   8966a:	4610      	mov	r0, r2
   8966c:	4798      	blx	r3
   8966e:	4603      	mov	r3, r0
   89670:	2b00      	cmp	r3, #0
   89672:	d003      	beq.n	8967c <Calculate_direction+0x58>
	    TS2_Direction = DOWN;
   89674:	4b11      	ldr	r3, [pc, #68]	; (896bc <Calculate_direction+0x98>)
   89676:	2201      	movs	r2, #1
   89678:	701a      	strb	r2, [r3, #0]
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
		TS2_Direction = NUETRAL;

}
   8967a:	e014      	b.n	896a6 <Calculate_direction+0x82>
{
	if((Tmp2Val - Tmp2Val_prev) > 0)
	    TS2_Direction = UP;
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
	    TS2_Direction = DOWN;
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
   8967c:	4b0c      	ldr	r3, [pc, #48]	; (896b0 <Calculate_direction+0x8c>)
   8967e:	681a      	ldr	r2, [r3, #0]
   89680:	4b0a      	ldr	r3, [pc, #40]	; (896ac <Calculate_direction+0x88>)
   89682:	6819      	ldr	r1, [r3, #0]
   89684:	4b0b      	ldr	r3, [pc, #44]	; (896b4 <Calculate_direction+0x90>)
   89686:	4610      	mov	r0, r2
   89688:	4798      	blx	r3
   8968a:	4603      	mov	r3, r0
   8968c:	461a      	mov	r2, r3
   8968e:	4b0c      	ldr	r3, [pc, #48]	; (896c0 <Calculate_direction+0x9c>)
   89690:	f04f 0100 	mov.w	r1, #0
   89694:	4610      	mov	r0, r2
   89696:	4798      	blx	r3
   89698:	4603      	mov	r3, r0
   8969a:	2b00      	cmp	r3, #0
   8969c:	d100      	bne.n	896a0 <Calculate_direction+0x7c>
		TS2_Direction = NUETRAL;

}
   8969e:	e002      	b.n	896a6 <Calculate_direction+0x82>
	if((Tmp2Val - Tmp2Val_prev) > 0)
	    TS2_Direction = UP;
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
	    TS2_Direction = DOWN;
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
		TS2_Direction = NUETRAL;
   896a0:	4b06      	ldr	r3, [pc, #24]	; (896bc <Calculate_direction+0x98>)
   896a2:	2202      	movs	r2, #2
   896a4:	701a      	strb	r2, [r3, #0]

}
   896a6:	bf00      	nop
   896a8:	bd80      	pop	{r7, pc}
   896aa:	bf00      	nop
   896ac:	20072150 	.word	0x20072150
   896b0:	20072164 	.word	0x20072164
   896b4:	000a3c01 	.word	0x000a3c01
   896b8:	000a418d 	.word	0x000a418d
   896bc:	20072d9a 	.word	0x20072d9a
   896c0:	000a413d 	.word	0x000a413d
   896c4:	00000000 	.word	0x00000000

000896c8 <Coarse_DutyCorrection>:

Coarse_DutyCorrection()                                  // to be fine tuned based on further testing
{
   896c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   896ca:	af00      	add	r7, sp, #0
	if (TS2_slope <= TS2_SLOPE1)
   896cc:	4b92      	ldr	r3, [pc, #584]	; (89918 <Coarse_DutyCorrection+0x250>)
   896ce:	681a      	ldr	r2, [r3, #0]
   896d0:	4b92      	ldr	r3, [pc, #584]	; (8991c <Coarse_DutyCorrection+0x254>)
   896d2:	4610      	mov	r0, r2
   896d4:	4798      	blx	r3
   896d6:	4c92      	ldr	r4, [pc, #584]	; (89920 <Coarse_DutyCorrection+0x258>)
   896d8:	a38b      	add	r3, pc, #556	; (adr r3, 89908 <Coarse_DutyCorrection+0x240>)
   896da:	e9d3 2300 	ldrd	r2, r3, [r3]
   896de:	47a0      	blx	r4
   896e0:	4603      	mov	r3, r0
   896e2:	2b00      	cmp	r3, #0
   896e4:	d002      	beq.n	896ec <Coarse_DutyCorrection+0x24>
	{
		duty_count = 60;					//Sunil: Lesser the slope i.e rising very fast, so decrease count; Earlier value = 80, wrong
   896e6:	4b8f      	ldr	r3, [pc, #572]	; (89924 <Coarse_DutyCorrection+0x25c>)
   896e8:	223c      	movs	r2, #60	; 0x3c
   896ea:	701a      	strb	r2, [r3, #0]

	}
	if ((TS2_slope <= TS2_SLOPE2) && (TS2_slope > TS2_SLOPE1))
   896ec:	4b8a      	ldr	r3, [pc, #552]	; (89918 <Coarse_DutyCorrection+0x250>)
   896ee:	681a      	ldr	r2, [r3, #0]
   896f0:	4b8a      	ldr	r3, [pc, #552]	; (8991c <Coarse_DutyCorrection+0x254>)
   896f2:	4610      	mov	r0, r2
   896f4:	4798      	blx	r3
   896f6:	4c8a      	ldr	r4, [pc, #552]	; (89920 <Coarse_DutyCorrection+0x258>)
   896f8:	a385      	add	r3, pc, #532	; (adr r3, 89910 <Coarse_DutyCorrection+0x248>)
   896fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   896fe:	47a0      	blx	r4
   89700:	4603      	mov	r3, r0
   89702:	2b00      	cmp	r3, #0
   89704:	d00f      	beq.n	89726 <Coarse_DutyCorrection+0x5e>
   89706:	4b84      	ldr	r3, [pc, #528]	; (89918 <Coarse_DutyCorrection+0x250>)
   89708:	681a      	ldr	r2, [r3, #0]
   8970a:	4b84      	ldr	r3, [pc, #528]	; (8991c <Coarse_DutyCorrection+0x254>)
   8970c:	4610      	mov	r0, r2
   8970e:	4798      	blx	r3
   89710:	4c85      	ldr	r4, [pc, #532]	; (89928 <Coarse_DutyCorrection+0x260>)
   89712:	a37d      	add	r3, pc, #500	; (adr r3, 89908 <Coarse_DutyCorrection+0x240>)
   89714:	e9d3 2300 	ldrd	r2, r3, [r3]
   89718:	47a0      	blx	r4
   8971a:	4603      	mov	r3, r0
   8971c:	2b00      	cmp	r3, #0
   8971e:	d002      	beq.n	89726 <Coarse_DutyCorrection+0x5e>
	{
		duty_count = 40;
   89720:	4b80      	ldr	r3, [pc, #512]	; (89924 <Coarse_DutyCorrection+0x25c>)
   89722:	2228      	movs	r2, #40	; 0x28
   89724:	701a      	strb	r2, [r3, #0]

	}
	if (TS2_slope >= TS2_SLOPE2)
   89726:	4b7c      	ldr	r3, [pc, #496]	; (89918 <Coarse_DutyCorrection+0x250>)
   89728:	681a      	ldr	r2, [r3, #0]
   8972a:	4b7c      	ldr	r3, [pc, #496]	; (8991c <Coarse_DutyCorrection+0x254>)
   8972c:	4610      	mov	r0, r2
   8972e:	4798      	blx	r3
   89730:	4c7e      	ldr	r4, [pc, #504]	; (8992c <Coarse_DutyCorrection+0x264>)
   89732:	a377      	add	r3, pc, #476	; (adr r3, 89910 <Coarse_DutyCorrection+0x248>)
   89734:	e9d3 2300 	ldrd	r2, r3, [r3]
   89738:	47a0      	blx	r4
   8973a:	4603      	mov	r3, r0
   8973c:	2b00      	cmp	r3, #0
   8973e:	d002      	beq.n	89746 <Coarse_DutyCorrection+0x7e>
	{
		duty_count = 8;
   89740:	4b78      	ldr	r3, [pc, #480]	; (89924 <Coarse_DutyCorrection+0x25c>)
   89742:	2208      	movs	r2, #8
   89744:	701a      	strb	r2, [r3, #0]
	
	}
	
	
	if (SYSTEM_FLOW == 500)
   89746:	4b7a      	ldr	r3, [pc, #488]	; (89930 <Coarse_DutyCorrection+0x268>)
   89748:	681b      	ldr	r3, [r3, #0]
   8974a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   8974e:	f040 8086 	bne.w	8985e <Coarse_DutyCorrection+0x196>
	{
		if ((TS2_Direction == UP)  && (Tmp2Val >= 40) )   // if direction is upward restrict correction if TS2 not yet 39
   89752:	4b78      	ldr	r3, [pc, #480]	; (89934 <Coarse_DutyCorrection+0x26c>)
   89754:	781b      	ldrb	r3, [r3, #0]
   89756:	2b00      	cmp	r3, #0
   89758:	d120      	bne.n	8979c <Coarse_DutyCorrection+0xd4>
   8975a:	4b77      	ldr	r3, [pc, #476]	; (89938 <Coarse_DutyCorrection+0x270>)
   8975c:	681a      	ldr	r2, [r3, #0]
   8975e:	4b77      	ldr	r3, [pc, #476]	; (8993c <Coarse_DutyCorrection+0x274>)
   89760:	4977      	ldr	r1, [pc, #476]	; (89940 <Coarse_DutyCorrection+0x278>)
   89762:	4610      	mov	r0, r2
   89764:	4798      	blx	r3
   89766:	4603      	mov	r3, r0
   89768:	2b00      	cmp	r3, #0
   8976a:	d017      	beq.n	8979c <Coarse_DutyCorrection+0xd4>
		{													// changed from 39 25071977
			
			avg_duty = avg_duty - duty_count;
   8976c:	4b75      	ldr	r3, [pc, #468]	; (89944 <Coarse_DutyCorrection+0x27c>)
   8976e:	f9b3 3000 	ldrsh.w	r3, [r3]
   89772:	b29a      	uxth	r2, r3
   89774:	4b6b      	ldr	r3, [pc, #428]	; (89924 <Coarse_DutyCorrection+0x25c>)
   89776:	781b      	ldrb	r3, [r3, #0]
   89778:	b29b      	uxth	r3, r3
   8977a:	1ad3      	subs	r3, r2, r3
   8977c:	b29b      	uxth	r3, r3
   8977e:	b21a      	sxth	r2, r3
   89780:	4b70      	ldr	r3, [pc, #448]	; (89944 <Coarse_DutyCorrection+0x27c>)
   89782:	801a      	strh	r2, [r3, #0]
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   89784:	4b6f      	ldr	r3, [pc, #444]	; (89944 <Coarse_DutyCorrection+0x27c>)
   89786:	f9b3 3000 	ldrsh.w	r3, [r3]
   8978a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8978e:	f300 819e 	bgt.w	89ace <Coarse_DutyCorrection+0x406>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   89792:	4b6c      	ldr	r3, [pc, #432]	; (89944 <Coarse_DutyCorrection+0x27c>)
   89794:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   89798:	801a      	strh	r2, [r3, #0]
		if ((TS2_Direction == UP)  && (Tmp2Val >= 40) )   // if direction is upward restrict correction if TS2 not yet 39
		{													// changed from 39 25071977
			
			avg_duty = avg_duty - duty_count;
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8979a:	e198      	b.n	89ace <Coarse_DutyCorrection+0x406>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= 36) && (Tmp2Val <= 37)))
   8979c:	4b65      	ldr	r3, [pc, #404]	; (89934 <Coarse_DutyCorrection+0x26c>)
   8979e:	781b      	ldrb	r3, [r3, #0]
   897a0:	2b00      	cmp	r3, #0
   897a2:	d11e      	bne.n	897e2 <Coarse_DutyCorrection+0x11a>
   897a4:	4b64      	ldr	r3, [pc, #400]	; (89938 <Coarse_DutyCorrection+0x270>)
   897a6:	681a      	ldr	r2, [r3, #0]
   897a8:	4b64      	ldr	r3, [pc, #400]	; (8993c <Coarse_DutyCorrection+0x274>)
   897aa:	4967      	ldr	r1, [pc, #412]	; (89948 <Coarse_DutyCorrection+0x280>)
   897ac:	4610      	mov	r0, r2
   897ae:	4798      	blx	r3
   897b0:	4603      	mov	r3, r0
   897b2:	2b00      	cmp	r3, #0
   897b4:	d015      	beq.n	897e2 <Coarse_DutyCorrection+0x11a>
   897b6:	4b60      	ldr	r3, [pc, #384]	; (89938 <Coarse_DutyCorrection+0x270>)
   897b8:	681a      	ldr	r2, [r3, #0]
   897ba:	4b64      	ldr	r3, [pc, #400]	; (8994c <Coarse_DutyCorrection+0x284>)
   897bc:	4964      	ldr	r1, [pc, #400]	; (89950 <Coarse_DutyCorrection+0x288>)
   897be:	4610      	mov	r0, r2
   897c0:	4798      	blx	r3
   897c2:	4603      	mov	r3, r0
   897c4:	2b00      	cmp	r3, #0
   897c6:	d00c      	beq.n	897e2 <Coarse_DutyCorrection+0x11a>
		{
			avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   897c8:	4b56      	ldr	r3, [pc, #344]	; (89924 <Coarse_DutyCorrection+0x25c>)
   897ca:	781b      	ldrb	r3, [r3, #0]
   897cc:	b29a      	uxth	r2, r3
   897ce:	4b5d      	ldr	r3, [pc, #372]	; (89944 <Coarse_DutyCorrection+0x27c>)
   897d0:	f9b3 3000 	ldrsh.w	r3, [r3]
   897d4:	b29b      	uxth	r3, r3
   897d6:	4413      	add	r3, r2
   897d8:	b29b      	uxth	r3, r3
   897da:	b21a      	sxth	r2, r3
   897dc:	4b59      	ldr	r3, [pc, #356]	; (89944 <Coarse_DutyCorrection+0x27c>)
   897de:	801a      	strh	r2, [r3, #0]
   897e0:	e175      	b.n	89ace <Coarse_DutyCorrection+0x406>
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= 37) )
   897e2:	4b54      	ldr	r3, [pc, #336]	; (89934 <Coarse_DutyCorrection+0x26c>)
   897e4:	781b      	ldrb	r3, [r3, #0]
   897e6:	2b01      	cmp	r3, #1
   897e8:	d12e      	bne.n	89848 <Coarse_DutyCorrection+0x180>
   897ea:	4b53      	ldr	r3, [pc, #332]	; (89938 <Coarse_DutyCorrection+0x270>)
   897ec:	681a      	ldr	r2, [r3, #0]
   897ee:	4b57      	ldr	r3, [pc, #348]	; (8994c <Coarse_DutyCorrection+0x284>)
   897f0:	4957      	ldr	r1, [pc, #348]	; (89950 <Coarse_DutyCorrection+0x288>)
   897f2:	4610      	mov	r0, r2
   897f4:	4798      	blx	r3
   897f6:	4603      	mov	r3, r0
   897f8:	2b00      	cmp	r3, #0
   897fa:	d025      	beq.n	89848 <Coarse_DutyCorrection+0x180>
		{
			avg_duty = avg_duty + duty_count;
   897fc:	4b49      	ldr	r3, [pc, #292]	; (89924 <Coarse_DutyCorrection+0x25c>)
   897fe:	781b      	ldrb	r3, [r3, #0]
   89800:	b29a      	uxth	r2, r3
   89802:	4b50      	ldr	r3, [pc, #320]	; (89944 <Coarse_DutyCorrection+0x27c>)
   89804:	f9b3 3000 	ldrsh.w	r3, [r3]
   89808:	b29b      	uxth	r3, r3
   8980a:	4413      	add	r3, r2
   8980c:	b29b      	uxth	r3, r3
   8980e:	b21a      	sxth	r2, r3
   89810:	4b4c      	ldr	r3, [pc, #304]	; (89944 <Coarse_DutyCorrection+0x27c>)
   89812:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   89814:	4b4b      	ldr	r3, [pc, #300]	; (89944 <Coarse_DutyCorrection+0x27c>)
   89816:	f9b3 3000 	ldrsh.w	r3, [r3]
   8981a:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8981e:	4293      	cmp	r3, r2
   89820:	f340 8155 	ble.w	89ace <Coarse_DutyCorrection+0x406>
   89824:	4b4b      	ldr	r3, [pc, #300]	; (89954 <Coarse_DutyCorrection+0x28c>)
   89826:	681a      	ldr	r2, [r3, #0]
   89828:	4b4b      	ldr	r3, [pc, #300]	; (89958 <Coarse_DutyCorrection+0x290>)
   8982a:	6819      	ldr	r1, [r3, #0]
   8982c:	4b43      	ldr	r3, [pc, #268]	; (8993c <Coarse_DutyCorrection+0x274>)
   8982e:	4610      	mov	r0, r2
   89830:	4798      	blx	r3
   89832:	4603      	mov	r3, r0
   89834:	2b00      	cmp	r3, #0
   89836:	d100      	bne.n	8983a <Coarse_DutyCorrection+0x172>
   89838:	e149      	b.n	89ace <Coarse_DutyCorrection+0x406>
			{
				avg_duty = 2300;
   8983a:	4b42      	ldr	r3, [pc, #264]	; (89944 <Coarse_DutyCorrection+0x27c>)
   8983c:	f640 02fc 	movw	r2, #2300	; 0x8fc
   89840:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   89842:	4b46      	ldr	r3, [pc, #280]	; (8995c <Coarse_DutyCorrection+0x294>)
   89844:	4798      	blx	r3
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= 37) )
		{
			avg_duty = avg_duty + duty_count;
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   89846:	e142      	b.n	89ace <Coarse_DutyCorrection+0x406>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			  HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   89848:	4b3a      	ldr	r3, [pc, #232]	; (89934 <Coarse_DutyCorrection+0x26c>)
   8984a:	781b      	ldrb	r3, [r3, #0]
   8984c:	2b02      	cmp	r3, #2
   8984e:	f040 813e 	bne.w	89ace <Coarse_DutyCorrection+0x406>
		avg_duty = avg_duty;
   89852:	4b3c      	ldr	r3, [pc, #240]	; (89944 <Coarse_DutyCorrection+0x27c>)
   89854:	f9b3 2000 	ldrsh.w	r2, [r3]
   89858:	4b3a      	ldr	r3, [pc, #232]	; (89944 <Coarse_DutyCorrection+0x27c>)
   8985a:	801a      	strh	r2, [r3, #0]
		
	}
	
	
	
}
   8985c:	e137      	b.n	89ace <Coarse_DutyCorrection+0x406>
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
		avg_duty = avg_duty;
		
	}
	
	else if (SYSTEM_FLOW == 300)
   8985e:	4b34      	ldr	r3, [pc, #208]	; (89930 <Coarse_DutyCorrection+0x268>)
   89860:	681b      	ldr	r3, [r3, #0]
   89862:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   89866:	f040 8132 	bne.w	89ace <Coarse_DutyCorrection+0x406>
	{
//	if ((TS2_Direction == UP)  && (Tmp2Val >= 39) && (Tmp3Val >= Prescribed_T3))   // if direction is upward restrict correction if TS2 not yet 39
		if (((TS2_Direction == UP)  && (Tmp2Val >= 40)) || (Tmp3Val >= (Prescribed_T3+0.5)))   // if direction is upward restrict correction if TS2 not yet 39
   8986a:	4b32      	ldr	r3, [pc, #200]	; (89934 <Coarse_DutyCorrection+0x26c>)
   8986c:	781b      	ldrb	r3, [r3, #0]
   8986e:	2b00      	cmp	r3, #0
   89870:	d108      	bne.n	89884 <Coarse_DutyCorrection+0x1bc>
   89872:	4b31      	ldr	r3, [pc, #196]	; (89938 <Coarse_DutyCorrection+0x270>)
   89874:	681a      	ldr	r2, [r3, #0]
   89876:	4b31      	ldr	r3, [pc, #196]	; (8993c <Coarse_DutyCorrection+0x274>)
   89878:	4931      	ldr	r1, [pc, #196]	; (89940 <Coarse_DutyCorrection+0x278>)
   8987a:	4610      	mov	r0, r2
   8987c:	4798      	blx	r3
   8987e:	4603      	mov	r3, r0
   89880:	2b00      	cmp	r3, #0
   89882:	d11b      	bne.n	898bc <Coarse_DutyCorrection+0x1f4>
   89884:	4b33      	ldr	r3, [pc, #204]	; (89954 <Coarse_DutyCorrection+0x28c>)
   89886:	681a      	ldr	r2, [r3, #0]
   89888:	4b24      	ldr	r3, [pc, #144]	; (8991c <Coarse_DutyCorrection+0x254>)
   8988a:	4610      	mov	r0, r2
   8988c:	4798      	blx	r3
   8988e:	4605      	mov	r5, r0
   89890:	460e      	mov	r6, r1
   89892:	4b31      	ldr	r3, [pc, #196]	; (89958 <Coarse_DutyCorrection+0x290>)
   89894:	681a      	ldr	r2, [r3, #0]
   89896:	4b21      	ldr	r3, [pc, #132]	; (8991c <Coarse_DutyCorrection+0x254>)
   89898:	4610      	mov	r0, r2
   8989a:	4798      	blx	r3
   8989c:	4c30      	ldr	r4, [pc, #192]	; (89960 <Coarse_DutyCorrection+0x298>)
   8989e:	f04f 0200 	mov.w	r2, #0
   898a2:	4b30      	ldr	r3, [pc, #192]	; (89964 <Coarse_DutyCorrection+0x29c>)
   898a4:	47a0      	blx	r4
   898a6:	4603      	mov	r3, r0
   898a8:	460c      	mov	r4, r1
   898aa:	461a      	mov	r2, r3
   898ac:	4623      	mov	r3, r4
   898ae:	4c1f      	ldr	r4, [pc, #124]	; (8992c <Coarse_DutyCorrection+0x264>)
   898b0:	4628      	mov	r0, r5
   898b2:	4631      	mov	r1, r6
   898b4:	47a0      	blx	r4
   898b6:	4603      	mov	r3, r0
   898b8:	2b00      	cmp	r3, #0
   898ba:	d057      	beq.n	8996c <Coarse_DutyCorrection+0x2a4>
		{                                      // earlier was 40
			avg_duty = avg_duty - duty_count;
   898bc:	4b21      	ldr	r3, [pc, #132]	; (89944 <Coarse_DutyCorrection+0x27c>)
   898be:	f9b3 3000 	ldrsh.w	r3, [r3]
   898c2:	b29a      	uxth	r2, r3
   898c4:	4b17      	ldr	r3, [pc, #92]	; (89924 <Coarse_DutyCorrection+0x25c>)
   898c6:	781b      	ldrb	r3, [r3, #0]
   898c8:	b29b      	uxth	r3, r3
   898ca:	1ad3      	subs	r3, r2, r3
   898cc:	b29b      	uxth	r3, r3
   898ce:	b21a      	sxth	r2, r3
   898d0:	4b1c      	ldr	r3, [pc, #112]	; (89944 <Coarse_DutyCorrection+0x27c>)
   898d2:	801a      	strh	r2, [r3, #0]
				
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   898d4:	4b1b      	ldr	r3, [pc, #108]	; (89944 <Coarse_DutyCorrection+0x27c>)
   898d6:	f9b3 3000 	ldrsh.w	r3, [r3]
   898da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   898de:	f300 80f0 	bgt.w	89ac2 <Coarse_DutyCorrection+0x3fa>
   898e2:	4b1c      	ldr	r3, [pc, #112]	; (89954 <Coarse_DutyCorrection+0x28c>)
   898e4:	681a      	ldr	r2, [r3, #0]
   898e6:	4b1c      	ldr	r3, [pc, #112]	; (89958 <Coarse_DutyCorrection+0x290>)
   898e8:	6819      	ldr	r1, [r3, #0]
   898ea:	4b1f      	ldr	r3, [pc, #124]	; (89968 <Coarse_DutyCorrection+0x2a0>)
   898ec:	4610      	mov	r0, r2
   898ee:	4798      	blx	r3
   898f0:	4603      	mov	r3, r0
   898f2:	2b00      	cmp	r3, #0
   898f4:	d100      	bne.n	898f8 <Coarse_DutyCorrection+0x230>
   898f6:	e0e4      	b.n	89ac2 <Coarse_DutyCorrection+0x3fa>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   898f8:	4b12      	ldr	r3, [pc, #72]	; (89944 <Coarse_DutyCorrection+0x27c>)
   898fa:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   898fe:	801a      	strh	r2, [r3, #0]
//	if ((TS2_Direction == UP)  && (Tmp2Val >= 39) && (Tmp3Val >= Prescribed_T3))   // if direction is upward restrict correction if TS2 not yet 39
		if (((TS2_Direction == UP)  && (Tmp2Val >= 40)) || (Tmp3Val >= (Prescribed_T3+0.5)))   // if direction is upward restrict correction if TS2 not yet 39
		{                                      // earlier was 40
			avg_duty = avg_duty - duty_count;
				
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   89900:	e0df      	b.n	89ac2 <Coarse_DutyCorrection+0x3fa>
   89902:	bf00      	nop
   89904:	f3af 8000 	nop.w
   89908:	eb851eb8 	.word	0xeb851eb8
   8990c:	3f9eb851 	.word	0x3f9eb851
   89910:	33333333 	.word	0x33333333
   89914:	3fd33333 	.word	0x3fd33333
   89918:	2007216c 	.word	0x2007216c
   8991c:	000a34ed 	.word	0x000a34ed
   89920:	000a3a8d 	.word	0x000a3a8d
   89924:	20072170 	.word	0x20072170
   89928:	000a3ab5 	.word	0x000a3ab5
   8992c:	000a3aa1 	.word	0x000a3aa1
   89930:	20070484 	.word	0x20070484
   89934:	20072d9a 	.word	0x20072d9a
   89938:	20072150 	.word	0x20072150
   8993c:	000a4179 	.word	0x000a4179
   89940:	42200000 	.word	0x42200000
   89944:	2007213e 	.word	0x2007213e
   89948:	42100000 	.word	0x42100000
   8994c:	000a4165 	.word	0x000a4165
   89950:	42140000 	.word	0x42140000
   89954:	20072154 	.word	0x20072154
   89958:	20070480 	.word	0x20070480
   8995c:	00097999 	.word	0x00097999
   89960:	000a3231 	.word	0x000a3231
   89964:	3fe00000 	.word	0x3fe00000
   89968:	000a4151 	.word	0x000a4151
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= 37) && (Tmp2Val <= 40)))      // last was 39
   8996c:	4b59      	ldr	r3, [pc, #356]	; (89ad4 <Coarse_DutyCorrection+0x40c>)
   8996e:	781b      	ldrb	r3, [r3, #0]
   89970:	2b00      	cmp	r3, #0
   89972:	d133      	bne.n	899dc <Coarse_DutyCorrection+0x314>
   89974:	4b58      	ldr	r3, [pc, #352]	; (89ad8 <Coarse_DutyCorrection+0x410>)
   89976:	681a      	ldr	r2, [r3, #0]
   89978:	4b58      	ldr	r3, [pc, #352]	; (89adc <Coarse_DutyCorrection+0x414>)
   8997a:	4959      	ldr	r1, [pc, #356]	; (89ae0 <Coarse_DutyCorrection+0x418>)
   8997c:	4610      	mov	r0, r2
   8997e:	4798      	blx	r3
   89980:	4603      	mov	r3, r0
   89982:	2b00      	cmp	r3, #0
   89984:	d02a      	beq.n	899dc <Coarse_DutyCorrection+0x314>
   89986:	4b54      	ldr	r3, [pc, #336]	; (89ad8 <Coarse_DutyCorrection+0x410>)
   89988:	681a      	ldr	r2, [r3, #0]
   8998a:	4b56      	ldr	r3, [pc, #344]	; (89ae4 <Coarse_DutyCorrection+0x41c>)
   8998c:	4956      	ldr	r1, [pc, #344]	; (89ae8 <Coarse_DutyCorrection+0x420>)
   8998e:	4610      	mov	r0, r2
   89990:	4798      	blx	r3
   89992:	4603      	mov	r3, r0
   89994:	2b00      	cmp	r3, #0
   89996:	d021      	beq.n	899dc <Coarse_DutyCorrection+0x314>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   89998:	4b54      	ldr	r3, [pc, #336]	; (89aec <Coarse_DutyCorrection+0x424>)
   8999a:	681a      	ldr	r2, [r3, #0]
   8999c:	4b51      	ldr	r3, [pc, #324]	; (89ae4 <Coarse_DutyCorrection+0x41c>)
   8999e:	4954      	ldr	r1, [pc, #336]	; (89af0 <Coarse_DutyCorrection+0x428>)
   899a0:	4610      	mov	r0, r2
   899a2:	4798      	blx	r3
   899a4:	4603      	mov	r3, r0
   899a6:	2b00      	cmp	r3, #0
   899a8:	f000 808b 	beq.w	89ac2 <Coarse_DutyCorrection+0x3fa>
   899ac:	4b51      	ldr	r3, [pc, #324]	; (89af4 <Coarse_DutyCorrection+0x42c>)
   899ae:	681a      	ldr	r2, [r3, #0]
   899b0:	4b51      	ldr	r3, [pc, #324]	; (89af8 <Coarse_DutyCorrection+0x430>)
   899b2:	6819      	ldr	r1, [r3, #0]
   899b4:	4b51      	ldr	r3, [pc, #324]	; (89afc <Coarse_DutyCorrection+0x434>)
   899b6:	4610      	mov	r0, r2
   899b8:	4798      	blx	r3
   899ba:	4603      	mov	r3, r0
   899bc:	2b00      	cmp	r3, #0
   899be:	d100      	bne.n	899c2 <Coarse_DutyCorrection+0x2fa>
   899c0:	e07f      	b.n	89ac2 <Coarse_DutyCorrection+0x3fa>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   899c2:	4b4f      	ldr	r3, [pc, #316]	; (89b00 <Coarse_DutyCorrection+0x438>)
   899c4:	781b      	ldrb	r3, [r3, #0]
   899c6:	b29a      	uxth	r2, r3
   899c8:	4b4e      	ldr	r3, [pc, #312]	; (89b04 <Coarse_DutyCorrection+0x43c>)
   899ca:	f9b3 3000 	ldrsh.w	r3, [r3]
   899ce:	b29b      	uxth	r3, r3
   899d0:	4413      	add	r3, r2
   899d2:	b29b      	uxth	r3, r3
   899d4:	b21a      	sxth	r2, r3
   899d6:	4b4b      	ldr	r3, [pc, #300]	; (89b04 <Coarse_DutyCorrection+0x43c>)
   899d8:	801a      	strh	r2, [r3, #0]
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= 37) && (Tmp2Val <= 40)))      // last was 39
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   899da:	e072      	b.n	89ac2 <Coarse_DutyCorrection+0x3fa>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= 40) )        // last was 39
   899dc:	4b3d      	ldr	r3, [pc, #244]	; (89ad4 <Coarse_DutyCorrection+0x40c>)
   899de:	781b      	ldrb	r3, [r3, #0]
   899e0:	2b01      	cmp	r3, #1
   899e2:	d135      	bne.n	89a50 <Coarse_DutyCorrection+0x388>
   899e4:	4b3c      	ldr	r3, [pc, #240]	; (89ad8 <Coarse_DutyCorrection+0x410>)
   899e6:	681a      	ldr	r2, [r3, #0]
   899e8:	4b3e      	ldr	r3, [pc, #248]	; (89ae4 <Coarse_DutyCorrection+0x41c>)
   899ea:	493f      	ldr	r1, [pc, #252]	; (89ae8 <Coarse_DutyCorrection+0x420>)
   899ec:	4610      	mov	r0, r2
   899ee:	4798      	blx	r3
   899f0:	4603      	mov	r3, r0
   899f2:	2b00      	cmp	r3, #0
   899f4:	d02c      	beq.n	89a50 <Coarse_DutyCorrection+0x388>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   // Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
   899f6:	4b3d      	ldr	r3, [pc, #244]	; (89aec <Coarse_DutyCorrection+0x424>)
   899f8:	681a      	ldr	r2, [r3, #0]
   899fa:	4b3a      	ldr	r3, [pc, #232]	; (89ae4 <Coarse_DutyCorrection+0x41c>)
   899fc:	493c      	ldr	r1, [pc, #240]	; (89af0 <Coarse_DutyCorrection+0x428>)
   899fe:	4610      	mov	r0, r2
   89a00:	4798      	blx	r3
   89a02:	4603      	mov	r3, r0
   89a04:	2b00      	cmp	r3, #0
   89a06:	d015      	beq.n	89a34 <Coarse_DutyCorrection+0x36c>
   89a08:	4b3a      	ldr	r3, [pc, #232]	; (89af4 <Coarse_DutyCorrection+0x42c>)
   89a0a:	681a      	ldr	r2, [r3, #0]
   89a0c:	4b3a      	ldr	r3, [pc, #232]	; (89af8 <Coarse_DutyCorrection+0x430>)
   89a0e:	6819      	ldr	r1, [r3, #0]
   89a10:	4b3a      	ldr	r3, [pc, #232]	; (89afc <Coarse_DutyCorrection+0x434>)
   89a12:	4610      	mov	r0, r2
   89a14:	4798      	blx	r3
   89a16:	4603      	mov	r3, r0
   89a18:	2b00      	cmp	r3, #0
   89a1a:	d00b      	beq.n	89a34 <Coarse_DutyCorrection+0x36c>
			{
				avg_duty = avg_duty + duty_count;            
   89a1c:	4b38      	ldr	r3, [pc, #224]	; (89b00 <Coarse_DutyCorrection+0x438>)
   89a1e:	781b      	ldrb	r3, [r3, #0]
   89a20:	b29a      	uxth	r2, r3
   89a22:	4b38      	ldr	r3, [pc, #224]	; (89b04 <Coarse_DutyCorrection+0x43c>)
   89a24:	f9b3 3000 	ldrsh.w	r3, [r3]
   89a28:	b29b      	uxth	r3, r3
   89a2a:	4413      	add	r3, r2
   89a2c:	b29b      	uxth	r3, r3
   89a2e:	b21a      	sxth	r2, r3
   89a30:	4b34      	ldr	r3, [pc, #208]	; (89b04 <Coarse_DutyCorrection+0x43c>)
   89a32:	801a      	strh	r2, [r3, #0]
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   89a34:	4b33      	ldr	r3, [pc, #204]	; (89b04 <Coarse_DutyCorrection+0x43c>)
   89a36:	f9b3 3000 	ldrsh.w	r3, [r3]
   89a3a:	f640 12c4 	movw	r2, #2500	; 0x9c4
   89a3e:	4293      	cmp	r3, r2
   89a40:	dd3f      	ble.n	89ac2 <Coarse_DutyCorrection+0x3fa>
			{
				avg_duty = 2500;
   89a42:	4b30      	ldr	r3, [pc, #192]	; (89b04 <Coarse_DutyCorrection+0x43c>)
   89a44:	f640 12c4 	movw	r2, #2500	; 0x9c4
   89a48:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   89a4a:	4b2f      	ldr	r3, [pc, #188]	; (89b08 <Coarse_DutyCorrection+0x440>)
   89a4c:	4798      	blx	r3
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   // Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
			{
				avg_duty = avg_duty + duty_count;            
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   89a4e:	e038      	b.n	89ac2 <Coarse_DutyCorrection+0x3fa>
				avg_duty = 2500;
				sv_cntrl_poweroffheater();
				//			  HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)
   89a50:	4b20      	ldr	r3, [pc, #128]	; (89ad4 <Coarse_DutyCorrection+0x40c>)
   89a52:	781b      	ldrb	r3, [r3, #0]
   89a54:	2b02      	cmp	r3, #2
   89a56:	d134      	bne.n	89ac2 <Coarse_DutyCorrection+0x3fa>
		{    //Sunil: This means TS2 is neither increasing nor decreasing
			if (Tmp3Val >= (Prescribed_T3 + 1))
   89a58:	4b27      	ldr	r3, [pc, #156]	; (89af8 <Coarse_DutyCorrection+0x430>)
   89a5a:	681a      	ldr	r2, [r3, #0]
   89a5c:	4b2b      	ldr	r3, [pc, #172]	; (89b0c <Coarse_DutyCorrection+0x444>)
   89a5e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89a62:	4610      	mov	r0, r2
   89a64:	4798      	blx	r3
   89a66:	4603      	mov	r3, r0
   89a68:	4618      	mov	r0, r3
   89a6a:	4b22      	ldr	r3, [pc, #136]	; (89af4 <Coarse_DutyCorrection+0x42c>)
   89a6c:	681a      	ldr	r2, [r3, #0]
   89a6e:	4b1d      	ldr	r3, [pc, #116]	; (89ae4 <Coarse_DutyCorrection+0x41c>)
   89a70:	4611      	mov	r1, r2
   89a72:	4798      	blx	r3
   89a74:	4603      	mov	r3, r0
   89a76:	2b00      	cmp	r3, #0
   89a78:	d009      	beq.n	89a8e <Coarse_DutyCorrection+0x3c6>
			{
				avg_duty = avg_duty - 10;
   89a7a:	4b22      	ldr	r3, [pc, #136]	; (89b04 <Coarse_DutyCorrection+0x43c>)
   89a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
   89a80:	b29b      	uxth	r3, r3
   89a82:	3b0a      	subs	r3, #10
   89a84:	b29b      	uxth	r3, r3
   89a86:	b21a      	sxth	r2, r3
   89a88:	4b1e      	ldr	r3, [pc, #120]	; (89b04 <Coarse_DutyCorrection+0x43c>)
   89a8a:	801a      	strh	r2, [r3, #0]
   89a8c:	e019      	b.n	89ac2 <Coarse_DutyCorrection+0x3fa>
			}
			else if (Tmp3Val <= (Prescribed_T3 + 1))
   89a8e:	4b1a      	ldr	r3, [pc, #104]	; (89af8 <Coarse_DutyCorrection+0x430>)
   89a90:	681a      	ldr	r2, [r3, #0]
   89a92:	4b1e      	ldr	r3, [pc, #120]	; (89b0c <Coarse_DutyCorrection+0x444>)
   89a94:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89a98:	4610      	mov	r0, r2
   89a9a:	4798      	blx	r3
   89a9c:	4603      	mov	r3, r0
   89a9e:	4618      	mov	r0, r3
   89aa0:	4b14      	ldr	r3, [pc, #80]	; (89af4 <Coarse_DutyCorrection+0x42c>)
   89aa2:	681a      	ldr	r2, [r3, #0]
   89aa4:	4b0d      	ldr	r3, [pc, #52]	; (89adc <Coarse_DutyCorrection+0x414>)
   89aa6:	4611      	mov	r1, r2
   89aa8:	4798      	blx	r3
   89aaa:	4603      	mov	r3, r0
   89aac:	2b00      	cmp	r3, #0
   89aae:	d008      	beq.n	89ac2 <Coarse_DutyCorrection+0x3fa>
			{
				avg_duty = avg_duty + 10;
   89ab0:	4b14      	ldr	r3, [pc, #80]	; (89b04 <Coarse_DutyCorrection+0x43c>)
   89ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
   89ab6:	b29b      	uxth	r3, r3
   89ab8:	330a      	adds	r3, #10
   89aba:	b29b      	uxth	r3, r3
   89abc:	b21a      	sxth	r2, r3
   89abe:	4b11      	ldr	r3, [pc, #68]	; (89b04 <Coarse_DutyCorrection+0x43c>)
   89ac0:	801a      	strh	r2, [r3, #0]
			}
	   }
	
		avg_duty = avg_duty;
   89ac2:	4b10      	ldr	r3, [pc, #64]	; (89b04 <Coarse_DutyCorrection+0x43c>)
   89ac4:	f9b3 2000 	ldrsh.w	r2, [r3]
   89ac8:	4b0e      	ldr	r3, [pc, #56]	; (89b04 <Coarse_DutyCorrection+0x43c>)
   89aca:	801a      	strh	r2, [r3, #0]
		
	}
	
	
	
}
   89acc:	e7ff      	b.n	89ace <Coarse_DutyCorrection+0x406>
   89ace:	bf00      	nop
   89ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89ad2:	bf00      	nop
   89ad4:	20072d9a 	.word	0x20072d9a
   89ad8:	20072150 	.word	0x20072150
   89adc:	000a4179 	.word	0x000a4179
   89ae0:	42140000 	.word	0x42140000
   89ae4:	000a4165 	.word	0x000a4165
   89ae8:	42200000 	.word	0x42200000
   89aec:	2007214c 	.word	0x2007214c
   89af0:	42100000 	.word	0x42100000
   89af4:	20072154 	.word	0x20072154
   89af8:	20070480 	.word	0x20070480
   89afc:	000a4151 	.word	0x000a4151
   89b00:	20072170 	.word	0x20072170
   89b04:	2007213e 	.word	0x2007213e
   89b08:	00097999 	.word	0x00097999
   89b0c:	000a3c05 	.word	0x000a3c05

00089b10 <Fine_DutyCorrection>:

Fine_DutyCorrection()                                  // to be fine tuned based on further testing
{
   89b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89b12:	af00      	add	r7, sp, #0
	if (TS2_slope <= TS2_SLOPE1)
   89b14:	4b94      	ldr	r3, [pc, #592]	; (89d68 <Fine_DutyCorrection+0x258>)
   89b16:	681a      	ldr	r2, [r3, #0]
   89b18:	4b94      	ldr	r3, [pc, #592]	; (89d6c <Fine_DutyCorrection+0x25c>)
   89b1a:	4610      	mov	r0, r2
   89b1c:	4798      	blx	r3
   89b1e:	4c94      	ldr	r4, [pc, #592]	; (89d70 <Fine_DutyCorrection+0x260>)
   89b20:	a38d      	add	r3, pc, #564	; (adr r3, 89d58 <Fine_DutyCorrection+0x248>)
   89b22:	e9d3 2300 	ldrd	r2, r3, [r3]
   89b26:	47a0      	blx	r4
   89b28:	4603      	mov	r3, r0
   89b2a:	2b00      	cmp	r3, #0
   89b2c:	d002      	beq.n	89b34 <Fine_DutyCorrection+0x24>
	{
		duty_count = 40;												
   89b2e:	4b91      	ldr	r3, [pc, #580]	; (89d74 <Fine_DutyCorrection+0x264>)
   89b30:	2228      	movs	r2, #40	; 0x28
   89b32:	701a      	strb	r2, [r3, #0]
	}
	if ((TS2_slope <= TS2_SLOPE2) && (TS2_slope > TS2_SLOPE1))
   89b34:	4b8c      	ldr	r3, [pc, #560]	; (89d68 <Fine_DutyCorrection+0x258>)
   89b36:	681a      	ldr	r2, [r3, #0]
   89b38:	4b8c      	ldr	r3, [pc, #560]	; (89d6c <Fine_DutyCorrection+0x25c>)
   89b3a:	4610      	mov	r0, r2
   89b3c:	4798      	blx	r3
   89b3e:	4c8c      	ldr	r4, [pc, #560]	; (89d70 <Fine_DutyCorrection+0x260>)
   89b40:	a387      	add	r3, pc, #540	; (adr r3, 89d60 <Fine_DutyCorrection+0x250>)
   89b42:	e9d3 2300 	ldrd	r2, r3, [r3]
   89b46:	47a0      	blx	r4
   89b48:	4603      	mov	r3, r0
   89b4a:	2b00      	cmp	r3, #0
   89b4c:	d00f      	beq.n	89b6e <Fine_DutyCorrection+0x5e>
   89b4e:	4b86      	ldr	r3, [pc, #536]	; (89d68 <Fine_DutyCorrection+0x258>)
   89b50:	681a      	ldr	r2, [r3, #0]
   89b52:	4b86      	ldr	r3, [pc, #536]	; (89d6c <Fine_DutyCorrection+0x25c>)
   89b54:	4610      	mov	r0, r2
   89b56:	4798      	blx	r3
   89b58:	4c87      	ldr	r4, [pc, #540]	; (89d78 <Fine_DutyCorrection+0x268>)
   89b5a:	a37f      	add	r3, pc, #508	; (adr r3, 89d58 <Fine_DutyCorrection+0x248>)
   89b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89b60:	47a0      	blx	r4
   89b62:	4603      	mov	r3, r0
   89b64:	2b00      	cmp	r3, #0
   89b66:	d002      	beq.n	89b6e <Fine_DutyCorrection+0x5e>
	{
		duty_count = 20;
   89b68:	4b82      	ldr	r3, [pc, #520]	; (89d74 <Fine_DutyCorrection+0x264>)
   89b6a:	2214      	movs	r2, #20
   89b6c:	701a      	strb	r2, [r3, #0]
	}
	if (TS2_slope >= TS2_SLOPE2)
   89b6e:	4b7e      	ldr	r3, [pc, #504]	; (89d68 <Fine_DutyCorrection+0x258>)
   89b70:	681a      	ldr	r2, [r3, #0]
   89b72:	4b7e      	ldr	r3, [pc, #504]	; (89d6c <Fine_DutyCorrection+0x25c>)
   89b74:	4610      	mov	r0, r2
   89b76:	4798      	blx	r3
   89b78:	4c80      	ldr	r4, [pc, #512]	; (89d7c <Fine_DutyCorrection+0x26c>)
   89b7a:	a379      	add	r3, pc, #484	; (adr r3, 89d60 <Fine_DutyCorrection+0x250>)
   89b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89b80:	47a0      	blx	r4
   89b82:	4603      	mov	r3, r0
   89b84:	2b00      	cmp	r3, #0
   89b86:	d002      	beq.n	89b8e <Fine_DutyCorrection+0x7e>
	{
		duty_count = 4;
   89b88:	4b7a      	ldr	r3, [pc, #488]	; (89d74 <Fine_DutyCorrection+0x264>)
   89b8a:	2204      	movs	r2, #4
   89b8c:	701a      	strb	r2, [r3, #0]
	}
	
	if (SYSTEM_FLOW == 500)
   89b8e:	4b7c      	ldr	r3, [pc, #496]	; (89d80 <Fine_DutyCorrection+0x270>)
   89b90:	681b      	ldr	r3, [r3, #0]
   89b92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   89b96:	f040 808d 	bne.w	89cb4 <Fine_DutyCorrection+0x1a4>
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= 37.5) && (Tmp3Val >= 37.5))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
   89b9a:	4b7a      	ldr	r3, [pc, #488]	; (89d84 <Fine_DutyCorrection+0x274>)
   89b9c:	781b      	ldrb	r3, [r3, #0]
   89b9e:	2b00      	cmp	r3, #0
   89ba0:	d129      	bne.n	89bf6 <Fine_DutyCorrection+0xe6>
   89ba2:	4b79      	ldr	r3, [pc, #484]	; (89d88 <Fine_DutyCorrection+0x278>)
   89ba4:	681a      	ldr	r2, [r3, #0]
   89ba6:	4b79      	ldr	r3, [pc, #484]	; (89d8c <Fine_DutyCorrection+0x27c>)
   89ba8:	4979      	ldr	r1, [pc, #484]	; (89d90 <Fine_DutyCorrection+0x280>)
   89baa:	4610      	mov	r0, r2
   89bac:	4798      	blx	r3
   89bae:	4603      	mov	r3, r0
   89bb0:	2b00      	cmp	r3, #0
   89bb2:	d020      	beq.n	89bf6 <Fine_DutyCorrection+0xe6>
   89bb4:	4b77      	ldr	r3, [pc, #476]	; (89d94 <Fine_DutyCorrection+0x284>)
   89bb6:	681a      	ldr	r2, [r3, #0]
   89bb8:	4b74      	ldr	r3, [pc, #464]	; (89d8c <Fine_DutyCorrection+0x27c>)
   89bba:	4975      	ldr	r1, [pc, #468]	; (89d90 <Fine_DutyCorrection+0x280>)
   89bbc:	4610      	mov	r0, r2
   89bbe:	4798      	blx	r3
   89bc0:	4603      	mov	r3, r0
   89bc2:	2b00      	cmp	r3, #0
   89bc4:	d017      	beq.n	89bf6 <Fine_DutyCorrection+0xe6>
		{
			avg_duty = avg_duty - duty_count;
   89bc6:	4b74      	ldr	r3, [pc, #464]	; (89d98 <Fine_DutyCorrection+0x288>)
   89bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
   89bcc:	b29a      	uxth	r2, r3
   89bce:	4b69      	ldr	r3, [pc, #420]	; (89d74 <Fine_DutyCorrection+0x264>)
   89bd0:	781b      	ldrb	r3, [r3, #0]
   89bd2:	b29b      	uxth	r3, r3
   89bd4:	1ad3      	subs	r3, r2, r3
   89bd6:	b29b      	uxth	r3, r3
   89bd8:	b21a      	sxth	r2, r3
   89bda:	4b6f      	ldr	r3, [pc, #444]	; (89d98 <Fine_DutyCorrection+0x288>)
   89bdc:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   89bde:	4b6e      	ldr	r3, [pc, #440]	; (89d98 <Fine_DutyCorrection+0x288>)
   89be0:	f9b3 3000 	ldrsh.w	r3, [r3]
   89be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   89be8:	f300 81ae 	bgt.w	89f48 <Fine_DutyCorrection+0x438>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
   89bec:	4b6a      	ldr	r3, [pc, #424]	; (89d98 <Fine_DutyCorrection+0x288>)
   89bee:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   89bf2:	801a      	strh	r2, [r3, #0]
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= 37.5) && (Tmp3Val >= 37.5))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
		{
			avg_duty = avg_duty - duty_count;
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   89bf4:	e1a8      	b.n	89f48 <Fine_DutyCorrection+0x438>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= 35) && (Tmp2Val <= 38.5)) && (Tmp3Val <= 38) )  // Gopal added TS3 check as to increase duty if ts3 goes below 38
   89bf6:	4b63      	ldr	r3, [pc, #396]	; (89d84 <Fine_DutyCorrection+0x274>)
   89bf8:	781b      	ldrb	r3, [r3, #0]
   89bfa:	2b00      	cmp	r3, #0
   89bfc:	d127      	bne.n	89c4e <Fine_DutyCorrection+0x13e>
   89bfe:	4b62      	ldr	r3, [pc, #392]	; (89d88 <Fine_DutyCorrection+0x278>)
   89c00:	681a      	ldr	r2, [r3, #0]
   89c02:	4b62      	ldr	r3, [pc, #392]	; (89d8c <Fine_DutyCorrection+0x27c>)
   89c04:	4965      	ldr	r1, [pc, #404]	; (89d9c <Fine_DutyCorrection+0x28c>)
   89c06:	4610      	mov	r0, r2
   89c08:	4798      	blx	r3
   89c0a:	4603      	mov	r3, r0
   89c0c:	2b00      	cmp	r3, #0
   89c0e:	d01e      	beq.n	89c4e <Fine_DutyCorrection+0x13e>
   89c10:	4b5d      	ldr	r3, [pc, #372]	; (89d88 <Fine_DutyCorrection+0x278>)
   89c12:	681a      	ldr	r2, [r3, #0]
   89c14:	4b62      	ldr	r3, [pc, #392]	; (89da0 <Fine_DutyCorrection+0x290>)
   89c16:	4963      	ldr	r1, [pc, #396]	; (89da4 <Fine_DutyCorrection+0x294>)
   89c18:	4610      	mov	r0, r2
   89c1a:	4798      	blx	r3
   89c1c:	4603      	mov	r3, r0
   89c1e:	2b00      	cmp	r3, #0
   89c20:	d015      	beq.n	89c4e <Fine_DutyCorrection+0x13e>
   89c22:	4b5c      	ldr	r3, [pc, #368]	; (89d94 <Fine_DutyCorrection+0x284>)
   89c24:	681a      	ldr	r2, [r3, #0]
   89c26:	4b5e      	ldr	r3, [pc, #376]	; (89da0 <Fine_DutyCorrection+0x290>)
   89c28:	495f      	ldr	r1, [pc, #380]	; (89da8 <Fine_DutyCorrection+0x298>)
   89c2a:	4610      	mov	r0, r2
   89c2c:	4798      	blx	r3
   89c2e:	4603      	mov	r3, r0
   89c30:	2b00      	cmp	r3, #0
   89c32:	d00c      	beq.n	89c4e <Fine_DutyCorrection+0x13e>
		{
			avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   89c34:	4b4f      	ldr	r3, [pc, #316]	; (89d74 <Fine_DutyCorrection+0x264>)
   89c36:	781b      	ldrb	r3, [r3, #0]
   89c38:	b29a      	uxth	r2, r3
   89c3a:	4b57      	ldr	r3, [pc, #348]	; (89d98 <Fine_DutyCorrection+0x288>)
   89c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
   89c40:	b29b      	uxth	r3, r3
   89c42:	4413      	add	r3, r2
   89c44:	b29b      	uxth	r3, r3
   89c46:	b21a      	sxth	r2, r3
   89c48:	4b53      	ldr	r3, [pc, #332]	; (89d98 <Fine_DutyCorrection+0x288>)
   89c4a:	801a      	strh	r2, [r3, #0]
   89c4c:	e17c      	b.n	89f48 <Fine_DutyCorrection+0x438>
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= 37.5) )
   89c4e:	4b4d      	ldr	r3, [pc, #308]	; (89d84 <Fine_DutyCorrection+0x274>)
   89c50:	781b      	ldrb	r3, [r3, #0]
   89c52:	2b01      	cmp	r3, #1
   89c54:	d123      	bne.n	89c9e <Fine_DutyCorrection+0x18e>
   89c56:	4b4c      	ldr	r3, [pc, #304]	; (89d88 <Fine_DutyCorrection+0x278>)
   89c58:	681a      	ldr	r2, [r3, #0]
   89c5a:	4b51      	ldr	r3, [pc, #324]	; (89da0 <Fine_DutyCorrection+0x290>)
   89c5c:	494c      	ldr	r1, [pc, #304]	; (89d90 <Fine_DutyCorrection+0x280>)
   89c5e:	4610      	mov	r0, r2
   89c60:	4798      	blx	r3
   89c62:	4603      	mov	r3, r0
   89c64:	2b00      	cmp	r3, #0
   89c66:	d01a      	beq.n	89c9e <Fine_DutyCorrection+0x18e>
		{
			avg_duty = avg_duty + duty_count;
   89c68:	4b42      	ldr	r3, [pc, #264]	; (89d74 <Fine_DutyCorrection+0x264>)
   89c6a:	781b      	ldrb	r3, [r3, #0]
   89c6c:	b29a      	uxth	r2, r3
   89c6e:	4b4a      	ldr	r3, [pc, #296]	; (89d98 <Fine_DutyCorrection+0x288>)
   89c70:	f9b3 3000 	ldrsh.w	r3, [r3]
   89c74:	b29b      	uxth	r3, r3
   89c76:	4413      	add	r3, r2
   89c78:	b29b      	uxth	r3, r3
   89c7a:	b21a      	sxth	r2, r3
   89c7c:	4b46      	ldr	r3, [pc, #280]	; (89d98 <Fine_DutyCorrection+0x288>)
   89c7e:	801a      	strh	r2, [r3, #0]
			
			if (avg_duty > 2300)  //Sunil limiting to 2300
   89c80:	4b45      	ldr	r3, [pc, #276]	; (89d98 <Fine_DutyCorrection+0x288>)
   89c82:	f9b3 3000 	ldrsh.w	r3, [r3]
   89c86:	f640 02fc 	movw	r2, #2300	; 0x8fc
   89c8a:	4293      	cmp	r3, r2
   89c8c:	f340 815c 	ble.w	89f48 <Fine_DutyCorrection+0x438>
			{
				avg_duty = 2300;
   89c90:	4b41      	ldr	r3, [pc, #260]	; (89d98 <Fine_DutyCorrection+0x288>)
   89c92:	f640 02fc 	movw	r2, #2300	; 0x8fc
   89c96:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   89c98:	4b44      	ldr	r3, [pc, #272]	; (89dac <Fine_DutyCorrection+0x29c>)
   89c9a:	4798      	blx	r3
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= 37.5) )
		{
			avg_duty = avg_duty + duty_count;
			
			if (avg_duty > 2300)  //Sunil limiting to 2300
   89c9c:	e154      	b.n	89f48 <Fine_DutyCorrection+0x438>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   89c9e:	4b39      	ldr	r3, [pc, #228]	; (89d84 <Fine_DutyCorrection+0x274>)
   89ca0:	781b      	ldrb	r3, [r3, #0]
   89ca2:	2b02      	cmp	r3, #2
   89ca4:	f040 8150 	bne.w	89f48 <Fine_DutyCorrection+0x438>
				avg_duty = avg_duty;
   89ca8:	4b3b      	ldr	r3, [pc, #236]	; (89d98 <Fine_DutyCorrection+0x288>)
   89caa:	f9b3 2000 	ldrsh.w	r2, [r3]
   89cae:	4b3a      	ldr	r3, [pc, #232]	; (89d98 <Fine_DutyCorrection+0x288>)
   89cb0:	801a      	strh	r2, [r3, #0]
		}
	
	}
	
	
}
   89cb2:	e149      	b.n	89f48 <Fine_DutyCorrection+0x438>
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
				avg_duty = avg_duty;
	}
	
	
	else if (SYSTEM_FLOW == 300)                                        // Gopal: if the flow rate is set to 300 temperature
   89cb4:	4b32      	ldr	r3, [pc, #200]	; (89d80 <Fine_DutyCorrection+0x270>)
   89cb6:	681b      	ldr	r3, [r3, #0]
   89cb8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   89cbc:	f040 8144 	bne.w	89f48 <Fine_DutyCorrection+0x438>
	{
//		if ((TS2_Direction == UP ) && (Tmp2Val >= 39) && (Tmp3Val >= Prescribed_T3))     // Gopal: added TS3 check as to reduce duty if ts3 goes above 37.5
		if (((TS2_Direction == UP)  && (Tmp2Val >= 41)) && (Tmp3Val >= (Prescribed_T3 + 0.5))) // Gopal: added TS3 check as to reduce duty if ts3 goes above 37.5 29072017
   89cc0:	4b30      	ldr	r3, [pc, #192]	; (89d84 <Fine_DutyCorrection+0x274>)
   89cc2:	781b      	ldrb	r3, [r3, #0]
   89cc4:	2b00      	cmp	r3, #0
   89cc6:	d17d      	bne.n	89dc4 <Fine_DutyCorrection+0x2b4>
   89cc8:	4b2f      	ldr	r3, [pc, #188]	; (89d88 <Fine_DutyCorrection+0x278>)
   89cca:	681a      	ldr	r2, [r3, #0]
   89ccc:	4b2f      	ldr	r3, [pc, #188]	; (89d8c <Fine_DutyCorrection+0x27c>)
   89cce:	4938      	ldr	r1, [pc, #224]	; (89db0 <Fine_DutyCorrection+0x2a0>)
   89cd0:	4610      	mov	r0, r2
   89cd2:	4798      	blx	r3
   89cd4:	4603      	mov	r3, r0
   89cd6:	2b00      	cmp	r3, #0
   89cd8:	d074      	beq.n	89dc4 <Fine_DutyCorrection+0x2b4>
   89cda:	4b2e      	ldr	r3, [pc, #184]	; (89d94 <Fine_DutyCorrection+0x284>)
   89cdc:	681a      	ldr	r2, [r3, #0]
   89cde:	4b23      	ldr	r3, [pc, #140]	; (89d6c <Fine_DutyCorrection+0x25c>)
   89ce0:	4610      	mov	r0, r2
   89ce2:	4798      	blx	r3
   89ce4:	4605      	mov	r5, r0
   89ce6:	460e      	mov	r6, r1
   89ce8:	4b32      	ldr	r3, [pc, #200]	; (89db4 <Fine_DutyCorrection+0x2a4>)
   89cea:	681a      	ldr	r2, [r3, #0]
   89cec:	4b1f      	ldr	r3, [pc, #124]	; (89d6c <Fine_DutyCorrection+0x25c>)
   89cee:	4610      	mov	r0, r2
   89cf0:	4798      	blx	r3
   89cf2:	4c31      	ldr	r4, [pc, #196]	; (89db8 <Fine_DutyCorrection+0x2a8>)
   89cf4:	f04f 0200 	mov.w	r2, #0
   89cf8:	4b30      	ldr	r3, [pc, #192]	; (89dbc <Fine_DutyCorrection+0x2ac>)
   89cfa:	47a0      	blx	r4
   89cfc:	4603      	mov	r3, r0
   89cfe:	460c      	mov	r4, r1
   89d00:	461a      	mov	r2, r3
   89d02:	4623      	mov	r3, r4
   89d04:	4c1d      	ldr	r4, [pc, #116]	; (89d7c <Fine_DutyCorrection+0x26c>)
   89d06:	4628      	mov	r0, r5
   89d08:	4631      	mov	r1, r6
   89d0a:	47a0      	blx	r4
   89d0c:	4603      	mov	r3, r0
   89d0e:	2b00      	cmp	r3, #0
   89d10:	d058      	beq.n	89dc4 <Fine_DutyCorrection+0x2b4>
//		if ((TS2_Direction == UP ) && (Tmp2Val >= 40))     
		{                                //Gopal: earlier 40 28072017
			avg_duty = avg_duty - duty_count;
   89d12:	4b21      	ldr	r3, [pc, #132]	; (89d98 <Fine_DutyCorrection+0x288>)
   89d14:	f9b3 3000 	ldrsh.w	r3, [r3]
   89d18:	b29a      	uxth	r2, r3
   89d1a:	4b16      	ldr	r3, [pc, #88]	; (89d74 <Fine_DutyCorrection+0x264>)
   89d1c:	781b      	ldrb	r3, [r3, #0]
   89d1e:	b29b      	uxth	r3, r3
   89d20:	1ad3      	subs	r3, r2, r3
   89d22:	b29b      	uxth	r3, r3
   89d24:	b21a      	sxth	r2, r3
   89d26:	4b1c      	ldr	r3, [pc, #112]	; (89d98 <Fine_DutyCorrection+0x288>)
   89d28:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   89d2a:	4b1b      	ldr	r3, [pc, #108]	; (89d98 <Fine_DutyCorrection+0x288>)
   89d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
   89d30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   89d34:	f300 8108 	bgt.w	89f48 <Fine_DutyCorrection+0x438>
   89d38:	4b16      	ldr	r3, [pc, #88]	; (89d94 <Fine_DutyCorrection+0x284>)
   89d3a:	681a      	ldr	r2, [r3, #0]
   89d3c:	4b1d      	ldr	r3, [pc, #116]	; (89db4 <Fine_DutyCorrection+0x2a4>)
   89d3e:	6819      	ldr	r1, [r3, #0]
   89d40:	4b1f      	ldr	r3, [pc, #124]	; (89dc0 <Fine_DutyCorrection+0x2b0>)
   89d42:	4610      	mov	r0, r2
   89d44:	4798      	blx	r3
   89d46:	4603      	mov	r3, r0
   89d48:	2b00      	cmp	r3, #0
   89d4a:	d100      	bne.n	89d4e <Fine_DutyCorrection+0x23e>
   89d4c:	e0fc      	b.n	89f48 <Fine_DutyCorrection+0x438>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
   89d4e:	4b12      	ldr	r3, [pc, #72]	; (89d98 <Fine_DutyCorrection+0x288>)
   89d50:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   89d54:	801a      	strh	r2, [r3, #0]
		if (((TS2_Direction == UP)  && (Tmp2Val >= 41)) && (Tmp3Val >= (Prescribed_T3 + 0.5))) // Gopal: added TS3 check as to reduce duty if ts3 goes above 37.5 29072017
//		if ((TS2_Direction == UP ) && (Tmp2Val >= 40))     
		{                                //Gopal: earlier 40 28072017
			avg_duty = avg_duty - duty_count;
			
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   89d56:	e0f7      	b.n	89f48 <Fine_DutyCorrection+0x438>
   89d58:	eb851eb8 	.word	0xeb851eb8
   89d5c:	3f9eb851 	.word	0x3f9eb851
   89d60:	33333333 	.word	0x33333333
   89d64:	3fd33333 	.word	0x3fd33333
   89d68:	2007216c 	.word	0x2007216c
   89d6c:	000a34ed 	.word	0x000a34ed
   89d70:	000a3a8d 	.word	0x000a3a8d
   89d74:	20072170 	.word	0x20072170
   89d78:	000a3ab5 	.word	0x000a3ab5
   89d7c:	000a3aa1 	.word	0x000a3aa1
   89d80:	20070484 	.word	0x20070484
   89d84:	20072d9a 	.word	0x20072d9a
   89d88:	20072150 	.word	0x20072150
   89d8c:	000a4179 	.word	0x000a4179
   89d90:	42160000 	.word	0x42160000
   89d94:	20072154 	.word	0x20072154
   89d98:	2007213e 	.word	0x2007213e
   89d9c:	420c0000 	.word	0x420c0000
   89da0:	000a4165 	.word	0x000a4165
   89da4:	421a0000 	.word	0x421a0000
   89da8:	42180000 	.word	0x42180000
   89dac:	00097999 	.word	0x00097999
   89db0:	42240000 	.word	0x42240000
   89db4:	20070480 	.word	0x20070480
   89db8:	000a3231 	.word	0x000a3231
   89dbc:	3fe00000 	.word	0x3fe00000
   89dc0:	000a4151 	.word	0x000a4151
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= 38) && (Tmp2Val <= 41)) && (Tmp3Val <= Prescribed_T3) )  // Gopal added TS3 check as to increase duty if ts3 goes below 38
   89dc4:	4b61      	ldr	r3, [pc, #388]	; (89f4c <Fine_DutyCorrection+0x43c>)
   89dc6:	781b      	ldrb	r3, [r3, #0]
   89dc8:	2b00      	cmp	r3, #0
   89dca:	d132      	bne.n	89e32 <Fine_DutyCorrection+0x322>
   89dcc:	4b60      	ldr	r3, [pc, #384]	; (89f50 <Fine_DutyCorrection+0x440>)
   89dce:	681a      	ldr	r2, [r3, #0]
   89dd0:	4b60      	ldr	r3, [pc, #384]	; (89f54 <Fine_DutyCorrection+0x444>)
   89dd2:	4961      	ldr	r1, [pc, #388]	; (89f58 <Fine_DutyCorrection+0x448>)
   89dd4:	4610      	mov	r0, r2
   89dd6:	4798      	blx	r3
   89dd8:	4603      	mov	r3, r0
   89dda:	2b00      	cmp	r3, #0
   89ddc:	d029      	beq.n	89e32 <Fine_DutyCorrection+0x322>
   89dde:	4b5c      	ldr	r3, [pc, #368]	; (89f50 <Fine_DutyCorrection+0x440>)
   89de0:	681a      	ldr	r2, [r3, #0]
   89de2:	4b5e      	ldr	r3, [pc, #376]	; (89f5c <Fine_DutyCorrection+0x44c>)
   89de4:	495e      	ldr	r1, [pc, #376]	; (89f60 <Fine_DutyCorrection+0x450>)
   89de6:	4610      	mov	r0, r2
   89de8:	4798      	blx	r3
   89dea:	4603      	mov	r3, r0
   89dec:	2b00      	cmp	r3, #0
   89dee:	d020      	beq.n	89e32 <Fine_DutyCorrection+0x322>
   89df0:	4b5c      	ldr	r3, [pc, #368]	; (89f64 <Fine_DutyCorrection+0x454>)
   89df2:	681a      	ldr	r2, [r3, #0]
   89df4:	4b5c      	ldr	r3, [pc, #368]	; (89f68 <Fine_DutyCorrection+0x458>)
   89df6:	6819      	ldr	r1, [r3, #0]
   89df8:	4b58      	ldr	r3, [pc, #352]	; (89f5c <Fine_DutyCorrection+0x44c>)
   89dfa:	4610      	mov	r0, r2
   89dfc:	4798      	blx	r3
   89dfe:	4603      	mov	r3, r0
   89e00:	2b00      	cmp	r3, #0
   89e02:	d016      	beq.n	89e32 <Fine_DutyCorrection+0x322>
		{                                         // 37                   40                  // CHANGED TO 37 FROM 38 ON 24072017 AS TS1 IS GETTING ALMOST PAR WITH TS3
			//if ((Tmp1Val <=36) && (Tmp2Val <= 39))    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			if ((Tmp1Val <=36) )    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   89e04:	4b59      	ldr	r3, [pc, #356]	; (89f6c <Fine_DutyCorrection+0x45c>)
   89e06:	681a      	ldr	r2, [r3, #0]
   89e08:	4b54      	ldr	r3, [pc, #336]	; (89f5c <Fine_DutyCorrection+0x44c>)
   89e0a:	4959      	ldr	r1, [pc, #356]	; (89f70 <Fine_DutyCorrection+0x460>)
   89e0c:	4610      	mov	r0, r2
   89e0e:	4798      	blx	r3
   89e10:	4603      	mov	r3, r0
   89e12:	2b00      	cmp	r3, #0
   89e14:	f000 8098 	beq.w	89f48 <Fine_DutyCorrection+0x438>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   89e18:	4b56      	ldr	r3, [pc, #344]	; (89f74 <Fine_DutyCorrection+0x464>)
   89e1a:	781b      	ldrb	r3, [r3, #0]
   89e1c:	b29a      	uxth	r2, r3
   89e1e:	4b56      	ldr	r3, [pc, #344]	; (89f78 <Fine_DutyCorrection+0x468>)
   89e20:	f9b3 3000 	ldrsh.w	r3, [r3]
   89e24:	b29b      	uxth	r3, r3
   89e26:	4413      	add	r3, r2
   89e28:	b29b      	uxth	r3, r3
   89e2a:	b21a      	sxth	r2, r3
   89e2c:	4b52      	ldr	r3, [pc, #328]	; (89f78 <Fine_DutyCorrection+0x468>)
   89e2e:	801a      	strh	r2, [r3, #0]
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= 38) && (Tmp2Val <= 41)) && (Tmp3Val <= Prescribed_T3) )  // Gopal added TS3 check as to increase duty if ts3 goes below 38
		{                                         // 37                   40                  // CHANGED TO 37 FROM 38 ON 24072017 AS TS1 IS GETTING ALMOST PAR WITH TS3
			//if ((Tmp1Val <=36) && (Tmp2Val <= 39))    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			if ((Tmp1Val <=36) )    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   89e30:	e08a      	b.n	89f48 <Fine_DutyCorrection+0x438>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= 41) )  // 39.5
   89e32:	4b46      	ldr	r3, [pc, #280]	; (89f4c <Fine_DutyCorrection+0x43c>)
   89e34:	781b      	ldrb	r3, [r3, #0]
   89e36:	2b01      	cmp	r3, #1
   89e38:	d135      	bne.n	89ea6 <Fine_DutyCorrection+0x396>
   89e3a:	4b45      	ldr	r3, [pc, #276]	; (89f50 <Fine_DutyCorrection+0x440>)
   89e3c:	681a      	ldr	r2, [r3, #0]
   89e3e:	4b47      	ldr	r3, [pc, #284]	; (89f5c <Fine_DutyCorrection+0x44c>)
   89e40:	4947      	ldr	r1, [pc, #284]	; (89f60 <Fine_DutyCorrection+0x450>)
   89e42:	4610      	mov	r0, r2
   89e44:	4798      	blx	r3
   89e46:	4603      	mov	r3, r0
   89e48:	2b00      	cmp	r3, #0
   89e4a:	d02c      	beq.n	89ea6 <Fine_DutyCorrection+0x396>
		{
//			if ((Tmp1Val <=36) && (Tmp2Val <= 39) && (Tmp3Val <= 37.5)) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			if ((Tmp1Val <=36)  && (Tmp3Val <= Prescribed_T3)) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   89e4c:	4b47      	ldr	r3, [pc, #284]	; (89f6c <Fine_DutyCorrection+0x45c>)
   89e4e:	681a      	ldr	r2, [r3, #0]
   89e50:	4b42      	ldr	r3, [pc, #264]	; (89f5c <Fine_DutyCorrection+0x44c>)
   89e52:	4947      	ldr	r1, [pc, #284]	; (89f70 <Fine_DutyCorrection+0x460>)
   89e54:	4610      	mov	r0, r2
   89e56:	4798      	blx	r3
   89e58:	4603      	mov	r3, r0
   89e5a:	2b00      	cmp	r3, #0
   89e5c:	d015      	beq.n	89e8a <Fine_DutyCorrection+0x37a>
   89e5e:	4b41      	ldr	r3, [pc, #260]	; (89f64 <Fine_DutyCorrection+0x454>)
   89e60:	681a      	ldr	r2, [r3, #0]
   89e62:	4b41      	ldr	r3, [pc, #260]	; (89f68 <Fine_DutyCorrection+0x458>)
   89e64:	6819      	ldr	r1, [r3, #0]
   89e66:	4b3d      	ldr	r3, [pc, #244]	; (89f5c <Fine_DutyCorrection+0x44c>)
   89e68:	4610      	mov	r0, r2
   89e6a:	4798      	blx	r3
   89e6c:	4603      	mov	r3, r0
   89e6e:	2b00      	cmp	r3, #0
   89e70:	d00b      	beq.n	89e8a <Fine_DutyCorrection+0x37a>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   89e72:	4b40      	ldr	r3, [pc, #256]	; (89f74 <Fine_DutyCorrection+0x464>)
   89e74:	781b      	ldrb	r3, [r3, #0]
   89e76:	b29a      	uxth	r2, r3
   89e78:	4b3f      	ldr	r3, [pc, #252]	; (89f78 <Fine_DutyCorrection+0x468>)
   89e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
   89e7e:	b29b      	uxth	r3, r3
   89e80:	4413      	add	r3, r2
   89e82:	b29b      	uxth	r3, r3
   89e84:	b21a      	sxth	r2, r3
   89e86:	4b3c      	ldr	r3, [pc, #240]	; (89f78 <Fine_DutyCorrection+0x468>)
   89e88:	801a      	strh	r2, [r3, #0]
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   89e8a:	4b3b      	ldr	r3, [pc, #236]	; (89f78 <Fine_DutyCorrection+0x468>)
   89e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
   89e90:	f640 12c4 	movw	r2, #2500	; 0x9c4
   89e94:	4293      	cmp	r3, r2
   89e96:	dd57      	ble.n	89f48 <Fine_DutyCorrection+0x438>
			{
				avg_duty = 2500;
   89e98:	4b37      	ldr	r3, [pc, #220]	; (89f78 <Fine_DutyCorrection+0x468>)
   89e9a:	f640 12c4 	movw	r2, #2500	; 0x9c4
   89e9e:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   89ea0:	4b36      	ldr	r3, [pc, #216]	; (89f7c <Fine_DutyCorrection+0x46c>)
   89ea2:	4798      	blx	r3
			if ((Tmp1Val <=36)  && (Tmp3Val <= Prescribed_T3)) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   89ea4:	e050      	b.n	89f48 <Fine_DutyCorrection+0x438>
				avg_duty = 2500;
				sv_cntrl_poweroffheater();
				//			HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   89ea6:	4b29      	ldr	r3, [pc, #164]	; (89f4c <Fine_DutyCorrection+0x43c>)
   89ea8:	781b      	ldrb	r3, [r3, #0]
   89eaa:	2b02      	cmp	r3, #2
   89eac:	d14c      	bne.n	89f48 <Fine_DutyCorrection+0x438>
		{
			if (Tmp3Val >= (Prescribed_T3 +0.5))
   89eae:	4b2d      	ldr	r3, [pc, #180]	; (89f64 <Fine_DutyCorrection+0x454>)
   89eb0:	681a      	ldr	r2, [r3, #0]
   89eb2:	4b33      	ldr	r3, [pc, #204]	; (89f80 <Fine_DutyCorrection+0x470>)
   89eb4:	4610      	mov	r0, r2
   89eb6:	4798      	blx	r3
   89eb8:	4605      	mov	r5, r0
   89eba:	460e      	mov	r6, r1
   89ebc:	4b2a      	ldr	r3, [pc, #168]	; (89f68 <Fine_DutyCorrection+0x458>)
   89ebe:	681a      	ldr	r2, [r3, #0]
   89ec0:	4b2f      	ldr	r3, [pc, #188]	; (89f80 <Fine_DutyCorrection+0x470>)
   89ec2:	4610      	mov	r0, r2
   89ec4:	4798      	blx	r3
   89ec6:	4c2f      	ldr	r4, [pc, #188]	; (89f84 <Fine_DutyCorrection+0x474>)
   89ec8:	f04f 0200 	mov.w	r2, #0
   89ecc:	4b2e      	ldr	r3, [pc, #184]	; (89f88 <Fine_DutyCorrection+0x478>)
   89ece:	47a0      	blx	r4
   89ed0:	4603      	mov	r3, r0
   89ed2:	460c      	mov	r4, r1
   89ed4:	461a      	mov	r2, r3
   89ed6:	4623      	mov	r3, r4
   89ed8:	4c2c      	ldr	r4, [pc, #176]	; (89f8c <Fine_DutyCorrection+0x47c>)
   89eda:	4628      	mov	r0, r5
   89edc:	4631      	mov	r1, r6
   89ede:	47a0      	blx	r4
   89ee0:	4603      	mov	r3, r0
   89ee2:	2b00      	cmp	r3, #0
   89ee4:	d009      	beq.n	89efa <Fine_DutyCorrection+0x3ea>
			{
				avg_duty = avg_duty - 2;
   89ee6:	4b24      	ldr	r3, [pc, #144]	; (89f78 <Fine_DutyCorrection+0x468>)
   89ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
   89eec:	b29b      	uxth	r3, r3
   89eee:	3b02      	subs	r3, #2
   89ef0:	b29b      	uxth	r3, r3
   89ef2:	b21a      	sxth	r2, r3
   89ef4:	4b20      	ldr	r3, [pc, #128]	; (89f78 <Fine_DutyCorrection+0x468>)
   89ef6:	801a      	strh	r2, [r3, #0]
		}
	
	}
	
	
}
   89ef8:	e026      	b.n	89f48 <Fine_DutyCorrection+0x438>
		{
			if (Tmp3Val >= (Prescribed_T3 +0.5))
			{
				avg_duty = avg_duty - 2;
			}
			else if (Tmp3Val <= (Prescribed_T3 +0.5))
   89efa:	4b1a      	ldr	r3, [pc, #104]	; (89f64 <Fine_DutyCorrection+0x454>)
   89efc:	681a      	ldr	r2, [r3, #0]
   89efe:	4b20      	ldr	r3, [pc, #128]	; (89f80 <Fine_DutyCorrection+0x470>)
   89f00:	4610      	mov	r0, r2
   89f02:	4798      	blx	r3
   89f04:	4605      	mov	r5, r0
   89f06:	460e      	mov	r6, r1
   89f08:	4b17      	ldr	r3, [pc, #92]	; (89f68 <Fine_DutyCorrection+0x458>)
   89f0a:	681a      	ldr	r2, [r3, #0]
   89f0c:	4b1c      	ldr	r3, [pc, #112]	; (89f80 <Fine_DutyCorrection+0x470>)
   89f0e:	4610      	mov	r0, r2
   89f10:	4798      	blx	r3
   89f12:	4c1c      	ldr	r4, [pc, #112]	; (89f84 <Fine_DutyCorrection+0x474>)
   89f14:	f04f 0200 	mov.w	r2, #0
   89f18:	4b1b      	ldr	r3, [pc, #108]	; (89f88 <Fine_DutyCorrection+0x478>)
   89f1a:	47a0      	blx	r4
   89f1c:	4603      	mov	r3, r0
   89f1e:	460c      	mov	r4, r1
   89f20:	461a      	mov	r2, r3
   89f22:	4623      	mov	r3, r4
   89f24:	4c1a      	ldr	r4, [pc, #104]	; (89f90 <Fine_DutyCorrection+0x480>)
   89f26:	4628      	mov	r0, r5
   89f28:	4631      	mov	r1, r6
   89f2a:	47a0      	blx	r4
   89f2c:	4603      	mov	r3, r0
   89f2e:	2b00      	cmp	r3, #0
   89f30:	d100      	bne.n	89f34 <Fine_DutyCorrection+0x424>
		}
	
	}
	
	
}
   89f32:	e009      	b.n	89f48 <Fine_DutyCorrection+0x438>
			{
				avg_duty = avg_duty - 2;
			}
			else if (Tmp3Val <= (Prescribed_T3 +0.5))
			{
				avg_duty = avg_duty + 2;
   89f34:	4b10      	ldr	r3, [pc, #64]	; (89f78 <Fine_DutyCorrection+0x468>)
   89f36:	f9b3 3000 	ldrsh.w	r3, [r3]
   89f3a:	b29b      	uxth	r3, r3
   89f3c:	3302      	adds	r3, #2
   89f3e:	b29b      	uxth	r3, r3
   89f40:	b21a      	sxth	r2, r3
   89f42:	4b0d      	ldr	r3, [pc, #52]	; (89f78 <Fine_DutyCorrection+0x468>)
   89f44:	801a      	strh	r2, [r3, #0]
		}
	
	}
	
	
}
   89f46:	e7ff      	b.n	89f48 <Fine_DutyCorrection+0x438>
   89f48:	bf00      	nop
   89f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89f4c:	20072d9a 	.word	0x20072d9a
   89f50:	20072150 	.word	0x20072150
   89f54:	000a4179 	.word	0x000a4179
   89f58:	42180000 	.word	0x42180000
   89f5c:	000a4165 	.word	0x000a4165
   89f60:	42240000 	.word	0x42240000
   89f64:	20072154 	.word	0x20072154
   89f68:	20070480 	.word	0x20070480
   89f6c:	2007214c 	.word	0x2007214c
   89f70:	42100000 	.word	0x42100000
   89f74:	20072170 	.word	0x20072170
   89f78:	2007213e 	.word	0x2007213e
   89f7c:	00097999 	.word	0x00097999
   89f80:	000a34ed 	.word	0x000a34ed
   89f84:	000a3231 	.word	0x000a3231
   89f88:	3fe00000 	.word	0x3fe00000
   89f8c:	000a3aa1 	.word	0x000a3aa1
   89f90:	000a3a8d 	.word	0x000a3a8d

00089f94 <DataDisplay>:

DataDisplay()
{
   89f94:	b580      	push	{r7, lr}
   89f96:	b082      	sub	sp, #8
   89f98:	af00      	add	r7, sp, #0
	//************************************** display
	cl_Datastreamtype cl_tdata;
	cl_tdata.word = 0;
   89f9a:	2300      	movs	r3, #0
   89f9c:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp1Val;
   89f9e:	4b23      	ldr	r3, [pc, #140]	; (8a02c <DataDisplay+0x98>)
   89fa0:	681a      	ldr	r2, [r3, #0]
   89fa2:	4b23      	ldr	r3, [pc, #140]	; (8a030 <DataDisplay+0x9c>)
   89fa4:	4610      	mov	r0, r2
   89fa6:	4798      	blx	r3
   89fa8:	4603      	mov	r3, r0
   89faa:	b29b      	uxth	r3, r3
   89fac:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 4;
   89fae:	2304      	movs	r3, #4
   89fb0:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   89fb2:	1d3b      	adds	r3, r7, #4
   89fb4:	2204      	movs	r2, #4
   89fb6:	4619      	mov	r1, r3
   89fb8:	2037      	movs	r0, #55	; 0x37
   89fba:	4b1e      	ldr	r3, [pc, #120]	; (8a034 <DataDisplay+0xa0>)
   89fbc:	4798      	blx	r3
	
	cl_tdata.word = 0;
   89fbe:	2300      	movs	r3, #0
   89fc0:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp2Val;
   89fc2:	4b1d      	ldr	r3, [pc, #116]	; (8a038 <DataDisplay+0xa4>)
   89fc4:	681a      	ldr	r2, [r3, #0]
   89fc6:	4b1a      	ldr	r3, [pc, #104]	; (8a030 <DataDisplay+0x9c>)
   89fc8:	4610      	mov	r0, r2
   89fca:	4798      	blx	r3
   89fcc:	4603      	mov	r3, r0
   89fce:	b29b      	uxth	r3, r3
   89fd0:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 5;
   89fd2:	2305      	movs	r3, #5
   89fd4:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   89fd6:	1d3b      	adds	r3, r7, #4
   89fd8:	2204      	movs	r2, #4
   89fda:	4619      	mov	r1, r3
   89fdc:	2037      	movs	r0, #55	; 0x37
   89fde:	4b15      	ldr	r3, [pc, #84]	; (8a034 <DataDisplay+0xa0>)
   89fe0:	4798      	blx	r3
	
	cl_tdata.word = 0;
   89fe2:	2300      	movs	r3, #0
   89fe4:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp3Val;
   89fe6:	4b15      	ldr	r3, [pc, #84]	; (8a03c <DataDisplay+0xa8>)
   89fe8:	681a      	ldr	r2, [r3, #0]
   89fea:	4b11      	ldr	r3, [pc, #68]	; (8a030 <DataDisplay+0x9c>)
   89fec:	4610      	mov	r0, r2
   89fee:	4798      	blx	r3
   89ff0:	4603      	mov	r3, r0
   89ff2:	b29b      	uxth	r3, r3
   89ff4:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 6;
   89ff6:	2306      	movs	r3, #6
   89ff8:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   89ffa:	1d3b      	adds	r3, r7, #4
   89ffc:	2204      	movs	r2, #4
   89ffe:	4619      	mov	r1, r3
   8a000:	2037      	movs	r0, #55	; 0x37
   8a002:	4b0c      	ldr	r3, [pc, #48]	; (8a034 <DataDisplay+0xa0>)
   8a004:	4798      	blx	r3
	
	cl_tdata.word = 0;
   8a006:	2300      	movs	r3, #0
   8a008:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	cl_tdata.Twobyte = avg_duty;
   8a00a:	4b0d      	ldr	r3, [pc, #52]	; (8a040 <DataDisplay+0xac>)
   8a00c:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a010:	b29b      	uxth	r3, r3
   8a012:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 7;
   8a014:	2307      	movs	r3, #7
   8a016:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8a018:	1d3b      	adds	r3, r7, #4
   8a01a:	2204      	movs	r2, #4
   8a01c:	4619      	mov	r1, r3
   8a01e:	2037      	movs	r0, #55	; 0x37
   8a020:	4b04      	ldr	r3, [pc, #16]	; (8a034 <DataDisplay+0xa0>)
   8a022:	4798      	blx	r3
// 	cl_tdata.Twobyte = TS2_slope * 100;
// 	cl_tdata.bytearray[2] = 15;
// 	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
	
//****************************************
}
   8a024:	bf00      	nop
   8a026:	3708      	adds	r7, #8
   8a028:	46bd      	mov	sp, r7
   8a02a:	bd80      	pop	{r7, pc}
   8a02c:	2007214c 	.word	0x2007214c
   8a030:	000a41ed 	.word	0x000a41ed
   8a034:	00099729 	.word	0x00099729
   8a038:	20072150 	.word	0x20072150
   8a03c:	20072154 	.word	0x20072154
   8a040:	2007213e 	.word	0x2007213e
   8a044:	00000000 	.word	0x00000000

0008a048 <Hot_Rinse>:


void Hot_Rinse()
{
   8a048:	b590      	push	{r4, r7, lr}
   8a04a:	b083      	sub	sp, #12
   8a04c:	af00      	add	r7, sp, #0
		int16_t sensordata;
		
		count_500ms ++;
   8a04e:	4b96      	ldr	r3, [pc, #600]	; (8a2a8 <Hot_Rinse+0x260>)
   8a050:	881b      	ldrh	r3, [r3, #0]
   8a052:	3301      	adds	r3, #1
   8a054:	b29a      	uxth	r2, r3
   8a056:	4b94      	ldr	r3, [pc, #592]	; (8a2a8 <Hot_Rinse+0x260>)
   8a058:	801a      	strh	r2, [r3, #0]
		if(HeaterState == CL_HEATER_STATE_OFF  )
   8a05a:	4b94      	ldr	r3, [pc, #592]	; (8a2ac <Hot_Rinse+0x264>)
   8a05c:	781b      	ldrb	r3, [r3, #0]
   8a05e:	2b04      	cmp	r3, #4
   8a060:	d102      	bne.n	8a068 <Hot_Rinse+0x20>
		{
			sv_cntrl_poweroffheater();
   8a062:	4b93      	ldr	r3, [pc, #588]	; (8a2b0 <Hot_Rinse+0x268>)
   8a064:	4798      	blx	r3
			return;
   8a066:	e111      	b.n	8a28c <Hot_Rinse+0x244>
		}
		if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
   8a068:	4b90      	ldr	r3, [pc, #576]	; (8a2ac <Hot_Rinse+0x264>)
   8a06a:	781b      	ldrb	r3, [r3, #0]
   8a06c:	2b00      	cmp	r3, #0
   8a06e:	f000 810c 	beq.w	8a28a <Hot_Rinse+0x242>
   8a072:	4b8e      	ldr	r3, [pc, #568]	; (8a2ac <Hot_Rinse+0x264>)
   8a074:	781b      	ldrb	r3, [r3, #0]
   8a076:	2b00      	cmp	r3, #0
   8a078:	f000 8107 	beq.w	8a28a <Hot_Rinse+0x242>
		}
		//avg_duty is set to value 2240 for TS3 = 37.4 at global level
		
		
		// Sunil: We are calling power on heater every 500msec, HeaterState is set by Cl_RinseController. Should be turned ON only once?
		if(HeaterState == CL_HEATER_STATE_ON)
   8a07c:	4b8b      	ldr	r3, [pc, #556]	; (8a2ac <Hot_Rinse+0x264>)
   8a07e:	781b      	ldrb	r3, [r3, #0]
   8a080:	2b01      	cmp	r3, #1
   8a082:	d107      	bne.n	8a094 <Hot_Rinse+0x4c>
		{
			sv_cntrl_poweronheater();
   8a084:	4b8b      	ldr	r3, [pc, #556]	; (8a2b4 <Hot_Rinse+0x26c>)
   8a086:	4798      	blx	r3
			sv_cntrl_incheater(avg_duty);
   8a088:	4b8b      	ldr	r3, [pc, #556]	; (8a2b8 <Hot_Rinse+0x270>)
   8a08a:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a08e:	4618      	mov	r0, r3
   8a090:	4b8a      	ldr	r3, [pc, #552]	; (8a2bc <Hot_Rinse+0x274>)
   8a092:	4798      	blx	r3
// 			Tmp1Val = res_temp_value/100;                                      // Temp1 value in XX.yy format
// 			Tmp1Val = Tmp1Val - 2.5 + 1.2;
// 		}
// 		
// 		if (!(count_500ms %40))
		Tmp2Val_prev = Tmp2Val;  //For calculating if TS2 stable, read once in every 2 sec
   8a094:	4b8a      	ldr	r3, [pc, #552]	; (8a2c0 <Hot_Rinse+0x278>)
   8a096:	681b      	ldr	r3, [r3, #0]
   8a098:	4a8a      	ldr	r2, [pc, #552]	; (8a2c4 <Hot_Rinse+0x27c>)
   8a09a:	6013      	str	r3, [r2, #0]
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);     // sensor data of T2
   8a09c:	1cbb      	adds	r3, r7, #2
   8a09e:	4619      	mov	r1, r3
   8a0a0:	2013      	movs	r0, #19
   8a0a2:	4b89      	ldr	r3, [pc, #548]	; (8a2c8 <Hot_Rinse+0x280>)
   8a0a4:	4798      	blx	r3
		{
			uint16_t cal_data  = (402 *100* sensordata)/(2*32768);			   // resistance of PT100
   8a0a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
   8a0aa:	461a      	mov	r2, r3
   8a0ac:	f649 5308 	movw	r3, #40200	; 0x9d08
   8a0b0:	fb03 f302 	mul.w	r3, r3, r2
   8a0b4:	2b00      	cmp	r3, #0
   8a0b6:	da02      	bge.n	8a0be <Hot_Rinse+0x76>
   8a0b8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8a0bc:	33ff      	adds	r3, #255	; 0xff
   8a0be:	141b      	asrs	r3, r3, #16
   8a0c0:	80fb      	strh	r3, [r7, #6]
			res_temp_lookuptable(cal_data);									   // temperature from look up table in 4 digits
   8a0c2:	88fb      	ldrh	r3, [r7, #6]
   8a0c4:	4618      	mov	r0, r3
   8a0c6:	4b81      	ldr	r3, [pc, #516]	; (8a2cc <Hot_Rinse+0x284>)
   8a0c8:	4798      	blx	r3
			Tmp2Val = res_temp_value/100;									   // Temp2 value in XX.yy format
   8a0ca:	4b81      	ldr	r3, [pc, #516]	; (8a2d0 <Hot_Rinse+0x288>)
   8a0cc:	681a      	ldr	r2, [r3, #0]
   8a0ce:	4b81      	ldr	r3, [pc, #516]	; (8a2d4 <Hot_Rinse+0x28c>)
   8a0d0:	4981      	ldr	r1, [pc, #516]	; (8a2d8 <Hot_Rinse+0x290>)
   8a0d2:	4610      	mov	r0, r2
   8a0d4:	4798      	blx	r3
   8a0d6:	4603      	mov	r3, r0
   8a0d8:	461a      	mov	r2, r3
   8a0da:	4b79      	ldr	r3, [pc, #484]	; (8a2c0 <Hot_Rinse+0x278>)
   8a0dc:	601a      	str	r2, [r3, #0]
			Tmp2Val = Tmp2Val - 2.5 + 1.2;                                     // sensor offset
   8a0de:	4b78      	ldr	r3, [pc, #480]	; (8a2c0 <Hot_Rinse+0x278>)
   8a0e0:	681a      	ldr	r2, [r3, #0]
   8a0e2:	4b7e      	ldr	r3, [pc, #504]	; (8a2dc <Hot_Rinse+0x294>)
   8a0e4:	4610      	mov	r0, r2
   8a0e6:	4798      	blx	r3
   8a0e8:	4c7d      	ldr	r4, [pc, #500]	; (8a2e0 <Hot_Rinse+0x298>)
   8a0ea:	f04f 0200 	mov.w	r2, #0
   8a0ee:	4b7d      	ldr	r3, [pc, #500]	; (8a2e4 <Hot_Rinse+0x29c>)
   8a0f0:	47a0      	blx	r4
   8a0f2:	4603      	mov	r3, r0
   8a0f4:	460c      	mov	r4, r1
   8a0f6:	4618      	mov	r0, r3
   8a0f8:	4621      	mov	r1, r4
   8a0fa:	4c7b      	ldr	r4, [pc, #492]	; (8a2e8 <Hot_Rinse+0x2a0>)
   8a0fc:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   8a100:	4b7a      	ldr	r3, [pc, #488]	; (8a2ec <Hot_Rinse+0x2a4>)
   8a102:	47a0      	blx	r4
   8a104:	4603      	mov	r3, r0
   8a106:	460c      	mov	r4, r1
   8a108:	4619      	mov	r1, r3
   8a10a:	4622      	mov	r2, r4
   8a10c:	4b78      	ldr	r3, [pc, #480]	; (8a2f0 <Hot_Rinse+0x2a8>)
   8a10e:	4608      	mov	r0, r1
   8a110:	4611      	mov	r1, r2
   8a112:	4798      	blx	r3
   8a114:	4602      	mov	r2, r0
   8a116:	4b6a      	ldr	r3, [pc, #424]	; (8a2c0 <Hot_Rinse+0x278>)
   8a118:	601a      	str	r2, [r3, #0]
		}
		
		if (!(count_500ms %20))
   8a11a:	4b63      	ldr	r3, [pc, #396]	; (8a2a8 <Hot_Rinse+0x260>)
   8a11c:	881a      	ldrh	r2, [r3, #0]
   8a11e:	4b75      	ldr	r3, [pc, #468]	; (8a2f4 <Hot_Rinse+0x2ac>)
   8a120:	fba3 1302 	umull	r1, r3, r3, r2
   8a124:	0919      	lsrs	r1, r3, #4
   8a126:	460b      	mov	r3, r1
   8a128:	009b      	lsls	r3, r3, #2
   8a12a:	440b      	add	r3, r1
   8a12c:	009b      	lsls	r3, r3, #2
   8a12e:	1ad3      	subs	r3, r2, r3
   8a130:	b29b      	uxth	r3, r3
   8a132:	2b00      	cmp	r3, #0
   8a134:	d103      	bne.n	8a13e <Hot_Rinse+0xf6>
		{
			Tmp3Val_prev = Tmp3Val;		//Sunil: Used for checking TS3 stability
   8a136:	4b70      	ldr	r3, [pc, #448]	; (8a2f8 <Hot_Rinse+0x2b0>)
   8a138:	681b      	ldr	r3, [r3, #0]
   8a13a:	4a70      	ldr	r2, [pc, #448]	; (8a2fc <Hot_Rinse+0x2b4>)
   8a13c:	6013      	str	r3, [r2, #0]
		}
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);                 // sensor data of T3
   8a13e:	1cbb      	adds	r3, r7, #2
   8a140:	4619      	mov	r1, r3
   8a142:	2014      	movs	r0, #20
   8a144:	4b60      	ldr	r3, [pc, #384]	; (8a2c8 <Hot_Rinse+0x280>)
   8a146:	4798      	blx	r3
		{
			uint16_t cal_data  = (402 *100* sensordata)/(2*32768);						// resistance of PT100
   8a148:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
   8a14c:	461a      	mov	r2, r3
   8a14e:	f649 5308 	movw	r3, #40200	; 0x9d08
   8a152:	fb03 f302 	mul.w	r3, r3, r2
   8a156:	2b00      	cmp	r3, #0
   8a158:	da02      	bge.n	8a160 <Hot_Rinse+0x118>
   8a15a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8a15e:	33ff      	adds	r3, #255	; 0xff
   8a160:	141b      	asrs	r3, r3, #16
   8a162:	80bb      	strh	r3, [r7, #4]
			res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
   8a164:	88bb      	ldrh	r3, [r7, #4]
   8a166:	4618      	mov	r0, r3
   8a168:	4b58      	ldr	r3, [pc, #352]	; (8a2cc <Hot_Rinse+0x284>)
   8a16a:	4798      	blx	r3
			Tmp3Val = res_temp_value/100;									// Temp3 value in XX.yy format
   8a16c:	4b58      	ldr	r3, [pc, #352]	; (8a2d0 <Hot_Rinse+0x288>)
   8a16e:	681a      	ldr	r2, [r3, #0]
   8a170:	4b58      	ldr	r3, [pc, #352]	; (8a2d4 <Hot_Rinse+0x28c>)
   8a172:	4959      	ldr	r1, [pc, #356]	; (8a2d8 <Hot_Rinse+0x290>)
   8a174:	4610      	mov	r0, r2
   8a176:	4798      	blx	r3
   8a178:	4603      	mov	r3, r0
   8a17a:	461a      	mov	r2, r3
   8a17c:	4b5e      	ldr	r3, [pc, #376]	; (8a2f8 <Hot_Rinse+0x2b0>)
   8a17e:	601a      	str	r2, [r3, #0]
			Tmp3Val = Tmp3Val - 3.1 + 1.4;										// sensor offset
   8a180:	4b5d      	ldr	r3, [pc, #372]	; (8a2f8 <Hot_Rinse+0x2b0>)
   8a182:	681a      	ldr	r2, [r3, #0]
   8a184:	4b55      	ldr	r3, [pc, #340]	; (8a2dc <Hot_Rinse+0x294>)
   8a186:	4610      	mov	r0, r2
   8a188:	4798      	blx	r3
   8a18a:	4c55      	ldr	r4, [pc, #340]	; (8a2e0 <Hot_Rinse+0x298>)
   8a18c:	a342      	add	r3, pc, #264	; (adr r3, 8a298 <Hot_Rinse+0x250>)
   8a18e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a192:	47a0      	blx	r4
   8a194:	4603      	mov	r3, r0
   8a196:	460c      	mov	r4, r1
   8a198:	4618      	mov	r0, r3
   8a19a:	4621      	mov	r1, r4
   8a19c:	4c52      	ldr	r4, [pc, #328]	; (8a2e8 <Hot_Rinse+0x2a0>)
   8a19e:	a340      	add	r3, pc, #256	; (adr r3, 8a2a0 <Hot_Rinse+0x258>)
   8a1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a1a4:	47a0      	blx	r4
   8a1a6:	4603      	mov	r3, r0
   8a1a8:	460c      	mov	r4, r1
   8a1aa:	4619      	mov	r1, r3
   8a1ac:	4622      	mov	r2, r4
   8a1ae:	4b50      	ldr	r3, [pc, #320]	; (8a2f0 <Hot_Rinse+0x2a8>)
   8a1b0:	4608      	mov	r0, r1
   8a1b2:	4611      	mov	r1, r2
   8a1b4:	4798      	blx	r3
   8a1b6:	4602      	mov	r2, r0
   8a1b8:	4b4f      	ldr	r3, [pc, #316]	; (8a2f8 <Hot_Rinse+0x2b0>)
   8a1ba:	601a      	str	r2, [r3, #0]
		}
		
		
		if (!(count_500ms %20))
   8a1bc:	4b3a      	ldr	r3, [pc, #232]	; (8a2a8 <Hot_Rinse+0x260>)
   8a1be:	881a      	ldrh	r2, [r3, #0]
   8a1c0:	4b4c      	ldr	r3, [pc, #304]	; (8a2f4 <Hot_Rinse+0x2ac>)
   8a1c2:	fba3 1302 	umull	r1, r3, r3, r2
   8a1c6:	0919      	lsrs	r1, r3, #4
   8a1c8:	460b      	mov	r3, r1
   8a1ca:	009b      	lsls	r3, r3, #2
   8a1cc:	440b      	add	r3, r1
   8a1ce:	009b      	lsls	r3, r3, #2
   8a1d0:	1ad3      	subs	r3, r2, r3
   8a1d2:	b29b      	uxth	r3, r3
   8a1d4:	2b00      	cmp	r3, #0
   8a1d6:	d159      	bne.n	8a28c <Hot_Rinse+0x244>
		{
			
		
		if ((Tmp2Val - 80) > 5 )     
   8a1d8:	4b39      	ldr	r3, [pc, #228]	; (8a2c0 <Hot_Rinse+0x278>)
   8a1da:	681a      	ldr	r2, [r3, #0]
   8a1dc:	4b48      	ldr	r3, [pc, #288]	; (8a300 <Hot_Rinse+0x2b8>)
   8a1de:	4949      	ldr	r1, [pc, #292]	; (8a304 <Hot_Rinse+0x2bc>)
   8a1e0:	4610      	mov	r0, r2
   8a1e2:	4798      	blx	r3
   8a1e4:	4603      	mov	r3, r0
   8a1e6:	461a      	mov	r2, r3
   8a1e8:	4b47      	ldr	r3, [pc, #284]	; (8a308 <Hot_Rinse+0x2c0>)
   8a1ea:	4948      	ldr	r1, [pc, #288]	; (8a30c <Hot_Rinse+0x2c4>)
   8a1ec:	4610      	mov	r0, r2
   8a1ee:	4798      	blx	r3
   8a1f0:	4603      	mov	r3, r0
   8a1f2:	2b00      	cmp	r3, #0
   8a1f4:	d009      	beq.n	8a20a <Hot_Rinse+0x1c2>
		{
			avg_duty = avg_duty - 40;
   8a1f6:	4b30      	ldr	r3, [pc, #192]	; (8a2b8 <Hot_Rinse+0x270>)
   8a1f8:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a1fc:	b29b      	uxth	r3, r3
   8a1fe:	3b28      	subs	r3, #40	; 0x28
   8a200:	b29b      	uxth	r3, r3
   8a202:	b21a      	sxth	r2, r3
   8a204:	4b2c      	ldr	r3, [pc, #176]	; (8a2b8 <Hot_Rinse+0x270>)
   8a206:	801a      	strh	r2, [r3, #0]
   8a208:	e038      	b.n	8a27c <Hot_Rinse+0x234>
			
		}
		else if ((80 - Tmp2Val) > 5 && (Tmp3Val <= 70))
   8a20a:	4b2d      	ldr	r3, [pc, #180]	; (8a2c0 <Hot_Rinse+0x278>)
   8a20c:	681a      	ldr	r2, [r3, #0]
   8a20e:	4b3c      	ldr	r3, [pc, #240]	; (8a300 <Hot_Rinse+0x2b8>)
   8a210:	4611      	mov	r1, r2
   8a212:	483c      	ldr	r0, [pc, #240]	; (8a304 <Hot_Rinse+0x2bc>)
   8a214:	4798      	blx	r3
   8a216:	4603      	mov	r3, r0
   8a218:	461a      	mov	r2, r3
   8a21a:	4b3b      	ldr	r3, [pc, #236]	; (8a308 <Hot_Rinse+0x2c0>)
   8a21c:	493b      	ldr	r1, [pc, #236]	; (8a30c <Hot_Rinse+0x2c4>)
   8a21e:	4610      	mov	r0, r2
   8a220:	4798      	blx	r3
   8a222:	4603      	mov	r3, r0
   8a224:	2b00      	cmp	r3, #0
   8a226:	d012      	beq.n	8a24e <Hot_Rinse+0x206>
   8a228:	4b33      	ldr	r3, [pc, #204]	; (8a2f8 <Hot_Rinse+0x2b0>)
   8a22a:	681a      	ldr	r2, [r3, #0]
   8a22c:	4b38      	ldr	r3, [pc, #224]	; (8a310 <Hot_Rinse+0x2c8>)
   8a22e:	4939      	ldr	r1, [pc, #228]	; (8a314 <Hot_Rinse+0x2cc>)
   8a230:	4610      	mov	r0, r2
   8a232:	4798      	blx	r3
   8a234:	4603      	mov	r3, r0
   8a236:	2b00      	cmp	r3, #0
   8a238:	d009      	beq.n	8a24e <Hot_Rinse+0x206>
		{
			avg_duty = avg_duty + 40;
   8a23a:	4b1f      	ldr	r3, [pc, #124]	; (8a2b8 <Hot_Rinse+0x270>)
   8a23c:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a240:	b29b      	uxth	r3, r3
   8a242:	3328      	adds	r3, #40	; 0x28
   8a244:	b29b      	uxth	r3, r3
   8a246:	b21a      	sxth	r2, r3
   8a248:	4b1b      	ldr	r3, [pc, #108]	; (8a2b8 <Hot_Rinse+0x270>)
   8a24a:	801a      	strh	r2, [r3, #0]
   8a24c:	e016      	b.n	8a27c <Hot_Rinse+0x234>
		}
		
		else if ((Tmp3Val <= 80) && (Tmp3Val >= 70))
   8a24e:	4b2a      	ldr	r3, [pc, #168]	; (8a2f8 <Hot_Rinse+0x2b0>)
   8a250:	681a      	ldr	r2, [r3, #0]
   8a252:	4b2f      	ldr	r3, [pc, #188]	; (8a310 <Hot_Rinse+0x2c8>)
   8a254:	492b      	ldr	r1, [pc, #172]	; (8a304 <Hot_Rinse+0x2bc>)
   8a256:	4610      	mov	r0, r2
   8a258:	4798      	blx	r3
   8a25a:	4603      	mov	r3, r0
   8a25c:	2b00      	cmp	r3, #0
   8a25e:	d00d      	beq.n	8a27c <Hot_Rinse+0x234>
   8a260:	4b25      	ldr	r3, [pc, #148]	; (8a2f8 <Hot_Rinse+0x2b0>)
   8a262:	681a      	ldr	r2, [r3, #0]
   8a264:	4b2c      	ldr	r3, [pc, #176]	; (8a318 <Hot_Rinse+0x2d0>)
   8a266:	492b      	ldr	r1, [pc, #172]	; (8a314 <Hot_Rinse+0x2cc>)
   8a268:	4610      	mov	r0, r2
   8a26a:	4798      	blx	r3
   8a26c:	4603      	mov	r3, r0
   8a26e:	2b00      	cmp	r3, #0
   8a270:	d004      	beq.n	8a27c <Hot_Rinse+0x234>
		{
			avg_duty = avg_duty;
   8a272:	4b11      	ldr	r3, [pc, #68]	; (8a2b8 <Hot_Rinse+0x270>)
   8a274:	f9b3 2000 	ldrsh.w	r2, [r3]
   8a278:	4b0f      	ldr	r3, [pc, #60]	; (8a2b8 <Hot_Rinse+0x270>)
   8a27a:	801a      	strh	r2, [r3, #0]
		}
		
	sv_cntrl_incheater(avg_duty);
   8a27c:	4b0e      	ldr	r3, [pc, #56]	; (8a2b8 <Hot_Rinse+0x270>)
   8a27e:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a282:	4618      	mov	r0, r3
   8a284:	4b0d      	ldr	r3, [pc, #52]	; (8a2bc <Hot_Rinse+0x274>)
   8a286:	4798      	blx	r3
   8a288:	e000      	b.n	8a28c <Hot_Rinse+0x244>
			sv_cntrl_poweroffheater();
			return;
		}
		if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
		{
			return;
   8a28a:	bf00      	nop
		
	sv_cntrl_incheater(avg_duty);
		
		}
	
}
   8a28c:	370c      	adds	r7, #12
   8a28e:	46bd      	mov	sp, r7
   8a290:	bd90      	pop	{r4, r7, pc}
   8a292:	bf00      	nop
   8a294:	f3af 8000 	nop.w
   8a298:	cccccccd 	.word	0xcccccccd
   8a29c:	4008cccc 	.word	0x4008cccc
   8a2a0:	66666666 	.word	0x66666666
   8a2a4:	3ff66666 	.word	0x3ff66666
   8a2a8:	20072158 	.word	0x20072158
   8a2ac:	2007213b 	.word	0x2007213b
   8a2b0:	00097999 	.word	0x00097999
   8a2b4:	00097985 	.word	0x00097985
   8a2b8:	2007213e 	.word	0x2007213e
   8a2bc:	00097a8d 	.word	0x00097a8d
   8a2c0:	20072150 	.word	0x20072150
   8a2c4:	20072164 	.word	0x20072164
   8a2c8:	0008d6b1 	.word	0x0008d6b1
   8a2cc:	0008e8e1 	.word	0x0008e8e1
   8a2d0:	20072630 	.word	0x20072630
   8a2d4:	000a3f7d 	.word	0x000a3f7d
   8a2d8:	42c80000 	.word	0x42c80000
   8a2dc:	000a34ed 	.word	0x000a34ed
   8a2e0:	000a322d 	.word	0x000a322d
   8a2e4:	40040000 	.word	0x40040000
   8a2e8:	000a3231 	.word	0x000a3231
   8a2ec:	3ff33333 	.word	0x3ff33333
   8a2f0:	000a3b59 	.word	0x000a3b59
   8a2f4:	cccccccd 	.word	0xcccccccd
   8a2f8:	20072154 	.word	0x20072154
   8a2fc:	20072d8c 	.word	0x20072d8c
   8a300:	000a3c01 	.word	0x000a3c01
   8a304:	42a00000 	.word	0x42a00000
   8a308:	000a418d 	.word	0x000a418d
   8a30c:	40a00000 	.word	0x40a00000
   8a310:	000a4165 	.word	0x000a4165
   8a314:	428c0000 	.word	0x428c0000
   8a318:	000a4179 	.word	0x000a4179

0008a31c <Cl_Init_Controller>:
   8a31c:	b580      	push	{r7, lr}
   8a31e:	b090      	sub	sp, #64	; 0x40
   8a320:	af00      	add	r7, sp, #0
   8a322:	4603      	mov	r3, r0
   8a324:	71fb      	strb	r3, [r7, #7]
   8a326:	2300      	movs	r3, #0
   8a328:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
   8a32c:	2300      	movs	r3, #0
   8a32e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
   8a332:	2300      	movs	r3, #0
   8a334:	63fb      	str	r3, [r7, #60]	; 0x3c
   8a336:	f107 0239 	add.w	r2, r7, #57	; 0x39
   8a33a:	79fb      	ldrb	r3, [r7, #7]
   8a33c:	4611      	mov	r1, r2
   8a33e:	4618      	mov	r0, r3
   8a340:	4b82      	ldr	r3, [pc, #520]	; (8a54c <Cl_Init_Controller+0x230>)
   8a342:	4798      	blx	r3
   8a344:	4b82      	ldr	r3, [pc, #520]	; (8a550 <Cl_Init_Controller+0x234>)
   8a346:	781b      	ldrb	r3, [r3, #0]
   8a348:	2b08      	cmp	r3, #8
   8a34a:	f200 80f8 	bhi.w	8a53e <Cl_Init_Controller+0x222>
   8a34e:	a201      	add	r2, pc, #4	; (adr r2, 8a354 <Cl_Init_Controller+0x38>)
   8a350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a354:	0008a379 	.word	0x0008a379
   8a358:	0008a487 	.word	0x0008a487
   8a35c:	0008a4b1 	.word	0x0008a4b1
   8a360:	0008a53f 	.word	0x0008a53f
   8a364:	0008a53f 	.word	0x0008a53f
   8a368:	0008a4d9 	.word	0x0008a4d9
   8a36c:	0008a53f 	.word	0x0008a53f
   8a370:	0008a53f 	.word	0x0008a53f
   8a374:	0008a509 	.word	0x0008a509
   8a378:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8a37c:	2b01      	cmp	r3, #1
   8a37e:	d000      	beq.n	8a382 <Cl_Init_Controller+0x66>
   8a380:	e080      	b.n	8a484 <Cl_Init_Controller+0x168>
   8a382:	4b73      	ldr	r3, [pc, #460]	; (8a550 <Cl_Init_Controller+0x234>)
   8a384:	2201      	movs	r2, #1
   8a386:	701a      	strb	r2, [r3, #0]
   8a388:	2302      	movs	r3, #2
   8a38a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
   8a38e:	231a      	movs	r3, #26
   8a390:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
   8a394:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8a398:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8a39c:	2201      	movs	r2, #1
   8a39e:	4618      	mov	r0, r3
   8a3a0:	4b6c      	ldr	r3, [pc, #432]	; (8a554 <Cl_Init_Controller+0x238>)
   8a3a2:	4798      	blx	r3
   8a3a4:	4603      	mov	r3, r0
   8a3a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
   8a3aa:	4b69      	ldr	r3, [pc, #420]	; (8a550 <Cl_Init_Controller+0x234>)
   8a3ac:	2205      	movs	r2, #5
   8a3ae:	701a      	strb	r2, [r3, #0]
   8a3b0:	2305      	movs	r3, #5
   8a3b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
   8a3b6:	231a      	movs	r3, #26
   8a3b8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
   8a3bc:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8a3c0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8a3c4:	2201      	movs	r2, #1
   8a3c6:	4618      	mov	r0, r3
   8a3c8:	4b62      	ldr	r3, [pc, #392]	; (8a554 <Cl_Init_Controller+0x238>)
   8a3ca:	4798      	blx	r3
   8a3cc:	4603      	mov	r3, r0
   8a3ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
   8a3d2:	e00d      	b.n	8a3f0 <Cl_Init_Controller+0xd4>
   8a3d4:	4a60      	ldr	r2, [pc, #384]	; (8a558 <Cl_Init_Controller+0x23c>)
   8a3d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a3d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8a3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a3de:	009b      	lsls	r3, r3, #2
   8a3e0:	f107 0140 	add.w	r1, r7, #64	; 0x40
   8a3e4:	440b      	add	r3, r1
   8a3e6:	f843 2c34 	str.w	r2, [r3, #-52]
   8a3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a3ec:	3301      	adds	r3, #1
   8a3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   8a3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a3f2:	2b09      	cmp	r3, #9
   8a3f4:	ddee      	ble.n	8a3d4 <Cl_Init_Controller+0xb8>
   8a3f6:	2300      	movs	r3, #0
   8a3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   8a3fa:	e00f      	b.n	8a41c <Cl_Init_Controller+0x100>
   8a3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a3fe:	009b      	lsls	r3, r3, #2
   8a400:	f107 0240 	add.w	r2, r7, #64	; 0x40
   8a404:	4413      	add	r3, r2
   8a406:	f853 2c34 	ldr.w	r2, [r3, #-52]
   8a40a:	4953      	ldr	r1, [pc, #332]	; (8a558 <Cl_Init_Controller+0x23c>)
   8a40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a40e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   8a412:	429a      	cmp	r2, r3
   8a414:	d106      	bne.n	8a424 <Cl_Init_Controller+0x108>
   8a416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a418:	3301      	adds	r3, #1
   8a41a:	63fb      	str	r3, [r7, #60]	; 0x3c
   8a41c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a41e:	2b09      	cmp	r3, #9
   8a420:	ddec      	ble.n	8a3fc <Cl_Init_Controller+0xe0>
   8a422:	e000      	b.n	8a426 <Cl_Init_Controller+0x10a>
   8a424:	bf00      	nop
   8a426:	4b4a      	ldr	r3, [pc, #296]	; (8a550 <Cl_Init_Controller+0x234>)
   8a428:	2207      	movs	r2, #7
   8a42a:	701a      	strb	r2, [r3, #0]
   8a42c:	2307      	movs	r3, #7
   8a42e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
   8a432:	231a      	movs	r3, #26
   8a434:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
   8a438:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8a43c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8a440:	2201      	movs	r2, #1
   8a442:	4618      	mov	r0, r3
   8a444:	4b43      	ldr	r3, [pc, #268]	; (8a554 <Cl_Init_Controller+0x238>)
   8a446:	4798      	blx	r3
   8a448:	4603      	mov	r3, r0
   8a44a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
   8a44e:	4b40      	ldr	r3, [pc, #256]	; (8a550 <Cl_Init_Controller+0x234>)
   8a450:	2208      	movs	r2, #8
   8a452:	701a      	strb	r2, [r3, #0]
   8a454:	2308      	movs	r3, #8
   8a456:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
   8a45a:	231b      	movs	r3, #27
   8a45c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
   8a460:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8a464:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8a468:	2200      	movs	r2, #0
   8a46a:	4618      	mov	r0, r3
   8a46c:	4b39      	ldr	r3, [pc, #228]	; (8a554 <Cl_Init_Controller+0x238>)
   8a46e:	4798      	blx	r3
   8a470:	4603      	mov	r3, r0
   8a472:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
   8a476:	2000      	movs	r0, #0
   8a478:	4b38      	ldr	r3, [pc, #224]	; (8a55c <Cl_Init_Controller+0x240>)
   8a47a:	4798      	blx	r3
   8a47c:	4603      	mov	r3, r0
   8a47e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
   8a482:	bf00      	nop
   8a484:	e05c      	b.n	8a540 <Cl_Init_Controller+0x224>
   8a486:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8a48a:	3b02      	subs	r3, #2
   8a48c:	2b04      	cmp	r3, #4
   8a48e:	d80d      	bhi.n	8a4ac <Cl_Init_Controller+0x190>
   8a490:	a201      	add	r2, pc, #4	; (adr r2, 8a498 <Cl_Init_Controller+0x17c>)
   8a492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a496:	bf00      	nop
   8a498:	0008a4ad 	.word	0x0008a4ad
   8a49c:	0008a4ad 	.word	0x0008a4ad
   8a4a0:	0008a4ad 	.word	0x0008a4ad
   8a4a4:	0008a4ad 	.word	0x0008a4ad
   8a4a8:	0008a4ad 	.word	0x0008a4ad
   8a4ac:	bf00      	nop
   8a4ae:	e047      	b.n	8a540 <Cl_Init_Controller+0x224>
   8a4b0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8a4b4:	3b02      	subs	r3, #2
   8a4b6:	2b04      	cmp	r3, #4
   8a4b8:	d80c      	bhi.n	8a4d4 <Cl_Init_Controller+0x1b8>
   8a4ba:	a201      	add	r2, pc, #4	; (adr r2, 8a4c0 <Cl_Init_Controller+0x1a4>)
   8a4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a4c0:	0008a4d5 	.word	0x0008a4d5
   8a4c4:	0008a4d5 	.word	0x0008a4d5
   8a4c8:	0008a4d5 	.word	0x0008a4d5
   8a4cc:	0008a4d5 	.word	0x0008a4d5
   8a4d0:	0008a4d5 	.word	0x0008a4d5
   8a4d4:	bf00      	nop
   8a4d6:	e033      	b.n	8a540 <Cl_Init_Controller+0x224>
   8a4d8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8a4dc:	3b02      	subs	r3, #2
   8a4de:	2b04      	cmp	r3, #4
   8a4e0:	d810      	bhi.n	8a504 <Cl_Init_Controller+0x1e8>
   8a4e2:	a201      	add	r2, pc, #4	; (adr r2, 8a4e8 <Cl_Init_Controller+0x1cc>)
   8a4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a4e8:	0008a505 	.word	0x0008a505
   8a4ec:	0008a505 	.word	0x0008a505
   8a4f0:	0008a4fd 	.word	0x0008a4fd
   8a4f4:	0008a505 	.word	0x0008a505
   8a4f8:	0008a505 	.word	0x0008a505
   8a4fc:	4b14      	ldr	r3, [pc, #80]	; (8a550 <Cl_Init_Controller+0x234>)
   8a4fe:	2208      	movs	r2, #8
   8a500:	701a      	strb	r2, [r3, #0]
   8a502:	e000      	b.n	8a506 <Cl_Init_Controller+0x1ea>
   8a504:	bf00      	nop
   8a506:	e01b      	b.n	8a540 <Cl_Init_Controller+0x224>
   8a508:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8a50c:	3b02      	subs	r3, #2
   8a50e:	2b04      	cmp	r3, #4
   8a510:	d813      	bhi.n	8a53a <Cl_Init_Controller+0x21e>
   8a512:	a201      	add	r2, pc, #4	; (adr r2, 8a518 <Cl_Init_Controller+0x1fc>)
   8a514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a518:	0008a53b 	.word	0x0008a53b
   8a51c:	0008a53b 	.word	0x0008a53b
   8a520:	0008a52d 	.word	0x0008a52d
   8a524:	0008a53b 	.word	0x0008a53b
   8a528:	0008a53b 	.word	0x0008a53b
   8a52c:	2043      	movs	r0, #67	; 0x43
   8a52e:	4b0c      	ldr	r3, [pc, #48]	; (8a560 <Cl_Init_Controller+0x244>)
   8a530:	4798      	blx	r3
   8a532:	4603      	mov	r3, r0
   8a534:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
   8a538:	e000      	b.n	8a53c <Cl_Init_Controller+0x220>
   8a53a:	bf00      	nop
   8a53c:	e000      	b.n	8a540 <Cl_Init_Controller+0x224>
   8a53e:	bf00      	nop
   8a540:	2300      	movs	r3, #0
   8a542:	4618      	mov	r0, r3
   8a544:	3740      	adds	r7, #64	; 0x40
   8a546:	46bd      	mov	sp, r7
   8a548:	bd80      	pop	{r7, pc}
   8a54a:	bf00      	nop
   8a54c:	0008a565 	.word	0x0008a565
   8a550:	20072171 	.word	0x20072171
   8a554:	00099729 	.word	0x00099729
   8a558:	20070488 	.word	0x20070488
   8a55c:	0008e401 	.word	0x0008e401
   8a560:	0008a611 	.word	0x0008a611

0008a564 <cl_init_translatemacevent>:
   8a564:	b480      	push	{r7}
   8a566:	b083      	sub	sp, #12
   8a568:	af00      	add	r7, sp, #0
   8a56a:	4603      	mov	r3, r0
   8a56c:	6039      	str	r1, [r7, #0]
   8a56e:	71fb      	strb	r3, [r7, #7]
   8a570:	79fb      	ldrb	r3, [r7, #7]
   8a572:	3b2a      	subs	r3, #42	; 0x2a
   8a574:	2b13      	cmp	r3, #19
   8a576:	d843      	bhi.n	8a600 <cl_init_translatemacevent+0x9c>
   8a578:	a201      	add	r2, pc, #4	; (adr r2, 8a580 <cl_init_translatemacevent+0x1c>)
   8a57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a57e:	bf00      	nop
   8a580:	0008a5d1 	.word	0x0008a5d1
   8a584:	0008a601 	.word	0x0008a601
   8a588:	0008a601 	.word	0x0008a601
   8a58c:	0008a601 	.word	0x0008a601
   8a590:	0008a601 	.word	0x0008a601
   8a594:	0008a601 	.word	0x0008a601
   8a598:	0008a601 	.word	0x0008a601
   8a59c:	0008a601 	.word	0x0008a601
   8a5a0:	0008a601 	.word	0x0008a601
   8a5a4:	0008a601 	.word	0x0008a601
   8a5a8:	0008a601 	.word	0x0008a601
   8a5ac:	0008a601 	.word	0x0008a601
   8a5b0:	0008a601 	.word	0x0008a601
   8a5b4:	0008a601 	.word	0x0008a601
   8a5b8:	0008a601 	.word	0x0008a601
   8a5bc:	0008a5d9 	.word	0x0008a5d9
   8a5c0:	0008a5e1 	.word	0x0008a5e1
   8a5c4:	0008a5e9 	.word	0x0008a5e9
   8a5c8:	0008a5f1 	.word	0x0008a5f1
   8a5cc:	0008a5f9 	.word	0x0008a5f9
   8a5d0:	683b      	ldr	r3, [r7, #0]
   8a5d2:	2201      	movs	r2, #1
   8a5d4:	701a      	strb	r2, [r3, #0]
   8a5d6:	e014      	b.n	8a602 <cl_init_translatemacevent+0x9e>
   8a5d8:	683b      	ldr	r3, [r7, #0]
   8a5da:	2202      	movs	r2, #2
   8a5dc:	701a      	strb	r2, [r3, #0]
   8a5de:	e010      	b.n	8a602 <cl_init_translatemacevent+0x9e>
   8a5e0:	683b      	ldr	r3, [r7, #0]
   8a5e2:	2203      	movs	r2, #3
   8a5e4:	701a      	strb	r2, [r3, #0]
   8a5e6:	e00c      	b.n	8a602 <cl_init_translatemacevent+0x9e>
   8a5e8:	683b      	ldr	r3, [r7, #0]
   8a5ea:	2204      	movs	r2, #4
   8a5ec:	701a      	strb	r2, [r3, #0]
   8a5ee:	e008      	b.n	8a602 <cl_init_translatemacevent+0x9e>
   8a5f0:	683b      	ldr	r3, [r7, #0]
   8a5f2:	2205      	movs	r2, #5
   8a5f4:	701a      	strb	r2, [r3, #0]
   8a5f6:	e004      	b.n	8a602 <cl_init_translatemacevent+0x9e>
   8a5f8:	683b      	ldr	r3, [r7, #0]
   8a5fa:	2206      	movs	r2, #6
   8a5fc:	701a      	strb	r2, [r3, #0]
   8a5fe:	e000      	b.n	8a602 <cl_init_translatemacevent+0x9e>
   8a600:	bf00      	nop
   8a602:	2300      	movs	r3, #0
   8a604:	4618      	mov	r0, r3
   8a606:	370c      	adds	r7, #12
   8a608:	46bd      	mov	sp, r7
   8a60a:	bc80      	pop	{r7}
   8a60c:	4770      	bx	lr
   8a60e:	bf00      	nop

0008a610 <Cl_mac_apprequesthandler>:
   8a610:	b480      	push	{r7}
   8a612:	b085      	sub	sp, #20
   8a614:	af00      	add	r7, sp, #0
   8a616:	4603      	mov	r3, r0
   8a618:	71fb      	strb	r3, [r7, #7]
   8a61a:	2300      	movs	r3, #0
   8a61c:	73fb      	strb	r3, [r7, #15]
   8a61e:	4b0d      	ldr	r3, [pc, #52]	; (8a654 <Cl_mac_apprequesthandler+0x44>)
   8a620:	781b      	ldrb	r3, [r3, #0]
   8a622:	2b0a      	cmp	r3, #10
   8a624:	d80f      	bhi.n	8a646 <Cl_mac_apprequesthandler+0x36>
   8a626:	4b0b      	ldr	r3, [pc, #44]	; (8a654 <Cl_mac_apprequesthandler+0x44>)
   8a628:	781b      	ldrb	r3, [r3, #0]
   8a62a:	461a      	mov	r2, r3
   8a62c:	4b09      	ldr	r3, [pc, #36]	; (8a654 <Cl_mac_apprequesthandler+0x44>)
   8a62e:	4413      	add	r3, r2
   8a630:	79fa      	ldrb	r2, [r7, #7]
   8a632:	709a      	strb	r2, [r3, #2]
   8a634:	4b07      	ldr	r3, [pc, #28]	; (8a654 <Cl_mac_apprequesthandler+0x44>)
   8a636:	2201      	movs	r2, #1
   8a638:	705a      	strb	r2, [r3, #1]
   8a63a:	4b06      	ldr	r3, [pc, #24]	; (8a654 <Cl_mac_apprequesthandler+0x44>)
   8a63c:	781b      	ldrb	r3, [r3, #0]
   8a63e:	3301      	adds	r3, #1
   8a640:	b2da      	uxtb	r2, r3
   8a642:	4b04      	ldr	r3, [pc, #16]	; (8a654 <Cl_mac_apprequesthandler+0x44>)
   8a644:	701a      	strb	r2, [r3, #0]
   8a646:	7bfb      	ldrb	r3, [r7, #15]
   8a648:	4618      	mov	r0, r3
   8a64a:	3714      	adds	r7, #20
   8a64c:	46bd      	mov	sp, r7
   8a64e:	bc80      	pop	{r7}
   8a650:	4770      	bx	lr
   8a652:	bf00      	nop
   8a654:	20072ec4 	.word	0x20072ec4

0008a658 <main>:
   8a658:	b580      	push	{r7, lr}
   8a65a:	b082      	sub	sp, #8
   8a65c:	af00      	add	r7, sp, #0
   8a65e:	2304      	movs	r3, #4
   8a660:	71fb      	strb	r3, [r7, #7]
   8a662:	2300      	movs	r3, #0
   8a664:	70fb      	strb	r3, [r7, #3]
   8a666:	2300      	movs	r3, #0
   8a668:	70bb      	strb	r3, [r7, #2]
   8a66a:	4b96      	ldr	r3, [pc, #600]	; (8a8c4 <main+0x26c>)
   8a66c:	4798      	blx	r3
   8a66e:	4b96      	ldr	r3, [pc, #600]	; (8a8c8 <main+0x270>)
   8a670:	4798      	blx	r3
   8a672:	4b96      	ldr	r3, [pc, #600]	; (8a8cc <main+0x274>)
   8a674:	4798      	blx	r3
   8a676:	200b      	movs	r0, #11
   8a678:	4b95      	ldr	r3, [pc, #596]	; (8a8d0 <main+0x278>)
   8a67a:	4798      	blx	r3
   8a67c:	2016      	movs	r0, #22
   8a67e:	4b94      	ldr	r3, [pc, #592]	; (8a8d0 <main+0x278>)
   8a680:	4798      	blx	r3
   8a682:	2001      	movs	r0, #1
   8a684:	4b93      	ldr	r3, [pc, #588]	; (8a8d4 <main+0x27c>)
   8a686:	4798      	blx	r3
   8a688:	2002      	movs	r0, #2
   8a68a:	4b92      	ldr	r3, [pc, #584]	; (8a8d4 <main+0x27c>)
   8a68c:	4798      	blx	r3
   8a68e:	2004      	movs	r0, #4
   8a690:	4b90      	ldr	r3, [pc, #576]	; (8a8d4 <main+0x27c>)
   8a692:	4798      	blx	r3
   8a694:	2005      	movs	r0, #5
   8a696:	4b8f      	ldr	r3, [pc, #572]	; (8a8d4 <main+0x27c>)
   8a698:	4798      	blx	r3
   8a69a:	2001      	movs	r0, #1
   8a69c:	4b8e      	ldr	r3, [pc, #568]	; (8a8d8 <main+0x280>)
   8a69e:	4798      	blx	r3
   8a6a0:	2002      	movs	r0, #2
   8a6a2:	4b8d      	ldr	r3, [pc, #564]	; (8a8d8 <main+0x280>)
   8a6a4:	4798      	blx	r3
   8a6a6:	2004      	movs	r0, #4
   8a6a8:	4b8b      	ldr	r3, [pc, #556]	; (8a8d8 <main+0x280>)
   8a6aa:	4798      	blx	r3
   8a6ac:	2005      	movs	r0, #5
   8a6ae:	4b8a      	ldr	r3, [pc, #552]	; (8a8d8 <main+0x280>)
   8a6b0:	4798      	blx	r3
   8a6b2:	4b8a      	ldr	r3, [pc, #552]	; (8a8dc <main+0x284>)
   8a6b4:	4798      	blx	r3
   8a6b6:	4603      	mov	r3, r0
   8a6b8:	71fb      	strb	r3, [r7, #7]
   8a6ba:	2301      	movs	r3, #1
   8a6bc:	80bb      	strh	r3, [r7, #4]
   8a6be:	e00a      	b.n	8a6d6 <main+0x7e>
   8a6c0:	88bb      	ldrh	r3, [r7, #4]
   8a6c2:	b2db      	uxtb	r3, r3
   8a6c4:	4618      	mov	r0, r3
   8a6c6:	4b86      	ldr	r3, [pc, #536]	; (8a8e0 <main+0x288>)
   8a6c8:	4798      	blx	r3
   8a6ca:	200a      	movs	r0, #10
   8a6cc:	4b85      	ldr	r3, [pc, #532]	; (8a8e4 <main+0x28c>)
   8a6ce:	4798      	blx	r3
   8a6d0:	88bb      	ldrh	r3, [r7, #4]
   8a6d2:	3301      	adds	r3, #1
   8a6d4:	80bb      	strh	r3, [r7, #4]
   8a6d6:	88bb      	ldrh	r3, [r7, #4]
   8a6d8:	2b14      	cmp	r3, #20
   8a6da:	d9f1      	bls.n	8a6c0 <main+0x68>
   8a6dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8a6e0:	201d      	movs	r0, #29
   8a6e2:	4b81      	ldr	r3, [pc, #516]	; (8a8e8 <main+0x290>)
   8a6e4:	4798      	blx	r3
   8a6e6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8a6ea:	200a      	movs	r0, #10
   8a6ec:	4b7f      	ldr	r3, [pc, #508]	; (8a8ec <main+0x294>)
   8a6ee:	4798      	blx	r3
   8a6f0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
   8a6f4:	201b      	movs	r0, #27
   8a6f6:	4b7c      	ldr	r3, [pc, #496]	; (8a8e8 <main+0x290>)
   8a6f8:	4798      	blx	r3
   8a6fa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8a6fe:	200e      	movs	r0, #14
   8a700:	4b7a      	ldr	r3, [pc, #488]	; (8a8ec <main+0x294>)
   8a702:	4798      	blx	r3
   8a704:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   8a708:	2002      	movs	r0, #2
   8a70a:	4b78      	ldr	r3, [pc, #480]	; (8a8ec <main+0x294>)
   8a70c:	4798      	blx	r3
   8a70e:	4b78      	ldr	r3, [pc, #480]	; (8a8f0 <main+0x298>)
   8a710:	4798      	blx	r3
   8a712:	4603      	mov	r3, r0
   8a714:	71fb      	strb	r3, [r7, #7]
   8a716:	79fb      	ldrb	r3, [r7, #7]
   8a718:	2b00      	cmp	r3, #0
   8a71a:	d001      	beq.n	8a720 <main+0xc8>
   8a71c:	4b75      	ldr	r3, [pc, #468]	; (8a8f4 <main+0x29c>)
   8a71e:	4798      	blx	r3
   8a720:	4b75      	ldr	r3, [pc, #468]	; (8a8f8 <main+0x2a0>)
   8a722:	4798      	blx	r3
   8a724:	4603      	mov	r3, r0
   8a726:	71fb      	strb	r3, [r7, #7]
   8a728:	79fb      	ldrb	r3, [r7, #7]
   8a72a:	2b00      	cmp	r3, #0
   8a72c:	d001      	beq.n	8a732 <main+0xda>
   8a72e:	4b71      	ldr	r3, [pc, #452]	; (8a8f4 <main+0x29c>)
   8a730:	4798      	blx	r3
   8a732:	4b72      	ldr	r3, [pc, #456]	; (8a8fc <main+0x2a4>)
   8a734:	2204      	movs	r2, #4
   8a736:	701a      	strb	r2, [r3, #0]
   8a738:	2304      	movs	r3, #4
   8a73a:	71fb      	strb	r3, [r7, #7]
   8a73c:	4b70      	ldr	r3, [pc, #448]	; (8a900 <main+0x2a8>)
   8a73e:	4798      	blx	r3
   8a740:	4603      	mov	r3, r0
   8a742:	71fb      	strb	r3, [r7, #7]
   8a744:	79fb      	ldrb	r3, [r7, #7]
   8a746:	2b00      	cmp	r3, #0
   8a748:	d001      	beq.n	8a74e <main+0xf6>
   8a74a:	4b6a      	ldr	r3, [pc, #424]	; (8a8f4 <main+0x29c>)
   8a74c:	4798      	blx	r3
   8a74e:	79fb      	ldrb	r3, [r7, #7]
   8a750:	2b00      	cmp	r3, #0
   8a752:	d105      	bne.n	8a760 <main+0x108>
   8a754:	4b6b      	ldr	r3, [pc, #428]	; (8a904 <main+0x2ac>)
   8a756:	2201      	movs	r2, #1
   8a758:	701a      	strb	r2, [r3, #0]
   8a75a:	4b68      	ldr	r3, [pc, #416]	; (8a8fc <main+0x2a4>)
   8a75c:	2202      	movs	r2, #2
   8a75e:	701a      	strb	r2, [r3, #0]
   8a760:	4b66      	ldr	r3, [pc, #408]	; (8a8fc <main+0x2a4>)
   8a762:	781a      	ldrb	r2, [r3, #0]
   8a764:	4b68      	ldr	r3, [pc, #416]	; (8a908 <main+0x2b0>)
   8a766:	701a      	strb	r2, [r3, #0]
   8a768:	4b68      	ldr	r3, [pc, #416]	; (8a90c <main+0x2b4>)
   8a76a:	681b      	ldr	r3, [r3, #0]
   8a76c:	4a68      	ldr	r2, [pc, #416]	; (8a910 <main+0x2b8>)
   8a76e:	6013      	str	r3, [r2, #0]
   8a770:	4b68      	ldr	r3, [pc, #416]	; (8a914 <main+0x2bc>)
   8a772:	4798      	blx	r3
   8a774:	4603      	mov	r3, r0
   8a776:	71fb      	strb	r3, [r7, #7]
   8a778:	4b67      	ldr	r3, [pc, #412]	; (8a918 <main+0x2c0>)
   8a77a:	4798      	blx	r3
   8a77c:	4603      	mov	r3, r0
   8a77e:	71fb      	strb	r3, [r7, #7]
   8a780:	79fb      	ldrb	r3, [r7, #7]
   8a782:	2b00      	cmp	r3, #0
   8a784:	d001      	beq.n	8a78a <main+0x132>
   8a786:	4b5b      	ldr	r3, [pc, #364]	; (8a8f4 <main+0x29c>)
   8a788:	4798      	blx	r3
   8a78a:	4b64      	ldr	r3, [pc, #400]	; (8a91c <main+0x2c4>)
   8a78c:	4798      	blx	r3
   8a78e:	4603      	mov	r3, r0
   8a790:	71fb      	strb	r3, [r7, #7]
   8a792:	79fb      	ldrb	r3, [r7, #7]
   8a794:	2b00      	cmp	r3, #0
   8a796:	d001      	beq.n	8a79c <main+0x144>
   8a798:	4b56      	ldr	r3, [pc, #344]	; (8a8f4 <main+0x29c>)
   8a79a:	4798      	blx	r3
   8a79c:	4b5b      	ldr	r3, [pc, #364]	; (8a90c <main+0x2b4>)
   8a79e:	681a      	ldr	r2, [r3, #0]
   8a7a0:	4b5b      	ldr	r3, [pc, #364]	; (8a910 <main+0x2b8>)
   8a7a2:	681b      	ldr	r3, [r3, #0]
   8a7a4:	1ad3      	subs	r3, r2, r3
   8a7a6:	4a5e      	ldr	r2, [pc, #376]	; (8a920 <main+0x2c8>)
   8a7a8:	6013      	str	r3, [r2, #0]
   8a7aa:	2032      	movs	r0, #50	; 0x32
   8a7ac:	4b5d      	ldr	r3, [pc, #372]	; (8a924 <main+0x2cc>)
   8a7ae:	4798      	blx	r3
   8a7b0:	4603      	mov	r3, r0
   8a7b2:	71fb      	strb	r3, [r7, #7]
   8a7b4:	79fb      	ldrb	r3, [r7, #7]
   8a7b6:	2b00      	cmp	r3, #0
   8a7b8:	f001 879e 	beq.w	8c6f8 <main+0x20a0>
   8a7bc:	4b4d      	ldr	r3, [pc, #308]	; (8a8f4 <main+0x29c>)
   8a7be:	4798      	blx	r3
   8a7c0:	f001 bf9a 	b.w	8c6f8 <main+0x20a0>
   8a7c4:	4b58      	ldr	r3, [pc, #352]	; (8a928 <main+0x2d0>)
   8a7c6:	2200      	movs	r2, #0
   8a7c8:	701a      	strb	r2, [r3, #0]
   8a7ca:	4b58      	ldr	r3, [pc, #352]	; (8a92c <main+0x2d4>)
   8a7cc:	4798      	blx	r3
   8a7ce:	4603      	mov	r3, r0
   8a7d0:	71fb      	strb	r3, [r7, #7]
   8a7d2:	79fb      	ldrb	r3, [r7, #7]
   8a7d4:	2b00      	cmp	r3, #0
   8a7d6:	d001      	beq.n	8a7dc <main+0x184>
   8a7d8:	4b46      	ldr	r3, [pc, #280]	; (8a8f4 <main+0x29c>)
   8a7da:	4798      	blx	r3
   8a7dc:	4b54      	ldr	r3, [pc, #336]	; (8a930 <main+0x2d8>)
   8a7de:	781b      	ldrb	r3, [r3, #0]
   8a7e0:	2b00      	cmp	r3, #0
   8a7e2:	f001 8789 	beq.w	8c6f8 <main+0x20a0>
   8a7e6:	4b50      	ldr	r3, [pc, #320]	; (8a928 <main+0x2d0>)
   8a7e8:	781b      	ldrb	r3, [r3, #0]
   8a7ea:	4618      	mov	r0, r3
   8a7ec:	4b4d      	ldr	r3, [pc, #308]	; (8a924 <main+0x2cc>)
   8a7ee:	4798      	blx	r3
   8a7f0:	4603      	mov	r3, r0
   8a7f2:	71fb      	strb	r3, [r7, #7]
   8a7f4:	79fb      	ldrb	r3, [r7, #7]
   8a7f6:	2b00      	cmp	r3, #0
   8a7f8:	d001      	beq.n	8a7fe <main+0x1a6>
   8a7fa:	4b3e      	ldr	r3, [pc, #248]	; (8a8f4 <main+0x29c>)
   8a7fc:	4798      	blx	r3
   8a7fe:	4b4a      	ldr	r3, [pc, #296]	; (8a928 <main+0x2d0>)
   8a800:	781b      	ldrb	r3, [r3, #0]
   8a802:	2b02      	cmp	r3, #2
   8a804:	d114      	bne.n	8a830 <main+0x1d8>
   8a806:	4b4b      	ldr	r3, [pc, #300]	; (8a934 <main+0x2dc>)
   8a808:	791a      	ldrb	r2, [r3, #4]
   8a80a:	4b4b      	ldr	r3, [pc, #300]	; (8a938 <main+0x2e0>)
   8a80c:	701a      	strb	r2, [r3, #0]
   8a80e:	4b4a      	ldr	r3, [pc, #296]	; (8a938 <main+0x2e0>)
   8a810:	781b      	ldrb	r3, [r3, #0]
   8a812:	2b00      	cmp	r3, #0
   8a814:	d109      	bne.n	8a82a <main+0x1d2>
   8a816:	4b49      	ldr	r3, [pc, #292]	; (8a93c <main+0x2e4>)
   8a818:	7818      	ldrb	r0, [r3, #0]
   8a81a:	4b49      	ldr	r3, [pc, #292]	; (8a940 <main+0x2e8>)
   8a81c:	781b      	ldrb	r3, [r3, #0]
   8a81e:	4619      	mov	r1, r3
   8a820:	4b48      	ldr	r3, [pc, #288]	; (8a944 <main+0x2ec>)
   8a822:	781b      	ldrb	r3, [r3, #0]
   8a824:	461a      	mov	r2, r3
   8a826:	4b48      	ldr	r3, [pc, #288]	; (8a948 <main+0x2f0>)
   8a828:	4798      	blx	r3
   8a82a:	4b48      	ldr	r3, [pc, #288]	; (8a94c <main+0x2f4>)
   8a82c:	2201      	movs	r2, #1
   8a82e:	701a      	strb	r2, [r3, #0]
   8a830:	4b3d      	ldr	r3, [pc, #244]	; (8a928 <main+0x2d0>)
   8a832:	781b      	ldrb	r3, [r3, #0]
   8a834:	2b01      	cmp	r3, #1
   8a836:	d111      	bne.n	8a85c <main+0x204>
   8a838:	2303      	movs	r3, #3
   8a83a:	703b      	strb	r3, [r7, #0]
   8a83c:	4b43      	ldr	r3, [pc, #268]	; (8a94c <main+0x2f4>)
   8a83e:	2201      	movs	r2, #1
   8a840:	701a      	strb	r2, [r3, #0]
   8a842:	463b      	mov	r3, r7
   8a844:	2201      	movs	r2, #1
   8a846:	4619      	mov	r1, r3
   8a848:	2004      	movs	r0, #4
   8a84a:	4b3f      	ldr	r3, [pc, #252]	; (8a948 <main+0x2f0>)
   8a84c:	4798      	blx	r3
   8a84e:	4603      	mov	r3, r0
   8a850:	71fb      	strb	r3, [r7, #7]
   8a852:	79fb      	ldrb	r3, [r7, #7]
   8a854:	2b00      	cmp	r3, #0
   8a856:	d001      	beq.n	8a85c <main+0x204>
   8a858:	4b26      	ldr	r3, [pc, #152]	; (8a8f4 <main+0x29c>)
   8a85a:	4798      	blx	r3
   8a85c:	4b27      	ldr	r3, [pc, #156]	; (8a8fc <main+0x2a4>)
   8a85e:	781b      	ldrb	r3, [r3, #0]
   8a860:	3b01      	subs	r3, #1
   8a862:	2b14      	cmp	r3, #20
   8a864:	f201 873c 	bhi.w	8c6e0 <main+0x2088>
   8a868:	a201      	add	r2, pc, #4	; (adr r2, 8a870 <main+0x218>)
   8a86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a86e:	bf00      	nop
   8a870:	0008c6e1 	.word	0x0008c6e1
   8a874:	0008a951 	.word	0x0008a951
   8a878:	0008c6e1 	.word	0x0008c6e1
   8a87c:	0008c6e1 	.word	0x0008c6e1
   8a880:	0008aa73 	.word	0x0008aa73
   8a884:	0008af51 	.word	0x0008af51
   8a888:	0008b007 	.word	0x0008b007
   8a88c:	0008ad1d 	.word	0x0008ad1d
   8a890:	0008c6e1 	.word	0x0008c6e1
   8a894:	0008b2bd 	.word	0x0008b2bd
   8a898:	0008b5cd 	.word	0x0008b5cd
   8a89c:	0008b839 	.word	0x0008b839
   8a8a0:	0008ba1f 	.word	0x0008ba1f
   8a8a4:	0008ba39 	.word	0x0008ba39
   8a8a8:	0008c151 	.word	0x0008c151
   8a8ac:	0008c3c5 	.word	0x0008c3c5
   8a8b0:	0008c529 	.word	0x0008c529
   8a8b4:	0008c6d9 	.word	0x0008c6d9
   8a8b8:	0008c6dd 	.word	0x0008c6dd
   8a8bc:	0008bc85 	.word	0x0008bc85
   8a8c0:	0008be91 	.word	0x0008be91
   8a8c4:	00098369 	.word	0x00098369
   8a8c8:	0008044d 	.word	0x0008044d
   8a8cc:	0009816d 	.word	0x0009816d
   8a8d0:	00098af1 	.word	0x00098af1
   8a8d4:	0009790d 	.word	0x0009790d
   8a8d8:	00097949 	.word	0x00097949
   8a8dc:	0008c73d 	.word	0x0008c73d
   8a8e0:	000979cd 	.word	0x000979cd
   8a8e4:	00091e2d 	.word	0x00091e2d
   8a8e8:	00097cc5 	.word	0x00097cc5
   8a8ec:	00097ca5 	.word	0x00097ca5
   8a8f0:	0008c7d9 	.word	0x0008c7d9
   8a8f4:	00088725 	.word	0x00088725
   8a8f8:	0008c8a1 	.word	0x0008c8a1
   8a8fc:	200704b0 	.word	0x200704b0
   8a900:	00099ad9 	.word	0x00099ad9
   8a904:	20072173 	.word	0x20072173
   8a908:	20073109 	.word	0x20073109
   8a90c:	20072680 	.word	0x20072680
   8a910:	20072f20 	.word	0x20072f20
   8a914:	0008c8c5 	.word	0x0008c8c5
   8a918:	0008cb31 	.word	0x0008cb31
   8a91c:	0008c8f5 	.word	0x0008c8f5
   8a920:	20073084 	.word	0x20073084
   8a924:	00088735 	.word	0x00088735
   8a928:	20072172 	.word	0x20072172
   8a92c:	0008c975 	.word	0x0008c975
   8a930:	20072174 	.word	0x20072174
   8a934:	20072f98 	.word	0x20072f98
   8a938:	2007335b 	.word	0x2007335b
   8a93c:	20073359 	.word	0x20073359
   8a940:	2007335a 	.word	0x2007335a
   8a944:	20073358 	.word	0x20073358
   8a948:	00099729 	.word	0x00099729
   8a94c:	200704b1 	.word	0x200704b1
   8a950:	4bb2      	ldr	r3, [pc, #712]	; (8ac1c <main+0x5c4>)
   8a952:	781b      	ldrb	r3, [r3, #0]
   8a954:	3b2a      	subs	r3, #42	; 0x2a
   8a956:	2b19      	cmp	r3, #25
   8a958:	f200 8085 	bhi.w	8aa66 <main+0x40e>
   8a95c:	a201      	add	r2, pc, #4	; (adr r2, 8a964 <main+0x30c>)
   8a95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a962:	bf00      	nop
   8a964:	0008a9cd 	.word	0x0008a9cd
   8a968:	0008aa67 	.word	0x0008aa67
   8a96c:	0008aa67 	.word	0x0008aa67
   8a970:	0008aa67 	.word	0x0008aa67
   8a974:	0008aa67 	.word	0x0008aa67
   8a978:	0008aa67 	.word	0x0008aa67
   8a97c:	0008aa67 	.word	0x0008aa67
   8a980:	0008aa67 	.word	0x0008aa67
   8a984:	0008aa67 	.word	0x0008aa67
   8a988:	0008aa67 	.word	0x0008aa67
   8a98c:	0008aa67 	.word	0x0008aa67
   8a990:	0008aa67 	.word	0x0008aa67
   8a994:	0008aa67 	.word	0x0008aa67
   8a998:	0008aa67 	.word	0x0008aa67
   8a99c:	0008aa67 	.word	0x0008aa67
   8a9a0:	0008aa47 	.word	0x0008aa47
   8a9a4:	0008aa67 	.word	0x0008aa67
   8a9a8:	0008aa47 	.word	0x0008aa47
   8a9ac:	0008aa47 	.word	0x0008aa47
   8a9b0:	0008aa47 	.word	0x0008aa47
   8a9b4:	0008aa67 	.word	0x0008aa67
   8a9b8:	0008aa67 	.word	0x0008aa67
   8a9bc:	0008aa67 	.word	0x0008aa67
   8a9c0:	0008aa67 	.word	0x0008aa67
   8a9c4:	0008aa67 	.word	0x0008aa67
   8a9c8:	0008a9ed 	.word	0x0008a9ed
   8a9cc:	4b93      	ldr	r3, [pc, #588]	; (8ac1c <main+0x5c4>)
   8a9ce:	781b      	ldrb	r3, [r3, #0]
   8a9d0:	4618      	mov	r0, r3
   8a9d2:	4b93      	ldr	r3, [pc, #588]	; (8ac20 <main+0x5c8>)
   8a9d4:	4798      	blx	r3
   8a9d6:	4603      	mov	r3, r0
   8a9d8:	71fb      	strb	r3, [r7, #7]
   8a9da:	79fb      	ldrb	r3, [r7, #7]
   8a9dc:	2b00      	cmp	r3, #0
   8a9de:	d001      	beq.n	8a9e4 <main+0x38c>
   8a9e0:	4b90      	ldr	r3, [pc, #576]	; (8ac24 <main+0x5cc>)
   8a9e2:	4798      	blx	r3
   8a9e4:	4b8d      	ldr	r3, [pc, #564]	; (8ac1c <main+0x5c4>)
   8a9e6:	2200      	movs	r2, #0
   8a9e8:	701a      	strb	r2, [r3, #0]
   8a9ea:	e040      	b.n	8aa6e <main+0x416>
   8a9ec:	202b      	movs	r0, #43	; 0x2b
   8a9ee:	4b8c      	ldr	r3, [pc, #560]	; (8ac20 <main+0x5c8>)
   8a9f0:	4798      	blx	r3
   8a9f2:	4603      	mov	r3, r0
   8a9f4:	71fb      	strb	r3, [r7, #7]
   8a9f6:	79fb      	ldrb	r3, [r7, #7]
   8a9f8:	2b00      	cmp	r3, #0
   8a9fa:	d001      	beq.n	8aa00 <main+0x3a8>
   8a9fc:	4b89      	ldr	r3, [pc, #548]	; (8ac24 <main+0x5cc>)
   8a9fe:	4798      	blx	r3
   8aa00:	79fb      	ldrb	r3, [r7, #7]
   8aa02:	2b00      	cmp	r3, #0
   8aa04:	d109      	bne.n	8aa1a <main+0x3c2>
   8aa06:	202b      	movs	r0, #43	; 0x2b
   8aa08:	4b87      	ldr	r3, [pc, #540]	; (8ac28 <main+0x5d0>)
   8aa0a:	4798      	blx	r3
   8aa0c:	4603      	mov	r3, r0
   8aa0e:	71fb      	strb	r3, [r7, #7]
   8aa10:	79fb      	ldrb	r3, [r7, #7]
   8aa12:	2b00      	cmp	r3, #0
   8aa14:	d001      	beq.n	8aa1a <main+0x3c2>
   8aa16:	4b83      	ldr	r3, [pc, #524]	; (8ac24 <main+0x5cc>)
   8aa18:	4798      	blx	r3
   8aa1a:	79fb      	ldrb	r3, [r7, #7]
   8aa1c:	2b00      	cmp	r3, #0
   8aa1e:	d125      	bne.n	8aa6c <main+0x414>
   8aa20:	4b7e      	ldr	r3, [pc, #504]	; (8ac1c <main+0x5c4>)
   8aa22:	2200      	movs	r2, #0
   8aa24:	701a      	strb	r2, [r3, #0]
   8aa26:	4b81      	ldr	r3, [pc, #516]	; (8ac2c <main+0x5d4>)
   8aa28:	2205      	movs	r2, #5
   8aa2a:	701a      	strb	r2, [r3, #0]
   8aa2c:	2201      	movs	r2, #1
   8aa2e:	2105      	movs	r1, #5
   8aa30:	2045      	movs	r0, #69	; 0x45
   8aa32:	4b7f      	ldr	r3, [pc, #508]	; (8ac30 <main+0x5d8>)
   8aa34:	4798      	blx	r3
   8aa36:	4603      	mov	r3, r0
   8aa38:	71fb      	strb	r3, [r7, #7]
   8aa3a:	79fb      	ldrb	r3, [r7, #7]
   8aa3c:	2b00      	cmp	r3, #0
   8aa3e:	d015      	beq.n	8aa6c <main+0x414>
   8aa40:	4b78      	ldr	r3, [pc, #480]	; (8ac24 <main+0x5cc>)
   8aa42:	4798      	blx	r3
   8aa44:	e012      	b.n	8aa6c <main+0x414>
   8aa46:	4b75      	ldr	r3, [pc, #468]	; (8ac1c <main+0x5c4>)
   8aa48:	781b      	ldrb	r3, [r3, #0]
   8aa4a:	4618      	mov	r0, r3
   8aa4c:	4b74      	ldr	r3, [pc, #464]	; (8ac20 <main+0x5c8>)
   8aa4e:	4798      	blx	r3
   8aa50:	4603      	mov	r3, r0
   8aa52:	71fb      	strb	r3, [r7, #7]
   8aa54:	79fb      	ldrb	r3, [r7, #7]
   8aa56:	2b00      	cmp	r3, #0
   8aa58:	d001      	beq.n	8aa5e <main+0x406>
   8aa5a:	4b72      	ldr	r3, [pc, #456]	; (8ac24 <main+0x5cc>)
   8aa5c:	4798      	blx	r3
   8aa5e:	4b6f      	ldr	r3, [pc, #444]	; (8ac1c <main+0x5c4>)
   8aa60:	2200      	movs	r2, #0
   8aa62:	701a      	strb	r2, [r3, #0]
   8aa64:	e003      	b.n	8aa6e <main+0x416>
   8aa66:	bf00      	nop
   8aa68:	f001 be3d 	b.w	8c6e6 <main+0x208e>
   8aa6c:	bf00      	nop
   8aa6e:	f001 be3a 	b.w	8c6e6 <main+0x208e>
   8aa72:	4b6a      	ldr	r3, [pc, #424]	; (8ac1c <main+0x5c4>)
   8aa74:	781b      	ldrb	r3, [r3, #0]
   8aa76:	3b07      	subs	r3, #7
   8aa78:	2b38      	cmp	r3, #56	; 0x38
   8aa7a:	f200 8146 	bhi.w	8ad0a <main+0x6b2>
   8aa7e:	a201      	add	r2, pc, #4	; (adr r2, 8aa84 <main+0x42c>)
   8aa80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8aa84:	0008ab89 	.word	0x0008ab89
   8aa88:	0008ad0b 	.word	0x0008ad0b
   8aa8c:	0008ac8f 	.word	0x0008ac8f
   8aa90:	0008ab69 	.word	0x0008ab69
   8aa94:	0008ab69 	.word	0x0008ab69
   8aa98:	0008ab69 	.word	0x0008ab69
   8aa9c:	0008ad0b 	.word	0x0008ad0b
   8aaa0:	0008ad0b 	.word	0x0008ad0b
   8aaa4:	0008abf7 	.word	0x0008abf7
   8aaa8:	0008ad0b 	.word	0x0008ad0b
   8aaac:	0008ad0b 	.word	0x0008ad0b
   8aab0:	0008ad0b 	.word	0x0008ad0b
   8aab4:	0008ad0b 	.word	0x0008ad0b
   8aab8:	0008ad0b 	.word	0x0008ad0b
   8aabc:	0008ad0b 	.word	0x0008ad0b
   8aac0:	0008ad0b 	.word	0x0008ad0b
   8aac4:	0008ad0b 	.word	0x0008ad0b
   8aac8:	0008ad0b 	.word	0x0008ad0b
   8aacc:	0008ad0b 	.word	0x0008ad0b
   8aad0:	0008ad0b 	.word	0x0008ad0b
   8aad4:	0008ad0b 	.word	0x0008ad0b
   8aad8:	0008ad0b 	.word	0x0008ad0b
   8aadc:	0008ad0b 	.word	0x0008ad0b
   8aae0:	0008ad0b 	.word	0x0008ad0b
   8aae4:	0008ad0b 	.word	0x0008ad0b
   8aae8:	0008ad0b 	.word	0x0008ad0b
   8aaec:	0008ad0b 	.word	0x0008ad0b
   8aaf0:	0008ad0b 	.word	0x0008ad0b
   8aaf4:	0008ad0b 	.word	0x0008ad0b
   8aaf8:	0008ad0b 	.word	0x0008ad0b
   8aafc:	0008ad0b 	.word	0x0008ad0b
   8ab00:	0008ad0b 	.word	0x0008ad0b
   8ab04:	0008ad0b 	.word	0x0008ad0b
   8ab08:	0008ad0b 	.word	0x0008ad0b
   8ab0c:	0008ad0b 	.word	0x0008ad0b
   8ab10:	0008ad0b 	.word	0x0008ad0b
   8ab14:	0008ab69 	.word	0x0008ab69
   8ab18:	0008ad0b 	.word	0x0008ad0b
   8ab1c:	0008ab69 	.word	0x0008ab69
   8ab20:	0008ab69 	.word	0x0008ab69
   8ab24:	0008ad0b 	.word	0x0008ad0b
   8ab28:	0008ad0b 	.word	0x0008ad0b
   8ab2c:	0008ad0b 	.word	0x0008ad0b
   8ab30:	0008ad0b 	.word	0x0008ad0b
   8ab34:	0008ad0b 	.word	0x0008ad0b
   8ab38:	0008ad0b 	.word	0x0008ad0b
   8ab3c:	0008ad0b 	.word	0x0008ad0b
   8ab40:	0008ad0b 	.word	0x0008ad0b
   8ab44:	0008ad0b 	.word	0x0008ad0b
   8ab48:	0008ad0b 	.word	0x0008ad0b
   8ab4c:	0008ab69 	.word	0x0008ab69
   8ab50:	0008ad0b 	.word	0x0008ad0b
   8ab54:	0008ab69 	.word	0x0008ab69
   8ab58:	0008ab69 	.word	0x0008ab69
   8ab5c:	0008ab69 	.word	0x0008ab69
   8ab60:	0008ad0b 	.word	0x0008ad0b
   8ab64:	0008ac3d 	.word	0x0008ac3d
   8ab68:	4b2c      	ldr	r3, [pc, #176]	; (8ac1c <main+0x5c4>)
   8ab6a:	781b      	ldrb	r3, [r3, #0]
   8ab6c:	4618      	mov	r0, r3
   8ab6e:	4b2e      	ldr	r3, [pc, #184]	; (8ac28 <main+0x5d0>)
   8ab70:	4798      	blx	r3
   8ab72:	4603      	mov	r3, r0
   8ab74:	71fb      	strb	r3, [r7, #7]
   8ab76:	79fb      	ldrb	r3, [r7, #7]
   8ab78:	2b00      	cmp	r3, #0
   8ab7a:	d001      	beq.n	8ab80 <main+0x528>
   8ab7c:	4b29      	ldr	r3, [pc, #164]	; (8ac24 <main+0x5cc>)
   8ab7e:	4798      	blx	r3
   8ab80:	4b26      	ldr	r3, [pc, #152]	; (8ac1c <main+0x5c4>)
   8ab82:	2200      	movs	r2, #0
   8ab84:	701a      	strb	r2, [r3, #0]
   8ab86:	e0c7      	b.n	8ad18 <main+0x6c0>
   8ab88:	4b2a      	ldr	r3, [pc, #168]	; (8ac34 <main+0x5dc>)
   8ab8a:	2200      	movs	r2, #0
   8ab8c:	601a      	str	r2, [r3, #0]
   8ab8e:	4b23      	ldr	r3, [pc, #140]	; (8ac1c <main+0x5c4>)
   8ab90:	781b      	ldrb	r3, [r3, #0]
   8ab92:	4618      	mov	r0, r3
   8ab94:	4b24      	ldr	r3, [pc, #144]	; (8ac28 <main+0x5d0>)
   8ab96:	4798      	blx	r3
   8ab98:	4603      	mov	r3, r0
   8ab9a:	71fb      	strb	r3, [r7, #7]
   8ab9c:	79fb      	ldrb	r3, [r7, #7]
   8ab9e:	2b00      	cmp	r3, #0
   8aba0:	d001      	beq.n	8aba6 <main+0x54e>
   8aba2:	4b20      	ldr	r3, [pc, #128]	; (8ac24 <main+0x5cc>)
   8aba4:	4798      	blx	r3
   8aba6:	79fb      	ldrb	r3, [r7, #7]
   8aba8:	2b00      	cmp	r3, #0
   8abaa:	d10e      	bne.n	8abca <main+0x572>
   8abac:	4b1b      	ldr	r3, [pc, #108]	; (8ac1c <main+0x5c4>)
   8abae:	781b      	ldrb	r3, [r3, #0]
   8abb0:	4618      	mov	r0, r3
   8abb2:	4b21      	ldr	r3, [pc, #132]	; (8ac38 <main+0x5e0>)
   8abb4:	4798      	blx	r3
   8abb6:	4603      	mov	r3, r0
   8abb8:	71fb      	strb	r3, [r7, #7]
   8abba:	79fb      	ldrb	r3, [r7, #7]
   8abbc:	2b03      	cmp	r3, #3
   8abbe:	d004      	beq.n	8abca <main+0x572>
   8abc0:	79fb      	ldrb	r3, [r7, #7]
   8abc2:	2b00      	cmp	r3, #0
   8abc4:	d001      	beq.n	8abca <main+0x572>
   8abc6:	4b17      	ldr	r3, [pc, #92]	; (8ac24 <main+0x5cc>)
   8abc8:	4798      	blx	r3
   8abca:	79fb      	ldrb	r3, [r7, #7]
   8abcc:	2b00      	cmp	r3, #0
   8abce:	d10e      	bne.n	8abee <main+0x596>
   8abd0:	4b16      	ldr	r3, [pc, #88]	; (8ac2c <main+0x5d4>)
   8abd2:	2207      	movs	r2, #7
   8abd4:	701a      	strb	r2, [r3, #0]
   8abd6:	2201      	movs	r2, #1
   8abd8:	2107      	movs	r1, #7
   8abda:	2045      	movs	r0, #69	; 0x45
   8abdc:	4b14      	ldr	r3, [pc, #80]	; (8ac30 <main+0x5d8>)
   8abde:	4798      	blx	r3
   8abe0:	4603      	mov	r3, r0
   8abe2:	71fb      	strb	r3, [r7, #7]
   8abe4:	79fb      	ldrb	r3, [r7, #7]
   8abe6:	2b00      	cmp	r3, #0
   8abe8:	d001      	beq.n	8abee <main+0x596>
   8abea:	4b0e      	ldr	r3, [pc, #56]	; (8ac24 <main+0x5cc>)
   8abec:	4798      	blx	r3
   8abee:	4b0b      	ldr	r3, [pc, #44]	; (8ac1c <main+0x5c4>)
   8abf0:	2200      	movs	r2, #0
   8abf2:	701a      	strb	r2, [r3, #0]
   8abf4:	e090      	b.n	8ad18 <main+0x6c0>
   8abf6:	4b09      	ldr	r3, [pc, #36]	; (8ac1c <main+0x5c4>)
   8abf8:	781b      	ldrb	r3, [r3, #0]
   8abfa:	4618      	mov	r0, r3
   8abfc:	4b0e      	ldr	r3, [pc, #56]	; (8ac38 <main+0x5e0>)
   8abfe:	4798      	blx	r3
   8ac00:	4603      	mov	r3, r0
   8ac02:	71fb      	strb	r3, [r7, #7]
   8ac04:	79fb      	ldrb	r3, [r7, #7]
   8ac06:	2b00      	cmp	r3, #0
   8ac08:	d001      	beq.n	8ac0e <main+0x5b6>
   8ac0a:	4b06      	ldr	r3, [pc, #24]	; (8ac24 <main+0x5cc>)
   8ac0c:	4798      	blx	r3
   8ac0e:	79fb      	ldrb	r3, [r7, #7]
   8ac10:	2b00      	cmp	r3, #0
   8ac12:	d17d      	bne.n	8ad10 <main+0x6b8>
   8ac14:	4b05      	ldr	r3, [pc, #20]	; (8ac2c <main+0x5d4>)
   8ac16:	220a      	movs	r2, #10
   8ac18:	701a      	strb	r2, [r3, #0]
   8ac1a:	e079      	b.n	8ad10 <main+0x6b8>
   8ac1c:	20072172 	.word	0x20072172
   8ac20:	0008a31d 	.word	0x0008a31d
   8ac24:	00088725 	.word	0x00088725
   8ac28:	000a254d 	.word	0x000a254d
   8ac2c:	200704b0 	.word	0x200704b0
   8ac30:	00099729 	.word	0x00099729
   8ac34:	20072178 	.word	0x20072178
   8ac38:	0009fbdd 	.word	0x0009fbdd
   8ac3c:	4bbb      	ldr	r3, [pc, #748]	; (8af2c <main+0x8d4>)
   8ac3e:	781b      	ldrb	r3, [r3, #0]
   8ac40:	4618      	mov	r0, r3
   8ac42:	4bbb      	ldr	r3, [pc, #748]	; (8af30 <main+0x8d8>)
   8ac44:	4798      	blx	r3
   8ac46:	4603      	mov	r3, r0
   8ac48:	71fb      	strb	r3, [r7, #7]
   8ac4a:	79fb      	ldrb	r3, [r7, #7]
   8ac4c:	2b00      	cmp	r3, #0
   8ac4e:	d001      	beq.n	8ac54 <main+0x5fc>
   8ac50:	4bb8      	ldr	r3, [pc, #736]	; (8af34 <main+0x8dc>)
   8ac52:	4798      	blx	r3
   8ac54:	79fb      	ldrb	r3, [r7, #7]
   8ac56:	2b00      	cmp	r3, #0
   8ac58:	d15d      	bne.n	8ad16 <main+0x6be>
   8ac5a:	4bb4      	ldr	r3, [pc, #720]	; (8af2c <main+0x8d4>)
   8ac5c:	781b      	ldrb	r3, [r3, #0]
   8ac5e:	4618      	mov	r0, r3
   8ac60:	4bb5      	ldr	r3, [pc, #724]	; (8af38 <main+0x8e0>)
   8ac62:	4798      	blx	r3
   8ac64:	4603      	mov	r3, r0
   8ac66:	71fb      	strb	r3, [r7, #7]
   8ac68:	79fb      	ldrb	r3, [r7, #7]
   8ac6a:	2b00      	cmp	r3, #0
   8ac6c:	d001      	beq.n	8ac72 <main+0x61a>
   8ac6e:	4bb1      	ldr	r3, [pc, #708]	; (8af34 <main+0x8dc>)
   8ac70:	4798      	blx	r3
   8ac72:	4bb2      	ldr	r3, [pc, #712]	; (8af3c <main+0x8e4>)
   8ac74:	2208      	movs	r2, #8
   8ac76:	701a      	strb	r2, [r3, #0]
   8ac78:	2201      	movs	r2, #1
   8ac7a:	2108      	movs	r1, #8
   8ac7c:	2045      	movs	r0, #69	; 0x45
   8ac7e:	4bb0      	ldr	r3, [pc, #704]	; (8af40 <main+0x8e8>)
   8ac80:	4798      	blx	r3
   8ac82:	79fb      	ldrb	r3, [r7, #7]
   8ac84:	2b00      	cmp	r3, #0
   8ac86:	d046      	beq.n	8ad16 <main+0x6be>
   8ac88:	4baa      	ldr	r3, [pc, #680]	; (8af34 <main+0x8dc>)
   8ac8a:	4798      	blx	r3
   8ac8c:	e043      	b.n	8ad16 <main+0x6be>
   8ac8e:	4ba7      	ldr	r3, [pc, #668]	; (8af2c <main+0x8d4>)
   8ac90:	781b      	ldrb	r3, [r3, #0]
   8ac92:	4618      	mov	r0, r3
   8ac94:	4bab      	ldr	r3, [pc, #684]	; (8af44 <main+0x8ec>)
   8ac96:	4798      	blx	r3
   8ac98:	4603      	mov	r3, r0
   8ac9a:	71fb      	strb	r3, [r7, #7]
   8ac9c:	79fb      	ldrb	r3, [r7, #7]
   8ac9e:	2b00      	cmp	r3, #0
   8aca0:	d001      	beq.n	8aca6 <main+0x64e>
   8aca2:	4ba4      	ldr	r3, [pc, #656]	; (8af34 <main+0x8dc>)
   8aca4:	4798      	blx	r3
   8aca6:	79fb      	ldrb	r3, [r7, #7]
   8aca8:	2b02      	cmp	r3, #2
   8acaa:	d10b      	bne.n	8acc4 <main+0x66c>
   8acac:	4b9f      	ldr	r3, [pc, #636]	; (8af2c <main+0x8d4>)
   8acae:	781b      	ldrb	r3, [r3, #0]
   8acb0:	4618      	mov	r0, r3
   8acb2:	4ba5      	ldr	r3, [pc, #660]	; (8af48 <main+0x8f0>)
   8acb4:	4798      	blx	r3
   8acb6:	4603      	mov	r3, r0
   8acb8:	71fb      	strb	r3, [r7, #7]
   8acba:	79fb      	ldrb	r3, [r7, #7]
   8acbc:	2b00      	cmp	r3, #0
   8acbe:	d001      	beq.n	8acc4 <main+0x66c>
   8acc0:	4b9c      	ldr	r3, [pc, #624]	; (8af34 <main+0x8dc>)
   8acc2:	4798      	blx	r3
   8acc4:	79fb      	ldrb	r3, [r7, #7]
   8acc6:	2b02      	cmp	r3, #2
   8acc8:	d10b      	bne.n	8ace2 <main+0x68a>
   8acca:	4b98      	ldr	r3, [pc, #608]	; (8af2c <main+0x8d4>)
   8accc:	781b      	ldrb	r3, [r3, #0]
   8acce:	4618      	mov	r0, r3
   8acd0:	4b9e      	ldr	r3, [pc, #632]	; (8af4c <main+0x8f4>)
   8acd2:	4798      	blx	r3
   8acd4:	4603      	mov	r3, r0
   8acd6:	71fb      	strb	r3, [r7, #7]
   8acd8:	79fb      	ldrb	r3, [r7, #7]
   8acda:	2b00      	cmp	r3, #0
   8acdc:	d001      	beq.n	8ace2 <main+0x68a>
   8acde:	4b95      	ldr	r3, [pc, #596]	; (8af34 <main+0x8dc>)
   8ace0:	4798      	blx	r3
   8ace2:	79fb      	ldrb	r3, [r7, #7]
   8ace4:	2b00      	cmp	r3, #0
   8ace6:	d10c      	bne.n	8ad02 <main+0x6aa>
   8ace8:	4b94      	ldr	r3, [pc, #592]	; (8af3c <main+0x8e4>)
   8acea:	220b      	movs	r2, #11
   8acec:	701a      	strb	r2, [r3, #0]
   8acee:	2201      	movs	r2, #1
   8acf0:	210b      	movs	r1, #11
   8acf2:	2045      	movs	r0, #69	; 0x45
   8acf4:	4b92      	ldr	r3, [pc, #584]	; (8af40 <main+0x8e8>)
   8acf6:	4798      	blx	r3
   8acf8:	79fb      	ldrb	r3, [r7, #7]
   8acfa:	2b00      	cmp	r3, #0
   8acfc:	d001      	beq.n	8ad02 <main+0x6aa>
   8acfe:	4b8d      	ldr	r3, [pc, #564]	; (8af34 <main+0x8dc>)
   8ad00:	4798      	blx	r3
   8ad02:	4b8a      	ldr	r3, [pc, #552]	; (8af2c <main+0x8d4>)
   8ad04:	2200      	movs	r2, #0
   8ad06:	701a      	strb	r2, [r3, #0]
   8ad08:	e006      	b.n	8ad18 <main+0x6c0>
   8ad0a:	bf00      	nop
   8ad0c:	f001 bceb 	b.w	8c6e6 <main+0x208e>
   8ad10:	bf00      	nop
   8ad12:	f001 bce8 	b.w	8c6e6 <main+0x208e>
   8ad16:	bf00      	nop
   8ad18:	f001 bce5 	b.w	8c6e6 <main+0x208e>
   8ad1c:	4b83      	ldr	r3, [pc, #524]	; (8af2c <main+0x8d4>)
   8ad1e:	781b      	ldrb	r3, [r3, #0]
   8ad20:	3b07      	subs	r3, #7
   8ad22:	2b4d      	cmp	r3, #77	; 0x4d
   8ad24:	f200 80f4 	bhi.w	8af10 <main+0x8b8>
   8ad28:	a201      	add	r2, pc, #4	; (adr r2, 8ad30 <main+0x6d8>)
   8ad2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ad2e:	bf00      	nop
   8ad30:	0008aea1 	.word	0x0008aea1
   8ad34:	0008af11 	.word	0x0008af11
   8ad38:	0008af11 	.word	0x0008af11
   8ad3c:	0008aea1 	.word	0x0008aea1
   8ad40:	0008aea1 	.word	0x0008aea1
   8ad44:	0008aea1 	.word	0x0008aea1
   8ad48:	0008af11 	.word	0x0008af11
   8ad4c:	0008af11 	.word	0x0008af11
   8ad50:	0008af11 	.word	0x0008af11
   8ad54:	0008af11 	.word	0x0008af11
   8ad58:	0008af11 	.word	0x0008af11
   8ad5c:	0008af11 	.word	0x0008af11
   8ad60:	0008af11 	.word	0x0008af11
   8ad64:	0008af11 	.word	0x0008af11
   8ad68:	0008af11 	.word	0x0008af11
   8ad6c:	0008af11 	.word	0x0008af11
   8ad70:	0008af11 	.word	0x0008af11
   8ad74:	0008af11 	.word	0x0008af11
   8ad78:	0008af11 	.word	0x0008af11
   8ad7c:	0008af11 	.word	0x0008af11
   8ad80:	0008af11 	.word	0x0008af11
   8ad84:	0008af11 	.word	0x0008af11
   8ad88:	0008af11 	.word	0x0008af11
   8ad8c:	0008af11 	.word	0x0008af11
   8ad90:	0008af11 	.word	0x0008af11
   8ad94:	0008af11 	.word	0x0008af11
   8ad98:	0008af11 	.word	0x0008af11
   8ad9c:	0008af11 	.word	0x0008af11
   8ada0:	0008af11 	.word	0x0008af11
   8ada4:	0008af11 	.word	0x0008af11
   8ada8:	0008af11 	.word	0x0008af11
   8adac:	0008af11 	.word	0x0008af11
   8adb0:	0008af11 	.word	0x0008af11
   8adb4:	0008af11 	.word	0x0008af11
   8adb8:	0008ae69 	.word	0x0008ae69
   8adbc:	0008af11 	.word	0x0008af11
   8adc0:	0008af11 	.word	0x0008af11
   8adc4:	0008af11 	.word	0x0008af11
   8adc8:	0008af11 	.word	0x0008af11
   8adcc:	0008ae69 	.word	0x0008ae69
   8add0:	0008af11 	.word	0x0008af11
   8add4:	0008af11 	.word	0x0008af11
   8add8:	0008af11 	.word	0x0008af11
   8addc:	0008af11 	.word	0x0008af11
   8ade0:	0008af11 	.word	0x0008af11
   8ade4:	0008af11 	.word	0x0008af11
   8ade8:	0008af11 	.word	0x0008af11
   8adec:	0008af11 	.word	0x0008af11
   8adf0:	0008af11 	.word	0x0008af11
   8adf4:	0008ae69 	.word	0x0008ae69
   8adf8:	0008ae69 	.word	0x0008ae69
   8adfc:	0008ae69 	.word	0x0008ae69
   8ae00:	0008ae69 	.word	0x0008ae69
   8ae04:	0008ae69 	.word	0x0008ae69
   8ae08:	0008af11 	.word	0x0008af11
   8ae0c:	0008af11 	.word	0x0008af11
   8ae10:	0008aea1 	.word	0x0008aea1
   8ae14:	0008aea1 	.word	0x0008aea1
   8ae18:	0008aea1 	.word	0x0008aea1
   8ae1c:	0008af11 	.word	0x0008af11
   8ae20:	0008af11 	.word	0x0008af11
   8ae24:	0008aebb 	.word	0x0008aebb
   8ae28:	0008aebb 	.word	0x0008aebb
   8ae2c:	0008af11 	.word	0x0008af11
   8ae30:	0008af11 	.word	0x0008af11
   8ae34:	0008af11 	.word	0x0008af11
   8ae38:	0008af11 	.word	0x0008af11
   8ae3c:	0008af11 	.word	0x0008af11
   8ae40:	0008af11 	.word	0x0008af11
   8ae44:	0008af11 	.word	0x0008af11
   8ae48:	0008af11 	.word	0x0008af11
   8ae4c:	0008af11 	.word	0x0008af11
   8ae50:	0008af11 	.word	0x0008af11
   8ae54:	0008af11 	.word	0x0008af11
   8ae58:	0008aea1 	.word	0x0008aea1
   8ae5c:	0008aed5 	.word	0x0008aed5
   8ae60:	0008aed5 	.word	0x0008aed5
   8ae64:	0008aeef 	.word	0x0008aeef
   8ae68:	4b30      	ldr	r3, [pc, #192]	; (8af2c <main+0x8d4>)
   8ae6a:	781b      	ldrb	r3, [r3, #0]
   8ae6c:	4618      	mov	r0, r3
   8ae6e:	4b32      	ldr	r3, [pc, #200]	; (8af38 <main+0x8e0>)
   8ae70:	4798      	blx	r3
   8ae72:	4603      	mov	r3, r0
   8ae74:	71fb      	strb	r3, [r7, #7]
   8ae76:	79fb      	ldrb	r3, [r7, #7]
   8ae78:	2b00      	cmp	r3, #0
   8ae7a:	d001      	beq.n	8ae80 <main+0x828>
   8ae7c:	4b2d      	ldr	r3, [pc, #180]	; (8af34 <main+0x8dc>)
   8ae7e:	4798      	blx	r3
   8ae80:	79fb      	ldrb	r3, [r7, #7]
   8ae82:	2b00      	cmp	r3, #0
   8ae84:	d146      	bne.n	8af14 <main+0x8bc>
   8ae86:	4b29      	ldr	r3, [pc, #164]	; (8af2c <main+0x8d4>)
   8ae88:	781b      	ldrb	r3, [r3, #0]
   8ae8a:	4618      	mov	r0, r3
   8ae8c:	4b2e      	ldr	r3, [pc, #184]	; (8af48 <main+0x8f0>)
   8ae8e:	4798      	blx	r3
   8ae90:	4603      	mov	r3, r0
   8ae92:	71fb      	strb	r3, [r7, #7]
   8ae94:	79fb      	ldrb	r3, [r7, #7]
   8ae96:	2b00      	cmp	r3, #0
   8ae98:	d03c      	beq.n	8af14 <main+0x8bc>
   8ae9a:	4b26      	ldr	r3, [pc, #152]	; (8af34 <main+0x8dc>)
   8ae9c:	4798      	blx	r3
   8ae9e:	e039      	b.n	8af14 <main+0x8bc>
   8aea0:	4b22      	ldr	r3, [pc, #136]	; (8af2c <main+0x8d4>)
   8aea2:	781b      	ldrb	r3, [r3, #0]
   8aea4:	4618      	mov	r0, r3
   8aea6:	4b24      	ldr	r3, [pc, #144]	; (8af38 <main+0x8e0>)
   8aea8:	4798      	blx	r3
   8aeaa:	4603      	mov	r3, r0
   8aeac:	71fb      	strb	r3, [r7, #7]
   8aeae:	79fb      	ldrb	r3, [r7, #7]
   8aeb0:	2b00      	cmp	r3, #0
   8aeb2:	d031      	beq.n	8af18 <main+0x8c0>
   8aeb4:	4b1f      	ldr	r3, [pc, #124]	; (8af34 <main+0x8dc>)
   8aeb6:	4798      	blx	r3
   8aeb8:	e02e      	b.n	8af18 <main+0x8c0>
   8aeba:	4b1c      	ldr	r3, [pc, #112]	; (8af2c <main+0x8d4>)
   8aebc:	781b      	ldrb	r3, [r3, #0]
   8aebe:	4618      	mov	r0, r3
   8aec0:	4b21      	ldr	r3, [pc, #132]	; (8af48 <main+0x8f0>)
   8aec2:	4798      	blx	r3
   8aec4:	4603      	mov	r3, r0
   8aec6:	71fb      	strb	r3, [r7, #7]
   8aec8:	79fb      	ldrb	r3, [r7, #7]
   8aeca:	2b00      	cmp	r3, #0
   8aecc:	d026      	beq.n	8af1c <main+0x8c4>
   8aece:	4b19      	ldr	r3, [pc, #100]	; (8af34 <main+0x8dc>)
   8aed0:	4798      	blx	r3
   8aed2:	e023      	b.n	8af1c <main+0x8c4>
   8aed4:	4b15      	ldr	r3, [pc, #84]	; (8af2c <main+0x8d4>)
   8aed6:	781b      	ldrb	r3, [r3, #0]
   8aed8:	4618      	mov	r0, r3
   8aeda:	4b17      	ldr	r3, [pc, #92]	; (8af38 <main+0x8e0>)
   8aedc:	4798      	blx	r3
   8aede:	4603      	mov	r3, r0
   8aee0:	71fb      	strb	r3, [r7, #7]
   8aee2:	79fb      	ldrb	r3, [r7, #7]
   8aee4:	2b00      	cmp	r3, #0
   8aee6:	d01b      	beq.n	8af20 <main+0x8c8>
   8aee8:	4b12      	ldr	r3, [pc, #72]	; (8af34 <main+0x8dc>)
   8aeea:	4798      	blx	r3
   8aeec:	e018      	b.n	8af20 <main+0x8c8>
   8aeee:	202b      	movs	r0, #43	; 0x2b
   8aef0:	4b14      	ldr	r3, [pc, #80]	; (8af44 <main+0x8ec>)
   8aef2:	4798      	blx	r3
   8aef4:	4603      	mov	r3, r0
   8aef6:	71fb      	strb	r3, [r7, #7]
   8aef8:	79fb      	ldrb	r3, [r7, #7]
   8aefa:	2b00      	cmp	r3, #0
   8aefc:	d001      	beq.n	8af02 <main+0x8aa>
   8aefe:	4b0d      	ldr	r3, [pc, #52]	; (8af34 <main+0x8dc>)
   8af00:	4798      	blx	r3
   8af02:	4b0e      	ldr	r3, [pc, #56]	; (8af3c <main+0x8e4>)
   8af04:	2205      	movs	r2, #5
   8af06:	701a      	strb	r2, [r3, #0]
   8af08:	4b08      	ldr	r3, [pc, #32]	; (8af2c <main+0x8d4>)
   8af0a:	2200      	movs	r2, #0
   8af0c:	701a      	strb	r2, [r3, #0]
   8af0e:	e008      	b.n	8af22 <main+0x8ca>
   8af10:	bf00      	nop
   8af12:	e006      	b.n	8af22 <main+0x8ca>
   8af14:	bf00      	nop
   8af16:	e004      	b.n	8af22 <main+0x8ca>
   8af18:	bf00      	nop
   8af1a:	e002      	b.n	8af22 <main+0x8ca>
   8af1c:	bf00      	nop
   8af1e:	e000      	b.n	8af22 <main+0x8ca>
   8af20:	bf00      	nop
   8af22:	4b02      	ldr	r3, [pc, #8]	; (8af2c <main+0x8d4>)
   8af24:	2200      	movs	r2, #0
   8af26:	701a      	strb	r2, [r3, #0]
   8af28:	f001 bbdd 	b.w	8c6e6 <main+0x208e>
   8af2c:	20072172 	.word	0x20072172
   8af30:	00085431 	.word	0x00085431
   8af34:	00088725 	.word	0x00088725
   8af38:	00099ebd 	.word	0x00099ebd
   8af3c:	200704b0 	.word	0x200704b0
   8af40:	00099729 	.word	0x00099729
   8af44:	000a254d 	.word	0x000a254d
   8af48:	0009fbdd 	.word	0x0009fbdd
   8af4c:	0009bbc1 	.word	0x0009bbc1
   8af50:	4bc7      	ldr	r3, [pc, #796]	; (8b270 <main+0xc18>)
   8af52:	781b      	ldrb	r3, [r3, #0]
   8af54:	3b07      	subs	r3, #7
   8af56:	2b27      	cmp	r3, #39	; 0x27
   8af58:	d852      	bhi.n	8b000 <main+0x9a8>
   8af5a:	a201      	add	r2, pc, #4	; (adr r2, 8af60 <main+0x908>)
   8af5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8af60:	0008b001 	.word	0x0008b001
   8af64:	0008b001 	.word	0x0008b001
   8af68:	0008b001 	.word	0x0008b001
   8af6c:	0008b001 	.word	0x0008b001
   8af70:	0008b001 	.word	0x0008b001
   8af74:	0008b001 	.word	0x0008b001
   8af78:	0008b001 	.word	0x0008b001
   8af7c:	0008b001 	.word	0x0008b001
   8af80:	0008b001 	.word	0x0008b001
   8af84:	0008b001 	.word	0x0008b001
   8af88:	0008b001 	.word	0x0008b001
   8af8c:	0008b001 	.word	0x0008b001
   8af90:	0008b001 	.word	0x0008b001
   8af94:	0008b001 	.word	0x0008b001
   8af98:	0008b001 	.word	0x0008b001
   8af9c:	0008b001 	.word	0x0008b001
   8afa0:	0008b001 	.word	0x0008b001
   8afa4:	0008b001 	.word	0x0008b001
   8afa8:	0008b001 	.word	0x0008b001
   8afac:	0008b001 	.word	0x0008b001
   8afb0:	0008b001 	.word	0x0008b001
   8afb4:	0008b001 	.word	0x0008b001
   8afb8:	0008b001 	.word	0x0008b001
   8afbc:	0008b001 	.word	0x0008b001
   8afc0:	0008b001 	.word	0x0008b001
   8afc4:	0008b001 	.word	0x0008b001
   8afc8:	0008b001 	.word	0x0008b001
   8afcc:	0008b001 	.word	0x0008b001
   8afd0:	0008b001 	.word	0x0008b001
   8afd4:	0008b001 	.word	0x0008b001
   8afd8:	0008b001 	.word	0x0008b001
   8afdc:	0008b001 	.word	0x0008b001
   8afe0:	0008b001 	.word	0x0008b001
   8afe4:	0008b001 	.word	0x0008b001
   8afe8:	0008b001 	.word	0x0008b001
   8afec:	0008b001 	.word	0x0008b001
   8aff0:	0008b001 	.word	0x0008b001
   8aff4:	0008b001 	.word	0x0008b001
   8aff8:	0008b001 	.word	0x0008b001
   8affc:	0008b001 	.word	0x0008b001
   8b000:	bf00      	nop
   8b002:	f001 bb70 	b.w	8c6e6 <main+0x208e>
   8b006:	4b9a      	ldr	r3, [pc, #616]	; (8b270 <main+0xc18>)
   8b008:	781b      	ldrb	r3, [r3, #0]
   8b00a:	3b07      	subs	r3, #7
   8b00c:	2b4a      	cmp	r3, #74	; 0x4a
   8b00e:	f200 814c 	bhi.w	8b2aa <main+0xc52>
   8b012:	a201      	add	r2, pc, #4	; (adr r2, 8b018 <main+0x9c0>)
   8b014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b018:	0008b145 	.word	0x0008b145
   8b01c:	0008b237 	.word	0x0008b237
   8b020:	0008b1c9 	.word	0x0008b1c9
   8b024:	0008b291 	.word	0x0008b291
   8b028:	0008b291 	.word	0x0008b291
   8b02c:	0008b291 	.word	0x0008b291
   8b030:	0008b2ab 	.word	0x0008b2ab
   8b034:	0008b2ab 	.word	0x0008b2ab
   8b038:	0008b257 	.word	0x0008b257
   8b03c:	0008b257 	.word	0x0008b257
   8b040:	0008b2ab 	.word	0x0008b2ab
   8b044:	0008b2ab 	.word	0x0008b2ab
   8b048:	0008b2ab 	.word	0x0008b2ab
   8b04c:	0008b2ab 	.word	0x0008b2ab
   8b050:	0008b2ab 	.word	0x0008b2ab
   8b054:	0008b2ab 	.word	0x0008b2ab
   8b058:	0008b2ab 	.word	0x0008b2ab
   8b05c:	0008b2ab 	.word	0x0008b2ab
   8b060:	0008b2ab 	.word	0x0008b2ab
   8b064:	0008b2ab 	.word	0x0008b2ab
   8b068:	0008b2ab 	.word	0x0008b2ab
   8b06c:	0008b2ab 	.word	0x0008b2ab
   8b070:	0008b2ab 	.word	0x0008b2ab
   8b074:	0008b2ab 	.word	0x0008b2ab
   8b078:	0008b257 	.word	0x0008b257
   8b07c:	0008b257 	.word	0x0008b257
   8b080:	0008b2ab 	.word	0x0008b2ab
   8b084:	0008b2ab 	.word	0x0008b2ab
   8b088:	0008b2ab 	.word	0x0008b2ab
   8b08c:	0008b2ab 	.word	0x0008b2ab
   8b090:	0008b2ab 	.word	0x0008b2ab
   8b094:	0008b291 	.word	0x0008b291
   8b098:	0008b291 	.word	0x0008b291
   8b09c:	0008b291 	.word	0x0008b291
   8b0a0:	0008b1c9 	.word	0x0008b1c9
   8b0a4:	0008b2ab 	.word	0x0008b2ab
   8b0a8:	0008b2ab 	.word	0x0008b2ab
   8b0ac:	0008b2ab 	.word	0x0008b2ab
   8b0b0:	0008b1c9 	.word	0x0008b1c9
   8b0b4:	0008b1c9 	.word	0x0008b1c9
   8b0b8:	0008b2ab 	.word	0x0008b2ab
   8b0bc:	0008b2ab 	.word	0x0008b2ab
   8b0c0:	0008b1a9 	.word	0x0008b1a9
   8b0c4:	0008b2ab 	.word	0x0008b2ab
   8b0c8:	0008b2ab 	.word	0x0008b2ab
   8b0cc:	0008b2ab 	.word	0x0008b2ab
   8b0d0:	0008b2ab 	.word	0x0008b2ab
   8b0d4:	0008b2ab 	.word	0x0008b2ab
   8b0d8:	0008b2ab 	.word	0x0008b2ab
   8b0dc:	0008b1c9 	.word	0x0008b1c9
   8b0e0:	0008b1c9 	.word	0x0008b1c9
   8b0e4:	0008b1c9 	.word	0x0008b1c9
   8b0e8:	0008b1c9 	.word	0x0008b1c9
   8b0ec:	0008b1c9 	.word	0x0008b1c9
   8b0f0:	0008b1c9 	.word	0x0008b1c9
   8b0f4:	0008b2ab 	.word	0x0008b2ab
   8b0f8:	0008b2ab 	.word	0x0008b2ab
   8b0fc:	0008b2ab 	.word	0x0008b2ab
   8b100:	0008b2ab 	.word	0x0008b2ab
   8b104:	0008b2ab 	.word	0x0008b2ab
   8b108:	0008b2ab 	.word	0x0008b2ab
   8b10c:	0008b2ab 	.word	0x0008b2ab
   8b110:	0008b2ab 	.word	0x0008b2ab
   8b114:	0008b2ab 	.word	0x0008b2ab
   8b118:	0008b2ab 	.word	0x0008b2ab
   8b11c:	0008b1e9 	.word	0x0008b1e9
   8b120:	0008b2ab 	.word	0x0008b2ab
   8b124:	0008b2ab 	.word	0x0008b2ab
   8b128:	0008b2ab 	.word	0x0008b2ab
   8b12c:	0008b2ab 	.word	0x0008b2ab
   8b130:	0008b2ab 	.word	0x0008b2ab
   8b134:	0008b2ab 	.word	0x0008b2ab
   8b138:	0008b2ab 	.word	0x0008b2ab
   8b13c:	0008b2ab 	.word	0x0008b2ab
   8b140:	0008b1c9 	.word	0x0008b1c9
   8b144:	4b4b      	ldr	r3, [pc, #300]	; (8b274 <main+0xc1c>)
   8b146:	2200      	movs	r2, #0
   8b148:	601a      	str	r2, [r3, #0]
   8b14a:	4b49      	ldr	r3, [pc, #292]	; (8b270 <main+0xc18>)
   8b14c:	781b      	ldrb	r3, [r3, #0]
   8b14e:	4618      	mov	r0, r3
   8b150:	4b49      	ldr	r3, [pc, #292]	; (8b278 <main+0xc20>)
   8b152:	4798      	blx	r3
   8b154:	4603      	mov	r3, r0
   8b156:	71fb      	strb	r3, [r7, #7]
   8b158:	79fb      	ldrb	r3, [r7, #7]
   8b15a:	2b00      	cmp	r3, #0
   8b15c:	d001      	beq.n	8b162 <main+0xb0a>
   8b15e:	4b47      	ldr	r3, [pc, #284]	; (8b27c <main+0xc24>)
   8b160:	4798      	blx	r3
   8b162:	79fb      	ldrb	r3, [r7, #7]
   8b164:	2b00      	cmp	r3, #0
   8b166:	d10c      	bne.n	8b182 <main+0xb2a>
   8b168:	4b41      	ldr	r3, [pc, #260]	; (8b270 <main+0xc18>)
   8b16a:	781b      	ldrb	r3, [r3, #0]
   8b16c:	4618      	mov	r0, r3
   8b16e:	4b44      	ldr	r3, [pc, #272]	; (8b280 <main+0xc28>)
   8b170:	4798      	blx	r3
   8b172:	4603      	mov	r3, r0
   8b174:	71fb      	strb	r3, [r7, #7]
   8b176:	79fb      	ldrb	r3, [r7, #7]
   8b178:	2b00      	cmp	r3, #0
   8b17a:	d011      	beq.n	8b1a0 <main+0xb48>
   8b17c:	4b3f      	ldr	r3, [pc, #252]	; (8b27c <main+0xc24>)
   8b17e:	4798      	blx	r3
   8b180:	e00e      	b.n	8b1a0 <main+0xb48>
   8b182:	79fb      	ldrb	r3, [r7, #7]
   8b184:	2b00      	cmp	r3, #0
   8b186:	d10b      	bne.n	8b1a0 <main+0xb48>
   8b188:	4b39      	ldr	r3, [pc, #228]	; (8b270 <main+0xc18>)
   8b18a:	781b      	ldrb	r3, [r3, #0]
   8b18c:	4618      	mov	r0, r3
   8b18e:	4b3c      	ldr	r3, [pc, #240]	; (8b280 <main+0xc28>)
   8b190:	4798      	blx	r3
   8b192:	4603      	mov	r3, r0
   8b194:	71fb      	strb	r3, [r7, #7]
   8b196:	79fb      	ldrb	r3, [r7, #7]
   8b198:	2b00      	cmp	r3, #0
   8b19a:	d001      	beq.n	8b1a0 <main+0xb48>
   8b19c:	4b37      	ldr	r3, [pc, #220]	; (8b27c <main+0xc24>)
   8b19e:	4798      	blx	r3
   8b1a0:	4b33      	ldr	r3, [pc, #204]	; (8b270 <main+0xc18>)
   8b1a2:	2200      	movs	r2, #0
   8b1a4:	701a      	strb	r2, [r3, #0]
   8b1a6:	e087      	b.n	8b2b8 <main+0xc60>
   8b1a8:	4b31      	ldr	r3, [pc, #196]	; (8b270 <main+0xc18>)
   8b1aa:	781b      	ldrb	r3, [r3, #0]
   8b1ac:	4618      	mov	r0, r3
   8b1ae:	4b34      	ldr	r3, [pc, #208]	; (8b280 <main+0xc28>)
   8b1b0:	4798      	blx	r3
   8b1b2:	4603      	mov	r3, r0
   8b1b4:	71fb      	strb	r3, [r7, #7]
   8b1b6:	79fb      	ldrb	r3, [r7, #7]
   8b1b8:	2b00      	cmp	r3, #0
   8b1ba:	d001      	beq.n	8b1c0 <main+0xb68>
   8b1bc:	4b2f      	ldr	r3, [pc, #188]	; (8b27c <main+0xc24>)
   8b1be:	4798      	blx	r3
   8b1c0:	4b2b      	ldr	r3, [pc, #172]	; (8b270 <main+0xc18>)
   8b1c2:	2200      	movs	r2, #0
   8b1c4:	701a      	strb	r2, [r3, #0]
   8b1c6:	e077      	b.n	8b2b8 <main+0xc60>
   8b1c8:	4b29      	ldr	r3, [pc, #164]	; (8b270 <main+0xc18>)
   8b1ca:	781b      	ldrb	r3, [r3, #0]
   8b1cc:	4618      	mov	r0, r3
   8b1ce:	4b2c      	ldr	r3, [pc, #176]	; (8b280 <main+0xc28>)
   8b1d0:	4798      	blx	r3
   8b1d2:	4603      	mov	r3, r0
   8b1d4:	71fb      	strb	r3, [r7, #7]
   8b1d6:	79fb      	ldrb	r3, [r7, #7]
   8b1d8:	2b00      	cmp	r3, #0
   8b1da:	d001      	beq.n	8b1e0 <main+0xb88>
   8b1dc:	4b27      	ldr	r3, [pc, #156]	; (8b27c <main+0xc24>)
   8b1de:	4798      	blx	r3
   8b1e0:	4b23      	ldr	r3, [pc, #140]	; (8b270 <main+0xc18>)
   8b1e2:	2200      	movs	r2, #0
   8b1e4:	701a      	strb	r2, [r3, #0]
   8b1e6:	e067      	b.n	8b2b8 <main+0xc60>
   8b1e8:	4b21      	ldr	r3, [pc, #132]	; (8b270 <main+0xc18>)
   8b1ea:	781b      	ldrb	r3, [r3, #0]
   8b1ec:	4618      	mov	r0, r3
   8b1ee:	4b24      	ldr	r3, [pc, #144]	; (8b280 <main+0xc28>)
   8b1f0:	4798      	blx	r3
   8b1f2:	4603      	mov	r3, r0
   8b1f4:	71fb      	strb	r3, [r7, #7]
   8b1f6:	79fb      	ldrb	r3, [r7, #7]
   8b1f8:	2b00      	cmp	r3, #0
   8b1fa:	d001      	beq.n	8b200 <main+0xba8>
   8b1fc:	4b1f      	ldr	r3, [pc, #124]	; (8b27c <main+0xc24>)
   8b1fe:	4798      	blx	r3
   8b200:	79fb      	ldrb	r3, [r7, #7]
   8b202:	2b00      	cmp	r3, #0
   8b204:	d10f      	bne.n	8b226 <main+0xbce>
   8b206:	4b1f      	ldr	r3, [pc, #124]	; (8b284 <main+0xc2c>)
   8b208:	220a      	movs	r2, #10
   8b20a:	701a      	strb	r2, [r3, #0]
   8b20c:	230a      	movs	r3, #10
   8b20e:	707b      	strb	r3, [r7, #1]
   8b210:	787b      	ldrb	r3, [r7, #1]
   8b212:	2201      	movs	r2, #1
   8b214:	4619      	mov	r1, r3
   8b216:	2045      	movs	r0, #69	; 0x45
   8b218:	4b1b      	ldr	r3, [pc, #108]	; (8b288 <main+0xc30>)
   8b21a:	4798      	blx	r3
   8b21c:	79fb      	ldrb	r3, [r7, #7]
   8b21e:	2b00      	cmp	r3, #0
   8b220:	d001      	beq.n	8b226 <main+0xbce>
   8b222:	4b16      	ldr	r3, [pc, #88]	; (8b27c <main+0xc24>)
   8b224:	4798      	blx	r3
   8b226:	4b19      	ldr	r3, [pc, #100]	; (8b28c <main+0xc34>)
   8b228:	4798      	blx	r3
   8b22a:	4603      	mov	r3, r0
   8b22c:	71fb      	strb	r3, [r7, #7]
   8b22e:	4b10      	ldr	r3, [pc, #64]	; (8b270 <main+0xc18>)
   8b230:	2200      	movs	r2, #0
   8b232:	701a      	strb	r2, [r3, #0]
   8b234:	e040      	b.n	8b2b8 <main+0xc60>
   8b236:	4b0e      	ldr	r3, [pc, #56]	; (8b270 <main+0xc18>)
   8b238:	781b      	ldrb	r3, [r3, #0]
   8b23a:	4618      	mov	r0, r3
   8b23c:	4b10      	ldr	r3, [pc, #64]	; (8b280 <main+0xc28>)
   8b23e:	4798      	blx	r3
   8b240:	4603      	mov	r3, r0
   8b242:	71fb      	strb	r3, [r7, #7]
   8b244:	79fb      	ldrb	r3, [r7, #7]
   8b246:	2b00      	cmp	r3, #0
   8b248:	d001      	beq.n	8b24e <main+0xbf6>
   8b24a:	4b0c      	ldr	r3, [pc, #48]	; (8b27c <main+0xc24>)
   8b24c:	4798      	blx	r3
   8b24e:	4b08      	ldr	r3, [pc, #32]	; (8b270 <main+0xc18>)
   8b250:	2200      	movs	r2, #0
   8b252:	701a      	strb	r2, [r3, #0]
   8b254:	e030      	b.n	8b2b8 <main+0xc60>
   8b256:	4b06      	ldr	r3, [pc, #24]	; (8b270 <main+0xc18>)
   8b258:	781b      	ldrb	r3, [r3, #0]
   8b25a:	4618      	mov	r0, r3
   8b25c:	4b08      	ldr	r3, [pc, #32]	; (8b280 <main+0xc28>)
   8b25e:	4798      	blx	r3
   8b260:	4603      	mov	r3, r0
   8b262:	71fb      	strb	r3, [r7, #7]
   8b264:	79fb      	ldrb	r3, [r7, #7]
   8b266:	2b00      	cmp	r3, #0
   8b268:	d022      	beq.n	8b2b0 <main+0xc58>
   8b26a:	4b04      	ldr	r3, [pc, #16]	; (8b27c <main+0xc24>)
   8b26c:	4798      	blx	r3
   8b26e:	e01f      	b.n	8b2b0 <main+0xc58>
   8b270:	20072172 	.word	0x20072172
   8b274:	20072178 	.word	0x20072178
   8b278:	000a254d 	.word	0x000a254d
   8b27c:	00088725 	.word	0x00088725
   8b280:	0009fbdd 	.word	0x0009fbdd
   8b284:	200704b0 	.word	0x200704b0
   8b288:	00099729 	.word	0x00099729
   8b28c:	00085321 	.word	0x00085321
   8b290:	4bb1      	ldr	r3, [pc, #708]	; (8b558 <main+0xf00>)
   8b292:	781b      	ldrb	r3, [r3, #0]
   8b294:	4618      	mov	r0, r3
   8b296:	4bb1      	ldr	r3, [pc, #708]	; (8b55c <main+0xf04>)
   8b298:	4798      	blx	r3
   8b29a:	4603      	mov	r3, r0
   8b29c:	71fb      	strb	r3, [r7, #7]
   8b29e:	79fb      	ldrb	r3, [r7, #7]
   8b2a0:	2b00      	cmp	r3, #0
   8b2a2:	d008      	beq.n	8b2b6 <main+0xc5e>
   8b2a4:	4bae      	ldr	r3, [pc, #696]	; (8b560 <main+0xf08>)
   8b2a6:	4798      	blx	r3
   8b2a8:	e005      	b.n	8b2b6 <main+0xc5e>
   8b2aa:	bf00      	nop
   8b2ac:	f001 ba1b 	b.w	8c6e6 <main+0x208e>
   8b2b0:	bf00      	nop
   8b2b2:	f001 ba18 	b.w	8c6e6 <main+0x208e>
   8b2b6:	bf00      	nop
   8b2b8:	f001 ba15 	b.w	8c6e6 <main+0x208e>
   8b2bc:	4ba6      	ldr	r3, [pc, #664]	; (8b558 <main+0xf00>)
   8b2be:	781b      	ldrb	r3, [r3, #0]
   8b2c0:	3b07      	subs	r3, #7
   8b2c2:	2b38      	cmp	r3, #56	; 0x38
   8b2c4:	f200 816d 	bhi.w	8b5a2 <main+0xf4a>
   8b2c8:	a201      	add	r2, pc, #4	; (adr r2, 8b2d0 <main+0xc78>)
   8b2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b2ce:	bf00      	nop
   8b2d0:	0008b40b 	.word	0x0008b40b
   8b2d4:	0008b5a3 	.word	0x0008b5a3
   8b2d8:	0008b473 	.word	0x0008b473
   8b2dc:	0008b57d 	.word	0x0008b57d
   8b2e0:	0008b57d 	.word	0x0008b57d
   8b2e4:	0008b57d 	.word	0x0008b57d
   8b2e8:	0008b5a3 	.word	0x0008b5a3
   8b2ec:	0008b5a3 	.word	0x0008b5a3
   8b2f0:	0008b53f 	.word	0x0008b53f
   8b2f4:	0008b53f 	.word	0x0008b53f
   8b2f8:	0008b5a3 	.word	0x0008b5a3
   8b2fc:	0008b5a3 	.word	0x0008b5a3
   8b300:	0008b5a3 	.word	0x0008b5a3
   8b304:	0008b5a3 	.word	0x0008b5a3
   8b308:	0008b5a3 	.word	0x0008b5a3
   8b30c:	0008b5a3 	.word	0x0008b5a3
   8b310:	0008b5a3 	.word	0x0008b5a3
   8b314:	0008b5a3 	.word	0x0008b5a3
   8b318:	0008b5a3 	.word	0x0008b5a3
   8b31c:	0008b5a3 	.word	0x0008b5a3
   8b320:	0008b5a3 	.word	0x0008b5a3
   8b324:	0008b5a3 	.word	0x0008b5a3
   8b328:	0008b4f3 	.word	0x0008b4f3
   8b32c:	0008b5a3 	.word	0x0008b5a3
   8b330:	0008b519 	.word	0x0008b519
   8b334:	0008b519 	.word	0x0008b519
   8b338:	0008b5a3 	.word	0x0008b5a3
   8b33c:	0008b5a3 	.word	0x0008b5a3
   8b340:	0008b5a3 	.word	0x0008b5a3
   8b344:	0008b5a3 	.word	0x0008b5a3
   8b348:	0008b5a3 	.word	0x0008b5a3
   8b34c:	0008b57d 	.word	0x0008b57d
   8b350:	0008b57d 	.word	0x0008b57d
   8b354:	0008b57d 	.word	0x0008b57d
   8b358:	0008b5a3 	.word	0x0008b5a3
   8b35c:	0008b5a3 	.word	0x0008b5a3
   8b360:	0008b5a3 	.word	0x0008b5a3
   8b364:	0008b5a3 	.word	0x0008b5a3
   8b368:	0008b3b5 	.word	0x0008b3b5
   8b36c:	0008b3b5 	.word	0x0008b3b5
   8b370:	0008b5a3 	.word	0x0008b5a3
   8b374:	0008b5a3 	.word	0x0008b5a3
   8b378:	0008b5a3 	.word	0x0008b5a3
   8b37c:	0008b5a3 	.word	0x0008b5a3
   8b380:	0008b5a3 	.word	0x0008b5a3
   8b384:	0008b5a3 	.word	0x0008b5a3
   8b388:	0008b5a3 	.word	0x0008b5a3
   8b38c:	0008b5a3 	.word	0x0008b5a3
   8b390:	0008b5a3 	.word	0x0008b5a3
   8b394:	0008b5a3 	.word	0x0008b5a3
   8b398:	0008b5a3 	.word	0x0008b5a3
   8b39c:	0008b5a3 	.word	0x0008b5a3
   8b3a0:	0008b5a3 	.word	0x0008b5a3
   8b3a4:	0008b5a3 	.word	0x0008b5a3
   8b3a8:	0008b5a3 	.word	0x0008b5a3
   8b3ac:	0008b5a3 	.word	0x0008b5a3
   8b3b0:	0008b3c5 	.word	0x0008b3c5
   8b3b4:	4b68      	ldr	r3, [pc, #416]	; (8b558 <main+0xf00>)
   8b3b6:	781b      	ldrb	r3, [r3, #0]
   8b3b8:	4618      	mov	r0, r3
   8b3ba:	4b68      	ldr	r3, [pc, #416]	; (8b55c <main+0xf04>)
   8b3bc:	4798      	blx	r3
   8b3be:	4603      	mov	r3, r0
   8b3c0:	71fb      	strb	r3, [r7, #7]
   8b3c2:	e101      	b.n	8b5c8 <main+0xf70>
   8b3c4:	4b64      	ldr	r3, [pc, #400]	; (8b558 <main+0xf00>)
   8b3c6:	781b      	ldrb	r3, [r3, #0]
   8b3c8:	4618      	mov	r0, r3
   8b3ca:	4b66      	ldr	r3, [pc, #408]	; (8b564 <main+0xf0c>)
   8b3cc:	4798      	blx	r3
   8b3ce:	4603      	mov	r3, r0
   8b3d0:	71fb      	strb	r3, [r7, #7]
   8b3d2:	79fb      	ldrb	r3, [r7, #7]
   8b3d4:	2b00      	cmp	r3, #0
   8b3d6:	d001      	beq.n	8b3dc <main+0xd84>
   8b3d8:	4b61      	ldr	r3, [pc, #388]	; (8b560 <main+0xf08>)
   8b3da:	4798      	blx	r3
   8b3dc:	79fb      	ldrb	r3, [r7, #7]
   8b3de:	2b00      	cmp	r3, #0
   8b3e0:	d10b      	bne.n	8b3fa <main+0xda2>
   8b3e2:	4b5d      	ldr	r3, [pc, #372]	; (8b558 <main+0xf00>)
   8b3e4:	781b      	ldrb	r3, [r3, #0]
   8b3e6:	4618      	mov	r0, r3
   8b3e8:	4b5f      	ldr	r3, [pc, #380]	; (8b568 <main+0xf10>)
   8b3ea:	4798      	blx	r3
   8b3ec:	4603      	mov	r3, r0
   8b3ee:	71fb      	strb	r3, [r7, #7]
   8b3f0:	79fb      	ldrb	r3, [r7, #7]
   8b3f2:	2b00      	cmp	r3, #0
   8b3f4:	d001      	beq.n	8b3fa <main+0xda2>
   8b3f6:	4b5a      	ldr	r3, [pc, #360]	; (8b560 <main+0xf08>)
   8b3f8:	4798      	blx	r3
   8b3fa:	79fb      	ldrb	r3, [r7, #7]
   8b3fc:	2b00      	cmp	r3, #0
   8b3fe:	f040 80d3 	bne.w	8b5a8 <main+0xf50>
   8b402:	4b5a      	ldr	r3, [pc, #360]	; (8b56c <main+0xf14>)
   8b404:	2208      	movs	r2, #8
   8b406:	701a      	strb	r2, [r3, #0]
   8b408:	e0ce      	b.n	8b5a8 <main+0xf50>
   8b40a:	4b53      	ldr	r3, [pc, #332]	; (8b558 <main+0xf00>)
   8b40c:	781b      	ldrb	r3, [r3, #0]
   8b40e:	4618      	mov	r0, r3
   8b410:	4b57      	ldr	r3, [pc, #348]	; (8b570 <main+0xf18>)
   8b412:	4798      	blx	r3
   8b414:	4603      	mov	r3, r0
   8b416:	71fb      	strb	r3, [r7, #7]
   8b418:	79fb      	ldrb	r3, [r7, #7]
   8b41a:	2b00      	cmp	r3, #0
   8b41c:	d001      	beq.n	8b422 <main+0xdca>
   8b41e:	4b50      	ldr	r3, [pc, #320]	; (8b560 <main+0xf08>)
   8b420:	4798      	blx	r3
   8b422:	79fb      	ldrb	r3, [r7, #7]
   8b424:	2b00      	cmp	r3, #0
   8b426:	d10b      	bne.n	8b440 <main+0xde8>
   8b428:	4b4b      	ldr	r3, [pc, #300]	; (8b558 <main+0xf00>)
   8b42a:	781b      	ldrb	r3, [r3, #0]
   8b42c:	4618      	mov	r0, r3
   8b42e:	4b4b      	ldr	r3, [pc, #300]	; (8b55c <main+0xf04>)
   8b430:	4798      	blx	r3
   8b432:	4603      	mov	r3, r0
   8b434:	71fb      	strb	r3, [r7, #7]
   8b436:	79fb      	ldrb	r3, [r7, #7]
   8b438:	2b00      	cmp	r3, #0
   8b43a:	d001      	beq.n	8b440 <main+0xde8>
   8b43c:	4b48      	ldr	r3, [pc, #288]	; (8b560 <main+0xf08>)
   8b43e:	4798      	blx	r3
   8b440:	79fb      	ldrb	r3, [r7, #7]
   8b442:	2b00      	cmp	r3, #0
   8b444:	d102      	bne.n	8b44c <main+0xdf4>
   8b446:	4b49      	ldr	r3, [pc, #292]	; (8b56c <main+0xf14>)
   8b448:	2207      	movs	r2, #7
   8b44a:	701a      	strb	r2, [r3, #0]
   8b44c:	79fb      	ldrb	r3, [r7, #7]
   8b44e:	2b00      	cmp	r3, #0
   8b450:	d10b      	bne.n	8b46a <main+0xe12>
   8b452:	2201      	movs	r2, #1
   8b454:	2107      	movs	r1, #7
   8b456:	2045      	movs	r0, #69	; 0x45
   8b458:	4b46      	ldr	r3, [pc, #280]	; (8b574 <main+0xf1c>)
   8b45a:	4798      	blx	r3
   8b45c:	4603      	mov	r3, r0
   8b45e:	71fb      	strb	r3, [r7, #7]
   8b460:	79fb      	ldrb	r3, [r7, #7]
   8b462:	2b00      	cmp	r3, #0
   8b464:	d001      	beq.n	8b46a <main+0xe12>
   8b466:	4b3e      	ldr	r3, [pc, #248]	; (8b560 <main+0xf08>)
   8b468:	4798      	blx	r3
   8b46a:	4b3b      	ldr	r3, [pc, #236]	; (8b558 <main+0xf00>)
   8b46c:	2200      	movs	r2, #0
   8b46e:	701a      	strb	r2, [r3, #0]
   8b470:	e0aa      	b.n	8b5c8 <main+0xf70>
   8b472:	4b39      	ldr	r3, [pc, #228]	; (8b558 <main+0xf00>)
   8b474:	781b      	ldrb	r3, [r3, #0]
   8b476:	4618      	mov	r0, r3
   8b478:	4b3d      	ldr	r3, [pc, #244]	; (8b570 <main+0xf18>)
   8b47a:	4798      	blx	r3
   8b47c:	4603      	mov	r3, r0
   8b47e:	71fb      	strb	r3, [r7, #7]
   8b480:	79fb      	ldrb	r3, [r7, #7]
   8b482:	2b00      	cmp	r3, #0
   8b484:	d001      	beq.n	8b48a <main+0xe32>
   8b486:	4b36      	ldr	r3, [pc, #216]	; (8b560 <main+0xf08>)
   8b488:	4798      	blx	r3
   8b48a:	79fb      	ldrb	r3, [r7, #7]
   8b48c:	2b00      	cmp	r3, #0
   8b48e:	d10b      	bne.n	8b4a8 <main+0xe50>
   8b490:	4b31      	ldr	r3, [pc, #196]	; (8b558 <main+0xf00>)
   8b492:	781b      	ldrb	r3, [r3, #0]
   8b494:	4618      	mov	r0, r3
   8b496:	4b31      	ldr	r3, [pc, #196]	; (8b55c <main+0xf04>)
   8b498:	4798      	blx	r3
   8b49a:	4603      	mov	r3, r0
   8b49c:	71fb      	strb	r3, [r7, #7]
   8b49e:	79fb      	ldrb	r3, [r7, #7]
   8b4a0:	2b00      	cmp	r3, #0
   8b4a2:	d001      	beq.n	8b4a8 <main+0xe50>
   8b4a4:	4b2e      	ldr	r3, [pc, #184]	; (8b560 <main+0xf08>)
   8b4a6:	4798      	blx	r3
   8b4a8:	79fb      	ldrb	r3, [r7, #7]
   8b4aa:	2b00      	cmp	r3, #0
   8b4ac:	d10b      	bne.n	8b4c6 <main+0xe6e>
   8b4ae:	4b2a      	ldr	r3, [pc, #168]	; (8b558 <main+0xf00>)
   8b4b0:	781b      	ldrb	r3, [r3, #0]
   8b4b2:	4618      	mov	r0, r3
   8b4b4:	4b30      	ldr	r3, [pc, #192]	; (8b578 <main+0xf20>)
   8b4b6:	4798      	blx	r3
   8b4b8:	4603      	mov	r3, r0
   8b4ba:	71fb      	strb	r3, [r7, #7]
   8b4bc:	79fb      	ldrb	r3, [r7, #7]
   8b4be:	2b00      	cmp	r3, #0
   8b4c0:	d001      	beq.n	8b4c6 <main+0xe6e>
   8b4c2:	4b27      	ldr	r3, [pc, #156]	; (8b560 <main+0xf08>)
   8b4c4:	4798      	blx	r3
   8b4c6:	79fb      	ldrb	r3, [r7, #7]
   8b4c8:	2b00      	cmp	r3, #0
   8b4ca:	d102      	bne.n	8b4d2 <main+0xe7a>
   8b4cc:	4b27      	ldr	r3, [pc, #156]	; (8b56c <main+0xf14>)
   8b4ce:	220b      	movs	r2, #11
   8b4d0:	701a      	strb	r2, [r3, #0]
   8b4d2:	79fb      	ldrb	r3, [r7, #7]
   8b4d4:	2b00      	cmp	r3, #0
   8b4d6:	d16a      	bne.n	8b5ae <main+0xf56>
   8b4d8:	2201      	movs	r2, #1
   8b4da:	210b      	movs	r1, #11
   8b4dc:	2045      	movs	r0, #69	; 0x45
   8b4de:	4b25      	ldr	r3, [pc, #148]	; (8b574 <main+0xf1c>)
   8b4e0:	4798      	blx	r3
   8b4e2:	4603      	mov	r3, r0
   8b4e4:	71fb      	strb	r3, [r7, #7]
   8b4e6:	79fb      	ldrb	r3, [r7, #7]
   8b4e8:	2b00      	cmp	r3, #0
   8b4ea:	d060      	beq.n	8b5ae <main+0xf56>
   8b4ec:	4b1c      	ldr	r3, [pc, #112]	; (8b560 <main+0xf08>)
   8b4ee:	4798      	blx	r3
   8b4f0:	e05d      	b.n	8b5ae <main+0xf56>
   8b4f2:	4b19      	ldr	r3, [pc, #100]	; (8b558 <main+0xf00>)
   8b4f4:	781b      	ldrb	r3, [r3, #0]
   8b4f6:	4618      	mov	r0, r3
   8b4f8:	4b1f      	ldr	r3, [pc, #124]	; (8b578 <main+0xf20>)
   8b4fa:	4798      	blx	r3
   8b4fc:	4603      	mov	r3, r0
   8b4fe:	71fb      	strb	r3, [r7, #7]
   8b500:	79fb      	ldrb	r3, [r7, #7]
   8b502:	2b00      	cmp	r3, #0
   8b504:	d001      	beq.n	8b50a <main+0xeb2>
   8b506:	4b16      	ldr	r3, [pc, #88]	; (8b560 <main+0xf08>)
   8b508:	4798      	blx	r3
   8b50a:	79fb      	ldrb	r3, [r7, #7]
   8b50c:	2b00      	cmp	r3, #0
   8b50e:	d151      	bne.n	8b5b4 <main+0xf5c>
   8b510:	4b16      	ldr	r3, [pc, #88]	; (8b56c <main+0xf14>)
   8b512:	220b      	movs	r2, #11
   8b514:	701a      	strb	r2, [r3, #0]
   8b516:	e04d      	b.n	8b5b4 <main+0xf5c>
   8b518:	4b0f      	ldr	r3, [pc, #60]	; (8b558 <main+0xf00>)
   8b51a:	781b      	ldrb	r3, [r3, #0]
   8b51c:	4618      	mov	r0, r3
   8b51e:	4b0f      	ldr	r3, [pc, #60]	; (8b55c <main+0xf04>)
   8b520:	4798      	blx	r3
   8b522:	4603      	mov	r3, r0
   8b524:	71fb      	strb	r3, [r7, #7]
   8b526:	79fb      	ldrb	r3, [r7, #7]
   8b528:	2b00      	cmp	r3, #0
   8b52a:	d001      	beq.n	8b530 <main+0xed8>
   8b52c:	4b0c      	ldr	r3, [pc, #48]	; (8b560 <main+0xf08>)
   8b52e:	4798      	blx	r3
   8b530:	79fb      	ldrb	r3, [r7, #7]
   8b532:	2b00      	cmp	r3, #0
   8b534:	d141      	bne.n	8b5ba <main+0xf62>
   8b536:	4b0d      	ldr	r3, [pc, #52]	; (8b56c <main+0xf14>)
   8b538:	220b      	movs	r2, #11
   8b53a:	701a      	strb	r2, [r3, #0]
   8b53c:	e03d      	b.n	8b5ba <main+0xf62>
   8b53e:	4b06      	ldr	r3, [pc, #24]	; (8b558 <main+0xf00>)
   8b540:	781b      	ldrb	r3, [r3, #0]
   8b542:	4618      	mov	r0, r3
   8b544:	4b05      	ldr	r3, [pc, #20]	; (8b55c <main+0xf04>)
   8b546:	4798      	blx	r3
   8b548:	4603      	mov	r3, r0
   8b54a:	71fb      	strb	r3, [r7, #7]
   8b54c:	79fb      	ldrb	r3, [r7, #7]
   8b54e:	2b00      	cmp	r3, #0
   8b550:	d036      	beq.n	8b5c0 <main+0xf68>
   8b552:	4b03      	ldr	r3, [pc, #12]	; (8b560 <main+0xf08>)
   8b554:	4798      	blx	r3
   8b556:	e033      	b.n	8b5c0 <main+0xf68>
   8b558:	20072172 	.word	0x20072172
   8b55c:	0009fbdd 	.word	0x0009fbdd
   8b560:	00088725 	.word	0x00088725
   8b564:	00085431 	.word	0x00085431
   8b568:	00099ebd 	.word	0x00099ebd
   8b56c:	200704b0 	.word	0x200704b0
   8b570:	000a254d 	.word	0x000a254d
   8b574:	00099729 	.word	0x00099729
   8b578:	0009bbc1 	.word	0x0009bbc1
   8b57c:	4ba8      	ldr	r3, [pc, #672]	; (8b820 <main+0x11c8>)
   8b57e:	781b      	ldrb	r3, [r3, #0]
   8b580:	4618      	mov	r0, r3
   8b582:	4ba8      	ldr	r3, [pc, #672]	; (8b824 <main+0x11cc>)
   8b584:	4798      	blx	r3
   8b586:	4603      	mov	r3, r0
   8b588:	71fb      	strb	r3, [r7, #7]
   8b58a:	79fb      	ldrb	r3, [r7, #7]
   8b58c:	2b00      	cmp	r3, #0
   8b58e:	d001      	beq.n	8b594 <main+0xf3c>
   8b590:	4ba5      	ldr	r3, [pc, #660]	; (8b828 <main+0x11d0>)
   8b592:	4798      	blx	r3
   8b594:	79fb      	ldrb	r3, [r7, #7]
   8b596:	2b00      	cmp	r3, #0
   8b598:	d115      	bne.n	8b5c6 <main+0xf6e>
   8b59a:	4ba4      	ldr	r3, [pc, #656]	; (8b82c <main+0x11d4>)
   8b59c:	220b      	movs	r2, #11
   8b59e:	701a      	strb	r2, [r3, #0]
   8b5a0:	e011      	b.n	8b5c6 <main+0xf6e>
   8b5a2:	bf00      	nop
   8b5a4:	f001 b89f 	b.w	8c6e6 <main+0x208e>
   8b5a8:	bf00      	nop
   8b5aa:	f001 b89c 	b.w	8c6e6 <main+0x208e>
   8b5ae:	bf00      	nop
   8b5b0:	f001 b899 	b.w	8c6e6 <main+0x208e>
   8b5b4:	bf00      	nop
   8b5b6:	f001 b896 	b.w	8c6e6 <main+0x208e>
   8b5ba:	bf00      	nop
   8b5bc:	f001 b893 	b.w	8c6e6 <main+0x208e>
   8b5c0:	bf00      	nop
   8b5c2:	f001 b890 	b.w	8c6e6 <main+0x208e>
   8b5c6:	bf00      	nop
   8b5c8:	f001 b88d 	b.w	8c6e6 <main+0x208e>
   8b5cc:	4b94      	ldr	r3, [pc, #592]	; (8b820 <main+0x11c8>)
   8b5ce:	781b      	ldrb	r3, [r3, #0]
   8b5d0:	3b09      	subs	r3, #9
   8b5d2:	2b43      	cmp	r3, #67	; 0x43
   8b5d4:	f200 810f 	bhi.w	8b7f6 <main+0x119e>
   8b5d8:	a201      	add	r2, pc, #4	; (adr r2, 8b5e0 <main+0xf88>)
   8b5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b5de:	bf00      	nop
   8b5e0:	0008b6f1 	.word	0x0008b6f1
   8b5e4:	0008b6f1 	.word	0x0008b6f1
   8b5e8:	0008b6f1 	.word	0x0008b6f1
   8b5ec:	0008b6f1 	.word	0x0008b6f1
   8b5f0:	0008b7f7 	.word	0x0008b7f7
   8b5f4:	0008b7f7 	.word	0x0008b7f7
   8b5f8:	0008b717 	.word	0x0008b717
   8b5fc:	0008b6f1 	.word	0x0008b6f1
   8b600:	0008b6f1 	.word	0x0008b6f1
   8b604:	0008b7dd 	.word	0x0008b7dd
   8b608:	0008b6f1 	.word	0x0008b6f1
   8b60c:	0008b6f1 	.word	0x0008b6f1
   8b610:	0008b6f1 	.word	0x0008b6f1
   8b614:	0008b763 	.word	0x0008b763
   8b618:	0008b7f7 	.word	0x0008b7f7
   8b61c:	0008b7f7 	.word	0x0008b7f7
   8b620:	0008b7f7 	.word	0x0008b7f7
   8b624:	0008b7f7 	.word	0x0008b7f7
   8b628:	0008b7f7 	.word	0x0008b7f7
   8b62c:	0008b7f7 	.word	0x0008b7f7
   8b630:	0008b6f1 	.word	0x0008b6f1
   8b634:	0008b6f1 	.word	0x0008b6f1
   8b638:	0008b73d 	.word	0x0008b73d
   8b63c:	0008b7f7 	.word	0x0008b7f7
   8b640:	0008b7f7 	.word	0x0008b7f7
   8b644:	0008b7f7 	.word	0x0008b7f7
   8b648:	0008b7f7 	.word	0x0008b7f7
   8b64c:	0008b7f7 	.word	0x0008b7f7
   8b650:	0008b7f7 	.word	0x0008b7f7
   8b654:	0008b6f1 	.word	0x0008b6f1
   8b658:	0008b6f1 	.word	0x0008b6f1
   8b65c:	0008b6f1 	.word	0x0008b6f1
   8b660:	0008b6f1 	.word	0x0008b6f1
   8b664:	0008b7f7 	.word	0x0008b7f7
   8b668:	0008b7f7 	.word	0x0008b7f7
   8b66c:	0008b7f7 	.word	0x0008b7f7
   8b670:	0008b6f1 	.word	0x0008b6f1
   8b674:	0008b6f1 	.word	0x0008b6f1
   8b678:	0008b7f7 	.word	0x0008b7f7
   8b67c:	0008b7f7 	.word	0x0008b7f7
   8b680:	0008b7f7 	.word	0x0008b7f7
   8b684:	0008b7f7 	.word	0x0008b7f7
   8b688:	0008b7f7 	.word	0x0008b7f7
   8b68c:	0008b7f7 	.word	0x0008b7f7
   8b690:	0008b7f7 	.word	0x0008b7f7
   8b694:	0008b7f7 	.word	0x0008b7f7
   8b698:	0008b7f7 	.word	0x0008b7f7
   8b69c:	0008b6f1 	.word	0x0008b6f1
   8b6a0:	0008b6f1 	.word	0x0008b6f1
   8b6a4:	0008b6f1 	.word	0x0008b6f1
   8b6a8:	0008b6f1 	.word	0x0008b6f1
   8b6ac:	0008b6f1 	.word	0x0008b6f1
   8b6b0:	0008b6f1 	.word	0x0008b6f1
   8b6b4:	0008b7f7 	.word	0x0008b7f7
   8b6b8:	0008b7f7 	.word	0x0008b7f7
   8b6bc:	0008b7f7 	.word	0x0008b7f7
   8b6c0:	0008b7f7 	.word	0x0008b7f7
   8b6c4:	0008b7f7 	.word	0x0008b7f7
   8b6c8:	0008b7f7 	.word	0x0008b7f7
   8b6cc:	0008b7f7 	.word	0x0008b7f7
   8b6d0:	0008b7f7 	.word	0x0008b7f7
   8b6d4:	0008b7f7 	.word	0x0008b7f7
   8b6d8:	0008b7f7 	.word	0x0008b7f7
   8b6dc:	0008b7f7 	.word	0x0008b7f7
   8b6e0:	0008b7f7 	.word	0x0008b7f7
   8b6e4:	0008b7f7 	.word	0x0008b7f7
   8b6e8:	0008b7f7 	.word	0x0008b7f7
   8b6ec:	0008b7a3 	.word	0x0008b7a3
   8b6f0:	4b4b      	ldr	r3, [pc, #300]	; (8b820 <main+0x11c8>)
   8b6f2:	781b      	ldrb	r3, [r3, #0]
   8b6f4:	4618      	mov	r0, r3
   8b6f6:	4b4e      	ldr	r3, [pc, #312]	; (8b830 <main+0x11d8>)
   8b6f8:	4798      	blx	r3
   8b6fa:	4603      	mov	r3, r0
   8b6fc:	71fb      	strb	r3, [r7, #7]
   8b6fe:	79fb      	ldrb	r3, [r7, #7]
   8b700:	2b00      	cmp	r3, #0
   8b702:	d001      	beq.n	8b708 <main+0x10b0>
   8b704:	4b48      	ldr	r3, [pc, #288]	; (8b828 <main+0x11d0>)
   8b706:	4798      	blx	r3
   8b708:	79fb      	ldrb	r3, [r7, #7]
   8b70a:	2b00      	cmp	r3, #0
   8b70c:	d176      	bne.n	8b7fc <main+0x11a4>
   8b70e:	4b47      	ldr	r3, [pc, #284]	; (8b82c <main+0x11d4>)
   8b710:	220b      	movs	r2, #11
   8b712:	701a      	strb	r2, [r3, #0]
   8b714:	e072      	b.n	8b7fc <main+0x11a4>
   8b716:	4b42      	ldr	r3, [pc, #264]	; (8b820 <main+0x11c8>)
   8b718:	781b      	ldrb	r3, [r3, #0]
   8b71a:	4618      	mov	r0, r3
   8b71c:	4b44      	ldr	r3, [pc, #272]	; (8b830 <main+0x11d8>)
   8b71e:	4798      	blx	r3
   8b720:	4603      	mov	r3, r0
   8b722:	71fb      	strb	r3, [r7, #7]
   8b724:	79fb      	ldrb	r3, [r7, #7]
   8b726:	2b00      	cmp	r3, #0
   8b728:	d001      	beq.n	8b72e <main+0x10d6>
   8b72a:	4b3f      	ldr	r3, [pc, #252]	; (8b828 <main+0x11d0>)
   8b72c:	4798      	blx	r3
   8b72e:	79fb      	ldrb	r3, [r7, #7]
   8b730:	2b00      	cmp	r3, #0
   8b732:	d166      	bne.n	8b802 <main+0x11aa>
   8b734:	4b3d      	ldr	r3, [pc, #244]	; (8b82c <main+0x11d4>)
   8b736:	220b      	movs	r2, #11
   8b738:	701a      	strb	r2, [r3, #0]
   8b73a:	e062      	b.n	8b802 <main+0x11aa>
   8b73c:	4b38      	ldr	r3, [pc, #224]	; (8b820 <main+0x11c8>)
   8b73e:	781b      	ldrb	r3, [r3, #0]
   8b740:	4618      	mov	r0, r3
   8b742:	4b3b      	ldr	r3, [pc, #236]	; (8b830 <main+0x11d8>)
   8b744:	4798      	blx	r3
   8b746:	4603      	mov	r3, r0
   8b748:	71fb      	strb	r3, [r7, #7]
   8b74a:	79fb      	ldrb	r3, [r7, #7]
   8b74c:	2b00      	cmp	r3, #0
   8b74e:	d001      	beq.n	8b754 <main+0x10fc>
   8b750:	4b35      	ldr	r3, [pc, #212]	; (8b828 <main+0x11d0>)
   8b752:	4798      	blx	r3
   8b754:	79fb      	ldrb	r3, [r7, #7]
   8b756:	2b00      	cmp	r3, #0
   8b758:	d156      	bne.n	8b808 <main+0x11b0>
   8b75a:	4b34      	ldr	r3, [pc, #208]	; (8b82c <main+0x11d4>)
   8b75c:	220b      	movs	r2, #11
   8b75e:	701a      	strb	r2, [r3, #0]
   8b760:	e052      	b.n	8b808 <main+0x11b0>
   8b762:	4b2f      	ldr	r3, [pc, #188]	; (8b820 <main+0x11c8>)
   8b764:	781b      	ldrb	r3, [r3, #0]
   8b766:	4618      	mov	r0, r3
   8b768:	4b31      	ldr	r3, [pc, #196]	; (8b830 <main+0x11d8>)
   8b76a:	4798      	blx	r3
   8b76c:	4603      	mov	r3, r0
   8b76e:	71fb      	strb	r3, [r7, #7]
   8b770:	79fb      	ldrb	r3, [r7, #7]
   8b772:	2b00      	cmp	r3, #0
   8b774:	d001      	beq.n	8b77a <main+0x1122>
   8b776:	4b2c      	ldr	r3, [pc, #176]	; (8b828 <main+0x11d0>)
   8b778:	4798      	blx	r3
   8b77a:	79fb      	ldrb	r3, [r7, #7]
   8b77c:	2b00      	cmp	r3, #0
   8b77e:	d102      	bne.n	8b786 <main+0x112e>
   8b780:	4b2a      	ldr	r3, [pc, #168]	; (8b82c <main+0x11d4>)
   8b782:	220b      	movs	r2, #11
   8b784:	701a      	strb	r2, [r3, #0]
   8b786:	4b29      	ldr	r3, [pc, #164]	; (8b82c <main+0x11d4>)
   8b788:	220c      	movs	r2, #12
   8b78a:	701a      	strb	r2, [r3, #0]
   8b78c:	2201      	movs	r2, #1
   8b78e:	210c      	movs	r1, #12
   8b790:	2045      	movs	r0, #69	; 0x45
   8b792:	4b28      	ldr	r3, [pc, #160]	; (8b834 <main+0x11dc>)
   8b794:	4798      	blx	r3
   8b796:	79fb      	ldrb	r3, [r7, #7]
   8b798:	2b00      	cmp	r3, #0
   8b79a:	d038      	beq.n	8b80e <main+0x11b6>
   8b79c:	4b22      	ldr	r3, [pc, #136]	; (8b828 <main+0x11d0>)
   8b79e:	4798      	blx	r3
   8b7a0:	e035      	b.n	8b80e <main+0x11b6>
   8b7a2:	4b1f      	ldr	r3, [pc, #124]	; (8b820 <main+0x11c8>)
   8b7a4:	781b      	ldrb	r3, [r3, #0]
   8b7a6:	4618      	mov	r0, r3
   8b7a8:	4b21      	ldr	r3, [pc, #132]	; (8b830 <main+0x11d8>)
   8b7aa:	4798      	blx	r3
   8b7ac:	4603      	mov	r3, r0
   8b7ae:	71fb      	strb	r3, [r7, #7]
   8b7b0:	79fb      	ldrb	r3, [r7, #7]
   8b7b2:	2b00      	cmp	r3, #0
   8b7b4:	d001      	beq.n	8b7ba <main+0x1162>
   8b7b6:	4b1c      	ldr	r3, [pc, #112]	; (8b828 <main+0x11d0>)
   8b7b8:	4798      	blx	r3
   8b7ba:	79fb      	ldrb	r3, [r7, #7]
   8b7bc:	2b00      	cmp	r3, #0
   8b7be:	d129      	bne.n	8b814 <main+0x11bc>
   8b7c0:	4b1a      	ldr	r3, [pc, #104]	; (8b82c <main+0x11d4>)
   8b7c2:	220e      	movs	r2, #14
   8b7c4:	701a      	strb	r2, [r3, #0]
   8b7c6:	2201      	movs	r2, #1
   8b7c8:	210e      	movs	r1, #14
   8b7ca:	2045      	movs	r0, #69	; 0x45
   8b7cc:	4b19      	ldr	r3, [pc, #100]	; (8b834 <main+0x11dc>)
   8b7ce:	4798      	blx	r3
   8b7d0:	79fb      	ldrb	r3, [r7, #7]
   8b7d2:	2b00      	cmp	r3, #0
   8b7d4:	d01e      	beq.n	8b814 <main+0x11bc>
   8b7d6:	4b14      	ldr	r3, [pc, #80]	; (8b828 <main+0x11d0>)
   8b7d8:	4798      	blx	r3
   8b7da:	e01b      	b.n	8b814 <main+0x11bc>
   8b7dc:	4b10      	ldr	r3, [pc, #64]	; (8b820 <main+0x11c8>)
   8b7de:	781b      	ldrb	r3, [r3, #0]
   8b7e0:	4618      	mov	r0, r3
   8b7e2:	4b13      	ldr	r3, [pc, #76]	; (8b830 <main+0x11d8>)
   8b7e4:	4798      	blx	r3
   8b7e6:	4603      	mov	r3, r0
   8b7e8:	71fb      	strb	r3, [r7, #7]
   8b7ea:	79fb      	ldrb	r3, [r7, #7]
   8b7ec:	2b00      	cmp	r3, #0
   8b7ee:	d014      	beq.n	8b81a <main+0x11c2>
   8b7f0:	4b0d      	ldr	r3, [pc, #52]	; (8b828 <main+0x11d0>)
   8b7f2:	4798      	blx	r3
   8b7f4:	e011      	b.n	8b81a <main+0x11c2>
   8b7f6:	bf00      	nop
   8b7f8:	f000 bf75 	b.w	8c6e6 <main+0x208e>
   8b7fc:	bf00      	nop
   8b7fe:	f000 bf72 	b.w	8c6e6 <main+0x208e>
   8b802:	bf00      	nop
   8b804:	f000 bf6f 	b.w	8c6e6 <main+0x208e>
   8b808:	bf00      	nop
   8b80a:	f000 bf6c 	b.w	8c6e6 <main+0x208e>
   8b80e:	bf00      	nop
   8b810:	f000 bf69 	b.w	8c6e6 <main+0x208e>
   8b814:	bf00      	nop
   8b816:	f000 bf66 	b.w	8c6e6 <main+0x208e>
   8b81a:	bf00      	nop
   8b81c:	f000 bf63 	b.w	8c6e6 <main+0x208e>
   8b820:	20072172 	.word	0x20072172
   8b824:	0009fbdd 	.word	0x0009fbdd
   8b828:	00088725 	.word	0x00088725
   8b82c:	200704b0 	.word	0x200704b0
   8b830:	0009bbc1 	.word	0x0009bbc1
   8b834:	00099729 	.word	0x00099729
   8b838:	4bd3      	ldr	r3, [pc, #844]	; (8bb88 <main+0x1530>)
   8b83a:	781b      	ldrb	r3, [r3, #0]
   8b83c:	3b0a      	subs	r3, #10
   8b83e:	2b42      	cmp	r3, #66	; 0x42
   8b840:	f200 80de 	bhi.w	8ba00 <main+0x13a8>
   8b844:	a201      	add	r2, pc, #4	; (adr r2, 8b84c <main+0x11f4>)
   8b846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b84a:	bf00      	nop
   8b84c:	0008b959 	.word	0x0008b959
   8b850:	0008b959 	.word	0x0008b959
   8b854:	0008b959 	.word	0x0008b959
   8b858:	0008ba01 	.word	0x0008ba01
   8b85c:	0008ba01 	.word	0x0008ba01
   8b860:	0008b973 	.word	0x0008b973
   8b864:	0008ba01 	.word	0x0008ba01
   8b868:	0008b959 	.word	0x0008b959
   8b86c:	0008b959 	.word	0x0008b959
   8b870:	0008b959 	.word	0x0008b959
   8b874:	0008b959 	.word	0x0008b959
   8b878:	0008ba01 	.word	0x0008ba01
   8b87c:	0008b959 	.word	0x0008b959
   8b880:	0008ba01 	.word	0x0008ba01
   8b884:	0008ba01 	.word	0x0008ba01
   8b888:	0008ba01 	.word	0x0008ba01
   8b88c:	0008ba01 	.word	0x0008ba01
   8b890:	0008ba01 	.word	0x0008ba01
   8b894:	0008ba01 	.word	0x0008ba01
   8b898:	0008ba01 	.word	0x0008ba01
   8b89c:	0008ba01 	.word	0x0008ba01
   8b8a0:	0008ba01 	.word	0x0008ba01
   8b8a4:	0008ba01 	.word	0x0008ba01
   8b8a8:	0008ba01 	.word	0x0008ba01
   8b8ac:	0008ba01 	.word	0x0008ba01
   8b8b0:	0008ba01 	.word	0x0008ba01
   8b8b4:	0008ba01 	.word	0x0008ba01
   8b8b8:	0008ba01 	.word	0x0008ba01
   8b8bc:	0008b959 	.word	0x0008b959
   8b8c0:	0008b959 	.word	0x0008b959
   8b8c4:	0008b959 	.word	0x0008b959
   8b8c8:	0008ba01 	.word	0x0008ba01
   8b8cc:	0008ba01 	.word	0x0008ba01
   8b8d0:	0008ba01 	.word	0x0008ba01
   8b8d4:	0008ba01 	.word	0x0008ba01
   8b8d8:	0008b959 	.word	0x0008b959
   8b8dc:	0008b959 	.word	0x0008b959
   8b8e0:	0008ba01 	.word	0x0008ba01
   8b8e4:	0008ba01 	.word	0x0008ba01
   8b8e8:	0008ba01 	.word	0x0008ba01
   8b8ec:	0008ba01 	.word	0x0008ba01
   8b8f0:	0008ba01 	.word	0x0008ba01
   8b8f4:	0008ba01 	.word	0x0008ba01
   8b8f8:	0008ba01 	.word	0x0008ba01
   8b8fc:	0008ba01 	.word	0x0008ba01
   8b900:	0008ba01 	.word	0x0008ba01
   8b904:	0008ba01 	.word	0x0008ba01
   8b908:	0008ba01 	.word	0x0008ba01
   8b90c:	0008b959 	.word	0x0008b959
   8b910:	0008b959 	.word	0x0008b959
   8b914:	0008b959 	.word	0x0008b959
   8b918:	0008b959 	.word	0x0008b959
   8b91c:	0008ba01 	.word	0x0008ba01
   8b920:	0008ba01 	.word	0x0008ba01
   8b924:	0008ba01 	.word	0x0008ba01
   8b928:	0008ba01 	.word	0x0008ba01
   8b92c:	0008ba01 	.word	0x0008ba01
   8b930:	0008ba01 	.word	0x0008ba01
   8b934:	0008ba01 	.word	0x0008ba01
   8b938:	0008ba01 	.word	0x0008ba01
   8b93c:	0008ba01 	.word	0x0008ba01
   8b940:	0008ba01 	.word	0x0008ba01
   8b944:	0008ba01 	.word	0x0008ba01
   8b948:	0008b9ad 	.word	0x0008b9ad
   8b94c:	0008ba01 	.word	0x0008ba01
   8b950:	0008ba01 	.word	0x0008ba01
   8b954:	0008b9c7 	.word	0x0008b9c7
   8b958:	4b8b      	ldr	r3, [pc, #556]	; (8bb88 <main+0x1530>)
   8b95a:	781b      	ldrb	r3, [r3, #0]
   8b95c:	4618      	mov	r0, r3
   8b95e:	4b8b      	ldr	r3, [pc, #556]	; (8bb8c <main+0x1534>)
   8b960:	4798      	blx	r3
   8b962:	4603      	mov	r3, r0
   8b964:	71fb      	strb	r3, [r7, #7]
   8b966:	79fb      	ldrb	r3, [r7, #7]
   8b968:	2b00      	cmp	r3, #0
   8b96a:	d04c      	beq.n	8ba06 <main+0x13ae>
   8b96c:	4b88      	ldr	r3, [pc, #544]	; (8bb90 <main+0x1538>)
   8b96e:	4798      	blx	r3
   8b970:	e049      	b.n	8ba06 <main+0x13ae>
   8b972:	4b85      	ldr	r3, [pc, #532]	; (8bb88 <main+0x1530>)
   8b974:	781b      	ldrb	r3, [r3, #0]
   8b976:	4618      	mov	r0, r3
   8b978:	4b84      	ldr	r3, [pc, #528]	; (8bb8c <main+0x1534>)
   8b97a:	4798      	blx	r3
   8b97c:	4603      	mov	r3, r0
   8b97e:	71fb      	strb	r3, [r7, #7]
   8b980:	79fb      	ldrb	r3, [r7, #7]
   8b982:	2b00      	cmp	r3, #0
   8b984:	d001      	beq.n	8b98a <main+0x1332>
   8b986:	4b82      	ldr	r3, [pc, #520]	; (8bb90 <main+0x1538>)
   8b988:	4798      	blx	r3
   8b98a:	79fb      	ldrb	r3, [r7, #7]
   8b98c:	2b00      	cmp	r3, #0
   8b98e:	d13d      	bne.n	8ba0c <main+0x13b4>
   8b990:	4b80      	ldr	r3, [pc, #512]	; (8bb94 <main+0x153c>)
   8b992:	220c      	movs	r2, #12
   8b994:	701a      	strb	r2, [r3, #0]
   8b996:	2201      	movs	r2, #1
   8b998:	210c      	movs	r1, #12
   8b99a:	2045      	movs	r0, #69	; 0x45
   8b99c:	4b7e      	ldr	r3, [pc, #504]	; (8bb98 <main+0x1540>)
   8b99e:	4798      	blx	r3
   8b9a0:	79fb      	ldrb	r3, [r7, #7]
   8b9a2:	2b00      	cmp	r3, #0
   8b9a4:	d032      	beq.n	8ba0c <main+0x13b4>
   8b9a6:	4b7a      	ldr	r3, [pc, #488]	; (8bb90 <main+0x1538>)
   8b9a8:	4798      	blx	r3
   8b9aa:	e02f      	b.n	8ba0c <main+0x13b4>
   8b9ac:	4b76      	ldr	r3, [pc, #472]	; (8bb88 <main+0x1530>)
   8b9ae:	781b      	ldrb	r3, [r3, #0]
   8b9b0:	4618      	mov	r0, r3
   8b9b2:	4b76      	ldr	r3, [pc, #472]	; (8bb8c <main+0x1534>)
   8b9b4:	4798      	blx	r3
   8b9b6:	4603      	mov	r3, r0
   8b9b8:	71fb      	strb	r3, [r7, #7]
   8b9ba:	79fb      	ldrb	r3, [r7, #7]
   8b9bc:	2b00      	cmp	r3, #0
   8b9be:	d028      	beq.n	8ba12 <main+0x13ba>
   8b9c0:	4b73      	ldr	r3, [pc, #460]	; (8bb90 <main+0x1538>)
   8b9c2:	4798      	blx	r3
   8b9c4:	e025      	b.n	8ba12 <main+0x13ba>
   8b9c6:	4b70      	ldr	r3, [pc, #448]	; (8bb88 <main+0x1530>)
   8b9c8:	781b      	ldrb	r3, [r3, #0]
   8b9ca:	4618      	mov	r0, r3
   8b9cc:	4b6f      	ldr	r3, [pc, #444]	; (8bb8c <main+0x1534>)
   8b9ce:	4798      	blx	r3
   8b9d0:	4603      	mov	r3, r0
   8b9d2:	71fb      	strb	r3, [r7, #7]
   8b9d4:	79fb      	ldrb	r3, [r7, #7]
   8b9d6:	2b00      	cmp	r3, #0
   8b9d8:	d001      	beq.n	8b9de <main+0x1386>
   8b9da:	4b6d      	ldr	r3, [pc, #436]	; (8bb90 <main+0x1538>)
   8b9dc:	4798      	blx	r3
   8b9de:	79fb      	ldrb	r3, [r7, #7]
   8b9e0:	2b00      	cmp	r3, #0
   8b9e2:	d119      	bne.n	8ba18 <main+0x13c0>
   8b9e4:	4b6b      	ldr	r3, [pc, #428]	; (8bb94 <main+0x153c>)
   8b9e6:	220e      	movs	r2, #14
   8b9e8:	701a      	strb	r2, [r3, #0]
   8b9ea:	2201      	movs	r2, #1
   8b9ec:	210e      	movs	r1, #14
   8b9ee:	2045      	movs	r0, #69	; 0x45
   8b9f0:	4b69      	ldr	r3, [pc, #420]	; (8bb98 <main+0x1540>)
   8b9f2:	4798      	blx	r3
   8b9f4:	79fb      	ldrb	r3, [r7, #7]
   8b9f6:	2b00      	cmp	r3, #0
   8b9f8:	d00e      	beq.n	8ba18 <main+0x13c0>
   8b9fa:	4b65      	ldr	r3, [pc, #404]	; (8bb90 <main+0x1538>)
   8b9fc:	4798      	blx	r3
   8b9fe:	e00b      	b.n	8ba18 <main+0x13c0>
   8ba00:	bf00      	nop
   8ba02:	f000 be70 	b.w	8c6e6 <main+0x208e>
   8ba06:	bf00      	nop
   8ba08:	f000 be6d 	b.w	8c6e6 <main+0x208e>
   8ba0c:	bf00      	nop
   8ba0e:	f000 be6a 	b.w	8c6e6 <main+0x208e>
   8ba12:	bf00      	nop
   8ba14:	f000 be67 	b.w	8c6e6 <main+0x208e>
   8ba18:	bf00      	nop
   8ba1a:	f000 be64 	b.w	8c6e6 <main+0x208e>
   8ba1e:	4b5a      	ldr	r3, [pc, #360]	; (8bb88 <main+0x1530>)
   8ba20:	781b      	ldrb	r3, [r3, #0]
   8ba22:	2b07      	cmp	r3, #7
   8ba24:	d002      	beq.n	8ba2c <main+0x13d4>
   8ba26:	2b09      	cmp	r3, #9
   8ba28:	d003      	beq.n	8ba32 <main+0x13da>
   8ba2a:	e003      	b.n	8ba34 <main+0x13dc>
   8ba2c:	bf00      	nop
   8ba2e:	f000 be5a 	b.w	8c6e6 <main+0x208e>
   8ba32:	bf00      	nop
   8ba34:	f000 be57 	b.w	8c6e6 <main+0x208e>
   8ba38:	4b53      	ldr	r3, [pc, #332]	; (8bb88 <main+0x1530>)
   8ba3a:	781b      	ldrb	r3, [r3, #0]
   8ba3c:	3b0a      	subs	r3, #10
   8ba3e:	2b4e      	cmp	r3, #78	; 0x4e
   8ba40:	f200 8117 	bhi.w	8bc72 <main+0x161a>
   8ba44:	a201      	add	r2, pc, #4	; (adr r2, 8ba4c <main+0x13f4>)
   8ba46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ba4a:	bf00      	nop
   8ba4c:	0008bb9d 	.word	0x0008bb9d
   8ba50:	0008bb9d 	.word	0x0008bb9d
   8ba54:	0008bb9d 	.word	0x0008bb9d
   8ba58:	0008bc73 	.word	0x0008bc73
   8ba5c:	0008bc73 	.word	0x0008bc73
   8ba60:	0008bc73 	.word	0x0008bc73
   8ba64:	0008bc73 	.word	0x0008bc73
   8ba68:	0008bc73 	.word	0x0008bc73
   8ba6c:	0008bc73 	.word	0x0008bc73
   8ba70:	0008bc73 	.word	0x0008bc73
   8ba74:	0008bc73 	.word	0x0008bc73
   8ba78:	0008bb9d 	.word	0x0008bb9d
   8ba7c:	0008bc73 	.word	0x0008bc73
   8ba80:	0008bbb7 	.word	0x0008bbb7
   8ba84:	0008bc73 	.word	0x0008bc73
   8ba88:	0008bc73 	.word	0x0008bc73
   8ba8c:	0008bb9d 	.word	0x0008bb9d
   8ba90:	0008bb9d 	.word	0x0008bb9d
   8ba94:	0008bb9d 	.word	0x0008bb9d
   8ba98:	0008bc73 	.word	0x0008bc73
   8ba9c:	0008bc73 	.word	0x0008bc73
   8baa0:	0008bc73 	.word	0x0008bc73
   8baa4:	0008bc73 	.word	0x0008bc73
   8baa8:	0008bb9d 	.word	0x0008bb9d
   8baac:	0008bc73 	.word	0x0008bc73
   8bab0:	0008bc73 	.word	0x0008bc73
   8bab4:	0008bc73 	.word	0x0008bc73
   8bab8:	0008bc73 	.word	0x0008bc73
   8babc:	0008bc73 	.word	0x0008bc73
   8bac0:	0008bb9d 	.word	0x0008bb9d
   8bac4:	0008bb9d 	.word	0x0008bb9d
   8bac8:	0008bc73 	.word	0x0008bc73
   8bacc:	0008bc73 	.word	0x0008bc73
   8bad0:	0008bc73 	.word	0x0008bc73
   8bad4:	0008bc73 	.word	0x0008bc73
   8bad8:	0008bb9d 	.word	0x0008bb9d
   8badc:	0008bb9d 	.word	0x0008bb9d
   8bae0:	0008bc73 	.word	0x0008bc73
   8bae4:	0008bc73 	.word	0x0008bc73
   8bae8:	0008bc73 	.word	0x0008bc73
   8baec:	0008bc73 	.word	0x0008bc73
   8baf0:	0008bc73 	.word	0x0008bc73
   8baf4:	0008bc73 	.word	0x0008bc73
   8baf8:	0008bc73 	.word	0x0008bc73
   8bafc:	0008bc73 	.word	0x0008bc73
   8bb00:	0008bc73 	.word	0x0008bc73
   8bb04:	0008bb9d 	.word	0x0008bb9d
   8bb08:	0008bc73 	.word	0x0008bc73
   8bb0c:	0008bb9d 	.word	0x0008bb9d
   8bb10:	0008bb9d 	.word	0x0008bb9d
   8bb14:	0008bc73 	.word	0x0008bc73
   8bb18:	0008bc73 	.word	0x0008bc73
   8bb1c:	0008bc73 	.word	0x0008bc73
   8bb20:	0008bc73 	.word	0x0008bc73
   8bb24:	0008bc73 	.word	0x0008bc73
   8bb28:	0008bc73 	.word	0x0008bc73
   8bb2c:	0008bc73 	.word	0x0008bc73
   8bb30:	0008bc73 	.word	0x0008bc73
   8bb34:	0008bc73 	.word	0x0008bc73
   8bb38:	0008bc73 	.word	0x0008bc73
   8bb3c:	0008bc73 	.word	0x0008bc73
   8bb40:	0008bc73 	.word	0x0008bc73
   8bb44:	0008bc73 	.word	0x0008bc73
   8bb48:	0008bc73 	.word	0x0008bc73
   8bb4c:	0008bc73 	.word	0x0008bc73
   8bb50:	0008bc73 	.word	0x0008bc73
   8bb54:	0008bc73 	.word	0x0008bc73
   8bb58:	0008bc73 	.word	0x0008bc73
   8bb5c:	0008bc73 	.word	0x0008bc73
   8bb60:	0008bc73 	.word	0x0008bc73
   8bb64:	0008bc73 	.word	0x0008bc73
   8bb68:	0008bc73 	.word	0x0008bc73
   8bb6c:	0008bc73 	.word	0x0008bc73
   8bb70:	0008bc73 	.word	0x0008bc73
   8bb74:	0008bc73 	.word	0x0008bc73
   8bb78:	0008bb9d 	.word	0x0008bb9d
   8bb7c:	0008bc73 	.word	0x0008bc73
   8bb80:	0008bc73 	.word	0x0008bc73
   8bb84:	0008bc5d 	.word	0x0008bc5d
   8bb88:	20072172 	.word	0x20072172
   8bb8c:	0009bbc1 	.word	0x0009bbc1
   8bb90:	00088725 	.word	0x00088725
   8bb94:	200704b0 	.word	0x200704b0
   8bb98:	00099729 	.word	0x00099729
   8bb9c:	4bb2      	ldr	r3, [pc, #712]	; (8be68 <main+0x1810>)
   8bb9e:	781b      	ldrb	r3, [r3, #0]
   8bba0:	4618      	mov	r0, r3
   8bba2:	4bb2      	ldr	r3, [pc, #712]	; (8be6c <main+0x1814>)
   8bba4:	4798      	blx	r3
   8bba6:	4603      	mov	r3, r0
   8bba8:	71fb      	strb	r3, [r7, #7]
   8bbaa:	79fb      	ldrb	r3, [r7, #7]
   8bbac:	2b00      	cmp	r3, #0
   8bbae:	d063      	beq.n	8bc78 <main+0x1620>
   8bbb0:	4baf      	ldr	r3, [pc, #700]	; (8be70 <main+0x1818>)
   8bbb2:	4798      	blx	r3
   8bbb4:	e060      	b.n	8bc78 <main+0x1620>
   8bbb6:	4bac      	ldr	r3, [pc, #688]	; (8be68 <main+0x1810>)
   8bbb8:	781b      	ldrb	r3, [r3, #0]
   8bbba:	4618      	mov	r0, r3
   8bbbc:	4bad      	ldr	r3, [pc, #692]	; (8be74 <main+0x181c>)
   8bbbe:	4798      	blx	r3
   8bbc0:	4603      	mov	r3, r0
   8bbc2:	71fb      	strb	r3, [r7, #7]
   8bbc4:	79fb      	ldrb	r3, [r7, #7]
   8bbc6:	2b00      	cmp	r3, #0
   8bbc8:	d001      	beq.n	8bbce <main+0x1576>
   8bbca:	4ba9      	ldr	r3, [pc, #676]	; (8be70 <main+0x1818>)
   8bbcc:	4798      	blx	r3
   8bbce:	79fb      	ldrb	r3, [r7, #7]
   8bbd0:	2b00      	cmp	r3, #0
   8bbd2:	d002      	beq.n	8bbda <main+0x1582>
   8bbd4:	79fb      	ldrb	r3, [r7, #7]
   8bbd6:	2b03      	cmp	r3, #3
   8bbd8:	d10b      	bne.n	8bbf2 <main+0x159a>
   8bbda:	4ba3      	ldr	r3, [pc, #652]	; (8be68 <main+0x1810>)
   8bbdc:	781b      	ldrb	r3, [r3, #0]
   8bbde:	4618      	mov	r0, r3
   8bbe0:	4ba5      	ldr	r3, [pc, #660]	; (8be78 <main+0x1820>)
   8bbe2:	4798      	blx	r3
   8bbe4:	4603      	mov	r3, r0
   8bbe6:	71fb      	strb	r3, [r7, #7]
   8bbe8:	79fb      	ldrb	r3, [r7, #7]
   8bbea:	2b00      	cmp	r3, #0
   8bbec:	d001      	beq.n	8bbf2 <main+0x159a>
   8bbee:	4ba0      	ldr	r3, [pc, #640]	; (8be70 <main+0x1818>)
   8bbf0:	4798      	blx	r3
   8bbf2:	79fb      	ldrb	r3, [r7, #7]
   8bbf4:	2b00      	cmp	r3, #0
   8bbf6:	d002      	beq.n	8bbfe <main+0x15a6>
   8bbf8:	79fb      	ldrb	r3, [r7, #7]
   8bbfa:	2b03      	cmp	r3, #3
   8bbfc:	d10b      	bne.n	8bc16 <main+0x15be>
   8bbfe:	4b9a      	ldr	r3, [pc, #616]	; (8be68 <main+0x1810>)
   8bc00:	781b      	ldrb	r3, [r3, #0]
   8bc02:	4618      	mov	r0, r3
   8bc04:	4b99      	ldr	r3, [pc, #612]	; (8be6c <main+0x1814>)
   8bc06:	4798      	blx	r3
   8bc08:	4603      	mov	r3, r0
   8bc0a:	71fb      	strb	r3, [r7, #7]
   8bc0c:	79fb      	ldrb	r3, [r7, #7]
   8bc0e:	2b00      	cmp	r3, #0
   8bc10:	d001      	beq.n	8bc16 <main+0x15be>
   8bc12:	4b97      	ldr	r3, [pc, #604]	; (8be70 <main+0x1818>)
   8bc14:	4798      	blx	r3
   8bc16:	79fb      	ldrb	r3, [r7, #7]
   8bc18:	2b00      	cmp	r3, #0
   8bc1a:	d002      	beq.n	8bc22 <main+0x15ca>
   8bc1c:	79fb      	ldrb	r3, [r7, #7]
   8bc1e:	2b03      	cmp	r3, #3
   8bc20:	d10b      	bne.n	8bc3a <main+0x15e2>
   8bc22:	4b91      	ldr	r3, [pc, #580]	; (8be68 <main+0x1810>)
   8bc24:	781b      	ldrb	r3, [r3, #0]
   8bc26:	4618      	mov	r0, r3
   8bc28:	4b94      	ldr	r3, [pc, #592]	; (8be7c <main+0x1824>)
   8bc2a:	4798      	blx	r3
   8bc2c:	4603      	mov	r3, r0
   8bc2e:	71fb      	strb	r3, [r7, #7]
   8bc30:	79fb      	ldrb	r3, [r7, #7]
   8bc32:	2b00      	cmp	r3, #0
   8bc34:	d001      	beq.n	8bc3a <main+0x15e2>
   8bc36:	4b8e      	ldr	r3, [pc, #568]	; (8be70 <main+0x1818>)
   8bc38:	4798      	blx	r3
   8bc3a:	79fb      	ldrb	r3, [r7, #7]
   8bc3c:	2b00      	cmp	r3, #0
   8bc3e:	d11e      	bne.n	8bc7e <main+0x1626>
   8bc40:	4b8f      	ldr	r3, [pc, #572]	; (8be80 <main+0x1828>)
   8bc42:	220f      	movs	r2, #15
   8bc44:	701a      	strb	r2, [r3, #0]
   8bc46:	2201      	movs	r2, #1
   8bc48:	210f      	movs	r1, #15
   8bc4a:	2045      	movs	r0, #69	; 0x45
   8bc4c:	4b8d      	ldr	r3, [pc, #564]	; (8be84 <main+0x182c>)
   8bc4e:	4798      	blx	r3
   8bc50:	79fb      	ldrb	r3, [r7, #7]
   8bc52:	2b00      	cmp	r3, #0
   8bc54:	d013      	beq.n	8bc7e <main+0x1626>
   8bc56:	4b86      	ldr	r3, [pc, #536]	; (8be70 <main+0x1818>)
   8bc58:	4798      	blx	r3
   8bc5a:	e010      	b.n	8bc7e <main+0x1626>
   8bc5c:	4b88      	ldr	r3, [pc, #544]	; (8be80 <main+0x1828>)
   8bc5e:	2214      	movs	r2, #20
   8bc60:	701a      	strb	r2, [r3, #0]
   8bc62:	4b81      	ldr	r3, [pc, #516]	; (8be68 <main+0x1810>)
   8bc64:	781b      	ldrb	r3, [r3, #0]
   8bc66:	4618      	mov	r0, r3
   8bc68:	4b87      	ldr	r3, [pc, #540]	; (8be88 <main+0x1830>)
   8bc6a:	4798      	blx	r3
   8bc6c:	4603      	mov	r3, r0
   8bc6e:	71fb      	strb	r3, [r7, #7]
   8bc70:	e006      	b.n	8bc80 <main+0x1628>
   8bc72:	bf00      	nop
   8bc74:	f000 bd37 	b.w	8c6e6 <main+0x208e>
   8bc78:	bf00      	nop
   8bc7a:	f000 bd34 	b.w	8c6e6 <main+0x208e>
   8bc7e:	bf00      	nop
   8bc80:	f000 bd31 	b.w	8c6e6 <main+0x208e>
   8bc84:	4b78      	ldr	r3, [pc, #480]	; (8be68 <main+0x1810>)
   8bc86:	781b      	ldrb	r3, [r3, #0]
   8bc88:	3b0a      	subs	r3, #10
   8bc8a:	2b50      	cmp	r3, #80	; 0x50
   8bc8c:	f200 852a 	bhi.w	8c6e4 <main+0x208c>
   8bc90:	a201      	add	r2, pc, #4	; (adr r2, 8bc98 <main+0x1640>)
   8bc92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bc96:	bf00      	nop
   8bc98:	0008bddd 	.word	0x0008bddd
   8bc9c:	0008bddd 	.word	0x0008bddd
   8bca0:	0008bddd 	.word	0x0008bddd
   8bca4:	0008c6e5 	.word	0x0008c6e5
   8bca8:	0008c6e5 	.word	0x0008c6e5
   8bcac:	0008c6e5 	.word	0x0008c6e5
   8bcb0:	0008c6e5 	.word	0x0008c6e5
   8bcb4:	0008c6e5 	.word	0x0008c6e5
   8bcb8:	0008c6e5 	.word	0x0008c6e5
   8bcbc:	0008c6e5 	.word	0x0008c6e5
   8bcc0:	0008c6e5 	.word	0x0008c6e5
   8bcc4:	0008bddd 	.word	0x0008bddd
   8bcc8:	0008c6e5 	.word	0x0008c6e5
   8bccc:	0008c6e5 	.word	0x0008c6e5
   8bcd0:	0008c6e5 	.word	0x0008c6e5
   8bcd4:	0008c6e5 	.word	0x0008c6e5
   8bcd8:	0008c6e5 	.word	0x0008c6e5
   8bcdc:	0008c6e5 	.word	0x0008c6e5
   8bce0:	0008c6e5 	.word	0x0008c6e5
   8bce4:	0008c6e5 	.word	0x0008c6e5
   8bce8:	0008c6e5 	.word	0x0008c6e5
   8bcec:	0008c6e5 	.word	0x0008c6e5
   8bcf0:	0008c6e5 	.word	0x0008c6e5
   8bcf4:	0008c6e5 	.word	0x0008c6e5
   8bcf8:	0008c6e5 	.word	0x0008c6e5
   8bcfc:	0008c6e5 	.word	0x0008c6e5
   8bd00:	0008c6e5 	.word	0x0008c6e5
   8bd04:	0008c6e5 	.word	0x0008c6e5
   8bd08:	0008c6e5 	.word	0x0008c6e5
   8bd0c:	0008bddd 	.word	0x0008bddd
   8bd10:	0008bddd 	.word	0x0008bddd
   8bd14:	0008bddd 	.word	0x0008bddd
   8bd18:	0008c6e5 	.word	0x0008c6e5
   8bd1c:	0008c6e5 	.word	0x0008c6e5
   8bd20:	0008c6e5 	.word	0x0008c6e5
   8bd24:	0008bddd 	.word	0x0008bddd
   8bd28:	0008bddd 	.word	0x0008bddd
   8bd2c:	0008c6e5 	.word	0x0008c6e5
   8bd30:	0008c6e5 	.word	0x0008c6e5
   8bd34:	0008c6e5 	.word	0x0008c6e5
   8bd38:	0008c6e5 	.word	0x0008c6e5
   8bd3c:	0008c6e5 	.word	0x0008c6e5
   8bd40:	0008c6e5 	.word	0x0008c6e5
   8bd44:	0008c6e5 	.word	0x0008c6e5
   8bd48:	0008c6e5 	.word	0x0008c6e5
   8bd4c:	0008c6e5 	.word	0x0008c6e5
   8bd50:	0008bddd 	.word	0x0008bddd
   8bd54:	0008c6e5 	.word	0x0008c6e5
   8bd58:	0008bddd 	.word	0x0008bddd
   8bd5c:	0008bddd 	.word	0x0008bddd
   8bd60:	0008bddd 	.word	0x0008bddd
   8bd64:	0008bddd 	.word	0x0008bddd
   8bd68:	0008c6e5 	.word	0x0008c6e5
   8bd6c:	0008c6e5 	.word	0x0008c6e5
   8bd70:	0008c6e5 	.word	0x0008c6e5
   8bd74:	0008c6e5 	.word	0x0008c6e5
   8bd78:	0008c6e5 	.word	0x0008c6e5
   8bd7c:	0008c6e5 	.word	0x0008c6e5
   8bd80:	0008c6e5 	.word	0x0008c6e5
   8bd84:	0008c6e5 	.word	0x0008c6e5
   8bd88:	0008c6e5 	.word	0x0008c6e5
   8bd8c:	0008c6e5 	.word	0x0008c6e5
   8bd90:	0008c6e5 	.word	0x0008c6e5
   8bd94:	0008c6e5 	.word	0x0008c6e5
   8bd98:	0008c6e5 	.word	0x0008c6e5
   8bd9c:	0008c6e5 	.word	0x0008c6e5
   8bda0:	0008c6e5 	.word	0x0008c6e5
   8bda4:	0008c6e5 	.word	0x0008c6e5
   8bda8:	0008c6e5 	.word	0x0008c6e5
   8bdac:	0008c6e5 	.word	0x0008c6e5
   8bdb0:	0008c6e5 	.word	0x0008c6e5
   8bdb4:	0008c6e5 	.word	0x0008c6e5
   8bdb8:	0008c6e5 	.word	0x0008c6e5
   8bdbc:	0008c6e5 	.word	0x0008c6e5
   8bdc0:	0008c6e5 	.word	0x0008c6e5
   8bdc4:	0008c6e5 	.word	0x0008c6e5
   8bdc8:	0008c6e5 	.word	0x0008c6e5
   8bdcc:	0008c6e5 	.word	0x0008c6e5
   8bdd0:	0008c6e5 	.word	0x0008c6e5
   8bdd4:	0008be49 	.word	0x0008be49
   8bdd8:	0008bdfd 	.word	0x0008bdfd
   8bddc:	4b22      	ldr	r3, [pc, #136]	; (8be68 <main+0x1810>)
   8bdde:	781b      	ldrb	r3, [r3, #0]
   8bde0:	4618      	mov	r0, r3
   8bde2:	4b29      	ldr	r3, [pc, #164]	; (8be88 <main+0x1830>)
   8bde4:	4798      	blx	r3
   8bde6:	4603      	mov	r3, r0
   8bde8:	71fb      	strb	r3, [r7, #7]
   8bdea:	79fb      	ldrb	r3, [r7, #7]
   8bdec:	2b00      	cmp	r3, #0
   8bdee:	d001      	beq.n	8bdf4 <main+0x179c>
   8bdf0:	4b1f      	ldr	r3, [pc, #124]	; (8be70 <main+0x1818>)
   8bdf2:	4798      	blx	r3
   8bdf4:	4b1c      	ldr	r3, [pc, #112]	; (8be68 <main+0x1810>)
   8bdf6:	2200      	movs	r2, #0
   8bdf8:	701a      	strb	r2, [r3, #0]
   8bdfa:	e032      	b.n	8be62 <main+0x180a>
   8bdfc:	4b1a      	ldr	r3, [pc, #104]	; (8be68 <main+0x1810>)
   8bdfe:	781b      	ldrb	r3, [r3, #0]
   8be00:	4618      	mov	r0, r3
   8be02:	4b21      	ldr	r3, [pc, #132]	; (8be88 <main+0x1830>)
   8be04:	4798      	blx	r3
   8be06:	4603      	mov	r3, r0
   8be08:	71fb      	strb	r3, [r7, #7]
   8be0a:	79fb      	ldrb	r3, [r7, #7]
   8be0c:	2b00      	cmp	r3, #0
   8be0e:	d001      	beq.n	8be14 <main+0x17bc>
   8be10:	4b17      	ldr	r3, [pc, #92]	; (8be70 <main+0x1818>)
   8be12:	4798      	blx	r3
   8be14:	79fb      	ldrb	r3, [r7, #7]
   8be16:	2b00      	cmp	r3, #0
   8be18:	d112      	bne.n	8be40 <main+0x17e8>
   8be1a:	4b1c      	ldr	r3, [pc, #112]	; (8be8c <main+0x1834>)
   8be1c:	4798      	blx	r3
   8be1e:	4603      	mov	r3, r0
   8be20:	71fb      	strb	r3, [r7, #7]
   8be22:	4b17      	ldr	r3, [pc, #92]	; (8be80 <main+0x1828>)
   8be24:	2215      	movs	r2, #21
   8be26:	701a      	strb	r2, [r3, #0]
   8be28:	4b15      	ldr	r3, [pc, #84]	; (8be80 <main+0x1828>)
   8be2a:	781b      	ldrb	r3, [r3, #0]
   8be2c:	2201      	movs	r2, #1
   8be2e:	4619      	mov	r1, r3
   8be30:	2045      	movs	r0, #69	; 0x45
   8be32:	4b14      	ldr	r3, [pc, #80]	; (8be84 <main+0x182c>)
   8be34:	4798      	blx	r3
   8be36:	79fb      	ldrb	r3, [r7, #7]
   8be38:	2b00      	cmp	r3, #0
   8be3a:	d001      	beq.n	8be40 <main+0x17e8>
   8be3c:	4b0c      	ldr	r3, [pc, #48]	; (8be70 <main+0x1818>)
   8be3e:	4798      	blx	r3
   8be40:	4b09      	ldr	r3, [pc, #36]	; (8be68 <main+0x1810>)
   8be42:	2200      	movs	r2, #0
   8be44:	701a      	strb	r2, [r3, #0]
   8be46:	e00c      	b.n	8be62 <main+0x180a>
   8be48:	4b07      	ldr	r3, [pc, #28]	; (8be68 <main+0x1810>)
   8be4a:	781b      	ldrb	r3, [r3, #0]
   8be4c:	4618      	mov	r0, r3
   8be4e:	4b0e      	ldr	r3, [pc, #56]	; (8be88 <main+0x1830>)
   8be50:	4798      	blx	r3
   8be52:	4603      	mov	r3, r0
   8be54:	71fb      	strb	r3, [r7, #7]
   8be56:	79fb      	ldrb	r3, [r7, #7]
   8be58:	2b00      	cmp	r3, #0
   8be5a:	d001      	beq.n	8be60 <main+0x1808>
   8be5c:	4b04      	ldr	r3, [pc, #16]	; (8be70 <main+0x1818>)
   8be5e:	4798      	blx	r3
   8be60:	bf00      	nop
   8be62:	f000 bc3f 	b.w	8c6e4 <main+0x208c>
   8be66:	bf00      	nop
   8be68:	20072172 	.word	0x20072172
   8be6c:	0009bbc1 	.word	0x0009bbc1
   8be70:	00088725 	.word	0x00088725
   8be74:	000a254d 	.word	0x000a254d
   8be78:	0009fbdd 	.word	0x0009fbdd
   8be7c:	00085431 	.word	0x00085431
   8be80:	200704b0 	.word	0x200704b0
   8be84:	00099729 	.word	0x00099729
   8be88:	00092ec5 	.word	0x00092ec5
   8be8c:	00093c1d 	.word	0x00093c1d
   8be90:	4ba6      	ldr	r3, [pc, #664]	; (8c12c <main+0x1ad4>)
   8be92:	781b      	ldrb	r3, [r3, #0]
   8be94:	3b07      	subs	r3, #7
   8be96:	2b51      	cmp	r3, #81	; 0x51
   8be98:	f200 8142 	bhi.w	8c120 <main+0x1ac8>
   8be9c:	a201      	add	r2, pc, #4	; (adr r2, 8bea4 <main+0x184c>)
   8be9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bea2:	bf00      	nop
   8bea4:	0008c0b3 	.word	0x0008c0b3
   8bea8:	0008c121 	.word	0x0008c121
   8beac:	0008c121 	.word	0x0008c121
   8beb0:	0008bfed 	.word	0x0008bfed
   8beb4:	0008bfed 	.word	0x0008bfed
   8beb8:	0008bfed 	.word	0x0008bfed
   8bebc:	0008c121 	.word	0x0008c121
   8bec0:	0008c121 	.word	0x0008c121
   8bec4:	0008c121 	.word	0x0008c121
   8bec8:	0008c121 	.word	0x0008c121
   8becc:	0008c121 	.word	0x0008c121
   8bed0:	0008c121 	.word	0x0008c121
   8bed4:	0008c121 	.word	0x0008c121
   8bed8:	0008c121 	.word	0x0008c121
   8bedc:	0008bfed 	.word	0x0008bfed
   8bee0:	0008c121 	.word	0x0008c121
   8bee4:	0008c00d 	.word	0x0008c00d
   8bee8:	0008c121 	.word	0x0008c121
   8beec:	0008c121 	.word	0x0008c121
   8bef0:	0008c121 	.word	0x0008c121
   8bef4:	0008c121 	.word	0x0008c121
   8bef8:	0008c121 	.word	0x0008c121
   8befc:	0008c121 	.word	0x0008c121
   8bf00:	0008c121 	.word	0x0008c121
   8bf04:	0008c121 	.word	0x0008c121
   8bf08:	0008c121 	.word	0x0008c121
   8bf0c:	0008c121 	.word	0x0008c121
   8bf10:	0008c121 	.word	0x0008c121
   8bf14:	0008c121 	.word	0x0008c121
   8bf18:	0008c121 	.word	0x0008c121
   8bf1c:	0008c121 	.word	0x0008c121
   8bf20:	0008c121 	.word	0x0008c121
   8bf24:	0008bfed 	.word	0x0008bfed
   8bf28:	0008bfed 	.word	0x0008bfed
   8bf2c:	0008bfed 	.word	0x0008bfed
   8bf30:	0008c121 	.word	0x0008c121
   8bf34:	0008c121 	.word	0x0008c121
   8bf38:	0008c121 	.word	0x0008c121
   8bf3c:	0008bfed 	.word	0x0008bfed
   8bf40:	0008bfed 	.word	0x0008bfed
   8bf44:	0008c121 	.word	0x0008c121
   8bf48:	0008c121 	.word	0x0008c121
   8bf4c:	0008c121 	.word	0x0008c121
   8bf50:	0008c121 	.word	0x0008c121
   8bf54:	0008c121 	.word	0x0008c121
   8bf58:	0008c121 	.word	0x0008c121
   8bf5c:	0008c121 	.word	0x0008c121
   8bf60:	0008c121 	.word	0x0008c121
   8bf64:	0008c121 	.word	0x0008c121
   8bf68:	0008bfed 	.word	0x0008bfed
   8bf6c:	0008c121 	.word	0x0008c121
   8bf70:	0008bfed 	.word	0x0008bfed
   8bf74:	0008bfed 	.word	0x0008bfed
   8bf78:	0008bfed 	.word	0x0008bfed
   8bf7c:	0008bfed 	.word	0x0008bfed
   8bf80:	0008c121 	.word	0x0008c121
   8bf84:	0008c121 	.word	0x0008c121
   8bf88:	0008c121 	.word	0x0008c121
   8bf8c:	0008c121 	.word	0x0008c121
   8bf90:	0008c121 	.word	0x0008c121
   8bf94:	0008c121 	.word	0x0008c121
   8bf98:	0008c121 	.word	0x0008c121
   8bf9c:	0008c121 	.word	0x0008c121
   8bfa0:	0008c121 	.word	0x0008c121
   8bfa4:	0008c121 	.word	0x0008c121
   8bfa8:	0008c121 	.word	0x0008c121
   8bfac:	0008c121 	.word	0x0008c121
   8bfb0:	0008c121 	.word	0x0008c121
   8bfb4:	0008c121 	.word	0x0008c121
   8bfb8:	0008c121 	.word	0x0008c121
   8bfbc:	0008c121 	.word	0x0008c121
   8bfc0:	0008c121 	.word	0x0008c121
   8bfc4:	0008c121 	.word	0x0008c121
   8bfc8:	0008c121 	.word	0x0008c121
   8bfcc:	0008c121 	.word	0x0008c121
   8bfd0:	0008c121 	.word	0x0008c121
   8bfd4:	0008c121 	.word	0x0008c121
   8bfd8:	0008c121 	.word	0x0008c121
   8bfdc:	0008c121 	.word	0x0008c121
   8bfe0:	0008c121 	.word	0x0008c121
   8bfe4:	0008c121 	.word	0x0008c121
   8bfe8:	0008c10b 	.word	0x0008c10b
   8bfec:	4b4f      	ldr	r3, [pc, #316]	; (8c12c <main+0x1ad4>)
   8bfee:	781b      	ldrb	r3, [r3, #0]
   8bff0:	4618      	mov	r0, r3
   8bff2:	4b4f      	ldr	r3, [pc, #316]	; (8c130 <main+0x1ad8>)
   8bff4:	4798      	blx	r3
   8bff6:	4603      	mov	r3, r0
   8bff8:	71fb      	strb	r3, [r7, #7]
   8bffa:	79fb      	ldrb	r3, [r7, #7]
   8bffc:	2b00      	cmp	r3, #0
   8bffe:	d001      	beq.n	8c004 <main+0x19ac>
   8c000:	4b4c      	ldr	r3, [pc, #304]	; (8c134 <main+0x1adc>)
   8c002:	4798      	blx	r3
   8c004:	4b49      	ldr	r3, [pc, #292]	; (8c12c <main+0x1ad4>)
   8c006:	2200      	movs	r2, #0
   8c008:	701a      	strb	r2, [r3, #0]
   8c00a:	e08e      	b.n	8c12a <main+0x1ad2>
   8c00c:	4b47      	ldr	r3, [pc, #284]	; (8c12c <main+0x1ad4>)
   8c00e:	781b      	ldrb	r3, [r3, #0]
   8c010:	4618      	mov	r0, r3
   8c012:	4b49      	ldr	r3, [pc, #292]	; (8c138 <main+0x1ae0>)
   8c014:	4798      	blx	r3
   8c016:	4603      	mov	r3, r0
   8c018:	71fb      	strb	r3, [r7, #7]
   8c01a:	79fb      	ldrb	r3, [r7, #7]
   8c01c:	2b00      	cmp	r3, #0
   8c01e:	d001      	beq.n	8c024 <main+0x19cc>
   8c020:	4b44      	ldr	r3, [pc, #272]	; (8c134 <main+0x1adc>)
   8c022:	4798      	blx	r3
   8c024:	79fb      	ldrb	r3, [r7, #7]
   8c026:	2b00      	cmp	r3, #0
   8c028:	d002      	beq.n	8c030 <main+0x19d8>
   8c02a:	79fb      	ldrb	r3, [r7, #7]
   8c02c:	2b03      	cmp	r3, #3
   8c02e:	d10b      	bne.n	8c048 <main+0x19f0>
   8c030:	4b3e      	ldr	r3, [pc, #248]	; (8c12c <main+0x1ad4>)
   8c032:	781b      	ldrb	r3, [r3, #0]
   8c034:	4618      	mov	r0, r3
   8c036:	4b41      	ldr	r3, [pc, #260]	; (8c13c <main+0x1ae4>)
   8c038:	4798      	blx	r3
   8c03a:	4603      	mov	r3, r0
   8c03c:	71fb      	strb	r3, [r7, #7]
   8c03e:	79fb      	ldrb	r3, [r7, #7]
   8c040:	2b00      	cmp	r3, #0
   8c042:	d001      	beq.n	8c048 <main+0x19f0>
   8c044:	4b3b      	ldr	r3, [pc, #236]	; (8c134 <main+0x1adc>)
   8c046:	4798      	blx	r3
   8c048:	79fb      	ldrb	r3, [r7, #7]
   8c04a:	2b00      	cmp	r3, #0
   8c04c:	d002      	beq.n	8c054 <main+0x19fc>
   8c04e:	79fb      	ldrb	r3, [r7, #7]
   8c050:	2b03      	cmp	r3, #3
   8c052:	d10b      	bne.n	8c06c <main+0x1a14>
   8c054:	4b35      	ldr	r3, [pc, #212]	; (8c12c <main+0x1ad4>)
   8c056:	781b      	ldrb	r3, [r3, #0]
   8c058:	4618      	mov	r0, r3
   8c05a:	4b39      	ldr	r3, [pc, #228]	; (8c140 <main+0x1ae8>)
   8c05c:	4798      	blx	r3
   8c05e:	4603      	mov	r3, r0
   8c060:	71fb      	strb	r3, [r7, #7]
   8c062:	79fb      	ldrb	r3, [r7, #7]
   8c064:	2b00      	cmp	r3, #0
   8c066:	d001      	beq.n	8c06c <main+0x1a14>
   8c068:	4b32      	ldr	r3, [pc, #200]	; (8c134 <main+0x1adc>)
   8c06a:	4798      	blx	r3
   8c06c:	79fb      	ldrb	r3, [r7, #7]
   8c06e:	2b00      	cmp	r3, #0
   8c070:	d002      	beq.n	8c078 <main+0x1a20>
   8c072:	79fb      	ldrb	r3, [r7, #7]
   8c074:	2b03      	cmp	r3, #3
   8c076:	d10b      	bne.n	8c090 <main+0x1a38>
   8c078:	4b2c      	ldr	r3, [pc, #176]	; (8c12c <main+0x1ad4>)
   8c07a:	781b      	ldrb	r3, [r3, #0]
   8c07c:	4618      	mov	r0, r3
   8c07e:	4b31      	ldr	r3, [pc, #196]	; (8c144 <main+0x1aec>)
   8c080:	4798      	blx	r3
   8c082:	4603      	mov	r3, r0
   8c084:	71fb      	strb	r3, [r7, #7]
   8c086:	79fb      	ldrb	r3, [r7, #7]
   8c088:	2b00      	cmp	r3, #0
   8c08a:	d001      	beq.n	8c090 <main+0x1a38>
   8c08c:	4b29      	ldr	r3, [pc, #164]	; (8c134 <main+0x1adc>)
   8c08e:	4798      	blx	r3
   8c090:	79fb      	ldrb	r3, [r7, #7]
   8c092:	2b00      	cmp	r3, #0
   8c094:	d146      	bne.n	8c124 <main+0x1acc>
   8c096:	4b2c      	ldr	r3, [pc, #176]	; (8c148 <main+0x1af0>)
   8c098:	220f      	movs	r2, #15
   8c09a:	701a      	strb	r2, [r3, #0]
   8c09c:	2201      	movs	r2, #1
   8c09e:	210f      	movs	r1, #15
   8c0a0:	2045      	movs	r0, #69	; 0x45
   8c0a2:	4b2a      	ldr	r3, [pc, #168]	; (8c14c <main+0x1af4>)
   8c0a4:	4798      	blx	r3
   8c0a6:	79fb      	ldrb	r3, [r7, #7]
   8c0a8:	2b00      	cmp	r3, #0
   8c0aa:	d03b      	beq.n	8c124 <main+0x1acc>
   8c0ac:	4b21      	ldr	r3, [pc, #132]	; (8c134 <main+0x1adc>)
   8c0ae:	4798      	blx	r3
   8c0b0:	e038      	b.n	8c124 <main+0x1acc>
   8c0b2:	4b1e      	ldr	r3, [pc, #120]	; (8c12c <main+0x1ad4>)
   8c0b4:	781b      	ldrb	r3, [r3, #0]
   8c0b6:	4618      	mov	r0, r3
   8c0b8:	4b1f      	ldr	r3, [pc, #124]	; (8c138 <main+0x1ae0>)
   8c0ba:	4798      	blx	r3
   8c0bc:	4603      	mov	r3, r0
   8c0be:	71fb      	strb	r3, [r7, #7]
   8c0c0:	79fb      	ldrb	r3, [r7, #7]
   8c0c2:	2b00      	cmp	r3, #0
   8c0c4:	d001      	beq.n	8c0ca <main+0x1a72>
   8c0c6:	4b1b      	ldr	r3, [pc, #108]	; (8c134 <main+0x1adc>)
   8c0c8:	4798      	blx	r3
   8c0ca:	79fb      	ldrb	r3, [r7, #7]
   8c0cc:	2b00      	cmp	r3, #0
   8c0ce:	d10b      	bne.n	8c0e8 <main+0x1a90>
   8c0d0:	4b16      	ldr	r3, [pc, #88]	; (8c12c <main+0x1ad4>)
   8c0d2:	781b      	ldrb	r3, [r3, #0]
   8c0d4:	4618      	mov	r0, r3
   8c0d6:	4b19      	ldr	r3, [pc, #100]	; (8c13c <main+0x1ae4>)
   8c0d8:	4798      	blx	r3
   8c0da:	4603      	mov	r3, r0
   8c0dc:	71fb      	strb	r3, [r7, #7]
   8c0de:	79fb      	ldrb	r3, [r7, #7]
   8c0e0:	2b00      	cmp	r3, #0
   8c0e2:	d001      	beq.n	8c0e8 <main+0x1a90>
   8c0e4:	4b13      	ldr	r3, [pc, #76]	; (8c134 <main+0x1adc>)
   8c0e6:	4798      	blx	r3
   8c0e8:	79fb      	ldrb	r3, [r7, #7]
   8c0ea:	2b00      	cmp	r3, #0
   8c0ec:	d11c      	bne.n	8c128 <main+0x1ad0>
   8c0ee:	4b16      	ldr	r3, [pc, #88]	; (8c148 <main+0x1af0>)
   8c0f0:	2207      	movs	r2, #7
   8c0f2:	701a      	strb	r2, [r3, #0]
   8c0f4:	2201      	movs	r2, #1
   8c0f6:	2107      	movs	r1, #7
   8c0f8:	2045      	movs	r0, #69	; 0x45
   8c0fa:	4b14      	ldr	r3, [pc, #80]	; (8c14c <main+0x1af4>)
   8c0fc:	4798      	blx	r3
   8c0fe:	79fb      	ldrb	r3, [r7, #7]
   8c100:	2b00      	cmp	r3, #0
   8c102:	d011      	beq.n	8c128 <main+0x1ad0>
   8c104:	4b0b      	ldr	r3, [pc, #44]	; (8c134 <main+0x1adc>)
   8c106:	4798      	blx	r3
   8c108:	e00e      	b.n	8c128 <main+0x1ad0>
   8c10a:	4b0f      	ldr	r3, [pc, #60]	; (8c148 <main+0x1af0>)
   8c10c:	2214      	movs	r2, #20
   8c10e:	701a      	strb	r2, [r3, #0]
   8c110:	4b06      	ldr	r3, [pc, #24]	; (8c12c <main+0x1ad4>)
   8c112:	781b      	ldrb	r3, [r3, #0]
   8c114:	4618      	mov	r0, r3
   8c116:	4b06      	ldr	r3, [pc, #24]	; (8c130 <main+0x1ad8>)
   8c118:	4798      	blx	r3
   8c11a:	4603      	mov	r3, r0
   8c11c:	71fb      	strb	r3, [r7, #7]
   8c11e:	e004      	b.n	8c12a <main+0x1ad2>
   8c120:	bf00      	nop
   8c122:	e2e0      	b.n	8c6e6 <main+0x208e>
   8c124:	bf00      	nop
   8c126:	e2de      	b.n	8c6e6 <main+0x208e>
   8c128:	bf00      	nop
   8c12a:	e2dc      	b.n	8c6e6 <main+0x208e>
   8c12c:	20072172 	.word	0x20072172
   8c130:	00092ec5 	.word	0x00092ec5
   8c134:	00088725 	.word	0x00088725
   8c138:	000a254d 	.word	0x000a254d
   8c13c:	0009fbdd 	.word	0x0009fbdd
   8c140:	0009bbc1 	.word	0x0009bbc1
   8c144:	00085431 	.word	0x00085431
   8c148:	200704b0 	.word	0x200704b0
   8c14c:	00099729 	.word	0x00099729
   8c150:	4bc3      	ldr	r3, [pc, #780]	; (8c460 <main+0x1e08>)
   8c152:	781b      	ldrb	r3, [r3, #0]
   8c154:	3b07      	subs	r3, #7
   8c156:	2b49      	cmp	r3, #73	; 0x49
   8c158:	f200 812c 	bhi.w	8c3b4 <main+0x1d5c>
   8c15c:	a201      	add	r2, pc, #4	; (adr r2, 8c164 <main+0x1b0c>)
   8c15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c162:	bf00      	nop
   8c164:	0008c301 	.word	0x0008c301
   8c168:	0008c3b5 	.word	0x0008c3b5
   8c16c:	0008c3b5 	.word	0x0008c3b5
   8c170:	0008c28d 	.word	0x0008c28d
   8c174:	0008c28d 	.word	0x0008c28d
   8c178:	0008c28d 	.word	0x0008c28d
   8c17c:	0008c3b5 	.word	0x0008c3b5
   8c180:	0008c3b5 	.word	0x0008c3b5
   8c184:	0008c3b5 	.word	0x0008c3b5
   8c188:	0008c3b5 	.word	0x0008c3b5
   8c18c:	0008c3b5 	.word	0x0008c3b5
   8c190:	0008c3b5 	.word	0x0008c3b5
   8c194:	0008c3b5 	.word	0x0008c3b5
   8c198:	0008c3b5 	.word	0x0008c3b5
   8c19c:	0008c28d 	.word	0x0008c28d
   8c1a0:	0008c3b5 	.word	0x0008c3b5
   8c1a4:	0008c3b5 	.word	0x0008c3b5
   8c1a8:	0008c2e7 	.word	0x0008c2e7
   8c1ac:	0008c2ad 	.word	0x0008c2ad
   8c1b0:	0008c2ad 	.word	0x0008c2ad
   8c1b4:	0008c2ad 	.word	0x0008c2ad
   8c1b8:	0008c3b5 	.word	0x0008c3b5
   8c1bc:	0008c3b5 	.word	0x0008c3b5
   8c1c0:	0008c3b5 	.word	0x0008c3b5
   8c1c4:	0008c3b5 	.word	0x0008c3b5
   8c1c8:	0008c3b5 	.word	0x0008c3b5
   8c1cc:	0008c3b5 	.word	0x0008c3b5
   8c1d0:	0008c3b5 	.word	0x0008c3b5
   8c1d4:	0008c3b5 	.word	0x0008c3b5
   8c1d8:	0008c3b5 	.word	0x0008c3b5
   8c1dc:	0008c3b5 	.word	0x0008c3b5
   8c1e0:	0008c3b5 	.word	0x0008c3b5
   8c1e4:	0008c28d 	.word	0x0008c28d
   8c1e8:	0008c28d 	.word	0x0008c28d
   8c1ec:	0008c28d 	.word	0x0008c28d
   8c1f0:	0008c3b5 	.word	0x0008c3b5
   8c1f4:	0008c3b5 	.word	0x0008c3b5
   8c1f8:	0008c3b5 	.word	0x0008c3b5
   8c1fc:	0008c28d 	.word	0x0008c28d
   8c200:	0008c28d 	.word	0x0008c28d
   8c204:	0008c3b5 	.word	0x0008c3b5
   8c208:	0008c3b5 	.word	0x0008c3b5
   8c20c:	0008c3b5 	.word	0x0008c3b5
   8c210:	0008c3b5 	.word	0x0008c3b5
   8c214:	0008c3b5 	.word	0x0008c3b5
   8c218:	0008c3b5 	.word	0x0008c3b5
   8c21c:	0008c3b5 	.word	0x0008c3b5
   8c220:	0008c3b5 	.word	0x0008c3b5
   8c224:	0008c3b5 	.word	0x0008c3b5
   8c228:	0008c28d 	.word	0x0008c28d
   8c22c:	0008c3b5 	.word	0x0008c3b5
   8c230:	0008c28d 	.word	0x0008c28d
   8c234:	0008c28d 	.word	0x0008c28d
   8c238:	0008c28d 	.word	0x0008c28d
   8c23c:	0008c28d 	.word	0x0008c28d
   8c240:	0008c3b5 	.word	0x0008c3b5
   8c244:	0008c3b5 	.word	0x0008c3b5
   8c248:	0008c3b5 	.word	0x0008c3b5
   8c24c:	0008c3b5 	.word	0x0008c3b5
   8c250:	0008c3b5 	.word	0x0008c3b5
   8c254:	0008c3b5 	.word	0x0008c3b5
   8c258:	0008c3b5 	.word	0x0008c3b5
   8c25c:	0008c3b5 	.word	0x0008c3b5
   8c260:	0008c3b5 	.word	0x0008c3b5
   8c264:	0008c3b5 	.word	0x0008c3b5
   8c268:	0008c3b5 	.word	0x0008c3b5
   8c26c:	0008c3b5 	.word	0x0008c3b5
   8c270:	0008c3b5 	.word	0x0008c3b5
   8c274:	0008c3b5 	.word	0x0008c3b5
   8c278:	0008c3b5 	.word	0x0008c3b5
   8c27c:	0008c3b5 	.word	0x0008c3b5
   8c280:	0008c3b5 	.word	0x0008c3b5
   8c284:	0008c3b5 	.word	0x0008c3b5
   8c288:	0008c359 	.word	0x0008c359
   8c28c:	4b74      	ldr	r3, [pc, #464]	; (8c460 <main+0x1e08>)
   8c28e:	781b      	ldrb	r3, [r3, #0]
   8c290:	4618      	mov	r0, r3
   8c292:	4b74      	ldr	r3, [pc, #464]	; (8c464 <main+0x1e0c>)
   8c294:	4798      	blx	r3
   8c296:	4603      	mov	r3, r0
   8c298:	71fb      	strb	r3, [r7, #7]
   8c29a:	79fb      	ldrb	r3, [r7, #7]
   8c29c:	2b00      	cmp	r3, #0
   8c29e:	d001      	beq.n	8c2a4 <main+0x1c4c>
   8c2a0:	4b71      	ldr	r3, [pc, #452]	; (8c468 <main+0x1e10>)
   8c2a2:	4798      	blx	r3
   8c2a4:	4b6e      	ldr	r3, [pc, #440]	; (8c460 <main+0x1e08>)
   8c2a6:	2200      	movs	r2, #0
   8c2a8:	701a      	strb	r2, [r3, #0]
   8c2aa:	e08a      	b.n	8c3c2 <main+0x1d6a>
   8c2ac:	4b6c      	ldr	r3, [pc, #432]	; (8c460 <main+0x1e08>)
   8c2ae:	781b      	ldrb	r3, [r3, #0]
   8c2b0:	4618      	mov	r0, r3
   8c2b2:	4b6c      	ldr	r3, [pc, #432]	; (8c464 <main+0x1e0c>)
   8c2b4:	4798      	blx	r3
   8c2b6:	4603      	mov	r3, r0
   8c2b8:	71fb      	strb	r3, [r7, #7]
   8c2ba:	79fb      	ldrb	r3, [r7, #7]
   8c2bc:	2b00      	cmp	r3, #0
   8c2be:	d001      	beq.n	8c2c4 <main+0x1c6c>
   8c2c0:	4b69      	ldr	r3, [pc, #420]	; (8c468 <main+0x1e10>)
   8c2c2:	4798      	blx	r3
   8c2c4:	79fb      	ldrb	r3, [r7, #7]
   8c2c6:	2b00      	cmp	r3, #0
   8c2c8:	d176      	bne.n	8c3b8 <main+0x1d60>
   8c2ca:	4b68      	ldr	r3, [pc, #416]	; (8c46c <main+0x1e14>)
   8c2cc:	2210      	movs	r2, #16
   8c2ce:	701a      	strb	r2, [r3, #0]
   8c2d0:	2201      	movs	r2, #1
   8c2d2:	2110      	movs	r1, #16
   8c2d4:	2045      	movs	r0, #69	; 0x45
   8c2d6:	4b66      	ldr	r3, [pc, #408]	; (8c470 <main+0x1e18>)
   8c2d8:	4798      	blx	r3
   8c2da:	79fb      	ldrb	r3, [r7, #7]
   8c2dc:	2b00      	cmp	r3, #0
   8c2de:	d06b      	beq.n	8c3b8 <main+0x1d60>
   8c2e0:	4b61      	ldr	r3, [pc, #388]	; (8c468 <main+0x1e10>)
   8c2e2:	4798      	blx	r3
   8c2e4:	e068      	b.n	8c3b8 <main+0x1d60>
   8c2e6:	4b5e      	ldr	r3, [pc, #376]	; (8c460 <main+0x1e08>)
   8c2e8:	781b      	ldrb	r3, [r3, #0]
   8c2ea:	4618      	mov	r0, r3
   8c2ec:	4b5d      	ldr	r3, [pc, #372]	; (8c464 <main+0x1e0c>)
   8c2ee:	4798      	blx	r3
   8c2f0:	4603      	mov	r3, r0
   8c2f2:	71fb      	strb	r3, [r7, #7]
   8c2f4:	79fb      	ldrb	r3, [r7, #7]
   8c2f6:	2b00      	cmp	r3, #0
   8c2f8:	d060      	beq.n	8c3bc <main+0x1d64>
   8c2fa:	4b5b      	ldr	r3, [pc, #364]	; (8c468 <main+0x1e10>)
   8c2fc:	4798      	blx	r3
   8c2fe:	e05d      	b.n	8c3bc <main+0x1d64>
   8c300:	4b57      	ldr	r3, [pc, #348]	; (8c460 <main+0x1e08>)
   8c302:	781b      	ldrb	r3, [r3, #0]
   8c304:	4618      	mov	r0, r3
   8c306:	4b5b      	ldr	r3, [pc, #364]	; (8c474 <main+0x1e1c>)
   8c308:	4798      	blx	r3
   8c30a:	4603      	mov	r3, r0
   8c30c:	71fb      	strb	r3, [r7, #7]
   8c30e:	79fb      	ldrb	r3, [r7, #7]
   8c310:	2b00      	cmp	r3, #0
   8c312:	d001      	beq.n	8c318 <main+0x1cc0>
   8c314:	4b54      	ldr	r3, [pc, #336]	; (8c468 <main+0x1e10>)
   8c316:	4798      	blx	r3
   8c318:	79fb      	ldrb	r3, [r7, #7]
   8c31a:	2b00      	cmp	r3, #0
   8c31c:	d10b      	bne.n	8c336 <main+0x1cde>
   8c31e:	4b50      	ldr	r3, [pc, #320]	; (8c460 <main+0x1e08>)
   8c320:	781b      	ldrb	r3, [r3, #0]
   8c322:	4618      	mov	r0, r3
   8c324:	4b54      	ldr	r3, [pc, #336]	; (8c478 <main+0x1e20>)
   8c326:	4798      	blx	r3
   8c328:	4603      	mov	r3, r0
   8c32a:	71fb      	strb	r3, [r7, #7]
   8c32c:	79fb      	ldrb	r3, [r7, #7]
   8c32e:	2b00      	cmp	r3, #0
   8c330:	d001      	beq.n	8c336 <main+0x1cde>
   8c332:	4b4d      	ldr	r3, [pc, #308]	; (8c468 <main+0x1e10>)
   8c334:	4798      	blx	r3
   8c336:	79fb      	ldrb	r3, [r7, #7]
   8c338:	2b00      	cmp	r3, #0
   8c33a:	d141      	bne.n	8c3c0 <main+0x1d68>
   8c33c:	4b4b      	ldr	r3, [pc, #300]	; (8c46c <main+0x1e14>)
   8c33e:	2207      	movs	r2, #7
   8c340:	701a      	strb	r2, [r3, #0]
   8c342:	2201      	movs	r2, #1
   8c344:	2107      	movs	r1, #7
   8c346:	2045      	movs	r0, #69	; 0x45
   8c348:	4b49      	ldr	r3, [pc, #292]	; (8c470 <main+0x1e18>)
   8c34a:	4798      	blx	r3
   8c34c:	79fb      	ldrb	r3, [r7, #7]
   8c34e:	2b00      	cmp	r3, #0
   8c350:	d036      	beq.n	8c3c0 <main+0x1d68>
   8c352:	4b45      	ldr	r3, [pc, #276]	; (8c468 <main+0x1e10>)
   8c354:	4798      	blx	r3
   8c356:	e033      	b.n	8c3c0 <main+0x1d68>
   8c358:	4b41      	ldr	r3, [pc, #260]	; (8c460 <main+0x1e08>)
   8c35a:	781b      	ldrb	r3, [r3, #0]
   8c35c:	4618      	mov	r0, r3
   8c35e:	4b41      	ldr	r3, [pc, #260]	; (8c464 <main+0x1e0c>)
   8c360:	4798      	blx	r3
   8c362:	4603      	mov	r3, r0
   8c364:	71fb      	strb	r3, [r7, #7]
   8c366:	79fb      	ldrb	r3, [r7, #7]
   8c368:	2b00      	cmp	r3, #0
   8c36a:	d001      	beq.n	8c370 <main+0x1d18>
   8c36c:	4b3e      	ldr	r3, [pc, #248]	; (8c468 <main+0x1e10>)
   8c36e:	4798      	blx	r3
   8c370:	79fb      	ldrb	r3, [r7, #7]
   8c372:	2b00      	cmp	r3, #0
   8c374:	d11a      	bne.n	8c3ac <main+0x1d54>
   8c376:	4b41      	ldr	r3, [pc, #260]	; (8c47c <main+0x1e24>)
   8c378:	4798      	blx	r3
   8c37a:	4603      	mov	r3, r0
   8c37c:	71fb      	strb	r3, [r7, #7]
   8c37e:	4b40      	ldr	r3, [pc, #256]	; (8c480 <main+0x1e28>)
   8c380:	4798      	blx	r3
   8c382:	4603      	mov	r3, r0
   8c384:	71fb      	strb	r3, [r7, #7]
   8c386:	4b3f      	ldr	r3, [pc, #252]	; (8c484 <main+0x1e2c>)
   8c388:	4798      	blx	r3
   8c38a:	4603      	mov	r3, r0
   8c38c:	71fb      	strb	r3, [r7, #7]
   8c38e:	4b37      	ldr	r3, [pc, #220]	; (8c46c <main+0x1e14>)
   8c390:	2211      	movs	r2, #17
   8c392:	701a      	strb	r2, [r3, #0]
   8c394:	4b35      	ldr	r3, [pc, #212]	; (8c46c <main+0x1e14>)
   8c396:	781b      	ldrb	r3, [r3, #0]
   8c398:	2201      	movs	r2, #1
   8c39a:	4619      	mov	r1, r3
   8c39c:	2045      	movs	r0, #69	; 0x45
   8c39e:	4b34      	ldr	r3, [pc, #208]	; (8c470 <main+0x1e18>)
   8c3a0:	4798      	blx	r3
   8c3a2:	79fb      	ldrb	r3, [r7, #7]
   8c3a4:	2b00      	cmp	r3, #0
   8c3a6:	d001      	beq.n	8c3ac <main+0x1d54>
   8c3a8:	4b2f      	ldr	r3, [pc, #188]	; (8c468 <main+0x1e10>)
   8c3aa:	4798      	blx	r3
   8c3ac:	4b2c      	ldr	r3, [pc, #176]	; (8c460 <main+0x1e08>)
   8c3ae:	2200      	movs	r2, #0
   8c3b0:	701a      	strb	r2, [r3, #0]
   8c3b2:	e006      	b.n	8c3c2 <main+0x1d6a>
   8c3b4:	bf00      	nop
   8c3b6:	e196      	b.n	8c6e6 <main+0x208e>
   8c3b8:	bf00      	nop
   8c3ba:	e194      	b.n	8c6e6 <main+0x208e>
   8c3bc:	bf00      	nop
   8c3be:	e192      	b.n	8c6e6 <main+0x208e>
   8c3c0:	bf00      	nop
   8c3c2:	e190      	b.n	8c6e6 <main+0x208e>
   8c3c4:	4b26      	ldr	r3, [pc, #152]	; (8c460 <main+0x1e08>)
   8c3c6:	781b      	ldrb	r3, [r3, #0]
   8c3c8:	3b07      	subs	r3, #7
   8c3ca:	2b21      	cmp	r3, #33	; 0x21
   8c3cc:	f200 80a8 	bhi.w	8c520 <main+0x1ec8>
   8c3d0:	a201      	add	r2, pc, #4	; (adr r2, 8c3d8 <main+0x1d80>)
   8c3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c3d6:	bf00      	nop
   8c3d8:	0008c499 	.word	0x0008c499
   8c3dc:	0008c521 	.word	0x0008c521
   8c3e0:	0008c521 	.word	0x0008c521
   8c3e4:	0008c489 	.word	0x0008c489
   8c3e8:	0008c489 	.word	0x0008c489
   8c3ec:	0008c489 	.word	0x0008c489
   8c3f0:	0008c521 	.word	0x0008c521
   8c3f4:	0008c521 	.word	0x0008c521
   8c3f8:	0008c521 	.word	0x0008c521
   8c3fc:	0008c521 	.word	0x0008c521
   8c400:	0008c521 	.word	0x0008c521
   8c404:	0008c521 	.word	0x0008c521
   8c408:	0008c521 	.word	0x0008c521
   8c40c:	0008c521 	.word	0x0008c521
   8c410:	0008c521 	.word	0x0008c521
   8c414:	0008c521 	.word	0x0008c521
   8c418:	0008c521 	.word	0x0008c521
   8c41c:	0008c521 	.word	0x0008c521
   8c420:	0008c521 	.word	0x0008c521
   8c424:	0008c4fb 	.word	0x0008c4fb
   8c428:	0008c4fb 	.word	0x0008c4fb
   8c42c:	0008c521 	.word	0x0008c521
   8c430:	0008c521 	.word	0x0008c521
   8c434:	0008c521 	.word	0x0008c521
   8c438:	0008c521 	.word	0x0008c521
   8c43c:	0008c521 	.word	0x0008c521
   8c440:	0008c521 	.word	0x0008c521
   8c444:	0008c521 	.word	0x0008c521
   8c448:	0008c521 	.word	0x0008c521
   8c44c:	0008c521 	.word	0x0008c521
   8c450:	0008c521 	.word	0x0008c521
   8c454:	0008c521 	.word	0x0008c521
   8c458:	0008c489 	.word	0x0008c489
   8c45c:	0008c489 	.word	0x0008c489
   8c460:	20072172 	.word	0x20072172
   8c464:	00085431 	.word	0x00085431
   8c468:	00088725 	.word	0x00088725
   8c46c:	200704b0 	.word	0x200704b0
   8c470:	00099729 	.word	0x00099729
   8c474:	000a254d 	.word	0x000a254d
   8c478:	0009fbdd 	.word	0x0009fbdd
   8c47c:	000a13b1 	.word	0x000a13b1
   8c480:	000a2edd 	.word	0x000a2edd
   8c484:	0009ba81 	.word	0x0009ba81
   8c488:	4ba1      	ldr	r3, [pc, #644]	; (8c710 <main+0x20b8>)
   8c48a:	781b      	ldrb	r3, [r3, #0]
   8c48c:	4618      	mov	r0, r3
   8c48e:	4ba1      	ldr	r3, [pc, #644]	; (8c714 <main+0x20bc>)
   8c490:	4798      	blx	r3
   8c492:	4603      	mov	r3, r0
   8c494:	71fb      	strb	r3, [r7, #7]
   8c496:	e046      	b.n	8c526 <main+0x1ece>
   8c498:	4b9d      	ldr	r3, [pc, #628]	; (8c710 <main+0x20b8>)
   8c49a:	781b      	ldrb	r3, [r3, #0]
   8c49c:	4618      	mov	r0, r3
   8c49e:	4b9d      	ldr	r3, [pc, #628]	; (8c714 <main+0x20bc>)
   8c4a0:	4798      	blx	r3
   8c4a2:	4603      	mov	r3, r0
   8c4a4:	71fb      	strb	r3, [r7, #7]
   8c4a6:	79fb      	ldrb	r3, [r7, #7]
   8c4a8:	2b00      	cmp	r3, #0
   8c4aa:	d001      	beq.n	8c4b0 <main+0x1e58>
   8c4ac:	4b9a      	ldr	r3, [pc, #616]	; (8c718 <main+0x20c0>)
   8c4ae:	4798      	blx	r3
   8c4b0:	79fb      	ldrb	r3, [r7, #7]
   8c4b2:	2b00      	cmp	r3, #0
   8c4b4:	d10b      	bne.n	8c4ce <main+0x1e76>
   8c4b6:	4b96      	ldr	r3, [pc, #600]	; (8c710 <main+0x20b8>)
   8c4b8:	781b      	ldrb	r3, [r3, #0]
   8c4ba:	4618      	mov	r0, r3
   8c4bc:	4b97      	ldr	r3, [pc, #604]	; (8c71c <main+0x20c4>)
   8c4be:	4798      	blx	r3
   8c4c0:	4603      	mov	r3, r0
   8c4c2:	71fb      	strb	r3, [r7, #7]
   8c4c4:	79fb      	ldrb	r3, [r7, #7]
   8c4c6:	2b00      	cmp	r3, #0
   8c4c8:	d001      	beq.n	8c4ce <main+0x1e76>
   8c4ca:	4b93      	ldr	r3, [pc, #588]	; (8c718 <main+0x20c0>)
   8c4cc:	4798      	blx	r3
   8c4ce:	79fb      	ldrb	r3, [r7, #7]
   8c4d0:	2b00      	cmp	r3, #0
   8c4d2:	d10e      	bne.n	8c4f2 <main+0x1e9a>
   8c4d4:	4b92      	ldr	r3, [pc, #584]	; (8c720 <main+0x20c8>)
   8c4d6:	2207      	movs	r2, #7
   8c4d8:	701a      	strb	r2, [r3, #0]
   8c4da:	4b91      	ldr	r3, [pc, #580]	; (8c720 <main+0x20c8>)
   8c4dc:	781b      	ldrb	r3, [r3, #0]
   8c4de:	2201      	movs	r2, #1
   8c4e0:	4619      	mov	r1, r3
   8c4e2:	2045      	movs	r0, #69	; 0x45
   8c4e4:	4b8f      	ldr	r3, [pc, #572]	; (8c724 <main+0x20cc>)
   8c4e6:	4798      	blx	r3
   8c4e8:	79fb      	ldrb	r3, [r7, #7]
   8c4ea:	2b00      	cmp	r3, #0
   8c4ec:	d001      	beq.n	8c4f2 <main+0x1e9a>
   8c4ee:	4b8a      	ldr	r3, [pc, #552]	; (8c718 <main+0x20c0>)
   8c4f0:	4798      	blx	r3
   8c4f2:	4b87      	ldr	r3, [pc, #540]	; (8c710 <main+0x20b8>)
   8c4f4:	2200      	movs	r2, #0
   8c4f6:	701a      	strb	r2, [r3, #0]
   8c4f8:	e015      	b.n	8c526 <main+0x1ece>
   8c4fa:	4b85      	ldr	r3, [pc, #532]	; (8c710 <main+0x20b8>)
   8c4fc:	781b      	ldrb	r3, [r3, #0]
   8c4fe:	4618      	mov	r0, r3
   8c500:	4b89      	ldr	r3, [pc, #548]	; (8c728 <main+0x20d0>)
   8c502:	4798      	blx	r3
   8c504:	4603      	mov	r3, r0
   8c506:	71fb      	strb	r3, [r7, #7]
   8c508:	79fb      	ldrb	r3, [r7, #7]
   8c50a:	2b00      	cmp	r3, #0
   8c50c:	d001      	beq.n	8c512 <main+0x1eba>
   8c50e:	4b82      	ldr	r3, [pc, #520]	; (8c718 <main+0x20c0>)
   8c510:	4798      	blx	r3
   8c512:	79fb      	ldrb	r3, [r7, #7]
   8c514:	2b00      	cmp	r3, #0
   8c516:	d105      	bne.n	8c524 <main+0x1ecc>
   8c518:	4b81      	ldr	r3, [pc, #516]	; (8c720 <main+0x20c8>)
   8c51a:	220f      	movs	r2, #15
   8c51c:	701a      	strb	r2, [r3, #0]
   8c51e:	e001      	b.n	8c524 <main+0x1ecc>
   8c520:	bf00      	nop
   8c522:	e0e0      	b.n	8c6e6 <main+0x208e>
   8c524:	bf00      	nop
   8c526:	e0de      	b.n	8c6e6 <main+0x208e>
   8c528:	4b79      	ldr	r3, [pc, #484]	; (8c710 <main+0x20b8>)
   8c52a:	781b      	ldrb	r3, [r3, #0]
   8c52c:	3b07      	subs	r3, #7
   8c52e:	2b38      	cmp	r3, #56	; 0x38
   8c530:	f200 80ce 	bhi.w	8c6d0 <main+0x2078>
   8c534:	a201      	add	r2, pc, #4	; (adr r2, 8c53c <main+0x1ee4>)
   8c536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c53a:	bf00      	nop
   8c53c:	0008c673 	.word	0x0008c673
   8c540:	0008c6d1 	.word	0x0008c6d1
   8c544:	0008c6d1 	.word	0x0008c6d1
   8c548:	0008c621 	.word	0x0008c621
   8c54c:	0008c621 	.word	0x0008c621
   8c550:	0008c621 	.word	0x0008c621
   8c554:	0008c6d1 	.word	0x0008c6d1
   8c558:	0008c6d1 	.word	0x0008c6d1
   8c55c:	0008c6d1 	.word	0x0008c6d1
   8c560:	0008c6d1 	.word	0x0008c6d1
   8c564:	0008c6d1 	.word	0x0008c6d1
   8c568:	0008c6d1 	.word	0x0008c6d1
   8c56c:	0008c6d1 	.word	0x0008c6d1
   8c570:	0008c6d1 	.word	0x0008c6d1
   8c574:	0008c6d1 	.word	0x0008c6d1
   8c578:	0008c6d1 	.word	0x0008c6d1
   8c57c:	0008c6d1 	.word	0x0008c6d1
   8c580:	0008c6d1 	.word	0x0008c6d1
   8c584:	0008c6d1 	.word	0x0008c6d1
   8c588:	0008c621 	.word	0x0008c621
   8c58c:	0008c621 	.word	0x0008c621
   8c590:	0008c6d1 	.word	0x0008c6d1
   8c594:	0008c6d1 	.word	0x0008c6d1
   8c598:	0008c6d1 	.word	0x0008c6d1
   8c59c:	0008c6d1 	.word	0x0008c6d1
   8c5a0:	0008c6d1 	.word	0x0008c6d1
   8c5a4:	0008c6d1 	.word	0x0008c6d1
   8c5a8:	0008c6d1 	.word	0x0008c6d1
   8c5ac:	0008c6d1 	.word	0x0008c6d1
   8c5b0:	0008c6d1 	.word	0x0008c6d1
   8c5b4:	0008c6d1 	.word	0x0008c6d1
   8c5b8:	0008c6d1 	.word	0x0008c6d1
   8c5bc:	0008c621 	.word	0x0008c621
   8c5c0:	0008c621 	.word	0x0008c621
   8c5c4:	0008c6d1 	.word	0x0008c6d1
   8c5c8:	0008c6d1 	.word	0x0008c6d1
   8c5cc:	0008c6d1 	.word	0x0008c6d1
   8c5d0:	0008c6d1 	.word	0x0008c6d1
   8c5d4:	0008c6d1 	.word	0x0008c6d1
   8c5d8:	0008c6d1 	.word	0x0008c6d1
   8c5dc:	0008c6d1 	.word	0x0008c6d1
   8c5e0:	0008c6d1 	.word	0x0008c6d1
   8c5e4:	0008c6d1 	.word	0x0008c6d1
   8c5e8:	0008c6d1 	.word	0x0008c6d1
   8c5ec:	0008c6d1 	.word	0x0008c6d1
   8c5f0:	0008c6d1 	.word	0x0008c6d1
   8c5f4:	0008c6d1 	.word	0x0008c6d1
   8c5f8:	0008c6d1 	.word	0x0008c6d1
   8c5fc:	0008c6d1 	.word	0x0008c6d1
   8c600:	0008c6d1 	.word	0x0008c6d1
   8c604:	0008c6d1 	.word	0x0008c6d1
   8c608:	0008c6d1 	.word	0x0008c6d1
   8c60c:	0008c6d1 	.word	0x0008c6d1
   8c610:	0008c6d1 	.word	0x0008c6d1
   8c614:	0008c6d1 	.word	0x0008c6d1
   8c618:	0008c6d1 	.word	0x0008c6d1
   8c61c:	0008c63b 	.word	0x0008c63b
   8c620:	4b3b      	ldr	r3, [pc, #236]	; (8c710 <main+0x20b8>)
   8c622:	781b      	ldrb	r3, [r3, #0]
   8c624:	4618      	mov	r0, r3
   8c626:	4b40      	ldr	r3, [pc, #256]	; (8c728 <main+0x20d0>)
   8c628:	4798      	blx	r3
   8c62a:	4603      	mov	r3, r0
   8c62c:	71fb      	strb	r3, [r7, #7]
   8c62e:	79fb      	ldrb	r3, [r7, #7]
   8c630:	2b00      	cmp	r3, #0
   8c632:	d04f      	beq.n	8c6d4 <main+0x207c>
   8c634:	4b38      	ldr	r3, [pc, #224]	; (8c718 <main+0x20c0>)
   8c636:	4798      	blx	r3
   8c638:	e04c      	b.n	8c6d4 <main+0x207c>
   8c63a:	4b35      	ldr	r3, [pc, #212]	; (8c710 <main+0x20b8>)
   8c63c:	781b      	ldrb	r3, [r3, #0]
   8c63e:	4618      	mov	r0, r3
   8c640:	4b39      	ldr	r3, [pc, #228]	; (8c728 <main+0x20d0>)
   8c642:	4798      	blx	r3
   8c644:	4603      	mov	r3, r0
   8c646:	71fb      	strb	r3, [r7, #7]
   8c648:	79fb      	ldrb	r3, [r7, #7]
   8c64a:	2b00      	cmp	r3, #0
   8c64c:	d001      	beq.n	8c652 <main+0x1ffa>
   8c64e:	4b32      	ldr	r3, [pc, #200]	; (8c718 <main+0x20c0>)
   8c650:	4798      	blx	r3
   8c652:	4b2f      	ldr	r3, [pc, #188]	; (8c710 <main+0x20b8>)
   8c654:	781b      	ldrb	r3, [r3, #0]
   8c656:	4618      	mov	r0, r3
   8c658:	4b34      	ldr	r3, [pc, #208]	; (8c72c <main+0x20d4>)
   8c65a:	4798      	blx	r3
   8c65c:	4603      	mov	r3, r0
   8c65e:	71fb      	strb	r3, [r7, #7]
   8c660:	79fb      	ldrb	r3, [r7, #7]
   8c662:	2b00      	cmp	r3, #0
   8c664:	d001      	beq.n	8c66a <main+0x2012>
   8c666:	4b2c      	ldr	r3, [pc, #176]	; (8c718 <main+0x20c0>)
   8c668:	4798      	blx	r3
   8c66a:	4b2d      	ldr	r3, [pc, #180]	; (8c720 <main+0x20c8>)
   8c66c:	2208      	movs	r2, #8
   8c66e:	701a      	strb	r2, [r3, #0]
   8c670:	e031      	b.n	8c6d6 <main+0x207e>
   8c672:	4b27      	ldr	r3, [pc, #156]	; (8c710 <main+0x20b8>)
   8c674:	781b      	ldrb	r3, [r3, #0]
   8c676:	4618      	mov	r0, r3
   8c678:	4b26      	ldr	r3, [pc, #152]	; (8c714 <main+0x20bc>)
   8c67a:	4798      	blx	r3
   8c67c:	4603      	mov	r3, r0
   8c67e:	71fb      	strb	r3, [r7, #7]
   8c680:	79fb      	ldrb	r3, [r7, #7]
   8c682:	2b00      	cmp	r3, #0
   8c684:	d001      	beq.n	8c68a <main+0x2032>
   8c686:	4b24      	ldr	r3, [pc, #144]	; (8c718 <main+0x20c0>)
   8c688:	4798      	blx	r3
   8c68a:	79fb      	ldrb	r3, [r7, #7]
   8c68c:	2b00      	cmp	r3, #0
   8c68e:	d10b      	bne.n	8c6a8 <main+0x2050>
   8c690:	4b1f      	ldr	r3, [pc, #124]	; (8c710 <main+0x20b8>)
   8c692:	781b      	ldrb	r3, [r3, #0]
   8c694:	4618      	mov	r0, r3
   8c696:	4b21      	ldr	r3, [pc, #132]	; (8c71c <main+0x20c4>)
   8c698:	4798      	blx	r3
   8c69a:	4603      	mov	r3, r0
   8c69c:	71fb      	strb	r3, [r7, #7]
   8c69e:	79fb      	ldrb	r3, [r7, #7]
   8c6a0:	2b00      	cmp	r3, #0
   8c6a2:	d001      	beq.n	8c6a8 <main+0x2050>
   8c6a4:	4b1c      	ldr	r3, [pc, #112]	; (8c718 <main+0x20c0>)
   8c6a6:	4798      	blx	r3
   8c6a8:	79fb      	ldrb	r3, [r7, #7]
   8c6aa:	2b00      	cmp	r3, #0
   8c6ac:	d10c      	bne.n	8c6c8 <main+0x2070>
   8c6ae:	4b1c      	ldr	r3, [pc, #112]	; (8c720 <main+0x20c8>)
   8c6b0:	2207      	movs	r2, #7
   8c6b2:	701a      	strb	r2, [r3, #0]
   8c6b4:	2201      	movs	r2, #1
   8c6b6:	2107      	movs	r1, #7
   8c6b8:	2045      	movs	r0, #69	; 0x45
   8c6ba:	4b1a      	ldr	r3, [pc, #104]	; (8c724 <main+0x20cc>)
   8c6bc:	4798      	blx	r3
   8c6be:	79fb      	ldrb	r3, [r7, #7]
   8c6c0:	2b00      	cmp	r3, #0
   8c6c2:	d001      	beq.n	8c6c8 <main+0x2070>
   8c6c4:	4b14      	ldr	r3, [pc, #80]	; (8c718 <main+0x20c0>)
   8c6c6:	4798      	blx	r3
   8c6c8:	4b11      	ldr	r3, [pc, #68]	; (8c710 <main+0x20b8>)
   8c6ca:	2200      	movs	r2, #0
   8c6cc:	701a      	strb	r2, [r3, #0]
   8c6ce:	e002      	b.n	8c6d6 <main+0x207e>
   8c6d0:	bf00      	nop
   8c6d2:	e008      	b.n	8c6e6 <main+0x208e>
   8c6d4:	bf00      	nop
   8c6d6:	e006      	b.n	8c6e6 <main+0x208e>
   8c6d8:	bf00      	nop
   8c6da:	e004      	b.n	8c6e6 <main+0x208e>
   8c6dc:	bf00      	nop
   8c6de:	e002      	b.n	8c6e6 <main+0x208e>
   8c6e0:	bf00      	nop
   8c6e2:	e000      	b.n	8c6e6 <main+0x208e>
   8c6e4:	bf00      	nop
   8c6e6:	4b12      	ldr	r3, [pc, #72]	; (8c730 <main+0x20d8>)
   8c6e8:	4798      	blx	r3
   8c6ea:	4603      	mov	r3, r0
   8c6ec:	71fb      	strb	r3, [r7, #7]
   8c6ee:	79fb      	ldrb	r3, [r7, #7]
   8c6f0:	2b00      	cmp	r3, #0
   8c6f2:	d001      	beq.n	8c6f8 <main+0x20a0>
   8c6f4:	4b08      	ldr	r3, [pc, #32]	; (8c718 <main+0x20c0>)
   8c6f6:	4798      	blx	r3
   8c6f8:	4b0e      	ldr	r3, [pc, #56]	; (8c734 <main+0x20dc>)
   8c6fa:	781b      	ldrb	r3, [r3, #0]
   8c6fc:	2b00      	cmp	r3, #0
   8c6fe:	f47e a861 	bne.w	8a7c4 <main+0x16c>
   8c702:	4b0d      	ldr	r3, [pc, #52]	; (8c738 <main+0x20e0>)
   8c704:	781b      	ldrb	r3, [r3, #0]
   8c706:	2b00      	cmp	r3, #0
   8c708:	f47e a85c 	bne.w	8a7c4 <main+0x16c>
   8c70c:	f7fe b828 	b.w	8a760 <main+0x108>
   8c710:	20072172 	.word	0x20072172
   8c714:	000a254d 	.word	0x000a254d
   8c718:	00088725 	.word	0x00088725
   8c71c:	0009fbdd 	.word	0x0009fbdd
   8c720:	200704b0 	.word	0x200704b0
   8c724:	00099729 	.word	0x00099729
   8c728:	00085431 	.word	0x00085431
   8c72c:	00099ebd 	.word	0x00099ebd
   8c730:	0008cb21 	.word	0x0008cb21
   8c734:	20072ec4 	.word	0x20072ec4
   8c738:	20072d9c 	.word	0x20072d9c

0008c73c <Cl_MacInit>:
   8c73c:	b580      	push	{r7, lr}
   8c73e:	b082      	sub	sp, #8
   8c740:	af00      	add	r7, sp, #0
   8c742:	2300      	movs	r3, #0
   8c744:	71fb      	strb	r3, [r7, #7]
   8c746:	4b1d      	ldr	r3, [pc, #116]	; (8c7bc <Cl_MacInit+0x80>)
   8c748:	2200      	movs	r2, #0
   8c74a:	709a      	strb	r2, [r3, #2]
   8c74c:	4b1b      	ldr	r3, [pc, #108]	; (8c7bc <Cl_MacInit+0x80>)
   8c74e:	2200      	movs	r2, #0
   8c750:	705a      	strb	r2, [r3, #1]
   8c752:	4b1a      	ldr	r3, [pc, #104]	; (8c7bc <Cl_MacInit+0x80>)
   8c754:	2200      	movs	r2, #0
   8c756:	701a      	strb	r2, [r3, #0]
   8c758:	4b19      	ldr	r3, [pc, #100]	; (8c7c0 <Cl_MacInit+0x84>)
   8c75a:	2214      	movs	r2, #20
   8c75c:	759a      	strb	r2, [r3, #22]
   8c75e:	4b19      	ldr	r3, [pc, #100]	; (8c7c4 <Cl_MacInit+0x88>)
   8c760:	2228      	movs	r2, #40	; 0x28
   8c762:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   8c766:	4b18      	ldr	r3, [pc, #96]	; (8c7c8 <Cl_MacInit+0x8c>)
   8c768:	2201      	movs	r2, #1
   8c76a:	771a      	strb	r2, [r3, #28]
   8c76c:	4b16      	ldr	r3, [pc, #88]	; (8c7c8 <Cl_MacInit+0x8c>)
   8c76e:	2200      	movs	r2, #0
   8c770:	765a      	strb	r2, [r3, #25]
   8c772:	4b15      	ldr	r3, [pc, #84]	; (8c7c8 <Cl_MacInit+0x8c>)
   8c774:	2200      	movs	r2, #0
   8c776:	761a      	strb	r2, [r3, #24]
   8c778:	4b13      	ldr	r3, [pc, #76]	; (8c7c8 <Cl_MacInit+0x8c>)
   8c77a:	2201      	movs	r2, #1
   8c77c:	769a      	strb	r2, [r3, #26]
   8c77e:	4b12      	ldr	r3, [pc, #72]	; (8c7c8 <Cl_MacInit+0x8c>)
   8c780:	2200      	movs	r2, #0
   8c782:	76da      	strb	r2, [r3, #27]
   8c784:	4b11      	ldr	r3, [pc, #68]	; (8c7cc <Cl_MacInit+0x90>)
   8c786:	2201      	movs	r2, #1
   8c788:	771a      	strb	r2, [r3, #28]
   8c78a:	4b10      	ldr	r3, [pc, #64]	; (8c7cc <Cl_MacInit+0x90>)
   8c78c:	2200      	movs	r2, #0
   8c78e:	765a      	strb	r2, [r3, #25]
   8c790:	4b0e      	ldr	r3, [pc, #56]	; (8c7cc <Cl_MacInit+0x90>)
   8c792:	2200      	movs	r2, #0
   8c794:	761a      	strb	r2, [r3, #24]
   8c796:	4b0d      	ldr	r3, [pc, #52]	; (8c7cc <Cl_MacInit+0x90>)
   8c798:	2200      	movs	r2, #0
   8c79a:	769a      	strb	r2, [r3, #26]
   8c79c:	4b0b      	ldr	r3, [pc, #44]	; (8c7cc <Cl_MacInit+0x90>)
   8c79e:	2200      	movs	r2, #0
   8c7a0:	76da      	strb	r2, [r3, #27]
   8c7a2:	4b0b      	ldr	r3, [pc, #44]	; (8c7d0 <Cl_MacInit+0x94>)
   8c7a4:	2202      	movs	r2, #2
   8c7a6:	701a      	strb	r2, [r3, #0]
   8c7a8:	79fb      	ldrb	r3, [r7, #7]
   8c7aa:	2b00      	cmp	r3, #0
   8c7ac:	d001      	beq.n	8c7b2 <Cl_MacInit+0x76>
   8c7ae:	4b09      	ldr	r3, [pc, #36]	; (8c7d4 <Cl_MacInit+0x98>)
   8c7b0:	4798      	blx	r3
   8c7b2:	79fb      	ldrb	r3, [r7, #7]
   8c7b4:	4618      	mov	r0, r3
   8c7b6:	3708      	adds	r7, #8
   8c7b8:	46bd      	mov	sp, r7
   8c7ba:	bd80      	pop	{r7, pc}
   8c7bc:	20072ec4 	.word	0x20072ec4
   8c7c0:	20072f78 	.word	0x20072f78
   8c7c4:	20072df8 	.word	0x20072df8
   8c7c8:	20072fb4 	.word	0x20072fb4
   8c7cc:	20072e7c 	.word	0x20072e7c
   8c7d0:	200704b0 	.word	0x200704b0
   8c7d4:	00088725 	.word	0x00088725

0008c7d8 <Cl_App_init>:
   8c7d8:	b580      	push	{r7, lr}
   8c7da:	b082      	sub	sp, #8
   8c7dc:	af00      	add	r7, sp, #0
   8c7de:	2304      	movs	r3, #4
   8c7e0:	71fb      	strb	r3, [r7, #7]
   8c7e2:	4b26      	ldr	r3, [pc, #152]	; (8c87c <Cl_App_init+0xa4>)
   8c7e4:	4798      	blx	r3
   8c7e6:	4603      	mov	r3, r0
   8c7e8:	71fb      	strb	r3, [r7, #7]
   8c7ea:	79fb      	ldrb	r3, [r7, #7]
   8c7ec:	2b00      	cmp	r3, #0
   8c7ee:	d001      	beq.n	8c7f4 <Cl_App_init+0x1c>
   8c7f0:	4b23      	ldr	r3, [pc, #140]	; (8c880 <Cl_App_init+0xa8>)
   8c7f2:	4798      	blx	r3
   8c7f4:	4b23      	ldr	r3, [pc, #140]	; (8c884 <Cl_App_init+0xac>)
   8c7f6:	4798      	blx	r3
   8c7f8:	4603      	mov	r3, r0
   8c7fa:	71fb      	strb	r3, [r7, #7]
   8c7fc:	79fb      	ldrb	r3, [r7, #7]
   8c7fe:	2b00      	cmp	r3, #0
   8c800:	d001      	beq.n	8c806 <Cl_App_init+0x2e>
   8c802:	4b1f      	ldr	r3, [pc, #124]	; (8c880 <Cl_App_init+0xa8>)
   8c804:	4798      	blx	r3
   8c806:	4b20      	ldr	r3, [pc, #128]	; (8c888 <Cl_App_init+0xb0>)
   8c808:	4798      	blx	r3
   8c80a:	4603      	mov	r3, r0
   8c80c:	71fb      	strb	r3, [r7, #7]
   8c80e:	79fb      	ldrb	r3, [r7, #7]
   8c810:	2b00      	cmp	r3, #0
   8c812:	d001      	beq.n	8c818 <Cl_App_init+0x40>
   8c814:	4b1a      	ldr	r3, [pc, #104]	; (8c880 <Cl_App_init+0xa8>)
   8c816:	4798      	blx	r3
   8c818:	4b1c      	ldr	r3, [pc, #112]	; (8c88c <Cl_App_init+0xb4>)
   8c81a:	4798      	blx	r3
   8c81c:	4603      	mov	r3, r0
   8c81e:	71fb      	strb	r3, [r7, #7]
   8c820:	79fb      	ldrb	r3, [r7, #7]
   8c822:	2b00      	cmp	r3, #0
   8c824:	d001      	beq.n	8c82a <Cl_App_init+0x52>
   8c826:	4b16      	ldr	r3, [pc, #88]	; (8c880 <Cl_App_init+0xa8>)
   8c828:	4798      	blx	r3
   8c82a:	4b19      	ldr	r3, [pc, #100]	; (8c890 <Cl_App_init+0xb8>)
   8c82c:	4798      	blx	r3
   8c82e:	4603      	mov	r3, r0
   8c830:	71fb      	strb	r3, [r7, #7]
   8c832:	79fb      	ldrb	r3, [r7, #7]
   8c834:	2b00      	cmp	r3, #0
   8c836:	d001      	beq.n	8c83c <Cl_App_init+0x64>
   8c838:	4b11      	ldr	r3, [pc, #68]	; (8c880 <Cl_App_init+0xa8>)
   8c83a:	4798      	blx	r3
   8c83c:	4b15      	ldr	r3, [pc, #84]	; (8c894 <Cl_App_init+0xbc>)
   8c83e:	4798      	blx	r3
   8c840:	4603      	mov	r3, r0
   8c842:	71fb      	strb	r3, [r7, #7]
   8c844:	79fb      	ldrb	r3, [r7, #7]
   8c846:	2b00      	cmp	r3, #0
   8c848:	d001      	beq.n	8c84e <Cl_App_init+0x76>
   8c84a:	4b0d      	ldr	r3, [pc, #52]	; (8c880 <Cl_App_init+0xa8>)
   8c84c:	4798      	blx	r3
   8c84e:	4b12      	ldr	r3, [pc, #72]	; (8c898 <Cl_App_init+0xc0>)
   8c850:	4798      	blx	r3
   8c852:	4603      	mov	r3, r0
   8c854:	71fb      	strb	r3, [r7, #7]
   8c856:	79fb      	ldrb	r3, [r7, #7]
   8c858:	2b00      	cmp	r3, #0
   8c85a:	d001      	beq.n	8c860 <Cl_App_init+0x88>
   8c85c:	4b08      	ldr	r3, [pc, #32]	; (8c880 <Cl_App_init+0xa8>)
   8c85e:	4798      	blx	r3
   8c860:	4b0e      	ldr	r3, [pc, #56]	; (8c89c <Cl_App_init+0xc4>)
   8c862:	4798      	blx	r3
   8c864:	4603      	mov	r3, r0
   8c866:	71fb      	strb	r3, [r7, #7]
   8c868:	79fb      	ldrb	r3, [r7, #7]
   8c86a:	2b00      	cmp	r3, #0
   8c86c:	d001      	beq.n	8c872 <Cl_App_init+0x9a>
   8c86e:	4b04      	ldr	r3, [pc, #16]	; (8c880 <Cl_App_init+0xa8>)
   8c870:	4798      	blx	r3
   8c872:	2300      	movs	r3, #0
   8c874:	4618      	mov	r0, r3
   8c876:	3708      	adds	r7, #8
   8c878:	46bd      	mov	sp, r7
   8c87a:	bd80      	pop	{r7, pc}
   8c87c:	00080ce1 	.word	0x00080ce1
   8c880:	00088725 	.word	0x00088725
   8c884:	00099c29 	.word	0x00099c29
   8c888:	00099ead 	.word	0x00099ead
   8c88c:	00085321 	.word	0x00085321
   8c890:	0009ba81 	.word	0x0009ba81
   8c894:	000a13b1 	.word	0x000a13b1
   8c898:	000a2edd 	.word	0x000a2edd
   8c89c:	00084999 	.word	0x00084999

0008c8a0 <Cl_Mac_Configure>:
   8c8a0:	b580      	push	{r7, lr}
   8c8a2:	b082      	sub	sp, #8
   8c8a4:	af00      	add	r7, sp, #0
   8c8a6:	2304      	movs	r3, #4
   8c8a8:	71fb      	strb	r3, [r7, #7]
   8c8aa:	79fb      	ldrb	r3, [r7, #7]
   8c8ac:	2b00      	cmp	r3, #0
   8c8ae:	d001      	beq.n	8c8b4 <Cl_Mac_Configure+0x14>
   8c8b0:	4b03      	ldr	r3, [pc, #12]	; (8c8c0 <Cl_Mac_Configure+0x20>)
   8c8b2:	4798      	blx	r3
   8c8b4:	2300      	movs	r3, #0
   8c8b6:	4618      	mov	r0, r3
   8c8b8:	3708      	adds	r7, #8
   8c8ba:	46bd      	mov	sp, r7
   8c8bc:	bd80      	pop	{r7, pc}
   8c8be:	bf00      	nop
   8c8c0:	00088725 	.word	0x00088725

0008c8c4 <Cl_Mac_GetSystem_Status_Query>:
   8c8c4:	b580      	push	{r7, lr}
   8c8c6:	b082      	sub	sp, #8
   8c8c8:	af00      	add	r7, sp, #0
   8c8ca:	2304      	movs	r3, #4
   8c8cc:	71fb      	strb	r3, [r7, #7]
   8c8ce:	4b07      	ldr	r3, [pc, #28]	; (8c8ec <Cl_Mac_GetSystem_Status_Query+0x28>)
   8c8d0:	4798      	blx	r3
   8c8d2:	4603      	mov	r3, r0
   8c8d4:	71fb      	strb	r3, [r7, #7]
   8c8d6:	79fb      	ldrb	r3, [r7, #7]
   8c8d8:	2b00      	cmp	r3, #0
   8c8da:	d001      	beq.n	8c8e0 <Cl_Mac_GetSystem_Status_Query+0x1c>
   8c8dc:	4b04      	ldr	r3, [pc, #16]	; (8c8f0 <Cl_Mac_GetSystem_Status_Query+0x2c>)
   8c8de:	4798      	blx	r3
   8c8e0:	2300      	movs	r3, #0
   8c8e2:	4618      	mov	r0, r3
   8c8e4:	3708      	adds	r7, #8
   8c8e6:	46bd      	mov	sp, r7
   8c8e8:	bd80      	pop	{r7, pc}
   8c8ea:	bf00      	nop
   8c8ec:	0008d505 	.word	0x0008d505
   8c8f0:	00088725 	.word	0x00088725

0008c8f4 <Cl_MacCheckforConsoleMessage>:
   8c8f4:	b580      	push	{r7, lr}
   8c8f6:	b082      	sub	sp, #8
   8c8f8:	af00      	add	r7, sp, #0
   8c8fa:	4b19      	ldr	r3, [pc, #100]	; (8c960 <Cl_MacCheckforConsoleMessage+0x6c>)
   8c8fc:	4798      	blx	r3
   8c8fe:	4603      	mov	r3, r0
   8c900:	71fb      	strb	r3, [r7, #7]
   8c902:	79fb      	ldrb	r3, [r7, #7]
   8c904:	2b00      	cmp	r3, #0
   8c906:	d001      	beq.n	8c90c <Cl_MacCheckforConsoleMessage+0x18>
   8c908:	4b16      	ldr	r3, [pc, #88]	; (8c964 <Cl_MacCheckforConsoleMessage+0x70>)
   8c90a:	4798      	blx	r3
   8c90c:	79fb      	ldrb	r3, [r7, #7]
   8c90e:	2b00      	cmp	r3, #0
   8c910:	d108      	bne.n	8c924 <Cl_MacCheckforConsoleMessage+0x30>
   8c912:	4b15      	ldr	r3, [pc, #84]	; (8c968 <Cl_MacCheckforConsoleMessage+0x74>)
   8c914:	4798      	blx	r3
   8c916:	4603      	mov	r3, r0
   8c918:	71fb      	strb	r3, [r7, #7]
   8c91a:	79fb      	ldrb	r3, [r7, #7]
   8c91c:	2b00      	cmp	r3, #0
   8c91e:	d001      	beq.n	8c924 <Cl_MacCheckforConsoleMessage+0x30>
   8c920:	4b10      	ldr	r3, [pc, #64]	; (8c964 <Cl_MacCheckforConsoleMessage+0x70>)
   8c922:	4798      	blx	r3
   8c924:	79fb      	ldrb	r3, [r7, #7]
   8c926:	2b00      	cmp	r3, #0
   8c928:	d108      	bne.n	8c93c <Cl_MacCheckforConsoleMessage+0x48>
   8c92a:	4b10      	ldr	r3, [pc, #64]	; (8c96c <Cl_MacCheckforConsoleMessage+0x78>)
   8c92c:	4798      	blx	r3
   8c92e:	4603      	mov	r3, r0
   8c930:	71fb      	strb	r3, [r7, #7]
   8c932:	79fb      	ldrb	r3, [r7, #7]
   8c934:	2b00      	cmp	r3, #0
   8c936:	d001      	beq.n	8c93c <Cl_MacCheckforConsoleMessage+0x48>
   8c938:	4b0a      	ldr	r3, [pc, #40]	; (8c964 <Cl_MacCheckforConsoleMessage+0x70>)
   8c93a:	4798      	blx	r3
   8c93c:	79fb      	ldrb	r3, [r7, #7]
   8c93e:	2b00      	cmp	r3, #0
   8c940:	d108      	bne.n	8c954 <Cl_MacCheckforConsoleMessage+0x60>
   8c942:	4b0b      	ldr	r3, [pc, #44]	; (8c970 <Cl_MacCheckforConsoleMessage+0x7c>)
   8c944:	4798      	blx	r3
   8c946:	4603      	mov	r3, r0
   8c948:	71fb      	strb	r3, [r7, #7]
   8c94a:	79fb      	ldrb	r3, [r7, #7]
   8c94c:	2b00      	cmp	r3, #0
   8c94e:	d001      	beq.n	8c954 <Cl_MacCheckforConsoleMessage+0x60>
   8c950:	4b04      	ldr	r3, [pc, #16]	; (8c964 <Cl_MacCheckforConsoleMessage+0x70>)
   8c952:	4798      	blx	r3
   8c954:	2300      	movs	r3, #0
   8c956:	4618      	mov	r0, r3
   8c958:	3708      	adds	r7, #8
   8c95a:	46bd      	mov	sp, r7
   8c95c:	bd80      	pop	{r7, pc}
   8c95e:	bf00      	nop
   8c960:	0009937d 	.word	0x0009937d
   8c964:	00088725 	.word	0x00088725
   8c968:	000993dd 	.word	0x000993dd
   8c96c:	000993bd 	.word	0x000993bd
   8c970:	00099545 	.word	0x00099545

0008c974 <Cl_MacCreate_Macevent>:
   8c974:	b480      	push	{r7}
   8c976:	b083      	sub	sp, #12
   8c978:	af00      	add	r7, sp, #0
   8c97a:	2300      	movs	r3, #0
   8c97c:	71bb      	strb	r3, [r7, #6]
   8c97e:	4b63      	ldr	r3, [pc, #396]	; (8cb0c <Cl_MacCreate_Macevent+0x198>)
   8c980:	2200      	movs	r2, #0
   8c982:	701a      	strb	r2, [r3, #0]
   8c984:	4b62      	ldr	r3, [pc, #392]	; (8cb10 <Cl_MacCreate_Macevent+0x19c>)
   8c986:	2200      	movs	r2, #0
   8c988:	701a      	strb	r2, [r3, #0]
   8c98a:	4b62      	ldr	r3, [pc, #392]	; (8cb14 <Cl_MacCreate_Macevent+0x1a0>)
   8c98c:	785b      	ldrb	r3, [r3, #1]
   8c98e:	2b00      	cmp	r3, #0
   8c990:	d035      	beq.n	8c9fe <Cl_MacCreate_Macevent+0x8a>
   8c992:	4b60      	ldr	r3, [pc, #384]	; (8cb14 <Cl_MacCreate_Macevent+0x1a0>)
   8c994:	781b      	ldrb	r3, [r3, #0]
   8c996:	2b00      	cmp	r3, #0
   8c998:	d031      	beq.n	8c9fe <Cl_MacCreate_Macevent+0x8a>
   8c99a:	4b5c      	ldr	r3, [pc, #368]	; (8cb0c <Cl_MacCreate_Macevent+0x198>)
   8c99c:	2201      	movs	r2, #1
   8c99e:	701a      	strb	r2, [r3, #0]
   8c9a0:	4b5c      	ldr	r3, [pc, #368]	; (8cb14 <Cl_MacCreate_Macevent+0x1a0>)
   8c9a2:	789a      	ldrb	r2, [r3, #2]
   8c9a4:	4b5a      	ldr	r3, [pc, #360]	; (8cb10 <Cl_MacCreate_Macevent+0x19c>)
   8c9a6:	701a      	strb	r2, [r3, #0]
   8c9a8:	4b5a      	ldr	r3, [pc, #360]	; (8cb14 <Cl_MacCreate_Macevent+0x1a0>)
   8c9aa:	781b      	ldrb	r3, [r3, #0]
   8c9ac:	3b01      	subs	r3, #1
   8c9ae:	b2da      	uxtb	r2, r3
   8c9b0:	4b58      	ldr	r3, [pc, #352]	; (8cb14 <Cl_MacCreate_Macevent+0x1a0>)
   8c9b2:	701a      	strb	r2, [r3, #0]
   8c9b4:	2300      	movs	r3, #0
   8c9b6:	71fb      	strb	r3, [r7, #7]
   8c9b8:	e019      	b.n	8c9ee <Cl_MacCreate_Macevent+0x7a>
   8c9ba:	79fb      	ldrb	r3, [r7, #7]
   8c9bc:	2b09      	cmp	r3, #9
   8c9be:	d80a      	bhi.n	8c9d6 <Cl_MacCreate_Macevent+0x62>
   8c9c0:	79fb      	ldrb	r3, [r7, #7]
   8c9c2:	79fa      	ldrb	r2, [r7, #7]
   8c9c4:	3201      	adds	r2, #1
   8c9c6:	4953      	ldr	r1, [pc, #332]	; (8cb14 <Cl_MacCreate_Macevent+0x1a0>)
   8c9c8:	440a      	add	r2, r1
   8c9ca:	7891      	ldrb	r1, [r2, #2]
   8c9cc:	4a51      	ldr	r2, [pc, #324]	; (8cb14 <Cl_MacCreate_Macevent+0x1a0>)
   8c9ce:	4413      	add	r3, r2
   8c9d0:	460a      	mov	r2, r1
   8c9d2:	709a      	strb	r2, [r3, #2]
   8c9d4:	e008      	b.n	8c9e8 <Cl_MacCreate_Macevent+0x74>
   8c9d6:	79fb      	ldrb	r3, [r7, #7]
   8c9d8:	2b09      	cmp	r3, #9
   8c9da:	d90e      	bls.n	8c9fa <Cl_MacCreate_Macevent+0x86>
   8c9dc:	79fb      	ldrb	r3, [r7, #7]
   8c9de:	4a4d      	ldr	r2, [pc, #308]	; (8cb14 <Cl_MacCreate_Macevent+0x1a0>)
   8c9e0:	4413      	add	r3, r2
   8c9e2:	2200      	movs	r2, #0
   8c9e4:	709a      	strb	r2, [r3, #2]
   8c9e6:	e008      	b.n	8c9fa <Cl_MacCreate_Macevent+0x86>
   8c9e8:	79fb      	ldrb	r3, [r7, #7]
   8c9ea:	3301      	adds	r3, #1
   8c9ec:	71fb      	strb	r3, [r7, #7]
   8c9ee:	4b49      	ldr	r3, [pc, #292]	; (8cb14 <Cl_MacCreate_Macevent+0x1a0>)
   8c9f0:	781b      	ldrb	r3, [r3, #0]
   8c9f2:	79fa      	ldrb	r2, [r7, #7]
   8c9f4:	429a      	cmp	r2, r3
   8c9f6:	d3e0      	bcc.n	8c9ba <Cl_MacCreate_Macevent+0x46>
   8c9f8:	e082      	b.n	8cb00 <Cl_MacCreate_Macevent+0x18c>
   8c9fa:	bf00      	nop
   8c9fc:	e080      	b.n	8cb00 <Cl_MacCreate_Macevent+0x18c>
   8c9fe:	4b46      	ldr	r3, [pc, #280]	; (8cb18 <Cl_MacCreate_Macevent+0x1a4>)
   8ca00:	785b      	ldrb	r3, [r3, #1]
   8ca02:	2b00      	cmp	r3, #0
   8ca04:	d03c      	beq.n	8ca80 <Cl_MacCreate_Macevent+0x10c>
   8ca06:	4b44      	ldr	r3, [pc, #272]	; (8cb18 <Cl_MacCreate_Macevent+0x1a4>)
   8ca08:	781b      	ldrb	r3, [r3, #0]
   8ca0a:	2b00      	cmp	r3, #0
   8ca0c:	d038      	beq.n	8ca80 <Cl_MacCreate_Macevent+0x10c>
   8ca0e:	4b3f      	ldr	r3, [pc, #252]	; (8cb0c <Cl_MacCreate_Macevent+0x198>)
   8ca10:	2201      	movs	r2, #1
   8ca12:	701a      	strb	r2, [r3, #0]
   8ca14:	4b40      	ldr	r3, [pc, #256]	; (8cb18 <Cl_MacCreate_Macevent+0x1a4>)
   8ca16:	789a      	ldrb	r2, [r3, #2]
   8ca18:	4b3d      	ldr	r3, [pc, #244]	; (8cb10 <Cl_MacCreate_Macevent+0x19c>)
   8ca1a:	701a      	strb	r2, [r3, #0]
   8ca1c:	4b3e      	ldr	r3, [pc, #248]	; (8cb18 <Cl_MacCreate_Macevent+0x1a4>)
   8ca1e:	781b      	ldrb	r3, [r3, #0]
   8ca20:	3b01      	subs	r3, #1
   8ca22:	b2da      	uxtb	r2, r3
   8ca24:	4b3c      	ldr	r3, [pc, #240]	; (8cb18 <Cl_MacCreate_Macevent+0x1a4>)
   8ca26:	701a      	strb	r2, [r3, #0]
   8ca28:	2300      	movs	r3, #0
   8ca2a:	71fb      	strb	r3, [r7, #7]
   8ca2c:	e019      	b.n	8ca62 <Cl_MacCreate_Macevent+0xee>
   8ca2e:	79fb      	ldrb	r3, [r7, #7]
   8ca30:	2b09      	cmp	r3, #9
   8ca32:	d80a      	bhi.n	8ca4a <Cl_MacCreate_Macevent+0xd6>
   8ca34:	79fb      	ldrb	r3, [r7, #7]
   8ca36:	79fa      	ldrb	r2, [r7, #7]
   8ca38:	3201      	adds	r2, #1
   8ca3a:	4937      	ldr	r1, [pc, #220]	; (8cb18 <Cl_MacCreate_Macevent+0x1a4>)
   8ca3c:	440a      	add	r2, r1
   8ca3e:	7891      	ldrb	r1, [r2, #2]
   8ca40:	4a35      	ldr	r2, [pc, #212]	; (8cb18 <Cl_MacCreate_Macevent+0x1a4>)
   8ca42:	4413      	add	r3, r2
   8ca44:	460a      	mov	r2, r1
   8ca46:	709a      	strb	r2, [r3, #2]
   8ca48:	e008      	b.n	8ca5c <Cl_MacCreate_Macevent+0xe8>
   8ca4a:	79fb      	ldrb	r3, [r7, #7]
   8ca4c:	2b09      	cmp	r3, #9
   8ca4e:	d90e      	bls.n	8ca6e <Cl_MacCreate_Macevent+0xfa>
   8ca50:	79fb      	ldrb	r3, [r7, #7]
   8ca52:	4a31      	ldr	r2, [pc, #196]	; (8cb18 <Cl_MacCreate_Macevent+0x1a4>)
   8ca54:	4413      	add	r3, r2
   8ca56:	2200      	movs	r2, #0
   8ca58:	709a      	strb	r2, [r3, #2]
   8ca5a:	e008      	b.n	8ca6e <Cl_MacCreate_Macevent+0xfa>
   8ca5c:	79fb      	ldrb	r3, [r7, #7]
   8ca5e:	3301      	adds	r3, #1
   8ca60:	71fb      	strb	r3, [r7, #7]
   8ca62:	4b2d      	ldr	r3, [pc, #180]	; (8cb18 <Cl_MacCreate_Macevent+0x1a4>)
   8ca64:	781b      	ldrb	r3, [r3, #0]
   8ca66:	79fa      	ldrb	r2, [r7, #7]
   8ca68:	429a      	cmp	r2, r3
   8ca6a:	d3e0      	bcc.n	8ca2e <Cl_MacCreate_Macevent+0xba>
   8ca6c:	e000      	b.n	8ca70 <Cl_MacCreate_Macevent+0xfc>
   8ca6e:	bf00      	nop
   8ca70:	4b29      	ldr	r3, [pc, #164]	; (8cb18 <Cl_MacCreate_Macevent+0x1a4>)
   8ca72:	781b      	ldrb	r3, [r3, #0]
   8ca74:	461a      	mov	r2, r3
   8ca76:	4b28      	ldr	r3, [pc, #160]	; (8cb18 <Cl_MacCreate_Macevent+0x1a4>)
   8ca78:	4413      	add	r3, r2
   8ca7a:	2200      	movs	r2, #0
   8ca7c:	709a      	strb	r2, [r3, #2]
   8ca7e:	e03f      	b.n	8cb00 <Cl_MacCreate_Macevent+0x18c>
   8ca80:	4b26      	ldr	r3, [pc, #152]	; (8cb1c <Cl_MacCreate_Macevent+0x1a8>)
   8ca82:	785b      	ldrb	r3, [r3, #1]
   8ca84:	2b00      	cmp	r3, #0
   8ca86:	d035      	beq.n	8caf4 <Cl_MacCreate_Macevent+0x180>
   8ca88:	4b24      	ldr	r3, [pc, #144]	; (8cb1c <Cl_MacCreate_Macevent+0x1a8>)
   8ca8a:	781b      	ldrb	r3, [r3, #0]
   8ca8c:	2b00      	cmp	r3, #0
   8ca8e:	d031      	beq.n	8caf4 <Cl_MacCreate_Macevent+0x180>
   8ca90:	4b1e      	ldr	r3, [pc, #120]	; (8cb0c <Cl_MacCreate_Macevent+0x198>)
   8ca92:	2201      	movs	r2, #1
   8ca94:	701a      	strb	r2, [r3, #0]
   8ca96:	4b21      	ldr	r3, [pc, #132]	; (8cb1c <Cl_MacCreate_Macevent+0x1a8>)
   8ca98:	789a      	ldrb	r2, [r3, #2]
   8ca9a:	4b1d      	ldr	r3, [pc, #116]	; (8cb10 <Cl_MacCreate_Macevent+0x19c>)
   8ca9c:	701a      	strb	r2, [r3, #0]
   8ca9e:	4b1f      	ldr	r3, [pc, #124]	; (8cb1c <Cl_MacCreate_Macevent+0x1a8>)
   8caa0:	781b      	ldrb	r3, [r3, #0]
   8caa2:	3b01      	subs	r3, #1
   8caa4:	b2da      	uxtb	r2, r3
   8caa6:	4b1d      	ldr	r3, [pc, #116]	; (8cb1c <Cl_MacCreate_Macevent+0x1a8>)
   8caa8:	701a      	strb	r2, [r3, #0]
   8caaa:	2300      	movs	r3, #0
   8caac:	71fb      	strb	r3, [r7, #7]
   8caae:	e019      	b.n	8cae4 <Cl_MacCreate_Macevent+0x170>
   8cab0:	79fb      	ldrb	r3, [r7, #7]
   8cab2:	2b09      	cmp	r3, #9
   8cab4:	d80a      	bhi.n	8cacc <Cl_MacCreate_Macevent+0x158>
   8cab6:	79fb      	ldrb	r3, [r7, #7]
   8cab8:	79fa      	ldrb	r2, [r7, #7]
   8caba:	3201      	adds	r2, #1
   8cabc:	4917      	ldr	r1, [pc, #92]	; (8cb1c <Cl_MacCreate_Macevent+0x1a8>)
   8cabe:	440a      	add	r2, r1
   8cac0:	7891      	ldrb	r1, [r2, #2]
   8cac2:	4a16      	ldr	r2, [pc, #88]	; (8cb1c <Cl_MacCreate_Macevent+0x1a8>)
   8cac4:	4413      	add	r3, r2
   8cac6:	460a      	mov	r2, r1
   8cac8:	709a      	strb	r2, [r3, #2]
   8caca:	e008      	b.n	8cade <Cl_MacCreate_Macevent+0x16a>
   8cacc:	79fb      	ldrb	r3, [r7, #7]
   8cace:	2b09      	cmp	r3, #9
   8cad0:	d90e      	bls.n	8caf0 <Cl_MacCreate_Macevent+0x17c>
   8cad2:	79fb      	ldrb	r3, [r7, #7]
   8cad4:	4a11      	ldr	r2, [pc, #68]	; (8cb1c <Cl_MacCreate_Macevent+0x1a8>)
   8cad6:	4413      	add	r3, r2
   8cad8:	2200      	movs	r2, #0
   8cada:	709a      	strb	r2, [r3, #2]
   8cadc:	e008      	b.n	8caf0 <Cl_MacCreate_Macevent+0x17c>
   8cade:	79fb      	ldrb	r3, [r7, #7]
   8cae0:	3301      	adds	r3, #1
   8cae2:	71fb      	strb	r3, [r7, #7]
   8cae4:	4b0d      	ldr	r3, [pc, #52]	; (8cb1c <Cl_MacCreate_Macevent+0x1a8>)
   8cae6:	781b      	ldrb	r3, [r3, #0]
   8cae8:	79fa      	ldrb	r2, [r7, #7]
   8caea:	429a      	cmp	r2, r3
   8caec:	d3e0      	bcc.n	8cab0 <Cl_MacCreate_Macevent+0x13c>
   8caee:	e007      	b.n	8cb00 <Cl_MacCreate_Macevent+0x18c>
   8caf0:	bf00      	nop
   8caf2:	e005      	b.n	8cb00 <Cl_MacCreate_Macevent+0x18c>
   8caf4:	4b05      	ldr	r3, [pc, #20]	; (8cb0c <Cl_MacCreate_Macevent+0x198>)
   8caf6:	2200      	movs	r2, #0
   8caf8:	701a      	strb	r2, [r3, #0]
   8cafa:	4b05      	ldr	r3, [pc, #20]	; (8cb10 <Cl_MacCreate_Macevent+0x19c>)
   8cafc:	2200      	movs	r2, #0
   8cafe:	701a      	strb	r2, [r3, #0]
   8cb00:	2300      	movs	r3, #0
   8cb02:	4618      	mov	r0, r3
   8cb04:	370c      	adds	r7, #12
   8cb06:	46bd      	mov	sp, r7
   8cb08:	bc80      	pop	{r7}
   8cb0a:	4770      	bx	lr
   8cb0c:	20072174 	.word	0x20072174
   8cb10:	20072172 	.word	0x20072172
   8cb14:	20072fd4 	.word	0x20072fd4
   8cb18:	20072d9c 	.word	0x20072d9c
   8cb1c:	20072ec4 	.word	0x20072ec4

0008cb20 <Cl_Mac_ClearEvents>:
   8cb20:	b480      	push	{r7}
   8cb22:	af00      	add	r7, sp, #0
   8cb24:	2300      	movs	r3, #0
   8cb26:	4618      	mov	r0, r3
   8cb28:	46bd      	mov	sp, r7
   8cb2a:	bc80      	pop	{r7}
   8cb2c:	4770      	bx	lr
   8cb2e:	bf00      	nop

0008cb30 <Cl_Mac_CheckforAlarms>:
   8cb30:	b580      	push	{r7, lr}
   8cb32:	b082      	sub	sp, #8
   8cb34:	af00      	add	r7, sp, #0
   8cb36:	4b07      	ldr	r3, [pc, #28]	; (8cb54 <Cl_Mac_CheckforAlarms+0x24>)
   8cb38:	4798      	blx	r3
   8cb3a:	4603      	mov	r3, r0
   8cb3c:	71fb      	strb	r3, [r7, #7]
   8cb3e:	79fb      	ldrb	r3, [r7, #7]
   8cb40:	2b00      	cmp	r3, #0
   8cb42:	d001      	beq.n	8cb48 <Cl_Mac_CheckforAlarms+0x18>
   8cb44:	4b04      	ldr	r3, [pc, #16]	; (8cb58 <Cl_Mac_CheckforAlarms+0x28>)
   8cb46:	4798      	blx	r3
   8cb48:	2300      	movs	r3, #0
   8cb4a:	4618      	mov	r0, r3
   8cb4c:	3708      	adds	r7, #8
   8cb4e:	46bd      	mov	sp, r7
   8cb50:	bd80      	pop	{r7, pc}
   8cb52:	bf00      	nop
   8cb54:	00081621 	.word	0x00081621
   8cb58:	00088725 	.word	0x00088725

0008cb5c <osc_get_rate>:
   8cb5c:	b480      	push	{r7}
   8cb5e:	b083      	sub	sp, #12
   8cb60:	af00      	add	r7, sp, #0
   8cb62:	6078      	str	r0, [r7, #4]
   8cb64:	687b      	ldr	r3, [r7, #4]
   8cb66:	2b07      	cmp	r3, #7
   8cb68:	d825      	bhi.n	8cbb6 <osc_get_rate+0x5a>
   8cb6a:	a201      	add	r2, pc, #4	; (adr r2, 8cb70 <osc_get_rate+0x14>)
   8cb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8cb70:	0008cb91 	.word	0x0008cb91
   8cb74:	0008cb97 	.word	0x0008cb97
   8cb78:	0008cb9d 	.word	0x0008cb9d
   8cb7c:	0008cba3 	.word	0x0008cba3
   8cb80:	0008cba7 	.word	0x0008cba7
   8cb84:	0008cbab 	.word	0x0008cbab
   8cb88:	0008cbaf 	.word	0x0008cbaf
   8cb8c:	0008cbb3 	.word	0x0008cbb3
   8cb90:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8cb94:	e010      	b.n	8cbb8 <osc_get_rate+0x5c>
   8cb96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8cb9a:	e00d      	b.n	8cbb8 <osc_get_rate+0x5c>
   8cb9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8cba0:	e00a      	b.n	8cbb8 <osc_get_rate+0x5c>
   8cba2:	4b08      	ldr	r3, [pc, #32]	; (8cbc4 <osc_get_rate+0x68>)
   8cba4:	e008      	b.n	8cbb8 <osc_get_rate+0x5c>
   8cba6:	4b08      	ldr	r3, [pc, #32]	; (8cbc8 <osc_get_rate+0x6c>)
   8cba8:	e006      	b.n	8cbb8 <osc_get_rate+0x5c>
   8cbaa:	4b08      	ldr	r3, [pc, #32]	; (8cbcc <osc_get_rate+0x70>)
   8cbac:	e004      	b.n	8cbb8 <osc_get_rate+0x5c>
   8cbae:	4b07      	ldr	r3, [pc, #28]	; (8cbcc <osc_get_rate+0x70>)
   8cbb0:	e002      	b.n	8cbb8 <osc_get_rate+0x5c>
   8cbb2:	4b06      	ldr	r3, [pc, #24]	; (8cbcc <osc_get_rate+0x70>)
   8cbb4:	e000      	b.n	8cbb8 <osc_get_rate+0x5c>
   8cbb6:	2300      	movs	r3, #0
   8cbb8:	4618      	mov	r0, r3
   8cbba:	370c      	adds	r7, #12
   8cbbc:	46bd      	mov	sp, r7
   8cbbe:	bc80      	pop	{r7}
   8cbc0:	4770      	bx	lr
   8cbc2:	bf00      	nop
   8cbc4:	003d0900 	.word	0x003d0900
   8cbc8:	007a1200 	.word	0x007a1200
   8cbcc:	00b71b00 	.word	0x00b71b00

0008cbd0 <sysclk_get_main_hz>:
   8cbd0:	b580      	push	{r7, lr}
   8cbd2:	af00      	add	r7, sp, #0
   8cbd4:	2006      	movs	r0, #6
   8cbd6:	4b04      	ldr	r3, [pc, #16]	; (8cbe8 <sysclk_get_main_hz+0x18>)
   8cbd8:	4798      	blx	r3
   8cbda:	4602      	mov	r2, r0
   8cbdc:	4613      	mov	r3, r2
   8cbde:	00db      	lsls	r3, r3, #3
   8cbe0:	1a9b      	subs	r3, r3, r2
   8cbe2:	005b      	lsls	r3, r3, #1
   8cbe4:	4618      	mov	r0, r3
   8cbe6:	bd80      	pop	{r7, pc}
   8cbe8:	0008cb5d 	.word	0x0008cb5d

0008cbec <sysclk_get_cpu_hz>:
   8cbec:	b580      	push	{r7, lr}
   8cbee:	af00      	add	r7, sp, #0
   8cbf0:	4b02      	ldr	r3, [pc, #8]	; (8cbfc <sysclk_get_cpu_hz+0x10>)
   8cbf2:	4798      	blx	r3
   8cbf4:	4603      	mov	r3, r0
   8cbf6:	085b      	lsrs	r3, r3, #1
   8cbf8:	4618      	mov	r0, r3
   8cbfa:	bd80      	pop	{r7, pc}
   8cbfc:	0008cbd1 	.word	0x0008cbd1

0008cc00 <nvram_read>:
   8cc00:	b580      	push	{r7, lr}
   8cc02:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
   8cc06:	af00      	add	r7, sp, #0
   8cc08:	4602      	mov	r2, r0
   8cc0a:	1dfb      	adds	r3, r7, #7
   8cc0c:	701a      	strb	r2, [r3, #0]
   8cc0e:	4bb8      	ldr	r3, [pc, #736]	; (8cef0 <nvram_read+0x2f0>)
   8cc10:	2200      	movs	r2, #0
   8cc12:	601a      	str	r2, [r3, #0]
   8cc14:	4bb7      	ldr	r3, [pc, #732]	; (8cef4 <nvram_read+0x2f4>)
   8cc16:	2200      	movs	r2, #0
   8cc18:	601a      	str	r2, [r3, #0]
   8cc1a:	2300      	movs	r3, #0
   8cc1c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cc20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8cc24:	4618      	mov	r0, r3
   8cc26:	f44f 7348 	mov.w	r3, #800	; 0x320
   8cc2a:	461a      	mov	r2, r3
   8cc2c:	2100      	movs	r1, #0
   8cc2e:	4bb2      	ldr	r3, [pc, #712]	; (8cef8 <nvram_read+0x2f8>)
   8cc30:	4798      	blx	r3
   8cc32:	2300      	movs	r3, #0
   8cc34:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cc38:	e00b      	b.n	8cc52 <nvram_read+0x52>
   8cc3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8cc3e:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
   8cc42:	2100      	movs	r1, #0
   8cc44:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
   8cc48:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc4c:	3301      	adds	r3, #1
   8cc4e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cc52:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc56:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   8cc5a:	d3ee      	bcc.n	8cc3a <nvram_read+0x3a>
   8cc5c:	1dfb      	adds	r3, r7, #7
   8cc5e:	781a      	ldrb	r2, [r3, #0]
   8cc60:	49a6      	ldr	r1, [pc, #664]	; (8cefc <nvram_read+0x2fc>)
   8cc62:	4613      	mov	r3, r2
   8cc64:	005b      	lsls	r3, r3, #1
   8cc66:	4413      	add	r3, r2
   8cc68:	009b      	lsls	r3, r3, #2
   8cc6a:	440b      	add	r3, r1
   8cc6c:	3304      	adds	r3, #4
   8cc6e:	681b      	ldr	r3, [r3, #0]
   8cc70:	4aa0      	ldr	r2, [pc, #640]	; (8cef4 <nvram_read+0x2f4>)
   8cc72:	6013      	str	r3, [r2, #0]
   8cc74:	1dfb      	adds	r3, r7, #7
   8cc76:	781a      	ldrb	r2, [r3, #0]
   8cc78:	49a0      	ldr	r1, [pc, #640]	; (8cefc <nvram_read+0x2fc>)
   8cc7a:	4613      	mov	r3, r2
   8cc7c:	005b      	lsls	r3, r3, #1
   8cc7e:	4413      	add	r3, r2
   8cc80:	009b      	lsls	r3, r3, #2
   8cc82:	440b      	add	r3, r1
   8cc84:	3308      	adds	r3, #8
   8cc86:	681b      	ldr	r3, [r3, #0]
   8cc88:	4a99      	ldr	r2, [pc, #612]	; (8cef0 <nvram_read+0x2f0>)
   8cc8a:	6013      	str	r3, [r2, #0]
   8cc8c:	f107 0320 	add.w	r3, r7, #32
   8cc90:	461a      	mov	r2, r3
   8cc92:	2300      	movs	r3, #0
   8cc94:	6013      	str	r3, [r2, #0]
   8cc96:	6053      	str	r3, [r2, #4]
   8cc98:	6093      	str	r3, [r2, #8]
   8cc9a:	4b99      	ldr	r3, [pc, #612]	; (8cf00 <nvram_read+0x300>)
   8cc9c:	4798      	blx	r3
   8cc9e:	4602      	mov	r2, r0
   8cca0:	f107 0320 	add.w	r3, r7, #32
   8cca4:	601a      	str	r2, [r3, #0]
   8cca6:	f107 0320 	add.w	r3, r7, #32
   8ccaa:	4a96      	ldr	r2, [pc, #600]	; (8cf04 <nvram_read+0x304>)
   8ccac:	605a      	str	r2, [r3, #4]
   8ccae:	f107 0320 	add.w	r3, r7, #32
   8ccb2:	2251      	movs	r2, #81	; 0x51
   8ccb4:	721a      	strb	r2, [r3, #8]
   8ccb6:	f107 0320 	add.w	r3, r7, #32
   8ccba:	4619      	mov	r1, r3
   8ccbc:	4892      	ldr	r0, [pc, #584]	; (8cf08 <nvram_read+0x308>)
   8ccbe:	4b93      	ldr	r3, [pc, #588]	; (8cf0c <nvram_read+0x30c>)
   8ccc0:	4798      	blx	r3
   8ccc2:	f107 030c 	add.w	r3, r7, #12
   8ccc6:	461a      	mov	r2, r3
   8ccc8:	2300      	movs	r3, #0
   8ccca:	6013      	str	r3, [r2, #0]
   8cccc:	6053      	str	r3, [r2, #4]
   8ccce:	6093      	str	r3, [r2, #8]
   8ccd0:	60d3      	str	r3, [r2, #12]
   8ccd2:	6113      	str	r3, [r2, #16]
   8ccd4:	4b87      	ldr	r3, [pc, #540]	; (8cef4 <nvram_read+0x2f4>)
   8ccd6:	681b      	ldr	r3, [r3, #0]
   8ccd8:	0a1b      	lsrs	r3, r3, #8
   8ccda:	b2da      	uxtb	r2, r3
   8ccdc:	f107 030c 	add.w	r3, r7, #12
   8cce0:	701a      	strb	r2, [r3, #0]
   8cce2:	4b84      	ldr	r3, [pc, #528]	; (8cef4 <nvram_read+0x2f4>)
   8cce4:	681b      	ldr	r3, [r3, #0]
   8cce6:	b2da      	uxtb	r2, r3
   8cce8:	f107 030c 	add.w	r3, r7, #12
   8ccec:	705a      	strb	r2, [r3, #1]
   8ccee:	f107 030c 	add.w	r3, r7, #12
   8ccf2:	2202      	movs	r2, #2
   8ccf4:	605a      	str	r2, [r3, #4]
   8ccf6:	f107 030c 	add.w	r3, r7, #12
   8ccfa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   8ccfe:	609a      	str	r2, [r3, #8]
   8cd00:	4b7b      	ldr	r3, [pc, #492]	; (8cef0 <nvram_read+0x2f0>)
   8cd02:	681a      	ldr	r2, [r3, #0]
   8cd04:	f107 030c 	add.w	r3, r7, #12
   8cd08:	60da      	str	r2, [r3, #12]
   8cd0a:	f107 030c 	add.w	r3, r7, #12
   8cd0e:	2251      	movs	r2, #81	; 0x51
   8cd10:	741a      	strb	r2, [r3, #16]
   8cd12:	bf00      	nop
   8cd14:	f107 030c 	add.w	r3, r7, #12
   8cd18:	4619      	mov	r1, r3
   8cd1a:	487b      	ldr	r0, [pc, #492]	; (8cf08 <nvram_read+0x308>)
   8cd1c:	4b7c      	ldr	r3, [pc, #496]	; (8cf10 <nvram_read+0x310>)
   8cd1e:	4798      	blx	r3
   8cd20:	4603      	mov	r3, r0
   8cd22:	2b00      	cmp	r3, #0
   8cd24:	d1f6      	bne.n	8cd14 <nvram_read+0x114>
   8cd26:	1dfb      	adds	r3, r7, #7
   8cd28:	781b      	ldrb	r3, [r3, #0]
   8cd2a:	2b0a      	cmp	r3, #10
   8cd2c:	f200 8397 	bhi.w	8d45e <nvram_read+0x85e>
   8cd30:	a201      	add	r2, pc, #4	; (adr r2, 8cd38 <nvram_read+0x138>)
   8cd32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8cd36:	bf00      	nop
   8cd38:	0008cd65 	.word	0x0008cd65
   8cd3c:	0008d45f 	.word	0x0008d45f
   8cd40:	0008d45f 	.word	0x0008d45f
   8cd44:	0008cee9 	.word	0x0008cee9
   8cd48:	0008d45f 	.word	0x0008d45f
   8cd4c:	0008d45f 	.word	0x0008d45f
   8cd50:	0008d0a1 	.word	0x0008d0a1
   8cd54:	0008d45f 	.word	0x0008d45f
   8cd58:	0008d1eb 	.word	0x0008d1eb
   8cd5c:	0008d31d 	.word	0x0008d31d
   8cd60:	0008d423 	.word	0x0008d423
   8cd64:	2300      	movs	r3, #0
   8cd66:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cd6a:	e021      	b.n	8cdb0 <nvram_read+0x1b0>
   8cd6c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd70:	005a      	lsls	r2, r3, #1
   8cd72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8cd76:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8cd7a:	b299      	uxth	r1, r3
   8cd7c:	4a65      	ldr	r2, [pc, #404]	; (8cf14 <nvram_read+0x314>)
   8cd7e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd82:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
   8cd86:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd8a:	005b      	lsls	r3, r3, #1
   8cd8c:	1c5a      	adds	r2, r3, #1
   8cd8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8cd92:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8cd96:	b299      	uxth	r1, r3
   8cd98:	4a5e      	ldr	r2, [pc, #376]	; (8cf14 <nvram_read+0x314>)
   8cd9a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd9e:	009b      	lsls	r3, r3, #2
   8cda0:	4413      	add	r3, r2
   8cda2:	460a      	mov	r2, r1
   8cda4:	805a      	strh	r2, [r3, #2]
   8cda6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cdaa:	3301      	adds	r3, #1
   8cdac:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cdb0:	4b4f      	ldr	r3, [pc, #316]	; (8cef0 <nvram_read+0x2f0>)
   8cdb2:	681b      	ldr	r3, [r3, #0]
   8cdb4:	085a      	lsrs	r2, r3, #1
   8cdb6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cdba:	429a      	cmp	r2, r3
   8cdbc:	d8d6      	bhi.n	8cd6c <nvram_read+0x16c>
   8cdbe:	2300      	movs	r3, #0
   8cdc0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cdc4:	e01b      	b.n	8cdfe <nvram_read+0x1fe>
   8cdc6:	4a53      	ldr	r2, [pc, #332]	; (8cf14 <nvram_read+0x314>)
   8cdc8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cdcc:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
   8cdd0:	4a51      	ldr	r2, [pc, #324]	; (8cf18 <nvram_read+0x318>)
   8cdd2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cdd6:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
   8cdda:	4a4e      	ldr	r2, [pc, #312]	; (8cf14 <nvram_read+0x314>)
   8cddc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cde0:	009b      	lsls	r3, r3, #2
   8cde2:	4413      	add	r3, r2
   8cde4:	8859      	ldrh	r1, [r3, #2]
   8cde6:	4a4c      	ldr	r2, [pc, #304]	; (8cf18 <nvram_read+0x318>)
   8cde8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cdec:	009b      	lsls	r3, r3, #2
   8cdee:	4413      	add	r3, r2
   8cdf0:	460a      	mov	r2, r1
   8cdf2:	805a      	strh	r2, [r3, #2]
   8cdf4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cdf8:	3301      	adds	r3, #1
   8cdfa:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cdfe:	4b3c      	ldr	r3, [pc, #240]	; (8cef0 <nvram_read+0x2f0>)
   8ce00:	681b      	ldr	r3, [r3, #0]
   8ce02:	085a      	lsrs	r2, r3, #1
   8ce04:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce08:	429a      	cmp	r2, r3
   8ce0a:	d8dc      	bhi.n	8cdc6 <nvram_read+0x1c6>
   8ce0c:	2300      	movs	r3, #0
   8ce0e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8ce12:	e036      	b.n	8ce82 <nvram_read+0x282>
   8ce14:	4a40      	ldr	r2, [pc, #256]	; (8cf18 <nvram_read+0x318>)
   8ce16:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce1a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8ce1e:	b299      	uxth	r1, r3
   8ce20:	4a3e      	ldr	r2, [pc, #248]	; (8cf1c <nvram_read+0x31c>)
   8ce22:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce26:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
   8ce2a:	4a3b      	ldr	r2, [pc, #236]	; (8cf18 <nvram_read+0x318>)
   8ce2c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce30:	009b      	lsls	r3, r3, #2
   8ce32:	4413      	add	r3, r2
   8ce34:	885b      	ldrh	r3, [r3, #2]
   8ce36:	b299      	uxth	r1, r3
   8ce38:	4a38      	ldr	r2, [pc, #224]	; (8cf1c <nvram_read+0x31c>)
   8ce3a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce3e:	009b      	lsls	r3, r3, #2
   8ce40:	4413      	add	r3, r2
   8ce42:	460a      	mov	r2, r1
   8ce44:	805a      	strh	r2, [r3, #2]
   8ce46:	4a34      	ldr	r2, [pc, #208]	; (8cf18 <nvram_read+0x318>)
   8ce48:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce4c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8ce50:	b299      	uxth	r1, r3
   8ce52:	4a33      	ldr	r2, [pc, #204]	; (8cf20 <nvram_read+0x320>)
   8ce54:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce58:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
   8ce5c:	4a2e      	ldr	r2, [pc, #184]	; (8cf18 <nvram_read+0x318>)
   8ce5e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce62:	009b      	lsls	r3, r3, #2
   8ce64:	4413      	add	r3, r2
   8ce66:	885b      	ldrh	r3, [r3, #2]
   8ce68:	b299      	uxth	r1, r3
   8ce6a:	4a2d      	ldr	r2, [pc, #180]	; (8cf20 <nvram_read+0x320>)
   8ce6c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce70:	009b      	lsls	r3, r3, #2
   8ce72:	4413      	add	r3, r2
   8ce74:	460a      	mov	r2, r1
   8ce76:	805a      	strh	r2, [r3, #2]
   8ce78:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce7c:	3301      	adds	r3, #1
   8ce7e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8ce82:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce86:	2b74      	cmp	r3, #116	; 0x74
   8ce88:	d9c4      	bls.n	8ce14 <nvram_read+0x214>
   8ce8a:	2300      	movs	r3, #0
   8ce8c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8ce90:	e01d      	b.n	8cece <nvram_read+0x2ce>
   8ce92:	4a21      	ldr	r2, [pc, #132]	; (8cf18 <nvram_read+0x318>)
   8ce94:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce98:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8ce9c:	b29b      	uxth	r3, r3
   8ce9e:	461a      	mov	r2, r3
   8cea0:	4b20      	ldr	r3, [pc, #128]	; (8cf24 <nvram_read+0x324>)
   8cea2:	681b      	ldr	r3, [r3, #0]
   8cea4:	4413      	add	r3, r2
   8cea6:	4a1f      	ldr	r2, [pc, #124]	; (8cf24 <nvram_read+0x324>)
   8cea8:	6013      	str	r3, [r2, #0]
   8ceaa:	4a1b      	ldr	r2, [pc, #108]	; (8cf18 <nvram_read+0x318>)
   8ceac:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ceb0:	009b      	lsls	r3, r3, #2
   8ceb2:	4413      	add	r3, r2
   8ceb4:	885b      	ldrh	r3, [r3, #2]
   8ceb6:	b29b      	uxth	r3, r3
   8ceb8:	461a      	mov	r2, r3
   8ceba:	4b1a      	ldr	r3, [pc, #104]	; (8cf24 <nvram_read+0x324>)
   8cebc:	681b      	ldr	r3, [r3, #0]
   8cebe:	4413      	add	r3, r2
   8cec0:	4a18      	ldr	r2, [pc, #96]	; (8cf24 <nvram_read+0x324>)
   8cec2:	6013      	str	r3, [r2, #0]
   8cec4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cec8:	3301      	adds	r3, #1
   8ceca:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cece:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ced2:	2b74      	cmp	r3, #116	; 0x74
   8ced4:	d9dd      	bls.n	8ce92 <nvram_read+0x292>
   8ced6:	4b13      	ldr	r3, [pc, #76]	; (8cf24 <nvram_read+0x324>)
   8ced8:	681b      	ldr	r3, [r3, #0]
   8ceda:	4618      	mov	r0, r3
   8cedc:	4b12      	ldr	r3, [pc, #72]	; (8cf28 <nvram_read+0x328>)
   8cede:	4798      	blx	r3
   8cee0:	4b10      	ldr	r3, [pc, #64]	; (8cf24 <nvram_read+0x324>)
   8cee2:	2200      	movs	r2, #0
   8cee4:	601a      	str	r2, [r3, #0]
   8cee6:	e2bb      	b.n	8d460 <nvram_read+0x860>
   8cee8:	2300      	movs	r3, #0
   8ceea:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8ceee:	e03d      	b.n	8cf6c <nvram_read+0x36c>
   8cef0:	2007217c 	.word	0x2007217c
   8cef4:	200730b0 	.word	0x200730b0
   8cef8:	000a4369 	.word	0x000a4369
   8cefc:	200704b4 	.word	0x200704b4
   8cf00:	0008cbed 	.word	0x0008cbed
   8cf04:	000186a0 	.word	0x000186a0
   8cf08:	4008c000 	.word	0x4008c000
   8cf0c:	00080629 	.word	0x00080629
   8cf10:	00080761 	.word	0x00080761
   8cf14:	2007219c 	.word	0x2007219c
   8cf18:	2007167c 	.word	0x2007167c
   8cf1c:	20071850 	.word	0x20071850
   8cf20:	20071a24 	.word	0x20071a24
   8cf24:	20072180 	.word	0x20072180
   8cf28:	0008d48d 	.word	0x0008d48d
   8cf2c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf30:	005a      	lsls	r2, r3, #1
   8cf32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8cf36:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
   8cf3a:	4ac4      	ldr	r2, [pc, #784]	; (8d24c <nvram_read+0x64c>)
   8cf3c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf40:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
   8cf44:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf48:	005b      	lsls	r3, r3, #1
   8cf4a:	1c5a      	adds	r2, r3, #1
   8cf4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8cf50:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
   8cf54:	4abd      	ldr	r2, [pc, #756]	; (8d24c <nvram_read+0x64c>)
   8cf56:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf5a:	009b      	lsls	r3, r3, #2
   8cf5c:	4413      	add	r3, r2
   8cf5e:	460a      	mov	r2, r1
   8cf60:	805a      	strh	r2, [r3, #2]
   8cf62:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf66:	3301      	adds	r3, #1
   8cf68:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cf6c:	4bb8      	ldr	r3, [pc, #736]	; (8d250 <nvram_read+0x650>)
   8cf6e:	681b      	ldr	r3, [r3, #0]
   8cf70:	085a      	lsrs	r2, r3, #1
   8cf72:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf76:	429a      	cmp	r2, r3
   8cf78:	d8d8      	bhi.n	8cf2c <nvram_read+0x32c>
   8cf7a:	2300      	movs	r3, #0
   8cf7c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cf80:	e01c      	b.n	8cfbc <nvram_read+0x3bc>
   8cf82:	4ab2      	ldr	r2, [pc, #712]	; (8d24c <nvram_read+0x64c>)
   8cf84:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf88:	f932 1023 	ldrsh.w	r1, [r2, r3, lsl #2]
   8cf8c:	4ab1      	ldr	r2, [pc, #708]	; (8d254 <nvram_read+0x654>)
   8cf8e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf92:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
   8cf96:	4aad      	ldr	r2, [pc, #692]	; (8d24c <nvram_read+0x64c>)
   8cf98:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf9c:	009b      	lsls	r3, r3, #2
   8cf9e:	4413      	add	r3, r2
   8cfa0:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
   8cfa4:	4aab      	ldr	r2, [pc, #684]	; (8d254 <nvram_read+0x654>)
   8cfa6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cfaa:	009b      	lsls	r3, r3, #2
   8cfac:	4413      	add	r3, r2
   8cfae:	460a      	mov	r2, r1
   8cfb0:	805a      	strh	r2, [r3, #2]
   8cfb2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cfb6:	3301      	adds	r3, #1
   8cfb8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cfbc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cfc0:	2b27      	cmp	r3, #39	; 0x27
   8cfc2:	d9de      	bls.n	8cf82 <nvram_read+0x382>
   8cfc4:	2300      	movs	r3, #0
   8cfc6:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cfca:	e036      	b.n	8d03a <nvram_read+0x43a>
   8cfcc:	4aa1      	ldr	r2, [pc, #644]	; (8d254 <nvram_read+0x654>)
   8cfce:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cfd2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8cfd6:	b219      	sxth	r1, r3
   8cfd8:	4a9f      	ldr	r2, [pc, #636]	; (8d258 <nvram_read+0x658>)
   8cfda:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cfde:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
   8cfe2:	4a9c      	ldr	r2, [pc, #624]	; (8d254 <nvram_read+0x654>)
   8cfe4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cfe8:	009b      	lsls	r3, r3, #2
   8cfea:	4413      	add	r3, r2
   8cfec:	885b      	ldrh	r3, [r3, #2]
   8cfee:	b219      	sxth	r1, r3
   8cff0:	4a99      	ldr	r2, [pc, #612]	; (8d258 <nvram_read+0x658>)
   8cff2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cff6:	009b      	lsls	r3, r3, #2
   8cff8:	4413      	add	r3, r2
   8cffa:	460a      	mov	r2, r1
   8cffc:	805a      	strh	r2, [r3, #2]
   8cffe:	4a95      	ldr	r2, [pc, #596]	; (8d254 <nvram_read+0x654>)
   8d000:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d004:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8d008:	b219      	sxth	r1, r3
   8d00a:	4a94      	ldr	r2, [pc, #592]	; (8d25c <nvram_read+0x65c>)
   8d00c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d010:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
   8d014:	4a8f      	ldr	r2, [pc, #572]	; (8d254 <nvram_read+0x654>)
   8d016:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d01a:	009b      	lsls	r3, r3, #2
   8d01c:	4413      	add	r3, r2
   8d01e:	885b      	ldrh	r3, [r3, #2]
   8d020:	b219      	sxth	r1, r3
   8d022:	4a8e      	ldr	r2, [pc, #568]	; (8d25c <nvram_read+0x65c>)
   8d024:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d028:	009b      	lsls	r3, r3, #2
   8d02a:	4413      	add	r3, r2
   8d02c:	460a      	mov	r2, r1
   8d02e:	805a      	strh	r2, [r3, #2]
   8d030:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d034:	3301      	adds	r3, #1
   8d036:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d03a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d03e:	2b27      	cmp	r3, #39	; 0x27
   8d040:	d9c4      	bls.n	8cfcc <nvram_read+0x3cc>
   8d042:	2300      	movs	r3, #0
   8d044:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d048:	e01d      	b.n	8d086 <nvram_read+0x486>
   8d04a:	4a82      	ldr	r2, [pc, #520]	; (8d254 <nvram_read+0x654>)
   8d04c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d050:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8d054:	b21b      	sxth	r3, r3
   8d056:	461a      	mov	r2, r3
   8d058:	4b81      	ldr	r3, [pc, #516]	; (8d260 <nvram_read+0x660>)
   8d05a:	681b      	ldr	r3, [r3, #0]
   8d05c:	4413      	add	r3, r2
   8d05e:	4a80      	ldr	r2, [pc, #512]	; (8d260 <nvram_read+0x660>)
   8d060:	6013      	str	r3, [r2, #0]
   8d062:	4a7c      	ldr	r2, [pc, #496]	; (8d254 <nvram_read+0x654>)
   8d064:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d068:	009b      	lsls	r3, r3, #2
   8d06a:	4413      	add	r3, r2
   8d06c:	885b      	ldrh	r3, [r3, #2]
   8d06e:	b21b      	sxth	r3, r3
   8d070:	461a      	mov	r2, r3
   8d072:	4b7b      	ldr	r3, [pc, #492]	; (8d260 <nvram_read+0x660>)
   8d074:	681b      	ldr	r3, [r3, #0]
   8d076:	4413      	add	r3, r2
   8d078:	4a79      	ldr	r2, [pc, #484]	; (8d260 <nvram_read+0x660>)
   8d07a:	6013      	str	r3, [r2, #0]
   8d07c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d080:	3301      	adds	r3, #1
   8d082:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d086:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d08a:	2b27      	cmp	r3, #39	; 0x27
   8d08c:	d9dd      	bls.n	8d04a <nvram_read+0x44a>
   8d08e:	4b74      	ldr	r3, [pc, #464]	; (8d260 <nvram_read+0x660>)
   8d090:	681b      	ldr	r3, [r3, #0]
   8d092:	4618      	mov	r0, r3
   8d094:	4b73      	ldr	r3, [pc, #460]	; (8d264 <nvram_read+0x664>)
   8d096:	4798      	blx	r3
   8d098:	4b71      	ldr	r3, [pc, #452]	; (8d260 <nvram_read+0x660>)
   8d09a:	2200      	movs	r2, #0
   8d09c:	601a      	str	r2, [r3, #0]
   8d09e:	e1df      	b.n	8d460 <nvram_read+0x860>
   8d0a0:	2300      	movs	r3, #0
   8d0a2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d0a6:	e01f      	b.n	8d0e8 <nvram_read+0x4e8>
   8d0a8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d0ac:	005a      	lsls	r2, r3, #1
   8d0ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8d0b2:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
   8d0b6:	4a6c      	ldr	r2, [pc, #432]	; (8d268 <nvram_read+0x668>)
   8d0b8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d0bc:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
   8d0c0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d0c4:	005b      	lsls	r3, r3, #1
   8d0c6:	1c5a      	adds	r2, r3, #1
   8d0c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8d0cc:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
   8d0d0:	4a65      	ldr	r2, [pc, #404]	; (8d268 <nvram_read+0x668>)
   8d0d2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d0d6:	009b      	lsls	r3, r3, #2
   8d0d8:	4413      	add	r3, r2
   8d0da:	460a      	mov	r2, r1
   8d0dc:	805a      	strh	r2, [r3, #2]
   8d0de:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d0e2:	3301      	adds	r3, #1
   8d0e4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d0e8:	4b59      	ldr	r3, [pc, #356]	; (8d250 <nvram_read+0x650>)
   8d0ea:	681b      	ldr	r3, [r3, #0]
   8d0ec:	085a      	lsrs	r2, r3, #1
   8d0ee:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d0f2:	429a      	cmp	r2, r3
   8d0f4:	d8d8      	bhi.n	8d0a8 <nvram_read+0x4a8>
   8d0f6:	2300      	movs	r3, #0
   8d0f8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d0fc:	e01c      	b.n	8d138 <nvram_read+0x538>
   8d0fe:	4a5a      	ldr	r2, [pc, #360]	; (8d268 <nvram_read+0x668>)
   8d100:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d104:	f932 1023 	ldrsh.w	r1, [r2, r3, lsl #2]
   8d108:	4a58      	ldr	r2, [pc, #352]	; (8d26c <nvram_read+0x66c>)
   8d10a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d10e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
   8d112:	4a55      	ldr	r2, [pc, #340]	; (8d268 <nvram_read+0x668>)
   8d114:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d118:	009b      	lsls	r3, r3, #2
   8d11a:	4413      	add	r3, r2
   8d11c:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
   8d120:	4a52      	ldr	r2, [pc, #328]	; (8d26c <nvram_read+0x66c>)
   8d122:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d126:	009b      	lsls	r3, r3, #2
   8d128:	4413      	add	r3, r2
   8d12a:	460a      	mov	r2, r1
   8d12c:	805a      	strh	r2, [r3, #2]
   8d12e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d132:	3301      	adds	r3, #1
   8d134:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d138:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d13c:	2b1d      	cmp	r3, #29
   8d13e:	d9de      	bls.n	8d0fe <nvram_read+0x4fe>
   8d140:	2300      	movs	r3, #0
   8d142:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d146:	e01d      	b.n	8d184 <nvram_read+0x584>
   8d148:	4a48      	ldr	r2, [pc, #288]	; (8d26c <nvram_read+0x66c>)
   8d14a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d14e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8d152:	b219      	sxth	r1, r3
   8d154:	4a46      	ldr	r2, [pc, #280]	; (8d270 <nvram_read+0x670>)
   8d156:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d15a:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
   8d15e:	4a43      	ldr	r2, [pc, #268]	; (8d26c <nvram_read+0x66c>)
   8d160:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d164:	009b      	lsls	r3, r3, #2
   8d166:	4413      	add	r3, r2
   8d168:	885b      	ldrh	r3, [r3, #2]
   8d16a:	b219      	sxth	r1, r3
   8d16c:	4a40      	ldr	r2, [pc, #256]	; (8d270 <nvram_read+0x670>)
   8d16e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d172:	009b      	lsls	r3, r3, #2
   8d174:	4413      	add	r3, r2
   8d176:	460a      	mov	r2, r1
   8d178:	805a      	strh	r2, [r3, #2]
   8d17a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d17e:	3301      	adds	r3, #1
   8d180:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d184:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d188:	2b1d      	cmp	r3, #29
   8d18a:	d9dd      	bls.n	8d148 <nvram_read+0x548>
   8d18c:	2300      	movs	r3, #0
   8d18e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d192:	e01d      	b.n	8d1d0 <nvram_read+0x5d0>
   8d194:	4a35      	ldr	r2, [pc, #212]	; (8d26c <nvram_read+0x66c>)
   8d196:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d19a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8d19e:	b21b      	sxth	r3, r3
   8d1a0:	461a      	mov	r2, r3
   8d1a2:	4b2f      	ldr	r3, [pc, #188]	; (8d260 <nvram_read+0x660>)
   8d1a4:	681b      	ldr	r3, [r3, #0]
   8d1a6:	4413      	add	r3, r2
   8d1a8:	4a2d      	ldr	r2, [pc, #180]	; (8d260 <nvram_read+0x660>)
   8d1aa:	6013      	str	r3, [r2, #0]
   8d1ac:	4a2f      	ldr	r2, [pc, #188]	; (8d26c <nvram_read+0x66c>)
   8d1ae:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d1b2:	009b      	lsls	r3, r3, #2
   8d1b4:	4413      	add	r3, r2
   8d1b6:	885b      	ldrh	r3, [r3, #2]
   8d1b8:	b21b      	sxth	r3, r3
   8d1ba:	461a      	mov	r2, r3
   8d1bc:	4b28      	ldr	r3, [pc, #160]	; (8d260 <nvram_read+0x660>)
   8d1be:	681b      	ldr	r3, [r3, #0]
   8d1c0:	4413      	add	r3, r2
   8d1c2:	4a27      	ldr	r2, [pc, #156]	; (8d260 <nvram_read+0x660>)
   8d1c4:	6013      	str	r3, [r2, #0]
   8d1c6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d1ca:	3301      	adds	r3, #1
   8d1cc:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d1d0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d1d4:	2b13      	cmp	r3, #19
   8d1d6:	d9dd      	bls.n	8d194 <nvram_read+0x594>
   8d1d8:	4b21      	ldr	r3, [pc, #132]	; (8d260 <nvram_read+0x660>)
   8d1da:	681b      	ldr	r3, [r3, #0]
   8d1dc:	4618      	mov	r0, r3
   8d1de:	4b21      	ldr	r3, [pc, #132]	; (8d264 <nvram_read+0x664>)
   8d1e0:	4798      	blx	r3
   8d1e2:	4b1f      	ldr	r3, [pc, #124]	; (8d260 <nvram_read+0x660>)
   8d1e4:	2200      	movs	r2, #0
   8d1e6:	601a      	str	r2, [r3, #0]
   8d1e8:	e13a      	b.n	8d460 <nvram_read+0x860>
   8d1ea:	2300      	movs	r3, #0
   8d1ec:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d1f0:	e021      	b.n	8d236 <nvram_read+0x636>
   8d1f2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d1f6:	005a      	lsls	r2, r3, #1
   8d1f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8d1fc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8d200:	b299      	uxth	r1, r3
   8d202:	4a1c      	ldr	r2, [pc, #112]	; (8d274 <nvram_read+0x674>)
   8d204:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d208:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
   8d20c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d210:	005b      	lsls	r3, r3, #1
   8d212:	1c5a      	adds	r2, r3, #1
   8d214:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8d218:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8d21c:	b299      	uxth	r1, r3
   8d21e:	4a15      	ldr	r2, [pc, #84]	; (8d274 <nvram_read+0x674>)
   8d220:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d224:	009b      	lsls	r3, r3, #2
   8d226:	4413      	add	r3, r2
   8d228:	460a      	mov	r2, r1
   8d22a:	805a      	strh	r2, [r3, #2]
   8d22c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d230:	3301      	adds	r3, #1
   8d232:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d236:	4b06      	ldr	r3, [pc, #24]	; (8d250 <nvram_read+0x650>)
   8d238:	681b      	ldr	r3, [r3, #0]
   8d23a:	085a      	lsrs	r2, r3, #1
   8d23c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d240:	429a      	cmp	r2, r3
   8d242:	d8d6      	bhi.n	8d1f2 <nvram_read+0x5f2>
   8d244:	2300      	movs	r3, #0
   8d246:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d24a:	e031      	b.n	8d2b0 <nvram_read+0x6b0>
   8d24c:	20072370 	.word	0x20072370
   8d250:	2007217c 	.word	0x2007217c
   8d254:	20071ce8 	.word	0x20071ce8
   8d258:	20071db0 	.word	0x20071db0
   8d25c:	20071e78 	.word	0x20071e78
   8d260:	20072180 	.word	0x20072180
   8d264:	0008d48d 	.word	0x0008d48d
   8d268:	20072410 	.word	0x20072410
   8d26c:	20071bf8 	.word	0x20071bf8
   8d270:	20071c70 	.word	0x20071c70
   8d274:	20072488 	.word	0x20072488
   8d278:	4a7c      	ldr	r2, [pc, #496]	; (8d46c <nvram_read+0x86c>)
   8d27a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d27e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
   8d282:	4a7b      	ldr	r2, [pc, #492]	; (8d470 <nvram_read+0x870>)
   8d284:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d288:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
   8d28c:	4a77      	ldr	r2, [pc, #476]	; (8d46c <nvram_read+0x86c>)
   8d28e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d292:	009b      	lsls	r3, r3, #2
   8d294:	4413      	add	r3, r2
   8d296:	8859      	ldrh	r1, [r3, #2]
   8d298:	4a75      	ldr	r2, [pc, #468]	; (8d470 <nvram_read+0x870>)
   8d29a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d29e:	009b      	lsls	r3, r3, #2
   8d2a0:	4413      	add	r3, r2
   8d2a2:	460a      	mov	r2, r1
   8d2a4:	805a      	strh	r2, [r3, #2]
   8d2a6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d2aa:	3301      	adds	r3, #1
   8d2ac:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d2b0:	4b70      	ldr	r3, [pc, #448]	; (8d474 <nvram_read+0x874>)
   8d2b2:	681b      	ldr	r3, [r3, #0]
   8d2b4:	085a      	lsrs	r2, r3, #1
   8d2b6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d2ba:	429a      	cmp	r2, r3
   8d2bc:	d8dc      	bhi.n	8d278 <nvram_read+0x678>
   8d2be:	2300      	movs	r3, #0
   8d2c0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d2c4:	e01d      	b.n	8d302 <nvram_read+0x702>
   8d2c6:	4a6a      	ldr	r2, [pc, #424]	; (8d470 <nvram_read+0x870>)
   8d2c8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d2cc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8d2d0:	b29b      	uxth	r3, r3
   8d2d2:	461a      	mov	r2, r3
   8d2d4:	4b68      	ldr	r3, [pc, #416]	; (8d478 <nvram_read+0x878>)
   8d2d6:	681b      	ldr	r3, [r3, #0]
   8d2d8:	4413      	add	r3, r2
   8d2da:	4a67      	ldr	r2, [pc, #412]	; (8d478 <nvram_read+0x878>)
   8d2dc:	6013      	str	r3, [r2, #0]
   8d2de:	4a64      	ldr	r2, [pc, #400]	; (8d470 <nvram_read+0x870>)
   8d2e0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d2e4:	009b      	lsls	r3, r3, #2
   8d2e6:	4413      	add	r3, r2
   8d2e8:	885b      	ldrh	r3, [r3, #2]
   8d2ea:	b29b      	uxth	r3, r3
   8d2ec:	461a      	mov	r2, r3
   8d2ee:	4b62      	ldr	r3, [pc, #392]	; (8d478 <nvram_read+0x878>)
   8d2f0:	681b      	ldr	r3, [r3, #0]
   8d2f2:	4413      	add	r3, r2
   8d2f4:	4a60      	ldr	r2, [pc, #384]	; (8d478 <nvram_read+0x878>)
   8d2f6:	6013      	str	r3, [r2, #0]
   8d2f8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d2fc:	3301      	adds	r3, #1
   8d2fe:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d302:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d306:	2b31      	cmp	r3, #49	; 0x31
   8d308:	d9dd      	bls.n	8d2c6 <nvram_read+0x6c6>
   8d30a:	4b5b      	ldr	r3, [pc, #364]	; (8d478 <nvram_read+0x878>)
   8d30c:	681b      	ldr	r3, [r3, #0]
   8d30e:	4618      	mov	r0, r3
   8d310:	4b5a      	ldr	r3, [pc, #360]	; (8d47c <nvram_read+0x87c>)
   8d312:	4798      	blx	r3
   8d314:	4b58      	ldr	r3, [pc, #352]	; (8d478 <nvram_read+0x878>)
   8d316:	2200      	movs	r2, #0
   8d318:	601a      	str	r2, [r3, #0]
   8d31a:	e0a1      	b.n	8d460 <nvram_read+0x860>
   8d31c:	2300      	movs	r3, #0
   8d31e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d322:	e021      	b.n	8d368 <nvram_read+0x768>
   8d324:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d328:	005a      	lsls	r2, r3, #1
   8d32a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8d32e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8d332:	b299      	uxth	r1, r3
   8d334:	4a52      	ldr	r2, [pc, #328]	; (8d480 <nvram_read+0x880>)
   8d336:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d33a:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
   8d33e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d342:	005b      	lsls	r3, r3, #1
   8d344:	1c5a      	adds	r2, r3, #1
   8d346:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8d34a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8d34e:	b299      	uxth	r1, r3
   8d350:	4a4b      	ldr	r2, [pc, #300]	; (8d480 <nvram_read+0x880>)
   8d352:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d356:	009b      	lsls	r3, r3, #2
   8d358:	4413      	add	r3, r2
   8d35a:	460a      	mov	r2, r1
   8d35c:	805a      	strh	r2, [r3, #2]
   8d35e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d362:	3301      	adds	r3, #1
   8d364:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d368:	4b42      	ldr	r3, [pc, #264]	; (8d474 <nvram_read+0x874>)
   8d36a:	681b      	ldr	r3, [r3, #0]
   8d36c:	085a      	lsrs	r2, r3, #1
   8d36e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d372:	429a      	cmp	r2, r3
   8d374:	d8d6      	bhi.n	8d324 <nvram_read+0x724>
   8d376:	2300      	movs	r3, #0
   8d378:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d37c:	e01b      	b.n	8d3b6 <nvram_read+0x7b6>
   8d37e:	4a40      	ldr	r2, [pc, #256]	; (8d480 <nvram_read+0x880>)
   8d380:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d384:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
   8d388:	4a3e      	ldr	r2, [pc, #248]	; (8d484 <nvram_read+0x884>)
   8d38a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d38e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
   8d392:	4a3b      	ldr	r2, [pc, #236]	; (8d480 <nvram_read+0x880>)
   8d394:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d398:	009b      	lsls	r3, r3, #2
   8d39a:	4413      	add	r3, r2
   8d39c:	8859      	ldrh	r1, [r3, #2]
   8d39e:	4a39      	ldr	r2, [pc, #228]	; (8d484 <nvram_read+0x884>)
   8d3a0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d3a4:	009b      	lsls	r3, r3, #2
   8d3a6:	4413      	add	r3, r2
   8d3a8:	460a      	mov	r2, r1
   8d3aa:	805a      	strh	r2, [r3, #2]
   8d3ac:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d3b0:	3301      	adds	r3, #1
   8d3b2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d3b6:	4b2f      	ldr	r3, [pc, #188]	; (8d474 <nvram_read+0x874>)
   8d3b8:	681b      	ldr	r3, [r3, #0]
   8d3ba:	085a      	lsrs	r2, r3, #1
   8d3bc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d3c0:	429a      	cmp	r2, r3
   8d3c2:	d8dc      	bhi.n	8d37e <nvram_read+0x77e>
   8d3c4:	2300      	movs	r3, #0
   8d3c6:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d3ca:	e01d      	b.n	8d408 <nvram_read+0x808>
   8d3cc:	4a2d      	ldr	r2, [pc, #180]	; (8d484 <nvram_read+0x884>)
   8d3ce:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d3d2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8d3d6:	b29b      	uxth	r3, r3
   8d3d8:	461a      	mov	r2, r3
   8d3da:	4b27      	ldr	r3, [pc, #156]	; (8d478 <nvram_read+0x878>)
   8d3dc:	681b      	ldr	r3, [r3, #0]
   8d3de:	4413      	add	r3, r2
   8d3e0:	4a25      	ldr	r2, [pc, #148]	; (8d478 <nvram_read+0x878>)
   8d3e2:	6013      	str	r3, [r2, #0]
   8d3e4:	4a27      	ldr	r2, [pc, #156]	; (8d484 <nvram_read+0x884>)
   8d3e6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d3ea:	009b      	lsls	r3, r3, #2
   8d3ec:	4413      	add	r3, r2
   8d3ee:	885b      	ldrh	r3, [r3, #2]
   8d3f0:	b29b      	uxth	r3, r3
   8d3f2:	461a      	mov	r2, r3
   8d3f4:	4b20      	ldr	r3, [pc, #128]	; (8d478 <nvram_read+0x878>)
   8d3f6:	681b      	ldr	r3, [r3, #0]
   8d3f8:	4413      	add	r3, r2
   8d3fa:	4a1f      	ldr	r2, [pc, #124]	; (8d478 <nvram_read+0x878>)
   8d3fc:	6013      	str	r3, [r2, #0]
   8d3fe:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d402:	3301      	adds	r3, #1
   8d404:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d408:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d40c:	2b13      	cmp	r3, #19
   8d40e:	d9dd      	bls.n	8d3cc <nvram_read+0x7cc>
   8d410:	4b19      	ldr	r3, [pc, #100]	; (8d478 <nvram_read+0x878>)
   8d412:	681b      	ldr	r3, [r3, #0]
   8d414:	4618      	mov	r0, r3
   8d416:	4b19      	ldr	r3, [pc, #100]	; (8d47c <nvram_read+0x87c>)
   8d418:	4798      	blx	r3
   8d41a:	4b17      	ldr	r3, [pc, #92]	; (8d478 <nvram_read+0x878>)
   8d41c:	2200      	movs	r2, #0
   8d41e:	601a      	str	r2, [r3, #0]
   8d420:	e01e      	b.n	8d460 <nvram_read+0x860>
   8d422:	2300      	movs	r3, #0
   8d424:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d428:	e011      	b.n	8d44e <nvram_read+0x84e>
   8d42a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8d42e:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
   8d432:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8d436:	b2d9      	uxtb	r1, r3
   8d438:	4a13      	ldr	r2, [pc, #76]	; (8d488 <nvram_read+0x888>)
   8d43a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d43e:	4413      	add	r3, r2
   8d440:	460a      	mov	r2, r1
   8d442:	701a      	strb	r2, [r3, #0]
   8d444:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d448:	3301      	adds	r3, #1
   8d44a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d44e:	4b09      	ldr	r3, [pc, #36]	; (8d474 <nvram_read+0x874>)
   8d450:	681b      	ldr	r3, [r3, #0]
   8d452:	085a      	lsrs	r2, r3, #1
   8d454:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d458:	429a      	cmp	r2, r3
   8d45a:	d8e6      	bhi.n	8d42a <nvram_read+0x82a>
   8d45c:	e000      	b.n	8d460 <nvram_read+0x860>
   8d45e:	bf00      	nop
   8d460:	bf00      	nop
   8d462:	f507 7754 	add.w	r7, r7, #848	; 0x350
   8d466:	46bd      	mov	sp, r7
   8d468:	bd80      	pop	{r7, pc}
   8d46a:	bf00      	nop
   8d46c:	20072488 	.word	0x20072488
   8d470:	20072008 	.word	0x20072008
   8d474:	2007217c 	.word	0x2007217c
   8d478:	20072180 	.word	0x20072180
   8d47c:	0008d48d 	.word	0x0008d48d
   8d480:	20072528 	.word	0x20072528
   8d484:	20071f40 	.word	0x20071f40
   8d488:	20072190 	.word	0x20072190

0008d48c <checksum_cal>:
   8d48c:	b480      	push	{r7}
   8d48e:	b085      	sub	sp, #20
   8d490:	af00      	add	r7, sp, #0
   8d492:	6078      	str	r0, [r7, #4]
   8d494:	2300      	movs	r3, #0
   8d496:	60bb      	str	r3, [r7, #8]
   8d498:	687b      	ldr	r3, [r7, #4]
   8d49a:	60fb      	str	r3, [r7, #12]
   8d49c:	e01e      	b.n	8d4dc <checksum_cal+0x50>
   8d49e:	68fb      	ldr	r3, [r7, #12]
   8d4a0:	4a15      	ldr	r2, [pc, #84]	; (8d4f8 <checksum_cal+0x6c>)
   8d4a2:	fba2 2303 	umull	r2, r3, r2, r3
   8d4a6:	08db      	lsrs	r3, r3, #3
   8d4a8:	60fb      	str	r3, [r7, #12]
   8d4aa:	68fa      	ldr	r2, [r7, #12]
   8d4ac:	4b12      	ldr	r3, [pc, #72]	; (8d4f8 <checksum_cal+0x6c>)
   8d4ae:	fba3 1302 	umull	r1, r3, r3, r2
   8d4b2:	08d9      	lsrs	r1, r3, #3
   8d4b4:	460b      	mov	r3, r1
   8d4b6:	009b      	lsls	r3, r3, #2
   8d4b8:	440b      	add	r3, r1
   8d4ba:	005b      	lsls	r3, r3, #1
   8d4bc:	1ad3      	subs	r3, r2, r3
   8d4be:	60bb      	str	r3, [r7, #8]
   8d4c0:	4b0e      	ldr	r3, [pc, #56]	; (8d4fc <checksum_cal+0x70>)
   8d4c2:	781b      	ldrb	r3, [r3, #0]
   8d4c4:	4619      	mov	r1, r3
   8d4c6:	4b0d      	ldr	r3, [pc, #52]	; (8d4fc <checksum_cal+0x70>)
   8d4c8:	781b      	ldrb	r3, [r3, #0]
   8d4ca:	461a      	mov	r2, r3
   8d4cc:	4b0c      	ldr	r3, [pc, #48]	; (8d500 <checksum_cal+0x74>)
   8d4ce:	5c9a      	ldrb	r2, [r3, r2]
   8d4d0:	68bb      	ldr	r3, [r7, #8]
   8d4d2:	b2db      	uxtb	r3, r3
   8d4d4:	4413      	add	r3, r2
   8d4d6:	b2da      	uxtb	r2, r3
   8d4d8:	4b09      	ldr	r3, [pc, #36]	; (8d500 <checksum_cal+0x74>)
   8d4da:	545a      	strb	r2, [r3, r1]
   8d4dc:	68fb      	ldr	r3, [r7, #12]
   8d4de:	2b0a      	cmp	r3, #10
   8d4e0:	d8dd      	bhi.n	8d49e <checksum_cal+0x12>
   8d4e2:	4b06      	ldr	r3, [pc, #24]	; (8d4fc <checksum_cal+0x70>)
   8d4e4:	781b      	ldrb	r3, [r3, #0]
   8d4e6:	3301      	adds	r3, #1
   8d4e8:	b2da      	uxtb	r2, r3
   8d4ea:	4b04      	ldr	r3, [pc, #16]	; (8d4fc <checksum_cal+0x70>)
   8d4ec:	701a      	strb	r2, [r3, #0]
   8d4ee:	bf00      	nop
   8d4f0:	3714      	adds	r7, #20
   8d4f2:	46bd      	mov	sp, r7
   8d4f4:	bc80      	pop	{r7}
   8d4f6:	4770      	bx	lr
   8d4f8:	cccccccd 	.word	0xcccccccd
   8d4fc:	200725c8 	.word	0x200725c8
   8d500:	20072184 	.word	0x20072184

0008d504 <Cl_SysStat_System_Status_Query>:
   8d504:	b580      	push	{r7, lr}
   8d506:	b096      	sub	sp, #88	; 0x58
   8d508:	af00      	add	r7, sp, #0
   8d50a:	463b      	mov	r3, r7
   8d50c:	2154      	movs	r1, #84	; 0x54
   8d50e:	4618      	mov	r0, r3
   8d510:	4b63      	ldr	r3, [pc, #396]	; (8d6a0 <Cl_SysStat_System_Status_Query+0x19c>)
   8d512:	4798      	blx	r3
   8d514:	4603      	mov	r3, r0
   8d516:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
   8d51a:	4b62      	ldr	r3, [pc, #392]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d51c:	2201      	movs	r2, #1
   8d51e:	839a      	strh	r2, [r3, #28]
   8d520:	4b60      	ldr	r3, [pc, #384]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d522:	2201      	movs	r2, #1
   8d524:	83da      	strh	r2, [r3, #30]
   8d526:	463b      	mov	r3, r7
   8d528:	4618      	mov	r0, r3
   8d52a:	4b5f      	ldr	r3, [pc, #380]	; (8d6a8 <Cl_SysStat_System_Status_Query+0x1a4>)
   8d52c:	4798      	blx	r3
   8d52e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   8d530:	4b5c      	ldr	r3, [pc, #368]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d532:	869a      	strh	r2, [r3, #52]	; 0x34
   8d534:	8b7a      	ldrh	r2, [r7, #26]
   8d536:	4b5b      	ldr	r3, [pc, #364]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d538:	831a      	strh	r2, [r3, #24]
   8d53a:	8a3b      	ldrh	r3, [r7, #16]
   8d53c:	2b00      	cmp	r3, #0
   8d53e:	d007      	beq.n	8d550 <Cl_SysStat_System_Status_Query+0x4c>
   8d540:	8a3b      	ldrh	r3, [r7, #16]
   8d542:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8d546:	4293      	cmp	r3, r2
   8d548:	d002      	beq.n	8d550 <Cl_SysStat_System_Status_Query+0x4c>
   8d54a:	8a3a      	ldrh	r2, [r7, #16]
   8d54c:	4b55      	ldr	r3, [pc, #340]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d54e:	821a      	strh	r2, [r3, #16]
   8d550:	8a7b      	ldrh	r3, [r7, #18]
   8d552:	2b00      	cmp	r3, #0
   8d554:	d007      	beq.n	8d566 <Cl_SysStat_System_Status_Query+0x62>
   8d556:	8a7b      	ldrh	r3, [r7, #18]
   8d558:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8d55c:	4293      	cmp	r3, r2
   8d55e:	d002      	beq.n	8d566 <Cl_SysStat_System_Status_Query+0x62>
   8d560:	8a7a      	ldrh	r2, [r7, #18]
   8d562:	4b50      	ldr	r3, [pc, #320]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d564:	825a      	strh	r2, [r3, #18]
   8d566:	8b3a      	ldrh	r2, [r7, #24]
   8d568:	4b4e      	ldr	r3, [pc, #312]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d56a:	835a      	strh	r2, [r3, #26]
   8d56c:	893a      	ldrh	r2, [r7, #8]
   8d56e:	4b4d      	ldr	r3, [pc, #308]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d570:	811a      	strh	r2, [r3, #8]
   8d572:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
   8d574:	4b4b      	ldr	r3, [pc, #300]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d576:	87da      	strh	r2, [r3, #62]	; 0x3e
   8d578:	887a      	ldrh	r2, [r7, #2]
   8d57a:	4b4a      	ldr	r3, [pc, #296]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d57c:	805a      	strh	r2, [r3, #2]
   8d57e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
   8d580:	4b48      	ldr	r3, [pc, #288]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d582:	861a      	strh	r2, [r3, #48]	; 0x30
   8d584:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
   8d586:	4b47      	ldr	r3, [pc, #284]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d588:	865a      	strh	r2, [r3, #50]	; 0x32
   8d58a:	4b46      	ldr	r3, [pc, #280]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d58c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   8d58e:	4b45      	ldr	r3, [pc, #276]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d590:	861a      	strh	r2, [r3, #48]	; 0x30
   8d592:	8eba      	ldrh	r2, [r7, #52]	; 0x34
   8d594:	4b43      	ldr	r3, [pc, #268]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d596:	86da      	strh	r2, [r3, #54]	; 0x36
   8d598:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   8d59a:	4b42      	ldr	r3, [pc, #264]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d59c:	871a      	strh	r2, [r3, #56]	; 0x38
   8d59e:	8bba      	ldrh	r2, [r7, #28]
   8d5a0:	4b40      	ldr	r3, [pc, #256]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d5a2:	839a      	strh	r2, [r3, #28]
   8d5a4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
   8d5a8:	4b3e      	ldr	r3, [pc, #248]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d5aa:	83da      	strh	r2, [r3, #30]
   8d5ac:	8bfa      	ldrh	r2, [r7, #30]
   8d5ae:	4b3d      	ldr	r3, [pc, #244]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d5b0:	841a      	strh	r2, [r3, #32]
   8d5b2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   8d5b6:	2b00      	cmp	r3, #0
   8d5b8:	bf14      	ite	ne
   8d5ba:	2301      	movne	r3, #1
   8d5bc:	2300      	moveq	r3, #0
   8d5be:	b2da      	uxtb	r2, r3
   8d5c0:	4b38      	ldr	r3, [pc, #224]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d5c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   8d5c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   8d5ca:	2b00      	cmp	r3, #0
   8d5cc:	bf14      	ite	ne
   8d5ce:	2301      	movne	r3, #1
   8d5d0:	2300      	moveq	r3, #0
   8d5d2:	b2da      	uxtb	r2, r3
   8d5d4:	4b33      	ldr	r3, [pc, #204]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d5d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   8d5da:	783b      	ldrb	r3, [r7, #0]
   8d5dc:	2b00      	cmp	r3, #0
   8d5de:	bf14      	ite	ne
   8d5e0:	2301      	movne	r3, #1
   8d5e2:	2300      	moveq	r3, #0
   8d5e4:	b2da      	uxtb	r2, r3
   8d5e6:	4b2f      	ldr	r3, [pc, #188]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d5e8:	701a      	strb	r2, [r3, #0]
   8d5ea:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
   8d5ee:	2b00      	cmp	r3, #0
   8d5f0:	bf14      	ite	ne
   8d5f2:	2301      	movne	r3, #1
   8d5f4:	2300      	moveq	r3, #0
   8d5f6:	b2da      	uxtb	r2, r3
   8d5f8:	4b2a      	ldr	r3, [pc, #168]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d5fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
   8d5fe:	8c3a      	ldrh	r2, [r7, #32]
   8d600:	4b28      	ldr	r3, [pc, #160]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d602:	845a      	strh	r2, [r3, #34]	; 0x22
   8d604:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   8d606:	4b27      	ldr	r3, [pc, #156]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d608:	849a      	strh	r2, [r3, #36]	; 0x24
   8d60a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   8d60c:	4b25      	ldr	r3, [pc, #148]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d60e:	84da      	strh	r2, [r3, #38]	; 0x26
   8d610:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
   8d614:	4b23      	ldr	r3, [pc, #140]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d616:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   8d61a:	8bfa      	ldrh	r2, [r7, #30]
   8d61c:	4b21      	ldr	r3, [pc, #132]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d61e:	841a      	strh	r2, [r3, #32]
   8d620:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   8d622:	4b20      	ldr	r3, [pc, #128]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d624:	851a      	strh	r2, [r3, #40]	; 0x28
   8d626:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   8d628:	461a      	mov	r2, r3
   8d62a:	f649 5308 	movw	r3, #40200	; 0x9d08
   8d62e:	fb03 f302 	mul.w	r3, r3, r2
   8d632:	2b00      	cmp	r3, #0
   8d634:	da02      	bge.n	8d63c <Cl_SysStat_System_Status_Query+0x138>
   8d636:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8d63a:	33ff      	adds	r3, #255	; 0xff
   8d63c:	141b      	asrs	r3, r3, #16
   8d63e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
   8d642:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8d646:	4618      	mov	r0, r3
   8d648:	4b18      	ldr	r3, [pc, #96]	; (8d6ac <Cl_SysStat_System_Status_Query+0x1a8>)
   8d64a:	4798      	blx	r3
   8d64c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   8d64e:	4b15      	ldr	r3, [pc, #84]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d650:	855a      	strh	r2, [r3, #42]	; 0x2a
   8d652:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
   8d654:	4b13      	ldr	r3, [pc, #76]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d656:	859a      	strh	r2, [r3, #44]	; 0x2c
   8d658:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
   8d65a:	4b12      	ldr	r3, [pc, #72]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d65c:	85da      	strh	r2, [r3, #46]	; 0x2e
   8d65e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
   8d660:	4b10      	ldr	r3, [pc, #64]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d662:	879a      	strh	r2, [r3, #60]	; 0x3c
   8d664:	89ba      	ldrh	r2, [r7, #12]
   8d666:	4b0f      	ldr	r3, [pc, #60]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d668:	819a      	strh	r2, [r3, #12]
   8d66a:	89fa      	ldrh	r2, [r7, #14]
   8d66c:	4b0d      	ldr	r3, [pc, #52]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d66e:	81da      	strh	r2, [r3, #14]
   8d670:	897a      	ldrh	r2, [r7, #10]
   8d672:	4b0c      	ldr	r3, [pc, #48]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d674:	815a      	strh	r2, [r3, #10]
   8d676:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
   8d67a:	4b0a      	ldr	r3, [pc, #40]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d67c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   8d680:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
   8d684:	4b07      	ldr	r3, [pc, #28]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d686:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
   8d68a:	88fa      	ldrh	r2, [r7, #6]
   8d68c:	4b05      	ldr	r3, [pc, #20]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d68e:	80da      	strh	r2, [r3, #6]
   8d690:	88ba      	ldrh	r2, [r7, #4]
   8d692:	4b04      	ldr	r3, [pc, #16]	; (8d6a4 <Cl_SysStat_System_Status_Query+0x1a0>)
   8d694:	809a      	strh	r2, [r3, #4]
   8d696:	2300      	movs	r3, #0
   8d698:	4618      	mov	r0, r3
   8d69a:	3758      	adds	r7, #88	; 0x58
   8d69c:	46bd      	mov	sp, r7
   8d69e:	bd80      	pop	{r7, pc}
   8d6a0:	00091e75 	.word	0x00091e75
   8d6a4:	20072e28 	.word	0x20072e28
   8d6a8:	00097ed9 	.word	0x00097ed9
   8d6ac:	0008e8e1 	.word	0x0008e8e1

0008d6b0 <Cl_SysStat_GetSensor_Status_Query>:
   8d6b0:	b480      	push	{r7}
   8d6b2:	b085      	sub	sp, #20
   8d6b4:	af00      	add	r7, sp, #0
   8d6b6:	4603      	mov	r3, r0
   8d6b8:	6039      	str	r1, [r7, #0]
   8d6ba:	71fb      	strb	r3, [r7, #7]
   8d6bc:	2300      	movs	r3, #0
   8d6be:	81fb      	strh	r3, [r7, #14]
   8d6c0:	79fb      	ldrb	r3, [r7, #7]
   8d6c2:	3b01      	subs	r3, #1
   8d6c4:	2b2f      	cmp	r3, #47	; 0x2f
   8d6c6:	f200 81dd 	bhi.w	8da84 <Cl_SysStat_GetSensor_Status_Query+0x3d4>
   8d6ca:	a201      	add	r2, pc, #4	; (adr r2, 8d6d0 <Cl_SysStat_GetSensor_Status_Query+0x20>)
   8d6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d6d0:	0008da77 	.word	0x0008da77
   8d6d4:	0008da85 	.word	0x0008da85
   8d6d8:	0008d7f7 	.word	0x0008d7f7
   8d6dc:	0008d807 	.word	0x0008d807
   8d6e0:	0008d817 	.word	0x0008d817
   8d6e4:	0008d853 	.word	0x0008d853
   8d6e8:	0008d827 	.word	0x0008d827
   8d6ec:	0008d861 	.word	0x0008d861
   8d6f0:	0008d88b 	.word	0x0008d88b
   8d6f4:	0008d899 	.word	0x0008d899
   8d6f8:	0008d8a7 	.word	0x0008d8a7
   8d6fc:	0008d8d5 	.word	0x0008d8d5
   8d700:	0008d903 	.word	0x0008d903
   8d704:	0008d911 	.word	0x0008d911
   8d708:	0008d93f 	.word	0x0008d93f
   8d70c:	0008d96d 	.word	0x0008d96d
   8d710:	0008da85 	.word	0x0008da85
   8d714:	0008d99b 	.word	0x0008d99b
   8d718:	0008d9d1 	.word	0x0008d9d1
   8d71c:	0008d9ff 	.word	0x0008d9ff
   8d720:	0008d86f 	.word	0x0008d86f
   8d724:	0008da85 	.word	0x0008da85
   8d728:	0008da31 	.word	0x0008da31
   8d72c:	0008da3f 	.word	0x0008da3f
   8d730:	0008da69 	.word	0x0008da69
   8d734:	0008d87d 	.word	0x0008d87d
   8d738:	0008da4d 	.word	0x0008da4d
   8d73c:	0008da5b 	.word	0x0008da5b
   8d740:	0008d7cd 	.word	0x0008d7cd
   8d744:	0008d7db 	.word	0x0008d7db
   8d748:	0008d7e9 	.word	0x0008d7e9
   8d74c:	0008d7ad 	.word	0x0008d7ad
   8d750:	0008d7bd 	.word	0x0008d7bd
   8d754:	0008d791 	.word	0x0008d791
   8d758:	0008d79f 	.word	0x0008d79f
   8d75c:	0008da85 	.word	0x0008da85
   8d760:	0008da85 	.word	0x0008da85
   8d764:	0008da85 	.word	0x0008da85
   8d768:	0008da85 	.word	0x0008da85
   8d76c:	0008da85 	.word	0x0008da85
   8d770:	0008da85 	.word	0x0008da85
   8d774:	0008da85 	.word	0x0008da85
   8d778:	0008da85 	.word	0x0008da85
   8d77c:	0008da85 	.word	0x0008da85
   8d780:	0008da85 	.word	0x0008da85
   8d784:	0008da85 	.word	0x0008da85
   8d788:	0008da85 	.word	0x0008da85
   8d78c:	0008da23 	.word	0x0008da23
   8d790:	4b89      	ldr	r3, [pc, #548]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
   8d794:	81fb      	strh	r3, [r7, #14]
   8d796:	683b      	ldr	r3, [r7, #0]
   8d798:	89fa      	ldrh	r2, [r7, #14]
   8d79a:	801a      	strh	r2, [r3, #0]
   8d79c:	e173      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d79e:	4b86      	ldr	r3, [pc, #536]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d7a0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   8d7a2:	81fb      	strh	r3, [r7, #14]
   8d7a4:	683b      	ldr	r3, [r7, #0]
   8d7a6:	89fa      	ldrh	r2, [r7, #14]
   8d7a8:	801a      	strh	r2, [r3, #0]
   8d7aa:	e16c      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d7ac:	4b82      	ldr	r3, [pc, #520]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d7ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   8d7b2:	81fb      	strh	r3, [r7, #14]
   8d7b4:	683b      	ldr	r3, [r7, #0]
   8d7b6:	89fa      	ldrh	r2, [r7, #14]
   8d7b8:	801a      	strh	r2, [r3, #0]
   8d7ba:	e164      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d7bc:	4b7e      	ldr	r3, [pc, #504]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d7be:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   8d7c2:	81fb      	strh	r3, [r7, #14]
   8d7c4:	683b      	ldr	r3, [r7, #0]
   8d7c6:	89fa      	ldrh	r2, [r7, #14]
   8d7c8:	801a      	strh	r2, [r3, #0]
   8d7ca:	e15c      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d7cc:	4b7a      	ldr	r3, [pc, #488]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d7ce:	889b      	ldrh	r3, [r3, #4]
   8d7d0:	81fb      	strh	r3, [r7, #14]
   8d7d2:	683b      	ldr	r3, [r7, #0]
   8d7d4:	89fa      	ldrh	r2, [r7, #14]
   8d7d6:	801a      	strh	r2, [r3, #0]
   8d7d8:	e155      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d7da:	4b77      	ldr	r3, [pc, #476]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d7dc:	88db      	ldrh	r3, [r3, #6]
   8d7de:	81fb      	strh	r3, [r7, #14]
   8d7e0:	683b      	ldr	r3, [r7, #0]
   8d7e2:	89fa      	ldrh	r2, [r7, #14]
   8d7e4:	801a      	strh	r2, [r3, #0]
   8d7e6:	e14e      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d7e8:	4b73      	ldr	r3, [pc, #460]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d7ea:	891b      	ldrh	r3, [r3, #8]
   8d7ec:	81fb      	strh	r3, [r7, #14]
   8d7ee:	683b      	ldr	r3, [r7, #0]
   8d7f0:	89fa      	ldrh	r2, [r7, #14]
   8d7f2:	801a      	strh	r2, [r3, #0]
   8d7f4:	e147      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d7f6:	4b70      	ldr	r3, [pc, #448]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d7f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   8d7fc:	81fb      	strh	r3, [r7, #14]
   8d7fe:	683b      	ldr	r3, [r7, #0]
   8d800:	89fa      	ldrh	r2, [r7, #14]
   8d802:	801a      	strh	r2, [r3, #0]
   8d804:	e13f      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d806:	4b6c      	ldr	r3, [pc, #432]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   8d80c:	81fb      	strh	r3, [r7, #14]
   8d80e:	683b      	ldr	r3, [r7, #0]
   8d810:	89fa      	ldrh	r2, [r7, #14]
   8d812:	801a      	strh	r2, [r3, #0]
   8d814:	e137      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d816:	4b68      	ldr	r3, [pc, #416]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d818:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8d81c:	81fb      	strh	r3, [r7, #14]
   8d81e:	683b      	ldr	r3, [r7, #0]
   8d820:	89fa      	ldrh	r2, [r7, #14]
   8d822:	801a      	strh	r2, [r3, #0]
   8d824:	e12f      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d826:	4b65      	ldr	r3, [pc, #404]	; (8d9bc <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d828:	7f9b      	ldrb	r3, [r3, #30]
   8d82a:	f083 0301 	eor.w	r3, r3, #1
   8d82e:	b2db      	uxtb	r3, r3
   8d830:	2b00      	cmp	r3, #0
   8d832:	d006      	beq.n	8d842 <Cl_SysStat_GetSensor_Status_Query+0x192>
   8d834:	4b60      	ldr	r3, [pc, #384]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d836:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   8d838:	81fb      	strh	r3, [r7, #14]
   8d83a:	683b      	ldr	r3, [r7, #0]
   8d83c:	89fa      	ldrh	r2, [r7, #14]
   8d83e:	801a      	strh	r2, [r3, #0]
   8d840:	e121      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d842:	4b5e      	ldr	r3, [pc, #376]	; (8d9bc <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d844:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
   8d848:	81fb      	strh	r3, [r7, #14]
   8d84a:	683b      	ldr	r3, [r7, #0]
   8d84c:	89fa      	ldrh	r2, [r7, #14]
   8d84e:	801a      	strh	r2, [r3, #0]
   8d850:	e119      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d852:	4b59      	ldr	r3, [pc, #356]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d854:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   8d856:	81fb      	strh	r3, [r7, #14]
   8d858:	683b      	ldr	r3, [r7, #0]
   8d85a:	89fa      	ldrh	r2, [r7, #14]
   8d85c:	801a      	strh	r2, [r3, #0]
   8d85e:	e112      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d860:	4b55      	ldr	r3, [pc, #340]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d862:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   8d864:	81fb      	strh	r3, [r7, #14]
   8d866:	683b      	ldr	r3, [r7, #0]
   8d868:	89fa      	ldrh	r2, [r7, #14]
   8d86a:	801a      	strh	r2, [r3, #0]
   8d86c:	e10b      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d86e:	4b52      	ldr	r3, [pc, #328]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d870:	8b9b      	ldrh	r3, [r3, #28]
   8d872:	81fb      	strh	r3, [r7, #14]
   8d874:	683b      	ldr	r3, [r7, #0]
   8d876:	89fa      	ldrh	r2, [r7, #14]
   8d878:	801a      	strh	r2, [r3, #0]
   8d87a:	e104      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d87c:	4b4e      	ldr	r3, [pc, #312]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d87e:	8c1b      	ldrh	r3, [r3, #32]
   8d880:	81fb      	strh	r3, [r7, #14]
   8d882:	683b      	ldr	r3, [r7, #0]
   8d884:	89fa      	ldrh	r2, [r7, #14]
   8d886:	801a      	strh	r2, [r3, #0]
   8d888:	e0fd      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d88a:	4b4b      	ldr	r3, [pc, #300]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d88c:	8b1b      	ldrh	r3, [r3, #24]
   8d88e:	81fb      	strh	r3, [r7, #14]
   8d890:	683b      	ldr	r3, [r7, #0]
   8d892:	89fa      	ldrh	r2, [r7, #14]
   8d894:	801a      	strh	r2, [r3, #0]
   8d896:	e0f6      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d898:	4b47      	ldr	r3, [pc, #284]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d89a:	8b5b      	ldrh	r3, [r3, #26]
   8d89c:	81fb      	strh	r3, [r7, #14]
   8d89e:	683b      	ldr	r3, [r7, #0]
   8d8a0:	89fa      	ldrh	r2, [r7, #14]
   8d8a2:	801a      	strh	r2, [r3, #0]
   8d8a4:	e0ef      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d8a6:	4b45      	ldr	r3, [pc, #276]	; (8d9bc <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d8a8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   8d8ac:	f083 0301 	eor.w	r3, r3, #1
   8d8b0:	b2db      	uxtb	r3, r3
   8d8b2:	2b00      	cmp	r3, #0
   8d8b4:	d006      	beq.n	8d8c4 <Cl_SysStat_GetSensor_Status_Query+0x214>
   8d8b6:	4b40      	ldr	r3, [pc, #256]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d8b8:	8a1b      	ldrh	r3, [r3, #16]
   8d8ba:	81fb      	strh	r3, [r7, #14]
   8d8bc:	683b      	ldr	r3, [r7, #0]
   8d8be:	89fa      	ldrh	r2, [r7, #14]
   8d8c0:	801a      	strh	r2, [r3, #0]
   8d8c2:	e0e0      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d8c4:	4b3d      	ldr	r3, [pc, #244]	; (8d9bc <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d8c6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
   8d8ca:	81fb      	strh	r3, [r7, #14]
   8d8cc:	683b      	ldr	r3, [r7, #0]
   8d8ce:	89fa      	ldrh	r2, [r7, #14]
   8d8d0:	801a      	strh	r2, [r3, #0]
   8d8d2:	e0d8      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d8d4:	4b39      	ldr	r3, [pc, #228]	; (8d9bc <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d8d6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   8d8da:	f083 0301 	eor.w	r3, r3, #1
   8d8de:	b2db      	uxtb	r3, r3
   8d8e0:	2b00      	cmp	r3, #0
   8d8e2:	d006      	beq.n	8d8f2 <Cl_SysStat_GetSensor_Status_Query+0x242>
   8d8e4:	4b34      	ldr	r3, [pc, #208]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d8e6:	8a5b      	ldrh	r3, [r3, #18]
   8d8e8:	81fb      	strh	r3, [r7, #14]
   8d8ea:	683b      	ldr	r3, [r7, #0]
   8d8ec:	89fa      	ldrh	r2, [r7, #14]
   8d8ee:	801a      	strh	r2, [r3, #0]
   8d8f0:	e0c9      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d8f2:	4b32      	ldr	r3, [pc, #200]	; (8d9bc <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d8f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   8d8f8:	81fb      	strh	r3, [r7, #14]
   8d8fa:	683b      	ldr	r3, [r7, #0]
   8d8fc:	89fa      	ldrh	r2, [r7, #14]
   8d8fe:	801a      	strh	r2, [r3, #0]
   8d900:	e0c1      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d902:	4b2d      	ldr	r3, [pc, #180]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   8d906:	81fb      	strh	r3, [r7, #14]
   8d908:	683b      	ldr	r3, [r7, #0]
   8d90a:	89fa      	ldrh	r2, [r7, #14]
   8d90c:	801a      	strh	r2, [r3, #0]
   8d90e:	e0ba      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d910:	4b2a      	ldr	r3, [pc, #168]	; (8d9bc <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d912:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8d916:	f083 0301 	eor.w	r3, r3, #1
   8d91a:	b2db      	uxtb	r3, r3
   8d91c:	2b00      	cmp	r3, #0
   8d91e:	d006      	beq.n	8d92e <Cl_SysStat_GetSensor_Status_Query+0x27e>
   8d920:	4b25      	ldr	r3, [pc, #148]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d922:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   8d924:	81fb      	strh	r3, [r7, #14]
   8d926:	683b      	ldr	r3, [r7, #0]
   8d928:	89fa      	ldrh	r2, [r7, #14]
   8d92a:	801a      	strh	r2, [r3, #0]
   8d92c:	e0ab      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d92e:	4b23      	ldr	r3, [pc, #140]	; (8d9bc <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d930:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
   8d934:	81fb      	strh	r3, [r7, #14]
   8d936:	683b      	ldr	r3, [r7, #0]
   8d938:	89fa      	ldrh	r2, [r7, #14]
   8d93a:	801a      	strh	r2, [r3, #0]
   8d93c:	e0a3      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d93e:	4b1f      	ldr	r3, [pc, #124]	; (8d9bc <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d940:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   8d944:	f083 0301 	eor.w	r3, r3, #1
   8d948:	b2db      	uxtb	r3, r3
   8d94a:	2b00      	cmp	r3, #0
   8d94c:	d006      	beq.n	8d95c <Cl_SysStat_GetSensor_Status_Query+0x2ac>
   8d94e:	4b1a      	ldr	r3, [pc, #104]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d950:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   8d952:	81fb      	strh	r3, [r7, #14]
   8d954:	683b      	ldr	r3, [r7, #0]
   8d956:	89fa      	ldrh	r2, [r7, #14]
   8d958:	801a      	strh	r2, [r3, #0]
   8d95a:	e094      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d95c:	4b17      	ldr	r3, [pc, #92]	; (8d9bc <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d95e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
   8d962:	81fb      	strh	r3, [r7, #14]
   8d964:	683b      	ldr	r3, [r7, #0]
   8d966:	89fa      	ldrh	r2, [r7, #14]
   8d968:	801a      	strh	r2, [r3, #0]
   8d96a:	e08c      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d96c:	4b13      	ldr	r3, [pc, #76]	; (8d9bc <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d96e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   8d972:	f083 0301 	eor.w	r3, r3, #1
   8d976:	b2db      	uxtb	r3, r3
   8d978:	2b00      	cmp	r3, #0
   8d97a:	d006      	beq.n	8d98a <Cl_SysStat_GetSensor_Status_Query+0x2da>
   8d97c:	4b0e      	ldr	r3, [pc, #56]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d97e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   8d980:	81fb      	strh	r3, [r7, #14]
   8d982:	683b      	ldr	r3, [r7, #0]
   8d984:	89fa      	ldrh	r2, [r7, #14]
   8d986:	801a      	strh	r2, [r3, #0]
   8d988:	e07d      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d98a:	4b0c      	ldr	r3, [pc, #48]	; (8d9bc <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d98c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
   8d990:	81fb      	strh	r3, [r7, #14]
   8d992:	683b      	ldr	r3, [r7, #0]
   8d994:	89fa      	ldrh	r2, [r7, #14]
   8d996:	801a      	strh	r2, [r3, #0]
   8d998:	e075      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d99a:	4b08      	ldr	r3, [pc, #32]	; (8d9bc <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d99c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
   8d9a0:	f083 0301 	eor.w	r3, r3, #1
   8d9a4:	b2db      	uxtb	r3, r3
   8d9a6:	2b00      	cmp	r3, #0
   8d9a8:	d00a      	beq.n	8d9c0 <Cl_SysStat_GetSensor_Status_Query+0x310>
   8d9aa:	4b03      	ldr	r3, [pc, #12]	; (8d9b8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d9ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   8d9ae:	81fb      	strh	r3, [r7, #14]
   8d9b0:	683b      	ldr	r3, [r7, #0]
   8d9b2:	89fa      	ldrh	r2, [r7, #14]
   8d9b4:	801a      	strh	r2, [r3, #0]
   8d9b6:	e066      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d9b8:	20072e28 	.word	0x20072e28
   8d9bc:	2007310c 	.word	0x2007310c
   8d9c0:	4b34      	ldr	r3, [pc, #208]	; (8da94 <Cl_SysStat_GetSensor_Status_Query+0x3e4>)
   8d9c2:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
   8d9c6:	81fb      	strh	r3, [r7, #14]
   8d9c8:	683b      	ldr	r3, [r7, #0]
   8d9ca:	89fa      	ldrh	r2, [r7, #14]
   8d9cc:	801a      	strh	r2, [r3, #0]
   8d9ce:	e05a      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d9d0:	4b30      	ldr	r3, [pc, #192]	; (8da94 <Cl_SysStat_GetSensor_Status_Query+0x3e4>)
   8d9d2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   8d9d6:	f083 0301 	eor.w	r3, r3, #1
   8d9da:	b2db      	uxtb	r3, r3
   8d9dc:	2b00      	cmp	r3, #0
   8d9de:	d006      	beq.n	8d9ee <Cl_SysStat_GetSensor_Status_Query+0x33e>
   8d9e0:	4b2d      	ldr	r3, [pc, #180]	; (8da98 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8d9e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   8d9e4:	81fb      	strh	r3, [r7, #14]
   8d9e6:	683b      	ldr	r3, [r7, #0]
   8d9e8:	89fa      	ldrh	r2, [r7, #14]
   8d9ea:	801a      	strh	r2, [r3, #0]
   8d9ec:	e04b      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d9ee:	4b29      	ldr	r3, [pc, #164]	; (8da94 <Cl_SysStat_GetSensor_Status_Query+0x3e4>)
   8d9f0:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
   8d9f4:	81fb      	strh	r3, [r7, #14]
   8d9f6:	683b      	ldr	r3, [r7, #0]
   8d9f8:	89fa      	ldrh	r2, [r7, #14]
   8d9fa:	801a      	strh	r2, [r3, #0]
   8d9fc:	e043      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d9fe:	4b27      	ldr	r3, [pc, #156]	; (8da9c <Cl_SysStat_GetSensor_Status_Query+0x3ec>)
   8da00:	781b      	ldrb	r3, [r3, #0]
   8da02:	2b00      	cmp	r3, #0
   8da04:	d106      	bne.n	8da14 <Cl_SysStat_GetSensor_Status_Query+0x364>
   8da06:	4b24      	ldr	r3, [pc, #144]	; (8da98 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8da08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   8da0a:	81fb      	strh	r3, [r7, #14]
   8da0c:	683b      	ldr	r3, [r7, #0]
   8da0e:	89fa      	ldrh	r2, [r7, #14]
   8da10:	801a      	strh	r2, [r3, #0]
   8da12:	e038      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8da14:	f44f 73c8 	mov.w	r3, #400	; 0x190
   8da18:	81fb      	strh	r3, [r7, #14]
   8da1a:	683b      	ldr	r3, [r7, #0]
   8da1c:	89fa      	ldrh	r2, [r7, #14]
   8da1e:	801a      	strh	r2, [r3, #0]
   8da20:	e031      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8da22:	4b1d      	ldr	r3, [pc, #116]	; (8da98 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8da24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   8da26:	81fb      	strh	r3, [r7, #14]
   8da28:	683b      	ldr	r3, [r7, #0]
   8da2a:	89fa      	ldrh	r2, [r7, #14]
   8da2c:	801a      	strh	r2, [r3, #0]
   8da2e:	e02a      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8da30:	4b19      	ldr	r3, [pc, #100]	; (8da98 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8da32:	899b      	ldrh	r3, [r3, #12]
   8da34:	81fb      	strh	r3, [r7, #14]
   8da36:	683b      	ldr	r3, [r7, #0]
   8da38:	89fa      	ldrh	r2, [r7, #14]
   8da3a:	801a      	strh	r2, [r3, #0]
   8da3c:	e023      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8da3e:	4b16      	ldr	r3, [pc, #88]	; (8da98 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8da40:	89db      	ldrh	r3, [r3, #14]
   8da42:	81fb      	strh	r3, [r7, #14]
   8da44:	683b      	ldr	r3, [r7, #0]
   8da46:	89fa      	ldrh	r2, [r7, #14]
   8da48:	801a      	strh	r2, [r3, #0]
   8da4a:	e01c      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8da4c:	4b12      	ldr	r3, [pc, #72]	; (8da98 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8da4e:	895b      	ldrh	r3, [r3, #10]
   8da50:	81fb      	strh	r3, [r7, #14]
   8da52:	683b      	ldr	r3, [r7, #0]
   8da54:	89fa      	ldrh	r2, [r7, #14]
   8da56:	801a      	strh	r2, [r3, #0]
   8da58:	e015      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8da5a:	4b0f      	ldr	r3, [pc, #60]	; (8da98 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8da5c:	885b      	ldrh	r3, [r3, #2]
   8da5e:	81fb      	strh	r3, [r7, #14]
   8da60:	683b      	ldr	r3, [r7, #0]
   8da62:	89fa      	ldrh	r2, [r7, #14]
   8da64:	801a      	strh	r2, [r3, #0]
   8da66:	e00e      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8da68:	4b0b      	ldr	r3, [pc, #44]	; (8da98 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8da6a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   8da6c:	81fb      	strh	r3, [r7, #14]
   8da6e:	683b      	ldr	r3, [r7, #0]
   8da70:	89fa      	ldrh	r2, [r7, #14]
   8da72:	801a      	strh	r2, [r3, #0]
   8da74:	e007      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8da76:	4b08      	ldr	r3, [pc, #32]	; (8da98 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8da78:	781b      	ldrb	r3, [r3, #0]
   8da7a:	81fb      	strh	r3, [r7, #14]
   8da7c:	683b      	ldr	r3, [r7, #0]
   8da7e:	89fa      	ldrh	r2, [r7, #14]
   8da80:	801a      	strh	r2, [r3, #0]
   8da82:	e000      	b.n	8da86 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8da84:	bf00      	nop
   8da86:	2300      	movs	r3, #0
   8da88:	4618      	mov	r0, r3
   8da8a:	3714      	adds	r7, #20
   8da8c:	46bd      	mov	sp, r7
   8da8e:	bc80      	pop	{r7}
   8da90:	4770      	bx	lr
   8da92:	bf00      	nop
   8da94:	2007310c 	.word	0x2007310c
   8da98:	20072e28 	.word	0x20072e28
   8da9c:	200720d1 	.word	0x200720d1

0008daa0 <Cl_SysStat_mean_status_update>:
   8daa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   8daa2:	b09b      	sub	sp, #108	; 0x6c
   8daa4:	af00      	add	r7, sp, #0
   8daa6:	2304      	movs	r3, #4
   8daa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
   8daac:	2300      	movs	r3, #0
   8daae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
   8dab2:	2300      	movs	r3, #0
   8dab4:	863b      	strh	r3, [r7, #48]	; 0x30
   8dab6:	2300      	movs	r3, #0
   8dab8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
   8dabc:	2300      	movs	r3, #0
   8dabe:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
   8dac2:	2300      	movs	r3, #0
   8dac4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
   8dac8:	2300      	movs	r3, #0
   8daca:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
   8dace:	2300      	movs	r3, #0
   8dad0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
   8dad4:	2300      	movs	r3, #0
   8dad6:	81fb      	strh	r3, [r7, #14]
   8dad8:	4ba5      	ldr	r3, [pc, #660]	; (8dd70 <Cl_SysStat_mean_status_update+0x2d0>)
   8dada:	781b      	ldrb	r3, [r3, #0]
   8dadc:	2b00      	cmp	r3, #0
   8dade:	f000 846f 	beq.w	8e3c0 <Cl_SysStat_mean_status_update+0x920>
   8dae2:	4ba3      	ldr	r3, [pc, #652]	; (8dd70 <Cl_SysStat_mean_status_update+0x2d0>)
   8dae4:	781b      	ldrb	r3, [r3, #0]
   8dae6:	2b00      	cmp	r3, #0
   8dae8:	f000 846a 	beq.w	8e3c0 <Cl_SysStat_mean_status_update+0x920>
   8daec:	f107 0330 	add.w	r3, r7, #48	; 0x30
   8daf0:	4619      	mov	r1, r3
   8daf2:	2012      	movs	r0, #18
   8daf4:	4b9f      	ldr	r3, [pc, #636]	; (8dd74 <Cl_SysStat_mean_status_update+0x2d4>)
   8daf6:	4798      	blx	r3
   8daf8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
   8dafc:	461a      	mov	r2, r3
   8dafe:	f649 5308 	movw	r3, #40200	; 0x9d08
   8db02:	fb03 f302 	mul.w	r3, r3, r2
   8db06:	2b00      	cmp	r3, #0
   8db08:	da02      	bge.n	8db10 <Cl_SysStat_mean_status_update+0x70>
   8db0a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8db0e:	33ff      	adds	r3, #255	; 0xff
   8db10:	141b      	asrs	r3, r3, #16
   8db12:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
   8db16:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
   8db1a:	4618      	mov	r0, r3
   8db1c:	4b96      	ldr	r3, [pc, #600]	; (8dd78 <Cl_SysStat_mean_status_update+0x2d8>)
   8db1e:	4798      	blx	r3
   8db20:	4b96      	ldr	r3, [pc, #600]	; (8dd7c <Cl_SysStat_mean_status_update+0x2dc>)
   8db22:	681a      	ldr	r2, [r3, #0]
   8db24:	4b96      	ldr	r3, [pc, #600]	; (8dd80 <Cl_SysStat_mean_status_update+0x2e0>)
   8db26:	4997      	ldr	r1, [pc, #604]	; (8dd84 <Cl_SysStat_mean_status_update+0x2e4>)
   8db28:	4610      	mov	r0, r2
   8db2a:	4798      	blx	r3
   8db2c:	4603      	mov	r3, r0
   8db2e:	4618      	mov	r0, r3
   8db30:	4b95      	ldr	r3, [pc, #596]	; (8dd88 <Cl_SysStat_mean_status_update+0x2e8>)
   8db32:	681a      	ldr	r2, [r3, #0]
   8db34:	4b95      	ldr	r3, [pc, #596]	; (8dd8c <Cl_SysStat_mean_status_update+0x2ec>)
   8db36:	4611      	mov	r1, r2
   8db38:	4798      	blx	r3
   8db3a:	4603      	mov	r3, r0
   8db3c:	461a      	mov	r2, r3
   8db3e:	4b94      	ldr	r3, [pc, #592]	; (8dd90 <Cl_SysStat_mean_status_update+0x2f0>)
   8db40:	4994      	ldr	r1, [pc, #592]	; (8dd94 <Cl_SysStat_mean_status_update+0x2f4>)
   8db42:	4610      	mov	r0, r2
   8db44:	4798      	blx	r3
   8db46:	4603      	mov	r3, r0
   8db48:	461a      	mov	r2, r3
   8db4a:	4b8c      	ldr	r3, [pc, #560]	; (8dd7c <Cl_SysStat_mean_status_update+0x2dc>)
   8db4c:	601a      	str	r2, [r3, #0]
   8db4e:	4b8b      	ldr	r3, [pc, #556]	; (8dd7c <Cl_SysStat_mean_status_update+0x2dc>)
   8db50:	681a      	ldr	r2, [r3, #0]
   8db52:	4b8f      	ldr	r3, [pc, #572]	; (8dd90 <Cl_SysStat_mean_status_update+0x2f0>)
   8db54:	4990      	ldr	r1, [pc, #576]	; (8dd98 <Cl_SysStat_mean_status_update+0x2f8>)
   8db56:	4610      	mov	r0, r2
   8db58:	4798      	blx	r3
   8db5a:	4603      	mov	r3, r0
   8db5c:	461a      	mov	r2, r3
   8db5e:	4b8f      	ldr	r3, [pc, #572]	; (8dd9c <Cl_SysStat_mean_status_update+0x2fc>)
   8db60:	4610      	mov	r0, r2
   8db62:	4798      	blx	r3
   8db64:	4603      	mov	r3, r0
   8db66:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
   8db6a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
   8db6e:	3b0d      	subs	r3, #13
   8db70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
   8db74:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
   8db78:	823b      	strh	r3, [r7, #16]
   8db7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
   8db7e:	4619      	mov	r1, r3
   8db80:	2013      	movs	r0, #19
   8db82:	4b7c      	ldr	r3, [pc, #496]	; (8dd74 <Cl_SysStat_mean_status_update+0x2d4>)
   8db84:	4798      	blx	r3
   8db86:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
   8db8a:	461a      	mov	r2, r3
   8db8c:	f649 5308 	movw	r3, #40200	; 0x9d08
   8db90:	fb03 f302 	mul.w	r3, r3, r2
   8db94:	2b00      	cmp	r3, #0
   8db96:	da02      	bge.n	8db9e <Cl_SysStat_mean_status_update+0xfe>
   8db98:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8db9c:	33ff      	adds	r3, #255	; 0xff
   8db9e:	141b      	asrs	r3, r3, #16
   8dba0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
   8dba4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8dba8:	4618      	mov	r0, r3
   8dbaa:	4b73      	ldr	r3, [pc, #460]	; (8dd78 <Cl_SysStat_mean_status_update+0x2d8>)
   8dbac:	4798      	blx	r3
   8dbae:	4b7c      	ldr	r3, [pc, #496]	; (8dda0 <Cl_SysStat_mean_status_update+0x300>)
   8dbb0:	681a      	ldr	r2, [r3, #0]
   8dbb2:	4b73      	ldr	r3, [pc, #460]	; (8dd80 <Cl_SysStat_mean_status_update+0x2e0>)
   8dbb4:	4973      	ldr	r1, [pc, #460]	; (8dd84 <Cl_SysStat_mean_status_update+0x2e4>)
   8dbb6:	4610      	mov	r0, r2
   8dbb8:	4798      	blx	r3
   8dbba:	4603      	mov	r3, r0
   8dbbc:	4618      	mov	r0, r3
   8dbbe:	4b72      	ldr	r3, [pc, #456]	; (8dd88 <Cl_SysStat_mean_status_update+0x2e8>)
   8dbc0:	681a      	ldr	r2, [r3, #0]
   8dbc2:	4b72      	ldr	r3, [pc, #456]	; (8dd8c <Cl_SysStat_mean_status_update+0x2ec>)
   8dbc4:	4611      	mov	r1, r2
   8dbc6:	4798      	blx	r3
   8dbc8:	4603      	mov	r3, r0
   8dbca:	461a      	mov	r2, r3
   8dbcc:	4b70      	ldr	r3, [pc, #448]	; (8dd90 <Cl_SysStat_mean_status_update+0x2f0>)
   8dbce:	4971      	ldr	r1, [pc, #452]	; (8dd94 <Cl_SysStat_mean_status_update+0x2f4>)
   8dbd0:	4610      	mov	r0, r2
   8dbd2:	4798      	blx	r3
   8dbd4:	4603      	mov	r3, r0
   8dbd6:	461a      	mov	r2, r3
   8dbd8:	4b71      	ldr	r3, [pc, #452]	; (8dda0 <Cl_SysStat_mean_status_update+0x300>)
   8dbda:	601a      	str	r2, [r3, #0]
   8dbdc:	4b70      	ldr	r3, [pc, #448]	; (8dda0 <Cl_SysStat_mean_status_update+0x300>)
   8dbde:	681a      	ldr	r2, [r3, #0]
   8dbe0:	4b6b      	ldr	r3, [pc, #428]	; (8dd90 <Cl_SysStat_mean_status_update+0x2f0>)
   8dbe2:	496d      	ldr	r1, [pc, #436]	; (8dd98 <Cl_SysStat_mean_status_update+0x2f8>)
   8dbe4:	4610      	mov	r0, r2
   8dbe6:	4798      	blx	r3
   8dbe8:	4603      	mov	r3, r0
   8dbea:	461a      	mov	r2, r3
   8dbec:	4b6b      	ldr	r3, [pc, #428]	; (8dd9c <Cl_SysStat_mean_status_update+0x2fc>)
   8dbee:	4610      	mov	r0, r2
   8dbf0:	4798      	blx	r3
   8dbf2:	4603      	mov	r3, r0
   8dbf4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
   8dbf8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
   8dbfc:	3b0d      	subs	r3, #13
   8dbfe:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
   8dc02:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
   8dc06:	827b      	strh	r3, [r7, #18]
   8dc08:	f107 0330 	add.w	r3, r7, #48	; 0x30
   8dc0c:	4619      	mov	r1, r3
   8dc0e:	2014      	movs	r0, #20
   8dc10:	4b58      	ldr	r3, [pc, #352]	; (8dd74 <Cl_SysStat_mean_status_update+0x2d4>)
   8dc12:	4798      	blx	r3
   8dc14:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
   8dc18:	461a      	mov	r2, r3
   8dc1a:	f649 5308 	movw	r3, #40200	; 0x9d08
   8dc1e:	fb03 f302 	mul.w	r3, r3, r2
   8dc22:	2b00      	cmp	r3, #0
   8dc24:	da02      	bge.n	8dc2c <Cl_SysStat_mean_status_update+0x18c>
   8dc26:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8dc2a:	33ff      	adds	r3, #255	; 0xff
   8dc2c:	141b      	asrs	r3, r3, #16
   8dc2e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
   8dc32:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   8dc36:	4618      	mov	r0, r3
   8dc38:	4b4f      	ldr	r3, [pc, #316]	; (8dd78 <Cl_SysStat_mean_status_update+0x2d8>)
   8dc3a:	4798      	blx	r3
   8dc3c:	4b59      	ldr	r3, [pc, #356]	; (8dda4 <Cl_SysStat_mean_status_update+0x304>)
   8dc3e:	681a      	ldr	r2, [r3, #0]
   8dc40:	4b4f      	ldr	r3, [pc, #316]	; (8dd80 <Cl_SysStat_mean_status_update+0x2e0>)
   8dc42:	4950      	ldr	r1, [pc, #320]	; (8dd84 <Cl_SysStat_mean_status_update+0x2e4>)
   8dc44:	4610      	mov	r0, r2
   8dc46:	4798      	blx	r3
   8dc48:	4603      	mov	r3, r0
   8dc4a:	4618      	mov	r0, r3
   8dc4c:	4b4e      	ldr	r3, [pc, #312]	; (8dd88 <Cl_SysStat_mean_status_update+0x2e8>)
   8dc4e:	681a      	ldr	r2, [r3, #0]
   8dc50:	4b4e      	ldr	r3, [pc, #312]	; (8dd8c <Cl_SysStat_mean_status_update+0x2ec>)
   8dc52:	4611      	mov	r1, r2
   8dc54:	4798      	blx	r3
   8dc56:	4603      	mov	r3, r0
   8dc58:	461a      	mov	r2, r3
   8dc5a:	4b4d      	ldr	r3, [pc, #308]	; (8dd90 <Cl_SysStat_mean_status_update+0x2f0>)
   8dc5c:	494d      	ldr	r1, [pc, #308]	; (8dd94 <Cl_SysStat_mean_status_update+0x2f4>)
   8dc5e:	4610      	mov	r0, r2
   8dc60:	4798      	blx	r3
   8dc62:	4603      	mov	r3, r0
   8dc64:	461a      	mov	r2, r3
   8dc66:	4b4f      	ldr	r3, [pc, #316]	; (8dda4 <Cl_SysStat_mean_status_update+0x304>)
   8dc68:	601a      	str	r2, [r3, #0]
   8dc6a:	4b4e      	ldr	r3, [pc, #312]	; (8dda4 <Cl_SysStat_mean_status_update+0x304>)
   8dc6c:	681a      	ldr	r2, [r3, #0]
   8dc6e:	4b48      	ldr	r3, [pc, #288]	; (8dd90 <Cl_SysStat_mean_status_update+0x2f0>)
   8dc70:	4949      	ldr	r1, [pc, #292]	; (8dd98 <Cl_SysStat_mean_status_update+0x2f8>)
   8dc72:	4610      	mov	r0, r2
   8dc74:	4798      	blx	r3
   8dc76:	4603      	mov	r3, r0
   8dc78:	64fb      	str	r3, [r7, #76]	; 0x4c
   8dc7a:	4b4b      	ldr	r3, [pc, #300]	; (8dda8 <Cl_SysStat_mean_status_update+0x308>)
   8dc7c:	494b      	ldr	r1, [pc, #300]	; (8ddac <Cl_SysStat_mean_status_update+0x30c>)
   8dc7e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   8dc80:	4798      	blx	r3
   8dc82:	4603      	mov	r3, r0
   8dc84:	461a      	mov	r2, r3
   8dc86:	4b41      	ldr	r3, [pc, #260]	; (8dd8c <Cl_SysStat_mean_status_update+0x2ec>)
   8dc88:	4949      	ldr	r1, [pc, #292]	; (8ddb0 <Cl_SysStat_mean_status_update+0x310>)
   8dc8a:	4610      	mov	r0, r2
   8dc8c:	4798      	blx	r3
   8dc8e:	4603      	mov	r3, r0
   8dc90:	64fb      	str	r3, [r7, #76]	; 0x4c
   8dc92:	4b48      	ldr	r3, [pc, #288]	; (8ddb4 <Cl_SysStat_mean_status_update+0x314>)
   8dc94:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   8dc96:	4798      	blx	r3
   8dc98:	4603      	mov	r3, r0
   8dc9a:	b21b      	sxth	r3, r3
   8dc9c:	82bb      	strh	r3, [r7, #20]
   8dc9e:	f107 030e 	add.w	r3, r7, #14
   8dca2:	4619      	mov	r1, r3
   8dca4:	2007      	movs	r0, #7
   8dca6:	4b33      	ldr	r3, [pc, #204]	; (8dd74 <Cl_SysStat_mean_status_update+0x2d4>)
   8dca8:	4798      	blx	r3
   8dcaa:	89fb      	ldrh	r3, [r7, #14]
   8dcac:	4a42      	ldr	r2, [pc, #264]	; (8ddb8 <Cl_SysStat_mean_status_update+0x318>)
   8dcae:	fba2 2303 	umull	r2, r3, r2, r3
   8dcb2:	095b      	lsrs	r3, r3, #5
   8dcb4:	b29b      	uxth	r3, r3
   8dcb6:	461a      	mov	r2, r3
   8dcb8:	4b40      	ldr	r3, [pc, #256]	; (8ddbc <Cl_SysStat_mean_status_update+0x31c>)
   8dcba:	4610      	mov	r0, r2
   8dcbc:	4798      	blx	r3
   8dcbe:	4603      	mov	r3, r0
   8dcc0:	64bb      	str	r3, [r7, #72]	; 0x48
   8dcc2:	4b3f      	ldr	r3, [pc, #252]	; (8ddc0 <Cl_SysStat_mean_status_update+0x320>)
   8dcc4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   8dcc6:	4798      	blx	r3
   8dcc8:	4c3e      	ldr	r4, [pc, #248]	; (8ddc4 <Cl_SysStat_mean_status_update+0x324>)
   8dcca:	a321      	add	r3, pc, #132	; (adr r3, 8dd50 <Cl_SysStat_mean_status_update+0x2b0>)
   8dccc:	e9d3 2300 	ldrd	r2, r3, [r3]
   8dcd0:	47a0      	blx	r4
   8dcd2:	4603      	mov	r3, r0
   8dcd4:	460c      	mov	r4, r1
   8dcd6:	461d      	mov	r5, r3
   8dcd8:	4626      	mov	r6, r4
   8dcda:	4b39      	ldr	r3, [pc, #228]	; (8ddc0 <Cl_SysStat_mean_status_update+0x320>)
   8dcdc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   8dcde:	4798      	blx	r3
   8dce0:	4602      	mov	r2, r0
   8dce2:	460b      	mov	r3, r1
   8dce4:	4c37      	ldr	r4, [pc, #220]	; (8ddc4 <Cl_SysStat_mean_status_update+0x324>)
   8dce6:	4628      	mov	r0, r5
   8dce8:	4631      	mov	r1, r6
   8dcea:	47a0      	blx	r4
   8dcec:	4603      	mov	r3, r0
   8dcee:	460c      	mov	r4, r1
   8dcf0:	461d      	mov	r5, r3
   8dcf2:	4626      	mov	r6, r4
   8dcf4:	4b32      	ldr	r3, [pc, #200]	; (8ddc0 <Cl_SysStat_mean_status_update+0x320>)
   8dcf6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   8dcf8:	4798      	blx	r3
   8dcfa:	4c32      	ldr	r4, [pc, #200]	; (8ddc4 <Cl_SysStat_mean_status_update+0x324>)
   8dcfc:	a316      	add	r3, pc, #88	; (adr r3, 8dd58 <Cl_SysStat_mean_status_update+0x2b8>)
   8dcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   8dd02:	47a0      	blx	r4
   8dd04:	4603      	mov	r3, r0
   8dd06:	460c      	mov	r4, r1
   8dd08:	461a      	mov	r2, r3
   8dd0a:	4623      	mov	r3, r4
   8dd0c:	4c2e      	ldr	r4, [pc, #184]	; (8ddc8 <Cl_SysStat_mean_status_update+0x328>)
   8dd0e:	4628      	mov	r0, r5
   8dd10:	4631      	mov	r1, r6
   8dd12:	47a0      	blx	r4
   8dd14:	4603      	mov	r3, r0
   8dd16:	460c      	mov	r4, r1
   8dd18:	4618      	mov	r0, r3
   8dd1a:	4621      	mov	r1, r4
   8dd1c:	4c2a      	ldr	r4, [pc, #168]	; (8ddc8 <Cl_SysStat_mean_status_update+0x328>)
   8dd1e:	a310      	add	r3, pc, #64	; (adr r3, 8dd60 <Cl_SysStat_mean_status_update+0x2c0>)
   8dd20:	e9d3 2300 	ldrd	r2, r3, [r3]
   8dd24:	47a0      	blx	r4
   8dd26:	4603      	mov	r3, r0
   8dd28:	460c      	mov	r4, r1
   8dd2a:	4618      	mov	r0, r3
   8dd2c:	4621      	mov	r1, r4
   8dd2e:	4c26      	ldr	r4, [pc, #152]	; (8ddc8 <Cl_SysStat_mean_status_update+0x328>)
   8dd30:	a30d      	add	r3, pc, #52	; (adr r3, 8dd68 <Cl_SysStat_mean_status_update+0x2c8>)
   8dd32:	e9d3 2300 	ldrd	r2, r3, [r3]
   8dd36:	47a0      	blx	r4
   8dd38:	4603      	mov	r3, r0
   8dd3a:	460c      	mov	r4, r1
   8dd3c:	4619      	mov	r1, r3
   8dd3e:	4622      	mov	r2, r4
   8dd40:	4b22      	ldr	r3, [pc, #136]	; (8ddcc <Cl_SysStat_mean_status_update+0x32c>)
   8dd42:	4608      	mov	r0, r1
   8dd44:	4611      	mov	r1, r2
   8dd46:	4798      	blx	r3
   8dd48:	4603      	mov	r3, r0
   8dd4a:	647b      	str	r3, [r7, #68]	; 0x44
   8dd4c:	e040      	b.n	8ddd0 <Cl_SysStat_mean_status_update+0x330>
   8dd4e:	bf00      	nop
   8dd50:	eb1c432d 	.word	0xeb1c432d
   8dd54:	3f1a36e2 	.word	0x3f1a36e2
   8dd58:	d2f1a9fc 	.word	0xd2f1a9fc
   8dd5c:	3fa0624d 	.word	0x3fa0624d
   8dd60:	51eb851f 	.word	0x51eb851f
   8dd64:	3fed1eb8 	.word	0x3fed1eb8
   8dd68:	9999999a 	.word	0x9999999a
   8dd6c:	3fd99999 	.word	0x3fd99999
   8dd70:	200727ac 	.word	0x200727ac
   8dd74:	0008d6b1 	.word	0x0008d6b1
   8dd78:	0008e8e1 	.word	0x0008e8e1
   8dd7c:	200725f0 	.word	0x200725f0
   8dd80:	000a3e15 	.word	0x000a3e15
   8dd84:	40a00000 	.word	0x40a00000
   8dd88:	20072630 	.word	0x20072630
   8dd8c:	000a3c05 	.word	0x000a3c05
   8dd90:	000a3f7d 	.word	0x000a3f7d
   8dd94:	40c00000 	.word	0x40c00000
   8dd98:	41200000 	.word	0x41200000
   8dd9c:	000a41ed 	.word	0x000a41ed
   8dda0:	200725ec 	.word	0x200725ec
   8dda4:	200725e8 	.word	0x200725e8
   8dda8:	000a3c01 	.word	0x000a3c01
   8ddac:	41f80000 	.word	0x41f80000
   8ddb0:	41600000 	.word	0x41600000
   8ddb4:	000a41a1 	.word	0x000a41a1
   8ddb8:	51eb851f 	.word	0x51eb851f
   8ddbc:	000a3d6d 	.word	0x000a3d6d
   8ddc0:	000a34ed 	.word	0x000a34ed
   8ddc4:	000a3595 	.word	0x000a3595
   8ddc8:	000a3231 	.word	0x000a3231
   8ddcc:	000a3b59 	.word	0x000a3b59
   8ddd0:	4b85      	ldr	r3, [pc, #532]	; (8dfe8 <Cl_SysStat_mean_status_update+0x548>)
   8ddd2:	4986      	ldr	r1, [pc, #536]	; (8dfec <Cl_SysStat_mean_status_update+0x54c>)
   8ddd4:	6c78      	ldr	r0, [r7, #68]	; 0x44
   8ddd6:	4798      	blx	r3
   8ddd8:	4603      	mov	r3, r0
   8ddda:	643b      	str	r3, [r7, #64]	; 0x40
   8dddc:	4b84      	ldr	r3, [pc, #528]	; (8dff0 <Cl_SysStat_mean_status_update+0x550>)
   8ddde:	6c38      	ldr	r0, [r7, #64]	; 0x40
   8dde0:	4798      	blx	r3
   8dde2:	4605      	mov	r5, r0
   8dde4:	460e      	mov	r6, r1
   8dde6:	4b83      	ldr	r3, [pc, #524]	; (8dff4 <Cl_SysStat_mean_status_update+0x554>)
   8dde8:	681a      	ldr	r2, [r3, #0]
   8ddea:	4b83      	ldr	r3, [pc, #524]	; (8dff8 <Cl_SysStat_mean_status_update+0x558>)
   8ddec:	497f      	ldr	r1, [pc, #508]	; (8dfec <Cl_SysStat_mean_status_update+0x54c>)
   8ddee:	4610      	mov	r0, r2
   8ddf0:	4798      	blx	r3
   8ddf2:	4603      	mov	r3, r0
   8ddf4:	461a      	mov	r2, r3
   8ddf6:	4b7e      	ldr	r3, [pc, #504]	; (8dff0 <Cl_SysStat_mean_status_update+0x550>)
   8ddf8:	4610      	mov	r0, r2
   8ddfa:	4798      	blx	r3
   8ddfc:	4c7f      	ldr	r4, [pc, #508]	; (8dffc <Cl_SysStat_mean_status_update+0x55c>)
   8ddfe:	f04f 0200 	mov.w	r2, #0
   8de02:	4b7f      	ldr	r3, [pc, #508]	; (8e000 <Cl_SysStat_mean_status_update+0x560>)
   8de04:	47a0      	blx	r4
   8de06:	4603      	mov	r3, r0
   8de08:	460c      	mov	r4, r1
   8de0a:	4618      	mov	r0, r3
   8de0c:	4621      	mov	r1, r4
   8de0e:	4c7d      	ldr	r4, [pc, #500]	; (8e004 <Cl_SysStat_mean_status_update+0x564>)
   8de10:	a373      	add	r3, pc, #460	; (adr r3, 8dfe0 <Cl_SysStat_mean_status_update+0x540>)
   8de12:	e9d3 2300 	ldrd	r2, r3, [r3]
   8de16:	47a0      	blx	r4
   8de18:	4603      	mov	r3, r0
   8de1a:	460c      	mov	r4, r1
   8de1c:	4618      	mov	r0, r3
   8de1e:	4621      	mov	r1, r4
   8de20:	4c79      	ldr	r4, [pc, #484]	; (8e008 <Cl_SysStat_mean_status_update+0x568>)
   8de22:	f04f 0200 	mov.w	r2, #0
   8de26:	4b79      	ldr	r3, [pc, #484]	; (8e00c <Cl_SysStat_mean_status_update+0x56c>)
   8de28:	47a0      	blx	r4
   8de2a:	4603      	mov	r3, r0
   8de2c:	460c      	mov	r4, r1
   8de2e:	461a      	mov	r2, r3
   8de30:	4623      	mov	r3, r4
   8de32:	4c77      	ldr	r4, [pc, #476]	; (8e010 <Cl_SysStat_mean_status_update+0x570>)
   8de34:	4628      	mov	r0, r5
   8de36:	4631      	mov	r1, r6
   8de38:	47a0      	blx	r4
   8de3a:	4603      	mov	r3, r0
   8de3c:	460c      	mov	r4, r1
   8de3e:	4619      	mov	r1, r3
   8de40:	4622      	mov	r2, r4
   8de42:	4b74      	ldr	r3, [pc, #464]	; (8e014 <Cl_SysStat_mean_status_update+0x574>)
   8de44:	4608      	mov	r0, r1
   8de46:	4611      	mov	r1, r2
   8de48:	4798      	blx	r3
   8de4a:	4603      	mov	r3, r0
   8de4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   8de4e:	4b72      	ldr	r3, [pc, #456]	; (8e018 <Cl_SysStat_mean_status_update+0x578>)
   8de50:	681a      	ldr	r2, [r3, #0]
   8de52:	4b65      	ldr	r3, [pc, #404]	; (8dfe8 <Cl_SysStat_mean_status_update+0x548>)
   8de54:	4971      	ldr	r1, [pc, #452]	; (8e01c <Cl_SysStat_mean_status_update+0x57c>)
   8de56:	4610      	mov	r0, r2
   8de58:	4798      	blx	r3
   8de5a:	4603      	mov	r3, r0
   8de5c:	461a      	mov	r2, r3
   8de5e:	4b70      	ldr	r3, [pc, #448]	; (8e020 <Cl_SysStat_mean_status_update+0x580>)
   8de60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   8de62:	4610      	mov	r0, r2
   8de64:	4798      	blx	r3
   8de66:	4603      	mov	r3, r0
   8de68:	461a      	mov	r2, r3
   8de6a:	4b63      	ldr	r3, [pc, #396]	; (8dff8 <Cl_SysStat_mean_status_update+0x558>)
   8de6c:	496d      	ldr	r1, [pc, #436]	; (8e024 <Cl_SysStat_mean_status_update+0x584>)
   8de6e:	4610      	mov	r0, r2
   8de70:	4798      	blx	r3
   8de72:	4603      	mov	r3, r0
   8de74:	461a      	mov	r2, r3
   8de76:	4b68      	ldr	r3, [pc, #416]	; (8e018 <Cl_SysStat_mean_status_update+0x578>)
   8de78:	601a      	str	r2, [r3, #0]
   8de7a:	89fb      	ldrh	r3, [r7, #14]
   8de7c:	b21b      	sxth	r3, r3
   8de7e:	82fb      	strh	r3, [r7, #22]
   8de80:	f107 0330 	add.w	r3, r7, #48	; 0x30
   8de84:	4619      	mov	r1, r3
   8de86:	2022      	movs	r0, #34	; 0x22
   8de88:	4b67      	ldr	r3, [pc, #412]	; (8e028 <Cl_SysStat_mean_status_update+0x588>)
   8de8a:	4798      	blx	r3
   8de8c:	4b62      	ldr	r3, [pc, #392]	; (8e018 <Cl_SysStat_mean_status_update+0x578>)
   8de8e:	681a      	ldr	r2, [r3, #0]
   8de90:	4b66      	ldr	r3, [pc, #408]	; (8e02c <Cl_SysStat_mean_status_update+0x58c>)
   8de92:	f04f 0100 	mov.w	r1, #0
   8de96:	4610      	mov	r0, r2
   8de98:	4798      	blx	r3
   8de9a:	4603      	mov	r3, r0
   8de9c:	2b00      	cmp	r3, #0
   8de9e:	d008      	beq.n	8deb2 <Cl_SysStat_mean_status_update+0x412>
   8dea0:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
   8dea4:	4b62      	ldr	r3, [pc, #392]	; (8e030 <Cl_SysStat_mean_status_update+0x590>)
   8dea6:	4610      	mov	r0, r2
   8dea8:	4798      	blx	r3
   8deaa:	4602      	mov	r2, r0
   8deac:	4b61      	ldr	r3, [pc, #388]	; (8e034 <Cl_SysStat_mean_status_update+0x594>)
   8deae:	601a      	str	r2, [r3, #0]
   8deb0:	e01b      	b.n	8deea <Cl_SysStat_mean_status_update+0x44a>
   8deb2:	4b60      	ldr	r3, [pc, #384]	; (8e034 <Cl_SysStat_mean_status_update+0x594>)
   8deb4:	681a      	ldr	r2, [r3, #0]
   8deb6:	4b4c      	ldr	r3, [pc, #304]	; (8dfe8 <Cl_SysStat_mean_status_update+0x548>)
   8deb8:	4958      	ldr	r1, [pc, #352]	; (8e01c <Cl_SysStat_mean_status_update+0x57c>)
   8deba:	4610      	mov	r0, r2
   8debc:	4798      	blx	r3
   8debe:	4603      	mov	r3, r0
   8dec0:	461c      	mov	r4, r3
   8dec2:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
   8dec6:	4b5a      	ldr	r3, [pc, #360]	; (8e030 <Cl_SysStat_mean_status_update+0x590>)
   8dec8:	4610      	mov	r0, r2
   8deca:	4798      	blx	r3
   8decc:	4602      	mov	r2, r0
   8dece:	4b54      	ldr	r3, [pc, #336]	; (8e020 <Cl_SysStat_mean_status_update+0x580>)
   8ded0:	4611      	mov	r1, r2
   8ded2:	4620      	mov	r0, r4
   8ded4:	4798      	blx	r3
   8ded6:	4603      	mov	r3, r0
   8ded8:	461a      	mov	r2, r3
   8deda:	4b47      	ldr	r3, [pc, #284]	; (8dff8 <Cl_SysStat_mean_status_update+0x558>)
   8dedc:	4951      	ldr	r1, [pc, #324]	; (8e024 <Cl_SysStat_mean_status_update+0x584>)
   8dede:	4610      	mov	r0, r2
   8dee0:	4798      	blx	r3
   8dee2:	4603      	mov	r3, r0
   8dee4:	461a      	mov	r2, r3
   8dee6:	4b53      	ldr	r3, [pc, #332]	; (8e034 <Cl_SysStat_mean_status_update+0x594>)
   8dee8:	601a      	str	r2, [r3, #0]
   8deea:	2300      	movs	r3, #0
   8deec:	60bb      	str	r3, [r7, #8]
   8deee:	4b51      	ldr	r3, [pc, #324]	; (8e034 <Cl_SysStat_mean_status_update+0x594>)
   8def0:	681a      	ldr	r2, [r3, #0]
   8def2:	4b51      	ldr	r3, [pc, #324]	; (8e038 <Cl_SysStat_mean_status_update+0x598>)
   8def4:	4610      	mov	r0, r2
   8def6:	4798      	blx	r3
   8def8:	4603      	mov	r3, r0
   8defa:	b29b      	uxth	r3, r3
   8defc:	813b      	strh	r3, [r7, #8]
   8defe:	2304      	movs	r3, #4
   8df00:	72bb      	strb	r3, [r7, #10]
   8df02:	f107 0308 	add.w	r3, r7, #8
   8df06:	2204      	movs	r2, #4
   8df08:	4619      	mov	r1, r3
   8df0a:	2037      	movs	r0, #55	; 0x37
   8df0c:	4b4b      	ldr	r3, [pc, #300]	; (8e03c <Cl_SysStat_mean_status_update+0x59c>)
   8df0e:	4798      	blx	r3
   8df10:	f107 0330 	add.w	r3, r7, #48	; 0x30
   8df14:	4619      	mov	r1, r3
   8df16:	2023      	movs	r0, #35	; 0x23
   8df18:	4b43      	ldr	r3, [pc, #268]	; (8e028 <Cl_SysStat_mean_status_update+0x588>)
   8df1a:	4798      	blx	r3
   8df1c:	4b3e      	ldr	r3, [pc, #248]	; (8e018 <Cl_SysStat_mean_status_update+0x578>)
   8df1e:	681a      	ldr	r2, [r3, #0]
   8df20:	4b42      	ldr	r3, [pc, #264]	; (8e02c <Cl_SysStat_mean_status_update+0x58c>)
   8df22:	f04f 0100 	mov.w	r1, #0
   8df26:	4610      	mov	r0, r2
   8df28:	4798      	blx	r3
   8df2a:	4603      	mov	r3, r0
   8df2c:	2b00      	cmp	r3, #0
   8df2e:	d008      	beq.n	8df42 <Cl_SysStat_mean_status_update+0x4a2>
   8df30:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
   8df34:	4b3e      	ldr	r3, [pc, #248]	; (8e030 <Cl_SysStat_mean_status_update+0x590>)
   8df36:	4610      	mov	r0, r2
   8df38:	4798      	blx	r3
   8df3a:	4602      	mov	r2, r0
   8df3c:	4b40      	ldr	r3, [pc, #256]	; (8e040 <Cl_SysStat_mean_status_update+0x5a0>)
   8df3e:	601a      	str	r2, [r3, #0]
   8df40:	e01b      	b.n	8df7a <Cl_SysStat_mean_status_update+0x4da>
   8df42:	4b3f      	ldr	r3, [pc, #252]	; (8e040 <Cl_SysStat_mean_status_update+0x5a0>)
   8df44:	681a      	ldr	r2, [r3, #0]
   8df46:	4b28      	ldr	r3, [pc, #160]	; (8dfe8 <Cl_SysStat_mean_status_update+0x548>)
   8df48:	4934      	ldr	r1, [pc, #208]	; (8e01c <Cl_SysStat_mean_status_update+0x57c>)
   8df4a:	4610      	mov	r0, r2
   8df4c:	4798      	blx	r3
   8df4e:	4603      	mov	r3, r0
   8df50:	461c      	mov	r4, r3
   8df52:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
   8df56:	4b36      	ldr	r3, [pc, #216]	; (8e030 <Cl_SysStat_mean_status_update+0x590>)
   8df58:	4610      	mov	r0, r2
   8df5a:	4798      	blx	r3
   8df5c:	4602      	mov	r2, r0
   8df5e:	4b30      	ldr	r3, [pc, #192]	; (8e020 <Cl_SysStat_mean_status_update+0x580>)
   8df60:	4611      	mov	r1, r2
   8df62:	4620      	mov	r0, r4
   8df64:	4798      	blx	r3
   8df66:	4603      	mov	r3, r0
   8df68:	461a      	mov	r2, r3
   8df6a:	4b23      	ldr	r3, [pc, #140]	; (8dff8 <Cl_SysStat_mean_status_update+0x558>)
   8df6c:	492d      	ldr	r1, [pc, #180]	; (8e024 <Cl_SysStat_mean_status_update+0x584>)
   8df6e:	4610      	mov	r0, r2
   8df70:	4798      	blx	r3
   8df72:	4603      	mov	r3, r0
   8df74:	461a      	mov	r2, r3
   8df76:	4b32      	ldr	r3, [pc, #200]	; (8e040 <Cl_SysStat_mean_status_update+0x5a0>)
   8df78:	601a      	str	r2, [r3, #0]
   8df7a:	2300      	movs	r3, #0
   8df7c:	607b      	str	r3, [r7, #4]
   8df7e:	4b30      	ldr	r3, [pc, #192]	; (8e040 <Cl_SysStat_mean_status_update+0x5a0>)
   8df80:	681a      	ldr	r2, [r3, #0]
   8df82:	4b2d      	ldr	r3, [pc, #180]	; (8e038 <Cl_SysStat_mean_status_update+0x598>)
   8df84:	4610      	mov	r0, r2
   8df86:	4798      	blx	r3
   8df88:	4603      	mov	r3, r0
   8df8a:	b29b      	uxth	r3, r3
   8df8c:	80bb      	strh	r3, [r7, #4]
   8df8e:	2306      	movs	r3, #6
   8df90:	71bb      	strb	r3, [r7, #6]
   8df92:	1d3b      	adds	r3, r7, #4
   8df94:	2204      	movs	r2, #4
   8df96:	4619      	mov	r1, r3
   8df98:	2037      	movs	r0, #55	; 0x37
   8df9a:	4b28      	ldr	r3, [pc, #160]	; (8e03c <Cl_SysStat_mean_status_update+0x59c>)
   8df9c:	4798      	blx	r3
   8df9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
   8dfa2:	4619      	mov	r1, r3
   8dfa4:	2019      	movs	r0, #25
   8dfa6:	4b20      	ldr	r3, [pc, #128]	; (8e028 <Cl_SysStat_mean_status_update+0x588>)
   8dfa8:	4798      	blx	r3
   8dfaa:	2300      	movs	r3, #0
   8dfac:	62fb      	str	r3, [r7, #44]	; 0x2c
   8dfae:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
   8dfb2:	b29b      	uxth	r3, r3
   8dfb4:	85bb      	strh	r3, [r7, #44]	; 0x2c
   8dfb6:	2303      	movs	r3, #3
   8dfb8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
   8dfbc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
   8dfc0:	833b      	strh	r3, [r7, #24]
   8dfc2:	4b20      	ldr	r3, [pc, #128]	; (8e044 <Cl_SysStat_mean_status_update+0x5a4>)
   8dfc4:	f9b3 2000 	ldrsh.w	r2, [r3]
   8dfc8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
   8dfcc:	429a      	cmp	r2, r3
   8dfce:	d13d      	bne.n	8e04c <Cl_SysStat_mean_status_update+0x5ac>
   8dfd0:	4b1d      	ldr	r3, [pc, #116]	; (8e048 <Cl_SysStat_mean_status_update+0x5a8>)
   8dfd2:	781b      	ldrb	r3, [r3, #0]
   8dfd4:	3301      	adds	r3, #1
   8dfd6:	b2da      	uxtb	r2, r3
   8dfd8:	4b1b      	ldr	r3, [pc, #108]	; (8e048 <Cl_SysStat_mean_status_update+0x5a8>)
   8dfda:	701a      	strb	r2, [r3, #0]
   8dfdc:	e039      	b.n	8e052 <Cl_SysStat_mean_status_update+0x5b2>
   8dfde:	bf00      	nop
   8dfe0:	24dd2f1b 	.word	0x24dd2f1b
   8dfe4:	3f958106 	.word	0x3f958106
   8dfe8:	000a3e15 	.word	0x000a3e15
   8dfec:	42c80000 	.word	0x42c80000
   8dff0:	000a34ed 	.word	0x000a34ed
   8dff4:	200725e8 	.word	0x200725e8
   8dff8:	000a3f7d 	.word	0x000a3f7d
   8dffc:	000a322d 	.word	0x000a322d
   8e000:	40390000 	.word	0x40390000
   8e004:	000a3595 	.word	0x000a3595
   8e008:	000a3231 	.word	0x000a3231
   8e00c:	3ff00000 	.word	0x3ff00000
   8e010:	000a37e9 	.word	0x000a37e9
   8e014:	000a3b59 	.word	0x000a3b59
   8e018:	200725f4 	.word	0x200725f4
   8e01c:	40a00000 	.word	0x40a00000
   8e020:	000a3c05 	.word	0x000a3c05
   8e024:	40c00000 	.word	0x40c00000
   8e028:	0008d6b1 	.word	0x0008d6b1
   8e02c:	000a413d 	.word	0x000a413d
   8e030:	000a3d6d 	.word	0x000a3d6d
   8e034:	200725f8 	.word	0x200725f8
   8e038:	000a41ed 	.word	0x000a41ed
   8e03c:	00099729 	.word	0x00099729
   8e040:	200725fc 	.word	0x200725fc
   8e044:	20072608 	.word	0x20072608
   8e048:	2007260a 	.word	0x2007260a
   8e04c:	4b8c      	ldr	r3, [pc, #560]	; (8e280 <Cl_SysStat_mean_status_update+0x7e0>)
   8e04e:	2200      	movs	r2, #0
   8e050:	701a      	strb	r2, [r3, #0]
   8e052:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
   8e056:	4b8b      	ldr	r3, [pc, #556]	; (8e284 <Cl_SysStat_mean_status_update+0x7e4>)
   8e058:	801a      	strh	r2, [r3, #0]
   8e05a:	f107 0334 	add.w	r3, r7, #52	; 0x34
   8e05e:	4619      	mov	r1, r3
   8e060:	200b      	movs	r0, #11
   8e062:	4b89      	ldr	r3, [pc, #548]	; (8e288 <Cl_SysStat_mean_status_update+0x7e8>)
   8e064:	4798      	blx	r3
   8e066:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
   8e06a:	4618      	mov	r0, r3
   8e06c:	4b87      	ldr	r3, [pc, #540]	; (8e28c <Cl_SysStat_mean_status_update+0x7ec>)
   8e06e:	4798      	blx	r3
   8e070:	4b87      	ldr	r3, [pc, #540]	; (8e290 <Cl_SysStat_mean_status_update+0x7f0>)
   8e072:	681a      	ldr	r2, [r3, #0]
   8e074:	4b87      	ldr	r3, [pc, #540]	; (8e294 <Cl_SysStat_mean_status_update+0x7f4>)
   8e076:	4611      	mov	r1, r2
   8e078:	4610      	mov	r0, r2
   8e07a:	4798      	blx	r3
   8e07c:	4603      	mov	r3, r0
   8e07e:	4618      	mov	r0, r3
   8e080:	4b85      	ldr	r3, [pc, #532]	; (8e298 <Cl_SysStat_mean_status_update+0x7f8>)
   8e082:	681a      	ldr	r2, [r3, #0]
   8e084:	4b83      	ldr	r3, [pc, #524]	; (8e294 <Cl_SysStat_mean_status_update+0x7f4>)
   8e086:	4611      	mov	r1, r2
   8e088:	4798      	blx	r3
   8e08a:	4603      	mov	r3, r0
   8e08c:	461a      	mov	r2, r3
   8e08e:	4b83      	ldr	r3, [pc, #524]	; (8e29c <Cl_SysStat_mean_status_update+0x7fc>)
   8e090:	4983      	ldr	r1, [pc, #524]	; (8e2a0 <Cl_SysStat_mean_status_update+0x800>)
   8e092:	4610      	mov	r0, r2
   8e094:	4798      	blx	r3
   8e096:	4603      	mov	r3, r0
   8e098:	461a      	mov	r2, r3
   8e09a:	4b7d      	ldr	r3, [pc, #500]	; (8e290 <Cl_SysStat_mean_status_update+0x7f0>)
   8e09c:	601a      	str	r2, [r3, #0]
   8e09e:	2300      	movs	r3, #0
   8e0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   8e0a2:	4b7b      	ldr	r3, [pc, #492]	; (8e290 <Cl_SysStat_mean_status_update+0x7f0>)
   8e0a4:	681a      	ldr	r2, [r3, #0]
   8e0a6:	4b7b      	ldr	r3, [pc, #492]	; (8e294 <Cl_SysStat_mean_status_update+0x7f4>)
   8e0a8:	497e      	ldr	r1, [pc, #504]	; (8e2a4 <Cl_SysStat_mean_status_update+0x804>)
   8e0aa:	4610      	mov	r0, r2
   8e0ac:	4798      	blx	r3
   8e0ae:	4603      	mov	r3, r0
   8e0b0:	461a      	mov	r2, r3
   8e0b2:	4b7d      	ldr	r3, [pc, #500]	; (8e2a8 <Cl_SysStat_mean_status_update+0x808>)
   8e0b4:	4610      	mov	r0, r2
   8e0b6:	4798      	blx	r3
   8e0b8:	4603      	mov	r3, r0
   8e0ba:	b29b      	uxth	r3, r3
   8e0bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
   8e0be:	230e      	movs	r3, #14
   8e0c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
   8e0c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   8e0c6:	b21b      	sxth	r3, r3
   8e0c8:	837b      	strh	r3, [r7, #26]
   8e0ca:	f107 0332 	add.w	r3, r7, #50	; 0x32
   8e0ce:	4619      	mov	r1, r3
   8e0d0:	200c      	movs	r0, #12
   8e0d2:	4b6d      	ldr	r3, [pc, #436]	; (8e288 <Cl_SysStat_mean_status_update+0x7e8>)
   8e0d4:	4798      	blx	r3
   8e0d6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
   8e0da:	4618      	mov	r0, r3
   8e0dc:	4b73      	ldr	r3, [pc, #460]	; (8e2ac <Cl_SysStat_mean_status_update+0x80c>)
   8e0de:	4798      	blx	r3
   8e0e0:	4b73      	ldr	r3, [pc, #460]	; (8e2b0 <Cl_SysStat_mean_status_update+0x810>)
   8e0e2:	681a      	ldr	r2, [r3, #0]
   8e0e4:	4b6b      	ldr	r3, [pc, #428]	; (8e294 <Cl_SysStat_mean_status_update+0x7f4>)
   8e0e6:	4611      	mov	r1, r2
   8e0e8:	4610      	mov	r0, r2
   8e0ea:	4798      	blx	r3
   8e0ec:	4603      	mov	r3, r0
   8e0ee:	4618      	mov	r0, r3
   8e0f0:	4b70      	ldr	r3, [pc, #448]	; (8e2b4 <Cl_SysStat_mean_status_update+0x814>)
   8e0f2:	681a      	ldr	r2, [r3, #0]
   8e0f4:	4b67      	ldr	r3, [pc, #412]	; (8e294 <Cl_SysStat_mean_status_update+0x7f4>)
   8e0f6:	4611      	mov	r1, r2
   8e0f8:	4798      	blx	r3
   8e0fa:	4603      	mov	r3, r0
   8e0fc:	461a      	mov	r2, r3
   8e0fe:	4b67      	ldr	r3, [pc, #412]	; (8e29c <Cl_SysStat_mean_status_update+0x7fc>)
   8e100:	4967      	ldr	r1, [pc, #412]	; (8e2a0 <Cl_SysStat_mean_status_update+0x800>)
   8e102:	4610      	mov	r0, r2
   8e104:	4798      	blx	r3
   8e106:	4603      	mov	r3, r0
   8e108:	461a      	mov	r2, r3
   8e10a:	4b69      	ldr	r3, [pc, #420]	; (8e2b0 <Cl_SysStat_mean_status_update+0x810>)
   8e10c:	601a      	str	r2, [r3, #0]
   8e10e:	2300      	movs	r3, #0
   8e110:	62fb      	str	r3, [r7, #44]	; 0x2c
   8e112:	4b67      	ldr	r3, [pc, #412]	; (8e2b0 <Cl_SysStat_mean_status_update+0x810>)
   8e114:	681a      	ldr	r2, [r3, #0]
   8e116:	4b5f      	ldr	r3, [pc, #380]	; (8e294 <Cl_SysStat_mean_status_update+0x7f4>)
   8e118:	4962      	ldr	r1, [pc, #392]	; (8e2a4 <Cl_SysStat_mean_status_update+0x804>)
   8e11a:	4610      	mov	r0, r2
   8e11c:	4798      	blx	r3
   8e11e:	4603      	mov	r3, r0
   8e120:	461a      	mov	r2, r3
   8e122:	4b61      	ldr	r3, [pc, #388]	; (8e2a8 <Cl_SysStat_mean_status_update+0x808>)
   8e124:	4610      	mov	r0, r2
   8e126:	4798      	blx	r3
   8e128:	4603      	mov	r3, r0
   8e12a:	b29b      	uxth	r3, r3
   8e12c:	85bb      	strh	r3, [r7, #44]	; 0x2c
   8e12e:	230f      	movs	r3, #15
   8e130:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
   8e134:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   8e136:	b21b      	sxth	r3, r3
   8e138:	83bb      	strh	r3, [r7, #28]
   8e13a:	f107 0336 	add.w	r3, r7, #54	; 0x36
   8e13e:	4619      	mov	r1, r3
   8e140:	2010      	movs	r0, #16
   8e142:	4b51      	ldr	r3, [pc, #324]	; (8e288 <Cl_SysStat_mean_status_update+0x7e8>)
   8e144:	4798      	blx	r3
   8e146:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
   8e14a:	4618      	mov	r0, r3
   8e14c:	4b5a      	ldr	r3, [pc, #360]	; (8e2b8 <Cl_SysStat_mean_status_update+0x818>)
   8e14e:	4798      	blx	r3
   8e150:	4b5a      	ldr	r3, [pc, #360]	; (8e2bc <Cl_SysStat_mean_status_update+0x81c>)
   8e152:	681a      	ldr	r2, [r3, #0]
   8e154:	4b4f      	ldr	r3, [pc, #316]	; (8e294 <Cl_SysStat_mean_status_update+0x7f4>)
   8e156:	4611      	mov	r1, r2
   8e158:	4610      	mov	r0, r2
   8e15a:	4798      	blx	r3
   8e15c:	4603      	mov	r3, r0
   8e15e:	4618      	mov	r0, r3
   8e160:	4b57      	ldr	r3, [pc, #348]	; (8e2c0 <Cl_SysStat_mean_status_update+0x820>)
   8e162:	681a      	ldr	r2, [r3, #0]
   8e164:	4b4b      	ldr	r3, [pc, #300]	; (8e294 <Cl_SysStat_mean_status_update+0x7f4>)
   8e166:	4611      	mov	r1, r2
   8e168:	4798      	blx	r3
   8e16a:	4603      	mov	r3, r0
   8e16c:	461a      	mov	r2, r3
   8e16e:	4b4b      	ldr	r3, [pc, #300]	; (8e29c <Cl_SysStat_mean_status_update+0x7fc>)
   8e170:	494b      	ldr	r1, [pc, #300]	; (8e2a0 <Cl_SysStat_mean_status_update+0x800>)
   8e172:	4610      	mov	r0, r2
   8e174:	4798      	blx	r3
   8e176:	4603      	mov	r3, r0
   8e178:	461a      	mov	r2, r3
   8e17a:	4b50      	ldr	r3, [pc, #320]	; (8e2bc <Cl_SysStat_mean_status_update+0x81c>)
   8e17c:	601a      	str	r2, [r3, #0]
   8e17e:	4b51      	ldr	r3, [pc, #324]	; (8e2c4 <Cl_SysStat_mean_status_update+0x824>)
   8e180:	681a      	ldr	r2, [r3, #0]
   8e182:	4b44      	ldr	r3, [pc, #272]	; (8e294 <Cl_SysStat_mean_status_update+0x7f4>)
   8e184:	4611      	mov	r1, r2
   8e186:	4610      	mov	r0, r2
   8e188:	4798      	blx	r3
   8e18a:	4603      	mov	r3, r0
   8e18c:	461c      	mov	r4, r3
   8e18e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
   8e192:	4b4d      	ldr	r3, [pc, #308]	; (8e2c8 <Cl_SysStat_mean_status_update+0x828>)
   8e194:	4610      	mov	r0, r2
   8e196:	4798      	blx	r3
   8e198:	4602      	mov	r2, r0
   8e19a:	4b3e      	ldr	r3, [pc, #248]	; (8e294 <Cl_SysStat_mean_status_update+0x7f4>)
   8e19c:	4611      	mov	r1, r2
   8e19e:	4620      	mov	r0, r4
   8e1a0:	4798      	blx	r3
   8e1a2:	4603      	mov	r3, r0
   8e1a4:	461a      	mov	r2, r3
   8e1a6:	4b3d      	ldr	r3, [pc, #244]	; (8e29c <Cl_SysStat_mean_status_update+0x7fc>)
   8e1a8:	493d      	ldr	r1, [pc, #244]	; (8e2a0 <Cl_SysStat_mean_status_update+0x800>)
   8e1aa:	4610      	mov	r0, r2
   8e1ac:	4798      	blx	r3
   8e1ae:	4603      	mov	r3, r0
   8e1b0:	461a      	mov	r2, r3
   8e1b2:	4b44      	ldr	r3, [pc, #272]	; (8e2c4 <Cl_SysStat_mean_status_update+0x824>)
   8e1b4:	601a      	str	r2, [r3, #0]
   8e1b6:	4b43      	ldr	r3, [pc, #268]	; (8e2c4 <Cl_SysStat_mean_status_update+0x824>)
   8e1b8:	681a      	ldr	r2, [r3, #0]
   8e1ba:	4b40      	ldr	r3, [pc, #256]	; (8e2bc <Cl_SysStat_mean_status_update+0x81c>)
   8e1bc:	6819      	ldr	r1, [r3, #0]
   8e1be:	4b43      	ldr	r3, [pc, #268]	; (8e2cc <Cl_SysStat_mean_status_update+0x82c>)
   8e1c0:	4610      	mov	r0, r2
   8e1c2:	4798      	blx	r3
   8e1c4:	4603      	mov	r3, r0
   8e1c6:	2b00      	cmp	r3, #0
   8e1c8:	d009      	beq.n	8e1de <Cl_SysStat_mean_status_update+0x73e>
   8e1ca:	4b3c      	ldr	r3, [pc, #240]	; (8e2bc <Cl_SysStat_mean_status_update+0x81c>)
   8e1cc:	681a      	ldr	r2, [r3, #0]
   8e1ce:	4b40      	ldr	r3, [pc, #256]	; (8e2d0 <Cl_SysStat_mean_status_update+0x830>)
   8e1d0:	4940      	ldr	r1, [pc, #256]	; (8e2d4 <Cl_SysStat_mean_status_update+0x834>)
   8e1d2:	4610      	mov	r0, r2
   8e1d4:	4798      	blx	r3
   8e1d6:	4b39      	ldr	r3, [pc, #228]	; (8e2bc <Cl_SysStat_mean_status_update+0x81c>)
   8e1d8:	681b      	ldr	r3, [r3, #0]
   8e1da:	4a3f      	ldr	r2, [pc, #252]	; (8e2d8 <Cl_SysStat_mean_status_update+0x838>)
   8e1dc:	6013      	str	r3, [r2, #0]
   8e1de:	4b37      	ldr	r3, [pc, #220]	; (8e2bc <Cl_SysStat_mean_status_update+0x81c>)
   8e1e0:	681a      	ldr	r2, [r3, #0]
   8e1e2:	4b3d      	ldr	r3, [pc, #244]	; (8e2d8 <Cl_SysStat_mean_status_update+0x838>)
   8e1e4:	6819      	ldr	r1, [r3, #0]
   8e1e6:	4b39      	ldr	r3, [pc, #228]	; (8e2cc <Cl_SysStat_mean_status_update+0x82c>)
   8e1e8:	4610      	mov	r0, r2
   8e1ea:	4798      	blx	r3
   8e1ec:	4603      	mov	r3, r0
   8e1ee:	2b00      	cmp	r3, #0
   8e1f0:	d003      	beq.n	8e1fa <Cl_SysStat_mean_status_update+0x75a>
   8e1f2:	4b32      	ldr	r3, [pc, #200]	; (8e2bc <Cl_SysStat_mean_status_update+0x81c>)
   8e1f4:	681b      	ldr	r3, [r3, #0]
   8e1f6:	4a38      	ldr	r2, [pc, #224]	; (8e2d8 <Cl_SysStat_mean_status_update+0x838>)
   8e1f8:	6013      	str	r3, [r2, #0]
   8e1fa:	2300      	movs	r3, #0
   8e1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   8e1fe:	4b2f      	ldr	r3, [pc, #188]	; (8e2bc <Cl_SysStat_mean_status_update+0x81c>)
   8e200:	681a      	ldr	r2, [r3, #0]
   8e202:	4b24      	ldr	r3, [pc, #144]	; (8e294 <Cl_SysStat_mean_status_update+0x7f4>)
   8e204:	4927      	ldr	r1, [pc, #156]	; (8e2a4 <Cl_SysStat_mean_status_update+0x804>)
   8e206:	4610      	mov	r0, r2
   8e208:	4798      	blx	r3
   8e20a:	4603      	mov	r3, r0
   8e20c:	461a      	mov	r2, r3
   8e20e:	4b26      	ldr	r3, [pc, #152]	; (8e2a8 <Cl_SysStat_mean_status_update+0x808>)
   8e210:	4610      	mov	r0, r2
   8e212:	4798      	blx	r3
   8e214:	4603      	mov	r3, r0
   8e216:	b29b      	uxth	r3, r3
   8e218:	85bb      	strh	r3, [r7, #44]	; 0x2c
   8e21a:	2314      	movs	r3, #20
   8e21c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
   8e220:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   8e222:	b21b      	sxth	r3, r3
   8e224:	83fb      	strh	r3, [r7, #30]
   8e226:	f107 0338 	add.w	r3, r7, #56	; 0x38
   8e22a:	4619      	mov	r1, r3
   8e22c:	200f      	movs	r0, #15
   8e22e:	4b16      	ldr	r3, [pc, #88]	; (8e288 <Cl_SysStat_mean_status_update+0x7e8>)
   8e230:	4798      	blx	r3
   8e232:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
   8e236:	4618      	mov	r0, r3
   8e238:	4b28      	ldr	r3, [pc, #160]	; (8e2dc <Cl_SysStat_mean_status_update+0x83c>)
   8e23a:	4798      	blx	r3
   8e23c:	4b28      	ldr	r3, [pc, #160]	; (8e2e0 <Cl_SysStat_mean_status_update+0x840>)
   8e23e:	681a      	ldr	r2, [r3, #0]
   8e240:	4b14      	ldr	r3, [pc, #80]	; (8e294 <Cl_SysStat_mean_status_update+0x7f4>)
   8e242:	4611      	mov	r1, r2
   8e244:	4610      	mov	r0, r2
   8e246:	4798      	blx	r3
   8e248:	4603      	mov	r3, r0
   8e24a:	4618      	mov	r0, r3
   8e24c:	4b25      	ldr	r3, [pc, #148]	; (8e2e4 <Cl_SysStat_mean_status_update+0x844>)
   8e24e:	681a      	ldr	r2, [r3, #0]
   8e250:	4b10      	ldr	r3, [pc, #64]	; (8e294 <Cl_SysStat_mean_status_update+0x7f4>)
   8e252:	4611      	mov	r1, r2
   8e254:	4798      	blx	r3
   8e256:	4603      	mov	r3, r0
   8e258:	461a      	mov	r2, r3
   8e25a:	4b10      	ldr	r3, [pc, #64]	; (8e29c <Cl_SysStat_mean_status_update+0x7fc>)
   8e25c:	4910      	ldr	r1, [pc, #64]	; (8e2a0 <Cl_SysStat_mean_status_update+0x800>)
   8e25e:	4610      	mov	r0, r2
   8e260:	4798      	blx	r3
   8e262:	4603      	mov	r3, r0
   8e264:	461a      	mov	r2, r3
   8e266:	4b1e      	ldr	r3, [pc, #120]	; (8e2e0 <Cl_SysStat_mean_status_update+0x840>)
   8e268:	601a      	str	r2, [r3, #0]
   8e26a:	2300      	movs	r3, #0
   8e26c:	62fb      	str	r3, [r7, #44]	; 0x2c
   8e26e:	4b1c      	ldr	r3, [pc, #112]	; (8e2e0 <Cl_SysStat_mean_status_update+0x840>)
   8e270:	681a      	ldr	r2, [r3, #0]
   8e272:	4b08      	ldr	r3, [pc, #32]	; (8e294 <Cl_SysStat_mean_status_update+0x7f4>)
   8e274:	490b      	ldr	r1, [pc, #44]	; (8e2a4 <Cl_SysStat_mean_status_update+0x804>)
   8e276:	4610      	mov	r0, r2
   8e278:	4798      	blx	r3
   8e27a:	4603      	mov	r3, r0
   8e27c:	e034      	b.n	8e2e8 <Cl_SysStat_mean_status_update+0x848>
   8e27e:	bf00      	nop
   8e280:	2007260a 	.word	0x2007260a
   8e284:	20072608 	.word	0x20072608
   8e288:	0008d6b1 	.word	0x0008d6b1
   8e28c:	0008406d 	.word	0x0008406d
   8e290:	200725dc 	.word	0x200725dc
   8e294:	000a3c05 	.word	0x000a3c05
   8e298:	20072d74 	.word	0x20072d74
   8e29c:	000a3f7d 	.word	0x000a3f7d
   8e2a0:	40400000 	.word	0x40400000
   8e2a4:	447a0000 	.word	0x447a0000
   8e2a8:	000a41ed 	.word	0x000a41ed
   8e2ac:	000841ed 	.word	0x000841ed
   8e2b0:	200725e0 	.word	0x200725e0
   8e2b4:	2007165c 	.word	0x2007165c
   8e2b8:	00084591 	.word	0x00084591
   8e2bc:	200725d4 	.word	0x200725d4
   8e2c0:	20071668 	.word	0x20071668
   8e2c4:	200725d8 	.word	0x200725d8
   8e2c8:	000a3d6d 	.word	0x000a3d6d
   8e2cc:	000a4151 	.word	0x000a4151
   8e2d0:	000a3c01 	.word	0x000a3c01
   8e2d4:	40a00000 	.word	0x40a00000
   8e2d8:	200725e4 	.word	0x200725e4
   8e2dc:	00084481 	.word	0x00084481
   8e2e0:	200725d0 	.word	0x200725d0
   8e2e4:	20071664 	.word	0x20071664
   8e2e8:	461a      	mov	r2, r3
   8e2ea:	4b37      	ldr	r3, [pc, #220]	; (8e3c8 <Cl_SysStat_mean_status_update+0x928>)
   8e2ec:	4610      	mov	r0, r2
   8e2ee:	4798      	blx	r3
   8e2f0:	4603      	mov	r3, r0
   8e2f2:	b29b      	uxth	r3, r3
   8e2f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
   8e2f6:	2313      	movs	r3, #19
   8e2f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
   8e2fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   8e2fe:	b21b      	sxth	r3, r3
   8e300:	843b      	strh	r3, [r7, #32]
   8e302:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   8e306:	4619      	mov	r1, r3
   8e308:	200e      	movs	r0, #14
   8e30a:	4b30      	ldr	r3, [pc, #192]	; (8e3cc <Cl_SysStat_mean_status_update+0x92c>)
   8e30c:	4798      	blx	r3
   8e30e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   8e312:	4618      	mov	r0, r3
   8e314:	4b2e      	ldr	r3, [pc, #184]	; (8e3d0 <Cl_SysStat_mean_status_update+0x930>)
   8e316:	4798      	blx	r3
   8e318:	4b2e      	ldr	r3, [pc, #184]	; (8e3d4 <Cl_SysStat_mean_status_update+0x934>)
   8e31a:	681a      	ldr	r2, [r3, #0]
   8e31c:	4b2e      	ldr	r3, [pc, #184]	; (8e3d8 <Cl_SysStat_mean_status_update+0x938>)
   8e31e:	4611      	mov	r1, r2
   8e320:	4610      	mov	r0, r2
   8e322:	4798      	blx	r3
   8e324:	4603      	mov	r3, r0
   8e326:	4618      	mov	r0, r3
   8e328:	4b2c      	ldr	r3, [pc, #176]	; (8e3dc <Cl_SysStat_mean_status_update+0x93c>)
   8e32a:	681a      	ldr	r2, [r3, #0]
   8e32c:	4b2a      	ldr	r3, [pc, #168]	; (8e3d8 <Cl_SysStat_mean_status_update+0x938>)
   8e32e:	4611      	mov	r1, r2
   8e330:	4798      	blx	r3
   8e332:	4603      	mov	r3, r0
   8e334:	461a      	mov	r2, r3
   8e336:	4b2a      	ldr	r3, [pc, #168]	; (8e3e0 <Cl_SysStat_mean_status_update+0x940>)
   8e338:	492a      	ldr	r1, [pc, #168]	; (8e3e4 <Cl_SysStat_mean_status_update+0x944>)
   8e33a:	4610      	mov	r0, r2
   8e33c:	4798      	blx	r3
   8e33e:	4603      	mov	r3, r0
   8e340:	461a      	mov	r2, r3
   8e342:	4b24      	ldr	r3, [pc, #144]	; (8e3d4 <Cl_SysStat_mean_status_update+0x934>)
   8e344:	601a      	str	r2, [r3, #0]
   8e346:	2300      	movs	r3, #0
   8e348:	62fb      	str	r3, [r7, #44]	; 0x2c
   8e34a:	4b22      	ldr	r3, [pc, #136]	; (8e3d4 <Cl_SysStat_mean_status_update+0x934>)
   8e34c:	681a      	ldr	r2, [r3, #0]
   8e34e:	4b22      	ldr	r3, [pc, #136]	; (8e3d8 <Cl_SysStat_mean_status_update+0x938>)
   8e350:	4925      	ldr	r1, [pc, #148]	; (8e3e8 <Cl_SysStat_mean_status_update+0x948>)
   8e352:	4610      	mov	r0, r2
   8e354:	4798      	blx	r3
   8e356:	4603      	mov	r3, r0
   8e358:	461a      	mov	r2, r3
   8e35a:	4b1b      	ldr	r3, [pc, #108]	; (8e3c8 <Cl_SysStat_mean_status_update+0x928>)
   8e35c:	4610      	mov	r0, r2
   8e35e:	4798      	blx	r3
   8e360:	4603      	mov	r3, r0
   8e362:	b29b      	uxth	r3, r3
   8e364:	85bb      	strh	r3, [r7, #44]	; 0x2c
   8e366:	2312      	movs	r3, #18
   8e368:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
   8e36c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   8e36e:	b21b      	sxth	r3, r3
   8e370:	847b      	strh	r3, [r7, #34]	; 0x22
   8e372:	4b18      	ldr	r3, [pc, #96]	; (8e3d4 <Cl_SysStat_mean_status_update+0x934>)
   8e374:	681a      	ldr	r2, [r3, #0]
   8e376:	4b1d      	ldr	r3, [pc, #116]	; (8e3ec <Cl_SysStat_mean_status_update+0x94c>)
   8e378:	491d      	ldr	r1, [pc, #116]	; (8e3f0 <Cl_SysStat_mean_status_update+0x950>)
   8e37a:	4610      	mov	r0, r2
   8e37c:	4798      	blx	r3
   8e37e:	4603      	mov	r3, r0
   8e380:	2b00      	cmp	r3, #0
   8e382:	d006      	beq.n	8e392 <Cl_SysStat_mean_status_update+0x8f2>
   8e384:	4b1b      	ldr	r3, [pc, #108]	; (8e3f4 <Cl_SysStat_mean_status_update+0x954>)
   8e386:	881b      	ldrh	r3, [r3, #0]
   8e388:	3301      	adds	r3, #1
   8e38a:	b29a      	uxth	r2, r3
   8e38c:	4b19      	ldr	r3, [pc, #100]	; (8e3f4 <Cl_SysStat_mean_status_update+0x954>)
   8e38e:	801a      	strh	r2, [r3, #0]
   8e390:	e00c      	b.n	8e3ac <Cl_SysStat_mean_status_update+0x90c>
   8e392:	4b18      	ldr	r3, [pc, #96]	; (8e3f4 <Cl_SysStat_mean_status_update+0x954>)
   8e394:	881b      	ldrh	r3, [r3, #0]
   8e396:	3301      	adds	r3, #1
   8e398:	b29a      	uxth	r2, r3
   8e39a:	4b16      	ldr	r3, [pc, #88]	; (8e3f4 <Cl_SysStat_mean_status_update+0x954>)
   8e39c:	801a      	strh	r2, [r3, #0]
   8e39e:	4b15      	ldr	r3, [pc, #84]	; (8e3f4 <Cl_SysStat_mean_status_update+0x954>)
   8e3a0:	881b      	ldrh	r3, [r3, #0]
   8e3a2:	2b00      	cmp	r3, #0
   8e3a4:	d002      	beq.n	8e3ac <Cl_SysStat_mean_status_update+0x90c>
   8e3a6:	4b13      	ldr	r3, [pc, #76]	; (8e3f4 <Cl_SysStat_mean_status_update+0x954>)
   8e3a8:	2200      	movs	r2, #0
   8e3aa:	801a      	strh	r2, [r3, #0]
   8e3ac:	f107 0310 	add.w	r3, r7, #16
   8e3b0:	221e      	movs	r2, #30
   8e3b2:	4619      	mov	r1, r3
   8e3b4:	203e      	movs	r0, #62	; 0x3e
   8e3b6:	4b10      	ldr	r3, [pc, #64]	; (8e3f8 <Cl_SysStat_mean_status_update+0x958>)
   8e3b8:	4798      	blx	r3
   8e3ba:	4603      	mov	r3, r0
   8e3bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
   8e3c0:	bf00      	nop
   8e3c2:	376c      	adds	r7, #108	; 0x6c
   8e3c4:	46bd      	mov	sp, r7
   8e3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8e3c8:	000a41ed 	.word	0x000a41ed
   8e3cc:	0008d6b1 	.word	0x0008d6b1
   8e3d0:	00084371 	.word	0x00084371
   8e3d4:	200725cc 	.word	0x200725cc
   8e3d8:	000a3c05 	.word	0x000a3c05
   8e3dc:	20071660 	.word	0x20071660
   8e3e0:	000a3f7d 	.word	0x000a3f7d
   8e3e4:	40400000 	.word	0x40400000
   8e3e8:	447a0000 	.word	0x447a0000
   8e3ec:	000a418d 	.word	0x000a418d
   8e3f0:	43960000 	.word	0x43960000
   8e3f4:	20072600 	.word	0x20072600
   8e3f8:	00099729 	.word	0x00099729
   8e3fc:	00000000 	.word	0x00000000

0008e400 <Cl_Conductivity_Sensor_Controller>:
   8e400:	b590      	push	{r4, r7, lr}
   8e402:	b085      	sub	sp, #20
   8e404:	af00      	add	r7, sp, #0
   8e406:	4603      	mov	r3, r0
   8e408:	71fb      	strb	r3, [r7, #7]
   8e40a:	2300      	movs	r3, #0
   8e40c:	73fb      	strb	r3, [r7, #15]
   8e40e:	2300      	movs	r3, #0
   8e410:	817b      	strh	r3, [r7, #10]
   8e412:	2300      	movs	r3, #0
   8e414:	81bb      	strh	r3, [r7, #12]
   8e416:	4b72      	ldr	r3, [pc, #456]	; (8e5e0 <Cl_Conductivity_Sensor_Controller+0x1e0>)
   8e418:	781b      	ldrb	r3, [r3, #0]
   8e41a:	2b00      	cmp	r3, #0
   8e41c:	d002      	beq.n	8e424 <Cl_Conductivity_Sensor_Controller+0x24>
   8e41e:	2b02      	cmp	r3, #2
   8e420:	d060      	beq.n	8e4e4 <Cl_Conductivity_Sensor_Controller+0xe4>
   8e422:	e0d1      	b.n	8e5c8 <Cl_Conductivity_Sensor_Controller+0x1c8>
   8e424:	79fb      	ldrb	r3, [r7, #7]
   8e426:	2b00      	cmp	r3, #0
   8e428:	d003      	beq.n	8e432 <Cl_Conductivity_Sensor_Controller+0x32>
   8e42a:	2b02      	cmp	r3, #2
   8e42c:	d023      	beq.n	8e476 <Cl_Conductivity_Sensor_Controller+0x76>
   8e42e:	bf00      	nop
   8e430:	e0ca      	b.n	8e5c8 <Cl_Conductivity_Sensor_Controller+0x1c8>
   8e432:	4b6c      	ldr	r3, [pc, #432]	; (8e5e4 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e434:	881b      	ldrh	r3, [r3, #0]
   8e436:	4618      	mov	r0, r3
   8e438:	4b6b      	ldr	r3, [pc, #428]	; (8e5e8 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8e43a:	4798      	blx	r3
   8e43c:	2064      	movs	r0, #100	; 0x64
   8e43e:	4b6b      	ldr	r3, [pc, #428]	; (8e5ec <Cl_Conductivity_Sensor_Controller+0x1ec>)
   8e440:	4798      	blx	r3
   8e442:	f107 030a 	add.w	r3, r7, #10
   8e446:	4619      	mov	r1, r3
   8e448:	2006      	movs	r0, #6
   8e44a:	4b69      	ldr	r3, [pc, #420]	; (8e5f0 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   8e44c:	4798      	blx	r3
   8e44e:	897b      	ldrh	r3, [r7, #10]
   8e450:	461a      	mov	r2, r3
   8e452:	0092      	lsls	r2, r2, #2
   8e454:	4413      	add	r3, r2
   8e456:	81bb      	strh	r3, [r7, #12]
   8e458:	4b66      	ldr	r3, [pc, #408]	; (8e5f4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e45a:	881b      	ldrh	r3, [r3, #0]
   8e45c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   8e460:	d907      	bls.n	8e472 <Cl_Conductivity_Sensor_Controller+0x72>
   8e462:	4b64      	ldr	r3, [pc, #400]	; (8e5f4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e464:	881b      	ldrh	r3, [r3, #0]
   8e466:	f640 0297 	movw	r2, #2199	; 0x897
   8e46a:	4293      	cmp	r3, r2
   8e46c:	d801      	bhi.n	8e472 <Cl_Conductivity_Sensor_Controller+0x72>
   8e46e:	2300      	movs	r3, #0
   8e470:	e0ab      	b.n	8e5ca <Cl_Conductivity_Sensor_Controller+0x1ca>
   8e472:	2304      	movs	r3, #4
   8e474:	e0a9      	b.n	8e5ca <Cl_Conductivity_Sensor_Controller+0x1ca>
   8e476:	f107 030a 	add.w	r3, r7, #10
   8e47a:	4619      	mov	r1, r3
   8e47c:	2006      	movs	r0, #6
   8e47e:	4b5c      	ldr	r3, [pc, #368]	; (8e5f0 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   8e480:	4798      	blx	r3
   8e482:	897b      	ldrh	r3, [r7, #10]
   8e484:	461a      	mov	r2, r3
   8e486:	4b5c      	ldr	r3, [pc, #368]	; (8e5f8 <Cl_Conductivity_Sensor_Controller+0x1f8>)
   8e488:	4610      	mov	r0, r2
   8e48a:	4798      	blx	r3
   8e48c:	4c5b      	ldr	r4, [pc, #364]	; (8e5fc <Cl_Conductivity_Sensor_Controller+0x1fc>)
   8e48e:	a352      	add	r3, pc, #328	; (adr r3, 8e5d8 <Cl_Conductivity_Sensor_Controller+0x1d8>)
   8e490:	e9d3 2300 	ldrd	r2, r3, [r3]
   8e494:	47a0      	blx	r4
   8e496:	4603      	mov	r3, r0
   8e498:	460c      	mov	r4, r1
   8e49a:	4619      	mov	r1, r3
   8e49c:	4622      	mov	r2, r4
   8e49e:	4b58      	ldr	r3, [pc, #352]	; (8e600 <Cl_Conductivity_Sensor_Controller+0x200>)
   8e4a0:	4608      	mov	r0, r1
   8e4a2:	4611      	mov	r1, r2
   8e4a4:	4798      	blx	r3
   8e4a6:	4603      	mov	r3, r0
   8e4a8:	81bb      	strh	r3, [r7, #12]
   8e4aa:	4a52      	ldr	r2, [pc, #328]	; (8e5f4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e4ac:	89bb      	ldrh	r3, [r7, #12]
   8e4ae:	8013      	strh	r3, [r2, #0]
   8e4b0:	4a54      	ldr	r2, [pc, #336]	; (8e604 <Cl_Conductivity_Sensor_Controller+0x204>)
   8e4b2:	89bb      	ldrh	r3, [r7, #12]
   8e4b4:	8013      	strh	r3, [r2, #0]
   8e4b6:	4b4a      	ldr	r3, [pc, #296]	; (8e5e0 <Cl_Conductivity_Sensor_Controller+0x1e0>)
   8e4b8:	2202      	movs	r2, #2
   8e4ba:	701a      	strb	r2, [r3, #0]
   8e4bc:	4b4d      	ldr	r3, [pc, #308]	; (8e5f4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e4be:	881b      	ldrh	r3, [r3, #0]
   8e4c0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   8e4c4:	d907      	bls.n	8e4d6 <Cl_Conductivity_Sensor_Controller+0xd6>
   8e4c6:	4b4b      	ldr	r3, [pc, #300]	; (8e5f4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e4c8:	881b      	ldrh	r3, [r3, #0]
   8e4ca:	f640 0297 	movw	r2, #2199	; 0x897
   8e4ce:	4293      	cmp	r3, r2
   8e4d0:	d801      	bhi.n	8e4d6 <Cl_Conductivity_Sensor_Controller+0xd6>
   8e4d2:	2300      	movs	r3, #0
   8e4d4:	e079      	b.n	8e5ca <Cl_Conductivity_Sensor_Controller+0x1ca>
   8e4d6:	4b43      	ldr	r3, [pc, #268]	; (8e5e4 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e4d8:	881b      	ldrh	r3, [r3, #0]
   8e4da:	4618      	mov	r0, r3
   8e4dc:	4b42      	ldr	r3, [pc, #264]	; (8e5e8 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8e4de:	4798      	blx	r3
   8e4e0:	2300      	movs	r3, #0
   8e4e2:	e072      	b.n	8e5ca <Cl_Conductivity_Sensor_Controller+0x1ca>
   8e4e4:	79fb      	ldrb	r3, [r7, #7]
   8e4e6:	2b02      	cmp	r3, #2
   8e4e8:	d000      	beq.n	8e4ec <Cl_Conductivity_Sensor_Controller+0xec>
   8e4ea:	e06c      	b.n	8e5c6 <Cl_Conductivity_Sensor_Controller+0x1c6>
   8e4ec:	f107 030a 	add.w	r3, r7, #10
   8e4f0:	4619      	mov	r1, r3
   8e4f2:	2006      	movs	r0, #6
   8e4f4:	4b3e      	ldr	r3, [pc, #248]	; (8e5f0 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   8e4f6:	4798      	blx	r3
   8e4f8:	897b      	ldrh	r3, [r7, #10]
   8e4fa:	461a      	mov	r2, r3
   8e4fc:	4b3e      	ldr	r3, [pc, #248]	; (8e5f8 <Cl_Conductivity_Sensor_Controller+0x1f8>)
   8e4fe:	4610      	mov	r0, r2
   8e500:	4798      	blx	r3
   8e502:	4c3e      	ldr	r4, [pc, #248]	; (8e5fc <Cl_Conductivity_Sensor_Controller+0x1fc>)
   8e504:	a334      	add	r3, pc, #208	; (adr r3, 8e5d8 <Cl_Conductivity_Sensor_Controller+0x1d8>)
   8e506:	e9d3 2300 	ldrd	r2, r3, [r3]
   8e50a:	47a0      	blx	r4
   8e50c:	4603      	mov	r3, r0
   8e50e:	460c      	mov	r4, r1
   8e510:	4619      	mov	r1, r3
   8e512:	4622      	mov	r2, r4
   8e514:	4b3a      	ldr	r3, [pc, #232]	; (8e600 <Cl_Conductivity_Sensor_Controller+0x200>)
   8e516:	4608      	mov	r0, r1
   8e518:	4611      	mov	r1, r2
   8e51a:	4798      	blx	r3
   8e51c:	4603      	mov	r3, r0
   8e51e:	81bb      	strh	r3, [r7, #12]
   8e520:	4b34      	ldr	r3, [pc, #208]	; (8e5f4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e522:	881b      	ldrh	r3, [r3, #0]
   8e524:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   8e528:	d949      	bls.n	8e5be <Cl_Conductivity_Sensor_Controller+0x1be>
   8e52a:	4b32      	ldr	r3, [pc, #200]	; (8e5f4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e52c:	881b      	ldrh	r3, [r3, #0]
   8e52e:	f640 0297 	movw	r2, #2199	; 0x897
   8e532:	4293      	cmp	r3, r2
   8e534:	d843      	bhi.n	8e5be <Cl_Conductivity_Sensor_Controller+0x1be>
   8e536:	4b2f      	ldr	r3, [pc, #188]	; (8e5f4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e538:	881b      	ldrh	r3, [r3, #0]
   8e53a:	461a      	mov	r2, r3
   8e53c:	4613      	mov	r3, r2
   8e53e:	00db      	lsls	r3, r3, #3
   8e540:	4413      	add	r3, r2
   8e542:	005b      	lsls	r3, r3, #1
   8e544:	441a      	add	r2, r3
   8e546:	89bb      	ldrh	r3, [r7, #12]
   8e548:	4413      	add	r3, r2
   8e54a:	4a2f      	ldr	r2, [pc, #188]	; (8e608 <Cl_Conductivity_Sensor_Controller+0x208>)
   8e54c:	fb82 1203 	smull	r1, r2, r2, r3
   8e550:	10d2      	asrs	r2, r2, #3
   8e552:	17db      	asrs	r3, r3, #31
   8e554:	1ad3      	subs	r3, r2, r3
   8e556:	b29a      	uxth	r2, r3
   8e558:	4b26      	ldr	r3, [pc, #152]	; (8e5f4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e55a:	801a      	strh	r2, [r3, #0]
   8e55c:	4b25      	ldr	r3, [pc, #148]	; (8e5f4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e55e:	881b      	ldrh	r3, [r3, #0]
   8e560:	005a      	lsls	r2, r3, #1
   8e562:	89bb      	ldrh	r3, [r7, #12]
   8e564:	4413      	add	r3, r2
   8e566:	4a29      	ldr	r2, [pc, #164]	; (8e60c <Cl_Conductivity_Sensor_Controller+0x20c>)
   8e568:	fb82 1203 	smull	r1, r2, r2, r3
   8e56c:	17db      	asrs	r3, r3, #31
   8e56e:	1ad3      	subs	r3, r2, r3
   8e570:	b29a      	uxth	r2, r3
   8e572:	4b24      	ldr	r3, [pc, #144]	; (8e604 <Cl_Conductivity_Sensor_Controller+0x204>)
   8e574:	801a      	strh	r2, [r3, #0]
   8e576:	4b23      	ldr	r3, [pc, #140]	; (8e604 <Cl_Conductivity_Sensor_Controller+0x204>)
   8e578:	881b      	ldrh	r3, [r3, #0]
   8e57a:	f240 72d5 	movw	r2, #2005	; 0x7d5
   8e57e:	4293      	cmp	r3, r2
   8e580:	d90b      	bls.n	8e59a <Cl_Conductivity_Sensor_Controller+0x19a>
   8e582:	4b18      	ldr	r3, [pc, #96]	; (8e5e4 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e584:	881b      	ldrh	r3, [r3, #0]
   8e586:	3b01      	subs	r3, #1
   8e588:	b29a      	uxth	r2, r3
   8e58a:	4b16      	ldr	r3, [pc, #88]	; (8e5e4 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e58c:	801a      	strh	r2, [r3, #0]
   8e58e:	4b15      	ldr	r3, [pc, #84]	; (8e5e4 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e590:	881b      	ldrh	r3, [r3, #0]
   8e592:	4618      	mov	r0, r3
   8e594:	4b14      	ldr	r3, [pc, #80]	; (8e5e8 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8e596:	4798      	blx	r3
   8e598:	e013      	b.n	8e5c2 <Cl_Conductivity_Sensor_Controller+0x1c2>
   8e59a:	4b1a      	ldr	r3, [pc, #104]	; (8e604 <Cl_Conductivity_Sensor_Controller+0x204>)
   8e59c:	881b      	ldrh	r3, [r3, #0]
   8e59e:	f240 72ca 	movw	r2, #1994	; 0x7ca
   8e5a2:	4293      	cmp	r3, r2
   8e5a4:	d80d      	bhi.n	8e5c2 <Cl_Conductivity_Sensor_Controller+0x1c2>
   8e5a6:	4b0f      	ldr	r3, [pc, #60]	; (8e5e4 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e5a8:	881b      	ldrh	r3, [r3, #0]
   8e5aa:	3301      	adds	r3, #1
   8e5ac:	b29a      	uxth	r2, r3
   8e5ae:	4b0d      	ldr	r3, [pc, #52]	; (8e5e4 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e5b0:	801a      	strh	r2, [r3, #0]
   8e5b2:	4b0c      	ldr	r3, [pc, #48]	; (8e5e4 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e5b4:	881b      	ldrh	r3, [r3, #0]
   8e5b6:	4618      	mov	r0, r3
   8e5b8:	4b0b      	ldr	r3, [pc, #44]	; (8e5e8 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8e5ba:	4798      	blx	r3
   8e5bc:	e001      	b.n	8e5c2 <Cl_Conductivity_Sensor_Controller+0x1c2>
   8e5be:	2304      	movs	r3, #4
   8e5c0:	e003      	b.n	8e5ca <Cl_Conductivity_Sensor_Controller+0x1ca>
   8e5c2:	bf00      	nop
   8e5c4:	bf00      	nop
   8e5c6:	bf00      	nop
   8e5c8:	2300      	movs	r3, #0
   8e5ca:	4618      	mov	r0, r3
   8e5cc:	3714      	adds	r7, #20
   8e5ce:	46bd      	mov	sp, r7
   8e5d0:	bd90      	pop	{r4, r7, pc}
   8e5d2:	bf00      	nop
   8e5d4:	f3af 8000 	nop.w
   8e5d8:	58e21965 	.word	0x58e21965
   8e5dc:	3fe9b717 	.word	0x3fe9b717
   8e5e0:	2007260b 	.word	0x2007260b
   8e5e4:	20070538 	.word	0x20070538
   8e5e8:	00097e75 	.word	0x00097e75
   8e5ec:	00091e2d 	.word	0x00091e2d
   8e5f0:	0008d6b1 	.word	0x0008d6b1
   8e5f4:	2007260c 	.word	0x2007260c
   8e5f8:	000a34c9 	.word	0x000a34c9
   8e5fc:	000a3595 	.word	0x000a3595
   8e600:	000a3b19 	.word	0x000a3b19
   8e604:	2007260e 	.word	0x2007260e
   8e608:	66666667 	.word	0x66666667
   8e60c:	55555556 	.word	0x55555556

0008e610 <Cl_Pressure_Controller_Handler>:
static Cl_PressureSensor_StateType Cl_PressureSensor_State = PS_STATE_IDLE;
extern Cl_ReturnCodeType Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType, uint16_t*);
Cl_ReturnCodeType  Cl_Pressure_Controller_Handler(Cl_PressureSensor_EventType Cl_Ps_Event);

Cl_ReturnCodeType  Cl_Pressure_Controller_Handler(Cl_PressureSensor_EventType Cl_Ps_Event)
{
   8e610:	b580      	push	{r7, lr}
   8e612:	b084      	sub	sp, #16
   8e614:	af00      	add	r7, sp, #0
   8e616:	4603      	mov	r3, r0
   8e618:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_retval = CL_OK;
   8e61a:	2300      	movs	r3, #0
   8e61c:	73fb      	strb	r3, [r7, #15]
	Cl_Uint16Type temp_val  = 0;
   8e61e:	2300      	movs	r3, #0
   8e620:	81bb      	strh	r3, [r7, #12]
	
	if(Cl_PressureSensor_State == PS_STATE_INITIALISING)
   8e622:	4b91      	ldr	r3, [pc, #580]	; (8e868 <Cl_Pressure_Controller_Handler+0x258>)
   8e624:	781b      	ldrb	r3, [r3, #0]
   8e626:	2b01      	cmp	r3, #1
   8e628:	f040 8096 	bne.w	8e758 <Cl_Pressure_Controller_Handler+0x148>
	{
		switch(Cl_Ps_Event)
   8e62c:	79fb      	ldrb	r3, [r7, #7]
   8e62e:	2b00      	cmp	r3, #0
   8e630:	f000 8110 	beq.w	8e854 <Cl_Pressure_Controller_Handler+0x244>
   8e634:	2b01      	cmp	r3, #1
   8e636:	d000      	beq.n	8e63a <Cl_Pressure_Controller_Handler+0x2a>
			{
				counter = 0;
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
			}
			break;
			default:break;
   8e638:	e111      	b.n	8e85e <Cl_Pressure_Controller_Handler+0x24e>
		{
			
			case PS_EVENT_50MS:
			break;
			case PS_EVENT_100MS:
			if ( counter == 0 )
   8e63a:	4b8c      	ldr	r3, [pc, #560]	; (8e86c <Cl_Pressure_Controller_Handler+0x25c>)
   8e63c:	881b      	ldrh	r3, [r3, #0]
   8e63e:	2b00      	cmp	r3, #0
   8e640:	d114      	bne.n	8e66c <Cl_Pressure_Controller_Handler+0x5c>
			{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &Ps1);
   8e642:	498b      	ldr	r1, [pc, #556]	; (8e870 <Cl_Pressure_Controller_Handler+0x260>)
   8e644:	200e      	movs	r0, #14
   8e646:	4b8b      	ldr	r3, [pc, #556]	; (8e874 <Cl_Pressure_Controller_Handler+0x264>)
   8e648:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &Ps2);
   8e64a:	498b      	ldr	r1, [pc, #556]	; (8e878 <Cl_Pressure_Controller_Handler+0x268>)
   8e64c:	200f      	movs	r0, #15
   8e64e:	4b89      	ldr	r3, [pc, #548]	; (8e874 <Cl_Pressure_Controller_Handler+0x264>)
   8e650:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &Ps3);
   8e652:	498a      	ldr	r1, [pc, #552]	; (8e87c <Cl_Pressure_Controller_Handler+0x26c>)
   8e654:	2010      	movs	r0, #16
   8e656:	4b87      	ldr	r3, [pc, #540]	; (8e874 <Cl_Pressure_Controller_Handler+0x264>)
   8e658:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &apt);
   8e65a:	4989      	ldr	r1, [pc, #548]	; (8e880 <Cl_Pressure_Controller_Handler+0x270>)
   8e65c:	200b      	movs	r0, #11
   8e65e:	4b85      	ldr	r3, [pc, #532]	; (8e874 <Cl_Pressure_Controller_Handler+0x264>)
   8e660:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &vpt);
   8e662:	4988      	ldr	r1, [pc, #544]	; (8e884 <Cl_Pressure_Controller_Handler+0x274>)
   8e664:	200b      	movs	r0, #11
   8e666:	4b83      	ldr	r3, [pc, #524]	; (8e874 <Cl_Pressure_Controller_Handler+0x264>)
   8e668:	4798      	blx	r3
   8e66a:	e063      	b.n	8e734 <Cl_Pressure_Controller_Handler+0x124>
			}
			else
			{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &temp_val);
   8e66c:	f107 030c 	add.w	r3, r7, #12
   8e670:	4619      	mov	r1, r3
   8e672:	200e      	movs	r0, #14
   8e674:	4b7f      	ldr	r3, [pc, #508]	; (8e874 <Cl_Pressure_Controller_Handler+0x264>)
   8e676:	4798      	blx	r3
				Ps1 = ( Ps1 +temp_val)/counter+1 ;
   8e678:	4b7d      	ldr	r3, [pc, #500]	; (8e870 <Cl_Pressure_Controller_Handler+0x260>)
   8e67a:	881b      	ldrh	r3, [r3, #0]
   8e67c:	461a      	mov	r2, r3
   8e67e:	89bb      	ldrh	r3, [r7, #12]
   8e680:	4413      	add	r3, r2
   8e682:	4a7a      	ldr	r2, [pc, #488]	; (8e86c <Cl_Pressure_Controller_Handler+0x25c>)
   8e684:	8812      	ldrh	r2, [r2, #0]
   8e686:	fb93 f3f2 	sdiv	r3, r3, r2
   8e68a:	b29b      	uxth	r3, r3
   8e68c:	3301      	adds	r3, #1
   8e68e:	b29a      	uxth	r2, r3
   8e690:	4b77      	ldr	r3, [pc, #476]	; (8e870 <Cl_Pressure_Controller_Handler+0x260>)
   8e692:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &temp_val);
   8e694:	f107 030c 	add.w	r3, r7, #12
   8e698:	4619      	mov	r1, r3
   8e69a:	200f      	movs	r0, #15
   8e69c:	4b75      	ldr	r3, [pc, #468]	; (8e874 <Cl_Pressure_Controller_Handler+0x264>)
   8e69e:	4798      	blx	r3
				Ps2 = ( Ps2 +temp_val)/counter+1 ;
   8e6a0:	4b75      	ldr	r3, [pc, #468]	; (8e878 <Cl_Pressure_Controller_Handler+0x268>)
   8e6a2:	881b      	ldrh	r3, [r3, #0]
   8e6a4:	461a      	mov	r2, r3
   8e6a6:	89bb      	ldrh	r3, [r7, #12]
   8e6a8:	4413      	add	r3, r2
   8e6aa:	4a70      	ldr	r2, [pc, #448]	; (8e86c <Cl_Pressure_Controller_Handler+0x25c>)
   8e6ac:	8812      	ldrh	r2, [r2, #0]
   8e6ae:	fb93 f3f2 	sdiv	r3, r3, r2
   8e6b2:	b29b      	uxth	r3, r3
   8e6b4:	3301      	adds	r3, #1
   8e6b6:	b29a      	uxth	r2, r3
   8e6b8:	4b6f      	ldr	r3, [pc, #444]	; (8e878 <Cl_Pressure_Controller_Handler+0x268>)
   8e6ba:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &temp_val);
   8e6bc:	f107 030c 	add.w	r3, r7, #12
   8e6c0:	4619      	mov	r1, r3
   8e6c2:	2010      	movs	r0, #16
   8e6c4:	4b6b      	ldr	r3, [pc, #428]	; (8e874 <Cl_Pressure_Controller_Handler+0x264>)
   8e6c6:	4798      	blx	r3
				Ps3 = ( Ps3 +temp_val)/counter+1 ;
   8e6c8:	4b6c      	ldr	r3, [pc, #432]	; (8e87c <Cl_Pressure_Controller_Handler+0x26c>)
   8e6ca:	881b      	ldrh	r3, [r3, #0]
   8e6cc:	461a      	mov	r2, r3
   8e6ce:	89bb      	ldrh	r3, [r7, #12]
   8e6d0:	4413      	add	r3, r2
   8e6d2:	4a66      	ldr	r2, [pc, #408]	; (8e86c <Cl_Pressure_Controller_Handler+0x25c>)
   8e6d4:	8812      	ldrh	r2, [r2, #0]
   8e6d6:	fb93 f3f2 	sdiv	r3, r3, r2
   8e6da:	b29b      	uxth	r3, r3
   8e6dc:	3301      	adds	r3, #1
   8e6de:	b29a      	uxth	r2, r3
   8e6e0:	4b66      	ldr	r3, [pc, #408]	; (8e87c <Cl_Pressure_Controller_Handler+0x26c>)
   8e6e2:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8e6e4:	f107 030c 	add.w	r3, r7, #12
   8e6e8:	4619      	mov	r1, r3
   8e6ea:	200b      	movs	r0, #11
   8e6ec:	4b61      	ldr	r3, [pc, #388]	; (8e874 <Cl_Pressure_Controller_Handler+0x264>)
   8e6ee:	4798      	blx	r3
				apt = ( apt +temp_val)/counter+1 ;
   8e6f0:	4b63      	ldr	r3, [pc, #396]	; (8e880 <Cl_Pressure_Controller_Handler+0x270>)
   8e6f2:	881b      	ldrh	r3, [r3, #0]
   8e6f4:	461a      	mov	r2, r3
   8e6f6:	89bb      	ldrh	r3, [r7, #12]
   8e6f8:	4413      	add	r3, r2
   8e6fa:	4a5c      	ldr	r2, [pc, #368]	; (8e86c <Cl_Pressure_Controller_Handler+0x25c>)
   8e6fc:	8812      	ldrh	r2, [r2, #0]
   8e6fe:	fb93 f3f2 	sdiv	r3, r3, r2
   8e702:	b29b      	uxth	r3, r3
   8e704:	3301      	adds	r3, #1
   8e706:	b29a      	uxth	r2, r3
   8e708:	4b5d      	ldr	r3, [pc, #372]	; (8e880 <Cl_Pressure_Controller_Handler+0x270>)
   8e70a:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8e70c:	f107 030c 	add.w	r3, r7, #12
   8e710:	4619      	mov	r1, r3
   8e712:	200b      	movs	r0, #11
   8e714:	4b57      	ldr	r3, [pc, #348]	; (8e874 <Cl_Pressure_Controller_Handler+0x264>)
   8e716:	4798      	blx	r3
				vpt = ( vpt +temp_val)/counter+1 ;
   8e718:	4b5a      	ldr	r3, [pc, #360]	; (8e884 <Cl_Pressure_Controller_Handler+0x274>)
   8e71a:	881b      	ldrh	r3, [r3, #0]
   8e71c:	461a      	mov	r2, r3
   8e71e:	89bb      	ldrh	r3, [r7, #12]
   8e720:	4413      	add	r3, r2
   8e722:	4a52      	ldr	r2, [pc, #328]	; (8e86c <Cl_Pressure_Controller_Handler+0x25c>)
   8e724:	8812      	ldrh	r2, [r2, #0]
   8e726:	fb93 f3f2 	sdiv	r3, r3, r2
   8e72a:	b29b      	uxth	r3, r3
   8e72c:	3301      	adds	r3, #1
   8e72e:	b29a      	uxth	r2, r3
   8e730:	4b54      	ldr	r3, [pc, #336]	; (8e884 <Cl_Pressure_Controller_Handler+0x274>)
   8e732:	801a      	strh	r2, [r3, #0]
			}

			counter++;
   8e734:	4b4d      	ldr	r3, [pc, #308]	; (8e86c <Cl_Pressure_Controller_Handler+0x25c>)
   8e736:	881b      	ldrh	r3, [r3, #0]
   8e738:	3301      	adds	r3, #1
   8e73a:	b29a      	uxth	r2, r3
   8e73c:	4b4b      	ldr	r3, [pc, #300]	; (8e86c <Cl_Pressure_Controller_Handler+0x25c>)
   8e73e:	801a      	strh	r2, [r3, #0]
			if(counter > 10)
   8e740:	4b4a      	ldr	r3, [pc, #296]	; (8e86c <Cl_Pressure_Controller_Handler+0x25c>)
   8e742:	881b      	ldrh	r3, [r3, #0]
   8e744:	2b0a      	cmp	r3, #10
   8e746:	f240 8087 	bls.w	8e858 <Cl_Pressure_Controller_Handler+0x248>
			{
				counter = 0;
   8e74a:	4b48      	ldr	r3, [pc, #288]	; (8e86c <Cl_Pressure_Controller_Handler+0x25c>)
   8e74c:	2200      	movs	r2, #0
   8e74e:	801a      	strh	r2, [r3, #0]
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
   8e750:	4b45      	ldr	r3, [pc, #276]	; (8e868 <Cl_Pressure_Controller_Handler+0x258>)
   8e752:	2202      	movs	r2, #2
   8e754:	701a      	strb	r2, [r3, #0]
			}
			break;
   8e756:	e07f      	b.n	8e858 <Cl_Pressure_Controller_Handler+0x248>
			default:break;
		}
	}
	else if(Cl_PressureSensor_State == PS_STATE_ACTIVE)
   8e758:	4b43      	ldr	r3, [pc, #268]	; (8e868 <Cl_Pressure_Controller_Handler+0x258>)
   8e75a:	781b      	ldrb	r3, [r3, #0]
   8e75c:	2b02      	cmp	r3, #2
   8e75e:	d17e      	bne.n	8e85e <Cl_Pressure_Controller_Handler+0x24e>
	{
		switch(Cl_Ps_Event)
   8e760:	79fb      	ldrb	r3, [r7, #7]
   8e762:	2b00      	cmp	r3, #0
   8e764:	d07a      	beq.n	8e85c <Cl_Pressure_Controller_Handler+0x24c>
   8e766:	2b01      	cmp	r3, #1
   8e768:	d000      	beq.n	8e76c <Cl_Pressure_Controller_Handler+0x15c>
				vpt = ( 9* vpt +temp_val)/10 ;

			
			
			break;
			default:break;
   8e76a:	e078      	b.n	8e85e <Cl_Pressure_Controller_Handler+0x24e>
		{
			
			case PS_EVENT_50MS:
			break;
			case PS_EVENT_100MS:
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &temp_val);
   8e76c:	f107 030c 	add.w	r3, r7, #12
   8e770:	4619      	mov	r1, r3
   8e772:	200e      	movs	r0, #14
   8e774:	4b3f      	ldr	r3, [pc, #252]	; (8e874 <Cl_Pressure_Controller_Handler+0x264>)
   8e776:	4798      	blx	r3
				Ps1 = ( 9 *Ps1 +temp_val)/10 ;
   8e778:	4b3d      	ldr	r3, [pc, #244]	; (8e870 <Cl_Pressure_Controller_Handler+0x260>)
   8e77a:	881b      	ldrh	r3, [r3, #0]
   8e77c:	461a      	mov	r2, r3
   8e77e:	4613      	mov	r3, r2
   8e780:	00db      	lsls	r3, r3, #3
   8e782:	4413      	add	r3, r2
   8e784:	89ba      	ldrh	r2, [r7, #12]
   8e786:	4413      	add	r3, r2
   8e788:	4a3f      	ldr	r2, [pc, #252]	; (8e888 <Cl_Pressure_Controller_Handler+0x278>)
   8e78a:	fb82 1203 	smull	r1, r2, r2, r3
   8e78e:	1092      	asrs	r2, r2, #2
   8e790:	17db      	asrs	r3, r3, #31
   8e792:	1ad3      	subs	r3, r2, r3
   8e794:	b29a      	uxth	r2, r3
   8e796:	4b36      	ldr	r3, [pc, #216]	; (8e870 <Cl_Pressure_Controller_Handler+0x260>)
   8e798:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &temp_val);
   8e79a:	f107 030c 	add.w	r3, r7, #12
   8e79e:	4619      	mov	r1, r3
   8e7a0:	200f      	movs	r0, #15
   8e7a2:	4b34      	ldr	r3, [pc, #208]	; (8e874 <Cl_Pressure_Controller_Handler+0x264>)
   8e7a4:	4798      	blx	r3
				Ps2 = ( 9 * Ps2 +temp_val)/10 ;
   8e7a6:	4b34      	ldr	r3, [pc, #208]	; (8e878 <Cl_Pressure_Controller_Handler+0x268>)
   8e7a8:	881b      	ldrh	r3, [r3, #0]
   8e7aa:	461a      	mov	r2, r3
   8e7ac:	4613      	mov	r3, r2
   8e7ae:	00db      	lsls	r3, r3, #3
   8e7b0:	4413      	add	r3, r2
   8e7b2:	89ba      	ldrh	r2, [r7, #12]
   8e7b4:	4413      	add	r3, r2
   8e7b6:	4a34      	ldr	r2, [pc, #208]	; (8e888 <Cl_Pressure_Controller_Handler+0x278>)
   8e7b8:	fb82 1203 	smull	r1, r2, r2, r3
   8e7bc:	1092      	asrs	r2, r2, #2
   8e7be:	17db      	asrs	r3, r3, #31
   8e7c0:	1ad3      	subs	r3, r2, r3
   8e7c2:	b29a      	uxth	r2, r3
   8e7c4:	4b2c      	ldr	r3, [pc, #176]	; (8e878 <Cl_Pressure_Controller_Handler+0x268>)
   8e7c6:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &temp_val);
   8e7c8:	f107 030c 	add.w	r3, r7, #12
   8e7cc:	4619      	mov	r1, r3
   8e7ce:	2010      	movs	r0, #16
   8e7d0:	4b28      	ldr	r3, [pc, #160]	; (8e874 <Cl_Pressure_Controller_Handler+0x264>)
   8e7d2:	4798      	blx	r3
				Ps3 = ( 9*Ps3 +temp_val)/10 ;
   8e7d4:	4b29      	ldr	r3, [pc, #164]	; (8e87c <Cl_Pressure_Controller_Handler+0x26c>)
   8e7d6:	881b      	ldrh	r3, [r3, #0]
   8e7d8:	461a      	mov	r2, r3
   8e7da:	4613      	mov	r3, r2
   8e7dc:	00db      	lsls	r3, r3, #3
   8e7de:	4413      	add	r3, r2
   8e7e0:	89ba      	ldrh	r2, [r7, #12]
   8e7e2:	4413      	add	r3, r2
   8e7e4:	4a28      	ldr	r2, [pc, #160]	; (8e888 <Cl_Pressure_Controller_Handler+0x278>)
   8e7e6:	fb82 1203 	smull	r1, r2, r2, r3
   8e7ea:	1092      	asrs	r2, r2, #2
   8e7ec:	17db      	asrs	r3, r3, #31
   8e7ee:	1ad3      	subs	r3, r2, r3
   8e7f0:	b29a      	uxth	r2, r3
   8e7f2:	4b22      	ldr	r3, [pc, #136]	; (8e87c <Cl_Pressure_Controller_Handler+0x26c>)
   8e7f4:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8e7f6:	f107 030c 	add.w	r3, r7, #12
   8e7fa:	4619      	mov	r1, r3
   8e7fc:	200b      	movs	r0, #11
   8e7fe:	4b1d      	ldr	r3, [pc, #116]	; (8e874 <Cl_Pressure_Controller_Handler+0x264>)
   8e800:	4798      	blx	r3
				apt = ( 9* apt +temp_val)/10 ;
   8e802:	4b1f      	ldr	r3, [pc, #124]	; (8e880 <Cl_Pressure_Controller_Handler+0x270>)
   8e804:	881b      	ldrh	r3, [r3, #0]
   8e806:	461a      	mov	r2, r3
   8e808:	4613      	mov	r3, r2
   8e80a:	00db      	lsls	r3, r3, #3
   8e80c:	4413      	add	r3, r2
   8e80e:	89ba      	ldrh	r2, [r7, #12]
   8e810:	4413      	add	r3, r2
   8e812:	4a1d      	ldr	r2, [pc, #116]	; (8e888 <Cl_Pressure_Controller_Handler+0x278>)
   8e814:	fb82 1203 	smull	r1, r2, r2, r3
   8e818:	1092      	asrs	r2, r2, #2
   8e81a:	17db      	asrs	r3, r3, #31
   8e81c:	1ad3      	subs	r3, r2, r3
   8e81e:	b29a      	uxth	r2, r3
   8e820:	4b17      	ldr	r3, [pc, #92]	; (8e880 <Cl_Pressure_Controller_Handler+0x270>)
   8e822:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS, &temp_val);
   8e824:	f107 030c 	add.w	r3, r7, #12
   8e828:	4619      	mov	r1, r3
   8e82a:	200c      	movs	r0, #12
   8e82c:	4b11      	ldr	r3, [pc, #68]	; (8e874 <Cl_Pressure_Controller_Handler+0x264>)
   8e82e:	4798      	blx	r3
				vpt = ( 9* vpt +temp_val)/10 ;
   8e830:	4b14      	ldr	r3, [pc, #80]	; (8e884 <Cl_Pressure_Controller_Handler+0x274>)
   8e832:	881b      	ldrh	r3, [r3, #0]
   8e834:	461a      	mov	r2, r3
   8e836:	4613      	mov	r3, r2
   8e838:	00db      	lsls	r3, r3, #3
   8e83a:	4413      	add	r3, r2
   8e83c:	89ba      	ldrh	r2, [r7, #12]
   8e83e:	4413      	add	r3, r2
   8e840:	4a11      	ldr	r2, [pc, #68]	; (8e888 <Cl_Pressure_Controller_Handler+0x278>)
   8e842:	fb82 1203 	smull	r1, r2, r2, r3
   8e846:	1092      	asrs	r2, r2, #2
   8e848:	17db      	asrs	r3, r3, #31
   8e84a:	1ad3      	subs	r3, r2, r3
   8e84c:	b29a      	uxth	r2, r3
   8e84e:	4b0d      	ldr	r3, [pc, #52]	; (8e884 <Cl_Pressure_Controller_Handler+0x274>)
   8e850:	801a      	strh	r2, [r3, #0]

			
			
			break;
   8e852:	e004      	b.n	8e85e <Cl_Pressure_Controller_Handler+0x24e>
	{
		switch(Cl_Ps_Event)
		{
			
			case PS_EVENT_50MS:
			break;
   8e854:	bf00      	nop
   8e856:	e002      	b.n	8e85e <Cl_Pressure_Controller_Handler+0x24e>
			if(counter > 10)
			{
				counter = 0;
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
			}
			break;
   8e858:	bf00      	nop
   8e85a:	e000      	b.n	8e85e <Cl_Pressure_Controller_Handler+0x24e>
	{
		switch(Cl_Ps_Event)
		{
			
			case PS_EVENT_50MS:
			break;
   8e85c:	bf00      	nop
		
	}

	
	
	return cl_retval;
   8e85e:	7bfb      	ldrb	r3, [r7, #15]
}
   8e860:	4618      	mov	r0, r3
   8e862:	3710      	adds	r7, #16
   8e864:	46bd      	mov	sp, r7
   8e866:	bd80      	pop	{r7, pc}
   8e868:	2007261c 	.word	0x2007261c
   8e86c:	2007261a 	.word	0x2007261a
   8e870:	20072610 	.word	0x20072610
   8e874:	0008d6b1 	.word	0x0008d6b1
   8e878:	20072612 	.word	0x20072612
   8e87c:	20072614 	.word	0x20072614
   8e880:	20072616 	.word	0x20072616
   8e884:	20072618 	.word	0x20072618
   8e888:	66666667 	.word	0x66666667

0008e88c <Cl_Pressure_Controller_Init>:

Cl_ReturnCodeType  Cl_Pressure_Controller_Init(void)
{
   8e88c:	b480      	push	{r7}
   8e88e:	b083      	sub	sp, #12
   8e890:	af00      	add	r7, sp, #0

	Cl_ReturnCodeType cl_retval = CL_OK;
   8e892:	2300      	movs	r3, #0
   8e894:	71fb      	strb	r3, [r7, #7]
	 Ps1 = 0;
   8e896:	4b0c      	ldr	r3, [pc, #48]	; (8e8c8 <Cl_Pressure_Controller_Init+0x3c>)
   8e898:	2200      	movs	r2, #0
   8e89a:	801a      	strh	r2, [r3, #0]
	Ps2 = 0;
   8e89c:	4b0b      	ldr	r3, [pc, #44]	; (8e8cc <Cl_Pressure_Controller_Init+0x40>)
   8e89e:	2200      	movs	r2, #0
   8e8a0:	801a      	strh	r2, [r3, #0]
	Ps3 = 0;
   8e8a2:	4b0b      	ldr	r3, [pc, #44]	; (8e8d0 <Cl_Pressure_Controller_Init+0x44>)
   8e8a4:	2200      	movs	r2, #0
   8e8a6:	801a      	strh	r2, [r3, #0]
	apt =0 ;
   8e8a8:	4b0a      	ldr	r3, [pc, #40]	; (8e8d4 <Cl_Pressure_Controller_Init+0x48>)
   8e8aa:	2200      	movs	r2, #0
   8e8ac:	801a      	strh	r2, [r3, #0]
	vpt = 0;
   8e8ae:	4b0a      	ldr	r3, [pc, #40]	; (8e8d8 <Cl_Pressure_Controller_Init+0x4c>)
   8e8b0:	2200      	movs	r2, #0
   8e8b2:	801a      	strh	r2, [r3, #0]
	Cl_PressureSensor_State = PS_STATE_INITIALISING;
   8e8b4:	4b09      	ldr	r3, [pc, #36]	; (8e8dc <Cl_Pressure_Controller_Init+0x50>)
   8e8b6:	2201      	movs	r2, #1
   8e8b8:	701a      	strb	r2, [r3, #0]
	
	return cl_retval;
   8e8ba:	79fb      	ldrb	r3, [r7, #7]
   8e8bc:	4618      	mov	r0, r3
   8e8be:	370c      	adds	r7, #12
   8e8c0:	46bd      	mov	sp, r7
   8e8c2:	bc80      	pop	{r7}
   8e8c4:	4770      	bx	lr
   8e8c6:	bf00      	nop
   8e8c8:	20072610 	.word	0x20072610
   8e8cc:	20072612 	.word	0x20072612
   8e8d0:	20072614 	.word	0x20072614
   8e8d4:	20072616 	.word	0x20072616
   8e8d8:	20072618 	.word	0x20072618
   8e8dc:	2007261c 	.word	0x2007261c

0008e8e0 <res_temp_lookuptable>:
   8e8e0:	b590      	push	{r4, r7, lr}
   8e8e2:	b085      	sub	sp, #20
   8e8e4:	af00      	add	r7, sp, #0
   8e8e6:	6078      	str	r0, [r7, #4]
   8e8e8:	f04f 0300 	mov.w	r3, #0
   8e8ec:	60bb      	str	r3, [r7, #8]
   8e8ee:	2300      	movs	r3, #0
   8e8f0:	60fb      	str	r3, [r7, #12]
   8e8f2:	e075      	b.n	8e9e0 <res_temp_lookuptable+0x100>
   8e8f4:	4b3e      	ldr	r3, [pc, #248]	; (8e9f0 <res_temp_lookuptable+0x110>)
   8e8f6:	6878      	ldr	r0, [r7, #4]
   8e8f8:	4798      	blx	r3
   8e8fa:	4a3e      	ldr	r2, [pc, #248]	; (8e9f4 <res_temp_lookuptable+0x114>)
   8e8fc:	68fb      	ldr	r3, [r7, #12]
   8e8fe:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8e902:	4b3d      	ldr	r3, [pc, #244]	; (8e9f8 <res_temp_lookuptable+0x118>)
   8e904:	4611      	mov	r1, r2
   8e906:	4798      	blx	r3
   8e908:	4603      	mov	r3, r0
   8e90a:	2b00      	cmp	r3, #0
   8e90c:	d007      	beq.n	8e91e <res_temp_lookuptable+0x3e>
   8e90e:	4a39      	ldr	r2, [pc, #228]	; (8e9f4 <res_temp_lookuptable+0x114>)
   8e910:	68fb      	ldr	r3, [r7, #12]
   8e912:	00db      	lsls	r3, r3, #3
   8e914:	4413      	add	r3, r2
   8e916:	685b      	ldr	r3, [r3, #4]
   8e918:	4a38      	ldr	r2, [pc, #224]	; (8e9fc <res_temp_lookuptable+0x11c>)
   8e91a:	6013      	str	r3, [r2, #0]
   8e91c:	e063      	b.n	8e9e6 <res_temp_lookuptable+0x106>
   8e91e:	4b34      	ldr	r3, [pc, #208]	; (8e9f0 <res_temp_lookuptable+0x110>)
   8e920:	6878      	ldr	r0, [r7, #4]
   8e922:	4798      	blx	r3
   8e924:	4a33      	ldr	r2, [pc, #204]	; (8e9f4 <res_temp_lookuptable+0x114>)
   8e926:	68fb      	ldr	r3, [r7, #12]
   8e928:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8e92c:	4b34      	ldr	r3, [pc, #208]	; (8ea00 <res_temp_lookuptable+0x120>)
   8e92e:	4611      	mov	r1, r2
   8e930:	4798      	blx	r3
   8e932:	4603      	mov	r3, r0
   8e934:	2b00      	cmp	r3, #0
   8e936:	d050      	beq.n	8e9da <res_temp_lookuptable+0xfa>
   8e938:	4b2d      	ldr	r3, [pc, #180]	; (8e9f0 <res_temp_lookuptable+0x110>)
   8e93a:	6878      	ldr	r0, [r7, #4]
   8e93c:	4798      	blx	r3
   8e93e:	68fb      	ldr	r3, [r7, #12]
   8e940:	3301      	adds	r3, #1
   8e942:	4a2c      	ldr	r2, [pc, #176]	; (8e9f4 <res_temp_lookuptable+0x114>)
   8e944:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8e948:	4b2e      	ldr	r3, [pc, #184]	; (8ea04 <res_temp_lookuptable+0x124>)
   8e94a:	4611      	mov	r1, r2
   8e94c:	4798      	blx	r3
   8e94e:	4603      	mov	r3, r0
   8e950:	2b00      	cmp	r3, #0
   8e952:	d042      	beq.n	8e9da <res_temp_lookuptable+0xfa>
   8e954:	68fb      	ldr	r3, [r7, #12]
   8e956:	3301      	adds	r3, #1
   8e958:	4a26      	ldr	r2, [pc, #152]	; (8e9f4 <res_temp_lookuptable+0x114>)
   8e95a:	00db      	lsls	r3, r3, #3
   8e95c:	4413      	add	r3, r2
   8e95e:	6858      	ldr	r0, [r3, #4]
   8e960:	4a24      	ldr	r2, [pc, #144]	; (8e9f4 <res_temp_lookuptable+0x114>)
   8e962:	68fb      	ldr	r3, [r7, #12]
   8e964:	00db      	lsls	r3, r3, #3
   8e966:	4413      	add	r3, r2
   8e968:	685a      	ldr	r2, [r3, #4]
   8e96a:	4b27      	ldr	r3, [pc, #156]	; (8ea08 <res_temp_lookuptable+0x128>)
   8e96c:	4611      	mov	r1, r2
   8e96e:	4798      	blx	r3
   8e970:	4603      	mov	r3, r0
   8e972:	461c      	mov	r4, r3
   8e974:	68fb      	ldr	r3, [r7, #12]
   8e976:	3301      	adds	r3, #1
   8e978:	4a1e      	ldr	r2, [pc, #120]	; (8e9f4 <res_temp_lookuptable+0x114>)
   8e97a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   8e97e:	4a1d      	ldr	r2, [pc, #116]	; (8e9f4 <res_temp_lookuptable+0x114>)
   8e980:	68fb      	ldr	r3, [r7, #12]
   8e982:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8e986:	4b20      	ldr	r3, [pc, #128]	; (8ea08 <res_temp_lookuptable+0x128>)
   8e988:	4611      	mov	r1, r2
   8e98a:	4798      	blx	r3
   8e98c:	4603      	mov	r3, r0
   8e98e:	461a      	mov	r2, r3
   8e990:	4b1e      	ldr	r3, [pc, #120]	; (8ea0c <res_temp_lookuptable+0x12c>)
   8e992:	4611      	mov	r1, r2
   8e994:	4620      	mov	r0, r4
   8e996:	4798      	blx	r3
   8e998:	4603      	mov	r3, r0
   8e99a:	60bb      	str	r3, [r7, #8]
   8e99c:	4b14      	ldr	r3, [pc, #80]	; (8e9f0 <res_temp_lookuptable+0x110>)
   8e99e:	6878      	ldr	r0, [r7, #4]
   8e9a0:	4798      	blx	r3
   8e9a2:	4a14      	ldr	r2, [pc, #80]	; (8e9f4 <res_temp_lookuptable+0x114>)
   8e9a4:	68fb      	ldr	r3, [r7, #12]
   8e9a6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8e9aa:	4b17      	ldr	r3, [pc, #92]	; (8ea08 <res_temp_lookuptable+0x128>)
   8e9ac:	4611      	mov	r1, r2
   8e9ae:	4798      	blx	r3
   8e9b0:	4603      	mov	r3, r0
   8e9b2:	461a      	mov	r2, r3
   8e9b4:	4b16      	ldr	r3, [pc, #88]	; (8ea10 <res_temp_lookuptable+0x130>)
   8e9b6:	68b9      	ldr	r1, [r7, #8]
   8e9b8:	4610      	mov	r0, r2
   8e9ba:	4798      	blx	r3
   8e9bc:	4603      	mov	r3, r0
   8e9be:	4618      	mov	r0, r3
   8e9c0:	4a0c      	ldr	r2, [pc, #48]	; (8e9f4 <res_temp_lookuptable+0x114>)
   8e9c2:	68fb      	ldr	r3, [r7, #12]
   8e9c4:	00db      	lsls	r3, r3, #3
   8e9c6:	4413      	add	r3, r2
   8e9c8:	685a      	ldr	r2, [r3, #4]
   8e9ca:	4b12      	ldr	r3, [pc, #72]	; (8ea14 <res_temp_lookuptable+0x134>)
   8e9cc:	4611      	mov	r1, r2
   8e9ce:	4798      	blx	r3
   8e9d0:	4603      	mov	r3, r0
   8e9d2:	461a      	mov	r2, r3
   8e9d4:	4b09      	ldr	r3, [pc, #36]	; (8e9fc <res_temp_lookuptable+0x11c>)
   8e9d6:	601a      	str	r2, [r3, #0]
   8e9d8:	e005      	b.n	8e9e6 <res_temp_lookuptable+0x106>
   8e9da:	68fb      	ldr	r3, [r7, #12]
   8e9dc:	3301      	adds	r3, #1
   8e9de:	60fb      	str	r3, [r7, #12]
   8e9e0:	68fb      	ldr	r3, [r7, #12]
   8e9e2:	2b95      	cmp	r3, #149	; 0x95
   8e9e4:	dd86      	ble.n	8e8f4 <res_temp_lookuptable+0x14>
   8e9e6:	bf00      	nop
   8e9e8:	3714      	adds	r7, #20
   8e9ea:	46bd      	mov	sp, r7
   8e9ec:	bd90      	pop	{r4, r7, pc}
   8e9ee:	bf00      	nop
   8e9f0:	000a3d65 	.word	0x000a3d65
   8e9f4:	2007053c 	.word	0x2007053c
   8e9f8:	000a413d 	.word	0x000a413d
   8e9fc:	20072630 	.word	0x20072630
   8ea00:	000a418d 	.word	0x000a418d
   8ea04:	000a4151 	.word	0x000a4151
   8ea08:	000a3c01 	.word	0x000a3c01
   8ea0c:	000a3f7d 	.word	0x000a3f7d
   8ea10:	000a3e15 	.word	0x000a3e15
   8ea14:	000a3c05 	.word	0x000a3c05

0008ea18 <Cl_Temperature_Controller_Handler>:
   8ea18:	b590      	push	{r4, r7, lr}
   8ea1a:	b08b      	sub	sp, #44	; 0x2c
   8ea1c:	af00      	add	r7, sp, #0
   8ea1e:	4603      	mov	r3, r0
   8ea20:	71fb      	strb	r3, [r7, #7]
   8ea22:	f04f 0300 	mov.w	r3, #0
   8ea26:	627b      	str	r3, [r7, #36]	; 0x24
   8ea28:	f04f 0300 	mov.w	r3, #0
   8ea2c:	623b      	str	r3, [r7, #32]
   8ea2e:	2300      	movs	r3, #0
   8ea30:	77fb      	strb	r3, [r7, #31]
   8ea32:	2300      	movs	r3, #0
   8ea34:	82bb      	strh	r3, [r7, #20]
   8ea36:	2300      	movs	r3, #0
   8ea38:	827b      	strh	r3, [r7, #18]
   8ea3a:	4b52      	ldr	r3, [pc, #328]	; (8eb84 <Cl_Temperature_Controller_Handler+0x16c>)
   8ea3c:	781b      	ldrb	r3, [r3, #0]
   8ea3e:	2b01      	cmp	r3, #1
   8ea40:	f040 8090 	bne.w	8eb64 <Cl_Temperature_Controller_Handler+0x14c>
   8ea44:	79fb      	ldrb	r3, [r7, #7]
   8ea46:	2b01      	cmp	r3, #1
   8ea48:	d005      	beq.n	8ea56 <Cl_Temperature_Controller_Handler+0x3e>
   8ea4a:	2b03      	cmp	r3, #3
   8ea4c:	d076      	beq.n	8eb3c <Cl_Temperature_Controller_Handler+0x124>
   8ea4e:	2b00      	cmp	r3, #0
   8ea50:	f000 81f1 	beq.w	8ee36 <Cl_Temperature_Controller_Handler+0x41e>
   8ea54:	e235      	b.n	8eec2 <Cl_Temperature_Controller_Handler+0x4aa>
   8ea56:	4b4c      	ldr	r3, [pc, #304]	; (8eb88 <Cl_Temperature_Controller_Handler+0x170>)
   8ea58:	881b      	ldrh	r3, [r3, #0]
   8ea5a:	2b00      	cmp	r3, #0
   8ea5c:	d10c      	bne.n	8ea78 <Cl_Temperature_Controller_Handler+0x60>
   8ea5e:	494b      	ldr	r1, [pc, #300]	; (8eb8c <Cl_Temperature_Controller_Handler+0x174>)
   8ea60:	2012      	movs	r0, #18
   8ea62:	4b4b      	ldr	r3, [pc, #300]	; (8eb90 <Cl_Temperature_Controller_Handler+0x178>)
   8ea64:	4798      	blx	r3
   8ea66:	494b      	ldr	r1, [pc, #300]	; (8eb94 <Cl_Temperature_Controller_Handler+0x17c>)
   8ea68:	2013      	movs	r0, #19
   8ea6a:	4b49      	ldr	r3, [pc, #292]	; (8eb90 <Cl_Temperature_Controller_Handler+0x178>)
   8ea6c:	4798      	blx	r3
   8ea6e:	494a      	ldr	r1, [pc, #296]	; (8eb98 <Cl_Temperature_Controller_Handler+0x180>)
   8ea70:	2014      	movs	r0, #20
   8ea72:	4b47      	ldr	r3, [pc, #284]	; (8eb90 <Cl_Temperature_Controller_Handler+0x178>)
   8ea74:	4798      	blx	r3
   8ea76:	e04f      	b.n	8eb18 <Cl_Temperature_Controller_Handler+0x100>
   8ea78:	f107 0314 	add.w	r3, r7, #20
   8ea7c:	4619      	mov	r1, r3
   8ea7e:	2012      	movs	r0, #18
   8ea80:	4b43      	ldr	r3, [pc, #268]	; (8eb90 <Cl_Temperature_Controller_Handler+0x178>)
   8ea82:	4798      	blx	r3
   8ea84:	4b41      	ldr	r3, [pc, #260]	; (8eb8c <Cl_Temperature_Controller_Handler+0x174>)
   8ea86:	881b      	ldrh	r3, [r3, #0]
   8ea88:	461a      	mov	r2, r3
   8ea8a:	8abb      	ldrh	r3, [r7, #20]
   8ea8c:	4413      	add	r3, r2
   8ea8e:	4a3e      	ldr	r2, [pc, #248]	; (8eb88 <Cl_Temperature_Controller_Handler+0x170>)
   8ea90:	8812      	ldrh	r2, [r2, #0]
   8ea92:	fb93 f3f2 	sdiv	r3, r3, r2
   8ea96:	b29b      	uxth	r3, r3
   8ea98:	3301      	adds	r3, #1
   8ea9a:	b29a      	uxth	r2, r3
   8ea9c:	4b3b      	ldr	r3, [pc, #236]	; (8eb8c <Cl_Temperature_Controller_Handler+0x174>)
   8ea9e:	801a      	strh	r2, [r3, #0]
   8eaa0:	f107 0314 	add.w	r3, r7, #20
   8eaa4:	4619      	mov	r1, r3
   8eaa6:	2013      	movs	r0, #19
   8eaa8:	4b39      	ldr	r3, [pc, #228]	; (8eb90 <Cl_Temperature_Controller_Handler+0x178>)
   8eaaa:	4798      	blx	r3
   8eaac:	4b39      	ldr	r3, [pc, #228]	; (8eb94 <Cl_Temperature_Controller_Handler+0x17c>)
   8eaae:	881b      	ldrh	r3, [r3, #0]
   8eab0:	461a      	mov	r2, r3
   8eab2:	8abb      	ldrh	r3, [r7, #20]
   8eab4:	4413      	add	r3, r2
   8eab6:	4a34      	ldr	r2, [pc, #208]	; (8eb88 <Cl_Temperature_Controller_Handler+0x170>)
   8eab8:	8812      	ldrh	r2, [r2, #0]
   8eaba:	fb93 f3f2 	sdiv	r3, r3, r2
   8eabe:	b29b      	uxth	r3, r3
   8eac0:	3301      	adds	r3, #1
   8eac2:	b29a      	uxth	r2, r3
   8eac4:	4b33      	ldr	r3, [pc, #204]	; (8eb94 <Cl_Temperature_Controller_Handler+0x17c>)
   8eac6:	801a      	strh	r2, [r3, #0]
   8eac8:	f107 0314 	add.w	r3, r7, #20
   8eacc:	4619      	mov	r1, r3
   8eace:	2014      	movs	r0, #20
   8ead0:	4b2f      	ldr	r3, [pc, #188]	; (8eb90 <Cl_Temperature_Controller_Handler+0x178>)
   8ead2:	4798      	blx	r3
   8ead4:	8abb      	ldrh	r3, [r7, #20]
   8ead6:	461a      	mov	r2, r3
   8ead8:	4b30      	ldr	r3, [pc, #192]	; (8eb9c <Cl_Temperature_Controller_Handler+0x184>)
   8eada:	4610      	mov	r0, r2
   8eadc:	4798      	blx	r3
   8eade:	4b2e      	ldr	r3, [pc, #184]	; (8eb98 <Cl_Temperature_Controller_Handler+0x180>)
   8eae0:	681a      	ldr	r2, [r3, #0]
   8eae2:	4b2f      	ldr	r3, [pc, #188]	; (8eba0 <Cl_Temperature_Controller_Handler+0x188>)
   8eae4:	4611      	mov	r1, r2
   8eae6:	4798      	blx	r3
   8eae8:	4603      	mov	r3, r0
   8eaea:	461c      	mov	r4, r3
   8eaec:	4b26      	ldr	r3, [pc, #152]	; (8eb88 <Cl_Temperature_Controller_Handler+0x170>)
   8eaee:	881b      	ldrh	r3, [r3, #0]
   8eaf0:	461a      	mov	r2, r3
   8eaf2:	4b2a      	ldr	r3, [pc, #168]	; (8eb9c <Cl_Temperature_Controller_Handler+0x184>)
   8eaf4:	4610      	mov	r0, r2
   8eaf6:	4798      	blx	r3
   8eaf8:	4602      	mov	r2, r0
   8eafa:	4b2a      	ldr	r3, [pc, #168]	; (8eba4 <Cl_Temperature_Controller_Handler+0x18c>)
   8eafc:	4611      	mov	r1, r2
   8eafe:	4620      	mov	r0, r4
   8eb00:	4798      	blx	r3
   8eb02:	4603      	mov	r3, r0
   8eb04:	461a      	mov	r2, r3
   8eb06:	4b26      	ldr	r3, [pc, #152]	; (8eba0 <Cl_Temperature_Controller_Handler+0x188>)
   8eb08:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8eb0c:	4610      	mov	r0, r2
   8eb0e:	4798      	blx	r3
   8eb10:	4603      	mov	r3, r0
   8eb12:	461a      	mov	r2, r3
   8eb14:	4b20      	ldr	r3, [pc, #128]	; (8eb98 <Cl_Temperature_Controller_Handler+0x180>)
   8eb16:	601a      	str	r2, [r3, #0]
   8eb18:	4b1b      	ldr	r3, [pc, #108]	; (8eb88 <Cl_Temperature_Controller_Handler+0x170>)
   8eb1a:	881b      	ldrh	r3, [r3, #0]
   8eb1c:	3301      	adds	r3, #1
   8eb1e:	b29a      	uxth	r2, r3
   8eb20:	4b19      	ldr	r3, [pc, #100]	; (8eb88 <Cl_Temperature_Controller_Handler+0x170>)
   8eb22:	801a      	strh	r2, [r3, #0]
   8eb24:	4b18      	ldr	r3, [pc, #96]	; (8eb88 <Cl_Temperature_Controller_Handler+0x170>)
   8eb26:	881b      	ldrh	r3, [r3, #0]
   8eb28:	2b0a      	cmp	r3, #10
   8eb2a:	f240 81c7 	bls.w	8eebc <Cl_Temperature_Controller_Handler+0x4a4>
   8eb2e:	4b16      	ldr	r3, [pc, #88]	; (8eb88 <Cl_Temperature_Controller_Handler+0x170>)
   8eb30:	2200      	movs	r2, #0
   8eb32:	801a      	strh	r2, [r3, #0]
   8eb34:	4b13      	ldr	r3, [pc, #76]	; (8eb84 <Cl_Temperature_Controller_Handler+0x16c>)
   8eb36:	2202      	movs	r2, #2
   8eb38:	701a      	strb	r2, [r3, #0]
   8eb3a:	e1bf      	b.n	8eebc <Cl_Temperature_Controller_Handler+0x4a4>
   8eb3c:	f107 0312 	add.w	r3, r7, #18
   8eb40:	4618      	mov	r0, r3
   8eb42:	4b19      	ldr	r3, [pc, #100]	; (8eba8 <Cl_Temperature_Controller_Handler+0x190>)
   8eb44:	4798      	blx	r3
   8eb46:	8a7b      	ldrh	r3, [r7, #18]
   8eb48:	461a      	mov	r2, r3
   8eb4a:	4b14      	ldr	r3, [pc, #80]	; (8eb9c <Cl_Temperature_Controller_Handler+0x184>)
   8eb4c:	4610      	mov	r0, r2
   8eb4e:	4798      	blx	r3
   8eb50:	4b11      	ldr	r3, [pc, #68]	; (8eb98 <Cl_Temperature_Controller_Handler+0x180>)
   8eb52:	681a      	ldr	r2, [r3, #0]
   8eb54:	4b15      	ldr	r3, [pc, #84]	; (8ebac <Cl_Temperature_Controller_Handler+0x194>)
   8eb56:	4611      	mov	r1, r2
   8eb58:	4798      	blx	r3
   8eb5a:	4603      	mov	r3, r0
   8eb5c:	461a      	mov	r2, r3
   8eb5e:	4b14      	ldr	r3, [pc, #80]	; (8ebb0 <Cl_Temperature_Controller_Handler+0x198>)
   8eb60:	601a      	str	r2, [r3, #0]
   8eb62:	e1ae      	b.n	8eec2 <Cl_Temperature_Controller_Handler+0x4aa>
   8eb64:	4b07      	ldr	r3, [pc, #28]	; (8eb84 <Cl_Temperature_Controller_Handler+0x16c>)
   8eb66:	781b      	ldrb	r3, [r3, #0]
   8eb68:	2b02      	cmp	r3, #2
   8eb6a:	f040 81aa 	bne.w	8eec2 <Cl_Temperature_Controller_Handler+0x4aa>
   8eb6e:	79fb      	ldrb	r3, [r7, #7]
   8eb70:	2b01      	cmp	r3, #1
   8eb72:	d01f      	beq.n	8ebb4 <Cl_Temperature_Controller_Handler+0x19c>
   8eb74:	2b03      	cmp	r3, #3
   8eb76:	f000 811c 	beq.w	8edb2 <Cl_Temperature_Controller_Handler+0x39a>
   8eb7a:	2b00      	cmp	r3, #0
   8eb7c:	f000 81a0 	beq.w	8eec0 <Cl_Temperature_Controller_Handler+0x4a8>
   8eb80:	e19f      	b.n	8eec2 <Cl_Temperature_Controller_Handler+0x4aa>
   8eb82:	bf00      	nop
   8eb84:	2007262c 	.word	0x2007262c
   8eb88:	20072622 	.word	0x20072622
   8eb8c:	2007261e 	.word	0x2007261e
   8eb90:	0008d6b1 	.word	0x0008d6b1
   8eb94:	20072620 	.word	0x20072620
   8eb98:	20072624 	.word	0x20072624
   8eb9c:	000a3d6d 	.word	0x000a3d6d
   8eba0:	000a3c05 	.word	0x000a3c05
   8eba4:	000a3f7d 	.word	0x000a3f7d
   8eba8:	00097a79 	.word	0x00097a79
   8ebac:	000a3c01 	.word	0x000a3c01
   8ebb0:	20072628 	.word	0x20072628
   8ebb4:	f107 0314 	add.w	r3, r7, #20
   8ebb8:	4619      	mov	r1, r3
   8ebba:	2012      	movs	r0, #18
   8ebbc:	4ba4      	ldr	r3, [pc, #656]	; (8ee50 <Cl_Temperature_Controller_Handler+0x438>)
   8ebbe:	4798      	blx	r3
   8ebc0:	8abb      	ldrh	r3, [r7, #20]
   8ebc2:	461a      	mov	r2, r3
   8ebc4:	f649 5308 	movw	r3, #40200	; 0x9d08
   8ebc8:	fb03 f302 	mul.w	r3, r3, r2
   8ebcc:	2b00      	cmp	r3, #0
   8ebce:	da02      	bge.n	8ebd6 <Cl_Temperature_Controller_Handler+0x1be>
   8ebd0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8ebd4:	33ff      	adds	r3, #255	; 0xff
   8ebd6:	141b      	asrs	r3, r3, #16
   8ebd8:	4618      	mov	r0, r3
   8ebda:	4b9e      	ldr	r3, [pc, #632]	; (8ee54 <Cl_Temperature_Controller_Handler+0x43c>)
   8ebdc:	4798      	blx	r3
   8ebde:	4b9e      	ldr	r3, [pc, #632]	; (8ee58 <Cl_Temperature_Controller_Handler+0x440>)
   8ebe0:	681a      	ldr	r2, [r3, #0]
   8ebe2:	4b9e      	ldr	r3, [pc, #632]	; (8ee5c <Cl_Temperature_Controller_Handler+0x444>)
   8ebe4:	499e      	ldr	r1, [pc, #632]	; (8ee60 <Cl_Temperature_Controller_Handler+0x448>)
   8ebe6:	4610      	mov	r0, r2
   8ebe8:	4798      	blx	r3
   8ebea:	4603      	mov	r3, r0
   8ebec:	461a      	mov	r2, r3
   8ebee:	4b9d      	ldr	r3, [pc, #628]	; (8ee64 <Cl_Temperature_Controller_Handler+0x44c>)
   8ebf0:	4610      	mov	r0, r2
   8ebf2:	4798      	blx	r3
   8ebf4:	4603      	mov	r3, r0
   8ebf6:	b29a      	uxth	r2, r3
   8ebf8:	4b9b      	ldr	r3, [pc, #620]	; (8ee68 <Cl_Temperature_Controller_Handler+0x450>)
   8ebfa:	801a      	strh	r2, [r3, #0]
   8ebfc:	4b9a      	ldr	r3, [pc, #616]	; (8ee68 <Cl_Temperature_Controller_Handler+0x450>)
   8ebfe:	881b      	ldrh	r3, [r3, #0]
   8ec00:	461a      	mov	r2, r3
   8ec02:	4b9a      	ldr	r3, [pc, #616]	; (8ee6c <Cl_Temperature_Controller_Handler+0x454>)
   8ec04:	4610      	mov	r0, r2
   8ec06:	4798      	blx	r3
   8ec08:	4c99      	ldr	r4, [pc, #612]	; (8ee70 <Cl_Temperature_Controller_Handler+0x458>)
   8ec0a:	a38d      	add	r3, pc, #564	; (adr r3, 8ee40 <Cl_Temperature_Controller_Handler+0x428>)
   8ec0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ec10:	47a0      	blx	r4
   8ec12:	4603      	mov	r3, r0
   8ec14:	460c      	mov	r4, r1
   8ec16:	4618      	mov	r0, r3
   8ec18:	4621      	mov	r1, r4
   8ec1a:	4c96      	ldr	r4, [pc, #600]	; (8ee74 <Cl_Temperature_Controller_Handler+0x45c>)
   8ec1c:	a38a      	add	r3, pc, #552	; (adr r3, 8ee48 <Cl_Temperature_Controller_Handler+0x430>)
   8ec1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ec22:	47a0      	blx	r4
   8ec24:	4603      	mov	r3, r0
   8ec26:	460c      	mov	r4, r1
   8ec28:	4619      	mov	r1, r3
   8ec2a:	4622      	mov	r2, r4
   8ec2c:	4b92      	ldr	r3, [pc, #584]	; (8ee78 <Cl_Temperature_Controller_Handler+0x460>)
   8ec2e:	4608      	mov	r0, r1
   8ec30:	4611      	mov	r1, r2
   8ec32:	4798      	blx	r3
   8ec34:	4603      	mov	r3, r0
   8ec36:	b29a      	uxth	r2, r3
   8ec38:	4b8b      	ldr	r3, [pc, #556]	; (8ee68 <Cl_Temperature_Controller_Handler+0x450>)
   8ec3a:	801a      	strh	r2, [r3, #0]
   8ec3c:	4b8a      	ldr	r3, [pc, #552]	; (8ee68 <Cl_Temperature_Controller_Handler+0x450>)
   8ec3e:	881b      	ldrh	r3, [r3, #0]
   8ec40:	461a      	mov	r2, r3
   8ec42:	4613      	mov	r3, r2
   8ec44:	00db      	lsls	r3, r3, #3
   8ec46:	4413      	add	r3, r2
   8ec48:	8aba      	ldrh	r2, [r7, #20]
   8ec4a:	4413      	add	r3, r2
   8ec4c:	4a8b      	ldr	r2, [pc, #556]	; (8ee7c <Cl_Temperature_Controller_Handler+0x464>)
   8ec4e:	fb82 1203 	smull	r1, r2, r2, r3
   8ec52:	1092      	asrs	r2, r2, #2
   8ec54:	17db      	asrs	r3, r3, #31
   8ec56:	1ad3      	subs	r3, r2, r3
   8ec58:	b29a      	uxth	r2, r3
   8ec5a:	4b83      	ldr	r3, [pc, #524]	; (8ee68 <Cl_Temperature_Controller_Handler+0x450>)
   8ec5c:	801a      	strh	r2, [r3, #0]
   8ec5e:	f107 0314 	add.w	r3, r7, #20
   8ec62:	4619      	mov	r1, r3
   8ec64:	2013      	movs	r0, #19
   8ec66:	4b7a      	ldr	r3, [pc, #488]	; (8ee50 <Cl_Temperature_Controller_Handler+0x438>)
   8ec68:	4798      	blx	r3
   8ec6a:	8abb      	ldrh	r3, [r7, #20]
   8ec6c:	461a      	mov	r2, r3
   8ec6e:	f649 5308 	movw	r3, #40200	; 0x9d08
   8ec72:	fb03 f302 	mul.w	r3, r3, r2
   8ec76:	2b00      	cmp	r3, #0
   8ec78:	da02      	bge.n	8ec80 <Cl_Temperature_Controller_Handler+0x268>
   8ec7a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8ec7e:	33ff      	adds	r3, #255	; 0xff
   8ec80:	141b      	asrs	r3, r3, #16
   8ec82:	4618      	mov	r0, r3
   8ec84:	4b73      	ldr	r3, [pc, #460]	; (8ee54 <Cl_Temperature_Controller_Handler+0x43c>)
   8ec86:	4798      	blx	r3
   8ec88:	4b73      	ldr	r3, [pc, #460]	; (8ee58 <Cl_Temperature_Controller_Handler+0x440>)
   8ec8a:	681a      	ldr	r2, [r3, #0]
   8ec8c:	4b73      	ldr	r3, [pc, #460]	; (8ee5c <Cl_Temperature_Controller_Handler+0x444>)
   8ec8e:	4974      	ldr	r1, [pc, #464]	; (8ee60 <Cl_Temperature_Controller_Handler+0x448>)
   8ec90:	4610      	mov	r0, r2
   8ec92:	4798      	blx	r3
   8ec94:	4603      	mov	r3, r0
   8ec96:	461a      	mov	r2, r3
   8ec98:	4b72      	ldr	r3, [pc, #456]	; (8ee64 <Cl_Temperature_Controller_Handler+0x44c>)
   8ec9a:	4610      	mov	r0, r2
   8ec9c:	4798      	blx	r3
   8ec9e:	4603      	mov	r3, r0
   8eca0:	b29a      	uxth	r2, r3
   8eca2:	4b77      	ldr	r3, [pc, #476]	; (8ee80 <Cl_Temperature_Controller_Handler+0x468>)
   8eca4:	801a      	strh	r2, [r3, #0]
   8eca6:	4b76      	ldr	r3, [pc, #472]	; (8ee80 <Cl_Temperature_Controller_Handler+0x468>)
   8eca8:	881b      	ldrh	r3, [r3, #0]
   8ecaa:	461a      	mov	r2, r3
   8ecac:	4b6f      	ldr	r3, [pc, #444]	; (8ee6c <Cl_Temperature_Controller_Handler+0x454>)
   8ecae:	4610      	mov	r0, r2
   8ecb0:	4798      	blx	r3
   8ecb2:	4c6f      	ldr	r4, [pc, #444]	; (8ee70 <Cl_Temperature_Controller_Handler+0x458>)
   8ecb4:	f04f 0200 	mov.w	r2, #0
   8ecb8:	4b72      	ldr	r3, [pc, #456]	; (8ee84 <Cl_Temperature_Controller_Handler+0x46c>)
   8ecba:	47a0      	blx	r4
   8ecbc:	4603      	mov	r3, r0
   8ecbe:	460c      	mov	r4, r1
   8ecc0:	4618      	mov	r0, r3
   8ecc2:	4621      	mov	r1, r4
   8ecc4:	4c6b      	ldr	r4, [pc, #428]	; (8ee74 <Cl_Temperature_Controller_Handler+0x45c>)
   8ecc6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   8ecca:	4b6f      	ldr	r3, [pc, #444]	; (8ee88 <Cl_Temperature_Controller_Handler+0x470>)
   8eccc:	47a0      	blx	r4
   8ecce:	4603      	mov	r3, r0
   8ecd0:	460c      	mov	r4, r1
   8ecd2:	4619      	mov	r1, r3
   8ecd4:	4622      	mov	r2, r4
   8ecd6:	4b68      	ldr	r3, [pc, #416]	; (8ee78 <Cl_Temperature_Controller_Handler+0x460>)
   8ecd8:	4608      	mov	r0, r1
   8ecda:	4611      	mov	r1, r2
   8ecdc:	4798      	blx	r3
   8ecde:	4603      	mov	r3, r0
   8ece0:	b29a      	uxth	r2, r3
   8ece2:	4b67      	ldr	r3, [pc, #412]	; (8ee80 <Cl_Temperature_Controller_Handler+0x468>)
   8ece4:	801a      	strh	r2, [r3, #0]
   8ece6:	4b66      	ldr	r3, [pc, #408]	; (8ee80 <Cl_Temperature_Controller_Handler+0x468>)
   8ece8:	881b      	ldrh	r3, [r3, #0]
   8ecea:	461a      	mov	r2, r3
   8ecec:	4613      	mov	r3, r2
   8ecee:	00db      	lsls	r3, r3, #3
   8ecf0:	4413      	add	r3, r2
   8ecf2:	8aba      	ldrh	r2, [r7, #20]
   8ecf4:	4413      	add	r3, r2
   8ecf6:	4a61      	ldr	r2, [pc, #388]	; (8ee7c <Cl_Temperature_Controller_Handler+0x464>)
   8ecf8:	fb82 1203 	smull	r1, r2, r2, r3
   8ecfc:	1092      	asrs	r2, r2, #2
   8ecfe:	17db      	asrs	r3, r3, #31
   8ed00:	1ad3      	subs	r3, r2, r3
   8ed02:	b29a      	uxth	r2, r3
   8ed04:	4b5e      	ldr	r3, [pc, #376]	; (8ee80 <Cl_Temperature_Controller_Handler+0x468>)
   8ed06:	801a      	strh	r2, [r3, #0]
   8ed08:	f107 0314 	add.w	r3, r7, #20
   8ed0c:	4619      	mov	r1, r3
   8ed0e:	2014      	movs	r0, #20
   8ed10:	4b4f      	ldr	r3, [pc, #316]	; (8ee50 <Cl_Temperature_Controller_Handler+0x438>)
   8ed12:	4798      	blx	r3
   8ed14:	8abb      	ldrh	r3, [r7, #20]
   8ed16:	461a      	mov	r2, r3
   8ed18:	f649 5308 	movw	r3, #40200	; 0x9d08
   8ed1c:	fb03 f302 	mul.w	r3, r3, r2
   8ed20:	2b00      	cmp	r3, #0
   8ed22:	da02      	bge.n	8ed2a <Cl_Temperature_Controller_Handler+0x312>
   8ed24:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8ed28:	33ff      	adds	r3, #255	; 0xff
   8ed2a:	141b      	asrs	r3, r3, #16
   8ed2c:	4618      	mov	r0, r3
   8ed2e:	4b49      	ldr	r3, [pc, #292]	; (8ee54 <Cl_Temperature_Controller_Handler+0x43c>)
   8ed30:	4798      	blx	r3
   8ed32:	4b49      	ldr	r3, [pc, #292]	; (8ee58 <Cl_Temperature_Controller_Handler+0x440>)
   8ed34:	681a      	ldr	r2, [r3, #0]
   8ed36:	4b49      	ldr	r3, [pc, #292]	; (8ee5c <Cl_Temperature_Controller_Handler+0x444>)
   8ed38:	4949      	ldr	r1, [pc, #292]	; (8ee60 <Cl_Temperature_Controller_Handler+0x448>)
   8ed3a:	4610      	mov	r0, r2
   8ed3c:	4798      	blx	r3
   8ed3e:	4603      	mov	r3, r0
   8ed40:	461a      	mov	r2, r3
   8ed42:	4b52      	ldr	r3, [pc, #328]	; (8ee8c <Cl_Temperature_Controller_Handler+0x474>)
   8ed44:	601a      	str	r2, [r3, #0]
   8ed46:	4b51      	ldr	r3, [pc, #324]	; (8ee8c <Cl_Temperature_Controller_Handler+0x474>)
   8ed48:	681a      	ldr	r2, [r3, #0]
   8ed4a:	4b51      	ldr	r3, [pc, #324]	; (8ee90 <Cl_Temperature_Controller_Handler+0x478>)
   8ed4c:	4610      	mov	r0, r2
   8ed4e:	4798      	blx	r3
   8ed50:	4c47      	ldr	r4, [pc, #284]	; (8ee70 <Cl_Temperature_Controller_Handler+0x458>)
   8ed52:	a33b      	add	r3, pc, #236	; (adr r3, 8ee40 <Cl_Temperature_Controller_Handler+0x428>)
   8ed54:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ed58:	47a0      	blx	r4
   8ed5a:	4603      	mov	r3, r0
   8ed5c:	460c      	mov	r4, r1
   8ed5e:	4618      	mov	r0, r3
   8ed60:	4621      	mov	r1, r4
   8ed62:	4c44      	ldr	r4, [pc, #272]	; (8ee74 <Cl_Temperature_Controller_Handler+0x45c>)
   8ed64:	a338      	add	r3, pc, #224	; (adr r3, 8ee48 <Cl_Temperature_Controller_Handler+0x430>)
   8ed66:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ed6a:	47a0      	blx	r4
   8ed6c:	4603      	mov	r3, r0
   8ed6e:	460c      	mov	r4, r1
   8ed70:	4619      	mov	r1, r3
   8ed72:	4622      	mov	r2, r4
   8ed74:	4b47      	ldr	r3, [pc, #284]	; (8ee94 <Cl_Temperature_Controller_Handler+0x47c>)
   8ed76:	4608      	mov	r0, r1
   8ed78:	4611      	mov	r1, r2
   8ed7a:	4798      	blx	r3
   8ed7c:	4602      	mov	r2, r0
   8ed7e:	4b43      	ldr	r3, [pc, #268]	; (8ee8c <Cl_Temperature_Controller_Handler+0x474>)
   8ed80:	601a      	str	r2, [r3, #0]
   8ed82:	4b42      	ldr	r3, [pc, #264]	; (8ee8c <Cl_Temperature_Controller_Handler+0x474>)
   8ed84:	681a      	ldr	r2, [r3, #0]
   8ed86:	4b44      	ldr	r3, [pc, #272]	; (8ee98 <Cl_Temperature_Controller_Handler+0x480>)
   8ed88:	4944      	ldr	r1, [pc, #272]	; (8ee9c <Cl_Temperature_Controller_Handler+0x484>)
   8ed8a:	4610      	mov	r0, r2
   8ed8c:	4798      	blx	r3
   8ed8e:	4603      	mov	r3, r0
   8ed90:	4618      	mov	r0, r3
   8ed92:	4b43      	ldr	r3, [pc, #268]	; (8eea0 <Cl_Temperature_Controller_Handler+0x488>)
   8ed94:	681a      	ldr	r2, [r3, #0]
   8ed96:	4b43      	ldr	r3, [pc, #268]	; (8eea4 <Cl_Temperature_Controller_Handler+0x48c>)
   8ed98:	4611      	mov	r1, r2
   8ed9a:	4798      	blx	r3
   8ed9c:	4603      	mov	r3, r0
   8ed9e:	461a      	mov	r2, r3
   8eda0:	4b2e      	ldr	r3, [pc, #184]	; (8ee5c <Cl_Temperature_Controller_Handler+0x444>)
   8eda2:	4941      	ldr	r1, [pc, #260]	; (8eea8 <Cl_Temperature_Controller_Handler+0x490>)
   8eda4:	4610      	mov	r0, r2
   8eda6:	4798      	blx	r3
   8eda8:	4603      	mov	r3, r0
   8edaa:	461a      	mov	r2, r3
   8edac:	4b37      	ldr	r3, [pc, #220]	; (8ee8c <Cl_Temperature_Controller_Handler+0x474>)
   8edae:	601a      	str	r2, [r3, #0]
   8edb0:	e087      	b.n	8eec2 <Cl_Temperature_Controller_Handler+0x4aa>
   8edb2:	2300      	movs	r3, #0
   8edb4:	827b      	strh	r3, [r7, #18]
   8edb6:	f04f 0300 	mov.w	r3, #0
   8edba:	61bb      	str	r3, [r7, #24]
   8edbc:	2300      	movs	r3, #0
   8edbe:	82fb      	strh	r3, [r7, #22]
   8edc0:	f107 0312 	add.w	r3, r7, #18
   8edc4:	4619      	mov	r1, r3
   8edc6:	2014      	movs	r0, #20
   8edc8:	4b21      	ldr	r3, [pc, #132]	; (8ee50 <Cl_Temperature_Controller_Handler+0x438>)
   8edca:	4798      	blx	r3
   8edcc:	8abb      	ldrh	r3, [r7, #20]
   8edce:	461a      	mov	r2, r3
   8edd0:	f649 5308 	movw	r3, #40200	; 0x9d08
   8edd4:	fb03 f302 	mul.w	r3, r3, r2
   8edd8:	2b00      	cmp	r3, #0
   8edda:	da02      	bge.n	8ede2 <Cl_Temperature_Controller_Handler+0x3ca>
   8eddc:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8ede0:	33ff      	adds	r3, #255	; 0xff
   8ede2:	141b      	asrs	r3, r3, #16
   8ede4:	4618      	mov	r0, r3
   8ede6:	4b1b      	ldr	r3, [pc, #108]	; (8ee54 <Cl_Temperature_Controller_Handler+0x43c>)
   8ede8:	4798      	blx	r3
   8edea:	4b1b      	ldr	r3, [pc, #108]	; (8ee58 <Cl_Temperature_Controller_Handler+0x440>)
   8edec:	681a      	ldr	r2, [r3, #0]
   8edee:	4b1b      	ldr	r3, [pc, #108]	; (8ee5c <Cl_Temperature_Controller_Handler+0x444>)
   8edf0:	491b      	ldr	r1, [pc, #108]	; (8ee60 <Cl_Temperature_Controller_Handler+0x448>)
   8edf2:	4610      	mov	r0, r2
   8edf4:	4798      	blx	r3
   8edf6:	4603      	mov	r3, r0
   8edf8:	61bb      	str	r3, [r7, #24]
   8edfa:	4b2c      	ldr	r3, [pc, #176]	; (8eeac <Cl_Temperature_Controller_Handler+0x494>)
   8edfc:	492c      	ldr	r1, [pc, #176]	; (8eeb0 <Cl_Temperature_Controller_Handler+0x498>)
   8edfe:	69b8      	ldr	r0, [r7, #24]
   8ee00:	4798      	blx	r3
   8ee02:	4603      	mov	r3, r0
   8ee04:	461a      	mov	r2, r3
   8ee06:	4b27      	ldr	r3, [pc, #156]	; (8eea4 <Cl_Temperature_Controller_Handler+0x48c>)
   8ee08:	492a      	ldr	r1, [pc, #168]	; (8eeb4 <Cl_Temperature_Controller_Handler+0x49c>)
   8ee0a:	4610      	mov	r0, r2
   8ee0c:	4798      	blx	r3
   8ee0e:	4603      	mov	r3, r0
   8ee10:	61bb      	str	r3, [r7, #24]
   8ee12:	2300      	movs	r3, #0
   8ee14:	60fb      	str	r3, [r7, #12]
   8ee16:	4b13      	ldr	r3, [pc, #76]	; (8ee64 <Cl_Temperature_Controller_Handler+0x44c>)
   8ee18:	69b8      	ldr	r0, [r7, #24]
   8ee1a:	4798      	blx	r3
   8ee1c:	4603      	mov	r3, r0
   8ee1e:	b29b      	uxth	r3, r3
   8ee20:	81bb      	strh	r3, [r7, #12]
   8ee22:	231f      	movs	r3, #31
   8ee24:	73bb      	strb	r3, [r7, #14]
   8ee26:	f107 030c 	add.w	r3, r7, #12
   8ee2a:	2204      	movs	r2, #4
   8ee2c:	4619      	mov	r1, r3
   8ee2e:	2037      	movs	r0, #55	; 0x37
   8ee30:	4b21      	ldr	r3, [pc, #132]	; (8eeb8 <Cl_Temperature_Controller_Handler+0x4a0>)
   8ee32:	4798      	blx	r3
   8ee34:	e045      	b.n	8eec2 <Cl_Temperature_Controller_Handler+0x4aa>
   8ee36:	bf00      	nop
   8ee38:	e043      	b.n	8eec2 <Cl_Temperature_Controller_Handler+0x4aa>
   8ee3a:	bf00      	nop
   8ee3c:	f3af 8000 	nop.w
   8ee40:	cccccccd 	.word	0xcccccccd
   8ee44:	4008cccc 	.word	0x4008cccc
   8ee48:	66666666 	.word	0x66666666
   8ee4c:	3ff66666 	.word	0x3ff66666
   8ee50:	0008d6b1 	.word	0x0008d6b1
   8ee54:	0008e8e1 	.word	0x0008e8e1
   8ee58:	20072630 	.word	0x20072630
   8ee5c:	000a3f7d 	.word	0x000a3f7d
   8ee60:	42c80000 	.word	0x42c80000
   8ee64:	000a41ed 	.word	0x000a41ed
   8ee68:	2007261e 	.word	0x2007261e
   8ee6c:	000a34c9 	.word	0x000a34c9
   8ee70:	000a322d 	.word	0x000a322d
   8ee74:	000a3231 	.word	0x000a3231
   8ee78:	000a3b19 	.word	0x000a3b19
   8ee7c:	66666667 	.word	0x66666667
   8ee80:	20072620 	.word	0x20072620
   8ee84:	40040000 	.word	0x40040000
   8ee88:	3ff33333 	.word	0x3ff33333
   8ee8c:	20072624 	.word	0x20072624
   8ee90:	000a34ed 	.word	0x000a34ed
   8ee94:	000a3b59 	.word	0x000a3b59
   8ee98:	000a3e15 	.word	0x000a3e15
   8ee9c:	40a00000 	.word	0x40a00000
   8eea0:	20071670 	.word	0x20071670
   8eea4:	000a3c05 	.word	0x000a3c05
   8eea8:	40c00000 	.word	0x40c00000
   8eeac:	000a3c01 	.word	0x000a3c01
   8eeb0:	41f80000 	.word	0x41f80000
   8eeb4:	41600000 	.word	0x41600000
   8eeb8:	00099729 	.word	0x00099729
   8eebc:	bf00      	nop
   8eebe:	e000      	b.n	8eec2 <Cl_Temperature_Controller_Handler+0x4aa>
   8eec0:	bf00      	nop
   8eec2:	7ffb      	ldrb	r3, [r7, #31]
   8eec4:	4618      	mov	r0, r3
   8eec6:	372c      	adds	r7, #44	; 0x2c
   8eec8:	46bd      	mov	sp, r7
   8eeca:	bd90      	pop	{r4, r7, pc}

0008eecc <Cl_Temperature_Controller_Init>:
   8eecc:	b480      	push	{r7}
   8eece:	b083      	sub	sp, #12
   8eed0:	af00      	add	r7, sp, #0
   8eed2:	2300      	movs	r3, #0
   8eed4:	71fb      	strb	r3, [r7, #7]
   8eed6:	4b09      	ldr	r3, [pc, #36]	; (8eefc <Cl_Temperature_Controller_Init+0x30>)
   8eed8:	2200      	movs	r2, #0
   8eeda:	801a      	strh	r2, [r3, #0]
   8eedc:	4b08      	ldr	r3, [pc, #32]	; (8ef00 <Cl_Temperature_Controller_Init+0x34>)
   8eede:	2200      	movs	r2, #0
   8eee0:	801a      	strh	r2, [r3, #0]
   8eee2:	4b08      	ldr	r3, [pc, #32]	; (8ef04 <Cl_Temperature_Controller_Init+0x38>)
   8eee4:	f04f 0200 	mov.w	r2, #0
   8eee8:	601a      	str	r2, [r3, #0]
   8eeea:	4b07      	ldr	r3, [pc, #28]	; (8ef08 <Cl_Temperature_Controller_Init+0x3c>)
   8eeec:	2201      	movs	r2, #1
   8eeee:	701a      	strb	r2, [r3, #0]
   8eef0:	79fb      	ldrb	r3, [r7, #7]
   8eef2:	4618      	mov	r0, r3
   8eef4:	370c      	adds	r7, #12
   8eef6:	46bd      	mov	sp, r7
   8eef8:	bc80      	pop	{r7}
   8eefa:	4770      	bx	lr
   8eefc:	2007261e 	.word	0x2007261e
   8ef00:	20072620 	.word	0x20072620
   8ef04:	20072624 	.word	0x20072624
   8ef08:	2007262c 	.word	0x2007262c
   8ef0c:	00000000 	.word	0x00000000

0008ef10 <cl_testharnesscommandhandler>:
   8ef10:	b590      	push	{r4, r7, lr}
   8ef12:	b0c9      	sub	sp, #292	; 0x124
   8ef14:	af00      	add	r7, sp, #0
   8ef16:	1d3b      	adds	r3, r7, #4
   8ef18:	6018      	str	r0, [r3, #0]
   8ef1a:	2304      	movs	r3, #4
   8ef1c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8ef20:	2300      	movs	r3, #0
   8ef22:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
   8ef26:	2300      	movs	r3, #0
   8ef28:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
   8ef2c:	2300      	movs	r3, #0
   8ef2e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
   8ef32:	2300      	movs	r3, #0
   8ef34:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
   8ef38:	2300      	movs	r3, #0
   8ef3a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
   8ef3e:	2300      	movs	r3, #0
   8ef40:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
   8ef44:	2300      	movs	r3, #0
   8ef46:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8ef4a:	2300      	movs	r3, #0
   8ef4c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
   8ef50:	2300      	movs	r3, #0
   8ef52:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
   8ef56:	2300      	movs	r3, #0
   8ef58:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
   8ef5c:	2300      	movs	r3, #0
   8ef5e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
   8ef62:	2300      	movs	r3, #0
   8ef64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   8ef68:	2300      	movs	r3, #0
   8ef6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8ef6e:	e01c      	b.n	8efaa <cl_testharnesscommandhandler+0x9a>
   8ef70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ef74:	f507 7290 	add.w	r2, r7, #288	; 0x120
   8ef78:	4413      	add	r3, r2
   8ef7a:	2200      	movs	r2, #0
   8ef7c:	f803 2c88 	strb.w	r2, [r3, #-136]
   8ef80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ef84:	f507 7290 	add.w	r2, r7, #288	; 0x120
   8ef88:	4413      	add	r3, r2
   8ef8a:	2200      	movs	r2, #0
   8ef8c:	f803 2ca8 	strb.w	r2, [r3, #-168]
   8ef90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ef94:	f507 7290 	add.w	r2, r7, #288	; 0x120
   8ef98:	4413      	add	r3, r2
   8ef9a:	2200      	movs	r2, #0
   8ef9c:	f803 2cbc 	strb.w	r2, [r3, #-188]
   8efa0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8efa4:	3301      	adds	r3, #1
   8efa6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8efaa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8efae:	2b13      	cmp	r3, #19
   8efb0:	d9de      	bls.n	8ef70 <cl_testharnesscommandhandler+0x60>
   8efb2:	1d3b      	adds	r3, r7, #4
   8efb4:	681b      	ldr	r3, [r3, #0]
   8efb6:	78db      	ldrb	r3, [r3, #3]
   8efb8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
   8efbc:	2300      	movs	r3, #0
   8efbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8efc2:	e01e      	b.n	8f002 <cl_testharnesscommandhandler+0xf2>
   8efc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8efc8:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   8efcc:	1d39      	adds	r1, r7, #4
   8efce:	6809      	ldr	r1, [r1, #0]
   8efd0:	440a      	add	r2, r1
   8efd2:	7912      	ldrb	r2, [r2, #4]
   8efd4:	f507 7190 	add.w	r1, r7, #288	; 0x120
   8efd8:	440b      	add	r3, r1
   8efda:	f803 2c88 	strb.w	r2, [r3, #-136]
   8efde:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8efe2:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   8efe6:	1d39      	adds	r1, r7, #4
   8efe8:	6809      	ldr	r1, [r1, #0]
   8efea:	440a      	add	r2, r1
   8efec:	7912      	ldrb	r2, [r2, #4]
   8efee:	f507 7190 	add.w	r1, r7, #288	; 0x120
   8eff2:	440b      	add	r3, r1
   8eff4:	f803 2ca8 	strb.w	r2, [r3, #-168]
   8eff8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8effc:	3301      	adds	r3, #1
   8effe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8f002:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f006:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   8f00a:	429a      	cmp	r2, r3
   8f00c:	d3da      	bcc.n	8efc4 <cl_testharnesscommandhandler+0xb4>
   8f00e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
   8f012:	2b6e      	cmp	r3, #110	; 0x6e
   8f014:	f202 83f6 	bhi.w	91804 <cl_testharnesscommandhandler+0x28f4>
   8f018:	a201      	add	r2, pc, #4	; (adr r2, 8f020 <cl_testharnesscommandhandler+0x110>)
   8f01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8f01e:	bf00      	nop
   8f020:	0008f327 	.word	0x0008f327
   8f024:	0008f33b 	.word	0x0008f33b
   8f028:	0008f351 	.word	0x0008f351
   8f02c:	00091805 	.word	0x00091805
   8f030:	00091805 	.word	0x00091805
   8f034:	00091805 	.word	0x00091805
   8f038:	00091805 	.word	0x00091805
   8f03c:	0008f367 	.word	0x0008f367
   8f040:	0008f387 	.word	0x0008f387
   8f044:	0008f3a7 	.word	0x0008f3a7
   8f048:	0008f3c7 	.word	0x0008f3c7
   8f04c:	0008f3e7 	.word	0x0008f3e7
   8f050:	0008f3f5 	.word	0x0008f3f5
   8f054:	0008f403 	.word	0x0008f403
   8f058:	0008f4ad 	.word	0x0008f4ad
   8f05c:	0008f4bb 	.word	0x0008f4bb
   8f060:	0008f4cf 	.word	0x0008f4cf
   8f064:	0008f515 	.word	0x0008f515
   8f068:	0008f523 	.word	0x0008f523
   8f06c:	0008f425 	.word	0x0008f425
   8f070:	0008f459 	.word	0x0008f459
   8f074:	0008f573 	.word	0x0008f573
   8f078:	0008f5c1 	.word	0x0008f5c1
   8f07c:	0008f7ef 	.word	0x0008f7ef
   8f080:	0008f8f1 	.word	0x0008f8f1
   8f084:	0008f913 	.word	0x0008f913
   8f088:	0008f935 	.word	0x0008f935
   8f08c:	0008fa33 	.word	0x0008fa33
   8f090:	0008fa77 	.word	0x0008fa77
   8f094:	0008fa99 	.word	0x0008fa99
   8f098:	0008faeb 	.word	0x0008faeb
   8f09c:	0008fb43 	.word	0x0008fb43
   8f0a0:	0008fbc5 	.word	0x0008fbc5
   8f0a4:	0008fbe7 	.word	0x0008fbe7
   8f0a8:	0008fcab 	.word	0x0008fcab
   8f0ac:	0008fcbf 	.word	0x0008fcbf
   8f0b0:	0008fcd9 	.word	0x0008fcd9
   8f0b4:	0008fcf3 	.word	0x0008fcf3
   8f0b8:	0008fd09 	.word	0x0008fd09
   8f0bc:	0008fdf3 	.word	0x0008fdf3
   8f0c0:	00091805 	.word	0x00091805
   8f0c4:	0008fdaf 	.word	0x0008fdaf
   8f0c8:	0008fdd3 	.word	0x0008fdd3
   8f0cc:	0008fe33 	.word	0x0008fe33
   8f0d0:	0008fe55 	.word	0x0008fe55
   8f0d4:	0008fe77 	.word	0x0008fe77
   8f0d8:	0008ff35 	.word	0x0008ff35
   8f0dc:	0008f8a5 	.word	0x0008f8a5
   8f0e0:	0008f987 	.word	0x0008f987
   8f0e4:	00091805 	.word	0x00091805
   8f0e8:	00091805 	.word	0x00091805
   8f0ec:	0008ff99 	.word	0x0008ff99
   8f0f0:	0008ffd3 	.word	0x0008ffd3
   8f0f4:	00090131 	.word	0x00090131
   8f0f8:	0009000d 	.word	0x0009000d
   8f0fc:	00090053 	.word	0x00090053
   8f100:	00090099 	.word	0x00090099
   8f104:	000900e5 	.word	0x000900e5
   8f108:	000901c1 	.word	0x000901c1
   8f10c:	00090219 	.word	0x00090219
   8f110:	0009029f 	.word	0x0009029f
   8f114:	00090247 	.word	0x00090247
   8f118:	000911bf 	.word	0x000911bf
   8f11c:	0008f531 	.word	0x0008f531
   8f120:	0008f54d 	.word	0x0008f54d
   8f124:	000902b5 	.word	0x000902b5
   8f128:	000902c1 	.word	0x000902c1
   8f12c:	00090313 	.word	0x00090313
   8f130:	00090335 	.word	0x00090335
   8f134:	00090343 	.word	0x00090343
   8f138:	00090369 	.word	0x00090369
   8f13c:	00090373 	.word	0x00090373
   8f140:	0008f9d3 	.word	0x0008f9d3
   8f144:	0009039b 	.word	0x0009039b
   8f148:	00091805 	.word	0x00091805
   8f14c:	000903b7 	.word	0x000903b7
   8f150:	000903cd 	.word	0x000903cd
   8f154:	0008f411 	.word	0x0008f411
   8f158:	0008f41b 	.word	0x0008f41b
   8f15c:	000902cd 	.word	0x000902cd
   8f160:	000903d5 	.word	0x000903d5
   8f164:	0008faff 	.word	0x0008faff
   8f168:	0008fb21 	.word	0x0008fb21
   8f16c:	0008ff1d 	.word	0x0008ff1d
   8f170:	0008f595 	.word	0x0008f595
   8f174:	0008f5e3 	.word	0x0008f5e3
   8f178:	0008fc3b 	.word	0x0008fc3b
   8f17c:	0008fc73 	.word	0x0008fc73
   8f180:	00091805 	.word	0x00091805
   8f184:	0008f299 	.word	0x0008f299
   8f188:	0008f1f1 	.word	0x0008f1f1
   8f18c:	0008f21f 	.word	0x0008f21f
   8f190:	0008f24d 	.word	0x0008f24d
   8f194:	00090415 	.word	0x00090415
   8f198:	00090429 	.word	0x00090429
   8f19c:	000903fd 	.word	0x000903fd
   8f1a0:	00090405 	.word	0x00090405
   8f1a4:	0008f1dd 	.word	0x0008f1dd
   8f1a8:	0008f1e7 	.word	0x0008f1e7
   8f1ac:	0008fd1f 	.word	0x0008fd1f
   8f1b0:	0008fd41 	.word	0x0008fd41
   8f1b4:	00090437 	.word	0x00090437
   8f1b8:	0009043f 	.word	0x0009043f
   8f1bc:	00090447 	.word	0x00090447
   8f1c0:	00090453 	.word	0x00090453
   8f1c4:	0009045f 	.word	0x0009045f
   8f1c8:	0008f65f 	.word	0x0008f65f
   8f1cc:	0008f72b 	.word	0x0008f72b
   8f1d0:	0008f6db 	.word	0x0008f6db
   8f1d4:	00091805 	.word	0x00091805
   8f1d8:	00091805 	.word	0x00091805
   8f1dc:	4bbf      	ldr	r3, [pc, #764]	; (8f4dc <cl_testharnesscommandhandler+0x5cc>)
   8f1de:	2201      	movs	r2, #1
   8f1e0:	701a      	strb	r2, [r3, #0]
   8f1e2:	f002 bb16 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f1e6:	4bbd      	ldr	r3, [pc, #756]	; (8f4dc <cl_testharnesscommandhandler+0x5cc>)
   8f1e8:	2200      	movs	r2, #0
   8f1ea:	701a      	strb	r2, [r3, #0]
   8f1ec:	f002 bb11 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f1f0:	4bbb      	ldr	r3, [pc, #748]	; (8f4e0 <cl_testharnesscommandhandler+0x5d0>)
   8f1f2:	781a      	ldrb	r2, [r3, #0]
   8f1f4:	4bbb      	ldr	r3, [pc, #748]	; (8f4e4 <cl_testharnesscommandhandler+0x5d4>)
   8f1f6:	701a      	strb	r2, [r3, #0]
   8f1f8:	4bb9      	ldr	r3, [pc, #740]	; (8f4e0 <cl_testharnesscommandhandler+0x5d0>)
   8f1fa:	2201      	movs	r2, #1
   8f1fc:	701a      	strb	r2, [r3, #0]
   8f1fe:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
   8f202:	4bb9      	ldr	r3, [pc, #740]	; (8f4e8 <cl_testharnesscommandhandler+0x5d8>)
   8f204:	701a      	strb	r2, [r3, #0]
   8f206:	4bb8      	ldr	r3, [pc, #736]	; (8f4e8 <cl_testharnesscommandhandler+0x5d8>)
   8f208:	781b      	ldrb	r3, [r3, #0]
   8f20a:	2101      	movs	r1, #1
   8f20c:	4618      	mov	r0, r3
   8f20e:	4bb7      	ldr	r3, [pc, #732]	; (8f4ec <cl_testharnesscommandhandler+0x5dc>)
   8f210:	4798      	blx	r3
   8f212:	4bb4      	ldr	r3, [pc, #720]	; (8f4e4 <cl_testharnesscommandhandler+0x5d4>)
   8f214:	781a      	ldrb	r2, [r3, #0]
   8f216:	4bb2      	ldr	r3, [pc, #712]	; (8f4e0 <cl_testharnesscommandhandler+0x5d0>)
   8f218:	701a      	strb	r2, [r3, #0]
   8f21a:	f002 bafa 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f21e:	4bb0      	ldr	r3, [pc, #704]	; (8f4e0 <cl_testharnesscommandhandler+0x5d0>)
   8f220:	781a      	ldrb	r2, [r3, #0]
   8f222:	4bb0      	ldr	r3, [pc, #704]	; (8f4e4 <cl_testharnesscommandhandler+0x5d4>)
   8f224:	701a      	strb	r2, [r3, #0]
   8f226:	4bae      	ldr	r3, [pc, #696]	; (8f4e0 <cl_testharnesscommandhandler+0x5d0>)
   8f228:	2201      	movs	r2, #1
   8f22a:	701a      	strb	r2, [r3, #0]
   8f22c:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
   8f230:	4bad      	ldr	r3, [pc, #692]	; (8f4e8 <cl_testharnesscommandhandler+0x5d8>)
   8f232:	701a      	strb	r2, [r3, #0]
   8f234:	4bac      	ldr	r3, [pc, #688]	; (8f4e8 <cl_testharnesscommandhandler+0x5d8>)
   8f236:	781b      	ldrb	r3, [r3, #0]
   8f238:	2100      	movs	r1, #0
   8f23a:	4618      	mov	r0, r3
   8f23c:	4bab      	ldr	r3, [pc, #684]	; (8f4ec <cl_testharnesscommandhandler+0x5dc>)
   8f23e:	4798      	blx	r3
   8f240:	4ba8      	ldr	r3, [pc, #672]	; (8f4e4 <cl_testharnesscommandhandler+0x5d4>)
   8f242:	781a      	ldrb	r2, [r3, #0]
   8f244:	4ba6      	ldr	r3, [pc, #664]	; (8f4e0 <cl_testharnesscommandhandler+0x5d0>)
   8f246:	701a      	strb	r2, [r3, #0]
   8f248:	f002 bae3 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f24c:	4ba4      	ldr	r3, [pc, #656]	; (8f4e0 <cl_testharnesscommandhandler+0x5d0>)
   8f24e:	781a      	ldrb	r2, [r3, #0]
   8f250:	4ba4      	ldr	r3, [pc, #656]	; (8f4e4 <cl_testharnesscommandhandler+0x5d4>)
   8f252:	701a      	strb	r2, [r3, #0]
   8f254:	4ba2      	ldr	r3, [pc, #648]	; (8f4e0 <cl_testharnesscommandhandler+0x5d0>)
   8f256:	2201      	movs	r2, #1
   8f258:	701a      	strb	r2, [r3, #0]
   8f25a:	2300      	movs	r3, #0
   8f25c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8f260:	e008      	b.n	8f274 <cl_testharnesscommandhandler+0x364>
   8f262:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8f266:	1c5a      	adds	r2, r3, #1
   8f268:	f887 211f 	strb.w	r2, [r7, #287]	; 0x11f
   8f26c:	2100      	movs	r1, #0
   8f26e:	4618      	mov	r0, r3
   8f270:	4b9e      	ldr	r3, [pc, #632]	; (8f4ec <cl_testharnesscommandhandler+0x5dc>)
   8f272:	4798      	blx	r3
   8f274:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8f278:	2b41      	cmp	r3, #65	; 0x41
   8f27a:	d9f2      	bls.n	8f262 <cl_testharnesscommandhandler+0x352>
   8f27c:	4b98      	ldr	r3, [pc, #608]	; (8f4e0 <cl_testharnesscommandhandler+0x5d0>)
   8f27e:	2200      	movs	r2, #0
   8f280:	701a      	strb	r2, [r3, #0]
   8f282:	4b9b      	ldr	r3, [pc, #620]	; (8f4f0 <cl_testharnesscommandhandler+0x5e0>)
   8f284:	f9b3 3000 	ldrsh.w	r3, [r3]
   8f288:	b29b      	uxth	r3, r3
   8f28a:	3301      	adds	r3, #1
   8f28c:	b29b      	uxth	r3, r3
   8f28e:	b21a      	sxth	r2, r3
   8f290:	4b97      	ldr	r3, [pc, #604]	; (8f4f0 <cl_testharnesscommandhandler+0x5e0>)
   8f292:	801a      	strh	r2, [r3, #0]
   8f294:	f002 babd 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f298:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f29c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f2a0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f2a4:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f2a8:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   8f2ac:	f003 0301 	and.w	r3, r3, #1
   8f2b0:	2b00      	cmp	r3, #0
   8f2b2:	d004      	beq.n	8f2be <cl_testharnesscommandhandler+0x3ae>
   8f2b4:	4b8f      	ldr	r3, [pc, #572]	; (8f4f4 <cl_testharnesscommandhandler+0x5e4>)
   8f2b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8f2ba:	631a      	str	r2, [r3, #48]	; 0x30
   8f2bc:	e003      	b.n	8f2c6 <cl_testharnesscommandhandler+0x3b6>
   8f2be:	4b8d      	ldr	r3, [pc, #564]	; (8f4f4 <cl_testharnesscommandhandler+0x5e4>)
   8f2c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8f2c4:	635a      	str	r2, [r3, #52]	; 0x34
   8f2c6:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   8f2ca:	f003 0302 	and.w	r3, r3, #2
   8f2ce:	2b00      	cmp	r3, #0
   8f2d0:	d004      	beq.n	8f2dc <cl_testharnesscommandhandler+0x3cc>
   8f2d2:	4b88      	ldr	r3, [pc, #544]	; (8f4f4 <cl_testharnesscommandhandler+0x5e4>)
   8f2d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8f2d8:	631a      	str	r2, [r3, #48]	; 0x30
   8f2da:	e003      	b.n	8f2e4 <cl_testharnesscommandhandler+0x3d4>
   8f2dc:	4b85      	ldr	r3, [pc, #532]	; (8f4f4 <cl_testharnesscommandhandler+0x5e4>)
   8f2de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8f2e2:	635a      	str	r2, [r3, #52]	; 0x34
   8f2e4:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   8f2e8:	f003 0304 	and.w	r3, r3, #4
   8f2ec:	2b00      	cmp	r3, #0
   8f2ee:	d004      	beq.n	8f2fa <cl_testharnesscommandhandler+0x3ea>
   8f2f0:	4b80      	ldr	r3, [pc, #512]	; (8f4f4 <cl_testharnesscommandhandler+0x5e4>)
   8f2f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8f2f6:	631a      	str	r2, [r3, #48]	; 0x30
   8f2f8:	e003      	b.n	8f302 <cl_testharnesscommandhandler+0x3f2>
   8f2fa:	4b7e      	ldr	r3, [pc, #504]	; (8f4f4 <cl_testharnesscommandhandler+0x5e4>)
   8f2fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8f300:	635a      	str	r2, [r3, #52]	; 0x34
   8f302:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   8f306:	f003 0308 	and.w	r3, r3, #8
   8f30a:	2b00      	cmp	r3, #0
   8f30c:	d005      	beq.n	8f31a <cl_testharnesscommandhandler+0x40a>
   8f30e:	4b79      	ldr	r3, [pc, #484]	; (8f4f4 <cl_testharnesscommandhandler+0x5e4>)
   8f310:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8f314:	631a      	str	r2, [r3, #48]	; 0x30
   8f316:	f002 ba7c 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f31a:	4b76      	ldr	r3, [pc, #472]	; (8f4f4 <cl_testharnesscommandhandler+0x5e4>)
   8f31c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8f320:	635a      	str	r2, [r3, #52]	; 0x34
   8f322:	f002 ba76 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f326:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f32a:	b29a      	uxth	r2, r3
   8f32c:	4b72      	ldr	r3, [pc, #456]	; (8f4f8 <cl_testharnesscommandhandler+0x5e8>)
   8f32e:	861a      	strh	r2, [r3, #48]	; 0x30
   8f330:	2300      	movs	r3, #0
   8f332:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f336:	f002 ba6c 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f33a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f33e:	b29a      	uxth	r2, r3
   8f340:	4b6d      	ldr	r3, [pc, #436]	; (8f4f8 <cl_testharnesscommandhandler+0x5e8>)
   8f342:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
   8f346:	2300      	movs	r3, #0
   8f348:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f34c:	f002 ba61 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f350:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f354:	b29a      	uxth	r2, r3
   8f356:	4b68      	ldr	r3, [pc, #416]	; (8f4f8 <cl_testharnesscommandhandler+0x5e8>)
   8f358:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   8f35c:	2300      	movs	r3, #0
   8f35e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f362:	f002 ba56 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f366:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f36a:	2b00      	cmp	r3, #0
   8f36c:	d105      	bne.n	8f37a <cl_testharnesscommandhandler+0x46a>
   8f36e:	4b62      	ldr	r3, [pc, #392]	; (8f4f8 <cl_testharnesscommandhandler+0x5e8>)
   8f370:	2200      	movs	r2, #0
   8f372:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
   8f376:	f002 ba4c 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f37a:	4b5f      	ldr	r3, [pc, #380]	; (8f4f8 <cl_testharnesscommandhandler+0x5e8>)
   8f37c:	2201      	movs	r2, #1
   8f37e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
   8f382:	f002 ba46 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f386:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f38a:	2b00      	cmp	r3, #0
   8f38c:	d105      	bne.n	8f39a <cl_testharnesscommandhandler+0x48a>
   8f38e:	4b5a      	ldr	r3, [pc, #360]	; (8f4f8 <cl_testharnesscommandhandler+0x5e8>)
   8f390:	2200      	movs	r2, #0
   8f392:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   8f396:	f002 ba3c 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f39a:	4b57      	ldr	r3, [pc, #348]	; (8f4f8 <cl_testharnesscommandhandler+0x5e8>)
   8f39c:	2201      	movs	r2, #1
   8f39e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   8f3a2:	f002 ba36 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f3a6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f3aa:	2b00      	cmp	r3, #0
   8f3ac:	d105      	bne.n	8f3ba <cl_testharnesscommandhandler+0x4aa>
   8f3ae:	4b52      	ldr	r3, [pc, #328]	; (8f4f8 <cl_testharnesscommandhandler+0x5e8>)
   8f3b0:	2200      	movs	r2, #0
   8f3b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   8f3b6:	f002 ba2c 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f3ba:	4b4f      	ldr	r3, [pc, #316]	; (8f4f8 <cl_testharnesscommandhandler+0x5e8>)
   8f3bc:	2201      	movs	r2, #1
   8f3be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   8f3c2:	f002 ba26 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f3c6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f3ca:	2b00      	cmp	r3, #0
   8f3cc:	d105      	bne.n	8f3da <cl_testharnesscommandhandler+0x4ca>
   8f3ce:	4b4a      	ldr	r3, [pc, #296]	; (8f4f8 <cl_testharnesscommandhandler+0x5e8>)
   8f3d0:	2200      	movs	r2, #0
   8f3d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   8f3d6:	f002 ba1c 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f3da:	4b47      	ldr	r3, [pc, #284]	; (8f4f8 <cl_testharnesscommandhandler+0x5e8>)
   8f3dc:	2201      	movs	r2, #1
   8f3de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   8f3e2:	f002 ba16 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f3e6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f3ea:	b29a      	uxth	r2, r3
   8f3ec:	4b42      	ldr	r3, [pc, #264]	; (8f4f8 <cl_testharnesscommandhandler+0x5e8>)
   8f3ee:	851a      	strh	r2, [r3, #40]	; 0x28
   8f3f0:	f002 ba0f 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f3f4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f3f8:	b29a      	uxth	r2, r3
   8f3fa:	4b3f      	ldr	r3, [pc, #252]	; (8f4f8 <cl_testharnesscommandhandler+0x5e8>)
   8f3fc:	855a      	strh	r2, [r3, #42]	; 0x2a
   8f3fe:	f002 ba08 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f402:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f406:	b29a      	uxth	r2, r3
   8f408:	4b3b      	ldr	r3, [pc, #236]	; (8f4f8 <cl_testharnesscommandhandler+0x5e8>)
   8f40a:	859a      	strh	r2, [r3, #44]	; 0x2c
   8f40c:	f002 ba01 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f410:	4b3a      	ldr	r3, [pc, #232]	; (8f4fc <cl_testharnesscommandhandler+0x5ec>)
   8f412:	2201      	movs	r2, #1
   8f414:	701a      	strb	r2, [r3, #0]
   8f416:	f002 b9fc 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f41a:	4b38      	ldr	r3, [pc, #224]	; (8f4fc <cl_testharnesscommandhandler+0x5ec>)
   8f41c:	2200      	movs	r2, #0
   8f41e:	701a      	strb	r2, [r3, #0]
   8f420:	f002 b9f7 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f424:	f897 0099 	ldrb.w	r0, [r7, #153]	; 0x99
   8f428:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
   8f42c:	f107 0378 	add.w	r3, r7, #120	; 0x78
   8f430:	3302      	adds	r3, #2
   8f432:	4619      	mov	r1, r3
   8f434:	4b32      	ldr	r3, [pc, #200]	; (8f500 <cl_testharnesscommandhandler+0x5f0>)
   8f436:	4798      	blx	r3
   8f438:	4603      	mov	r3, r0
   8f43a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f43e:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8f442:	f107 0264 	add.w	r2, r7, #100	; 0x64
   8f446:	4611      	mov	r1, r2
   8f448:	4618      	mov	r0, r3
   8f44a:	4b2e      	ldr	r3, [pc, #184]	; (8f504 <cl_testharnesscommandhandler+0x5f4>)
   8f44c:	4798      	blx	r3
   8f44e:	4603      	mov	r3, r0
   8f450:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f454:	f002 b9dd 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f458:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8f45c:	2b06      	cmp	r3, #6
   8f45e:	d00b      	beq.n	8f478 <cl_testharnesscommandhandler+0x568>
   8f460:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8f464:	2b07      	cmp	r3, #7
   8f466:	d007      	beq.n	8f478 <cl_testharnesscommandhandler+0x568>
   8f468:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8f46c:	2b08      	cmp	r3, #8
   8f46e:	d003      	beq.n	8f478 <cl_testharnesscommandhandler+0x568>
   8f470:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8f474:	2b0a      	cmp	r3, #10
   8f476:	d10c      	bne.n	8f492 <cl_testharnesscommandhandler+0x582>
   8f478:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8f47c:	f107 0264 	add.w	r2, r7, #100	; 0x64
   8f480:	4611      	mov	r1, r2
   8f482:	4618      	mov	r0, r3
   8f484:	4b20      	ldr	r3, [pc, #128]	; (8f508 <cl_testharnesscommandhandler+0x5f8>)
   8f486:	4798      	blx	r3
   8f488:	4603      	mov	r3, r0
   8f48a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f48e:	f002 b9c0 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f492:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8f496:	f107 0264 	add.w	r2, r7, #100	; 0x64
   8f49a:	4611      	mov	r1, r2
   8f49c:	4618      	mov	r0, r3
   8f49e:	4b19      	ldr	r3, [pc, #100]	; (8f504 <cl_testharnesscommandhandler+0x5f4>)
   8f4a0:	4798      	blx	r3
   8f4a2:	4603      	mov	r3, r0
   8f4a4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f4a8:	f002 b9b3 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f4ac:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f4b0:	b29a      	uxth	r2, r3
   8f4b2:	4b11      	ldr	r3, [pc, #68]	; (8f4f8 <cl_testharnesscommandhandler+0x5e8>)
   8f4b4:	831a      	strh	r2, [r3, #24]
   8f4b6:	f002 b9ac 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f4ba:	4b14      	ldr	r3, [pc, #80]	; (8f50c <cl_testharnesscommandhandler+0x5fc>)
   8f4bc:	2200      	movs	r2, #0
   8f4be:	701a      	strb	r2, [r3, #0]
   8f4c0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f4c4:	b29a      	uxth	r2, r3
   8f4c6:	4b12      	ldr	r3, [pc, #72]	; (8f510 <cl_testharnesscommandhandler+0x600>)
   8f4c8:	835a      	strh	r2, [r3, #26]
   8f4ca:	f002 b9a2 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f4ce:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f4d2:	b29a      	uxth	r2, r3
   8f4d4:	4b08      	ldr	r3, [pc, #32]	; (8f4f8 <cl_testharnesscommandhandler+0x5e8>)
   8f4d6:	821a      	strh	r2, [r3, #16]
   8f4d8:	f002 b99b 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f4dc:	20072636 	.word	0x20072636
   8f4e0:	200709ec 	.word	0x200709ec
   8f4e4:	200709ed 	.word	0x200709ed
   8f4e8:	20073106 	.word	0x20073106
   8f4ec:	00082efd 	.word	0x00082efd
   8f4f0:	2007264c 	.word	0x2007264c
   8f4f4:	400e1200 	.word	0x400e1200
   8f4f8:	20072e28 	.word	0x20072e28
   8f4fc:	2007263e 	.word	0x2007263e
   8f500:	00098271 	.word	0x00098271
   8f504:	00098239 	.word	0x00098239
   8f508:	00091871 	.word	0x00091871
   8f50c:	20072635 	.word	0x20072635
   8f510:	200730b4 	.word	0x200730b4
   8f514:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f518:	b29a      	uxth	r2, r3
   8f51a:	4bbc      	ldr	r3, [pc, #752]	; (8f80c <cl_testharnesscommandhandler+0x8fc>)
   8f51c:	825a      	strh	r2, [r3, #18]
   8f51e:	f002 b978 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f522:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f526:	b29a      	uxth	r2, r3
   8f528:	4bb8      	ldr	r3, [pc, #736]	; (8f80c <cl_testharnesscommandhandler+0x8fc>)
   8f52a:	87da      	strh	r2, [r3, #62]	; 0x3e
   8f52c:	f002 b971 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f530:	2064      	movs	r0, #100	; 0x64
   8f532:	4bb7      	ldr	r3, [pc, #732]	; (8f810 <cl_testharnesscommandhandler+0x900>)
   8f534:	4798      	blx	r3
   8f536:	4bb7      	ldr	r3, [pc, #732]	; (8f814 <cl_testharnesscommandhandler+0x904>)
   8f538:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8f53c:	2001      	movs	r0, #1
   8f53e:	4bb6      	ldr	r3, [pc, #728]	; (8f818 <cl_testharnesscommandhandler+0x908>)
   8f540:	4798      	blx	r3
   8f542:	2064      	movs	r0, #100	; 0x64
   8f544:	4bb2      	ldr	r3, [pc, #712]	; (8f810 <cl_testharnesscommandhandler+0x900>)
   8f546:	4798      	blx	r3
   8f548:	f002 b963 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f54c:	2064      	movs	r0, #100	; 0x64
   8f54e:	4bb0      	ldr	r3, [pc, #704]	; (8f810 <cl_testharnesscommandhandler+0x900>)
   8f550:	4798      	blx	r3
   8f552:	4bb2      	ldr	r3, [pc, #712]	; (8f81c <cl_testharnesscommandhandler+0x90c>)
   8f554:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8f558:	4bb1      	ldr	r3, [pc, #708]	; (8f820 <cl_testharnesscommandhandler+0x910>)
   8f55a:	4798      	blx	r3
   8f55c:	4603      	mov	r3, r0
   8f55e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f562:	2004      	movs	r0, #4
   8f564:	4bac      	ldr	r3, [pc, #688]	; (8f818 <cl_testharnesscommandhandler+0x908>)
   8f566:	4798      	blx	r3
   8f568:	2064      	movs	r0, #100	; 0x64
   8f56a:	4ba9      	ldr	r3, [pc, #676]	; (8f810 <cl_testharnesscommandhandler+0x900>)
   8f56c:	4798      	blx	r3
   8f56e:	f002 b950 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f572:	2064      	movs	r0, #100	; 0x64
   8f574:	4ba6      	ldr	r3, [pc, #664]	; (8f810 <cl_testharnesscommandhandler+0x900>)
   8f576:	4798      	blx	r3
   8f578:	4baa      	ldr	r3, [pc, #680]	; (8f824 <cl_testharnesscommandhandler+0x914>)
   8f57a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8f57e:	2001      	movs	r0, #1
   8f580:	4ba9      	ldr	r3, [pc, #676]	; (8f828 <cl_testharnesscommandhandler+0x918>)
   8f582:	4798      	blx	r3
   8f584:	4603      	mov	r3, r0
   8f586:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f58a:	2064      	movs	r0, #100	; 0x64
   8f58c:	4ba0      	ldr	r3, [pc, #640]	; (8f810 <cl_testharnesscommandhandler+0x900>)
   8f58e:	4798      	blx	r3
   8f590:	f002 b93f 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f594:	2064      	movs	r0, #100	; 0x64
   8f596:	4b9e      	ldr	r3, [pc, #632]	; (8f810 <cl_testharnesscommandhandler+0x900>)
   8f598:	4798      	blx	r3
   8f59a:	4ba2      	ldr	r3, [pc, #648]	; (8f824 <cl_testharnesscommandhandler+0x914>)
   8f59c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8f5a0:	f44f 7396 	mov.w	r3, #300	; 0x12c
   8f5a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
   8f5a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   8f5ac:	4b98      	ldr	r3, [pc, #608]	; (8f810 <cl_testharnesscommandhandler+0x900>)
   8f5ae:	4798      	blx	r3
   8f5b0:	2001      	movs	r0, #1
   8f5b2:	4b9e      	ldr	r3, [pc, #632]	; (8f82c <cl_testharnesscommandhandler+0x91c>)
   8f5b4:	4798      	blx	r3
   8f5b6:	4603      	mov	r3, r0
   8f5b8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f5bc:	f002 b929 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f5c0:	2064      	movs	r0, #100	; 0x64
   8f5c2:	4b93      	ldr	r3, [pc, #588]	; (8f810 <cl_testharnesscommandhandler+0x900>)
   8f5c4:	4798      	blx	r3
   8f5c6:	4b9a      	ldr	r3, [pc, #616]	; (8f830 <cl_testharnesscommandhandler+0x920>)
   8f5c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8f5cc:	2001      	movs	r0, #1
   8f5ce:	4b97      	ldr	r3, [pc, #604]	; (8f82c <cl_testharnesscommandhandler+0x91c>)
   8f5d0:	4798      	blx	r3
   8f5d2:	4603      	mov	r3, r0
   8f5d4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f5d8:	2064      	movs	r0, #100	; 0x64
   8f5da:	4b8d      	ldr	r3, [pc, #564]	; (8f810 <cl_testharnesscommandhandler+0x900>)
   8f5dc:	4798      	blx	r3
   8f5de:	f002 b918 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f5e2:	200a      	movs	r0, #10
   8f5e4:	4b8a      	ldr	r3, [pc, #552]	; (8f810 <cl_testharnesscommandhandler+0x900>)
   8f5e6:	4798      	blx	r3
   8f5e8:	4b92      	ldr	r3, [pc, #584]	; (8f834 <cl_testharnesscommandhandler+0x924>)
   8f5ea:	781b      	ldrb	r3, [r3, #0]
   8f5ec:	2b00      	cmp	r3, #0
   8f5ee:	d002      	beq.n	8f5f6 <cl_testharnesscommandhandler+0x6e6>
   8f5f0:	4b90      	ldr	r3, [pc, #576]	; (8f834 <cl_testharnesscommandhandler+0x924>)
   8f5f2:	2200      	movs	r2, #0
   8f5f4:	701a      	strb	r2, [r3, #0]
   8f5f6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f5fa:	2b03      	cmp	r3, #3
   8f5fc:	d104      	bne.n	8f608 <cl_testharnesscommandhandler+0x6f8>
   8f5fe:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f602:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f606:	e00b      	b.n	8f620 <cl_testharnesscommandhandler+0x710>
   8f608:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f60c:	2b04      	cmp	r3, #4
   8f60e:	d107      	bne.n	8f620 <cl_testharnesscommandhandler+0x710>
   8f610:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f614:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
   8f618:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   8f61c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f620:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f624:	2b02      	cmp	r3, #2
   8f626:	d115      	bne.n	8f654 <cl_testharnesscommandhandler+0x744>
   8f628:	2300      	movs	r3, #0
   8f62a:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
   8f62e:	4b82      	ldr	r3, [pc, #520]	; (8f838 <cl_testharnesscommandhandler+0x928>)
   8f630:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8f634:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f638:	029b      	lsls	r3, r3, #10
   8f63a:	4a80      	ldr	r2, [pc, #512]	; (8f83c <cl_testharnesscommandhandler+0x92c>)
   8f63c:	fb82 1203 	smull	r1, r2, r2, r3
   8f640:	1312      	asrs	r2, r2, #12
   8f642:	17db      	asrs	r3, r3, #31
   8f644:	1ad3      	subs	r3, r2, r3
   8f646:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
   8f64a:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
   8f64e:	4618      	mov	r0, r3
   8f650:	4b7b      	ldr	r3, [pc, #492]	; (8f840 <cl_testharnesscommandhandler+0x930>)
   8f652:	4798      	blx	r3
   8f654:	2300      	movs	r3, #0
   8f656:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   8f65a:	f002 b8da 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f65e:	200a      	movs	r0, #10
   8f660:	4b6b      	ldr	r3, [pc, #428]	; (8f810 <cl_testharnesscommandhandler+0x900>)
   8f662:	4798      	blx	r3
   8f664:	4b73      	ldr	r3, [pc, #460]	; (8f834 <cl_testharnesscommandhandler+0x924>)
   8f666:	781b      	ldrb	r3, [r3, #0]
   8f668:	2b00      	cmp	r3, #0
   8f66a:	d002      	beq.n	8f672 <cl_testharnesscommandhandler+0x762>
   8f66c:	4b71      	ldr	r3, [pc, #452]	; (8f834 <cl_testharnesscommandhandler+0x924>)
   8f66e:	2200      	movs	r2, #0
   8f670:	701a      	strb	r2, [r3, #0]
   8f672:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f676:	2b03      	cmp	r3, #3
   8f678:	d104      	bne.n	8f684 <cl_testharnesscommandhandler+0x774>
   8f67a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f67e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f682:	e00b      	b.n	8f69c <cl_testharnesscommandhandler+0x78c>
   8f684:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f688:	2b04      	cmp	r3, #4
   8f68a:	d107      	bne.n	8f69c <cl_testharnesscommandhandler+0x78c>
   8f68c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f690:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
   8f694:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   8f698:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f69c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f6a0:	2b02      	cmp	r3, #2
   8f6a2:	d115      	bne.n	8f6d0 <cl_testharnesscommandhandler+0x7c0>
   8f6a4:	2300      	movs	r3, #0
   8f6a6:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
   8f6aa:	4b63      	ldr	r3, [pc, #396]	; (8f838 <cl_testharnesscommandhandler+0x928>)
   8f6ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8f6b0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f6b4:	029b      	lsls	r3, r3, #10
   8f6b6:	4a61      	ldr	r2, [pc, #388]	; (8f83c <cl_testharnesscommandhandler+0x92c>)
   8f6b8:	fb82 1203 	smull	r1, r2, r2, r3
   8f6bc:	1312      	asrs	r2, r2, #12
   8f6be:	17db      	asrs	r3, r3, #31
   8f6c0:	1ad3      	subs	r3, r2, r3
   8f6c2:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
   8f6c6:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
   8f6ca:	4618      	mov	r0, r3
   8f6cc:	4b5d      	ldr	r3, [pc, #372]	; (8f844 <cl_testharnesscommandhandler+0x934>)
   8f6ce:	4798      	blx	r3
   8f6d0:	2300      	movs	r3, #0
   8f6d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   8f6d6:	f002 b89c 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f6da:	4b5b      	ldr	r3, [pc, #364]	; (8f848 <cl_testharnesscommandhandler+0x938>)
   8f6dc:	781b      	ldrb	r3, [r3, #0]
   8f6de:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
   8f6e2:	4b5a      	ldr	r3, [pc, #360]	; (8f84c <cl_testharnesscommandhandler+0x93c>)
   8f6e4:	781b      	ldrb	r3, [r3, #0]
   8f6e6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
   8f6ea:	4b59      	ldr	r3, [pc, #356]	; (8f850 <cl_testharnesscommandhandler+0x940>)
   8f6ec:	781b      	ldrb	r3, [r3, #0]
   8f6ee:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
   8f6f2:	4b58      	ldr	r3, [pc, #352]	; (8f854 <cl_testharnesscommandhandler+0x944>)
   8f6f4:	781b      	ldrb	r3, [r3, #0]
   8f6f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
   8f6fa:	4b57      	ldr	r3, [pc, #348]	; (8f858 <cl_testharnesscommandhandler+0x948>)
   8f6fc:	781b      	ldrb	r3, [r3, #0]
   8f6fe:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
   8f702:	4b56      	ldr	r3, [pc, #344]	; (8f85c <cl_testharnesscommandhandler+0x94c>)
   8f704:	781b      	ldrb	r3, [r3, #0]
   8f706:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
   8f70a:	4b55      	ldr	r3, [pc, #340]	; (8f860 <cl_testharnesscommandhandler+0x950>)
   8f70c:	781b      	ldrb	r3, [r3, #0]
   8f70e:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
   8f712:	f107 0354 	add.w	r3, r7, #84	; 0x54
   8f716:	2207      	movs	r2, #7
   8f718:	4619      	mov	r1, r3
   8f71a:	2047      	movs	r0, #71	; 0x47
   8f71c:	4b51      	ldr	r3, [pc, #324]	; (8f864 <cl_testharnesscommandhandler+0x954>)
   8f71e:	4798      	blx	r3
   8f720:	4603      	mov	r3, r0
   8f722:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f726:	f002 b874 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f72a:	2300      	movs	r3, #0
   8f72c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   8f730:	2300      	movs	r3, #0
   8f732:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
   8f736:	2300      	movs	r3, #0
   8f738:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   8f73c:	e051      	b.n	8f7e2 <cl_testharnesscommandhandler+0x8d2>
   8f73e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   8f742:	1c5a      	adds	r2, r3, #1
   8f744:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   8f748:	f507 7290 	add.w	r2, r7, #288	; 0x120
   8f74c:	4413      	add	r3, r2
   8f74e:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
   8f752:	f803 2cd0 	strb.w	r2, [r3, #-208]
   8f756:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   8f75a:	1c5a      	adds	r2, r3, #1
   8f75c:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   8f760:	4619      	mov	r1, r3
   8f762:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   8f766:	4a40      	ldr	r2, [pc, #256]	; (8f868 <cl_testharnesscommandhandler+0x958>)
   8f768:	011b      	lsls	r3, r3, #4
   8f76a:	4413      	add	r3, r2
   8f76c:	330e      	adds	r3, #14
   8f76e:	781b      	ldrb	r3, [r3, #0]
   8f770:	461a      	mov	r2, r3
   8f772:	f507 7390 	add.w	r3, r7, #288	; 0x120
   8f776:	440b      	add	r3, r1
   8f778:	f803 2cd0 	strb.w	r2, [r3, #-208]
   8f77c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   8f780:	1c5a      	adds	r2, r3, #1
   8f782:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   8f786:	4619      	mov	r1, r3
   8f788:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   8f78c:	4a36      	ldr	r2, [pc, #216]	; (8f868 <cl_testharnesscommandhandler+0x958>)
   8f78e:	011b      	lsls	r3, r3, #4
   8f790:	4413      	add	r3, r2
   8f792:	330f      	adds	r3, #15
   8f794:	781b      	ldrb	r3, [r3, #0]
   8f796:	461a      	mov	r2, r3
   8f798:	f507 7390 	add.w	r3, r7, #288	; 0x120
   8f79c:	440b      	add	r3, r1
   8f79e:	f803 2cd0 	strb.w	r2, [r3, #-208]
   8f7a2:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   8f7a6:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
   8f7aa:	492f      	ldr	r1, [pc, #188]	; (8f868 <cl_testharnesscommandhandler+0x958>)
   8f7ac:	0112      	lsls	r2, r2, #4
   8f7ae:	440a      	add	r2, r1
   8f7b0:	3202      	adds	r2, #2
   8f7b2:	7812      	ldrb	r2, [r2, #0]
   8f7b4:	f507 7190 	add.w	r1, r7, #288	; 0x120
   8f7b8:	440b      	add	r3, r1
   8f7ba:	f803 2cd0 	strb.w	r2, [r3, #-208]
   8f7be:	2300      	movs	r3, #0
   8f7c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
   8f7c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
   8f7c8:	2204      	movs	r2, #4
   8f7ca:	4619      	mov	r1, r3
   8f7cc:	2048      	movs	r0, #72	; 0x48
   8f7ce:	4b25      	ldr	r3, [pc, #148]	; (8f864 <cl_testharnesscommandhandler+0x954>)
   8f7d0:	4798      	blx	r3
   8f7d2:	4603      	mov	r3, r0
   8f7d4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f7d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   8f7dc:	3301      	adds	r3, #1
   8f7de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   8f7e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   8f7e6:	2b41      	cmp	r3, #65	; 0x41
   8f7e8:	d9a9      	bls.n	8f73e <cl_testharnesscommandhandler+0x82e>
   8f7ea:	f002 b812 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f7ee:	2064      	movs	r0, #100	; 0x64
   8f7f0:	4b07      	ldr	r3, [pc, #28]	; (8f810 <cl_testharnesscommandhandler+0x900>)
   8f7f2:	4798      	blx	r3
   8f7f4:	4b1d      	ldr	r3, [pc, #116]	; (8f86c <cl_testharnesscommandhandler+0x95c>)
   8f7f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8f7fa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f7fe:	2b02      	cmp	r3, #2
   8f800:	d136      	bne.n	8f870 <cl_testharnesscommandhandler+0x960>
   8f802:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f806:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f80a:	e03d      	b.n	8f888 <cl_testharnesscommandhandler+0x978>
   8f80c:	20072e28 	.word	0x20072e28
   8f810:	00091e2d 	.word	0x00091e2d
   8f814:	000a5e80 	.word	0x000a5e80
   8f818:	00088a91 	.word	0x00088a91
   8f81c:	000a5e88 	.word	0x000a5e88
   8f820:	00097999 	.word	0x00097999
   8f824:	000a5e90 	.word	0x000a5e90
   8f828:	0009790d 	.word	0x0009790d
   8f82c:	00097949 	.word	0x00097949
   8f830:	000a5e98 	.word	0x000a5e98
   8f834:	20072649 	.word	0x20072649
   8f838:	000a5ea0 	.word	0x000a5ea0
   8f83c:	68db8bad 	.word	0x68db8bad
   8f840:	00097e55 	.word	0x00097e55
   8f844:	00097e75 	.word	0x00097e75
   8f848:	20073109 	.word	0x20073109
   8f84c:	20073108 	.word	0x20073108
   8f850:	2007319c 	.word	0x2007319c
   8f854:	2007319f 	.word	0x2007319f
   8f858:	2007319e 	.word	0x2007319e
   8f85c:	20073107 	.word	0x20073107
   8f860:	2007319d 	.word	0x2007319d
   8f864:	00099729 	.word	0x00099729
   8f868:	200728e0 	.word	0x200728e0
   8f86c:	000a5eac 	.word	0x000a5eac
   8f870:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f874:	2b03      	cmp	r3, #3
   8f876:	d107      	bne.n	8f888 <cl_testharnesscommandhandler+0x978>
   8f878:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f87c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
   8f880:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f884:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f888:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f88c:	4619      	mov	r1, r3
   8f88e:	2001      	movs	r0, #1
   8f890:	4bb5      	ldr	r3, [pc, #724]	; (8fb68 <cl_testharnesscommandhandler+0xc58>)
   8f892:	4798      	blx	r3
   8f894:	4603      	mov	r3, r0
   8f896:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f89a:	2064      	movs	r0, #100	; 0x64
   8f89c:	4bb3      	ldr	r3, [pc, #716]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8f89e:	4798      	blx	r3
   8f8a0:	f001 bfb7 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f8a4:	2064      	movs	r0, #100	; 0x64
   8f8a6:	4bb1      	ldr	r3, [pc, #708]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8f8a8:	4798      	blx	r3
   8f8aa:	4bb1      	ldr	r3, [pc, #708]	; (8fb70 <cl_testharnesscommandhandler+0xc60>)
   8f8ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8f8b0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f8b4:	2b02      	cmp	r3, #2
   8f8b6:	d104      	bne.n	8f8c2 <cl_testharnesscommandhandler+0x9b2>
   8f8b8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f8bc:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f8c0:	e00b      	b.n	8f8da <cl_testharnesscommandhandler+0x9ca>
   8f8c2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f8c6:	2b03      	cmp	r3, #3
   8f8c8:	d107      	bne.n	8f8da <cl_testharnesscommandhandler+0x9ca>
   8f8ca:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f8ce:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
   8f8d2:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f8d6:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f8da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f8de:	4619      	mov	r1, r3
   8f8e0:	2001      	movs	r0, #1
   8f8e2:	4ba4      	ldr	r3, [pc, #656]	; (8fb74 <cl_testharnesscommandhandler+0xc64>)
   8f8e4:	4798      	blx	r3
   8f8e6:	2064      	movs	r0, #100	; 0x64
   8f8e8:	4ba0      	ldr	r3, [pc, #640]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8f8ea:	4798      	blx	r3
   8f8ec:	f001 bf91 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f8f0:	2064      	movs	r0, #100	; 0x64
   8f8f2:	4b9e      	ldr	r3, [pc, #632]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8f8f4:	4798      	blx	r3
   8f8f6:	2002      	movs	r0, #2
   8f8f8:	4b9f      	ldr	r3, [pc, #636]	; (8fb78 <cl_testharnesscommandhandler+0xc68>)
   8f8fa:	4798      	blx	r3
   8f8fc:	4603      	mov	r3, r0
   8f8fe:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f902:	4b9e      	ldr	r3, [pc, #632]	; (8fb7c <cl_testharnesscommandhandler+0xc6c>)
   8f904:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8f908:	2064      	movs	r0, #100	; 0x64
   8f90a:	4b98      	ldr	r3, [pc, #608]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8f90c:	4798      	blx	r3
   8f90e:	f001 bf80 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f912:	2064      	movs	r0, #100	; 0x64
   8f914:	4b95      	ldr	r3, [pc, #596]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8f916:	4798      	blx	r3
   8f918:	2002      	movs	r0, #2
   8f91a:	4b99      	ldr	r3, [pc, #612]	; (8fb80 <cl_testharnesscommandhandler+0xc70>)
   8f91c:	4798      	blx	r3
   8f91e:	4603      	mov	r3, r0
   8f920:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f924:	4b97      	ldr	r3, [pc, #604]	; (8fb84 <cl_testharnesscommandhandler+0xc74>)
   8f926:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8f92a:	2064      	movs	r0, #100	; 0x64
   8f92c:	4b8f      	ldr	r3, [pc, #572]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8f92e:	4798      	blx	r3
   8f930:	f001 bf6f 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f934:	2064      	movs	r0, #100	; 0x64
   8f936:	4b8d      	ldr	r3, [pc, #564]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8f938:	4798      	blx	r3
   8f93a:	4b93      	ldr	r3, [pc, #588]	; (8fb88 <cl_testharnesscommandhandler+0xc78>)
   8f93c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8f940:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f944:	2b02      	cmp	r3, #2
   8f946:	d104      	bne.n	8f952 <cl_testharnesscommandhandler+0xa42>
   8f948:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f94c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f950:	e00b      	b.n	8f96a <cl_testharnesscommandhandler+0xa5a>
   8f952:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f956:	2b03      	cmp	r3, #3
   8f958:	d107      	bne.n	8f96a <cl_testharnesscommandhandler+0xa5a>
   8f95a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f95e:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
   8f962:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f966:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f96a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f96e:	4619      	mov	r1, r3
   8f970:	2002      	movs	r0, #2
   8f972:	4b7d      	ldr	r3, [pc, #500]	; (8fb68 <cl_testharnesscommandhandler+0xc58>)
   8f974:	4798      	blx	r3
   8f976:	4603      	mov	r3, r0
   8f978:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f97c:	2064      	movs	r0, #100	; 0x64
   8f97e:	4b7b      	ldr	r3, [pc, #492]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8f980:	4798      	blx	r3
   8f982:	f001 bf46 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f986:	2064      	movs	r0, #100	; 0x64
   8f988:	4b78      	ldr	r3, [pc, #480]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8f98a:	4798      	blx	r3
   8f98c:	4b7f      	ldr	r3, [pc, #508]	; (8fb8c <cl_testharnesscommandhandler+0xc7c>)
   8f98e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8f992:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f996:	2b02      	cmp	r3, #2
   8f998:	d104      	bne.n	8f9a4 <cl_testharnesscommandhandler+0xa94>
   8f99a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f99e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f9a2:	e00b      	b.n	8f9bc <cl_testharnesscommandhandler+0xaac>
   8f9a4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f9a8:	2b03      	cmp	r3, #3
   8f9aa:	d107      	bne.n	8f9bc <cl_testharnesscommandhandler+0xaac>
   8f9ac:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f9b0:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
   8f9b4:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f9b8:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f9bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f9c0:	4619      	mov	r1, r3
   8f9c2:	2002      	movs	r0, #2
   8f9c4:	4b6b      	ldr	r3, [pc, #428]	; (8fb74 <cl_testharnesscommandhandler+0xc64>)
   8f9c6:	4798      	blx	r3
   8f9c8:	2064      	movs	r0, #100	; 0x64
   8f9ca:	4b68      	ldr	r3, [pc, #416]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8f9cc:	4798      	blx	r3
   8f9ce:	f001 bf20 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8f9d2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f9d6:	2b02      	cmp	r3, #2
   8f9d8:	d104      	bne.n	8f9e4 <cl_testharnesscommandhandler+0xad4>
   8f9da:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f9de:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f9e2:	e00b      	b.n	8f9fc <cl_testharnesscommandhandler+0xaec>
   8f9e4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f9e8:	2b03      	cmp	r3, #3
   8f9ea:	d107      	bne.n	8f9fc <cl_testharnesscommandhandler+0xaec>
   8f9ec:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f9f0:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
   8f9f4:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f9f8:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f9fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   8fa00:	4b63      	ldr	r3, [pc, #396]	; (8fb90 <cl_testharnesscommandhandler+0xc80>)
   8fa02:	4610      	mov	r0, r2
   8fa04:	4798      	blx	r3
   8fa06:	4c63      	ldr	r4, [pc, #396]	; (8fb94 <cl_testharnesscommandhandler+0xc84>)
   8fa08:	a355      	add	r3, pc, #340	; (adr r3, 8fb60 <cl_testharnesscommandhandler+0xc50>)
   8fa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8fa0e:	47a0      	blx	r4
   8fa10:	4603      	mov	r3, r0
   8fa12:	460c      	mov	r4, r1
   8fa14:	4619      	mov	r1, r3
   8fa16:	4622      	mov	r2, r4
   8fa18:	4b5f      	ldr	r3, [pc, #380]	; (8fb98 <cl_testharnesscommandhandler+0xc88>)
   8fa1a:	4608      	mov	r0, r1
   8fa1c:	4611      	mov	r1, r2
   8fa1e:	4798      	blx	r3
   8fa20:	4603      	mov	r3, r0
   8fa22:	b21a      	sxth	r2, r3
   8fa24:	4b5d      	ldr	r3, [pc, #372]	; (8fb9c <cl_testharnesscommandhandler+0xc8c>)
   8fa26:	801a      	strh	r2, [r3, #0]
   8fa28:	4b5d      	ldr	r3, [pc, #372]	; (8fba0 <cl_testharnesscommandhandler+0xc90>)
   8fa2a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8fa2e:	f001 bef0 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fa32:	2064      	movs	r0, #100	; 0x64
   8fa34:	4b4d      	ldr	r3, [pc, #308]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8fa36:	4798      	blx	r3
   8fa38:	2100      	movs	r1, #0
   8fa3a:	2002      	movs	r0, #2
   8fa3c:	4b59      	ldr	r3, [pc, #356]	; (8fba4 <cl_testharnesscommandhandler+0xc94>)
   8fa3e:	4798      	blx	r3
   8fa40:	4b59      	ldr	r3, [pc, #356]	; (8fba8 <cl_testharnesscommandhandler+0xc98>)
   8fa42:	4798      	blx	r3
   8fa44:	2064      	movs	r0, #100	; 0x64
   8fa46:	4b49      	ldr	r3, [pc, #292]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8fa48:	4798      	blx	r3
   8fa4a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   8fa4e:	2001      	movs	r0, #1
   8fa50:	4b54      	ldr	r3, [pc, #336]	; (8fba4 <cl_testharnesscommandhandler+0xc94>)
   8fa52:	4798      	blx	r3
   8fa54:	2064      	movs	r0, #100	; 0x64
   8fa56:	4b45      	ldr	r3, [pc, #276]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8fa58:	4798      	blx	r3
   8fa5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8fa5e:	2001      	movs	r0, #1
   8fa60:	4b50      	ldr	r3, [pc, #320]	; (8fba4 <cl_testharnesscommandhandler+0xc94>)
   8fa62:	4798      	blx	r3
   8fa64:	2064      	movs	r0, #100	; 0x64
   8fa66:	4b41      	ldr	r3, [pc, #260]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8fa68:	4798      	blx	r3
   8fa6a:	2196      	movs	r1, #150	; 0x96
   8fa6c:	2001      	movs	r0, #1
   8fa6e:	4b4d      	ldr	r3, [pc, #308]	; (8fba4 <cl_testharnesscommandhandler+0xc94>)
   8fa70:	4798      	blx	r3
   8fa72:	f001 bece 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fa76:	2064      	movs	r0, #100	; 0x64
   8fa78:	4b3c      	ldr	r3, [pc, #240]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8fa7a:	4798      	blx	r3
   8fa7c:	2004      	movs	r0, #4
   8fa7e:	4b40      	ldr	r3, [pc, #256]	; (8fb80 <cl_testharnesscommandhandler+0xc70>)
   8fa80:	4798      	blx	r3
   8fa82:	4603      	mov	r3, r0
   8fa84:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fa88:	4b48      	ldr	r3, [pc, #288]	; (8fbac <cl_testharnesscommandhandler+0xc9c>)
   8fa8a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8fa8e:	2064      	movs	r0, #100	; 0x64
   8fa90:	4b36      	ldr	r3, [pc, #216]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8fa92:	4798      	blx	r3
   8fa94:	f001 bebd 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fa98:	2064      	movs	r0, #100	; 0x64
   8fa9a:	4b34      	ldr	r3, [pc, #208]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8fa9c:	4798      	blx	r3
   8fa9e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8faa2:	2b02      	cmp	r3, #2
   8faa4:	d104      	bne.n	8fab0 <cl_testharnesscommandhandler+0xba0>
   8faa6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8faaa:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8faae:	e00b      	b.n	8fac8 <cl_testharnesscommandhandler+0xbb8>
   8fab0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8fab4:	2b03      	cmp	r3, #3
   8fab6:	d107      	bne.n	8fac8 <cl_testharnesscommandhandler+0xbb8>
   8fab8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fabc:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
   8fac0:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8fac4:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8fac8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8facc:	4619      	mov	r1, r3
   8face:	2004      	movs	r0, #4
   8fad0:	4b25      	ldr	r3, [pc, #148]	; (8fb68 <cl_testharnesscommandhandler+0xc58>)
   8fad2:	4798      	blx	r3
   8fad4:	4b36      	ldr	r3, [pc, #216]	; (8fbb0 <cl_testharnesscommandhandler+0xca0>)
   8fad6:	2200      	movs	r2, #0
   8fad8:	801a      	strh	r2, [r3, #0]
   8fada:	4b36      	ldr	r3, [pc, #216]	; (8fbb4 <cl_testharnesscommandhandler+0xca4>)
   8fadc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8fae0:	2064      	movs	r0, #100	; 0x64
   8fae2:	4b22      	ldr	r3, [pc, #136]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8fae4:	4798      	blx	r3
   8fae6:	f001 be94 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8faea:	2064      	movs	r0, #100	; 0x64
   8faec:	4b1f      	ldr	r3, [pc, #124]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8faee:	4798      	blx	r3
   8faf0:	4b31      	ldr	r3, [pc, #196]	; (8fbb8 <cl_testharnesscommandhandler+0xca8>)
   8faf2:	4798      	blx	r3
   8faf4:	2064      	movs	r0, #100	; 0x64
   8faf6:	4b1d      	ldr	r3, [pc, #116]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8faf8:	4798      	blx	r3
   8fafa:	f001 be8a 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fafe:	2064      	movs	r0, #100	; 0x64
   8fb00:	4b1a      	ldr	r3, [pc, #104]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8fb02:	4798      	blx	r3
   8fb04:	2006      	movs	r0, #6
   8fb06:	4b1c      	ldr	r3, [pc, #112]	; (8fb78 <cl_testharnesscommandhandler+0xc68>)
   8fb08:	4798      	blx	r3
   8fb0a:	4603      	mov	r3, r0
   8fb0c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fb10:	4b2a      	ldr	r3, [pc, #168]	; (8fbbc <cl_testharnesscommandhandler+0xcac>)
   8fb12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8fb16:	2064      	movs	r0, #100	; 0x64
   8fb18:	4b14      	ldr	r3, [pc, #80]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8fb1a:	4798      	blx	r3
   8fb1c:	f001 be79 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fb20:	2064      	movs	r0, #100	; 0x64
   8fb22:	4b12      	ldr	r3, [pc, #72]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8fb24:	4798      	blx	r3
   8fb26:	2006      	movs	r0, #6
   8fb28:	4b15      	ldr	r3, [pc, #84]	; (8fb80 <cl_testharnesscommandhandler+0xc70>)
   8fb2a:	4798      	blx	r3
   8fb2c:	4603      	mov	r3, r0
   8fb2e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fb32:	4b23      	ldr	r3, [pc, #140]	; (8fbc0 <cl_testharnesscommandhandler+0xcb0>)
   8fb34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8fb38:	2064      	movs	r0, #100	; 0x64
   8fb3a:	4b0c      	ldr	r3, [pc, #48]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8fb3c:	4798      	blx	r3
   8fb3e:	f001 be68 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fb42:	2064      	movs	r0, #100	; 0x64
   8fb44:	4b09      	ldr	r3, [pc, #36]	; (8fb6c <cl_testharnesscommandhandler+0xc5c>)
   8fb46:	4798      	blx	r3
   8fb48:	2300      	movs	r3, #0
   8fb4a:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
   8fb4e:	2003      	movs	r0, #3
   8fb50:	4b09      	ldr	r3, [pc, #36]	; (8fb78 <cl_testharnesscommandhandler+0xc68>)
   8fb52:	4798      	blx	r3
   8fb54:	4603      	mov	r3, r0
   8fb56:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fb5a:	f001 be5a 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fb5e:	bf00      	nop
   8fb60:	487fcb92 	.word	0x487fcb92
   8fb64:	3ffd7dbf 	.word	0x3ffd7dbf
   8fb68:	00097a25 	.word	0x00097a25
   8fb6c:	00091e2d 	.word	0x00091e2d
   8fb70:	000a5eb4 	.word	0x000a5eb4
   8fb74:	00097be1 	.word	0x00097be1
   8fb78:	0009790d 	.word	0x0009790d
   8fb7c:	000a5ebc 	.word	0x000a5ebc
   8fb80:	00097949 	.word	0x00097949
   8fb84:	000a5ec4 	.word	0x000a5ec4
   8fb88:	000a5ecc 	.word	0x000a5ecc
   8fb8c:	000a5ed8 	.word	0x000a5ed8
   8fb90:	000a34a9 	.word	0x000a34a9
   8fb94:	000a3595 	.word	0x000a3595
   8fb98:	000a3ac9 	.word	0x000a3ac9
   8fb9c:	20070102 	.word	0x20070102
   8fba0:	000a5ee0 	.word	0x000a5ee0
   8fba4:	00093cd9 	.word	0x00093cd9
   8fba8:	00093c41 	.word	0x00093c41
   8fbac:	000a5ee8 	.word	0x000a5ee8
   8fbb0:	2007264a 	.word	0x2007264a
   8fbb4:	000a5ef0 	.word	0x000a5ef0
   8fbb8:	00097af9 	.word	0x00097af9
   8fbbc:	000a5efc 	.word	0x000a5efc
   8fbc0:	000a5f08 	.word	0x000a5f08
   8fbc4:	2064      	movs	r0, #100	; 0x64
   8fbc6:	4bb2      	ldr	r3, [pc, #712]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fbc8:	4798      	blx	r3
   8fbca:	2300      	movs	r3, #0
   8fbcc:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
   8fbd0:	2003      	movs	r0, #3
   8fbd2:	4bb0      	ldr	r3, [pc, #704]	; (8fe94 <cl_testharnesscommandhandler+0xf84>)
   8fbd4:	4798      	blx	r3
   8fbd6:	4603      	mov	r3, r0
   8fbd8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fbdc:	2064      	movs	r0, #100	; 0x64
   8fbde:	4bac      	ldr	r3, [pc, #688]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fbe0:	4798      	blx	r3
   8fbe2:	f001 be16 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fbe6:	2064      	movs	r0, #100	; 0x64
   8fbe8:	4ba9      	ldr	r3, [pc, #676]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fbea:	4798      	blx	r3
   8fbec:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8fbf0:	2b02      	cmp	r3, #2
   8fbf2:	d104      	bne.n	8fbfe <cl_testharnesscommandhandler+0xcee>
   8fbf4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fbf8:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8fbfc:	e00b      	b.n	8fc16 <cl_testharnesscommandhandler+0xd06>
   8fbfe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8fc02:	2b03      	cmp	r3, #3
   8fc04:	d107      	bne.n	8fc16 <cl_testharnesscommandhandler+0xd06>
   8fc06:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fc0a:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
   8fc0e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8fc12:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8fc16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8fc1a:	4a9f      	ldr	r2, [pc, #636]	; (8fe98 <cl_testharnesscommandhandler+0xf88>)
   8fc1c:	65d3      	str	r3, [r2, #92]	; 0x5c
   8fc1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8fc22:	4619      	mov	r1, r3
   8fc24:	2003      	movs	r0, #3
   8fc26:	4b9d      	ldr	r3, [pc, #628]	; (8fe9c <cl_testharnesscommandhandler+0xf8c>)
   8fc28:	4798      	blx	r3
   8fc2a:	4b9d      	ldr	r3, [pc, #628]	; (8fea0 <cl_testharnesscommandhandler+0xf90>)
   8fc2c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8fc30:	2064      	movs	r0, #100	; 0x64
   8fc32:	4b97      	ldr	r3, [pc, #604]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fc34:	4798      	blx	r3
   8fc36:	f001 bdec 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fc3a:	2064      	movs	r0, #100	; 0x64
   8fc3c:	4b94      	ldr	r3, [pc, #592]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fc3e:	4798      	blx	r3
   8fc40:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8fc44:	2b02      	cmp	r3, #2
   8fc46:	d105      	bne.n	8fc54 <cl_testharnesscommandhandler+0xd44>
   8fc48:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fc4c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8fc50:	f001 bdda 	b.w	91808 <cl_testharnesscommandhandler+0x28f8>
   8fc54:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8fc58:	2b03      	cmp	r3, #3
   8fc5a:	f041 85d5 	bne.w	91808 <cl_testharnesscommandhandler+0x28f8>
   8fc5e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fc62:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
   8fc66:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8fc6a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8fc6e:	f001 bdcb 	b.w	91808 <cl_testharnesscommandhandler+0x28f8>
   8fc72:	2064      	movs	r0, #100	; 0x64
   8fc74:	4b86      	ldr	r3, [pc, #536]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fc76:	4798      	blx	r3
   8fc78:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8fc7c:	2b02      	cmp	r3, #2
   8fc7e:	d105      	bne.n	8fc8c <cl_testharnesscommandhandler+0xd7c>
   8fc80:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fc84:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8fc88:	f001 bdc0 	b.w	9180c <cl_testharnesscommandhandler+0x28fc>
   8fc8c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8fc90:	2b03      	cmp	r3, #3
   8fc92:	f041 85bb 	bne.w	9180c <cl_testharnesscommandhandler+0x28fc>
   8fc96:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fc9a:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
   8fc9e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8fca2:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8fca6:	f001 bdb1 	b.w	9180c <cl_testharnesscommandhandler+0x28fc>
   8fcaa:	2064      	movs	r0, #100	; 0x64
   8fcac:	4b78      	ldr	r3, [pc, #480]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fcae:	4798      	blx	r3
   8fcb0:	4b7c      	ldr	r3, [pc, #496]	; (8fea4 <cl_testharnesscommandhandler+0xf94>)
   8fcb2:	4798      	blx	r3
   8fcb4:	4b7c      	ldr	r3, [pc, #496]	; (8fea8 <cl_testharnesscommandhandler+0xf98>)
   8fcb6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8fcba:	f001 bdaa 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fcbe:	2064      	movs	r0, #100	; 0x64
   8fcc0:	4b73      	ldr	r3, [pc, #460]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fcc2:	4798      	blx	r3
   8fcc4:	4b79      	ldr	r3, [pc, #484]	; (8feac <cl_testharnesscommandhandler+0xf9c>)
   8fcc6:	4798      	blx	r3
   8fcc8:	4b79      	ldr	r3, [pc, #484]	; (8feb0 <cl_testharnesscommandhandler+0xfa0>)
   8fcca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8fcce:	2064      	movs	r0, #100	; 0x64
   8fcd0:	4b6f      	ldr	r3, [pc, #444]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fcd2:	4798      	blx	r3
   8fcd4:	f001 bd9d 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fcd8:	2064      	movs	r0, #100	; 0x64
   8fcda:	4b6d      	ldr	r3, [pc, #436]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fcdc:	4798      	blx	r3
   8fcde:	4b75      	ldr	r3, [pc, #468]	; (8feb4 <cl_testharnesscommandhandler+0xfa4>)
   8fce0:	4798      	blx	r3
   8fce2:	4b75      	ldr	r3, [pc, #468]	; (8feb8 <cl_testharnesscommandhandler+0xfa8>)
   8fce4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8fce8:	2064      	movs	r0, #100	; 0x64
   8fcea:	4b69      	ldr	r3, [pc, #420]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fcec:	4798      	blx	r3
   8fcee:	f001 bd90 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fcf2:	2064      	movs	r0, #100	; 0x64
   8fcf4:	4b66      	ldr	r3, [pc, #408]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fcf6:	4798      	blx	r3
   8fcf8:	4b70      	ldr	r3, [pc, #448]	; (8febc <cl_testharnesscommandhandler+0xfac>)
   8fcfa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8fcfe:	2064      	movs	r0, #100	; 0x64
   8fd00:	4b63      	ldr	r3, [pc, #396]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fd02:	4798      	blx	r3
   8fd04:	f001 bd85 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fd08:	2064      	movs	r0, #100	; 0x64
   8fd0a:	4b61      	ldr	r3, [pc, #388]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fd0c:	4798      	blx	r3
   8fd0e:	4b6c      	ldr	r3, [pc, #432]	; (8fec0 <cl_testharnesscommandhandler+0xfb0>)
   8fd10:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8fd14:	2064      	movs	r0, #100	; 0x64
   8fd16:	4b5e      	ldr	r3, [pc, #376]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fd18:	4798      	blx	r3
   8fd1a:	f001 bd7a 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fd1e:	4b69      	ldr	r3, [pc, #420]	; (8fec4 <cl_testharnesscommandhandler+0xfb4>)
   8fd20:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8fd24:	2004      	movs	r0, #4
   8fd26:	4b68      	ldr	r3, [pc, #416]	; (8fec8 <cl_testharnesscommandhandler+0xfb8>)
   8fd28:	4798      	blx	r3
   8fd2a:	2064      	movs	r0, #100	; 0x64
   8fd2c:	4b58      	ldr	r3, [pc, #352]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fd2e:	4798      	blx	r3
   8fd30:	2004      	movs	r0, #4
   8fd32:	4b66      	ldr	r3, [pc, #408]	; (8fecc <cl_testharnesscommandhandler+0xfbc>)
   8fd34:	4798      	blx	r3
   8fd36:	2064      	movs	r0, #100	; 0x64
   8fd38:	4b55      	ldr	r3, [pc, #340]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fd3a:	4798      	blx	r3
   8fd3c:	f001 bd69 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fd40:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fd44:	2b00      	cmp	r3, #0
   8fd46:	d10d      	bne.n	8fd64 <cl_testharnesscommandhandler+0xe54>
   8fd48:	f640 60d8 	movw	r0, #3800	; 0xed8
   8fd4c:	4b60      	ldr	r3, [pc, #384]	; (8fed0 <cl_testharnesscommandhandler+0xfc0>)
   8fd4e:	4798      	blx	r3
   8fd50:	f240 411a 	movw	r1, #1050	; 0x41a
   8fd54:	2001      	movs	r0, #1
   8fd56:	4b51      	ldr	r3, [pc, #324]	; (8fe9c <cl_testharnesscommandhandler+0xf8c>)
   8fd58:	4798      	blx	r3
   8fd5a:	4603      	mov	r3, r0
   8fd5c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fd60:	f001 bd56 	b.w	91810 <cl_testharnesscommandhandler+0x2900>
   8fd64:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fd68:	2b01      	cmp	r3, #1
   8fd6a:	d10d      	bne.n	8fd88 <cl_testharnesscommandhandler+0xe78>
   8fd6c:	f640 1092 	movw	r0, #2450	; 0x992
   8fd70:	4b57      	ldr	r3, [pc, #348]	; (8fed0 <cl_testharnesscommandhandler+0xfc0>)
   8fd72:	4798      	blx	r3
   8fd74:	f240 21e9 	movw	r1, #745	; 0x2e9
   8fd78:	2001      	movs	r0, #1
   8fd7a:	4b48      	ldr	r3, [pc, #288]	; (8fe9c <cl_testharnesscommandhandler+0xf8c>)
   8fd7c:	4798      	blx	r3
   8fd7e:	4603      	mov	r3, r0
   8fd80:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fd84:	f001 bd44 	b.w	91810 <cl_testharnesscommandhandler+0x2900>
   8fd88:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fd8c:	2b02      	cmp	r3, #2
   8fd8e:	f041 853f 	bne.w	91810 <cl_testharnesscommandhandler+0x2900>
   8fd92:	f240 4042 	movw	r0, #1090	; 0x442
   8fd96:	4b4e      	ldr	r3, [pc, #312]	; (8fed0 <cl_testharnesscommandhandler+0xfc0>)
   8fd98:	4798      	blx	r3
   8fd9a:	f44f 71b9 	mov.w	r1, #370	; 0x172
   8fd9e:	2001      	movs	r0, #1
   8fda0:	4b3e      	ldr	r3, [pc, #248]	; (8fe9c <cl_testharnesscommandhandler+0xf8c>)
   8fda2:	4798      	blx	r3
   8fda4:	4603      	mov	r3, r0
   8fda6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fdaa:	f001 bd31 	b.w	91810 <cl_testharnesscommandhandler+0x2900>
   8fdae:	2300      	movs	r3, #0
   8fdb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   8fdb2:	2064      	movs	r0, #100	; 0x64
   8fdb4:	4b36      	ldr	r3, [pc, #216]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fdb6:	4798      	blx	r3
   8fdb8:	4b42      	ldr	r3, [pc, #264]	; (8fec4 <cl_testharnesscommandhandler+0xfb4>)
   8fdba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8fdbe:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fdc2:	4618      	mov	r0, r3
   8fdc4:	4b40      	ldr	r3, [pc, #256]	; (8fec8 <cl_testharnesscommandhandler+0xfb8>)
   8fdc6:	4798      	blx	r3
   8fdc8:	2064      	movs	r0, #100	; 0x64
   8fdca:	4b31      	ldr	r3, [pc, #196]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fdcc:	4798      	blx	r3
   8fdce:	f001 bd20 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fdd2:	2064      	movs	r0, #100	; 0x64
   8fdd4:	4b2e      	ldr	r3, [pc, #184]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fdd6:	4798      	blx	r3
   8fdd8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fddc:	4618      	mov	r0, r3
   8fdde:	4b3b      	ldr	r3, [pc, #236]	; (8fecc <cl_testharnesscommandhandler+0xfbc>)
   8fde0:	4798      	blx	r3
   8fde2:	4b3c      	ldr	r3, [pc, #240]	; (8fed4 <cl_testharnesscommandhandler+0xfc4>)
   8fde4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8fde8:	2064      	movs	r0, #100	; 0x64
   8fdea:	4b29      	ldr	r3, [pc, #164]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fdec:	4798      	blx	r3
   8fdee:	f001 bd10 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fdf2:	2064      	movs	r0, #100	; 0x64
   8fdf4:	4b26      	ldr	r3, [pc, #152]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fdf6:	4798      	blx	r3
   8fdf8:	4b37      	ldr	r3, [pc, #220]	; (8fed8 <cl_testharnesscommandhandler+0xfc8>)
   8fdfa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8fdfe:	2301      	movs	r3, #1
   8fe00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8fe04:	e00c      	b.n	8fe20 <cl_testharnesscommandhandler+0xf10>
   8fe06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8fe0a:	4618      	mov	r0, r3
   8fe0c:	4b2e      	ldr	r3, [pc, #184]	; (8fec8 <cl_testharnesscommandhandler+0xfb8>)
   8fe0e:	4798      	blx	r3
   8fe10:	200a      	movs	r0, #10
   8fe12:	4b1f      	ldr	r3, [pc, #124]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fe14:	4798      	blx	r3
   8fe16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8fe1a:	3301      	adds	r3, #1
   8fe1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8fe20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8fe24:	2b14      	cmp	r3, #20
   8fe26:	d9ee      	bls.n	8fe06 <cl_testharnesscommandhandler+0xef6>
   8fe28:	2064      	movs	r0, #100	; 0x64
   8fe2a:	4b19      	ldr	r3, [pc, #100]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fe2c:	4798      	blx	r3
   8fe2e:	f001 bcf0 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fe32:	2064      	movs	r0, #100	; 0x64
   8fe34:	4b16      	ldr	r3, [pc, #88]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fe36:	4798      	blx	r3
   8fe38:	2005      	movs	r0, #5
   8fe3a:	4b28      	ldr	r3, [pc, #160]	; (8fedc <cl_testharnesscommandhandler+0xfcc>)
   8fe3c:	4798      	blx	r3
   8fe3e:	4603      	mov	r3, r0
   8fe40:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fe44:	4b26      	ldr	r3, [pc, #152]	; (8fee0 <cl_testharnesscommandhandler+0xfd0>)
   8fe46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8fe4a:	2064      	movs	r0, #100	; 0x64
   8fe4c:	4b10      	ldr	r3, [pc, #64]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fe4e:	4798      	blx	r3
   8fe50:	f001 bcdf 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fe54:	2064      	movs	r0, #100	; 0x64
   8fe56:	4b0e      	ldr	r3, [pc, #56]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fe58:	4798      	blx	r3
   8fe5a:	2005      	movs	r0, #5
   8fe5c:	4b0d      	ldr	r3, [pc, #52]	; (8fe94 <cl_testharnesscommandhandler+0xf84>)
   8fe5e:	4798      	blx	r3
   8fe60:	4603      	mov	r3, r0
   8fe62:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fe66:	4b1f      	ldr	r3, [pc, #124]	; (8fee4 <cl_testharnesscommandhandler+0xfd4>)
   8fe68:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8fe6c:	2064      	movs	r0, #100	; 0x64
   8fe6e:	4b08      	ldr	r3, [pc, #32]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fe70:	4798      	blx	r3
   8fe72:	f001 bcce 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8fe76:	2064      	movs	r0, #100	; 0x64
   8fe78:	4b05      	ldr	r3, [pc, #20]	; (8fe90 <cl_testharnesscommandhandler+0xf80>)
   8fe7a:	4798      	blx	r3
   8fe7c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8fe80:	2b02      	cmp	r3, #2
   8fe82:	d131      	bne.n	8fee8 <cl_testharnesscommandhandler+0xfd8>
   8fe84:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fe88:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8fe8c:	e038      	b.n	8ff00 <cl_testharnesscommandhandler+0xff0>
   8fe8e:	bf00      	nop
   8fe90:	00091e2d 	.word	0x00091e2d
   8fe94:	00097949 	.word	0x00097949
   8fe98:	200731a4 	.word	0x200731a4
   8fe9c:	00097a25 	.word	0x00097a25
   8fea0:	000a5f18 	.word	0x000a5f18
   8fea4:	00097b0d 	.word	0x00097b0d
   8fea8:	000a5f20 	.word	0x000a5f20
   8feac:	000979fd 	.word	0x000979fd
   8feb0:	000a5f28 	.word	0x000a5f28
   8feb4:	00097a11 	.word	0x00097a11
   8feb8:	000a5f30 	.word	0x000a5f30
   8febc:	000a5f38 	.word	0x000a5f38
   8fec0:	000a5f44 	.word	0x000a5f44
   8fec4:	000a5f50 	.word	0x000a5f50
   8fec8:	000979ad 	.word	0x000979ad
   8fecc:	000979cd 	.word	0x000979cd
   8fed0:	00097e55 	.word	0x00097e55
   8fed4:	000a5f58 	.word	0x000a5f58
   8fed8:	000a5f60 	.word	0x000a5f60
   8fedc:	0009790d 	.word	0x0009790d
   8fee0:	000a5f6c 	.word	0x000a5f6c
   8fee4:	000a5f74 	.word	0x000a5f74
   8fee8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8feec:	2b03      	cmp	r3, #3
   8feee:	d107      	bne.n	8ff00 <cl_testharnesscommandhandler+0xff0>
   8fef0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fef4:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
   8fef8:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8fefc:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8ff00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8ff04:	4619      	mov	r1, r3
   8ff06:	2005      	movs	r0, #5
   8ff08:	4b9e      	ldr	r3, [pc, #632]	; (90184 <cl_testharnesscommandhandler+0x1274>)
   8ff0a:	4798      	blx	r3
   8ff0c:	4b9e      	ldr	r3, [pc, #632]	; (90188 <cl_testharnesscommandhandler+0x1278>)
   8ff0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8ff12:	2064      	movs	r0, #100	; 0x64
   8ff14:	4b9d      	ldr	r3, [pc, #628]	; (9018c <cl_testharnesscommandhandler+0x127c>)
   8ff16:	4798      	blx	r3
   8ff18:	f001 bc7b 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8ff1c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8ff20:	2b00      	cmp	r3, #0
   8ff22:	d003      	beq.n	8ff2c <cl_testharnesscommandhandler+0x101c>
   8ff24:	4b9a      	ldr	r3, [pc, #616]	; (90190 <cl_testharnesscommandhandler+0x1280>)
   8ff26:	4798      	blx	r3
   8ff28:	f001 bc73 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8ff2c:	4b99      	ldr	r3, [pc, #612]	; (90194 <cl_testharnesscommandhandler+0x1284>)
   8ff2e:	4798      	blx	r3
   8ff30:	f001 bc6f 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8ff34:	2032      	movs	r0, #50	; 0x32
   8ff36:	4b95      	ldr	r3, [pc, #596]	; (9018c <cl_testharnesscommandhandler+0x127c>)
   8ff38:	4798      	blx	r3
   8ff3a:	2001      	movs	r0, #1
   8ff3c:	4b96      	ldr	r3, [pc, #600]	; (90198 <cl_testharnesscommandhandler+0x1288>)
   8ff3e:	4798      	blx	r3
   8ff40:	4603      	mov	r3, r0
   8ff42:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8ff46:	200a      	movs	r0, #10
   8ff48:	4b90      	ldr	r3, [pc, #576]	; (9018c <cl_testharnesscommandhandler+0x127c>)
   8ff4a:	4798      	blx	r3
   8ff4c:	2002      	movs	r0, #2
   8ff4e:	4b92      	ldr	r3, [pc, #584]	; (90198 <cl_testharnesscommandhandler+0x1288>)
   8ff50:	4798      	blx	r3
   8ff52:	4603      	mov	r3, r0
   8ff54:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8ff58:	200a      	movs	r0, #10
   8ff5a:	4b8c      	ldr	r3, [pc, #560]	; (9018c <cl_testharnesscommandhandler+0x127c>)
   8ff5c:	4798      	blx	r3
   8ff5e:	2003      	movs	r0, #3
   8ff60:	4b8d      	ldr	r3, [pc, #564]	; (90198 <cl_testharnesscommandhandler+0x1288>)
   8ff62:	4798      	blx	r3
   8ff64:	4603      	mov	r3, r0
   8ff66:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8ff6a:	200a      	movs	r0, #10
   8ff6c:	4b87      	ldr	r3, [pc, #540]	; (9018c <cl_testharnesscommandhandler+0x127c>)
   8ff6e:	4798      	blx	r3
   8ff70:	2004      	movs	r0, #4
   8ff72:	4b89      	ldr	r3, [pc, #548]	; (90198 <cl_testharnesscommandhandler+0x1288>)
   8ff74:	4798      	blx	r3
   8ff76:	4603      	mov	r3, r0
   8ff78:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8ff7c:	200a      	movs	r0, #10
   8ff7e:	4b83      	ldr	r3, [pc, #524]	; (9018c <cl_testharnesscommandhandler+0x127c>)
   8ff80:	4798      	blx	r3
   8ff82:	2005      	movs	r0, #5
   8ff84:	4b84      	ldr	r3, [pc, #528]	; (90198 <cl_testharnesscommandhandler+0x1288>)
   8ff86:	4798      	blx	r3
   8ff88:	4603      	mov	r3, r0
   8ff8a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8ff8e:	2032      	movs	r0, #50	; 0x32
   8ff90:	4b7e      	ldr	r3, [pc, #504]	; (9018c <cl_testharnesscommandhandler+0x127c>)
   8ff92:	4798      	blx	r3
   8ff94:	f001 bc3d 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8ff98:	2006      	movs	r0, #6
   8ff9a:	4b80      	ldr	r3, [pc, #512]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   8ff9c:	4798      	blx	r3
   8ff9e:	2007      	movs	r0, #7
   8ffa0:	4b7e      	ldr	r3, [pc, #504]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   8ffa2:	4798      	blx	r3
   8ffa4:	200c      	movs	r0, #12
   8ffa6:	4b7d      	ldr	r3, [pc, #500]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   8ffa8:	4798      	blx	r3
   8ffaa:	2009      	movs	r0, #9
   8ffac:	4b7b      	ldr	r3, [pc, #492]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   8ffae:	4798      	blx	r3
   8ffb0:	2005      	movs	r0, #5
   8ffb2:	4b7b      	ldr	r3, [pc, #492]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   8ffb4:	4798      	blx	r3
   8ffb6:	2008      	movs	r0, #8
   8ffb8:	4b79      	ldr	r3, [pc, #484]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   8ffba:	4798      	blx	r3
   8ffbc:	200a      	movs	r0, #10
   8ffbe:	4b78      	ldr	r3, [pc, #480]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   8ffc0:	4798      	blx	r3
   8ffc2:	200b      	movs	r0, #11
   8ffc4:	4b76      	ldr	r3, [pc, #472]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   8ffc6:	4798      	blx	r3
   8ffc8:	4b76      	ldr	r3, [pc, #472]	; (901a4 <cl_testharnesscommandhandler+0x1294>)
   8ffca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   8ffce:	f001 bc20 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   8ffd2:	2005      	movs	r0, #5
   8ffd4:	4b71      	ldr	r3, [pc, #452]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   8ffd6:	4798      	blx	r3
   8ffd8:	2008      	movs	r0, #8
   8ffda:	4b70      	ldr	r3, [pc, #448]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   8ffdc:	4798      	blx	r3
   8ffde:	200a      	movs	r0, #10
   8ffe0:	4b6e      	ldr	r3, [pc, #440]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   8ffe2:	4798      	blx	r3
   8ffe4:	200b      	movs	r0, #11
   8ffe6:	4b6d      	ldr	r3, [pc, #436]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   8ffe8:	4798      	blx	r3
   8ffea:	200c      	movs	r0, #12
   8ffec:	4b6c      	ldr	r3, [pc, #432]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   8ffee:	4798      	blx	r3
   8fff0:	2009      	movs	r0, #9
   8fff2:	4b6b      	ldr	r3, [pc, #428]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   8fff4:	4798      	blx	r3
   8fff6:	2006      	movs	r0, #6
   8fff8:	4b69      	ldr	r3, [pc, #420]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   8fffa:	4798      	blx	r3
   8fffc:	2007      	movs	r0, #7
   8fffe:	4b68      	ldr	r3, [pc, #416]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   90000:	4798      	blx	r3
   90002:	4b69      	ldr	r3, [pc, #420]	; (901a8 <cl_testharnesscommandhandler+0x1298>)
   90004:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   90008:	f001 bc03 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   9000c:	2006      	movs	r0, #6
   9000e:	4b63      	ldr	r3, [pc, #396]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   90010:	4798      	blx	r3
   90012:	2007      	movs	r0, #7
   90014:	4b61      	ldr	r3, [pc, #388]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   90016:	4798      	blx	r3
   90018:	200c      	movs	r0, #12
   9001a:	4b60      	ldr	r3, [pc, #384]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   9001c:	4798      	blx	r3
   9001e:	2009      	movs	r0, #9
   90020:	4b5e      	ldr	r3, [pc, #376]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   90022:	4798      	blx	r3
   90024:	2005      	movs	r0, #5
   90026:	4b5e      	ldr	r3, [pc, #376]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   90028:	4798      	blx	r3
   9002a:	2008      	movs	r0, #8
   9002c:	4b5c      	ldr	r3, [pc, #368]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   9002e:	4798      	blx	r3
   90030:	200a      	movs	r0, #10
   90032:	4b5b      	ldr	r3, [pc, #364]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   90034:	4798      	blx	r3
   90036:	200b      	movs	r0, #11
   90038:	4b59      	ldr	r3, [pc, #356]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   9003a:	4798      	blx	r3
   9003c:	200d      	movs	r0, #13
   9003e:	4b57      	ldr	r3, [pc, #348]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   90040:	4798      	blx	r3
   90042:	200e      	movs	r0, #14
   90044:	4b55      	ldr	r3, [pc, #340]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   90046:	4798      	blx	r3
   90048:	4b58      	ldr	r3, [pc, #352]	; (901ac <cl_testharnesscommandhandler+0x129c>)
   9004a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   9004e:	f001 bbe0 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   90052:	2005      	movs	r0, #5
   90054:	4b51      	ldr	r3, [pc, #324]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   90056:	4798      	blx	r3
   90058:	2008      	movs	r0, #8
   9005a:	4b50      	ldr	r3, [pc, #320]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   9005c:	4798      	blx	r3
   9005e:	200a      	movs	r0, #10
   90060:	4b4e      	ldr	r3, [pc, #312]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   90062:	4798      	blx	r3
   90064:	200b      	movs	r0, #11
   90066:	4b4d      	ldr	r3, [pc, #308]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   90068:	4798      	blx	r3
   9006a:	200c      	movs	r0, #12
   9006c:	4b4c      	ldr	r3, [pc, #304]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   9006e:	4798      	blx	r3
   90070:	2009      	movs	r0, #9
   90072:	4b4b      	ldr	r3, [pc, #300]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   90074:	4798      	blx	r3
   90076:	2006      	movs	r0, #6
   90078:	4b49      	ldr	r3, [pc, #292]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   9007a:	4798      	blx	r3
   9007c:	2007      	movs	r0, #7
   9007e:	4b48      	ldr	r3, [pc, #288]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   90080:	4798      	blx	r3
   90082:	200d      	movs	r0, #13
   90084:	4b45      	ldr	r3, [pc, #276]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   90086:	4798      	blx	r3
   90088:	200e      	movs	r0, #14
   9008a:	4b44      	ldr	r3, [pc, #272]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   9008c:	4798      	blx	r3
   9008e:	4b48      	ldr	r3, [pc, #288]	; (901b0 <cl_testharnesscommandhandler+0x12a0>)
   90090:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   90094:	f001 bbbd 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   90098:	2006      	movs	r0, #6
   9009a:	4b40      	ldr	r3, [pc, #256]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   9009c:	4798      	blx	r3
   9009e:	2007      	movs	r0, #7
   900a0:	4b3e      	ldr	r3, [pc, #248]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   900a2:	4798      	blx	r3
   900a4:	200c      	movs	r0, #12
   900a6:	4b3d      	ldr	r3, [pc, #244]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   900a8:	4798      	blx	r3
   900aa:	2009      	movs	r0, #9
   900ac:	4b3b      	ldr	r3, [pc, #236]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   900ae:	4798      	blx	r3
   900b0:	2005      	movs	r0, #5
   900b2:	4b3b      	ldr	r3, [pc, #236]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   900b4:	4798      	blx	r3
   900b6:	2008      	movs	r0, #8
   900b8:	4b39      	ldr	r3, [pc, #228]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   900ba:	4798      	blx	r3
   900bc:	200a      	movs	r0, #10
   900be:	4b38      	ldr	r3, [pc, #224]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   900c0:	4798      	blx	r3
   900c2:	200b      	movs	r0, #11
   900c4:	4b36      	ldr	r3, [pc, #216]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   900c6:	4798      	blx	r3
   900c8:	2004      	movs	r0, #4
   900ca:	4b34      	ldr	r3, [pc, #208]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   900cc:	4798      	blx	r3
   900ce:	200d      	movs	r0, #13
   900d0:	4b33      	ldr	r3, [pc, #204]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   900d2:	4798      	blx	r3
   900d4:	200e      	movs	r0, #14
   900d6:	4b32      	ldr	r3, [pc, #200]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   900d8:	4798      	blx	r3
   900da:	4b36      	ldr	r3, [pc, #216]	; (901b4 <cl_testharnesscommandhandler+0x12a4>)
   900dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   900e0:	f001 bb97 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   900e4:	2005      	movs	r0, #5
   900e6:	4b2d      	ldr	r3, [pc, #180]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   900e8:	4798      	blx	r3
   900ea:	2008      	movs	r0, #8
   900ec:	4b2b      	ldr	r3, [pc, #172]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   900ee:	4798      	blx	r3
   900f0:	200a      	movs	r0, #10
   900f2:	4b2a      	ldr	r3, [pc, #168]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   900f4:	4798      	blx	r3
   900f6:	200b      	movs	r0, #11
   900f8:	4b28      	ldr	r3, [pc, #160]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   900fa:	4798      	blx	r3
   900fc:	200c      	movs	r0, #12
   900fe:	4b28      	ldr	r3, [pc, #160]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   90100:	4798      	blx	r3
   90102:	2009      	movs	r0, #9
   90104:	4b26      	ldr	r3, [pc, #152]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   90106:	4798      	blx	r3
   90108:	2006      	movs	r0, #6
   9010a:	4b25      	ldr	r3, [pc, #148]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   9010c:	4798      	blx	r3
   9010e:	2007      	movs	r0, #7
   90110:	4b23      	ldr	r3, [pc, #140]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   90112:	4798      	blx	r3
   90114:	2004      	movs	r0, #4
   90116:	4b21      	ldr	r3, [pc, #132]	; (9019c <cl_testharnesscommandhandler+0x128c>)
   90118:	4798      	blx	r3
   9011a:	200d      	movs	r0, #13
   9011c:	4b20      	ldr	r3, [pc, #128]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   9011e:	4798      	blx	r3
   90120:	200e      	movs	r0, #14
   90122:	4b1f      	ldr	r3, [pc, #124]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   90124:	4798      	blx	r3
   90126:	4b24      	ldr	r3, [pc, #144]	; (901b8 <cl_testharnesscommandhandler+0x12a8>)
   90128:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   9012c:	f001 bb71 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   90130:	2005      	movs	r0, #5
   90132:	4b1b      	ldr	r3, [pc, #108]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   90134:	4798      	blx	r3
   90136:	2008      	movs	r0, #8
   90138:	4b19      	ldr	r3, [pc, #100]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   9013a:	4798      	blx	r3
   9013c:	200a      	movs	r0, #10
   9013e:	4b18      	ldr	r3, [pc, #96]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   90140:	4798      	blx	r3
   90142:	200b      	movs	r0, #11
   90144:	4b16      	ldr	r3, [pc, #88]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   90146:	4798      	blx	r3
   90148:	200c      	movs	r0, #12
   9014a:	4b15      	ldr	r3, [pc, #84]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   9014c:	4798      	blx	r3
   9014e:	2009      	movs	r0, #9
   90150:	4b13      	ldr	r3, [pc, #76]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   90152:	4798      	blx	r3
   90154:	2006      	movs	r0, #6
   90156:	4b12      	ldr	r3, [pc, #72]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   90158:	4798      	blx	r3
   9015a:	2007      	movs	r0, #7
   9015c:	4b10      	ldr	r3, [pc, #64]	; (901a0 <cl_testharnesscommandhandler+0x1290>)
   9015e:	4798      	blx	r3
   90160:	2001      	movs	r0, #1
   90162:	4b0d      	ldr	r3, [pc, #52]	; (90198 <cl_testharnesscommandhandler+0x1288>)
   90164:	4798      	blx	r3
   90166:	4603      	mov	r3, r0
   90168:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9016c:	2002      	movs	r0, #2
   9016e:	4b0a      	ldr	r3, [pc, #40]	; (90198 <cl_testharnesscommandhandler+0x1288>)
   90170:	4798      	blx	r3
   90172:	4603      	mov	r3, r0
   90174:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90178:	4b10      	ldr	r3, [pc, #64]	; (901bc <cl_testharnesscommandhandler+0x12ac>)
   9017a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   9017e:	f001 bb48 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   90182:	bf00      	nop
   90184:	00097a25 	.word	0x00097a25
   90188:	000a5f7c 	.word	0x000a5f7c
   9018c:	00091e2d 	.word	0x00091e2d
   90190:	000979fd 	.word	0x000979fd
   90194:	00097a11 	.word	0x00097a11
   90198:	00097949 	.word	0x00097949
   9019c:	000979ad 	.word	0x000979ad
   901a0:	000979cd 	.word	0x000979cd
   901a4:	000a5f84 	.word	0x000a5f84
   901a8:	000a5f90 	.word	0x000a5f90
   901ac:	000a5f9c 	.word	0x000a5f9c
   901b0:	000a5fac 	.word	0x000a5fac
   901b4:	000a5fbc 	.word	0x000a5fbc
   901b8:	000a5fc8 	.word	0x000a5fc8
   901bc:	000a5fd4 	.word	0x000a5fd4
   901c0:	4bb2      	ldr	r3, [pc, #712]	; (9048c <cl_testharnesscommandhandler+0x157c>)
   901c2:	2201      	movs	r2, #1
   901c4:	701a      	strb	r2, [r3, #0]
   901c6:	2005      	movs	r0, #5
   901c8:	4bb1      	ldr	r3, [pc, #708]	; (90490 <cl_testharnesscommandhandler+0x1580>)
   901ca:	4798      	blx	r3
   901cc:	2008      	movs	r0, #8
   901ce:	4bb0      	ldr	r3, [pc, #704]	; (90490 <cl_testharnesscommandhandler+0x1580>)
   901d0:	4798      	blx	r3
   901d2:	200a      	movs	r0, #10
   901d4:	4bae      	ldr	r3, [pc, #696]	; (90490 <cl_testharnesscommandhandler+0x1580>)
   901d6:	4798      	blx	r3
   901d8:	200b      	movs	r0, #11
   901da:	4bad      	ldr	r3, [pc, #692]	; (90490 <cl_testharnesscommandhandler+0x1580>)
   901dc:	4798      	blx	r3
   901de:	200c      	movs	r0, #12
   901e0:	4bab      	ldr	r3, [pc, #684]	; (90490 <cl_testharnesscommandhandler+0x1580>)
   901e2:	4798      	blx	r3
   901e4:	2009      	movs	r0, #9
   901e6:	4baa      	ldr	r3, [pc, #680]	; (90490 <cl_testharnesscommandhandler+0x1580>)
   901e8:	4798      	blx	r3
   901ea:	2006      	movs	r0, #6
   901ec:	4ba8      	ldr	r3, [pc, #672]	; (90490 <cl_testharnesscommandhandler+0x1580>)
   901ee:	4798      	blx	r3
   901f0:	2007      	movs	r0, #7
   901f2:	4ba7      	ldr	r3, [pc, #668]	; (90490 <cl_testharnesscommandhandler+0x1580>)
   901f4:	4798      	blx	r3
   901f6:	2001      	movs	r0, #1
   901f8:	4ba6      	ldr	r3, [pc, #664]	; (90494 <cl_testharnesscommandhandler+0x1584>)
   901fa:	4798      	blx	r3
   901fc:	4603      	mov	r3, r0
   901fe:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90202:	2002      	movs	r0, #2
   90204:	4ba3      	ldr	r3, [pc, #652]	; (90494 <cl_testharnesscommandhandler+0x1584>)
   90206:	4798      	blx	r3
   90208:	4603      	mov	r3, r0
   9020a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9020e:	4ba2      	ldr	r3, [pc, #648]	; (90498 <cl_testharnesscommandhandler+0x1588>)
   90210:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   90214:	f001 bafd 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   90218:	4b9c      	ldr	r3, [pc, #624]	; (9048c <cl_testharnesscommandhandler+0x157c>)
   9021a:	2200      	movs	r2, #0
   9021c:	701a      	strb	r2, [r3, #0]
   9021e:	4b9f      	ldr	r3, [pc, #636]	; (9049c <cl_testharnesscommandhandler+0x158c>)
   90220:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   90224:	2001      	movs	r0, #1
   90226:	4b9e      	ldr	r3, [pc, #632]	; (904a0 <cl_testharnesscommandhandler+0x1590>)
   90228:	4798      	blx	r3
   9022a:	4603      	mov	r3, r0
   9022c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90230:	2002      	movs	r0, #2
   90232:	4b9b      	ldr	r3, [pc, #620]	; (904a0 <cl_testharnesscommandhandler+0x1590>)
   90234:	4798      	blx	r3
   90236:	4603      	mov	r3, r0
   90238:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9023c:	4b93      	ldr	r3, [pc, #588]	; (9048c <cl_testharnesscommandhandler+0x157c>)
   9023e:	2200      	movs	r2, #0
   90240:	701a      	strb	r2, [r3, #0]
   90242:	f001 bae6 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   90246:	4b97      	ldr	r3, [pc, #604]	; (904a4 <cl_testharnesscommandhandler+0x1594>)
   90248:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   9024c:	2005      	movs	r0, #5
   9024e:	4b96      	ldr	r3, [pc, #600]	; (904a8 <cl_testharnesscommandhandler+0x1598>)
   90250:	4798      	blx	r3
   90252:	2008      	movs	r0, #8
   90254:	4b94      	ldr	r3, [pc, #592]	; (904a8 <cl_testharnesscommandhandler+0x1598>)
   90256:	4798      	blx	r3
   90258:	200a      	movs	r0, #10
   9025a:	4b93      	ldr	r3, [pc, #588]	; (904a8 <cl_testharnesscommandhandler+0x1598>)
   9025c:	4798      	blx	r3
   9025e:	200b      	movs	r0, #11
   90260:	4b91      	ldr	r3, [pc, #580]	; (904a8 <cl_testharnesscommandhandler+0x1598>)
   90262:	4798      	blx	r3
   90264:	200c      	movs	r0, #12
   90266:	4b90      	ldr	r3, [pc, #576]	; (904a8 <cl_testharnesscommandhandler+0x1598>)
   90268:	4798      	blx	r3
   9026a:	2009      	movs	r0, #9
   9026c:	4b8e      	ldr	r3, [pc, #568]	; (904a8 <cl_testharnesscommandhandler+0x1598>)
   9026e:	4798      	blx	r3
   90270:	2006      	movs	r0, #6
   90272:	4b8d      	ldr	r3, [pc, #564]	; (904a8 <cl_testharnesscommandhandler+0x1598>)
   90274:	4798      	blx	r3
   90276:	2007      	movs	r0, #7
   90278:	4b8b      	ldr	r3, [pc, #556]	; (904a8 <cl_testharnesscommandhandler+0x1598>)
   9027a:	4798      	blx	r3
   9027c:	2001      	movs	r0, #1
   9027e:	4b88      	ldr	r3, [pc, #544]	; (904a0 <cl_testharnesscommandhandler+0x1590>)
   90280:	4798      	blx	r3
   90282:	4603      	mov	r3, r0
   90284:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90288:	2002      	movs	r0, #2
   9028a:	4b85      	ldr	r3, [pc, #532]	; (904a0 <cl_testharnesscommandhandler+0x1590>)
   9028c:	4798      	blx	r3
   9028e:	4603      	mov	r3, r0
   90290:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90294:	4b7d      	ldr	r3, [pc, #500]	; (9048c <cl_testharnesscommandhandler+0x157c>)
   90296:	2200      	movs	r2, #0
   90298:	701a      	strb	r2, [r3, #0]
   9029a:	f001 baba 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   9029e:	4b83      	ldr	r3, [pc, #524]	; (904ac <cl_testharnesscommandhandler+0x159c>)
   902a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   902a4:	4b82      	ldr	r3, [pc, #520]	; (904b0 <cl_testharnesscommandhandler+0x15a0>)
   902a6:	2205      	movs	r2, #5
   902a8:	601a      	str	r2, [r3, #0]
   902aa:	4b78      	ldr	r3, [pc, #480]	; (9048c <cl_testharnesscommandhandler+0x157c>)
   902ac:	2200      	movs	r2, #0
   902ae:	701a      	strb	r2, [r3, #0]
   902b0:	f001 baaf 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   902b4:	f44f 6010 	mov.w	r0, #2304	; 0x900
   902b8:	4b7e      	ldr	r3, [pc, #504]	; (904b4 <cl_testharnesscommandhandler+0x15a4>)
   902ba:	4798      	blx	r3
   902bc:	f001 baa9 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   902c0:	f44f 60c0 	mov.w	r0, #1536	; 0x600
   902c4:	4b7b      	ldr	r3, [pc, #492]	; (904b4 <cl_testharnesscommandhandler+0x15a4>)
   902c6:	4798      	blx	r3
   902c8:	f001 baa3 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   902cc:	2064      	movs	r0, #100	; 0x64
   902ce:	4b7a      	ldr	r3, [pc, #488]	; (904b8 <cl_testharnesscommandhandler+0x15a8>)
   902d0:	4798      	blx	r3
   902d2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   902d6:	2b02      	cmp	r3, #2
   902d8:	d104      	bne.n	902e4 <cl_testharnesscommandhandler+0x13d4>
   902da:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   902de:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   902e2:	e00b      	b.n	902fc <cl_testharnesscommandhandler+0x13ec>
   902e4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   902e8:	2b03      	cmp	r3, #3
   902ea:	d107      	bne.n	902fc <cl_testharnesscommandhandler+0x13ec>
   902ec:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   902f0:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
   902f4:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   902f8:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   902fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   90300:	4a6e      	ldr	r2, [pc, #440]	; (904bc <cl_testharnesscommandhandler+0x15ac>)
   90302:	6013      	str	r3, [r2, #0]
   90304:	4b6d      	ldr	r3, [pc, #436]	; (904bc <cl_testharnesscommandhandler+0x15ac>)
   90306:	681b      	ldr	r3, [r3, #0]
   90308:	4618      	mov	r0, r3
   9030a:	4b6a      	ldr	r3, [pc, #424]	; (904b4 <cl_testharnesscommandhandler+0x15a4>)
   9030c:	4798      	blx	r3
   9030e:	f001 ba80 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   90312:	4b6b      	ldr	r3, [pc, #428]	; (904c0 <cl_testharnesscommandhandler+0x15b0>)
   90314:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   90318:	2004      	movs	r0, #4
   9031a:	4b63      	ldr	r3, [pc, #396]	; (904a8 <cl_testharnesscommandhandler+0x1598>)
   9031c:	4798      	blx	r3
   9031e:	2032      	movs	r0, #50	; 0x32
   90320:	4b65      	ldr	r3, [pc, #404]	; (904b8 <cl_testharnesscommandhandler+0x15a8>)
   90322:	4798      	blx	r3
   90324:	2004      	movs	r0, #4
   90326:	4b5a      	ldr	r3, [pc, #360]	; (90490 <cl_testharnesscommandhandler+0x1580>)
   90328:	4798      	blx	r3
   9032a:	2032      	movs	r0, #50	; 0x32
   9032c:	4b62      	ldr	r3, [pc, #392]	; (904b8 <cl_testharnesscommandhandler+0x15a8>)
   9032e:	4798      	blx	r3
   90330:	f001 ba6f 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   90334:	4b63      	ldr	r3, [pc, #396]	; (904c4 <cl_testharnesscommandhandler+0x15b4>)
   90336:	4798      	blx	r3
   90338:	4b63      	ldr	r3, [pc, #396]	; (904c8 <cl_testharnesscommandhandler+0x15b8>)
   9033a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   9033e:	f001 ba68 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   90342:	2300      	movs	r3, #0
   90344:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   90348:	e008      	b.n	9035c <cl_testharnesscommandhandler+0x144c>
   9034a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   9034e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   90352:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   90356:	3301      	adds	r3, #1
   90358:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   9035c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   90360:	2b0f      	cmp	r3, #15
   90362:	d9f2      	bls.n	9034a <cl_testharnesscommandhandler+0x143a>
   90364:	f001 ba55 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   90368:	4b58      	ldr	r3, [pc, #352]	; (904cc <cl_testharnesscommandhandler+0x15bc>)
   9036a:	2201      	movs	r2, #1
   9036c:	701a      	strb	r2, [r3, #0]
   9036e:	f001 ba50 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   90372:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90376:	2b01      	cmp	r3, #1
   90378:	d107      	bne.n	9038a <cl_testharnesscommandhandler+0x147a>
   9037a:	4b55      	ldr	r3, [pc, #340]	; (904d0 <cl_testharnesscommandhandler+0x15c0>)
   9037c:	2201      	movs	r2, #1
   9037e:	701a      	strb	r2, [r3, #0]
   90380:	4b54      	ldr	r3, [pc, #336]	; (904d4 <cl_testharnesscommandhandler+0x15c4>)
   90382:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   90386:	f001 ba44 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   9038a:	4b51      	ldr	r3, [pc, #324]	; (904d0 <cl_testharnesscommandhandler+0x15c0>)
   9038c:	2200      	movs	r2, #0
   9038e:	701a      	strb	r2, [r3, #0]
   90390:	4b51      	ldr	r3, [pc, #324]	; (904d8 <cl_testharnesscommandhandler+0x15c8>)
   90392:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   90396:	f001 ba3c 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   9039a:	4b50      	ldr	r3, [pc, #320]	; (904dc <cl_testharnesscommandhandler+0x15cc>)
   9039c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   903a0:	2207      	movs	r2, #7
   903a2:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   903a6:	2018      	movs	r0, #24
   903a8:	4b4d      	ldr	r3, [pc, #308]	; (904e0 <cl_testharnesscommandhandler+0x15d0>)
   903aa:	4798      	blx	r3
   903ac:	4603      	mov	r3, r0
   903ae:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   903b2:	f001 ba2e 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   903b6:	2004      	movs	r0, #4
   903b8:	4b3b      	ldr	r3, [pc, #236]	; (904a8 <cl_testharnesscommandhandler+0x1598>)
   903ba:	4798      	blx	r3
   903bc:	2032      	movs	r0, #50	; 0x32
   903be:	4b3e      	ldr	r3, [pc, #248]	; (904b8 <cl_testharnesscommandhandler+0x15a8>)
   903c0:	4798      	blx	r3
   903c2:	2004      	movs	r0, #4
   903c4:	4b32      	ldr	r3, [pc, #200]	; (90490 <cl_testharnesscommandhandler+0x1580>)
   903c6:	4798      	blx	r3
   903c8:	f001 ba23 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   903cc:	4b45      	ldr	r3, [pc, #276]	; (904e4 <cl_testharnesscommandhandler+0x15d4>)
   903ce:	4798      	blx	r3
   903d0:	f001 ba1f 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   903d4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   903d8:	2b01      	cmp	r3, #1
   903da:	d107      	bne.n	903ec <cl_testharnesscommandhandler+0x14dc>
   903dc:	4b42      	ldr	r3, [pc, #264]	; (904e8 <cl_testharnesscommandhandler+0x15d8>)
   903de:	2201      	movs	r2, #1
   903e0:	701a      	strb	r2, [r3, #0]
   903e2:	4b42      	ldr	r3, [pc, #264]	; (904ec <cl_testharnesscommandhandler+0x15dc>)
   903e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   903e8:	f001 ba13 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   903ec:	4b3e      	ldr	r3, [pc, #248]	; (904e8 <cl_testharnesscommandhandler+0x15d8>)
   903ee:	2200      	movs	r2, #0
   903f0:	701a      	strb	r2, [r3, #0]
   903f2:	4b3f      	ldr	r3, [pc, #252]	; (904f0 <cl_testharnesscommandhandler+0x15e0>)
   903f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   903f8:	f001 ba0b 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   903fc:	4b3d      	ldr	r3, [pc, #244]	; (904f4 <cl_testharnesscommandhandler+0x15e4>)
   903fe:	4798      	blx	r3
   90400:	f001 ba07 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   90404:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90408:	b29b      	uxth	r3, r3
   9040a:	4618      	mov	r0, r3
   9040c:	4b3a      	ldr	r3, [pc, #232]	; (904f8 <cl_testharnesscommandhandler+0x15e8>)
   9040e:	4798      	blx	r3
   90410:	f001 b9ff 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   90414:	4b39      	ldr	r3, [pc, #228]	; (904fc <cl_testharnesscommandhandler+0x15ec>)
   90416:	2200      	movs	r2, #0
   90418:	801a      	strh	r2, [r3, #0]
   9041a:	2300      	movs	r3, #0
   9041c:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
   90420:	4b37      	ldr	r3, [pc, #220]	; (90500 <cl_testharnesscommandhandler+0x15f0>)
   90422:	4798      	blx	r3
   90424:	f001 b9f5 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   90428:	2064      	movs	r0, #100	; 0x64
   9042a:	4b23      	ldr	r3, [pc, #140]	; (904b8 <cl_testharnesscommandhandler+0x15a8>)
   9042c:	4798      	blx	r3
   9042e:	4b35      	ldr	r3, [pc, #212]	; (90504 <cl_testharnesscommandhandler+0x15f4>)
   90430:	4798      	blx	r3
   90432:	f001 b9ee 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   90436:	4b34      	ldr	r3, [pc, #208]	; (90508 <cl_testharnesscommandhandler+0x15f8>)
   90438:	4798      	blx	r3
   9043a:	f001 b9ea 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   9043e:	4b33      	ldr	r3, [pc, #204]	; (9050c <cl_testharnesscommandhandler+0x15fc>)
   90440:	4798      	blx	r3
   90442:	f001 b9e6 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   90446:	4b32      	ldr	r3, [pc, #200]	; (90510 <cl_testharnesscommandhandler+0x1600>)
   90448:	4798      	blx	r3
   9044a:	4b2e      	ldr	r3, [pc, #184]	; (90504 <cl_testharnesscommandhandler+0x15f4>)
   9044c:	4798      	blx	r3
   9044e:	f001 b9e0 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   90452:	4b30      	ldr	r3, [pc, #192]	; (90514 <cl_testharnesscommandhandler+0x1604>)
   90454:	4798      	blx	r3
   90456:	4b2b      	ldr	r3, [pc, #172]	; (90504 <cl_testharnesscommandhandler+0x15f4>)
   90458:	4798      	blx	r3
   9045a:	f001 b9da 	b.w	91812 <cl_testharnesscommandhandler+0x2902>
   9045e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90462:	2b02      	cmp	r3, #2
   90464:	d104      	bne.n	90470 <cl_testharnesscommandhandler+0x1560>
   90466:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9046a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   9046e:	e078      	b.n	90562 <cl_testharnesscommandhandler+0x1652>
   90470:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90474:	2b03      	cmp	r3, #3
   90476:	d14f      	bne.n	90518 <cl_testharnesscommandhandler+0x1608>
   90478:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9047c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
   90480:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90484:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   90488:	e06b      	b.n	90562 <cl_testharnesscommandhandler+0x1652>
   9048a:	bf00      	nop
   9048c:	2007263d 	.word	0x2007263d
   90490:	000979cd 	.word	0x000979cd
   90494:	00097949 	.word	0x00097949
   90498:	000a5fe0 	.word	0x000a5fe0
   9049c:	000a5fec 	.word	0x000a5fec
   904a0:	0009790d 	.word	0x0009790d
   904a4:	000a5ff8 	.word	0x000a5ff8
   904a8:	000979ad 	.word	0x000979ad
   904ac:	000a6004 	.word	0x000a6004
   904b0:	20072870 	.word	0x20072870
   904b4:	00097a8d 	.word	0x00097a8d
   904b8:	00091e2d 	.word	0x00091e2d
   904bc:	20070470 	.word	0x20070470
   904c0:	000a6008 	.word	0x000a6008
   904c4:	00097b0d 	.word	0x00097b0d
   904c8:	000a5f20 	.word	0x000a5f20
   904cc:	2007263c 	.word	0x2007263c
   904d0:	200709ee 	.word	0x200709ee
   904d4:	000a6010 	.word	0x000a6010
   904d8:	000a601c 	.word	0x000a601c
   904dc:	000a6028 	.word	0x000a6028
   904e0:	00099729 	.word	0x00099729
   904e4:	00097d69 	.word	0x00097d69
   904e8:	2007263f 	.word	0x2007263f
   904ec:	000a6030 	.word	0x000a6030
   904f0:	000a6038 	.word	0x000a6038
   904f4:	00097d55 	.word	0x00097d55
   904f8:	00097d7d 	.word	0x00097d7d
   904fc:	2007263a 	.word	0x2007263a
   90500:	00097d29 	.word	0x00097d29
   90504:	00097da1 	.word	0x00097da1
   90508:	00097b59 	.word	0x00097b59
   9050c:	00097b81 	.word	0x00097b81
   90510:	00097b21 	.word	0x00097b21
   90514:	00097b3d 	.word	0x00097b3d
   90518:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   9051c:	2b04      	cmp	r3, #4
   9051e:	d10c      	bne.n	9053a <cl_testharnesscommandhandler+0x162a>
   90520:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90524:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
   90528:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   9052c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
   90530:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   90534:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   90538:	e013      	b.n	90562 <cl_testharnesscommandhandler+0x1652>
   9053a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   9053e:	2b05      	cmp	r3, #5
   90540:	d10f      	bne.n	90562 <cl_testharnesscommandhandler+0x1652>
   90542:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90546:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
   9054a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   9054e:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
   90552:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   90556:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
   9055a:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
   9055e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   90562:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
   90566:	2b0c      	cmp	r3, #12
   90568:	d028      	beq.n	905bc <cl_testharnesscommandhandler+0x16ac>
   9056a:	2b0c      	cmp	r3, #12
   9056c:	dc11      	bgt.n	90592 <cl_testharnesscommandhandler+0x1682>
   9056e:	2b05      	cmp	r3, #5
   90570:	f000 83fe 	beq.w	90d70 <cl_testharnesscommandhandler+0x1e60>
   90574:	2b05      	cmp	r3, #5
   90576:	dc04      	bgt.n	90582 <cl_testharnesscommandhandler+0x1672>
   90578:	2b01      	cmp	r3, #1
   9057a:	f000 8365 	beq.w	90c48 <cl_testharnesscommandhandler+0x1d38>
   9057e:	f000 be1d 	b.w	911bc <cl_testharnesscommandhandler+0x22ac>
   90582:	2b06      	cmp	r3, #6
   90584:	f000 8497 	beq.w	90eb6 <cl_testharnesscommandhandler+0x1fa6>
   90588:	2b07      	cmp	r3, #7
   9058a:	f000 8553 	beq.w	91034 <cl_testharnesscommandhandler+0x2124>
   9058e:	f000 be15 	b.w	911bc <cl_testharnesscommandhandler+0x22ac>
   90592:	2b11      	cmp	r3, #17
   90594:	f000 820c 	beq.w	909b0 <cl_testharnesscommandhandler+0x1aa0>
   90598:	2b11      	cmp	r3, #17
   9059a:	dc07      	bgt.n	905ac <cl_testharnesscommandhandler+0x169c>
   9059c:	2b0d      	cmp	r3, #13
   9059e:	f000 80b1 	beq.w	90704 <cl_testharnesscommandhandler+0x17f4>
   905a2:	2b0e      	cmp	r3, #14
   905a4:	f000 814e 	beq.w	90844 <cl_testharnesscommandhandler+0x1934>
   905a8:	f000 be08 	b.w	911bc <cl_testharnesscommandhandler+0x22ac>
   905ac:	2b12      	cmp	r3, #18
   905ae:	f000 8298 	beq.w	90ae2 <cl_testharnesscommandhandler+0x1bd2>
   905b2:	2bff      	cmp	r3, #255	; 0xff
   905b4:	f000 85e1 	beq.w	9117a <cl_testharnesscommandhandler+0x226a>
   905b8:	f000 be00 	b.w	911bc <cl_testharnesscommandhandler+0x22ac>
   905bc:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   905c0:	2b01      	cmp	r3, #1
   905c2:	d11f      	bne.n	90604 <cl_testharnesscommandhandler+0x16f4>
   905c4:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   905c8:	4bc4      	ldr	r3, [pc, #784]	; (908dc <cl_testharnesscommandhandler+0x19cc>)
   905ca:	4610      	mov	r0, r2
   905cc:	4798      	blx	r3
   905ce:	4602      	mov	r2, r0
   905d0:	4bc3      	ldr	r3, [pc, #780]	; (908e0 <cl_testharnesscommandhandler+0x19d0>)
   905d2:	639a      	str	r2, [r3, #56]	; 0x38
   905d4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   905d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
   905dc:	220a      	movs	r2, #10
   905de:	49c1      	ldr	r1, [pc, #772]	; (908e4 <cl_testharnesscommandhandler+0x19d4>)
   905e0:	2018      	movs	r0, #24
   905e2:	4bc1      	ldr	r3, [pc, #772]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   905e4:	4798      	blx	r3
   905e6:	4603      	mov	r3, r0
   905e8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   905ec:	f107 034a 	add.w	r3, r7, #74	; 0x4a
   905f0:	2202      	movs	r2, #2
   905f2:	4619      	mov	r1, r3
   905f4:	2019      	movs	r0, #25
   905f6:	4bbc      	ldr	r3, [pc, #752]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   905f8:	4798      	blx	r3
   905fa:	4603      	mov	r3, r0
   905fc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90600:	f000 bdcb 	b.w	9119a <cl_testharnesscommandhandler+0x228a>
   90604:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90608:	2b00      	cmp	r3, #0
   9060a:	d126      	bne.n	9065a <cl_testharnesscommandhandler+0x174a>
   9060c:	2300      	movs	r3, #0
   9060e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
   90612:	2300      	movs	r3, #0
   90614:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
   90618:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   9061c:	4baf      	ldr	r3, [pc, #700]	; (908dc <cl_testharnesscommandhandler+0x19cc>)
   9061e:	4610      	mov	r0, r2
   90620:	4798      	blx	r3
   90622:	4602      	mov	r2, r0
   90624:	4bae      	ldr	r3, [pc, #696]	; (908e0 <cl_testharnesscommandhandler+0x19d0>)
   90626:	63da      	str	r2, [r3, #60]	; 0x3c
   90628:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9062c:	b21b      	sxth	r3, r3
   9062e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
   90632:	2209      	movs	r2, #9
   90634:	49ad      	ldr	r1, [pc, #692]	; (908ec <cl_testharnesscommandhandler+0x19dc>)
   90636:	2018      	movs	r0, #24
   90638:	4bab      	ldr	r3, [pc, #684]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   9063a:	4798      	blx	r3
   9063c:	4603      	mov	r3, r0
   9063e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90642:	f107 0348 	add.w	r3, r7, #72	; 0x48
   90646:	2202      	movs	r2, #2
   90648:	4619      	mov	r1, r3
   9064a:	2019      	movs	r0, #25
   9064c:	4ba6      	ldr	r3, [pc, #664]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   9064e:	4798      	blx	r3
   90650:	4603      	mov	r3, r0
   90652:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90656:	f000 bda0 	b.w	9119a <cl_testharnesscommandhandler+0x228a>
   9065a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9065e:	2b02      	cmp	r3, #2
   90660:	d128      	bne.n	906b4 <cl_testharnesscommandhandler+0x17a4>
   90662:	2300      	movs	r3, #0
   90664:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
   90668:	2300      	movs	r3, #0
   9066a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
   9066e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90672:	b21a      	sxth	r2, r3
   90674:	4b9e      	ldr	r3, [pc, #632]	; (908f0 <cl_testharnesscommandhandler+0x19e0>)
   90676:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
   9067a:	4b9d      	ldr	r3, [pc, #628]	; (908f0 <cl_testharnesscommandhandler+0x19e0>)
   9067c:	2201      	movs	r2, #1
   9067e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   90682:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90686:	b21b      	sxth	r3, r3
   90688:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
   9068c:	2209      	movs	r2, #9
   9068e:	4997      	ldr	r1, [pc, #604]	; (908ec <cl_testharnesscommandhandler+0x19dc>)
   90690:	2018      	movs	r0, #24
   90692:	4b95      	ldr	r3, [pc, #596]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   90694:	4798      	blx	r3
   90696:	4603      	mov	r3, r0
   90698:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9069c:	f107 0346 	add.w	r3, r7, #70	; 0x46
   906a0:	2202      	movs	r2, #2
   906a2:	4619      	mov	r1, r3
   906a4:	2019      	movs	r0, #25
   906a6:	4b90      	ldr	r3, [pc, #576]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   906a8:	4798      	blx	r3
   906aa:	4603      	mov	r3, r0
   906ac:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   906b0:	f000 bd73 	b.w	9119a <cl_testharnesscommandhandler+0x228a>
   906b4:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   906b8:	2b03      	cmp	r3, #3
   906ba:	f040 856e 	bne.w	9119a <cl_testharnesscommandhandler+0x228a>
   906be:	2300      	movs	r3, #0
   906c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
   906c4:	2300      	movs	r3, #0
   906c6:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
   906ca:	4b89      	ldr	r3, [pc, #548]	; (908f0 <cl_testharnesscommandhandler+0x19e0>)
   906cc:	2200      	movs	r2, #0
   906ce:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   906d2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   906d6:	b21b      	sxth	r3, r3
   906d8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
   906dc:	2205      	movs	r2, #5
   906de:	4985      	ldr	r1, [pc, #532]	; (908f4 <cl_testharnesscommandhandler+0x19e4>)
   906e0:	2018      	movs	r0, #24
   906e2:	4b81      	ldr	r3, [pc, #516]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   906e4:	4798      	blx	r3
   906e6:	4603      	mov	r3, r0
   906e8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   906ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
   906f0:	2202      	movs	r2, #2
   906f2:	4619      	mov	r1, r3
   906f4:	2019      	movs	r0, #25
   906f6:	4b7c      	ldr	r3, [pc, #496]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   906f8:	4798      	blx	r3
   906fa:	4603      	mov	r3, r0
   906fc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90700:	f000 bd4b 	b.w	9119a <cl_testharnesscommandhandler+0x228a>
   90704:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90708:	2b01      	cmp	r3, #1
   9070a:	d11f      	bne.n	9074c <cl_testharnesscommandhandler+0x183c>
   9070c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90710:	4b72      	ldr	r3, [pc, #456]	; (908dc <cl_testharnesscommandhandler+0x19cc>)
   90712:	4610      	mov	r0, r2
   90714:	4798      	blx	r3
   90716:	4602      	mov	r2, r0
   90718:	4b71      	ldr	r3, [pc, #452]	; (908e0 <cl_testharnesscommandhandler+0x19d0>)
   9071a:	641a      	str	r2, [r3, #64]	; 0x40
   9071c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90720:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
   90724:	220a      	movs	r2, #10
   90726:	4974      	ldr	r1, [pc, #464]	; (908f8 <cl_testharnesscommandhandler+0x19e8>)
   90728:	2018      	movs	r0, #24
   9072a:	4b6f      	ldr	r3, [pc, #444]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   9072c:	4798      	blx	r3
   9072e:	4603      	mov	r3, r0
   90730:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90734:	f107 0342 	add.w	r3, r7, #66	; 0x42
   90738:	2202      	movs	r2, #2
   9073a:	4619      	mov	r1, r3
   9073c:	2019      	movs	r0, #25
   9073e:	4b6a      	ldr	r3, [pc, #424]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   90740:	4798      	blx	r3
   90742:	4603      	mov	r3, r0
   90744:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90748:	f000 bd29 	b.w	9119e <cl_testharnesscommandhandler+0x228e>
   9074c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90750:	2b00      	cmp	r3, #0
   90752:	d126      	bne.n	907a2 <cl_testharnesscommandhandler+0x1892>
   90754:	2300      	movs	r3, #0
   90756:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   9075a:	2300      	movs	r3, #0
   9075c:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
   90760:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90764:	4b5d      	ldr	r3, [pc, #372]	; (908dc <cl_testharnesscommandhandler+0x19cc>)
   90766:	4610      	mov	r0, r2
   90768:	4798      	blx	r3
   9076a:	4602      	mov	r2, r0
   9076c:	4b5c      	ldr	r3, [pc, #368]	; (908e0 <cl_testharnesscommandhandler+0x19d0>)
   9076e:	645a      	str	r2, [r3, #68]	; 0x44
   90770:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90774:	b21b      	sxth	r3, r3
   90776:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   9077a:	2209      	movs	r2, #9
   9077c:	495f      	ldr	r1, [pc, #380]	; (908fc <cl_testharnesscommandhandler+0x19ec>)
   9077e:	2018      	movs	r0, #24
   90780:	4b59      	ldr	r3, [pc, #356]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   90782:	4798      	blx	r3
   90784:	4603      	mov	r3, r0
   90786:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9078a:	f107 0340 	add.w	r3, r7, #64	; 0x40
   9078e:	2202      	movs	r2, #2
   90790:	4619      	mov	r1, r3
   90792:	2019      	movs	r0, #25
   90794:	4b54      	ldr	r3, [pc, #336]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   90796:	4798      	blx	r3
   90798:	4603      	mov	r3, r0
   9079a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9079e:	f000 bcfe 	b.w	9119e <cl_testharnesscommandhandler+0x228e>
   907a2:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   907a6:	2b02      	cmp	r3, #2
   907a8:	d126      	bne.n	907f8 <cl_testharnesscommandhandler+0x18e8>
   907aa:	2300      	movs	r3, #0
   907ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
   907ae:	2300      	movs	r3, #0
   907b0:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
   907b4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   907b8:	b21a      	sxth	r2, r3
   907ba:	4b4d      	ldr	r3, [pc, #308]	; (908f0 <cl_testharnesscommandhandler+0x19e0>)
   907bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   907c0:	4b4b      	ldr	r3, [pc, #300]	; (908f0 <cl_testharnesscommandhandler+0x19e0>)
   907c2:	2201      	movs	r2, #1
   907c4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
   907c8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   907cc:	b21b      	sxth	r3, r3
   907ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
   907d0:	2209      	movs	r2, #9
   907d2:	494b      	ldr	r1, [pc, #300]	; (90900 <cl_testharnesscommandhandler+0x19f0>)
   907d4:	2018      	movs	r0, #24
   907d6:	4b44      	ldr	r3, [pc, #272]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   907d8:	4798      	blx	r3
   907da:	4603      	mov	r3, r0
   907dc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   907e0:	f107 033e 	add.w	r3, r7, #62	; 0x3e
   907e4:	2202      	movs	r2, #2
   907e6:	4619      	mov	r1, r3
   907e8:	2019      	movs	r0, #25
   907ea:	4b3f      	ldr	r3, [pc, #252]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   907ec:	4798      	blx	r3
   907ee:	4603      	mov	r3, r0
   907f0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   907f4:	f000 bcd3 	b.w	9119e <cl_testharnesscommandhandler+0x228e>
   907f8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   907fc:	2b03      	cmp	r3, #3
   907fe:	f040 84ce 	bne.w	9119e <cl_testharnesscommandhandler+0x228e>
   90802:	2300      	movs	r3, #0
   90804:	87bb      	strh	r3, [r7, #60]	; 0x3c
   90806:	2300      	movs	r3, #0
   90808:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
   9080c:	4b38      	ldr	r3, [pc, #224]	; (908f0 <cl_testharnesscommandhandler+0x19e0>)
   9080e:	2200      	movs	r2, #0
   90810:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
   90814:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90818:	b21b      	sxth	r3, r3
   9081a:	87bb      	strh	r3, [r7, #60]	; 0x3c
   9081c:	2205      	movs	r2, #5
   9081e:	4939      	ldr	r1, [pc, #228]	; (90904 <cl_testharnesscommandhandler+0x19f4>)
   90820:	2018      	movs	r0, #24
   90822:	4b31      	ldr	r3, [pc, #196]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   90824:	4798      	blx	r3
   90826:	4603      	mov	r3, r0
   90828:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9082c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   90830:	2202      	movs	r2, #2
   90832:	4619      	mov	r1, r3
   90834:	2019      	movs	r0, #25
   90836:	4b2c      	ldr	r3, [pc, #176]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   90838:	4798      	blx	r3
   9083a:	4603      	mov	r3, r0
   9083c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90840:	f000 bcad 	b.w	9119e <cl_testharnesscommandhandler+0x228e>
   90844:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90848:	2b01      	cmp	r3, #1
   9084a:	d11e      	bne.n	9088a <cl_testharnesscommandhandler+0x197a>
   9084c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90850:	4b22      	ldr	r3, [pc, #136]	; (908dc <cl_testharnesscommandhandler+0x19cc>)
   90852:	4610      	mov	r0, r2
   90854:	4798      	blx	r3
   90856:	4602      	mov	r2, r0
   90858:	4b21      	ldr	r3, [pc, #132]	; (908e0 <cl_testharnesscommandhandler+0x19d0>)
   9085a:	649a      	str	r2, [r3, #72]	; 0x48
   9085c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90860:	877b      	strh	r3, [r7, #58]	; 0x3a
   90862:	2208      	movs	r2, #8
   90864:	4928      	ldr	r1, [pc, #160]	; (90908 <cl_testharnesscommandhandler+0x19f8>)
   90866:	2018      	movs	r0, #24
   90868:	4b1f      	ldr	r3, [pc, #124]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   9086a:	4798      	blx	r3
   9086c:	4603      	mov	r3, r0
   9086e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90872:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   90876:	2202      	movs	r2, #2
   90878:	4619      	mov	r1, r3
   9087a:	2019      	movs	r0, #25
   9087c:	4b1a      	ldr	r3, [pc, #104]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   9087e:	4798      	blx	r3
   90880:	4603      	mov	r3, r0
   90882:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90886:	f000 bc8c 	b.w	911a2 <cl_testharnesscommandhandler+0x2292>
   9088a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9088e:	2b00      	cmp	r3, #0
   90890:	d13e      	bne.n	90910 <cl_testharnesscommandhandler+0x1a00>
   90892:	2300      	movs	r3, #0
   90894:	873b      	strh	r3, [r7, #56]	; 0x38
   90896:	2300      	movs	r3, #0
   90898:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
   9089c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   908a0:	4b0e      	ldr	r3, [pc, #56]	; (908dc <cl_testharnesscommandhandler+0x19cc>)
   908a2:	4610      	mov	r0, r2
   908a4:	4798      	blx	r3
   908a6:	4602      	mov	r2, r0
   908a8:	4b0d      	ldr	r3, [pc, #52]	; (908e0 <cl_testharnesscommandhandler+0x19d0>)
   908aa:	64da      	str	r2, [r3, #76]	; 0x4c
   908ac:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   908b0:	b21b      	sxth	r3, r3
   908b2:	873b      	strh	r3, [r7, #56]	; 0x38
   908b4:	2207      	movs	r2, #7
   908b6:	4915      	ldr	r1, [pc, #84]	; (9090c <cl_testharnesscommandhandler+0x19fc>)
   908b8:	2018      	movs	r0, #24
   908ba:	4b0b      	ldr	r3, [pc, #44]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   908bc:	4798      	blx	r3
   908be:	4603      	mov	r3, r0
   908c0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   908c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
   908c8:	2202      	movs	r2, #2
   908ca:	4619      	mov	r1, r3
   908cc:	2019      	movs	r0, #25
   908ce:	4b06      	ldr	r3, [pc, #24]	; (908e8 <cl_testharnesscommandhandler+0x19d8>)
   908d0:	4798      	blx	r3
   908d2:	4603      	mov	r3, r0
   908d4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   908d8:	f000 bc63 	b.w	911a2 <cl_testharnesscommandhandler+0x2292>
   908dc:	000a3d65 	.word	0x000a3d65
   908e0:	20072d08 	.word	0x20072d08
   908e4:	000a6044 	.word	0x000a6044
   908e8:	00099729 	.word	0x00099729
   908ec:	000a6050 	.word	0x000a6050
   908f0:	2007310c 	.word	0x2007310c
   908f4:	000a605c 	.word	0x000a605c
   908f8:	000a6064 	.word	0x000a6064
   908fc:	000a6070 	.word	0x000a6070
   90900:	000a607c 	.word	0x000a607c
   90904:	000a6084 	.word	0x000a6084
   90908:	000a608c 	.word	0x000a608c
   9090c:	000a6098 	.word	0x000a6098
   90910:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90914:	2b02      	cmp	r3, #2
   90916:	d126      	bne.n	90966 <cl_testharnesscommandhandler+0x1a56>
   90918:	2300      	movs	r3, #0
   9091a:	86fb      	strh	r3, [r7, #54]	; 0x36
   9091c:	2300      	movs	r3, #0
   9091e:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
   90922:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90926:	b21a      	sxth	r2, r3
   90928:	4bba      	ldr	r3, [pc, #744]	; (90c14 <cl_testharnesscommandhandler+0x1d04>)
   9092a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   9092e:	4bb9      	ldr	r3, [pc, #740]	; (90c14 <cl_testharnesscommandhandler+0x1d04>)
   90930:	2201      	movs	r2, #1
   90932:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
   90936:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9093a:	b21b      	sxth	r3, r3
   9093c:	86fb      	strh	r3, [r7, #54]	; 0x36
   9093e:	2209      	movs	r2, #9
   90940:	49b5      	ldr	r1, [pc, #724]	; (90c18 <cl_testharnesscommandhandler+0x1d08>)
   90942:	2018      	movs	r0, #24
   90944:	4bb5      	ldr	r3, [pc, #724]	; (90c1c <cl_testharnesscommandhandler+0x1d0c>)
   90946:	4798      	blx	r3
   90948:	4603      	mov	r3, r0
   9094a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9094e:	f107 0336 	add.w	r3, r7, #54	; 0x36
   90952:	2202      	movs	r2, #2
   90954:	4619      	mov	r1, r3
   90956:	2019      	movs	r0, #25
   90958:	4bb0      	ldr	r3, [pc, #704]	; (90c1c <cl_testharnesscommandhandler+0x1d0c>)
   9095a:	4798      	blx	r3
   9095c:	4603      	mov	r3, r0
   9095e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90962:	f000 bc1e 	b.w	911a2 <cl_testharnesscommandhandler+0x2292>
   90966:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9096a:	2b03      	cmp	r3, #3
   9096c:	f040 8419 	bne.w	911a2 <cl_testharnesscommandhandler+0x2292>
   90970:	2300      	movs	r3, #0
   90972:	86bb      	strh	r3, [r7, #52]	; 0x34
   90974:	2300      	movs	r3, #0
   90976:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
   9097a:	4ba6      	ldr	r3, [pc, #664]	; (90c14 <cl_testharnesscommandhandler+0x1d04>)
   9097c:	2200      	movs	r2, #0
   9097e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
   90982:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90986:	b21b      	sxth	r3, r3
   90988:	86bb      	strh	r3, [r7, #52]	; 0x34
   9098a:	2205      	movs	r2, #5
   9098c:	49a4      	ldr	r1, [pc, #656]	; (90c20 <cl_testharnesscommandhandler+0x1d10>)
   9098e:	2018      	movs	r0, #24
   90990:	4ba2      	ldr	r3, [pc, #648]	; (90c1c <cl_testharnesscommandhandler+0x1d0c>)
   90992:	4798      	blx	r3
   90994:	4603      	mov	r3, r0
   90996:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9099a:	f107 0334 	add.w	r3, r7, #52	; 0x34
   9099e:	2202      	movs	r2, #2
   909a0:	4619      	mov	r1, r3
   909a2:	2019      	movs	r0, #25
   909a4:	4b9d      	ldr	r3, [pc, #628]	; (90c1c <cl_testharnesscommandhandler+0x1d0c>)
   909a6:	4798      	blx	r3
   909a8:	4603      	mov	r3, r0
   909aa:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   909ae:	e3f8      	b.n	911a2 <cl_testharnesscommandhandler+0x2292>
   909b0:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   909b4:	2b01      	cmp	r3, #1
   909b6:	d11d      	bne.n	909f4 <cl_testharnesscommandhandler+0x1ae4>
   909b8:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   909bc:	4b99      	ldr	r3, [pc, #612]	; (90c24 <cl_testharnesscommandhandler+0x1d14>)
   909be:	4610      	mov	r0, r2
   909c0:	4798      	blx	r3
   909c2:	4602      	mov	r2, r0
   909c4:	4b98      	ldr	r3, [pc, #608]	; (90c28 <cl_testharnesscommandhandler+0x1d18>)
   909c6:	609a      	str	r2, [r3, #8]
   909c8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   909cc:	867b      	strh	r3, [r7, #50]	; 0x32
   909ce:	2208      	movs	r2, #8
   909d0:	4996      	ldr	r1, [pc, #600]	; (90c2c <cl_testharnesscommandhandler+0x1d1c>)
   909d2:	2018      	movs	r0, #24
   909d4:	4b91      	ldr	r3, [pc, #580]	; (90c1c <cl_testharnesscommandhandler+0x1d0c>)
   909d6:	4798      	blx	r3
   909d8:	4603      	mov	r3, r0
   909da:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   909de:	f107 0332 	add.w	r3, r7, #50	; 0x32
   909e2:	2202      	movs	r2, #2
   909e4:	4619      	mov	r1, r3
   909e6:	2019      	movs	r0, #25
   909e8:	4b8c      	ldr	r3, [pc, #560]	; (90c1c <cl_testharnesscommandhandler+0x1d0c>)
   909ea:	4798      	blx	r3
   909ec:	4603      	mov	r3, r0
   909ee:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   909f2:	e3d8      	b.n	911a6 <cl_testharnesscommandhandler+0x2296>
   909f4:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   909f8:	2b00      	cmp	r3, #0
   909fa:	d124      	bne.n	90a46 <cl_testharnesscommandhandler+0x1b36>
   909fc:	2300      	movs	r3, #0
   909fe:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
   90a02:	2300      	movs	r3, #0
   90a04:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
   90a08:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90a0c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   90a10:	b29b      	uxth	r3, r3
   90a12:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
   90a16:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
   90a1a:	4b85      	ldr	r3, [pc, #532]	; (90c30 <cl_testharnesscommandhandler+0x1d20>)
   90a1c:	4610      	mov	r0, r2
   90a1e:	4798      	blx	r3
   90a20:	4602      	mov	r2, r0
   90a22:	4b81      	ldr	r3, [pc, #516]	; (90c28 <cl_testharnesscommandhandler+0x1d18>)
   90a24:	60da      	str	r2, [r3, #12]
   90a26:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
   90a2a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   90a2e:	b29b      	uxth	r3, r3
   90a30:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
   90a34:	220c      	movs	r2, #12
   90a36:	497f      	ldr	r1, [pc, #508]	; (90c34 <cl_testharnesscommandhandler+0x1d24>)
   90a38:	2018      	movs	r0, #24
   90a3a:	4b78      	ldr	r3, [pc, #480]	; (90c1c <cl_testharnesscommandhandler+0x1d0c>)
   90a3c:	4798      	blx	r3
   90a3e:	4603      	mov	r3, r0
   90a40:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90a44:	e3af      	b.n	911a6 <cl_testharnesscommandhandler+0x2296>
   90a46:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90a4a:	2b02      	cmp	r3, #2
   90a4c:	d124      	bne.n	90a98 <cl_testharnesscommandhandler+0x1b88>
   90a4e:	2300      	movs	r3, #0
   90a50:	863b      	strh	r3, [r7, #48]	; 0x30
   90a52:	2300      	movs	r3, #0
   90a54:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
   90a58:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90a5c:	b21a      	sxth	r2, r3
   90a5e:	4b6d      	ldr	r3, [pc, #436]	; (90c14 <cl_testharnesscommandhandler+0x1d04>)
   90a60:	859a      	strh	r2, [r3, #44]	; 0x2c
   90a62:	4b6c      	ldr	r3, [pc, #432]	; (90c14 <cl_testharnesscommandhandler+0x1d04>)
   90a64:	2201      	movs	r2, #1
   90a66:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   90a6a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90a6e:	b21b      	sxth	r3, r3
   90a70:	863b      	strh	r3, [r7, #48]	; 0x30
   90a72:	2209      	movs	r2, #9
   90a74:	4968      	ldr	r1, [pc, #416]	; (90c18 <cl_testharnesscommandhandler+0x1d08>)
   90a76:	2018      	movs	r0, #24
   90a78:	4b68      	ldr	r3, [pc, #416]	; (90c1c <cl_testharnesscommandhandler+0x1d0c>)
   90a7a:	4798      	blx	r3
   90a7c:	4603      	mov	r3, r0
   90a7e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90a82:	f107 0330 	add.w	r3, r7, #48	; 0x30
   90a86:	2202      	movs	r2, #2
   90a88:	4619      	mov	r1, r3
   90a8a:	2019      	movs	r0, #25
   90a8c:	4b63      	ldr	r3, [pc, #396]	; (90c1c <cl_testharnesscommandhandler+0x1d0c>)
   90a8e:	4798      	blx	r3
   90a90:	4603      	mov	r3, r0
   90a92:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90a96:	e386      	b.n	911a6 <cl_testharnesscommandhandler+0x2296>
   90a98:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90a9c:	2b03      	cmp	r3, #3
   90a9e:	f040 8382 	bne.w	911a6 <cl_testharnesscommandhandler+0x2296>
   90aa2:	2300      	movs	r3, #0
   90aa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
   90aa6:	2300      	movs	r3, #0
   90aa8:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
   90aac:	4b59      	ldr	r3, [pc, #356]	; (90c14 <cl_testharnesscommandhandler+0x1d04>)
   90aae:	2200      	movs	r2, #0
   90ab0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   90ab4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90ab8:	b21b      	sxth	r3, r3
   90aba:	85fb      	strh	r3, [r7, #46]	; 0x2e
   90abc:	2209      	movs	r2, #9
   90abe:	495e      	ldr	r1, [pc, #376]	; (90c38 <cl_testharnesscommandhandler+0x1d28>)
   90ac0:	2018      	movs	r0, #24
   90ac2:	4b56      	ldr	r3, [pc, #344]	; (90c1c <cl_testharnesscommandhandler+0x1d0c>)
   90ac4:	4798      	blx	r3
   90ac6:	4603      	mov	r3, r0
   90ac8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90acc:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   90ad0:	2202      	movs	r2, #2
   90ad2:	4619      	mov	r1, r3
   90ad4:	2019      	movs	r0, #25
   90ad6:	4b51      	ldr	r3, [pc, #324]	; (90c1c <cl_testharnesscommandhandler+0x1d0c>)
   90ad8:	4798      	blx	r3
   90ada:	4603      	mov	r3, r0
   90adc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90ae0:	e361      	b.n	911a6 <cl_testharnesscommandhandler+0x2296>
   90ae2:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90ae6:	2b01      	cmp	r3, #1
   90ae8:	d11d      	bne.n	90b26 <cl_testharnesscommandhandler+0x1c16>
   90aea:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90aee:	4b4d      	ldr	r3, [pc, #308]	; (90c24 <cl_testharnesscommandhandler+0x1d14>)
   90af0:	4610      	mov	r0, r2
   90af2:	4798      	blx	r3
   90af4:	4602      	mov	r2, r0
   90af6:	4b4c      	ldr	r3, [pc, #304]	; (90c28 <cl_testharnesscommandhandler+0x1d18>)
   90af8:	611a      	str	r2, [r3, #16]
   90afa:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90afe:	85bb      	strh	r3, [r7, #44]	; 0x2c
   90b00:	2208      	movs	r2, #8
   90b02:	494e      	ldr	r1, [pc, #312]	; (90c3c <cl_testharnesscommandhandler+0x1d2c>)
   90b04:	2018      	movs	r0, #24
   90b06:	4b45      	ldr	r3, [pc, #276]	; (90c1c <cl_testharnesscommandhandler+0x1d0c>)
   90b08:	4798      	blx	r3
   90b0a:	4603      	mov	r3, r0
   90b0c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90b10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   90b14:	2202      	movs	r2, #2
   90b16:	4619      	mov	r1, r3
   90b18:	2019      	movs	r0, #25
   90b1a:	4b40      	ldr	r3, [pc, #256]	; (90c1c <cl_testharnesscommandhandler+0x1d0c>)
   90b1c:	4798      	blx	r3
   90b1e:	4603      	mov	r3, r0
   90b20:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90b24:	e341      	b.n	911aa <cl_testharnesscommandhandler+0x229a>
   90b26:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90b2a:	2b00      	cmp	r3, #0
   90b2c:	d124      	bne.n	90b78 <cl_testharnesscommandhandler+0x1c68>
   90b2e:	2300      	movs	r3, #0
   90b30:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
   90b34:	2300      	movs	r3, #0
   90b36:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
   90b3a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90b3e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   90b42:	b29b      	uxth	r3, r3
   90b44:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
   90b48:	f9b7 20de 	ldrsh.w	r2, [r7, #222]	; 0xde
   90b4c:	4b38      	ldr	r3, [pc, #224]	; (90c30 <cl_testharnesscommandhandler+0x1d20>)
   90b4e:	4610      	mov	r0, r2
   90b50:	4798      	blx	r3
   90b52:	4602      	mov	r2, r0
   90b54:	4b34      	ldr	r3, [pc, #208]	; (90c28 <cl_testharnesscommandhandler+0x1d18>)
   90b56:	615a      	str	r2, [r3, #20]
   90b58:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
   90b5c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   90b60:	b29b      	uxth	r3, r3
   90b62:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
   90b66:	220c      	movs	r2, #12
   90b68:	4935      	ldr	r1, [pc, #212]	; (90c40 <cl_testharnesscommandhandler+0x1d30>)
   90b6a:	2018      	movs	r0, #24
   90b6c:	4b2b      	ldr	r3, [pc, #172]	; (90c1c <cl_testharnesscommandhandler+0x1d0c>)
   90b6e:	4798      	blx	r3
   90b70:	4603      	mov	r3, r0
   90b72:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90b76:	e318      	b.n	911aa <cl_testharnesscommandhandler+0x229a>
   90b78:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90b7c:	2b02      	cmp	r3, #2
   90b7e:	d124      	bne.n	90bca <cl_testharnesscommandhandler+0x1cba>
   90b80:	2300      	movs	r3, #0
   90b82:	857b      	strh	r3, [r7, #42]	; 0x2a
   90b84:	2300      	movs	r3, #0
   90b86:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
   90b8a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90b8e:	b21a      	sxth	r2, r3
   90b90:	4b20      	ldr	r3, [pc, #128]	; (90c14 <cl_testharnesscommandhandler+0x1d04>)
   90b92:	861a      	strh	r2, [r3, #48]	; 0x30
   90b94:	4b1f      	ldr	r3, [pc, #124]	; (90c14 <cl_testharnesscommandhandler+0x1d04>)
   90b96:	2201      	movs	r2, #1
   90b98:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   90b9c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90ba0:	b21b      	sxth	r3, r3
   90ba2:	857b      	strh	r3, [r7, #42]	; 0x2a
   90ba4:	2209      	movs	r2, #9
   90ba6:	491c      	ldr	r1, [pc, #112]	; (90c18 <cl_testharnesscommandhandler+0x1d08>)
   90ba8:	2018      	movs	r0, #24
   90baa:	4b1c      	ldr	r3, [pc, #112]	; (90c1c <cl_testharnesscommandhandler+0x1d0c>)
   90bac:	4798      	blx	r3
   90bae:	4603      	mov	r3, r0
   90bb0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90bb4:	f107 032a 	add.w	r3, r7, #42	; 0x2a
   90bb8:	2202      	movs	r2, #2
   90bba:	4619      	mov	r1, r3
   90bbc:	2019      	movs	r0, #25
   90bbe:	4b17      	ldr	r3, [pc, #92]	; (90c1c <cl_testharnesscommandhandler+0x1d0c>)
   90bc0:	4798      	blx	r3
   90bc2:	4603      	mov	r3, r0
   90bc4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90bc8:	e2ef      	b.n	911aa <cl_testharnesscommandhandler+0x229a>
   90bca:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90bce:	2b03      	cmp	r3, #3
   90bd0:	f040 82eb 	bne.w	911aa <cl_testharnesscommandhandler+0x229a>
   90bd4:	2300      	movs	r3, #0
   90bd6:	853b      	strh	r3, [r7, #40]	; 0x28
   90bd8:	2300      	movs	r3, #0
   90bda:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
   90bde:	4b0d      	ldr	r3, [pc, #52]	; (90c14 <cl_testharnesscommandhandler+0x1d04>)
   90be0:	2200      	movs	r2, #0
   90be2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   90be6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90bea:	b21b      	sxth	r3, r3
   90bec:	853b      	strh	r3, [r7, #40]	; 0x28
   90bee:	2209      	movs	r2, #9
   90bf0:	4914      	ldr	r1, [pc, #80]	; (90c44 <cl_testharnesscommandhandler+0x1d34>)
   90bf2:	2018      	movs	r0, #24
   90bf4:	4b09      	ldr	r3, [pc, #36]	; (90c1c <cl_testharnesscommandhandler+0x1d0c>)
   90bf6:	4798      	blx	r3
   90bf8:	4603      	mov	r3, r0
   90bfa:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
   90c02:	2202      	movs	r2, #2
   90c04:	4619      	mov	r1, r3
   90c06:	2019      	movs	r0, #25
   90c08:	4b04      	ldr	r3, [pc, #16]	; (90c1c <cl_testharnesscommandhandler+0x1d0c>)
   90c0a:	4798      	blx	r3
   90c0c:	4603      	mov	r3, r0
   90c0e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90c12:	e2ca      	b.n	911aa <cl_testharnesscommandhandler+0x229a>
   90c14:	2007310c 	.word	0x2007310c
   90c18:	000a607c 	.word	0x000a607c
   90c1c:	00099729 	.word	0x00099729
   90c20:	000a60a4 	.word	0x000a60a4
   90c24:	000a3d65 	.word	0x000a3d65
   90c28:	20072d08 	.word	0x20072d08
   90c2c:	000a60ac 	.word	0x000a60ac
   90c30:	000a3d6d 	.word	0x000a3d6d
   90c34:	000a60b8 	.word	0x000a60b8
   90c38:	000a60c8 	.word	0x000a60c8
   90c3c:	000a60d0 	.word	0x000a60d0
   90c40:	000a60dc 	.word	0x000a60dc
   90c44:	000a60ec 	.word	0x000a60ec
   90c48:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90c4c:	2b01      	cmp	r3, #1
   90c4e:	d11a      	bne.n	90c86 <cl_testharnesscommandhandler+0x1d76>
   90c50:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90c54:	b21a      	sxth	r2, r3
   90c56:	4bbe      	ldr	r3, [pc, #760]	; (90f50 <cl_testharnesscommandhandler+0x2040>)
   90c58:	805a      	strh	r2, [r3, #2]
   90c5a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90c5e:	84fb      	strh	r3, [r7, #38]	; 0x26
   90c60:	2208      	movs	r2, #8
   90c62:	49bc      	ldr	r1, [pc, #752]	; (90f54 <cl_testharnesscommandhandler+0x2044>)
   90c64:	2018      	movs	r0, #24
   90c66:	4bbc      	ldr	r3, [pc, #752]	; (90f58 <cl_testharnesscommandhandler+0x2048>)
   90c68:	4798      	blx	r3
   90c6a:	4603      	mov	r3, r0
   90c6c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90c70:	f107 0326 	add.w	r3, r7, #38	; 0x26
   90c74:	2202      	movs	r2, #2
   90c76:	4619      	mov	r1, r3
   90c78:	2019      	movs	r0, #25
   90c7a:	4bb7      	ldr	r3, [pc, #732]	; (90f58 <cl_testharnesscommandhandler+0x2048>)
   90c7c:	4798      	blx	r3
   90c7e:	4603      	mov	r3, r0
   90c80:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90c84:	e293      	b.n	911ae <cl_testharnesscommandhandler+0x229e>
   90c86:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90c8a:	2b00      	cmp	r3, #0
   90c8c:	d120      	bne.n	90cd0 <cl_testharnesscommandhandler+0x1dc0>
   90c8e:	2300      	movs	r3, #0
   90c90:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
   90c94:	2300      	movs	r3, #0
   90c96:	84bb      	strh	r3, [r7, #36]	; 0x24
   90c98:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90c9c:	b21a      	sxth	r2, r3
   90c9e:	4bac      	ldr	r3, [pc, #688]	; (90f50 <cl_testharnesscommandhandler+0x2040>)
   90ca0:	801a      	strh	r2, [r3, #0]
   90ca2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90ca6:	b21b      	sxth	r3, r3
   90ca8:	84bb      	strh	r3, [r7, #36]	; 0x24
   90caa:	2208      	movs	r2, #8
   90cac:	49ab      	ldr	r1, [pc, #684]	; (90f5c <cl_testharnesscommandhandler+0x204c>)
   90cae:	2018      	movs	r0, #24
   90cb0:	4ba9      	ldr	r3, [pc, #676]	; (90f58 <cl_testharnesscommandhandler+0x2048>)
   90cb2:	4798      	blx	r3
   90cb4:	4603      	mov	r3, r0
   90cb6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
   90cbe:	2202      	movs	r2, #2
   90cc0:	4619      	mov	r1, r3
   90cc2:	2019      	movs	r0, #25
   90cc4:	4ba4      	ldr	r3, [pc, #656]	; (90f58 <cl_testharnesscommandhandler+0x2048>)
   90cc6:	4798      	blx	r3
   90cc8:	4603      	mov	r3, r0
   90cca:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90cce:	e26e      	b.n	911ae <cl_testharnesscommandhandler+0x229e>
   90cd0:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90cd4:	2b02      	cmp	r3, #2
   90cd6:	d123      	bne.n	90d20 <cl_testharnesscommandhandler+0x1e10>
   90cd8:	2300      	movs	r3, #0
   90cda:	847b      	strh	r3, [r7, #34]	; 0x22
   90cdc:	2300      	movs	r3, #0
   90cde:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
   90ce2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90ce6:	b21a      	sxth	r2, r3
   90ce8:	4b9d      	ldr	r3, [pc, #628]	; (90f60 <cl_testharnesscommandhandler+0x2050>)
   90cea:	839a      	strh	r2, [r3, #28]
   90cec:	4b9c      	ldr	r3, [pc, #624]	; (90f60 <cl_testharnesscommandhandler+0x2050>)
   90cee:	2201      	movs	r2, #1
   90cf0:	779a      	strb	r2, [r3, #30]
   90cf2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90cf6:	b21b      	sxth	r3, r3
   90cf8:	847b      	strh	r3, [r7, #34]	; 0x22
   90cfa:	2209      	movs	r2, #9
   90cfc:	4999      	ldr	r1, [pc, #612]	; (90f64 <cl_testharnesscommandhandler+0x2054>)
   90cfe:	2018      	movs	r0, #24
   90d00:	4b95      	ldr	r3, [pc, #596]	; (90f58 <cl_testharnesscommandhandler+0x2048>)
   90d02:	4798      	blx	r3
   90d04:	4603      	mov	r3, r0
   90d06:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90d0a:	f107 0322 	add.w	r3, r7, #34	; 0x22
   90d0e:	2202      	movs	r2, #2
   90d10:	4619      	mov	r1, r3
   90d12:	2019      	movs	r0, #25
   90d14:	4b90      	ldr	r3, [pc, #576]	; (90f58 <cl_testharnesscommandhandler+0x2048>)
   90d16:	4798      	blx	r3
   90d18:	4603      	mov	r3, r0
   90d1a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90d1e:	e246      	b.n	911ae <cl_testharnesscommandhandler+0x229e>
   90d20:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90d24:	2b03      	cmp	r3, #3
   90d26:	f040 8242 	bne.w	911ae <cl_testharnesscommandhandler+0x229e>
   90d2a:	f107 0320 	add.w	r3, r7, #32
   90d2e:	2200      	movs	r2, #0
   90d30:	801a      	strh	r2, [r3, #0]
   90d32:	2300      	movs	r3, #0
   90d34:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
   90d38:	4b89      	ldr	r3, [pc, #548]	; (90f60 <cl_testharnesscommandhandler+0x2050>)
   90d3a:	2200      	movs	r2, #0
   90d3c:	779a      	strb	r2, [r3, #30]
   90d3e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90d42:	b21a      	sxth	r2, r3
   90d44:	f107 0320 	add.w	r3, r7, #32
   90d48:	801a      	strh	r2, [r3, #0]
   90d4a:	2207      	movs	r2, #7
   90d4c:	4986      	ldr	r1, [pc, #536]	; (90f68 <cl_testharnesscommandhandler+0x2058>)
   90d4e:	2018      	movs	r0, #24
   90d50:	4b81      	ldr	r3, [pc, #516]	; (90f58 <cl_testharnesscommandhandler+0x2048>)
   90d52:	4798      	blx	r3
   90d54:	4603      	mov	r3, r0
   90d56:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90d5a:	f107 0320 	add.w	r3, r7, #32
   90d5e:	2202      	movs	r2, #2
   90d60:	4619      	mov	r1, r3
   90d62:	2019      	movs	r0, #25
   90d64:	4b7c      	ldr	r3, [pc, #496]	; (90f58 <cl_testharnesscommandhandler+0x2048>)
   90d66:	4798      	blx	r3
   90d68:	4603      	mov	r3, r0
   90d6a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90d6e:	e21e      	b.n	911ae <cl_testharnesscommandhandler+0x229e>
   90d70:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90d74:	2b01      	cmp	r3, #1
   90d76:	d11f      	bne.n	90db8 <cl_testharnesscommandhandler+0x1ea8>
   90d78:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90d7c:	4b7b      	ldr	r3, [pc, #492]	; (90f6c <cl_testharnesscommandhandler+0x205c>)
   90d7e:	4610      	mov	r0, r2
   90d80:	4798      	blx	r3
   90d82:	4602      	mov	r2, r0
   90d84:	4b72      	ldr	r3, [pc, #456]	; (90f50 <cl_testharnesscommandhandler+0x2040>)
   90d86:	619a      	str	r2, [r3, #24]
   90d88:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90d8c:	f107 031e 	add.w	r3, r7, #30
   90d90:	801a      	strh	r2, [r3, #0]
   90d92:	2208      	movs	r2, #8
   90d94:	4976      	ldr	r1, [pc, #472]	; (90f70 <cl_testharnesscommandhandler+0x2060>)
   90d96:	2018      	movs	r0, #24
   90d98:	4b6f      	ldr	r3, [pc, #444]	; (90f58 <cl_testharnesscommandhandler+0x2048>)
   90d9a:	4798      	blx	r3
   90d9c:	4603      	mov	r3, r0
   90d9e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90da2:	f107 031e 	add.w	r3, r7, #30
   90da6:	2202      	movs	r2, #2
   90da8:	4619      	mov	r1, r3
   90daa:	2019      	movs	r0, #25
   90dac:	4b6a      	ldr	r3, [pc, #424]	; (90f58 <cl_testharnesscommandhandler+0x2048>)
   90dae:	4798      	blx	r3
   90db0:	4603      	mov	r3, r0
   90db2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90db6:	e1fc      	b.n	911b2 <cl_testharnesscommandhandler+0x22a2>
   90db8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90dbc:	2b00      	cmp	r3, #0
   90dbe:	d124      	bne.n	90e0a <cl_testharnesscommandhandler+0x1efa>
   90dc0:	2300      	movs	r3, #0
   90dc2:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
   90dc6:	2300      	movs	r3, #0
   90dc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
   90dcc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90dd0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   90dd4:	b29b      	uxth	r3, r3
   90dd6:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
   90dda:	f9b7 20d0 	ldrsh.w	r2, [r7, #208]	; 0xd0
   90dde:	4b65      	ldr	r3, [pc, #404]	; (90f74 <cl_testharnesscommandhandler+0x2064>)
   90de0:	4610      	mov	r0, r2
   90de2:	4798      	blx	r3
   90de4:	4602      	mov	r2, r0
   90de6:	4b5a      	ldr	r3, [pc, #360]	; (90f50 <cl_testharnesscommandhandler+0x2040>)
   90de8:	61da      	str	r2, [r3, #28]
   90dea:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
   90dee:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   90df2:	b29b      	uxth	r3, r3
   90df4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
   90df8:	220c      	movs	r2, #12
   90dfa:	495f      	ldr	r1, [pc, #380]	; (90f78 <cl_testharnesscommandhandler+0x2068>)
   90dfc:	2018      	movs	r0, #24
   90dfe:	4b56      	ldr	r3, [pc, #344]	; (90f58 <cl_testharnesscommandhandler+0x2048>)
   90e00:	4798      	blx	r3
   90e02:	4603      	mov	r3, r0
   90e04:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90e08:	e1d3      	b.n	911b2 <cl_testharnesscommandhandler+0x22a2>
   90e0a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90e0e:	2b02      	cmp	r3, #2
   90e10:	d128      	bne.n	90e64 <cl_testharnesscommandhandler+0x1f54>
   90e12:	f107 031c 	add.w	r3, r7, #28
   90e16:	2200      	movs	r2, #0
   90e18:	801a      	strh	r2, [r3, #0]
   90e1a:	2300      	movs	r3, #0
   90e1c:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
   90e20:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90e24:	b21a      	sxth	r2, r3
   90e26:	4b4e      	ldr	r3, [pc, #312]	; (90f60 <cl_testharnesscommandhandler+0x2050>)
   90e28:	871a      	strh	r2, [r3, #56]	; 0x38
   90e2a:	4b4d      	ldr	r3, [pc, #308]	; (90f60 <cl_testharnesscommandhandler+0x2050>)
   90e2c:	2201      	movs	r2, #1
   90e2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
   90e32:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90e36:	b21a      	sxth	r2, r3
   90e38:	f107 031c 	add.w	r3, r7, #28
   90e3c:	801a      	strh	r2, [r3, #0]
   90e3e:	2209      	movs	r2, #9
   90e40:	4948      	ldr	r1, [pc, #288]	; (90f64 <cl_testharnesscommandhandler+0x2054>)
   90e42:	2018      	movs	r0, #24
   90e44:	4b44      	ldr	r3, [pc, #272]	; (90f58 <cl_testharnesscommandhandler+0x2048>)
   90e46:	4798      	blx	r3
   90e48:	4603      	mov	r3, r0
   90e4a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90e4e:	f107 031c 	add.w	r3, r7, #28
   90e52:	2202      	movs	r2, #2
   90e54:	4619      	mov	r1, r3
   90e56:	2019      	movs	r0, #25
   90e58:	4b3f      	ldr	r3, [pc, #252]	; (90f58 <cl_testharnesscommandhandler+0x2048>)
   90e5a:	4798      	blx	r3
   90e5c:	4603      	mov	r3, r0
   90e5e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90e62:	e1a6      	b.n	911b2 <cl_testharnesscommandhandler+0x22a2>
   90e64:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90e68:	2b03      	cmp	r3, #3
   90e6a:	f040 81a2 	bne.w	911b2 <cl_testharnesscommandhandler+0x22a2>
   90e6e:	f107 031a 	add.w	r3, r7, #26
   90e72:	2200      	movs	r2, #0
   90e74:	801a      	strh	r2, [r3, #0]
   90e76:	2300      	movs	r3, #0
   90e78:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
   90e7c:	4b38      	ldr	r3, [pc, #224]	; (90f60 <cl_testharnesscommandhandler+0x2050>)
   90e7e:	2200      	movs	r2, #0
   90e80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
   90e84:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90e88:	b21a      	sxth	r2, r3
   90e8a:	f107 031a 	add.w	r3, r7, #26
   90e8e:	801a      	strh	r2, [r3, #0]
   90e90:	2209      	movs	r2, #9
   90e92:	493a      	ldr	r1, [pc, #232]	; (90f7c <cl_testharnesscommandhandler+0x206c>)
   90e94:	2018      	movs	r0, #24
   90e96:	4b30      	ldr	r3, [pc, #192]	; (90f58 <cl_testharnesscommandhandler+0x2048>)
   90e98:	4798      	blx	r3
   90e9a:	4603      	mov	r3, r0
   90e9c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90ea0:	f107 031a 	add.w	r3, r7, #26
   90ea4:	2202      	movs	r2, #2
   90ea6:	4619      	mov	r1, r3
   90ea8:	2019      	movs	r0, #25
   90eaa:	4b2b      	ldr	r3, [pc, #172]	; (90f58 <cl_testharnesscommandhandler+0x2048>)
   90eac:	4798      	blx	r3
   90eae:	4603      	mov	r3, r0
   90eb0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90eb4:	e17d      	b.n	911b2 <cl_testharnesscommandhandler+0x22a2>
   90eb6:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90eba:	2b01      	cmp	r3, #1
   90ebc:	d11f      	bne.n	90efe <cl_testharnesscommandhandler+0x1fee>
   90ebe:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90ec2:	4b2a      	ldr	r3, [pc, #168]	; (90f6c <cl_testharnesscommandhandler+0x205c>)
   90ec4:	4610      	mov	r0, r2
   90ec6:	4798      	blx	r3
   90ec8:	4602      	mov	r2, r0
   90eca:	4b21      	ldr	r3, [pc, #132]	; (90f50 <cl_testharnesscommandhandler+0x2040>)
   90ecc:	621a      	str	r2, [r3, #32]
   90ece:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90ed2:	f107 0318 	add.w	r3, r7, #24
   90ed6:	801a      	strh	r2, [r3, #0]
   90ed8:	2203      	movs	r2, #3
   90eda:	4929      	ldr	r1, [pc, #164]	; (90f80 <cl_testharnesscommandhandler+0x2070>)
   90edc:	2018      	movs	r0, #24
   90ede:	4b1e      	ldr	r3, [pc, #120]	; (90f58 <cl_testharnesscommandhandler+0x2048>)
   90ee0:	4798      	blx	r3
   90ee2:	4603      	mov	r3, r0
   90ee4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90ee8:	f107 0318 	add.w	r3, r7, #24
   90eec:	2202      	movs	r2, #2
   90eee:	4619      	mov	r1, r3
   90ef0:	2019      	movs	r0, #25
   90ef2:	4b19      	ldr	r3, [pc, #100]	; (90f58 <cl_testharnesscommandhandler+0x2048>)
   90ef4:	4798      	blx	r3
   90ef6:	4603      	mov	r3, r0
   90ef8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90efc:	e15b      	b.n	911b6 <cl_testharnesscommandhandler+0x22a6>
   90efe:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90f02:	2b00      	cmp	r3, #0
   90f04:	d140      	bne.n	90f88 <cl_testharnesscommandhandler+0x2078>
   90f06:	2300      	movs	r3, #0
   90f08:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
   90f0c:	2300      	movs	r3, #0
   90f0e:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
   90f12:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90f16:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   90f1a:	b29b      	uxth	r3, r3
   90f1c:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
   90f20:	f9b7 20c8 	ldrsh.w	r2, [r7, #200]	; 0xc8
   90f24:	4b13      	ldr	r3, [pc, #76]	; (90f74 <cl_testharnesscommandhandler+0x2064>)
   90f26:	4610      	mov	r0, r2
   90f28:	4798      	blx	r3
   90f2a:	4602      	mov	r2, r0
   90f2c:	4b08      	ldr	r3, [pc, #32]	; (90f50 <cl_testharnesscommandhandler+0x2040>)
   90f2e:	625a      	str	r2, [r3, #36]	; 0x24
   90f30:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
   90f34:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   90f38:	b29b      	uxth	r3, r3
   90f3a:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
   90f3e:	220c      	movs	r2, #12
   90f40:	4910      	ldr	r1, [pc, #64]	; (90f84 <cl_testharnesscommandhandler+0x2074>)
   90f42:	2018      	movs	r0, #24
   90f44:	4b04      	ldr	r3, [pc, #16]	; (90f58 <cl_testharnesscommandhandler+0x2048>)
   90f46:	4798      	blx	r3
   90f48:	4603      	mov	r3, r0
   90f4a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90f4e:	e132      	b.n	911b6 <cl_testharnesscommandhandler+0x22a6>
   90f50:	20072d08 	.word	0x20072d08
   90f54:	000a60f4 	.word	0x000a60f4
   90f58:	00099729 	.word	0x00099729
   90f5c:	000a6100 	.word	0x000a6100
   90f60:	2007310c 	.word	0x2007310c
   90f64:	000a607c 	.word	0x000a607c
   90f68:	000a610c 	.word	0x000a610c
   90f6c:	000a3d65 	.word	0x000a3d65
   90f70:	000a6114 	.word	0x000a6114
   90f74:	000a3d6d 	.word	0x000a3d6d
   90f78:	000a6120 	.word	0x000a6120
   90f7c:	000a60ec 	.word	0x000a60ec
   90f80:	000a6130 	.word	0x000a6130
   90f84:	000a6134 	.word	0x000a6134
   90f88:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90f8c:	2b02      	cmp	r3, #2
   90f8e:	d128      	bne.n	90fe2 <cl_testharnesscommandhandler+0x20d2>
   90f90:	f107 0316 	add.w	r3, r7, #22
   90f94:	2200      	movs	r2, #0
   90f96:	801a      	strh	r2, [r3, #0]
   90f98:	2300      	movs	r3, #0
   90f9a:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
   90f9e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90fa2:	b21a      	sxth	r2, r3
   90fa4:	4ba6      	ldr	r3, [pc, #664]	; (91240 <cl_testharnesscommandhandler+0x2330>)
   90fa6:	879a      	strh	r2, [r3, #60]	; 0x3c
   90fa8:	4ba5      	ldr	r3, [pc, #660]	; (91240 <cl_testharnesscommandhandler+0x2330>)
   90faa:	2201      	movs	r2, #1
   90fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
   90fb0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90fb4:	b21a      	sxth	r2, r3
   90fb6:	f107 0316 	add.w	r3, r7, #22
   90fba:	801a      	strh	r2, [r3, #0]
   90fbc:	2209      	movs	r2, #9
   90fbe:	49a1      	ldr	r1, [pc, #644]	; (91244 <cl_testharnesscommandhandler+0x2334>)
   90fc0:	2018      	movs	r0, #24
   90fc2:	4ba1      	ldr	r3, [pc, #644]	; (91248 <cl_testharnesscommandhandler+0x2338>)
   90fc4:	4798      	blx	r3
   90fc6:	4603      	mov	r3, r0
   90fc8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90fcc:	f107 0316 	add.w	r3, r7, #22
   90fd0:	2202      	movs	r2, #2
   90fd2:	4619      	mov	r1, r3
   90fd4:	2019      	movs	r0, #25
   90fd6:	4b9c      	ldr	r3, [pc, #624]	; (91248 <cl_testharnesscommandhandler+0x2338>)
   90fd8:	4798      	blx	r3
   90fda:	4603      	mov	r3, r0
   90fdc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90fe0:	e0e9      	b.n	911b6 <cl_testharnesscommandhandler+0x22a6>
   90fe2:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90fe6:	2b03      	cmp	r3, #3
   90fe8:	f040 80e5 	bne.w	911b6 <cl_testharnesscommandhandler+0x22a6>
   90fec:	f107 0314 	add.w	r3, r7, #20
   90ff0:	2200      	movs	r2, #0
   90ff2:	801a      	strh	r2, [r3, #0]
   90ff4:	2300      	movs	r3, #0
   90ff6:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
   90ffa:	4b91      	ldr	r3, [pc, #580]	; (91240 <cl_testharnesscommandhandler+0x2330>)
   90ffc:	2200      	movs	r2, #0
   90ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
   91002:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91006:	b21a      	sxth	r2, r3
   91008:	f107 0314 	add.w	r3, r7, #20
   9100c:	801a      	strh	r2, [r3, #0]
   9100e:	2209      	movs	r2, #9
   91010:	498e      	ldr	r1, [pc, #568]	; (9124c <cl_testharnesscommandhandler+0x233c>)
   91012:	2018      	movs	r0, #24
   91014:	4b8c      	ldr	r3, [pc, #560]	; (91248 <cl_testharnesscommandhandler+0x2338>)
   91016:	4798      	blx	r3
   91018:	4603      	mov	r3, r0
   9101a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9101e:	f107 0314 	add.w	r3, r7, #20
   91022:	2202      	movs	r2, #2
   91024:	4619      	mov	r1, r3
   91026:	2019      	movs	r0, #25
   91028:	4b87      	ldr	r3, [pc, #540]	; (91248 <cl_testharnesscommandhandler+0x2338>)
   9102a:	4798      	blx	r3
   9102c:	4603      	mov	r3, r0
   9102e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91032:	e0c0      	b.n	911b6 <cl_testharnesscommandhandler+0x22a6>
   91034:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91038:	2b01      	cmp	r3, #1
   9103a:	d11f      	bne.n	9107c <cl_testharnesscommandhandler+0x216c>
   9103c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   91040:	4b83      	ldr	r3, [pc, #524]	; (91250 <cl_testharnesscommandhandler+0x2340>)
   91042:	4610      	mov	r0, r2
   91044:	4798      	blx	r3
   91046:	4602      	mov	r2, r0
   91048:	4b82      	ldr	r3, [pc, #520]	; (91254 <cl_testharnesscommandhandler+0x2344>)
   9104a:	629a      	str	r2, [r3, #40]	; 0x28
   9104c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   91050:	f107 0312 	add.w	r3, r7, #18
   91054:	801a      	strh	r2, [r3, #0]
   91056:	2203      	movs	r2, #3
   91058:	497f      	ldr	r1, [pc, #508]	; (91258 <cl_testharnesscommandhandler+0x2348>)
   9105a:	2018      	movs	r0, #24
   9105c:	4b7a      	ldr	r3, [pc, #488]	; (91248 <cl_testharnesscommandhandler+0x2338>)
   9105e:	4798      	blx	r3
   91060:	4603      	mov	r3, r0
   91062:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91066:	f107 0312 	add.w	r3, r7, #18
   9106a:	2202      	movs	r2, #2
   9106c:	4619      	mov	r1, r3
   9106e:	2019      	movs	r0, #25
   91070:	4b75      	ldr	r3, [pc, #468]	; (91248 <cl_testharnesscommandhandler+0x2338>)
   91072:	4798      	blx	r3
   91074:	4603      	mov	r3, r0
   91076:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9107a:	e09e      	b.n	911ba <cl_testharnesscommandhandler+0x22aa>
   9107c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91080:	2b00      	cmp	r3, #0
   91082:	d124      	bne.n	910ce <cl_testharnesscommandhandler+0x21be>
   91084:	2300      	movs	r3, #0
   91086:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
   9108a:	2300      	movs	r3, #0
   9108c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
   91090:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91094:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   91098:	b29b      	uxth	r3, r3
   9109a:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
   9109e:	f9b7 20c0 	ldrsh.w	r2, [r7, #192]	; 0xc0
   910a2:	4b6e      	ldr	r3, [pc, #440]	; (9125c <cl_testharnesscommandhandler+0x234c>)
   910a4:	4610      	mov	r0, r2
   910a6:	4798      	blx	r3
   910a8:	4602      	mov	r2, r0
   910aa:	4b6a      	ldr	r3, [pc, #424]	; (91254 <cl_testharnesscommandhandler+0x2344>)
   910ac:	62da      	str	r2, [r3, #44]	; 0x2c
   910ae:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
   910b2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   910b6:	b29b      	uxth	r3, r3
   910b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
   910bc:	220c      	movs	r2, #12
   910be:	4968      	ldr	r1, [pc, #416]	; (91260 <cl_testharnesscommandhandler+0x2350>)
   910c0:	2018      	movs	r0, #24
   910c2:	4b61      	ldr	r3, [pc, #388]	; (91248 <cl_testharnesscommandhandler+0x2338>)
   910c4:	4798      	blx	r3
   910c6:	4603      	mov	r3, r0
   910c8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   910cc:	e075      	b.n	911ba <cl_testharnesscommandhandler+0x22aa>
   910ce:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   910d2:	2b02      	cmp	r3, #2
   910d4:	d129      	bne.n	9112a <cl_testharnesscommandhandler+0x221a>
   910d6:	f107 0310 	add.w	r3, r7, #16
   910da:	2200      	movs	r2, #0
   910dc:	801a      	strh	r2, [r3, #0]
   910de:	2300      	movs	r3, #0
   910e0:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
   910e4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   910e8:	b21a      	sxth	r2, r3
   910ea:	4b55      	ldr	r3, [pc, #340]	; (91240 <cl_testharnesscommandhandler+0x2330>)
   910ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
   910f0:	4b53      	ldr	r3, [pc, #332]	; (91240 <cl_testharnesscommandhandler+0x2330>)
   910f2:	2201      	movs	r2, #1
   910f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
   910f8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   910fc:	b21a      	sxth	r2, r3
   910fe:	f107 0310 	add.w	r3, r7, #16
   91102:	801a      	strh	r2, [r3, #0]
   91104:	2209      	movs	r2, #9
   91106:	494f      	ldr	r1, [pc, #316]	; (91244 <cl_testharnesscommandhandler+0x2334>)
   91108:	2018      	movs	r0, #24
   9110a:	4b4f      	ldr	r3, [pc, #316]	; (91248 <cl_testharnesscommandhandler+0x2338>)
   9110c:	4798      	blx	r3
   9110e:	4603      	mov	r3, r0
   91110:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91114:	f107 0310 	add.w	r3, r7, #16
   91118:	2202      	movs	r2, #2
   9111a:	4619      	mov	r1, r3
   9111c:	2019      	movs	r0, #25
   9111e:	4b4a      	ldr	r3, [pc, #296]	; (91248 <cl_testharnesscommandhandler+0x2338>)
   91120:	4798      	blx	r3
   91122:	4603      	mov	r3, r0
   91124:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91128:	e047      	b.n	911ba <cl_testharnesscommandhandler+0x22aa>
   9112a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9112e:	2b03      	cmp	r3, #3
   91130:	d143      	bne.n	911ba <cl_testharnesscommandhandler+0x22aa>
   91132:	f107 030e 	add.w	r3, r7, #14
   91136:	2200      	movs	r2, #0
   91138:	801a      	strh	r2, [r3, #0]
   9113a:	2300      	movs	r3, #0
   9113c:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
   91140:	4b3f      	ldr	r3, [pc, #252]	; (91240 <cl_testharnesscommandhandler+0x2330>)
   91142:	2200      	movs	r2, #0
   91144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
   91148:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9114c:	b21a      	sxth	r2, r3
   9114e:	f107 030e 	add.w	r3, r7, #14
   91152:	801a      	strh	r2, [r3, #0]
   91154:	2209      	movs	r2, #9
   91156:	4943      	ldr	r1, [pc, #268]	; (91264 <cl_testharnesscommandhandler+0x2354>)
   91158:	2018      	movs	r0, #24
   9115a:	4b3b      	ldr	r3, [pc, #236]	; (91248 <cl_testharnesscommandhandler+0x2338>)
   9115c:	4798      	blx	r3
   9115e:	4603      	mov	r3, r0
   91160:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91164:	f107 030e 	add.w	r3, r7, #14
   91168:	2202      	movs	r2, #2
   9116a:	4619      	mov	r1, r3
   9116c:	2019      	movs	r0, #25
   9116e:	4b36      	ldr	r3, [pc, #216]	; (91248 <cl_testharnesscommandhandler+0x2338>)
   91170:	4798      	blx	r3
   91172:	4603      	mov	r3, r0
   91174:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91178:	e01f      	b.n	911ba <cl_testharnesscommandhandler+0x22aa>
   9117a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9117e:	2b01      	cmp	r3, #1
   91180:	d105      	bne.n	9118e <cl_testharnesscommandhandler+0x227e>
   91182:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91186:	b21a      	sxth	r2, r3
   91188:	4b32      	ldr	r3, [pc, #200]	; (91254 <cl_testharnesscommandhandler+0x2344>)
   9118a:	805a      	strh	r2, [r3, #2]
   9118c:	e016      	b.n	911bc <cl_testharnesscommandhandler+0x22ac>
   9118e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91192:	b21a      	sxth	r2, r3
   91194:	4b2f      	ldr	r3, [pc, #188]	; (91254 <cl_testharnesscommandhandler+0x2344>)
   91196:	801a      	strh	r2, [r3, #0]
   91198:	e010      	b.n	911bc <cl_testharnesscommandhandler+0x22ac>
   9119a:	bf00      	nop
   9119c:	e339      	b.n	91812 <cl_testharnesscommandhandler+0x2902>
   9119e:	bf00      	nop
   911a0:	e337      	b.n	91812 <cl_testharnesscommandhandler+0x2902>
   911a2:	bf00      	nop
   911a4:	e335      	b.n	91812 <cl_testharnesscommandhandler+0x2902>
   911a6:	bf00      	nop
   911a8:	e333      	b.n	91812 <cl_testharnesscommandhandler+0x2902>
   911aa:	bf00      	nop
   911ac:	e331      	b.n	91812 <cl_testharnesscommandhandler+0x2902>
   911ae:	bf00      	nop
   911b0:	e32f      	b.n	91812 <cl_testharnesscommandhandler+0x2902>
   911b2:	bf00      	nop
   911b4:	e32d      	b.n	91812 <cl_testharnesscommandhandler+0x2902>
   911b6:	bf00      	nop
   911b8:	e32b      	b.n	91812 <cl_testharnesscommandhandler+0x2902>
   911ba:	bf00      	nop
   911bc:	e329      	b.n	91812 <cl_testharnesscommandhandler+0x2902>
   911be:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   911c2:	3b05      	subs	r3, #5
   911c4:	2b11      	cmp	r3, #17
   911c6:	f200 8317 	bhi.w	917f8 <cl_testharnesscommandhandler+0x28e8>
   911ca:	a201      	add	r2, pc, #4	; (adr r2, 911d0 <cl_testharnesscommandhandler+0x22c0>)
   911cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   911d0:	00091275 	.word	0x00091275
   911d4:	0009130f 	.word	0x0009130f
   911d8:	000913a9 	.word	0x000913a9
   911dc:	000917f9 	.word	0x000917f9
   911e0:	000917f9 	.word	0x000917f9
   911e4:	000917f9 	.word	0x000917f9
   911e8:	000917f9 	.word	0x000917f9
   911ec:	0009161f 	.word	0x0009161f
   911f0:	000916bd 	.word	0x000916bd
   911f4:	0009175b 	.word	0x0009175b
   911f8:	000917f9 	.word	0x000917f9
   911fc:	000917f9 	.word	0x000917f9
   91200:	00091421 	.word	0x00091421
   91204:	00091481 	.word	0x00091481
   91208:	000917f9 	.word	0x000917f9
   9120c:	0009154d 	.word	0x0009154d
   91210:	00091219 	.word	0x00091219
   91214:	0009122d 	.word	0x0009122d
   91218:	4b13      	ldr	r3, [pc, #76]	; (91268 <cl_testharnesscommandhandler+0x2358>)
   9121a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   9121e:	f107 0392 	add.w	r3, r7, #146	; 0x92
   91222:	4619      	mov	r1, r3
   91224:	2017      	movs	r0, #23
   91226:	4b11      	ldr	r3, [pc, #68]	; (9126c <cl_testharnesscommandhandler+0x235c>)
   91228:	4798      	blx	r3
   9122a:	e2ea      	b.n	91802 <cl_testharnesscommandhandler+0x28f2>
   9122c:	f107 0392 	add.w	r3, r7, #146	; 0x92
   91230:	4619      	mov	r1, r3
   91232:	2018      	movs	r0, #24
   91234:	4b0d      	ldr	r3, [pc, #52]	; (9126c <cl_testharnesscommandhandler+0x235c>)
   91236:	4798      	blx	r3
   91238:	4b0d      	ldr	r3, [pc, #52]	; (91270 <cl_testharnesscommandhandler+0x2360>)
   9123a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   9123e:	e2e0      	b.n	91802 <cl_testharnesscommandhandler+0x28f2>
   91240:	2007310c 	.word	0x2007310c
   91244:	000a607c 	.word	0x000a607c
   91248:	00099729 	.word	0x00099729
   9124c:	000a60ec 	.word	0x000a60ec
   91250:	000a3d65 	.word	0x000a3d65
   91254:	20072d08 	.word	0x20072d08
   91258:	000a6144 	.word	0x000a6144
   9125c:	000a3d6d 	.word	0x000a3d6d
   91260:	000a6148 	.word	0x000a6148
   91264:	000a6158 	.word	0x000a6158
   91268:	000a6160 	.word	0x000a6160
   9126c:	00091871 	.word	0x00091871
   91270:	000a616c 	.word	0x000a616c
   91274:	f107 0392 	add.w	r3, r7, #146	; 0x92
   91278:	4619      	mov	r1, r3
   9127a:	200e      	movs	r0, #14
   9127c:	4ba8      	ldr	r3, [pc, #672]	; (91520 <cl_testharnesscommandhandler+0x2610>)
   9127e:	4798      	blx	r3
   91280:	4ba8      	ldr	r3, [pc, #672]	; (91524 <cl_testharnesscommandhandler+0x2614>)
   91282:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   91286:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   9128a:	461a      	mov	r2, r3
   9128c:	f640 43e4 	movw	r3, #3300	; 0xce4
   91290:	fb03 f302 	mul.w	r3, r3, r2
   91294:	2b00      	cmp	r3, #0
   91296:	da01      	bge.n	9129c <cl_testharnesscommandhandler+0x238c>
   91298:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   9129c:	131b      	asrs	r3, r3, #12
   9129e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
   912a2:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   912a6:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
   912aa:	4b9f      	ldr	r3, [pc, #636]	; (91528 <cl_testharnesscommandhandler+0x2618>)
   912ac:	4610      	mov	r0, r2
   912ae:	4798      	blx	r3
   912b0:	4c9e      	ldr	r4, [pc, #632]	; (9152c <cl_testharnesscommandhandler+0x261c>)
   912b2:	a397      	add	r3, pc, #604	; (adr r3, 91510 <cl_testharnesscommandhandler+0x2600>)
   912b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   912b8:	47a0      	blx	r4
   912ba:	4603      	mov	r3, r0
   912bc:	460c      	mov	r4, r1
   912be:	4619      	mov	r1, r3
   912c0:	4622      	mov	r2, r4
   912c2:	4b9b      	ldr	r3, [pc, #620]	; (91530 <cl_testharnesscommandhandler+0x2620>)
   912c4:	4608      	mov	r0, r1
   912c6:	4611      	mov	r1, r2
   912c8:	4798      	blx	r3
   912ca:	4603      	mov	r3, r0
   912cc:	b21b      	sxth	r3, r3
   912ce:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
   912d2:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   912d6:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
   912da:	da08      	bge.n	912ee <cl_testharnesscommandhandler+0x23de>
   912dc:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   912e0:	b29b      	uxth	r3, r3
   912e2:	3b32      	subs	r3, #50	; 0x32
   912e4:	b29b      	uxth	r3, r3
   912e6:	b21b      	sxth	r3, r3
   912e8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
   912ec:	e286      	b.n	917fc <cl_testharnesscommandhandler+0x28ec>
   912ee:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   912f2:	f240 6271 	movw	r2, #1649	; 0x671
   912f6:	4293      	cmp	r3, r2
   912f8:	f300 8280 	bgt.w	917fc <cl_testharnesscommandhandler+0x28ec>
   912fc:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   91300:	b29b      	uxth	r3, r3
   91302:	3b19      	subs	r3, #25
   91304:	b29b      	uxth	r3, r3
   91306:	b21b      	sxth	r3, r3
   91308:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
   9130c:	e276      	b.n	917fc <cl_testharnesscommandhandler+0x28ec>
   9130e:	f107 0392 	add.w	r3, r7, #146	; 0x92
   91312:	4619      	mov	r1, r3
   91314:	200f      	movs	r0, #15
   91316:	4b82      	ldr	r3, [pc, #520]	; (91520 <cl_testharnesscommandhandler+0x2610>)
   91318:	4798      	blx	r3
   9131a:	4b86      	ldr	r3, [pc, #536]	; (91534 <cl_testharnesscommandhandler+0x2624>)
   9131c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   91320:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   91324:	461a      	mov	r2, r3
   91326:	f640 43e4 	movw	r3, #3300	; 0xce4
   9132a:	fb03 f302 	mul.w	r3, r3, r2
   9132e:	2b00      	cmp	r3, #0
   91330:	da01      	bge.n	91336 <cl_testharnesscommandhandler+0x2426>
   91332:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   91336:	131b      	asrs	r3, r3, #12
   91338:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
   9133c:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   91340:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
   91344:	4b78      	ldr	r3, [pc, #480]	; (91528 <cl_testharnesscommandhandler+0x2618>)
   91346:	4610      	mov	r0, r2
   91348:	4798      	blx	r3
   9134a:	4c78      	ldr	r4, [pc, #480]	; (9152c <cl_testharnesscommandhandler+0x261c>)
   9134c:	a370      	add	r3, pc, #448	; (adr r3, 91510 <cl_testharnesscommandhandler+0x2600>)
   9134e:	e9d3 2300 	ldrd	r2, r3, [r3]
   91352:	47a0      	blx	r4
   91354:	4603      	mov	r3, r0
   91356:	460c      	mov	r4, r1
   91358:	4619      	mov	r1, r3
   9135a:	4622      	mov	r2, r4
   9135c:	4b74      	ldr	r3, [pc, #464]	; (91530 <cl_testharnesscommandhandler+0x2620>)
   9135e:	4608      	mov	r0, r1
   91360:	4611      	mov	r1, r2
   91362:	4798      	blx	r3
   91364:	4603      	mov	r3, r0
   91366:	b21b      	sxth	r3, r3
   91368:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
   9136c:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   91370:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
   91374:	da08      	bge.n	91388 <cl_testharnesscommandhandler+0x2478>
   91376:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   9137a:	b29b      	uxth	r3, r3
   9137c:	3b32      	subs	r3, #50	; 0x32
   9137e:	b29b      	uxth	r3, r3
   91380:	b21b      	sxth	r3, r3
   91382:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
   91386:	e23b      	b.n	91800 <cl_testharnesscommandhandler+0x28f0>
   91388:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   9138c:	f240 6271 	movw	r2, #1649	; 0x671
   91390:	4293      	cmp	r3, r2
   91392:	f300 8235 	bgt.w	91800 <cl_testharnesscommandhandler+0x28f0>
   91396:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   9139a:	b29b      	uxth	r3, r3
   9139c:	3b19      	subs	r3, #25
   9139e:	b29b      	uxth	r3, r3
   913a0:	b21b      	sxth	r3, r3
   913a2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
   913a6:	e22b      	b.n	91800 <cl_testharnesscommandhandler+0x28f0>
   913a8:	f107 0392 	add.w	r3, r7, #146	; 0x92
   913ac:	4619      	mov	r1, r3
   913ae:	2027      	movs	r0, #39	; 0x27
   913b0:	4b5b      	ldr	r3, [pc, #364]	; (91520 <cl_testharnesscommandhandler+0x2610>)
   913b2:	4798      	blx	r3
   913b4:	4b60      	ldr	r3, [pc, #384]	; (91538 <cl_testharnesscommandhandler+0x2628>)
   913b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   913ba:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   913be:	461a      	mov	r2, r3
   913c0:	f640 43e4 	movw	r3, #3300	; 0xce4
   913c4:	fb03 f302 	mul.w	r3, r3, r2
   913c8:	2b00      	cmp	r3, #0
   913ca:	da01      	bge.n	913d0 <cl_testharnesscommandhandler+0x24c0>
   913cc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   913d0:	131b      	asrs	r3, r3, #12
   913d2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
   913d6:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   913da:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
   913de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   913e2:	fb02 f303 	mul.w	r3, r2, r3
   913e6:	4a55      	ldr	r2, [pc, #340]	; (9153c <cl_testharnesscommandhandler+0x262c>)
   913e8:	fb82 1203 	smull	r1, r2, r2, r3
   913ec:	1252      	asrs	r2, r2, #9
   913ee:	17db      	asrs	r3, r3, #31
   913f0:	1ad3      	subs	r3, r2, r3
   913f2:	b21b      	sxth	r3, r3
   913f4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
   913f8:	2204      	movs	r2, #4
   913fa:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   913fe:	2018      	movs	r0, #24
   91400:	4b4f      	ldr	r3, [pc, #316]	; (91540 <cl_testharnesscommandhandler+0x2630>)
   91402:	4798      	blx	r3
   91404:	4603      	mov	r3, r0
   91406:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9140a:	f107 0390 	add.w	r3, r7, #144	; 0x90
   9140e:	2202      	movs	r2, #2
   91410:	4619      	mov	r1, r3
   91412:	2019      	movs	r0, #25
   91414:	4b4a      	ldr	r3, [pc, #296]	; (91540 <cl_testharnesscommandhandler+0x2630>)
   91416:	4798      	blx	r3
   91418:	4603      	mov	r3, r0
   9141a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9141e:	e1f0      	b.n	91802 <cl_testharnesscommandhandler+0x28f2>
   91420:	f107 0392 	add.w	r3, r7, #146	; 0x92
   91424:	4619      	mov	r1, r3
   91426:	2024      	movs	r0, #36	; 0x24
   91428:	4b3d      	ldr	r3, [pc, #244]	; (91520 <cl_testharnesscommandhandler+0x2610>)
   9142a:	4798      	blx	r3
   9142c:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   91430:	461a      	mov	r2, r3
   91432:	f640 43e4 	movw	r3, #3300	; 0xce4
   91436:	fb03 f302 	mul.w	r3, r3, r2
   9143a:	2b00      	cmp	r3, #0
   9143c:	da01      	bge.n	91442 <cl_testharnesscommandhandler+0x2532>
   9143e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   91442:	131b      	asrs	r3, r3, #12
   91444:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
   91448:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   9144c:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
   91450:	4b35      	ldr	r3, [pc, #212]	; (91528 <cl_testharnesscommandhandler+0x2618>)
   91452:	4610      	mov	r0, r2
   91454:	4798      	blx	r3
   91456:	4c35      	ldr	r4, [pc, #212]	; (9152c <cl_testharnesscommandhandler+0x261c>)
   91458:	a32f      	add	r3, pc, #188	; (adr r3, 91518 <cl_testharnesscommandhandler+0x2608>)
   9145a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9145e:	47a0      	blx	r4
   91460:	4603      	mov	r3, r0
   91462:	460c      	mov	r4, r1
   91464:	4619      	mov	r1, r3
   91466:	4622      	mov	r2, r4
   91468:	4b31      	ldr	r3, [pc, #196]	; (91530 <cl_testharnesscommandhandler+0x2620>)
   9146a:	4608      	mov	r0, r1
   9146c:	4611      	mov	r1, r2
   9146e:	4798      	blx	r3
   91470:	4603      	mov	r3, r0
   91472:	b21b      	sxth	r3, r3
   91474:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
   91478:	4b32      	ldr	r3, [pc, #200]	; (91544 <cl_testharnesscommandhandler+0x2634>)
   9147a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   9147e:	e1c0      	b.n	91802 <cl_testharnesscommandhandler+0x28f2>
   91480:	f107 0392 	add.w	r3, r7, #146	; 0x92
   91484:	4619      	mov	r1, r3
   91486:	2026      	movs	r0, #38	; 0x26
   91488:	4b25      	ldr	r3, [pc, #148]	; (91520 <cl_testharnesscommandhandler+0x2610>)
   9148a:	4798      	blx	r3
   9148c:	4b2e      	ldr	r3, [pc, #184]	; (91548 <cl_testharnesscommandhandler+0x2638>)
   9148e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   91492:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   91496:	461a      	mov	r2, r3
   91498:	f640 43e4 	movw	r3, #3300	; 0xce4
   9149c:	fb03 f302 	mul.w	r3, r3, r2
   914a0:	2b00      	cmp	r3, #0
   914a2:	da01      	bge.n	914a8 <cl_testharnesscommandhandler+0x2598>
   914a4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   914a8:	131b      	asrs	r3, r3, #12
   914aa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
   914ae:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   914b2:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
   914b6:	4b1c      	ldr	r3, [pc, #112]	; (91528 <cl_testharnesscommandhandler+0x2618>)
   914b8:	4610      	mov	r0, r2
   914ba:	4798      	blx	r3
   914bc:	4c1b      	ldr	r4, [pc, #108]	; (9152c <cl_testharnesscommandhandler+0x261c>)
   914be:	a316      	add	r3, pc, #88	; (adr r3, 91518 <cl_testharnesscommandhandler+0x2608>)
   914c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   914c4:	47a0      	blx	r4
   914c6:	4603      	mov	r3, r0
   914c8:	460c      	mov	r4, r1
   914ca:	4619      	mov	r1, r3
   914cc:	4622      	mov	r2, r4
   914ce:	4b18      	ldr	r3, [pc, #96]	; (91530 <cl_testharnesscommandhandler+0x2620>)
   914d0:	4608      	mov	r0, r1
   914d2:	4611      	mov	r1, r2
   914d4:	4798      	blx	r3
   914d6:	4603      	mov	r3, r0
   914d8:	b21b      	sxth	r3, r3
   914da:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
   914de:	4b1a      	ldr	r3, [pc, #104]	; (91548 <cl_testharnesscommandhandler+0x2638>)
   914e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   914e4:	2204      	movs	r2, #4
   914e6:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   914ea:	2018      	movs	r0, #24
   914ec:	4b14      	ldr	r3, [pc, #80]	; (91540 <cl_testharnesscommandhandler+0x2630>)
   914ee:	4798      	blx	r3
   914f0:	4603      	mov	r3, r0
   914f2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   914f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
   914fa:	2202      	movs	r2, #2
   914fc:	4619      	mov	r1, r3
   914fe:	2019      	movs	r0, #25
   91500:	4b0f      	ldr	r3, [pc, #60]	; (91540 <cl_testharnesscommandhandler+0x2630>)
   91502:	4798      	blx	r3
   91504:	4603      	mov	r3, r0
   91506:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9150a:	e17a      	b.n	91802 <cl_testharnesscommandhandler+0x28f2>
   9150c:	f3af 8000 	nop.w
   91510:	8f5c28f6 	.word	0x8f5c28f6
   91514:	3fe8f5c2 	.word	0x3fe8f5c2
   91518:	33333333 	.word	0x33333333
   9151c:	3fe33333 	.word	0x3fe33333
   91520:	00091871 	.word	0x00091871
   91524:	000a6174 	.word	0x000a6174
   91528:	000a34c9 	.word	0x000a34c9
   9152c:	000a37e9 	.word	0x000a37e9
   91530:	000a3ac9 	.word	0x000a3ac9
   91534:	000a617c 	.word	0x000a617c
   91538:	000a6184 	.word	0x000a6184
   9153c:	77280773 	.word	0x77280773
   91540:	00099729 	.word	0x00099729
   91544:	000a618c 	.word	0x000a618c
   91548:	000a6194 	.word	0x000a6194
   9154c:	4bb8      	ldr	r3, [pc, #736]	; (91830 <cl_testharnesscommandhandler+0x2920>)
   9154e:	f9b3 3000 	ldrsh.w	r3, [r3]
   91552:	b29a      	uxth	r2, r3
   91554:	4bb7      	ldr	r3, [pc, #732]	; (91834 <cl_testharnesscommandhandler+0x2924>)
   91556:	f9b3 3000 	ldrsh.w	r3, [r3]
   9155a:	b29b      	uxth	r3, r3
   9155c:	1ad3      	subs	r3, r2, r3
   9155e:	b29b      	uxth	r3, r3
   91560:	b21b      	sxth	r3, r3
   91562:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
   91566:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   9156a:	b29b      	uxth	r3, r3
   9156c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   91570:	b29b      	uxth	r3, r3
   91572:	b21b      	sxth	r3, r3
   91574:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
   91578:	4baf      	ldr	r3, [pc, #700]	; (91838 <cl_testharnesscommandhandler+0x2928>)
   9157a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   9157e:	2204      	movs	r2, #4
   91580:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   91584:	2018      	movs	r0, #24
   91586:	4bad      	ldr	r3, [pc, #692]	; (9183c <cl_testharnesscommandhandler+0x292c>)
   91588:	4798      	blx	r3
   9158a:	4603      	mov	r3, r0
   9158c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91590:	f107 038e 	add.w	r3, r7, #142	; 0x8e
   91594:	2202      	movs	r2, #2
   91596:	4619      	mov	r1, r3
   91598:	2019      	movs	r0, #25
   9159a:	4ba8      	ldr	r3, [pc, #672]	; (9183c <cl_testharnesscommandhandler+0x292c>)
   9159c:	4798      	blx	r3
   9159e:	4603      	mov	r3, r0
   915a0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   915a4:	4ba2      	ldr	r3, [pc, #648]	; (91830 <cl_testharnesscommandhandler+0x2920>)
   915a6:	f9b3 3000 	ldrsh.w	r3, [r3]
   915aa:	461a      	mov	r2, r3
   915ac:	4ba4      	ldr	r3, [pc, #656]	; (91840 <cl_testharnesscommandhandler+0x2930>)
   915ae:	f9b3 3000 	ldrsh.w	r3, [r3]
   915b2:	4413      	add	r3, r2
   915b4:	0fda      	lsrs	r2, r3, #31
   915b6:	4413      	add	r3, r2
   915b8:	105b      	asrs	r3, r3, #1
   915ba:	b29a      	uxth	r2, r3
   915bc:	4b9d      	ldr	r3, [pc, #628]	; (91834 <cl_testharnesscommandhandler+0x2924>)
   915be:	f9b3 3000 	ldrsh.w	r3, [r3]
   915c2:	4619      	mov	r1, r3
   915c4:	4b9f      	ldr	r3, [pc, #636]	; (91844 <cl_testharnesscommandhandler+0x2934>)
   915c6:	f9b3 3000 	ldrsh.w	r3, [r3]
   915ca:	440b      	add	r3, r1
   915cc:	0fd9      	lsrs	r1, r3, #31
   915ce:	440b      	add	r3, r1
   915d0:	105b      	asrs	r3, r3, #1
   915d2:	b29b      	uxth	r3, r3
   915d4:	1ad3      	subs	r3, r2, r3
   915d6:	b29b      	uxth	r3, r3
   915d8:	b21b      	sxth	r3, r3
   915da:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
   915de:	4b9a      	ldr	r3, [pc, #616]	; (91848 <cl_testharnesscommandhandler+0x2938>)
   915e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   915e4:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   915e8:	b29b      	uxth	r3, r3
   915ea:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   915ee:	b29b      	uxth	r3, r3
   915f0:	b21b      	sxth	r3, r3
   915f2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
   915f6:	2204      	movs	r2, #4
   915f8:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   915fc:	2018      	movs	r0, #24
   915fe:	4b8f      	ldr	r3, [pc, #572]	; (9183c <cl_testharnesscommandhandler+0x292c>)
   91600:	4798      	blx	r3
   91602:	4603      	mov	r3, r0
   91604:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91608:	f107 038e 	add.w	r3, r7, #142	; 0x8e
   9160c:	2202      	movs	r2, #2
   9160e:	4619      	mov	r1, r3
   91610:	2019      	movs	r0, #25
   91612:	4b8a      	ldr	r3, [pc, #552]	; (9183c <cl_testharnesscommandhandler+0x292c>)
   91614:	4798      	blx	r3
   91616:	4603      	mov	r3, r0
   91618:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9161c:	e0f1      	b.n	91802 <cl_testharnesscommandhandler+0x28f2>
   9161e:	f107 0392 	add.w	r3, r7, #146	; 0x92
   91622:	4619      	mov	r1, r3
   91624:	2012      	movs	r0, #18
   91626:	4b89      	ldr	r3, [pc, #548]	; (9184c <cl_testharnesscommandhandler+0x293c>)
   91628:	4798      	blx	r3
   9162a:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
   9162e:	4b88      	ldr	r3, [pc, #544]	; (91850 <cl_testharnesscommandhandler+0x2940>)
   91630:	4610      	mov	r0, r2
   91632:	4798      	blx	r3
   91634:	4c87      	ldr	r4, [pc, #540]	; (91854 <cl_testharnesscommandhandler+0x2944>)
   91636:	a37a      	add	r3, pc, #488	; (adr r3, 91820 <cl_testharnesscommandhandler+0x2910>)
   91638:	e9d3 2300 	ldrd	r2, r3, [r3]
   9163c:	47a0      	blx	r4
   9163e:	4603      	mov	r3, r0
   91640:	460c      	mov	r4, r1
   91642:	4618      	mov	r0, r3
   91644:	4621      	mov	r1, r4
   91646:	4c84      	ldr	r4, [pc, #528]	; (91858 <cl_testharnesscommandhandler+0x2948>)
   91648:	a377      	add	r3, pc, #476	; (adr r3, 91828 <cl_testharnesscommandhandler+0x2918>)
   9164a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9164e:	47a0      	blx	r4
   91650:	4603      	mov	r3, r0
   91652:	460c      	mov	r4, r1
   91654:	4619      	mov	r1, r3
   91656:	4622      	mov	r2, r4
   91658:	4b80      	ldr	r3, [pc, #512]	; (9185c <cl_testharnesscommandhandler+0x294c>)
   9165a:	4608      	mov	r0, r1
   9165c:	4611      	mov	r1, r2
   9165e:	4798      	blx	r3
   91660:	4603      	mov	r3, r0
   91662:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
   91666:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
   9166a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   9166e:	fb02 f303 	mul.w	r3, r2, r3
   91672:	4a7b      	ldr	r2, [pc, #492]	; (91860 <cl_testharnesscommandhandler+0x2950>)
   91674:	fb82 1203 	smull	r1, r2, r2, r3
   91678:	11d2      	asrs	r2, r2, #7
   9167a:	17db      	asrs	r3, r3, #31
   9167c:	1ad3      	subs	r3, r2, r3
   9167e:	b29b      	uxth	r3, r3
   91680:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   91684:	b29b      	uxth	r3, r3
   91686:	b21a      	sxth	r2, r3
   91688:	f107 030c 	add.w	r3, r7, #12
   9168c:	801a      	strh	r2, [r3, #0]
   9168e:	4b75      	ldr	r3, [pc, #468]	; (91864 <cl_testharnesscommandhandler+0x2954>)
   91690:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   91694:	2206      	movs	r2, #6
   91696:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   9169a:	2018      	movs	r0, #24
   9169c:	4b67      	ldr	r3, [pc, #412]	; (9183c <cl_testharnesscommandhandler+0x292c>)
   9169e:	4798      	blx	r3
   916a0:	4603      	mov	r3, r0
   916a2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   916a6:	f107 030c 	add.w	r3, r7, #12
   916aa:	2202      	movs	r2, #2
   916ac:	4619      	mov	r1, r3
   916ae:	2019      	movs	r0, #25
   916b0:	4b62      	ldr	r3, [pc, #392]	; (9183c <cl_testharnesscommandhandler+0x292c>)
   916b2:	4798      	blx	r3
   916b4:	4603      	mov	r3, r0
   916b6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   916ba:	e0a2      	b.n	91802 <cl_testharnesscommandhandler+0x28f2>
   916bc:	f107 0392 	add.w	r3, r7, #146	; 0x92
   916c0:	4619      	mov	r1, r3
   916c2:	2013      	movs	r0, #19
   916c4:	4b61      	ldr	r3, [pc, #388]	; (9184c <cl_testharnesscommandhandler+0x293c>)
   916c6:	4798      	blx	r3
   916c8:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
   916cc:	4b60      	ldr	r3, [pc, #384]	; (91850 <cl_testharnesscommandhandler+0x2940>)
   916ce:	4610      	mov	r0, r2
   916d0:	4798      	blx	r3
   916d2:	4c60      	ldr	r4, [pc, #384]	; (91854 <cl_testharnesscommandhandler+0x2944>)
   916d4:	a352      	add	r3, pc, #328	; (adr r3, 91820 <cl_testharnesscommandhandler+0x2910>)
   916d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   916da:	47a0      	blx	r4
   916dc:	4603      	mov	r3, r0
   916de:	460c      	mov	r4, r1
   916e0:	4618      	mov	r0, r3
   916e2:	4621      	mov	r1, r4
   916e4:	4c5c      	ldr	r4, [pc, #368]	; (91858 <cl_testharnesscommandhandler+0x2948>)
   916e6:	a350      	add	r3, pc, #320	; (adr r3, 91828 <cl_testharnesscommandhandler+0x2918>)
   916e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   916ec:	47a0      	blx	r4
   916ee:	4603      	mov	r3, r0
   916f0:	460c      	mov	r4, r1
   916f2:	4619      	mov	r1, r3
   916f4:	4622      	mov	r2, r4
   916f6:	4b59      	ldr	r3, [pc, #356]	; (9185c <cl_testharnesscommandhandler+0x294c>)
   916f8:	4608      	mov	r0, r1
   916fa:	4611      	mov	r1, r2
   916fc:	4798      	blx	r3
   916fe:	4603      	mov	r3, r0
   91700:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
   91704:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
   91708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   9170c:	fb02 f303 	mul.w	r3, r2, r3
   91710:	4a53      	ldr	r2, [pc, #332]	; (91860 <cl_testharnesscommandhandler+0x2950>)
   91712:	fb82 1203 	smull	r1, r2, r2, r3
   91716:	11d2      	asrs	r2, r2, #7
   91718:	17db      	asrs	r3, r3, #31
   9171a:	1ad3      	subs	r3, r2, r3
   9171c:	b29b      	uxth	r3, r3
   9171e:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   91722:	b29b      	uxth	r3, r3
   91724:	b21a      	sxth	r2, r3
   91726:	f107 030a 	add.w	r3, r7, #10
   9172a:	801a      	strh	r2, [r3, #0]
   9172c:	4b4e      	ldr	r3, [pc, #312]	; (91868 <cl_testharnesscommandhandler+0x2958>)
   9172e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   91732:	2206      	movs	r2, #6
   91734:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   91738:	2018      	movs	r0, #24
   9173a:	4b40      	ldr	r3, [pc, #256]	; (9183c <cl_testharnesscommandhandler+0x292c>)
   9173c:	4798      	blx	r3
   9173e:	4603      	mov	r3, r0
   91740:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91744:	f107 030a 	add.w	r3, r7, #10
   91748:	2202      	movs	r2, #2
   9174a:	4619      	mov	r1, r3
   9174c:	2019      	movs	r0, #25
   9174e:	4b3b      	ldr	r3, [pc, #236]	; (9183c <cl_testharnesscommandhandler+0x292c>)
   91750:	4798      	blx	r3
   91752:	4603      	mov	r3, r0
   91754:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91758:	e053      	b.n	91802 <cl_testharnesscommandhandler+0x28f2>
   9175a:	f107 0392 	add.w	r3, r7, #146	; 0x92
   9175e:	4619      	mov	r1, r3
   91760:	2014      	movs	r0, #20
   91762:	4b3a      	ldr	r3, [pc, #232]	; (9184c <cl_testharnesscommandhandler+0x293c>)
   91764:	4798      	blx	r3
   91766:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
   9176a:	4b39      	ldr	r3, [pc, #228]	; (91850 <cl_testharnesscommandhandler+0x2940>)
   9176c:	4610      	mov	r0, r2
   9176e:	4798      	blx	r3
   91770:	4c38      	ldr	r4, [pc, #224]	; (91854 <cl_testharnesscommandhandler+0x2944>)
   91772:	a32b      	add	r3, pc, #172	; (adr r3, 91820 <cl_testharnesscommandhandler+0x2910>)
   91774:	e9d3 2300 	ldrd	r2, r3, [r3]
   91778:	47a0      	blx	r4
   9177a:	4603      	mov	r3, r0
   9177c:	460c      	mov	r4, r1
   9177e:	4618      	mov	r0, r3
   91780:	4621      	mov	r1, r4
   91782:	4c35      	ldr	r4, [pc, #212]	; (91858 <cl_testharnesscommandhandler+0x2948>)
   91784:	a328      	add	r3, pc, #160	; (adr r3, 91828 <cl_testharnesscommandhandler+0x2918>)
   91786:	e9d3 2300 	ldrd	r2, r3, [r3]
   9178a:	47a0      	blx	r4
   9178c:	4603      	mov	r3, r0
   9178e:	460c      	mov	r4, r1
   91790:	4619      	mov	r1, r3
   91792:	4622      	mov	r2, r4
   91794:	4b31      	ldr	r3, [pc, #196]	; (9185c <cl_testharnesscommandhandler+0x294c>)
   91796:	4608      	mov	r0, r1
   91798:	4611      	mov	r1, r2
   9179a:	4798      	blx	r3
   9179c:	4603      	mov	r3, r0
   9179e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
   917a2:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
   917a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   917aa:	fb02 f303 	mul.w	r3, r2, r3
   917ae:	4a2c      	ldr	r2, [pc, #176]	; (91860 <cl_testharnesscommandhandler+0x2950>)
   917b0:	fb82 1203 	smull	r1, r2, r2, r3
   917b4:	11d2      	asrs	r2, r2, #7
   917b6:	17db      	asrs	r3, r3, #31
   917b8:	1ad3      	subs	r3, r2, r3
   917ba:	b29b      	uxth	r3, r3
   917bc:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   917c0:	b29b      	uxth	r3, r3
   917c2:	b21a      	sxth	r2, r3
   917c4:	f107 0308 	add.w	r3, r7, #8
   917c8:	801a      	strh	r2, [r3, #0]
   917ca:	4b28      	ldr	r3, [pc, #160]	; (9186c <cl_testharnesscommandhandler+0x295c>)
   917cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   917d0:	2206      	movs	r2, #6
   917d2:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   917d6:	2018      	movs	r0, #24
   917d8:	4b18      	ldr	r3, [pc, #96]	; (9183c <cl_testharnesscommandhandler+0x292c>)
   917da:	4798      	blx	r3
   917dc:	4603      	mov	r3, r0
   917de:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   917e2:	f107 0308 	add.w	r3, r7, #8
   917e6:	2202      	movs	r2, #2
   917e8:	4619      	mov	r1, r3
   917ea:	2019      	movs	r0, #25
   917ec:	4b13      	ldr	r3, [pc, #76]	; (9183c <cl_testharnesscommandhandler+0x292c>)
   917ee:	4798      	blx	r3
   917f0:	4603      	mov	r3, r0
   917f2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   917f6:	e004      	b.n	91802 <cl_testharnesscommandhandler+0x28f2>
   917f8:	bf00      	nop
   917fa:	e00a      	b.n	91812 <cl_testharnesscommandhandler+0x2902>
   917fc:	bf00      	nop
   917fe:	e008      	b.n	91812 <cl_testharnesscommandhandler+0x2902>
   91800:	bf00      	nop
   91802:	e006      	b.n	91812 <cl_testharnesscommandhandler+0x2902>
   91804:	bf00      	nop
   91806:	e004      	b.n	91812 <cl_testharnesscommandhandler+0x2902>
   91808:	bf00      	nop
   9180a:	e002      	b.n	91812 <cl_testharnesscommandhandler+0x2902>
   9180c:	bf00      	nop
   9180e:	e000      	b.n	91812 <cl_testharnesscommandhandler+0x2902>
   91810:	bf00      	nop
   91812:	2300      	movs	r3, #0
   91814:	4618      	mov	r0, r3
   91816:	f507 7792 	add.w	r7, r7, #292	; 0x124
   9181a:	46bd      	mov	sp, r7
   9181c:	bd90      	pop	{r4, r7, pc}
   9181e:	bf00      	nop
   91820:	a6b50b0f 	.word	0xa6b50b0f
   91824:	3fe9c779 	.word	0x3fe9c779
   91828:	00000000 	.word	0x00000000
   9182c:	4096a800 	.word	0x4096a800
   91830:	20072646 	.word	0x20072646
   91834:	20072640 	.word	0x20072640
   91838:	000a619c 	.word	0x000a619c
   9183c:	00099729 	.word	0x00099729
   91840:	20072644 	.word	0x20072644
   91844:	20072642 	.word	0x20072642
   91848:	000a61a4 	.word	0x000a61a4
   9184c:	00091871 	.word	0x00091871
   91850:	000a34c9 	.word	0x000a34c9
   91854:	000a3595 	.word	0x000a3595
   91858:	000a322d 	.word	0x000a322d
   9185c:	000a3ac9 	.word	0x000a3ac9
   91860:	60606061 	.word	0x60606061
   91864:	000a61ac 	.word	0x000a61ac
   91868:	000a61b4 	.word	0x000a61b4
   9186c:	000a61bc 	.word	0x000a61bc

00091870 <cl_testgetsensordata>:
   91870:	b580      	push	{r7, lr}
   91872:	b086      	sub	sp, #24
   91874:	af00      	add	r7, sp, #0
   91876:	4603      	mov	r3, r0
   91878:	6039      	str	r1, [r7, #0]
   9187a:	71fb      	strb	r3, [r7, #7]
   9187c:	2304      	movs	r3, #4
   9187e:	75fb      	strb	r3, [r7, #23]
   91880:	2300      	movs	r3, #0
   91882:	73fb      	strb	r3, [r7, #15]
   91884:	2300      	movs	r3, #0
   91886:	81bb      	strh	r3, [r7, #12]
   91888:	2300      	movs	r3, #0
   9188a:	60bb      	str	r3, [r7, #8]
   9188c:	f107 030f 	add.w	r3, r7, #15
   91890:	75bb      	strb	r3, [r7, #22]
   91892:	f107 030c 	add.w	r3, r7, #12
   91896:	82bb      	strh	r3, [r7, #20]
   91898:	f107 0308 	add.w	r3, r7, #8
   9189c:	613b      	str	r3, [r7, #16]
   9189e:	79fb      	ldrb	r3, [r7, #7]
   918a0:	6839      	ldr	r1, [r7, #0]
   918a2:	4618      	mov	r0, r3
   918a4:	4b03      	ldr	r3, [pc, #12]	; (918b4 <cl_testgetsensordata+0x44>)
   918a6:	4798      	blx	r3
   918a8:	2300      	movs	r3, #0
   918aa:	4618      	mov	r0, r3
   918ac:	3718      	adds	r7, #24
   918ae:	46bd      	mov	sp, r7
   918b0:	bd80      	pop	{r7, pc}
   918b2:	bf00      	nop
   918b4:	0008d6b1 	.word	0x0008d6b1

000918b8 <pinclock>:
   918b8:	b480      	push	{r7}
   918ba:	af00      	add	r7, sp, #0
   918bc:	bf00      	nop
   918be:	46bd      	mov	sp, r7
   918c0:	bc80      	pop	{r7}
   918c2:	4770      	bx	lr

000918c4 <tg_timer_minute>:
   918c4:	b480      	push	{r7}
   918c6:	b085      	sub	sp, #20
   918c8:	af00      	add	r7, sp, #0
   918ca:	4b0e      	ldr	r3, [pc, #56]	; (91904 <tg_timer_minute+0x40>)
   918cc:	881b      	ldrh	r3, [r3, #0]
   918ce:	461a      	mov	r2, r3
   918d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   918d4:	fb03 f302 	mul.w	r3, r3, r2
   918d8:	60fb      	str	r3, [r7, #12]
   918da:	4b0b      	ldr	r3, [pc, #44]	; (91908 <tg_timer_minute+0x44>)
   918dc:	681b      	ldr	r3, [r3, #0]
   918de:	2bb4      	cmp	r3, #180	; 0xb4
   918e0:	d105      	bne.n	918ee <tg_timer_minute+0x2a>
   918e2:	4b08      	ldr	r3, [pc, #32]	; (91904 <tg_timer_minute+0x40>)
   918e4:	2200      	movs	r2, #0
   918e6:	801a      	strh	r2, [r3, #0]
   918e8:	4b07      	ldr	r3, [pc, #28]	; (91908 <tg_timer_minute+0x44>)
   918ea:	2200      	movs	r2, #0
   918ec:	601a      	str	r2, [r3, #0]
   918ee:	4b06      	ldr	r3, [pc, #24]	; (91908 <tg_timer_minute+0x44>)
   918f0:	681b      	ldr	r3, [r3, #0]
   918f2:	3301      	adds	r3, #1
   918f4:	4a04      	ldr	r2, [pc, #16]	; (91908 <tg_timer_minute+0x44>)
   918f6:	6013      	str	r3, [r2, #0]
   918f8:	bf00      	nop
   918fa:	3714      	adds	r7, #20
   918fc:	46bd      	mov	sp, r7
   918fe:	bc80      	pop	{r7}
   91900:	4770      	bx	lr
   91902:	bf00      	nop
   91904:	2007264a 	.word	0x2007264a
   91908:	20072650 	.word	0x20072650

0009190c <testsectclock>:
   9190c:	b580      	push	{r7, lr}
   9190e:	b086      	sub	sp, #24
   91910:	af00      	add	r7, sp, #0
   91912:	2300      	movs	r3, #0
   91914:	82fb      	strh	r3, [r7, #22]
   91916:	2300      	movs	r3, #0
   91918:	82bb      	strh	r3, [r7, #20]
   9191a:	2300      	movs	r3, #0
   9191c:	827b      	strh	r3, [r7, #18]
   9191e:	2300      	movs	r3, #0
   91920:	823b      	strh	r3, [r7, #16]
   91922:	2300      	movs	r3, #0
   91924:	81fb      	strh	r3, [r7, #14]
   91926:	2300      	movs	r3, #0
   91928:	81bb      	strh	r3, [r7, #12]
   9192a:	f04f 0300 	mov.w	r3, #0
   9192e:	60bb      	str	r3, [r7, #8]
   91930:	1dbb      	adds	r3, r7, #6
   91932:	4619      	mov	r1, r3
   91934:	2013      	movs	r0, #19
   91936:	4b0f      	ldr	r3, [pc, #60]	; (91974 <testsectclock+0x68>)
   91938:	4798      	blx	r3
   9193a:	4b0f      	ldr	r3, [pc, #60]	; (91978 <testsectclock+0x6c>)
   9193c:	681a      	ldr	r2, [r3, #0]
   9193e:	4b0f      	ldr	r3, [pc, #60]	; (9197c <testsectclock+0x70>)
   91940:	490f      	ldr	r1, [pc, #60]	; (91980 <testsectclock+0x74>)
   91942:	4610      	mov	r0, r2
   91944:	4798      	blx	r3
   91946:	4603      	mov	r3, r0
   91948:	2b00      	cmp	r3, #0
   9194a:	d100      	bne.n	9194e <testsectclock+0x42>
   9194c:	e00d      	b.n	9196a <testsectclock+0x5e>
   9194e:	4b0d      	ldr	r3, [pc, #52]	; (91984 <testsectclock+0x78>)
   91950:	781b      	ldrb	r3, [r3, #0]
   91952:	b2db      	uxtb	r3, r3
   91954:	2b01      	cmp	r3, #1
   91956:	d008      	beq.n	9196a <testsectclock+0x5e>
   91958:	4b0b      	ldr	r3, [pc, #44]	; (91988 <testsectclock+0x7c>)
   9195a:	781b      	ldrb	r3, [r3, #0]
   9195c:	2b01      	cmp	r3, #1
   9195e:	d004      	beq.n	9196a <testsectclock+0x5e>
   91960:	4b0a      	ldr	r3, [pc, #40]	; (9198c <testsectclock+0x80>)
   91962:	4798      	blx	r3
   91964:	2004      	movs	r0, #4
   91966:	4b0a      	ldr	r3, [pc, #40]	; (91990 <testsectclock+0x84>)
   91968:	4798      	blx	r3
   9196a:	bf00      	nop
   9196c:	3718      	adds	r7, #24
   9196e:	46bd      	mov	sp, r7
   91970:	bd80      	pop	{r7, pc}
   91972:	bf00      	nop
   91974:	0008d6b1 	.word	0x0008d6b1
   91978:	2007166c 	.word	0x2007166c
   9197c:	000a418d 	.word	0x000a418d
   91980:	471c4000 	.word	0x471c4000
   91984:	20072637 	.word	0x20072637
   91988:	2007288d 	.word	0x2007288d
   9198c:	00097999 	.word	0x00097999
   91990:	00088a91 	.word	0x00088a91

00091994 <Cl_TimerTickCallback>:
   91994:	b580      	push	{r7, lr}
   91996:	af00      	add	r7, sp, #0
   91998:	4b1c      	ldr	r3, [pc, #112]	; (91a0c <Cl_TimerTickCallback+0x78>)
   9199a:	681b      	ldr	r3, [r3, #0]
   9199c:	3301      	adds	r3, #1
   9199e:	4a1b      	ldr	r2, [pc, #108]	; (91a0c <Cl_TimerTickCallback+0x78>)
   919a0:	6013      	str	r3, [r2, #0]
   919a2:	4b1a      	ldr	r3, [pc, #104]	; (91a0c <Cl_TimerTickCallback+0x78>)
   919a4:	681b      	ldr	r3, [r3, #0]
   919a6:	2b00      	cmp	r3, #0
   919a8:	dd07      	ble.n	919ba <Cl_TimerTickCallback+0x26>
   919aa:	4b18      	ldr	r3, [pc, #96]	; (91a0c <Cl_TimerTickCallback+0x78>)
   919ac:	2200      	movs	r2, #0
   919ae:	601a      	str	r2, [r3, #0]
   919b0:	4b17      	ldr	r3, [pc, #92]	; (91a10 <Cl_TimerTickCallback+0x7c>)
   919b2:	681b      	ldr	r3, [r3, #0]
   919b4:	3301      	adds	r3, #1
   919b6:	4a16      	ldr	r2, [pc, #88]	; (91a10 <Cl_TimerTickCallback+0x7c>)
   919b8:	6013      	str	r3, [r2, #0]
   919ba:	4b15      	ldr	r3, [pc, #84]	; (91a10 <Cl_TimerTickCallback+0x7c>)
   919bc:	681b      	ldr	r3, [r3, #0]
   919be:	2b3b      	cmp	r3, #59	; 0x3b
   919c0:	dd07      	ble.n	919d2 <Cl_TimerTickCallback+0x3e>
   919c2:	4b13      	ldr	r3, [pc, #76]	; (91a10 <Cl_TimerTickCallback+0x7c>)
   919c4:	2200      	movs	r2, #0
   919c6:	601a      	str	r2, [r3, #0]
   919c8:	4b12      	ldr	r3, [pc, #72]	; (91a14 <Cl_TimerTickCallback+0x80>)
   919ca:	681b      	ldr	r3, [r3, #0]
   919cc:	3301      	adds	r3, #1
   919ce:	4a11      	ldr	r2, [pc, #68]	; (91a14 <Cl_TimerTickCallback+0x80>)
   919d0:	6013      	str	r3, [r2, #0]
   919d2:	4b10      	ldr	r3, [pc, #64]	; (91a14 <Cl_TimerTickCallback+0x80>)
   919d4:	681b      	ldr	r3, [r3, #0]
   919d6:	2b3b      	cmp	r3, #59	; 0x3b
   919d8:	dd0d      	ble.n	919f6 <Cl_TimerTickCallback+0x62>
   919da:	4b0e      	ldr	r3, [pc, #56]	; (91a14 <Cl_TimerTickCallback+0x80>)
   919dc:	2200      	movs	r2, #0
   919de:	601a      	str	r2, [r3, #0]
   919e0:	4b0d      	ldr	r3, [pc, #52]	; (91a18 <Cl_TimerTickCallback+0x84>)
   919e2:	681b      	ldr	r3, [r3, #0]
   919e4:	3301      	adds	r3, #1
   919e6:	4a0c      	ldr	r2, [pc, #48]	; (91a18 <Cl_TimerTickCallback+0x84>)
   919e8:	6013      	str	r3, [r2, #0]
   919ea:	4b0c      	ldr	r3, [pc, #48]	; (91a1c <Cl_TimerTickCallback+0x88>)
   919ec:	4798      	blx	r3
   919ee:	4603      	mov	r3, r0
   919f0:	461a      	mov	r2, r3
   919f2:	4b0b      	ldr	r3, [pc, #44]	; (91a20 <Cl_TimerTickCallback+0x8c>)
   919f4:	701a      	strb	r2, [r3, #0]
   919f6:	4b08      	ldr	r3, [pc, #32]	; (91a18 <Cl_TimerTickCallback+0x84>)
   919f8:	681b      	ldr	r3, [r3, #0]
   919fa:	2b17      	cmp	r3, #23
   919fc:	dd02      	ble.n	91a04 <Cl_TimerTickCallback+0x70>
   919fe:	4b06      	ldr	r3, [pc, #24]	; (91a18 <Cl_TimerTickCallback+0x84>)
   91a00:	2200      	movs	r2, #0
   91a02:	601a      	str	r2, [r3, #0]
   91a04:	2300      	movs	r3, #0
   91a06:	4618      	mov	r0, r3
   91a08:	bd80      	pop	{r7, pc}
   91a0a:	bf00      	nop
   91a0c:	2007265c 	.word	0x2007265c
   91a10:	20072660 	.word	0x20072660
   91a14:	20072664 	.word	0x20072664
   91a18:	20072668 	.word	0x20072668
   91a1c:	00091dc5 	.word	0x00091dc5
   91a20:	200731a0 	.word	0x200731a0

00091a24 <Cl_MilliTickcallBack>:
   91a24:	b580      	push	{r7, lr}
   91a26:	b082      	sub	sp, #8
   91a28:	af00      	add	r7, sp, #0
   91a2a:	4b5e      	ldr	r3, [pc, #376]	; (91ba4 <Cl_MilliTickcallBack+0x180>)
   91a2c:	681b      	ldr	r3, [r3, #0]
   91a2e:	2b01      	cmp	r3, #1
   91a30:	d10d      	bne.n	91a4e <Cl_MilliTickcallBack+0x2a>
   91a32:	4b5d      	ldr	r3, [pc, #372]	; (91ba8 <Cl_MilliTickcallBack+0x184>)
   91a34:	681b      	ldr	r3, [r3, #0]
   91a36:	3301      	adds	r3, #1
   91a38:	4a5b      	ldr	r2, [pc, #364]	; (91ba8 <Cl_MilliTickcallBack+0x184>)
   91a3a:	6013      	str	r3, [r2, #0]
   91a3c:	4b5a      	ldr	r3, [pc, #360]	; (91ba8 <Cl_MilliTickcallBack+0x184>)
   91a3e:	681b      	ldr	r3, [r3, #0]
   91a40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   91a44:	dd06      	ble.n	91a54 <Cl_MilliTickcallBack+0x30>
   91a46:	4b58      	ldr	r3, [pc, #352]	; (91ba8 <Cl_MilliTickcallBack+0x184>)
   91a48:	2200      	movs	r2, #0
   91a4a:	601a      	str	r2, [r3, #0]
   91a4c:	e002      	b.n	91a54 <Cl_MilliTickcallBack+0x30>
   91a4e:	4b56      	ldr	r3, [pc, #344]	; (91ba8 <Cl_MilliTickcallBack+0x184>)
   91a50:	2200      	movs	r2, #0
   91a52:	601a      	str	r2, [r3, #0]
   91a54:	4b55      	ldr	r3, [pc, #340]	; (91bac <Cl_MilliTickcallBack+0x188>)
   91a56:	681b      	ldr	r3, [r3, #0]
   91a58:	3301      	adds	r3, #1
   91a5a:	4a54      	ldr	r2, [pc, #336]	; (91bac <Cl_MilliTickcallBack+0x188>)
   91a5c:	6013      	str	r3, [r2, #0]
   91a5e:	4b53      	ldr	r3, [pc, #332]	; (91bac <Cl_MilliTickcallBack+0x188>)
   91a60:	681b      	ldr	r3, [r3, #0]
   91a62:	2b32      	cmp	r3, #50	; 0x32
   91a64:	dd02      	ble.n	91a6c <Cl_MilliTickcallBack+0x48>
   91a66:	4b51      	ldr	r3, [pc, #324]	; (91bac <Cl_MilliTickcallBack+0x188>)
   91a68:	2200      	movs	r2, #0
   91a6a:	601a      	str	r2, [r3, #0]
   91a6c:	4b50      	ldr	r3, [pc, #320]	; (91bb0 <Cl_MilliTickcallBack+0x18c>)
   91a6e:	681b      	ldr	r3, [r3, #0]
   91a70:	3301      	adds	r3, #1
   91a72:	4a4f      	ldr	r2, [pc, #316]	; (91bb0 <Cl_MilliTickcallBack+0x18c>)
   91a74:	6013      	str	r3, [r2, #0]
   91a76:	4b4e      	ldr	r3, [pc, #312]	; (91bb0 <Cl_MilliTickcallBack+0x18c>)
   91a78:	6819      	ldr	r1, [r3, #0]
   91a7a:	4b4e      	ldr	r3, [pc, #312]	; (91bb4 <Cl_MilliTickcallBack+0x190>)
   91a7c:	fb83 2301 	smull	r2, r3, r3, r1
   91a80:	10da      	asrs	r2, r3, #3
   91a82:	17cb      	asrs	r3, r1, #31
   91a84:	1ad2      	subs	r2, r2, r3
   91a86:	4613      	mov	r3, r2
   91a88:	009b      	lsls	r3, r3, #2
   91a8a:	4413      	add	r3, r2
   91a8c:	009b      	lsls	r3, r3, #2
   91a8e:	1aca      	subs	r2, r1, r3
   91a90:	2a00      	cmp	r2, #0
   91a92:	d103      	bne.n	91a9c <Cl_MilliTickcallBack+0x78>
   91a94:	4b48      	ldr	r3, [pc, #288]	; (91bb8 <Cl_MilliTickcallBack+0x194>)
   91a96:	4798      	blx	r3
   91a98:	4603      	mov	r3, r0
   91a9a:	71fb      	strb	r3, [r7, #7]
   91a9c:	4b44      	ldr	r3, [pc, #272]	; (91bb0 <Cl_MilliTickcallBack+0x18c>)
   91a9e:	681b      	ldr	r3, [r3, #0]
   91aa0:	f003 0301 	and.w	r3, r3, #1
   91aa4:	2b00      	cmp	r3, #0
   91aa6:	d105      	bne.n	91ab4 <Cl_MilliTickcallBack+0x90>
   91aa8:	4b44      	ldr	r3, [pc, #272]	; (91bbc <Cl_MilliTickcallBack+0x198>)
   91aaa:	4798      	blx	r3
   91aac:	4b44      	ldr	r3, [pc, #272]	; (91bc0 <Cl_MilliTickcallBack+0x19c>)
   91aae:	4798      	blx	r3
   91ab0:	4603      	mov	r3, r0
   91ab2:	71fb      	strb	r3, [r7, #7]
   91ab4:	4b3e      	ldr	r3, [pc, #248]	; (91bb0 <Cl_MilliTickcallBack+0x18c>)
   91ab6:	6819      	ldr	r1, [r3, #0]
   91ab8:	4b3e      	ldr	r3, [pc, #248]	; (91bb4 <Cl_MilliTickcallBack+0x190>)
   91aba:	fb83 2301 	smull	r2, r3, r3, r1
   91abe:	105a      	asrs	r2, r3, #1
   91ac0:	17cb      	asrs	r3, r1, #31
   91ac2:	1ad2      	subs	r2, r2, r3
   91ac4:	4613      	mov	r3, r2
   91ac6:	009b      	lsls	r3, r3, #2
   91ac8:	4413      	add	r3, r2
   91aca:	1aca      	subs	r2, r1, r3
   91acc:	2a00      	cmp	r2, #0
   91ace:	d103      	bne.n	91ad8 <Cl_MilliTickcallBack+0xb4>
   91ad0:	4b3c      	ldr	r3, [pc, #240]	; (91bc4 <Cl_MilliTickcallBack+0x1a0>)
   91ad2:	4798      	blx	r3
   91ad4:	4603      	mov	r3, r0
   91ad6:	71fb      	strb	r3, [r7, #7]
   91ad8:	4b35      	ldr	r3, [pc, #212]	; (91bb0 <Cl_MilliTickcallBack+0x18c>)
   91ada:	6819      	ldr	r1, [r3, #0]
   91adc:	4b35      	ldr	r3, [pc, #212]	; (91bb4 <Cl_MilliTickcallBack+0x190>)
   91ade:	fb83 2301 	smull	r2, r3, r3, r1
   91ae2:	109a      	asrs	r2, r3, #2
   91ae4:	17cb      	asrs	r3, r1, #31
   91ae6:	1ad2      	subs	r2, r2, r3
   91ae8:	4613      	mov	r3, r2
   91aea:	009b      	lsls	r3, r3, #2
   91aec:	4413      	add	r3, r2
   91aee:	005b      	lsls	r3, r3, #1
   91af0:	1aca      	subs	r2, r1, r3
   91af2:	2a00      	cmp	r2, #0
   91af4:	d103      	bne.n	91afe <Cl_MilliTickcallBack+0xda>
   91af6:	4b34      	ldr	r3, [pc, #208]	; (91bc8 <Cl_MilliTickcallBack+0x1a4>)
   91af8:	4798      	blx	r3
   91afa:	4603      	mov	r3, r0
   91afc:	71fb      	strb	r3, [r7, #7]
   91afe:	4b2c      	ldr	r3, [pc, #176]	; (91bb0 <Cl_MilliTickcallBack+0x18c>)
   91b00:	681a      	ldr	r2, [r3, #0]
   91b02:	4b32      	ldr	r3, [pc, #200]	; (91bcc <Cl_MilliTickcallBack+0x1a8>)
   91b04:	fb83 1302 	smull	r1, r3, r3, r2
   91b08:	1119      	asrs	r1, r3, #4
   91b0a:	17d3      	asrs	r3, r2, #31
   91b0c:	1acb      	subs	r3, r1, r3
   91b0e:	2132      	movs	r1, #50	; 0x32
   91b10:	fb01 f303 	mul.w	r3, r1, r3
   91b14:	1ad3      	subs	r3, r2, r3
   91b16:	2b00      	cmp	r3, #0
   91b18:	d103      	bne.n	91b22 <Cl_MilliTickcallBack+0xfe>
   91b1a:	4b2d      	ldr	r3, [pc, #180]	; (91bd0 <Cl_MilliTickcallBack+0x1ac>)
   91b1c:	4798      	blx	r3
   91b1e:	4603      	mov	r3, r0
   91b20:	71fb      	strb	r3, [r7, #7]
   91b22:	4b23      	ldr	r3, [pc, #140]	; (91bb0 <Cl_MilliTickcallBack+0x18c>)
   91b24:	681b      	ldr	r3, [r3, #0]
   91b26:	2b64      	cmp	r3, #100	; 0x64
   91b28:	d10d      	bne.n	91b46 <Cl_MilliTickcallBack+0x122>
   91b2a:	4b21      	ldr	r3, [pc, #132]	; (91bb0 <Cl_MilliTickcallBack+0x18c>)
   91b2c:	2200      	movs	r2, #0
   91b2e:	601a      	str	r2, [r3, #0]
   91b30:	4b28      	ldr	r3, [pc, #160]	; (91bd4 <Cl_MilliTickcallBack+0x1b0>)
   91b32:	681b      	ldr	r3, [r3, #0]
   91b34:	3301      	adds	r3, #1
   91b36:	4a27      	ldr	r2, [pc, #156]	; (91bd4 <Cl_MilliTickcallBack+0x1b0>)
   91b38:	6013      	str	r3, [r2, #0]
   91b3a:	4b27      	ldr	r3, [pc, #156]	; (91bd8 <Cl_MilliTickcallBack+0x1b4>)
   91b3c:	4798      	blx	r3
   91b3e:	4603      	mov	r3, r0
   91b40:	71fb      	strb	r3, [r7, #7]
   91b42:	4b26      	ldr	r3, [pc, #152]	; (91bdc <Cl_MilliTickcallBack+0x1b8>)
   91b44:	4798      	blx	r3
   91b46:	4b23      	ldr	r3, [pc, #140]	; (91bd4 <Cl_MilliTickcallBack+0x1b0>)
   91b48:	681b      	ldr	r3, [r3, #0]
   91b4a:	2b05      	cmp	r3, #5
   91b4c:	d11d      	bne.n	91b8a <Cl_MilliTickcallBack+0x166>
   91b4e:	4b21      	ldr	r3, [pc, #132]	; (91bd4 <Cl_MilliTickcallBack+0x1b0>)
   91b50:	2200      	movs	r2, #0
   91b52:	601a      	str	r2, [r3, #0]
   91b54:	4b22      	ldr	r3, [pc, #136]	; (91be0 <Cl_MilliTickcallBack+0x1bc>)
   91b56:	681b      	ldr	r3, [r3, #0]
   91b58:	3301      	adds	r3, #1
   91b5a:	4a21      	ldr	r2, [pc, #132]	; (91be0 <Cl_MilliTickcallBack+0x1bc>)
   91b5c:	6013      	str	r3, [r2, #0]
   91b5e:	4b20      	ldr	r3, [pc, #128]	; (91be0 <Cl_MilliTickcallBack+0x1bc>)
   91b60:	681b      	ldr	r3, [r3, #0]
   91b62:	2b02      	cmp	r3, #2
   91b64:	d10d      	bne.n	91b82 <Cl_MilliTickcallBack+0x15e>
   91b66:	4b1e      	ldr	r3, [pc, #120]	; (91be0 <Cl_MilliTickcallBack+0x1bc>)
   91b68:	2200      	movs	r2, #0
   91b6a:	601a      	str	r2, [r3, #0]
   91b6c:	4b1d      	ldr	r3, [pc, #116]	; (91be4 <Cl_MilliTickcallBack+0x1c0>)
   91b6e:	4798      	blx	r3
   91b70:	4603      	mov	r3, r0
   91b72:	71fb      	strb	r3, [r7, #7]
   91b74:	4b1c      	ldr	r3, [pc, #112]	; (91be8 <Cl_MilliTickcallBack+0x1c4>)
   91b76:	681b      	ldr	r3, [r3, #0]
   91b78:	3301      	adds	r3, #1
   91b7a:	4a1b      	ldr	r2, [pc, #108]	; (91be8 <Cl_MilliTickcallBack+0x1c4>)
   91b7c:	6013      	str	r3, [r2, #0]
   91b7e:	4b1b      	ldr	r3, [pc, #108]	; (91bec <Cl_MilliTickcallBack+0x1c8>)
   91b80:	4798      	blx	r3
   91b82:	4b1b      	ldr	r3, [pc, #108]	; (91bf0 <Cl_MilliTickcallBack+0x1cc>)
   91b84:	4798      	blx	r3
   91b86:	4603      	mov	r3, r0
   91b88:	71fb      	strb	r3, [r7, #7]
   91b8a:	4b17      	ldr	r3, [pc, #92]	; (91be8 <Cl_MilliTickcallBack+0x1c4>)
   91b8c:	681b      	ldr	r3, [r3, #0]
   91b8e:	2b02      	cmp	r3, #2
   91b90:	d102      	bne.n	91b98 <Cl_MilliTickcallBack+0x174>
   91b92:	4b15      	ldr	r3, [pc, #84]	; (91be8 <Cl_MilliTickcallBack+0x1c4>)
   91b94:	2200      	movs	r2, #0
   91b96:	601a      	str	r2, [r3, #0]
   91b98:	2300      	movs	r3, #0
   91b9a:	4618      	mov	r0, r3
   91b9c:	3708      	adds	r7, #8
   91b9e:	46bd      	mov	sp, r7
   91ba0:	bd80      	pop	{r7, pc}
   91ba2:	bf00      	nop
   91ba4:	2007270c 	.word	0x2007270c
   91ba8:	20072658 	.word	0x20072658
   91bac:	20072654 	.word	0x20072654
   91bb0:	2007266c 	.word	0x2007266c
   91bb4:	66666667 	.word	0x66666667
   91bb8:	00091c25 	.word	0x00091c25
   91bbc:	000918b9 	.word	0x000918b9
   91bc0:	00091bf5 	.word	0x00091bf5
   91bc4:	00091c05 	.word	0x00091c05
   91bc8:	00091c15 	.word	0x00091c15
   91bcc:	51eb851f 	.word	0x51eb851f
   91bd0:	00091c61 	.word	0x00091c61
   91bd4:	20072670 	.word	0x20072670
   91bd8:	00091ca1 	.word	0x00091ca1
   91bdc:	00092d65 	.word	0x00092d65
   91be0:	20072674 	.word	0x20072674
   91be4:	00091d19 	.word	0x00091d19
   91be8:	20072678 	.word	0x20072678
   91bec:	0009190d 	.word	0x0009190d
   91bf0:	00091cdd 	.word	0x00091cdd

00091bf4 <Cl_Timer_Create_Tick2Ms_Event>:
   91bf4:	b480      	push	{r7}
   91bf6:	af00      	add	r7, sp, #0
   91bf8:	2300      	movs	r3, #0
   91bfa:	4618      	mov	r0, r3
   91bfc:	46bd      	mov	sp, r7
   91bfe:	bc80      	pop	{r7}
   91c00:	4770      	bx	lr
   91c02:	bf00      	nop

00091c04 <Cl_Timer_Create_Tick5Ms_Event>:
   91c04:	b480      	push	{r7}
   91c06:	af00      	add	r7, sp, #0
   91c08:	2300      	movs	r3, #0
   91c0a:	4618      	mov	r0, r3
   91c0c:	46bd      	mov	sp, r7
   91c0e:	bc80      	pop	{r7}
   91c10:	4770      	bx	lr
   91c12:	bf00      	nop

00091c14 <Cl_Timer_Create_Tick10Ms_Event>:
   91c14:	b480      	push	{r7}
   91c16:	af00      	add	r7, sp, #0
   91c18:	2300      	movs	r3, #0
   91c1a:	4618      	mov	r0, r3
   91c1c:	46bd      	mov	sp, r7
   91c1e:	bc80      	pop	{r7}
   91c20:	4770      	bx	lr
   91c22:	bf00      	nop

00091c24 <Cl_Timer_Create_Tick20Ms_Event>:
   91c24:	b480      	push	{r7}
   91c26:	af00      	add	r7, sp, #0
   91c28:	4b0c      	ldr	r3, [pc, #48]	; (91c5c <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   91c2a:	781b      	ldrb	r3, [r3, #0]
   91c2c:	2b09      	cmp	r3, #9
   91c2e:	d80f      	bhi.n	91c50 <Cl_Timer_Create_Tick20Ms_Event+0x2c>
   91c30:	4b0a      	ldr	r3, [pc, #40]	; (91c5c <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   91c32:	781b      	ldrb	r3, [r3, #0]
   91c34:	461a      	mov	r2, r3
   91c36:	4b09      	ldr	r3, [pc, #36]	; (91c5c <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   91c38:	4413      	add	r3, r2
   91c3a:	2237      	movs	r2, #55	; 0x37
   91c3c:	709a      	strb	r2, [r3, #2]
   91c3e:	4b07      	ldr	r3, [pc, #28]	; (91c5c <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   91c40:	2201      	movs	r2, #1
   91c42:	705a      	strb	r2, [r3, #1]
   91c44:	4b05      	ldr	r3, [pc, #20]	; (91c5c <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   91c46:	781b      	ldrb	r3, [r3, #0]
   91c48:	3301      	adds	r3, #1
   91c4a:	b2da      	uxtb	r2, r3
   91c4c:	4b03      	ldr	r3, [pc, #12]	; (91c5c <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   91c4e:	701a      	strb	r2, [r3, #0]
   91c50:	2300      	movs	r3, #0
   91c52:	4618      	mov	r0, r3
   91c54:	46bd      	mov	sp, r7
   91c56:	bc80      	pop	{r7}
   91c58:	4770      	bx	lr
   91c5a:	bf00      	nop
   91c5c:	20072d9c 	.word	0x20072d9c

00091c60 <Cl_Timer_Create_Tick50Ms_Event>:
   91c60:	b580      	push	{r7, lr}
   91c62:	af00      	add	r7, sp, #0
   91c64:	4b0c      	ldr	r3, [pc, #48]	; (91c98 <Cl_Timer_Create_Tick50Ms_Event+0x38>)
   91c66:	4798      	blx	r3
   91c68:	4b0c      	ldr	r3, [pc, #48]	; (91c9c <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   91c6a:	781b      	ldrb	r3, [r3, #0]
   91c6c:	2b09      	cmp	r3, #9
   91c6e:	d80f      	bhi.n	91c90 <Cl_Timer_Create_Tick50Ms_Event+0x30>
   91c70:	4b0a      	ldr	r3, [pc, #40]	; (91c9c <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   91c72:	781b      	ldrb	r3, [r3, #0]
   91c74:	461a      	mov	r2, r3
   91c76:	4b09      	ldr	r3, [pc, #36]	; (91c9c <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   91c78:	4413      	add	r3, r2
   91c7a:	2238      	movs	r2, #56	; 0x38
   91c7c:	709a      	strb	r2, [r3, #2]
   91c7e:	4b07      	ldr	r3, [pc, #28]	; (91c9c <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   91c80:	2201      	movs	r2, #1
   91c82:	705a      	strb	r2, [r3, #1]
   91c84:	4b05      	ldr	r3, [pc, #20]	; (91c9c <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   91c86:	781b      	ldrb	r3, [r3, #0]
   91c88:	3301      	adds	r3, #1
   91c8a:	b2da      	uxtb	r2, r3
   91c8c:	4b03      	ldr	r3, [pc, #12]	; (91c9c <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   91c8e:	701a      	strb	r2, [r3, #0]
   91c90:	2300      	movs	r3, #0
   91c92:	4618      	mov	r0, r3
   91c94:	bd80      	pop	{r7, pc}
   91c96:	bf00      	nop
   91c98:	000831b9 	.word	0x000831b9
   91c9c:	20072d9c 	.word	0x20072d9c

00091ca0 <Cl_Timer_Create_Tick100Ms_Event>:
   91ca0:	b480      	push	{r7}
   91ca2:	af00      	add	r7, sp, #0
   91ca4:	4b0c      	ldr	r3, [pc, #48]	; (91cd8 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   91ca6:	781b      	ldrb	r3, [r3, #0]
   91ca8:	2b09      	cmp	r3, #9
   91caa:	d80f      	bhi.n	91ccc <Cl_Timer_Create_Tick100Ms_Event+0x2c>
   91cac:	4b0a      	ldr	r3, [pc, #40]	; (91cd8 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   91cae:	781b      	ldrb	r3, [r3, #0]
   91cb0:	461a      	mov	r2, r3
   91cb2:	4b09      	ldr	r3, [pc, #36]	; (91cd8 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   91cb4:	4413      	add	r3, r2
   91cb6:	2239      	movs	r2, #57	; 0x39
   91cb8:	709a      	strb	r2, [r3, #2]
   91cba:	4b07      	ldr	r3, [pc, #28]	; (91cd8 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   91cbc:	2201      	movs	r2, #1
   91cbe:	705a      	strb	r2, [r3, #1]
   91cc0:	4b05      	ldr	r3, [pc, #20]	; (91cd8 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   91cc2:	781b      	ldrb	r3, [r3, #0]
   91cc4:	3301      	adds	r3, #1
   91cc6:	b2da      	uxtb	r2, r3
   91cc8:	4b03      	ldr	r3, [pc, #12]	; (91cd8 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   91cca:	701a      	strb	r2, [r3, #0]
   91ccc:	2300      	movs	r3, #0
   91cce:	4618      	mov	r0, r3
   91cd0:	46bd      	mov	sp, r7
   91cd2:	bc80      	pop	{r7}
   91cd4:	4770      	bx	lr
   91cd6:	bf00      	nop
   91cd8:	20072d9c 	.word	0x20072d9c

00091cdc <Cl_Timer_Create_Tick500Ms_Event>:
   91cdc:	b480      	push	{r7}
   91cde:	af00      	add	r7, sp, #0
   91ce0:	4b0c      	ldr	r3, [pc, #48]	; (91d14 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   91ce2:	781b      	ldrb	r3, [r3, #0]
   91ce4:	2b09      	cmp	r3, #9
   91ce6:	d80f      	bhi.n	91d08 <Cl_Timer_Create_Tick500Ms_Event+0x2c>
   91ce8:	4b0a      	ldr	r3, [pc, #40]	; (91d14 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   91cea:	781b      	ldrb	r3, [r3, #0]
   91cec:	461a      	mov	r2, r3
   91cee:	4b09      	ldr	r3, [pc, #36]	; (91d14 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   91cf0:	4413      	add	r3, r2
   91cf2:	223a      	movs	r2, #58	; 0x3a
   91cf4:	709a      	strb	r2, [r3, #2]
   91cf6:	4b07      	ldr	r3, [pc, #28]	; (91d14 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   91cf8:	2201      	movs	r2, #1
   91cfa:	705a      	strb	r2, [r3, #1]
   91cfc:	4b05      	ldr	r3, [pc, #20]	; (91d14 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   91cfe:	781b      	ldrb	r3, [r3, #0]
   91d00:	3301      	adds	r3, #1
   91d02:	b2da      	uxtb	r2, r3
   91d04:	4b03      	ldr	r3, [pc, #12]	; (91d14 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   91d06:	701a      	strb	r2, [r3, #0]
   91d08:	2300      	movs	r3, #0
   91d0a:	4618      	mov	r0, r3
   91d0c:	46bd      	mov	sp, r7
   91d0e:	bc80      	pop	{r7}
   91d10:	4770      	bx	lr
   91d12:	bf00      	nop
   91d14:	20072d9c 	.word	0x20072d9c

00091d18 <Cl_Timer_Create_TickSec_Event>:
   91d18:	b580      	push	{r7, lr}
   91d1a:	af00      	add	r7, sp, #0
   91d1c:	4b15      	ldr	r3, [pc, #84]	; (91d74 <Cl_Timer_Create_TickSec_Event+0x5c>)
   91d1e:	781b      	ldrb	r3, [r3, #0]
   91d20:	3301      	adds	r3, #1
   91d22:	b2da      	uxtb	r2, r3
   91d24:	4b13      	ldr	r3, [pc, #76]	; (91d74 <Cl_Timer_Create_TickSec_Event+0x5c>)
   91d26:	701a      	strb	r2, [r3, #0]
   91d28:	4b13      	ldr	r3, [pc, #76]	; (91d78 <Cl_Timer_Create_TickSec_Event+0x60>)
   91d2a:	781b      	ldrb	r3, [r3, #0]
   91d2c:	2b09      	cmp	r3, #9
   91d2e:	d80f      	bhi.n	91d50 <Cl_Timer_Create_TickSec_Event+0x38>
   91d30:	4b11      	ldr	r3, [pc, #68]	; (91d78 <Cl_Timer_Create_TickSec_Event+0x60>)
   91d32:	781b      	ldrb	r3, [r3, #0]
   91d34:	461a      	mov	r2, r3
   91d36:	4b10      	ldr	r3, [pc, #64]	; (91d78 <Cl_Timer_Create_TickSec_Event+0x60>)
   91d38:	4413      	add	r3, r2
   91d3a:	223b      	movs	r2, #59	; 0x3b
   91d3c:	709a      	strb	r2, [r3, #2]
   91d3e:	4b0e      	ldr	r3, [pc, #56]	; (91d78 <Cl_Timer_Create_TickSec_Event+0x60>)
   91d40:	2201      	movs	r2, #1
   91d42:	705a      	strb	r2, [r3, #1]
   91d44:	4b0c      	ldr	r3, [pc, #48]	; (91d78 <Cl_Timer_Create_TickSec_Event+0x60>)
   91d46:	781b      	ldrb	r3, [r3, #0]
   91d48:	3301      	adds	r3, #1
   91d4a:	b2da      	uxtb	r2, r3
   91d4c:	4b0a      	ldr	r3, [pc, #40]	; (91d78 <Cl_Timer_Create_TickSec_Event+0x60>)
   91d4e:	701a      	strb	r2, [r3, #0]
   91d50:	4b08      	ldr	r3, [pc, #32]	; (91d74 <Cl_Timer_Create_TickSec_Event+0x5c>)
   91d52:	781b      	ldrb	r3, [r3, #0]
   91d54:	2b3b      	cmp	r3, #59	; 0x3b
   91d56:	d90a      	bls.n	91d6e <Cl_Timer_Create_TickSec_Event+0x56>
   91d58:	4b06      	ldr	r3, [pc, #24]	; (91d74 <Cl_Timer_Create_TickSec_Event+0x5c>)
   91d5a:	2200      	movs	r2, #0
   91d5c:	701a      	strb	r2, [r3, #0]
   91d5e:	4b07      	ldr	r3, [pc, #28]	; (91d7c <Cl_Timer_Create_TickSec_Event+0x64>)
   91d60:	4798      	blx	r3
   91d62:	4603      	mov	r3, r0
   91d64:	461a      	mov	r2, r3
   91d66:	4b06      	ldr	r3, [pc, #24]	; (91d80 <Cl_Timer_Create_TickSec_Event+0x68>)
   91d68:	701a      	strb	r2, [r3, #0]
   91d6a:	4b06      	ldr	r3, [pc, #24]	; (91d84 <Cl_Timer_Create_TickSec_Event+0x6c>)
   91d6c:	4798      	blx	r3
   91d6e:	2300      	movs	r3, #0
   91d70:	4618      	mov	r0, r3
   91d72:	bd80      	pop	{r7, pc}
   91d74:	2007267c 	.word	0x2007267c
   91d78:	20072d9c 	.word	0x20072d9c
   91d7c:	00091d89 	.word	0x00091d89
   91d80:	200731a0 	.word	0x200731a0
   91d84:	000918c5 	.word	0x000918c5

00091d88 <Cl_Timer_Create_TickMin_Event>:
   91d88:	b480      	push	{r7}
   91d8a:	af00      	add	r7, sp, #0
   91d8c:	4b0c      	ldr	r3, [pc, #48]	; (91dc0 <Cl_Timer_Create_TickMin_Event+0x38>)
   91d8e:	781b      	ldrb	r3, [r3, #0]
   91d90:	2b09      	cmp	r3, #9
   91d92:	d80f      	bhi.n	91db4 <Cl_Timer_Create_TickMin_Event+0x2c>
   91d94:	4b0a      	ldr	r3, [pc, #40]	; (91dc0 <Cl_Timer_Create_TickMin_Event+0x38>)
   91d96:	781b      	ldrb	r3, [r3, #0]
   91d98:	461a      	mov	r2, r3
   91d9a:	4b09      	ldr	r3, [pc, #36]	; (91dc0 <Cl_Timer_Create_TickMin_Event+0x38>)
   91d9c:	4413      	add	r3, r2
   91d9e:	223c      	movs	r2, #60	; 0x3c
   91da0:	709a      	strb	r2, [r3, #2]
   91da2:	4b07      	ldr	r3, [pc, #28]	; (91dc0 <Cl_Timer_Create_TickMin_Event+0x38>)
   91da4:	2201      	movs	r2, #1
   91da6:	705a      	strb	r2, [r3, #1]
   91da8:	4b05      	ldr	r3, [pc, #20]	; (91dc0 <Cl_Timer_Create_TickMin_Event+0x38>)
   91daa:	781b      	ldrb	r3, [r3, #0]
   91dac:	3301      	adds	r3, #1
   91dae:	b2da      	uxtb	r2, r3
   91db0:	4b03      	ldr	r3, [pc, #12]	; (91dc0 <Cl_Timer_Create_TickMin_Event+0x38>)
   91db2:	701a      	strb	r2, [r3, #0]
   91db4:	2300      	movs	r3, #0
   91db6:	4618      	mov	r0, r3
   91db8:	46bd      	mov	sp, r7
   91dba:	bc80      	pop	{r7}
   91dbc:	4770      	bx	lr
   91dbe:	bf00      	nop
   91dc0:	20072d9c 	.word	0x20072d9c

00091dc4 <Cl_Timer_Create_TickHour_Event>:
   91dc4:	b480      	push	{r7}
   91dc6:	af00      	add	r7, sp, #0
   91dc8:	4b0c      	ldr	r3, [pc, #48]	; (91dfc <Cl_Timer_Create_TickHour_Event+0x38>)
   91dca:	781b      	ldrb	r3, [r3, #0]
   91dcc:	2b0a      	cmp	r3, #10
   91dce:	d80f      	bhi.n	91df0 <Cl_Timer_Create_TickHour_Event+0x2c>
   91dd0:	4b0a      	ldr	r3, [pc, #40]	; (91dfc <Cl_Timer_Create_TickHour_Event+0x38>)
   91dd2:	781b      	ldrb	r3, [r3, #0]
   91dd4:	461a      	mov	r2, r3
   91dd6:	4b09      	ldr	r3, [pc, #36]	; (91dfc <Cl_Timer_Create_TickHour_Event+0x38>)
   91dd8:	4413      	add	r3, r2
   91dda:	223d      	movs	r2, #61	; 0x3d
   91ddc:	709a      	strb	r2, [r3, #2]
   91dde:	4b07      	ldr	r3, [pc, #28]	; (91dfc <Cl_Timer_Create_TickHour_Event+0x38>)
   91de0:	2201      	movs	r2, #1
   91de2:	705a      	strb	r2, [r3, #1]
   91de4:	4b05      	ldr	r3, [pc, #20]	; (91dfc <Cl_Timer_Create_TickHour_Event+0x38>)
   91de6:	781b      	ldrb	r3, [r3, #0]
   91de8:	3301      	adds	r3, #1
   91dea:	b2da      	uxtb	r2, r3
   91dec:	4b03      	ldr	r3, [pc, #12]	; (91dfc <Cl_Timer_Create_TickHour_Event+0x38>)
   91dee:	701a      	strb	r2, [r3, #0]
   91df0:	2300      	movs	r3, #0
   91df2:	4618      	mov	r0, r3
   91df4:	46bd      	mov	sp, r7
   91df6:	bc80      	pop	{r7}
   91df8:	4770      	bx	lr
   91dfa:	bf00      	nop
   91dfc:	20072d9c 	.word	0x20072d9c

00091e00 <mdelay>:
Cl_ReturnCodeType cl_memset(Cl_Uint8Type* , Cl_Uint8Type );

volatile Cl_Uint32Type g_ul_ms_ticks = 0;

static void mdelay(Cl_Uint32Type ul_dly_ticks)
{
   91e00:	b480      	push	{r7}
   91e02:	b085      	sub	sp, #20
   91e04:	af00      	add	r7, sp, #0
   91e06:	6078      	str	r0, [r7, #4]
	Cl_Uint32Type ul_cur_ticks;

	ul_cur_ticks = g_ul_ms_ticks;
   91e08:	4b07      	ldr	r3, [pc, #28]	; (91e28 <mdelay+0x28>)
   91e0a:	681b      	ldr	r3, [r3, #0]
   91e0c:	60fb      	str	r3, [r7, #12]
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   91e0e:	bf00      	nop
   91e10:	4b05      	ldr	r3, [pc, #20]	; (91e28 <mdelay+0x28>)
   91e12:	681a      	ldr	r2, [r3, #0]
   91e14:	68fb      	ldr	r3, [r7, #12]
   91e16:	1ad2      	subs	r2, r2, r3
   91e18:	687b      	ldr	r3, [r7, #4]
   91e1a:	429a      	cmp	r2, r3
   91e1c:	d3f8      	bcc.n	91e10 <mdelay+0x10>
}
   91e1e:	bf00      	nop
   91e20:	3714      	adds	r7, #20
   91e22:	46bd      	mov	sp, r7
   91e24:	bc80      	pop	{r7}
   91e26:	4770      	bx	lr
   91e28:	20072680 	.word	0x20072680

00091e2c <cl_wait>:

Cl_ReturnCodeType cl_wait(Cl_Uint32Type ul_dly_ticks)
{
   91e2c:	b580      	push	{r7, lr}
   91e2e:	b082      	sub	sp, #8
   91e30:	af00      	add	r7, sp, #0
   91e32:	6078      	str	r0, [r7, #4]
	mdelay(ul_dly_ticks);
   91e34:	6878      	ldr	r0, [r7, #4]
   91e36:	4b03      	ldr	r3, [pc, #12]	; (91e44 <cl_wait+0x18>)
   91e38:	4798      	blx	r3
	return CL_OK;
   91e3a:	2300      	movs	r3, #0
}
   91e3c:	4618      	mov	r0, r3
   91e3e:	3708      	adds	r7, #8
   91e40:	46bd      	mov	sp, r7
   91e42:	bd80      	pop	{r7, pc}
   91e44:	00091e01 	.word	0x00091e01

00091e48 <cl_systemtickcallback>:

Cl_ReturnCodeType cl_systemtickcallback(void)
{
   91e48:	b580      	push	{r7, lr}
   91e4a:	b082      	sub	sp, #8
   91e4c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_retVal;
	Cl_retVal = Cl_MilliTickcallBack();
   91e4e:	4b07      	ldr	r3, [pc, #28]	; (91e6c <cl_systemtickcallback+0x24>)
   91e50:	4798      	blx	r3
   91e52:	4603      	mov	r3, r0
   91e54:	71fb      	strb	r3, [r7, #7]
	g_ul_ms_ticks++;
   91e56:	4b06      	ldr	r3, [pc, #24]	; (91e70 <cl_systemtickcallback+0x28>)
   91e58:	681b      	ldr	r3, [r3, #0]
   91e5a:	3301      	adds	r3, #1
   91e5c:	4a04      	ldr	r2, [pc, #16]	; (91e70 <cl_systemtickcallback+0x28>)
   91e5e:	6013      	str	r3, [r2, #0]
	return  CL_OK;
   91e60:	2300      	movs	r3, #0
}
   91e62:	4618      	mov	r0, r3
   91e64:	3708      	adds	r7, #8
   91e66:	46bd      	mov	sp, r7
   91e68:	bd80      	pop	{r7, pc}
   91e6a:	bf00      	nop
   91e6c:	00091a25 	.word	0x00091a25
   91e70:	20072680 	.word	0x20072680

00091e74 <cl_memset>:


Cl_ReturnCodeType cl_memset(Cl_Uint8Type* pdata, Cl_Uint8Type datasize)
{
   91e74:	b480      	push	{r7}
   91e76:	b085      	sub	sp, #20
   91e78:	af00      	add	r7, sp, #0
   91e7a:	6078      	str	r0, [r7, #4]
   91e7c:	460b      	mov	r3, r1
   91e7e:	70fb      	strb	r3, [r7, #3]
	Cl_Uint8Type tempcnt = 0 ;
   91e80:	2300      	movs	r3, #0
   91e82:	73fb      	strb	r3, [r7, #15]
	Cl_Uint8Type* pdata1;
	
	pdata1 = (Cl_Uint8Type*)pdata;
   91e84:	687b      	ldr	r3, [r7, #4]
   91e86:	60bb      	str	r3, [r7, #8]
	
	for (tempcnt = 0 ; tempcnt < datasize ; tempcnt++)
   91e88:	2300      	movs	r3, #0
   91e8a:	73fb      	strb	r3, [r7, #15]
   91e8c:	e007      	b.n	91e9e <cl_memset+0x2a>
	{
		pdata[tempcnt] = 0;
   91e8e:	7bfb      	ldrb	r3, [r7, #15]
   91e90:	687a      	ldr	r2, [r7, #4]
   91e92:	4413      	add	r3, r2
   91e94:	2200      	movs	r2, #0
   91e96:	701a      	strb	r2, [r3, #0]
	Cl_Uint8Type tempcnt = 0 ;
	Cl_Uint8Type* pdata1;
	
	pdata1 = (Cl_Uint8Type*)pdata;
	
	for (tempcnt = 0 ; tempcnt < datasize ; tempcnt++)
   91e98:	7bfb      	ldrb	r3, [r7, #15]
   91e9a:	3301      	adds	r3, #1
   91e9c:	73fb      	strb	r3, [r7, #15]
   91e9e:	7bfa      	ldrb	r2, [r7, #15]
   91ea0:	78fb      	ldrb	r3, [r7, #3]
   91ea2:	429a      	cmp	r2, r3
   91ea4:	d3f3      	bcc.n	91e8e <cl_memset+0x1a>
	//	*pdata = 1;
	//	pdata++;
	//	*pdata1 = (Cl_Uint8Type*)0;
	//	pdata1 =  pdata1 +1;
	}
	return CL_OK;
   91ea6:	2300      	movs	r3, #0
   91ea8:	4618      	mov	r0, r3
   91eaa:	3714      	adds	r7, #20
   91eac:	46bd      	mov	sp, r7
   91eae:	bc80      	pop	{r7}
   91eb0:	4770      	bx	lr
   91eb2:	bf00      	nop

00091eb4 <cl_bp_controller>:
   91eb4:	b580      	push	{r7, lr}
   91eb6:	b084      	sub	sp, #16
   91eb8:	af00      	add	r7, sp, #0
   91eba:	4603      	mov	r3, r0
   91ebc:	6039      	str	r1, [r7, #0]
   91ebe:	71fb      	strb	r3, [r7, #7]
   91ec0:	2300      	movs	r3, #0
   91ec2:	73fb      	strb	r3, [r7, #15]
   91ec4:	2300      	movs	r3, #0
   91ec6:	73bb      	strb	r3, [r7, #14]
   91ec8:	2300      	movs	r3, #0
   91eca:	81bb      	strh	r3, [r7, #12]
   91ecc:	4b7e      	ldr	r3, [pc, #504]	; (920c8 <cl_bp_controller+0x214>)
   91ece:	781b      	ldrb	r3, [r3, #0]
   91ed0:	2b04      	cmp	r3, #4
   91ed2:	f200 80f2 	bhi.w	920ba <cl_bp_controller+0x206>
   91ed6:	a201      	add	r2, pc, #4	; (adr r2, 91edc <cl_bp_controller+0x28>)
   91ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91edc:	00091ef1 	.word	0x00091ef1
   91ee0:	00091f4d 	.word	0x00091f4d
   91ee4:	00091ff7 	.word	0x00091ff7
   91ee8:	00092049 	.word	0x00092049
   91eec:	000920bb 	.word	0x000920bb
   91ef0:	79fb      	ldrb	r3, [r7, #7]
   91ef2:	2b01      	cmp	r3, #1
   91ef4:	d002      	beq.n	91efc <cl_bp_controller+0x48>
   91ef6:	2b02      	cmp	r3, #2
   91ef8:	d00e      	beq.n	91f18 <cl_bp_controller+0x64>
   91efa:	e026      	b.n	91f4a <cl_bp_controller+0x96>
   91efc:	683b      	ldr	r3, [r7, #0]
   91efe:	4a73      	ldr	r2, [pc, #460]	; (920cc <cl_bp_controller+0x218>)
   91f00:	6013      	str	r3, [r2, #0]
   91f02:	4b72      	ldr	r3, [pc, #456]	; (920cc <cl_bp_controller+0x218>)
   91f04:	681b      	ldr	r3, [r3, #0]
   91f06:	4a72      	ldr	r2, [pc, #456]	; (920d0 <cl_bp_controller+0x21c>)
   91f08:	6013      	str	r3, [r2, #0]
   91f0a:	4b71      	ldr	r3, [pc, #452]	; (920d0 <cl_bp_controller+0x21c>)
   91f0c:	681b      	ldr	r3, [r3, #0]
   91f0e:	4619      	mov	r1, r3
   91f10:	2003      	movs	r0, #3
   91f12:	4b70      	ldr	r3, [pc, #448]	; (920d4 <cl_bp_controller+0x220>)
   91f14:	4798      	blx	r3
   91f16:	e018      	b.n	91f4a <cl_bp_controller+0x96>
   91f18:	2101      	movs	r1, #1
   91f1a:	2001      	movs	r0, #1
   91f1c:	4b6e      	ldr	r3, [pc, #440]	; (920d8 <cl_bp_controller+0x224>)
   91f1e:	4798      	blx	r3
   91f20:	4603      	mov	r3, r0
   91f22:	73fb      	strb	r3, [r7, #15]
   91f24:	2003      	movs	r0, #3
   91f26:	4b6d      	ldr	r3, [pc, #436]	; (920dc <cl_bp_controller+0x228>)
   91f28:	4798      	blx	r3
   91f2a:	4603      	mov	r3, r0
   91f2c:	73fb      	strb	r3, [r7, #15]
   91f2e:	4b6c      	ldr	r3, [pc, #432]	; (920e0 <cl_bp_controller+0x22c>)
   91f30:	4798      	blx	r3
   91f32:	463b      	mov	r3, r7
   91f34:	2200      	movs	r2, #0
   91f36:	4619      	mov	r1, r3
   91f38:	2035      	movs	r0, #53	; 0x35
   91f3a:	4b6a      	ldr	r3, [pc, #424]	; (920e4 <cl_bp_controller+0x230>)
   91f3c:	4798      	blx	r3
   91f3e:	4603      	mov	r3, r0
   91f40:	73fb      	strb	r3, [r7, #15]
   91f42:	4b61      	ldr	r3, [pc, #388]	; (920c8 <cl_bp_controller+0x214>)
   91f44:	2201      	movs	r2, #1
   91f46:	701a      	strb	r2, [r3, #0]
   91f48:	bf00      	nop
   91f4a:	e0b7      	b.n	920bc <cl_bp_controller+0x208>
   91f4c:	79fb      	ldrb	r3, [r7, #7]
   91f4e:	3b01      	subs	r3, #1
   91f50:	2b06      	cmp	r3, #6
   91f52:	d84e      	bhi.n	91ff2 <cl_bp_controller+0x13e>
   91f54:	a201      	add	r2, pc, #4	; (adr r2, 91f5c <cl_bp_controller+0xa8>)
   91f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91f5a:	bf00      	nop
   91f5c:	00091fab 	.word	0x00091fab
   91f60:	00091f79 	.word	0x00091f79
   91f64:	00091ff3 	.word	0x00091ff3
   91f68:	00091fbd 	.word	0x00091fbd
   91f6c:	00091feb 	.word	0x00091feb
   91f70:	00091ff3 	.word	0x00091ff3
   91f74:	00091ff3 	.word	0x00091ff3
   91f78:	2003      	movs	r0, #3
   91f7a:	4b58      	ldr	r3, [pc, #352]	; (920dc <cl_bp_controller+0x228>)
   91f7c:	4798      	blx	r3
   91f7e:	4603      	mov	r3, r0
   91f80:	73fb      	strb	r3, [r7, #15]
   91f82:	2101      	movs	r1, #1
   91f84:	2001      	movs	r0, #1
   91f86:	4b54      	ldr	r3, [pc, #336]	; (920d8 <cl_bp_controller+0x224>)
   91f88:	4798      	blx	r3
   91f8a:	4603      	mov	r3, r0
   91f8c:	73fb      	strb	r3, [r7, #15]
   91f8e:	4b54      	ldr	r3, [pc, #336]	; (920e0 <cl_bp_controller+0x22c>)
   91f90:	4798      	blx	r3
   91f92:	463b      	mov	r3, r7
   91f94:	2200      	movs	r2, #0
   91f96:	4619      	mov	r1, r3
   91f98:	2035      	movs	r0, #53	; 0x35
   91f9a:	4b52      	ldr	r3, [pc, #328]	; (920e4 <cl_bp_controller+0x230>)
   91f9c:	4798      	blx	r3
   91f9e:	4603      	mov	r3, r0
   91fa0:	73fb      	strb	r3, [r7, #15]
   91fa2:	4b49      	ldr	r3, [pc, #292]	; (920c8 <cl_bp_controller+0x214>)
   91fa4:	2201      	movs	r2, #1
   91fa6:	701a      	strb	r2, [r3, #0]
   91fa8:	e024      	b.n	91ff4 <cl_bp_controller+0x140>
   91faa:	683b      	ldr	r3, [r7, #0]
   91fac:	4619      	mov	r1, r3
   91fae:	2003      	movs	r0, #3
   91fb0:	4b48      	ldr	r3, [pc, #288]	; (920d4 <cl_bp_controller+0x220>)
   91fb2:	4798      	blx	r3
   91fb4:	4b44      	ldr	r3, [pc, #272]	; (920c8 <cl_bp_controller+0x214>)
   91fb6:	2201      	movs	r2, #1
   91fb8:	701a      	strb	r2, [r3, #0]
   91fba:	e01b      	b.n	91ff4 <cl_bp_controller+0x140>
   91fbc:	2003      	movs	r0, #3
   91fbe:	4b4a      	ldr	r3, [pc, #296]	; (920e8 <cl_bp_controller+0x234>)
   91fc0:	4798      	blx	r3
   91fc2:	4603      	mov	r3, r0
   91fc4:	73fb      	strb	r3, [r7, #15]
   91fc6:	4b46      	ldr	r3, [pc, #280]	; (920e0 <cl_bp_controller+0x22c>)
   91fc8:	4798      	blx	r3
   91fca:	463b      	mov	r3, r7
   91fcc:	2200      	movs	r2, #0
   91fce:	4619      	mov	r1, r3
   91fd0:	2036      	movs	r0, #54	; 0x36
   91fd2:	4b44      	ldr	r3, [pc, #272]	; (920e4 <cl_bp_controller+0x230>)
   91fd4:	4798      	blx	r3
   91fd6:	4603      	mov	r3, r0
   91fd8:	73fb      	strb	r3, [r7, #15]
   91fda:	4b44      	ldr	r3, [pc, #272]	; (920ec <cl_bp_controller+0x238>)
   91fdc:	4798      	blx	r3
   91fde:	4603      	mov	r3, r0
   91fe0:	73fb      	strb	r3, [r7, #15]
   91fe2:	4b39      	ldr	r3, [pc, #228]	; (920c8 <cl_bp_controller+0x214>)
   91fe4:	2202      	movs	r2, #2
   91fe6:	701a      	strb	r2, [r3, #0]
   91fe8:	e004      	b.n	91ff4 <cl_bp_controller+0x140>
   91fea:	4b37      	ldr	r3, [pc, #220]	; (920c8 <cl_bp_controller+0x214>)
   91fec:	2200      	movs	r2, #0
   91fee:	701a      	strb	r2, [r3, #0]
   91ff0:	e000      	b.n	91ff4 <cl_bp_controller+0x140>
   91ff2:	bf00      	nop
   91ff4:	e062      	b.n	920bc <cl_bp_controller+0x208>
   91ff6:	79fb      	ldrb	r3, [r7, #7]
   91ff8:	2b01      	cmp	r3, #1
   91ffa:	d002      	beq.n	92002 <cl_bp_controller+0x14e>
   91ffc:	2b02      	cmp	r3, #2
   91ffe:	d009      	beq.n	92014 <cl_bp_controller+0x160>
   92000:	e021      	b.n	92046 <cl_bp_controller+0x192>
   92002:	683b      	ldr	r3, [r7, #0]
   92004:	4a31      	ldr	r2, [pc, #196]	; (920cc <cl_bp_controller+0x218>)
   92006:	6013      	str	r3, [r2, #0]
   92008:	683b      	ldr	r3, [r7, #0]
   9200a:	4619      	mov	r1, r3
   9200c:	2003      	movs	r0, #3
   9200e:	4b31      	ldr	r3, [pc, #196]	; (920d4 <cl_bp_controller+0x220>)
   92010:	4798      	blx	r3
   92012:	e018      	b.n	92046 <cl_bp_controller+0x192>
   92014:	2003      	movs	r0, #3
   92016:	4b31      	ldr	r3, [pc, #196]	; (920dc <cl_bp_controller+0x228>)
   92018:	4798      	blx	r3
   9201a:	4603      	mov	r3, r0
   9201c:	73fb      	strb	r3, [r7, #15]
   9201e:	2101      	movs	r1, #1
   92020:	2001      	movs	r0, #1
   92022:	4b2d      	ldr	r3, [pc, #180]	; (920d8 <cl_bp_controller+0x224>)
   92024:	4798      	blx	r3
   92026:	4603      	mov	r3, r0
   92028:	73fb      	strb	r3, [r7, #15]
   9202a:	4b2d      	ldr	r3, [pc, #180]	; (920e0 <cl_bp_controller+0x22c>)
   9202c:	4798      	blx	r3
   9202e:	463b      	mov	r3, r7
   92030:	2200      	movs	r2, #0
   92032:	4619      	mov	r1, r3
   92034:	2035      	movs	r0, #53	; 0x35
   92036:	4b2b      	ldr	r3, [pc, #172]	; (920e4 <cl_bp_controller+0x230>)
   92038:	4798      	blx	r3
   9203a:	4603      	mov	r3, r0
   9203c:	73fb      	strb	r3, [r7, #15]
   9203e:	4b22      	ldr	r3, [pc, #136]	; (920c8 <cl_bp_controller+0x214>)
   92040:	2201      	movs	r2, #1
   92042:	701a      	strb	r2, [r3, #0]
   92044:	bf00      	nop
   92046:	e039      	b.n	920bc <cl_bp_controller+0x208>
   92048:	79fb      	ldrb	r3, [r7, #7]
   9204a:	2b02      	cmp	r3, #2
   9204c:	d008      	beq.n	92060 <cl_bp_controller+0x1ac>
   9204e:	2b04      	cmp	r3, #4
   92050:	d01f      	beq.n	92092 <cl_bp_controller+0x1de>
   92052:	2b01      	cmp	r3, #1
   92054:	d000      	beq.n	92058 <cl_bp_controller+0x1a4>
   92056:	e02f      	b.n	920b8 <cl_bp_controller+0x204>
   92058:	683b      	ldr	r3, [r7, #0]
   9205a:	4a1c      	ldr	r2, [pc, #112]	; (920cc <cl_bp_controller+0x218>)
   9205c:	6013      	str	r3, [r2, #0]
   9205e:	e02b      	b.n	920b8 <cl_bp_controller+0x204>
   92060:	2003      	movs	r0, #3
   92062:	4b1e      	ldr	r3, [pc, #120]	; (920dc <cl_bp_controller+0x228>)
   92064:	4798      	blx	r3
   92066:	4603      	mov	r3, r0
   92068:	73fb      	strb	r3, [r7, #15]
   9206a:	2101      	movs	r1, #1
   9206c:	2001      	movs	r0, #1
   9206e:	4b1a      	ldr	r3, [pc, #104]	; (920d8 <cl_bp_controller+0x224>)
   92070:	4798      	blx	r3
   92072:	4603      	mov	r3, r0
   92074:	73fb      	strb	r3, [r7, #15]
   92076:	4b1a      	ldr	r3, [pc, #104]	; (920e0 <cl_bp_controller+0x22c>)
   92078:	4798      	blx	r3
   9207a:	463b      	mov	r3, r7
   9207c:	2200      	movs	r2, #0
   9207e:	4619      	mov	r1, r3
   92080:	2035      	movs	r0, #53	; 0x35
   92082:	4b18      	ldr	r3, [pc, #96]	; (920e4 <cl_bp_controller+0x230>)
   92084:	4798      	blx	r3
   92086:	4603      	mov	r3, r0
   92088:	73fb      	strb	r3, [r7, #15]
   9208a:	4b0f      	ldr	r3, [pc, #60]	; (920c8 <cl_bp_controller+0x214>)
   9208c:	2201      	movs	r2, #1
   9208e:	701a      	strb	r2, [r3, #0]
   92090:	e012      	b.n	920b8 <cl_bp_controller+0x204>
   92092:	2003      	movs	r0, #3
   92094:	4b14      	ldr	r3, [pc, #80]	; (920e8 <cl_bp_controller+0x234>)
   92096:	4798      	blx	r3
   92098:	4603      	mov	r3, r0
   9209a:	73fb      	strb	r3, [r7, #15]
   9209c:	4b10      	ldr	r3, [pc, #64]	; (920e0 <cl_bp_controller+0x22c>)
   9209e:	4798      	blx	r3
   920a0:	4b09      	ldr	r3, [pc, #36]	; (920c8 <cl_bp_controller+0x214>)
   920a2:	2202      	movs	r2, #2
   920a4:	701a      	strb	r2, [r3, #0]
   920a6:	463b      	mov	r3, r7
   920a8:	2200      	movs	r2, #0
   920aa:	4619      	mov	r1, r3
   920ac:	2036      	movs	r0, #54	; 0x36
   920ae:	4b0d      	ldr	r3, [pc, #52]	; (920e4 <cl_bp_controller+0x230>)
   920b0:	4798      	blx	r3
   920b2:	4603      	mov	r3, r0
   920b4:	73fb      	strb	r3, [r7, #15]
   920b6:	bf00      	nop
   920b8:	e000      	b.n	920bc <cl_bp_controller+0x208>
   920ba:	bf00      	nop
   920bc:	2300      	movs	r3, #0
   920be:	4618      	mov	r0, r3
   920c0:	3710      	adds	r7, #16
   920c2:	46bd      	mov	sp, r7
   920c4:	bd80      	pop	{r7, pc}
   920c6:	bf00      	nop
   920c8:	20072684 	.word	0x20072684
   920cc:	20072688 	.word	0x20072688
   920d0:	200709f0 	.word	0x200709f0
   920d4:	00097a25 	.word	0x00097a25
   920d8:	00082efd 	.word	0x00082efd
   920dc:	0009790d 	.word	0x0009790d
   920e0:	000920f1 	.word	0x000920f1
   920e4:	00099729 	.word	0x00099729
   920e8:	00097949 	.word	0x00097949
   920ec:	00092109 	.word	0x00092109

000920f0 <cl_bp_pumpFeedback_start>:
   920f0:	b480      	push	{r7}
   920f2:	af00      	add	r7, sp, #0
   920f4:	4b03      	ldr	r3, [pc, #12]	; (92104 <cl_bp_pumpFeedback_start+0x14>)
   920f6:	2201      	movs	r2, #1
   920f8:	701a      	strb	r2, [r3, #0]
   920fa:	2300      	movs	r3, #0
   920fc:	4618      	mov	r0, r3
   920fe:	46bd      	mov	sp, r7
   92100:	bc80      	pop	{r7}
   92102:	4770      	bx	lr
   92104:	2007268e 	.word	0x2007268e

00092108 <cl_bp_pumpFeedback_stop>:
   92108:	b480      	push	{r7}
   9210a:	af00      	add	r7, sp, #0
   9210c:	2300      	movs	r3, #0
   9210e:	4618      	mov	r0, r3
   92110:	46bd      	mov	sp, r7
   92112:	bc80      	pop	{r7}
   92114:	4770      	bx	lr
   92116:	bf00      	nop

00092118 <cl_bp_pumpFeedback_timer>:
   92118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   9211a:	af00      	add	r7, sp, #0
   9211c:	4b64      	ldr	r3, [pc, #400]	; (922b0 <cl_bp_pumpFeedback_timer+0x198>)
   9211e:	781b      	ldrb	r3, [r3, #0]
   92120:	2b00      	cmp	r3, #0
   92122:	f000 80b9 	beq.w	92298 <cl_bp_pumpFeedback_timer+0x180>
   92126:	4963      	ldr	r1, [pc, #396]	; (922b4 <cl_bp_pumpFeedback_timer+0x19c>)
   92128:	201c      	movs	r0, #28
   9212a:	4b63      	ldr	r3, [pc, #396]	; (922b8 <cl_bp_pumpFeedback_timer+0x1a0>)
   9212c:	4798      	blx	r3
   9212e:	4b63      	ldr	r3, [pc, #396]	; (922bc <cl_bp_pumpFeedback_timer+0x1a4>)
   92130:	881b      	ldrh	r3, [r3, #0]
   92132:	3301      	adds	r3, #1
   92134:	b29a      	uxth	r2, r3
   92136:	4b61      	ldr	r3, [pc, #388]	; (922bc <cl_bp_pumpFeedback_timer+0x1a4>)
   92138:	801a      	strh	r2, [r3, #0]
   9213a:	4b60      	ldr	r3, [pc, #384]	; (922bc <cl_bp_pumpFeedback_timer+0x1a4>)
   9213c:	881b      	ldrh	r3, [r3, #0]
   9213e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   92142:	d903      	bls.n	9214c <cl_bp_pumpFeedback_timer+0x34>
   92144:	2101      	movs	r1, #1
   92146:	2037      	movs	r0, #55	; 0x37
   92148:	4b5d      	ldr	r3, [pc, #372]	; (922c0 <cl_bp_pumpFeedback_timer+0x1a8>)
   9214a:	4798      	blx	r3
   9214c:	4b58      	ldr	r3, [pc, #352]	; (922b0 <cl_bp_pumpFeedback_timer+0x198>)
   9214e:	781b      	ldrb	r3, [r3, #0]
   92150:	2b01      	cmp	r3, #1
   92152:	d106      	bne.n	92162 <cl_bp_pumpFeedback_timer+0x4a>
   92154:	4b5b      	ldr	r3, [pc, #364]	; (922c4 <cl_bp_pumpFeedback_timer+0x1ac>)
   92156:	881b      	ldrh	r3, [r3, #0]
   92158:	2b02      	cmp	r3, #2
   9215a:	d902      	bls.n	92162 <cl_bp_pumpFeedback_timer+0x4a>
   9215c:	4b54      	ldr	r3, [pc, #336]	; (922b0 <cl_bp_pumpFeedback_timer+0x198>)
   9215e:	2202      	movs	r2, #2
   92160:	701a      	strb	r2, [r3, #0]
   92162:	4b59      	ldr	r3, [pc, #356]	; (922c8 <cl_bp_pumpFeedback_timer+0x1b0>)
   92164:	781b      	ldrb	r3, [r3, #0]
   92166:	f083 0301 	eor.w	r3, r3, #1
   9216a:	b2db      	uxtb	r3, r3
   9216c:	2b00      	cmp	r3, #0
   9216e:	d012      	beq.n	92196 <cl_bp_pumpFeedback_timer+0x7e>
   92170:	4b50      	ldr	r3, [pc, #320]	; (922b4 <cl_bp_pumpFeedback_timer+0x19c>)
   92172:	881b      	ldrh	r3, [r3, #0]
   92174:	2b00      	cmp	r3, #0
   92176:	f040 808b 	bne.w	92290 <cl_bp_pumpFeedback_timer+0x178>
   9217a:	4b54      	ldr	r3, [pc, #336]	; (922cc <cl_bp_pumpFeedback_timer+0x1b4>)
   9217c:	881a      	ldrh	r2, [r3, #0]
   9217e:	4b4d      	ldr	r3, [pc, #308]	; (922b4 <cl_bp_pumpFeedback_timer+0x19c>)
   92180:	881b      	ldrh	r3, [r3, #0]
   92182:	429a      	cmp	r2, r3
   92184:	f000 8084 	beq.w	92290 <cl_bp_pumpFeedback_timer+0x178>
   92188:	4b4f      	ldr	r3, [pc, #316]	; (922c8 <cl_bp_pumpFeedback_timer+0x1b0>)
   9218a:	2201      	movs	r2, #1
   9218c:	701a      	strb	r2, [r3, #0]
   9218e:	4b4b      	ldr	r3, [pc, #300]	; (922bc <cl_bp_pumpFeedback_timer+0x1a4>)
   92190:	2200      	movs	r2, #0
   92192:	801a      	strh	r2, [r3, #0]
   92194:	e07c      	b.n	92290 <cl_bp_pumpFeedback_timer+0x178>
   92196:	4b47      	ldr	r3, [pc, #284]	; (922b4 <cl_bp_pumpFeedback_timer+0x19c>)
   92198:	881b      	ldrh	r3, [r3, #0]
   9219a:	2b00      	cmp	r3, #0
   9219c:	d178      	bne.n	92290 <cl_bp_pumpFeedback_timer+0x178>
   9219e:	4b4b      	ldr	r3, [pc, #300]	; (922cc <cl_bp_pumpFeedback_timer+0x1b4>)
   921a0:	881a      	ldrh	r2, [r3, #0]
   921a2:	4b44      	ldr	r3, [pc, #272]	; (922b4 <cl_bp_pumpFeedback_timer+0x19c>)
   921a4:	881b      	ldrh	r3, [r3, #0]
   921a6:	429a      	cmp	r2, r3
   921a8:	d072      	beq.n	92290 <cl_bp_pumpFeedback_timer+0x178>
   921aa:	4b47      	ldr	r3, [pc, #284]	; (922c8 <cl_bp_pumpFeedback_timer+0x1b0>)
   921ac:	2201      	movs	r2, #1
   921ae:	701a      	strb	r2, [r3, #0]
   921b0:	4b44      	ldr	r3, [pc, #272]	; (922c4 <cl_bp_pumpFeedback_timer+0x1ac>)
   921b2:	881b      	ldrh	r3, [r3, #0]
   921b4:	3301      	adds	r3, #1
   921b6:	b29a      	uxth	r2, r3
   921b8:	4b42      	ldr	r3, [pc, #264]	; (922c4 <cl_bp_pumpFeedback_timer+0x1ac>)
   921ba:	801a      	strh	r2, [r3, #0]
   921bc:	4b3f      	ldr	r3, [pc, #252]	; (922bc <cl_bp_pumpFeedback_timer+0x1a4>)
   921be:	881b      	ldrh	r3, [r3, #0]
   921c0:	461a      	mov	r2, r3
   921c2:	0092      	lsls	r2, r2, #2
   921c4:	4413      	add	r3, r2
   921c6:	461a      	mov	r2, r3
   921c8:	0091      	lsls	r1, r2, #2
   921ca:	461a      	mov	r2, r3
   921cc:	460b      	mov	r3, r1
   921ce:	4413      	add	r3, r2
   921d0:	009b      	lsls	r3, r3, #2
   921d2:	b29a      	uxth	r2, r3
   921d4:	4b3e      	ldr	r3, [pc, #248]	; (922d0 <cl_bp_pumpFeedback_timer+0x1b8>)
   921d6:	801a      	strh	r2, [r3, #0]
   921d8:	4b35      	ldr	r3, [pc, #212]	; (922b0 <cl_bp_pumpFeedback_timer+0x198>)
   921da:	781b      	ldrb	r3, [r3, #0]
   921dc:	2b01      	cmp	r3, #1
   921de:	d04a      	beq.n	92276 <cl_bp_pumpFeedback_timer+0x15e>
   921e0:	4b3b      	ldr	r3, [pc, #236]	; (922d0 <cl_bp_pumpFeedback_timer+0x1b8>)
   921e2:	881b      	ldrh	r3, [r3, #0]
   921e4:	461a      	mov	r2, r3
   921e6:	4b3b      	ldr	r3, [pc, #236]	; (922d4 <cl_bp_pumpFeedback_timer+0x1bc>)
   921e8:	4610      	mov	r0, r2
   921ea:	4798      	blx	r3
   921ec:	4605      	mov	r5, r0
   921ee:	460e      	mov	r6, r1
   921f0:	4b39      	ldr	r3, [pc, #228]	; (922d8 <cl_bp_pumpFeedback_timer+0x1c0>)
   921f2:	881b      	ldrh	r3, [r3, #0]
   921f4:	461a      	mov	r2, r3
   921f6:	4b37      	ldr	r3, [pc, #220]	; (922d4 <cl_bp_pumpFeedback_timer+0x1bc>)
   921f8:	4610      	mov	r0, r2
   921fa:	4798      	blx	r3
   921fc:	4c37      	ldr	r4, [pc, #220]	; (922dc <cl_bp_pumpFeedback_timer+0x1c4>)
   921fe:	a328      	add	r3, pc, #160	; (adr r3, 922a0 <cl_bp_pumpFeedback_timer+0x188>)
   92200:	e9d3 2300 	ldrd	r2, r3, [r3]
   92204:	47a0      	blx	r4
   92206:	4603      	mov	r3, r0
   92208:	460c      	mov	r4, r1
   9220a:	461a      	mov	r2, r3
   9220c:	4623      	mov	r3, r4
   9220e:	4c34      	ldr	r4, [pc, #208]	; (922e0 <cl_bp_pumpFeedback_timer+0x1c8>)
   92210:	4628      	mov	r0, r5
   92212:	4631      	mov	r1, r6
   92214:	47a0      	blx	r4
   92216:	4603      	mov	r3, r0
   92218:	2b00      	cmp	r3, #0
   9221a:	d105      	bne.n	92228 <cl_bp_pumpFeedback_timer+0x110>
   9221c:	4b2c      	ldr	r3, [pc, #176]	; (922d0 <cl_bp_pumpFeedback_timer+0x1b8>)
   9221e:	881b      	ldrh	r3, [r3, #0]
   92220:	f640 32b8 	movw	r2, #3000	; 0xbb8
   92224:	4293      	cmp	r3, r2
   92226:	d904      	bls.n	92232 <cl_bp_pumpFeedback_timer+0x11a>
   92228:	2101      	movs	r1, #1
   9222a:	2037      	movs	r0, #55	; 0x37
   9222c:	4b24      	ldr	r3, [pc, #144]	; (922c0 <cl_bp_pumpFeedback_timer+0x1a8>)
   9222e:	4798      	blx	r3
   92230:	e021      	b.n	92276 <cl_bp_pumpFeedback_timer+0x15e>
   92232:	4b27      	ldr	r3, [pc, #156]	; (922d0 <cl_bp_pumpFeedback_timer+0x1b8>)
   92234:	881b      	ldrh	r3, [r3, #0]
   92236:	461a      	mov	r2, r3
   92238:	4b26      	ldr	r3, [pc, #152]	; (922d4 <cl_bp_pumpFeedback_timer+0x1bc>)
   9223a:	4610      	mov	r0, r2
   9223c:	4798      	blx	r3
   9223e:	4605      	mov	r5, r0
   92240:	460e      	mov	r6, r1
   92242:	4b25      	ldr	r3, [pc, #148]	; (922d8 <cl_bp_pumpFeedback_timer+0x1c0>)
   92244:	881b      	ldrh	r3, [r3, #0]
   92246:	461a      	mov	r2, r3
   92248:	4b22      	ldr	r3, [pc, #136]	; (922d4 <cl_bp_pumpFeedback_timer+0x1bc>)
   9224a:	4610      	mov	r0, r2
   9224c:	4798      	blx	r3
   9224e:	4c23      	ldr	r4, [pc, #140]	; (922dc <cl_bp_pumpFeedback_timer+0x1c4>)
   92250:	a315      	add	r3, pc, #84	; (adr r3, 922a8 <cl_bp_pumpFeedback_timer+0x190>)
   92252:	e9d3 2300 	ldrd	r2, r3, [r3]
   92256:	47a0      	blx	r4
   92258:	4603      	mov	r3, r0
   9225a:	460c      	mov	r4, r1
   9225c:	461a      	mov	r2, r3
   9225e:	4623      	mov	r3, r4
   92260:	4c20      	ldr	r4, [pc, #128]	; (922e4 <cl_bp_pumpFeedback_timer+0x1cc>)
   92262:	4628      	mov	r0, r5
   92264:	4631      	mov	r1, r6
   92266:	47a0      	blx	r4
   92268:	4603      	mov	r3, r0
   9226a:	2b00      	cmp	r3, #0
   9226c:	d003      	beq.n	92276 <cl_bp_pumpFeedback_timer+0x15e>
   9226e:	2101      	movs	r1, #1
   92270:	2036      	movs	r0, #54	; 0x36
   92272:	4b13      	ldr	r3, [pc, #76]	; (922c0 <cl_bp_pumpFeedback_timer+0x1a8>)
   92274:	4798      	blx	r3
   92276:	4b16      	ldr	r3, [pc, #88]	; (922d0 <cl_bp_pumpFeedback_timer+0x1b8>)
   92278:	881b      	ldrh	r3, [r3, #0]
   9227a:	461a      	mov	r2, r3
   9227c:	f64e 2360 	movw	r3, #60000	; 0xea60
   92280:	fb93 f3f2 	sdiv	r3, r3, r2
   92284:	b29a      	uxth	r2, r3
   92286:	4b18      	ldr	r3, [pc, #96]	; (922e8 <cl_bp_pumpFeedback_timer+0x1d0>)
   92288:	801a      	strh	r2, [r3, #0]
   9228a:	4b0c      	ldr	r3, [pc, #48]	; (922bc <cl_bp_pumpFeedback_timer+0x1a4>)
   9228c:	2200      	movs	r2, #0
   9228e:	801a      	strh	r2, [r3, #0]
   92290:	4b08      	ldr	r3, [pc, #32]	; (922b4 <cl_bp_pumpFeedback_timer+0x19c>)
   92292:	881a      	ldrh	r2, [r3, #0]
   92294:	4b0d      	ldr	r3, [pc, #52]	; (922cc <cl_bp_pumpFeedback_timer+0x1b4>)
   92296:	801a      	strh	r2, [r3, #0]
   92298:	2300      	movs	r3, #0
   9229a:	4618      	mov	r0, r3
   9229c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   9229e:	bf00      	nop
   922a0:	c28f5c29 	.word	0xc28f5c29
   922a4:	3ff028f5 	.word	0x3ff028f5
   922a8:	7ae147ae 	.word	0x7ae147ae
   922ac:	3fefae14 	.word	0x3fefae14
   922b0:	2007268e 	.word	0x2007268e
   922b4:	200709f4 	.word	0x200709f4
   922b8:	0008d6b1 	.word	0x0008d6b1
   922bc:	20072690 	.word	0x20072690
   922c0:	000830a5 	.word	0x000830a5
   922c4:	20072696 	.word	0x20072696
   922c8:	20072698 	.word	0x20072698
   922cc:	200709f6 	.word	0x200709f6
   922d0:	20072692 	.word	0x20072692
   922d4:	000a34c9 	.word	0x000a34c9
   922d8:	2007268c 	.word	0x2007268c
   922dc:	000a3595 	.word	0x000a3595
   922e0:	000a3ab5 	.word	0x000a3ab5
   922e4:	000a3a79 	.word	0x000a3a79
   922e8:	20072694 	.word	0x20072694

000922ec <cl_deaeration_controller>:
   922ec:	b580      	push	{r7, lr}
   922ee:	b084      	sub	sp, #16
   922f0:	af00      	add	r7, sp, #0
   922f2:	4603      	mov	r3, r0
   922f4:	71fb      	strb	r3, [r7, #7]
   922f6:	2300      	movs	r3, #0
   922f8:	73fb      	strb	r3, [r7, #15]
   922fa:	4b28      	ldr	r3, [pc, #160]	; (9239c <cl_deaeration_controller+0xb0>)
   922fc:	781b      	ldrb	r3, [r3, #0]
   922fe:	2b01      	cmp	r3, #1
   92300:	d00d      	beq.n	9231e <cl_deaeration_controller+0x32>
   92302:	2b02      	cmp	r3, #2
   92304:	d02a      	beq.n	9235c <cl_deaeration_controller+0x70>
   92306:	2b00      	cmp	r3, #0
   92308:	d000      	beq.n	9230c <cl_deaeration_controller+0x20>
   9230a:	e042      	b.n	92392 <cl_deaeration_controller+0xa6>
   9230c:	79fb      	ldrb	r3, [r7, #7]
   9230e:	2b00      	cmp	r3, #0
   92310:	d000      	beq.n	92314 <cl_deaeration_controller+0x28>
   92312:	e003      	b.n	9231c <cl_deaeration_controller+0x30>
   92314:	4b21      	ldr	r3, [pc, #132]	; (9239c <cl_deaeration_controller+0xb0>)
   92316:	2201      	movs	r2, #1
   92318:	701a      	strb	r2, [r3, #0]
   9231a:	bf00      	nop
   9231c:	e039      	b.n	92392 <cl_deaeration_controller+0xa6>
   9231e:	79fb      	ldrb	r3, [r7, #7]
   92320:	2b01      	cmp	r3, #1
   92322:	d002      	beq.n	9232a <cl_deaeration_controller+0x3e>
   92324:	2b02      	cmp	r3, #2
   92326:	d004      	beq.n	92332 <cl_deaeration_controller+0x46>
   92328:	e017      	b.n	9235a <cl_deaeration_controller+0x6e>
   9232a:	4b1c      	ldr	r3, [pc, #112]	; (9239c <cl_deaeration_controller+0xb0>)
   9232c:	2200      	movs	r2, #0
   9232e:	701a      	strb	r2, [r3, #0]
   92330:	e013      	b.n	9235a <cl_deaeration_controller+0x6e>
   92332:	f107 030c 	add.w	r3, r7, #12
   92336:	4619      	mov	r1, r3
   92338:	200a      	movs	r0, #10
   9233a:	4b19      	ldr	r3, [pc, #100]	; (923a0 <cl_deaeration_controller+0xb4>)
   9233c:	4798      	blx	r3
   9233e:	89bb      	ldrh	r3, [r7, #12]
   92340:	2b09      	cmp	r3, #9
   92342:	d806      	bhi.n	92352 <cl_deaeration_controller+0x66>
   92344:	2013      	movs	r0, #19
   92346:	4b17      	ldr	r3, [pc, #92]	; (923a4 <cl_deaeration_controller+0xb8>)
   92348:	4798      	blx	r3
   9234a:	4b14      	ldr	r3, [pc, #80]	; (9239c <cl_deaeration_controller+0xb0>)
   9234c:	2202      	movs	r2, #2
   9234e:	701a      	strb	r2, [r3, #0]
   92350:	e002      	b.n	92358 <cl_deaeration_controller+0x6c>
   92352:	2013      	movs	r0, #19
   92354:	4b14      	ldr	r3, [pc, #80]	; (923a8 <cl_deaeration_controller+0xbc>)
   92356:	4798      	blx	r3
   92358:	bf00      	nop
   9235a:	e01a      	b.n	92392 <cl_deaeration_controller+0xa6>
   9235c:	79fb      	ldrb	r3, [r7, #7]
   9235e:	2b01      	cmp	r3, #1
   92360:	d002      	beq.n	92368 <cl_deaeration_controller+0x7c>
   92362:	2b03      	cmp	r3, #3
   92364:	d005      	beq.n	92372 <cl_deaeration_controller+0x86>
   92366:	e013      	b.n	92390 <cl_deaeration_controller+0xa4>
   92368:	4b0c      	ldr	r3, [pc, #48]	; (9239c <cl_deaeration_controller+0xb0>)
   9236a:	2200      	movs	r2, #0
   9236c:	701a      	strb	r2, [r3, #0]
   9236e:	bf00      	nop
   92370:	e00e      	b.n	92390 <cl_deaeration_controller+0xa4>
   92372:	f107 030c 	add.w	r3, r7, #12
   92376:	4619      	mov	r1, r3
   92378:	200a      	movs	r0, #10
   9237a:	4b09      	ldr	r3, [pc, #36]	; (923a0 <cl_deaeration_controller+0xb4>)
   9237c:	4798      	blx	r3
   9237e:	89bb      	ldrh	r3, [r7, #12]
   92380:	2b05      	cmp	r3, #5
   92382:	d905      	bls.n	92390 <cl_deaeration_controller+0xa4>
   92384:	2013      	movs	r0, #19
   92386:	4b08      	ldr	r3, [pc, #32]	; (923a8 <cl_deaeration_controller+0xbc>)
   92388:	4798      	blx	r3
   9238a:	4b04      	ldr	r3, [pc, #16]	; (9239c <cl_deaeration_controller+0xb0>)
   9238c:	2201      	movs	r2, #1
   9238e:	701a      	strb	r2, [r3, #0]
   92390:	bf00      	nop
   92392:	2300      	movs	r3, #0
   92394:	4618      	mov	r0, r3
   92396:	3710      	adds	r7, #16
   92398:	46bd      	mov	sp, r7
   9239a:	bd80      	pop	{r7, pc}
   9239c:	20072699 	.word	0x20072699
   923a0:	0008d6b1 	.word	0x0008d6b1
   923a4:	000979ad 	.word	0x000979ad
   923a8:	000979cd 	.word	0x000979cd

000923ac <cl_flow_switchcontroller>:
   923ac:	b580      	push	{r7, lr}
   923ae:	b084      	sub	sp, #16
   923b0:	af00      	add	r7, sp, #0
   923b2:	4603      	mov	r3, r0
   923b4:	71fb      	strb	r3, [r7, #7]
   923b6:	4b74      	ldr	r3, [pc, #464]	; (92588 <cl_flow_switchcontroller+0x1dc>)
   923b8:	781b      	ldrb	r3, [r3, #0]
   923ba:	2b03      	cmp	r3, #3
   923bc:	f200 80de 	bhi.w	9257c <cl_flow_switchcontroller+0x1d0>
   923c0:	a201      	add	r2, pc, #4	; (adr r2, 923c8 <cl_flow_switchcontroller+0x1c>)
   923c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   923c6:	bf00      	nop
   923c8:	000924eb 	.word	0x000924eb
   923cc:	000924ff 	.word	0x000924ff
   923d0:	000923d9 	.word	0x000923d9
   923d4:	00092569 	.word	0x00092569
   923d8:	79fb      	ldrb	r3, [r7, #7]
   923da:	3b01      	subs	r3, #1
   923dc:	2b05      	cmp	r3, #5
   923de:	d87e      	bhi.n	924de <cl_flow_switchcontroller+0x132>
   923e0:	a201      	add	r2, pc, #4	; (adr r2, 923e8 <cl_flow_switchcontroller+0x3c>)
   923e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   923e6:	bf00      	nop
   923e8:	00092401 	.word	0x00092401
   923ec:	00092409 	.word	0x00092409
   923f0:	00092421 	.word	0x00092421
   923f4:	000924df 	.word	0x000924df
   923f8:	0009248b 	.word	0x0009248b
   923fc:	0009248b 	.word	0x0009248b
   92400:	4b61      	ldr	r3, [pc, #388]	; (92588 <cl_flow_switchcontroller+0x1dc>)
   92402:	2201      	movs	r2, #1
   92404:	701a      	strb	r2, [r3, #0]
   92406:	e06f      	b.n	924e8 <cl_flow_switchcontroller+0x13c>
   92408:	2100      	movs	r1, #0
   9240a:	200d      	movs	r0, #13
   9240c:	4b5f      	ldr	r3, [pc, #380]	; (9258c <cl_flow_switchcontroller+0x1e0>)
   9240e:	4798      	blx	r3
   92410:	2100      	movs	r1, #0
   92412:	200e      	movs	r0, #14
   92414:	4b5d      	ldr	r3, [pc, #372]	; (9258c <cl_flow_switchcontroller+0x1e0>)
   92416:	4798      	blx	r3
   92418:	4b5b      	ldr	r3, [pc, #364]	; (92588 <cl_flow_switchcontroller+0x1dc>)
   9241a:	2200      	movs	r2, #0
   9241c:	701a      	strb	r2, [r3, #0]
   9241e:	e063      	b.n	924e8 <cl_flow_switchcontroller+0x13c>
   92420:	4b5b      	ldr	r3, [pc, #364]	; (92590 <cl_flow_switchcontroller+0x1e4>)
   92422:	781b      	ldrb	r3, [r3, #0]
   92424:	3301      	adds	r3, #1
   92426:	b2da      	uxtb	r2, r3
   92428:	4b59      	ldr	r3, [pc, #356]	; (92590 <cl_flow_switchcontroller+0x1e4>)
   9242a:	701a      	strb	r2, [r3, #0]
   9242c:	4b58      	ldr	r3, [pc, #352]	; (92590 <cl_flow_switchcontroller+0x1e4>)
   9242e:	781b      	ldrb	r3, [r3, #0]
   92430:	2b03      	cmp	r3, #3
   92432:	d956      	bls.n	924e2 <cl_flow_switchcontroller+0x136>
   92434:	4b56      	ldr	r3, [pc, #344]	; (92590 <cl_flow_switchcontroller+0x1e4>)
   92436:	2200      	movs	r2, #0
   92438:	701a      	strb	r2, [r3, #0]
   9243a:	200c      	movs	r0, #12
   9243c:	4b55      	ldr	r3, [pc, #340]	; (92594 <cl_flow_switchcontroller+0x1e8>)
   9243e:	4798      	blx	r3
   92440:	200d      	movs	r0, #13
   92442:	4b54      	ldr	r3, [pc, #336]	; (92594 <cl_flow_switchcontroller+0x1e8>)
   92444:	4798      	blx	r3
   92446:	2300      	movs	r3, #0
   92448:	60fb      	str	r3, [r7, #12]
   9244a:	4b53      	ldr	r3, [pc, #332]	; (92598 <cl_flow_switchcontroller+0x1ec>)
   9244c:	881b      	ldrh	r3, [r3, #0]
   9244e:	81bb      	strh	r3, [r7, #12]
   92450:	2315      	movs	r3, #21
   92452:	73bb      	strb	r3, [r7, #14]
   92454:	4b50      	ldr	r3, [pc, #320]	; (92598 <cl_flow_switchcontroller+0x1ec>)
   92456:	881b      	ldrh	r3, [r3, #0]
   92458:	2b01      	cmp	r3, #1
   9245a:	d803      	bhi.n	92464 <cl_flow_switchcontroller+0xb8>
   9245c:	2101      	movs	r1, #1
   9245e:	200d      	movs	r0, #13
   92460:	4b4a      	ldr	r3, [pc, #296]	; (9258c <cl_flow_switchcontroller+0x1e0>)
   92462:	4798      	blx	r3
   92464:	4b4c      	ldr	r3, [pc, #304]	; (92598 <cl_flow_switchcontroller+0x1ec>)
   92466:	881b      	ldrh	r3, [r3, #0]
   92468:	f240 52dc 	movw	r2, #1500	; 0x5dc
   9246c:	4293      	cmp	r3, r2
   9246e:	d903      	bls.n	92478 <cl_flow_switchcontroller+0xcc>
   92470:	2101      	movs	r1, #1
   92472:	200e      	movs	r0, #14
   92474:	4b45      	ldr	r3, [pc, #276]	; (9258c <cl_flow_switchcontroller+0x1e0>)
   92476:	4798      	blx	r3
   92478:	2202      	movs	r2, #2
   9247a:	4947      	ldr	r1, [pc, #284]	; (92598 <cl_flow_switchcontroller+0x1ec>)
   9247c:	2019      	movs	r0, #25
   9247e:	4b47      	ldr	r3, [pc, #284]	; (9259c <cl_flow_switchcontroller+0x1f0>)
   92480:	4798      	blx	r3
   92482:	4b45      	ldr	r3, [pc, #276]	; (92598 <cl_flow_switchcontroller+0x1ec>)
   92484:	2200      	movs	r2, #0
   92486:	801a      	strh	r2, [r3, #0]
   92488:	e02b      	b.n	924e2 <cl_flow_switchcontroller+0x136>
   9248a:	4b45      	ldr	r3, [pc, #276]	; (925a0 <cl_flow_switchcontroller+0x1f4>)
   9248c:	781b      	ldrb	r3, [r3, #0]
   9248e:	2b01      	cmp	r3, #1
   92490:	d110      	bne.n	924b4 <cl_flow_switchcontroller+0x108>
   92492:	4b43      	ldr	r3, [pc, #268]	; (925a0 <cl_flow_switchcontroller+0x1f4>)
   92494:	2200      	movs	r2, #0
   92496:	701a      	strb	r2, [r3, #0]
   92498:	4b42      	ldr	r3, [pc, #264]	; (925a4 <cl_flow_switchcontroller+0x1f8>)
   9249a:	781b      	ldrb	r3, [r3, #0]
   9249c:	2b01      	cmp	r3, #1
   9249e:	d022      	beq.n	924e6 <cl_flow_switchcontroller+0x13a>
   924a0:	4b3d      	ldr	r3, [pc, #244]	; (92598 <cl_flow_switchcontroller+0x1ec>)
   924a2:	881b      	ldrh	r3, [r3, #0]
   924a4:	3301      	adds	r3, #1
   924a6:	b29a      	uxth	r2, r3
   924a8:	4b3b      	ldr	r3, [pc, #236]	; (92598 <cl_flow_switchcontroller+0x1ec>)
   924aa:	801a      	strh	r2, [r3, #0]
   924ac:	4b3d      	ldr	r3, [pc, #244]	; (925a4 <cl_flow_switchcontroller+0x1f8>)
   924ae:	2201      	movs	r2, #1
   924b0:	701a      	strb	r2, [r3, #0]
   924b2:	e018      	b.n	924e6 <cl_flow_switchcontroller+0x13a>
   924b4:	4b3a      	ldr	r3, [pc, #232]	; (925a0 <cl_flow_switchcontroller+0x1f4>)
   924b6:	781b      	ldrb	r3, [r3, #0]
   924b8:	2b02      	cmp	r3, #2
   924ba:	d114      	bne.n	924e6 <cl_flow_switchcontroller+0x13a>
   924bc:	4b38      	ldr	r3, [pc, #224]	; (925a0 <cl_flow_switchcontroller+0x1f4>)
   924be:	2200      	movs	r2, #0
   924c0:	701a      	strb	r2, [r3, #0]
   924c2:	4b38      	ldr	r3, [pc, #224]	; (925a4 <cl_flow_switchcontroller+0x1f8>)
   924c4:	781b      	ldrb	r3, [r3, #0]
   924c6:	2b02      	cmp	r3, #2
   924c8:	d00d      	beq.n	924e6 <cl_flow_switchcontroller+0x13a>
   924ca:	4b33      	ldr	r3, [pc, #204]	; (92598 <cl_flow_switchcontroller+0x1ec>)
   924cc:	881b      	ldrh	r3, [r3, #0]
   924ce:	3301      	adds	r3, #1
   924d0:	b29a      	uxth	r2, r3
   924d2:	4b31      	ldr	r3, [pc, #196]	; (92598 <cl_flow_switchcontroller+0x1ec>)
   924d4:	801a      	strh	r2, [r3, #0]
   924d6:	4b33      	ldr	r3, [pc, #204]	; (925a4 <cl_flow_switchcontroller+0x1f8>)
   924d8:	2202      	movs	r2, #2
   924da:	701a      	strb	r2, [r3, #0]
   924dc:	e003      	b.n	924e6 <cl_flow_switchcontroller+0x13a>
   924de:	bf00      	nop
   924e0:	e04c      	b.n	9257c <cl_flow_switchcontroller+0x1d0>
   924e2:	bf00      	nop
   924e4:	e04a      	b.n	9257c <cl_flow_switchcontroller+0x1d0>
   924e6:	bf00      	nop
   924e8:	e048      	b.n	9257c <cl_flow_switchcontroller+0x1d0>
   924ea:	79fb      	ldrb	r3, [r7, #7]
   924ec:	2b01      	cmp	r3, #1
   924ee:	d001      	beq.n	924f4 <cl_flow_switchcontroller+0x148>
   924f0:	2b02      	cmp	r3, #2
   924f2:	e003      	b.n	924fc <cl_flow_switchcontroller+0x150>
   924f4:	4b24      	ldr	r3, [pc, #144]	; (92588 <cl_flow_switchcontroller+0x1dc>)
   924f6:	2201      	movs	r2, #1
   924f8:	701a      	strb	r2, [r3, #0]
   924fa:	bf00      	nop
   924fc:	e03e      	b.n	9257c <cl_flow_switchcontroller+0x1d0>
   924fe:	79fb      	ldrb	r3, [r7, #7]
   92500:	2b03      	cmp	r3, #3
   92502:	d002      	beq.n	9250a <cl_flow_switchcontroller+0x15e>
   92504:	2b06      	cmp	r3, #6
   92506:	d004      	beq.n	92512 <cl_flow_switchcontroller+0x166>
   92508:	e02d      	b.n	92566 <cl_flow_switchcontroller+0x1ba>
   9250a:	4b1f      	ldr	r3, [pc, #124]	; (92588 <cl_flow_switchcontroller+0x1dc>)
   9250c:	2202      	movs	r2, #2
   9250e:	701a      	strb	r2, [r3, #0]
   92510:	e029      	b.n	92566 <cl_flow_switchcontroller+0x1ba>
   92512:	4b23      	ldr	r3, [pc, #140]	; (925a0 <cl_flow_switchcontroller+0x1f4>)
   92514:	781b      	ldrb	r3, [r3, #0]
   92516:	2b01      	cmp	r3, #1
   92518:	d110      	bne.n	9253c <cl_flow_switchcontroller+0x190>
   9251a:	4b21      	ldr	r3, [pc, #132]	; (925a0 <cl_flow_switchcontroller+0x1f4>)
   9251c:	2200      	movs	r2, #0
   9251e:	701a      	strb	r2, [r3, #0]
   92520:	4b20      	ldr	r3, [pc, #128]	; (925a4 <cl_flow_switchcontroller+0x1f8>)
   92522:	781b      	ldrb	r3, [r3, #0]
   92524:	2b01      	cmp	r3, #1
   92526:	d01d      	beq.n	92564 <cl_flow_switchcontroller+0x1b8>
   92528:	4b1b      	ldr	r3, [pc, #108]	; (92598 <cl_flow_switchcontroller+0x1ec>)
   9252a:	881b      	ldrh	r3, [r3, #0]
   9252c:	3301      	adds	r3, #1
   9252e:	b29a      	uxth	r2, r3
   92530:	4b19      	ldr	r3, [pc, #100]	; (92598 <cl_flow_switchcontroller+0x1ec>)
   92532:	801a      	strh	r2, [r3, #0]
   92534:	4b1b      	ldr	r3, [pc, #108]	; (925a4 <cl_flow_switchcontroller+0x1f8>)
   92536:	2201      	movs	r2, #1
   92538:	701a      	strb	r2, [r3, #0]
   9253a:	e013      	b.n	92564 <cl_flow_switchcontroller+0x1b8>
   9253c:	4b18      	ldr	r3, [pc, #96]	; (925a0 <cl_flow_switchcontroller+0x1f4>)
   9253e:	781b      	ldrb	r3, [r3, #0]
   92540:	2b02      	cmp	r3, #2
   92542:	d10f      	bne.n	92564 <cl_flow_switchcontroller+0x1b8>
   92544:	4b16      	ldr	r3, [pc, #88]	; (925a0 <cl_flow_switchcontroller+0x1f4>)
   92546:	2200      	movs	r2, #0
   92548:	701a      	strb	r2, [r3, #0]
   9254a:	4b16      	ldr	r3, [pc, #88]	; (925a4 <cl_flow_switchcontroller+0x1f8>)
   9254c:	781b      	ldrb	r3, [r3, #0]
   9254e:	2b02      	cmp	r3, #2
   92550:	d008      	beq.n	92564 <cl_flow_switchcontroller+0x1b8>
   92552:	4b11      	ldr	r3, [pc, #68]	; (92598 <cl_flow_switchcontroller+0x1ec>)
   92554:	881b      	ldrh	r3, [r3, #0]
   92556:	3301      	adds	r3, #1
   92558:	b29a      	uxth	r2, r3
   9255a:	4b0f      	ldr	r3, [pc, #60]	; (92598 <cl_flow_switchcontroller+0x1ec>)
   9255c:	801a      	strh	r2, [r3, #0]
   9255e:	4b11      	ldr	r3, [pc, #68]	; (925a4 <cl_flow_switchcontroller+0x1f8>)
   92560:	2202      	movs	r2, #2
   92562:	701a      	strb	r2, [r3, #0]
   92564:	bf00      	nop
   92566:	e009      	b.n	9257c <cl_flow_switchcontroller+0x1d0>
   92568:	79fb      	ldrb	r3, [r7, #7]
   9256a:	2b01      	cmp	r3, #1
   9256c:	d001      	beq.n	92572 <cl_flow_switchcontroller+0x1c6>
   9256e:	2b02      	cmp	r3, #2
   92570:	e003      	b.n	9257a <cl_flow_switchcontroller+0x1ce>
   92572:	4b05      	ldr	r3, [pc, #20]	; (92588 <cl_flow_switchcontroller+0x1dc>)
   92574:	2202      	movs	r2, #2
   92576:	701a      	strb	r2, [r3, #0]
   92578:	bf00      	nop
   9257a:	bf00      	nop
   9257c:	2300      	movs	r3, #0
   9257e:	4618      	mov	r0, r3
   92580:	3710      	adds	r7, #16
   92582:	46bd      	mov	sp, r7
   92584:	bd80      	pop	{r7, pc}
   92586:	bf00      	nop
   92588:	2007269f 	.word	0x2007269f
   9258c:	000830a5 	.word	0x000830a5
   92590:	200726a2 	.word	0x200726a2
   92594:	00082ff1 	.word	0x00082ff1
   92598:	200726a0 	.word	0x200726a0
   9259c:	00099729 	.word	0x00099729
   925a0:	2007269c 	.word	0x2007269c
   925a4:	2007269e 	.word	0x2007269e

000925a8 <cl_hep_controller>:
   925a8:	b580      	push	{r7, lr}
   925aa:	b084      	sub	sp, #16
   925ac:	af00      	add	r7, sp, #0
   925ae:	4603      	mov	r3, r0
   925b0:	6039      	str	r1, [r7, #0]
   925b2:	71fb      	strb	r3, [r7, #7]
   925b4:	2300      	movs	r3, #0
   925b6:	73fb      	strb	r3, [r7, #15]
   925b8:	2300      	movs	r3, #0
   925ba:	73bb      	strb	r3, [r7, #14]
   925bc:	2300      	movs	r3, #0
   925be:	81bb      	strh	r3, [r7, #12]
   925c0:	4bab      	ldr	r3, [pc, #684]	; (92870 <cl_hep_controller+0x2c8>)
   925c2:	781b      	ldrb	r3, [r3, #0]
   925c4:	2b10      	cmp	r3, #16
   925c6:	f200 828d 	bhi.w	92ae4 <cl_hep_controller+0x53c>
   925ca:	a201      	add	r2, pc, #4	; (adr r2, 925d0 <cl_hep_controller+0x28>)
   925cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   925d0:	00092615 	.word	0x00092615
   925d4:	0009275f 	.word	0x0009275f
   925d8:	000927f7 	.word	0x000927f7
   925dc:	000928d5 	.word	0x000928d5
   925e0:	000928b9 	.word	0x000928b9
   925e4:	00092907 	.word	0x00092907
   925e8:	00092971 	.word	0x00092971
   925ec:	00092ae5 	.word	0x00092ae5
   925f0:	00092a2d 	.word	0x00092a2d
   925f4:	00092ae5 	.word	0x00092ae5
   925f8:	00092ae5 	.word	0x00092ae5
   925fc:	00092ae5 	.word	0x00092ae5
   92600:	00092ae5 	.word	0x00092ae5
   92604:	00092ae5 	.word	0x00092ae5
   92608:	00092ae5 	.word	0x00092ae5
   9260c:	00092ae5 	.word	0x00092ae5
   92610:	00092ae5 	.word	0x00092ae5
   92614:	79fb      	ldrb	r3, [r7, #7]
   92616:	3b01      	subs	r3, #1
   92618:	2b0b      	cmp	r3, #11
   9261a:	f200 8265 	bhi.w	92ae8 <cl_hep_controller+0x540>
   9261e:	a201      	add	r2, pc, #4	; (adr r2, 92624 <cl_hep_controller+0x7c>)
   92620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92624:	000926cd 	.word	0x000926cd
   92628:	00092729 	.word	0x00092729
   9262c:	00092731 	.word	0x00092731
   92630:	000926fb 	.word	0x000926fb
   92634:	00092739 	.word	0x00092739
   92638:	0009274d 	.word	0x0009274d
   9263c:	00092655 	.word	0x00092655
   92640:	00092ae9 	.word	0x00092ae9
   92644:	0009268b 	.word	0x0009268b
   92648:	0009269d 	.word	0x0009269d
   9264c:	00092ae9 	.word	0x00092ae9
   92650:	000926c5 	.word	0x000926c5
   92654:	4b87      	ldr	r3, [pc, #540]	; (92874 <cl_hep_controller+0x2cc>)
   92656:	681b      	ldr	r3, [r3, #0]
   92658:	4a87      	ldr	r2, [pc, #540]	; (92878 <cl_hep_controller+0x2d0>)
   9265a:	6013      	str	r3, [r2, #0]
   9265c:	4b86      	ldr	r3, [pc, #536]	; (92878 <cl_hep_controller+0x2d0>)
   9265e:	2205      	movs	r2, #5
   92660:	601a      	str	r2, [r3, #0]
   92662:	2005      	movs	r0, #5
   92664:	4b85      	ldr	r3, [pc, #532]	; (9287c <cl_hep_controller+0x2d4>)
   92666:	4798      	blx	r3
   92668:	4b85      	ldr	r3, [pc, #532]	; (92880 <cl_hep_controller+0x2d8>)
   9266a:	4798      	blx	r3
   9266c:	2064      	movs	r0, #100	; 0x64
   9266e:	4b85      	ldr	r3, [pc, #532]	; (92884 <cl_hep_controller+0x2dc>)
   92670:	4798      	blx	r3
   92672:	4b81      	ldr	r3, [pc, #516]	; (92878 <cl_hep_controller+0x2d0>)
   92674:	681b      	ldr	r3, [r3, #0]
   92676:	4619      	mov	r1, r3
   92678:	2005      	movs	r0, #5
   9267a:	4b83      	ldr	r3, [pc, #524]	; (92888 <cl_hep_controller+0x2e0>)
   9267c:	4798      	blx	r3
   9267e:	4b83      	ldr	r3, [pc, #524]	; (9288c <cl_hep_controller+0x2e4>)
   92680:	4798      	blx	r3
   92682:	4b7b      	ldr	r3, [pc, #492]	; (92870 <cl_hep_controller+0x2c8>)
   92684:	2206      	movs	r2, #6
   92686:	701a      	strb	r2, [r3, #0]
   92688:	e068      	b.n	9275c <cl_hep_controller+0x1b4>
   9268a:	2005      	movs	r0, #5
   9268c:	4b80      	ldr	r3, [pc, #512]	; (92890 <cl_hep_controller+0x2e8>)
   9268e:	4798      	blx	r3
   92690:	4603      	mov	r3, r0
   92692:	73fb      	strb	r3, [r7, #15]
   92694:	4b76      	ldr	r3, [pc, #472]	; (92870 <cl_hep_controller+0x2c8>)
   92696:	2200      	movs	r2, #0
   92698:	701a      	strb	r2, [r3, #0]
   9269a:	e05f      	b.n	9275c <cl_hep_controller+0x1b4>
   9269c:	4b78      	ldr	r3, [pc, #480]	; (92880 <cl_hep_controller+0x2d8>)
   9269e:	4798      	blx	r3
   926a0:	2005      	movs	r0, #5
   926a2:	4b76      	ldr	r3, [pc, #472]	; (9287c <cl_hep_controller+0x2d4>)
   926a4:	4798      	blx	r3
   926a6:	4b74      	ldr	r3, [pc, #464]	; (92878 <cl_hep_controller+0x2d0>)
   926a8:	220a      	movs	r2, #10
   926aa:	601a      	str	r2, [r3, #0]
   926ac:	2064      	movs	r0, #100	; 0x64
   926ae:	4b75      	ldr	r3, [pc, #468]	; (92884 <cl_hep_controller+0x2dc>)
   926b0:	4798      	blx	r3
   926b2:	4b71      	ldr	r3, [pc, #452]	; (92878 <cl_hep_controller+0x2d0>)
   926b4:	681b      	ldr	r3, [r3, #0]
   926b6:	4619      	mov	r1, r3
   926b8:	2005      	movs	r0, #5
   926ba:	4b73      	ldr	r3, [pc, #460]	; (92888 <cl_hep_controller+0x2e0>)
   926bc:	4798      	blx	r3
   926be:	4b73      	ldr	r3, [pc, #460]	; (9288c <cl_hep_controller+0x2e4>)
   926c0:	4798      	blx	r3
   926c2:	e04b      	b.n	9275c <cl_hep_controller+0x1b4>
   926c4:	2005      	movs	r0, #5
   926c6:	4b72      	ldr	r3, [pc, #456]	; (92890 <cl_hep_controller+0x2e8>)
   926c8:	4798      	blx	r3
   926ca:	e047      	b.n	9275c <cl_hep_controller+0x1b4>
   926cc:	4b6a      	ldr	r3, [pc, #424]	; (92878 <cl_hep_controller+0x2d0>)
   926ce:	2205      	movs	r2, #5
   926d0:	601a      	str	r2, [r3, #0]
   926d2:	4b6b      	ldr	r3, [pc, #428]	; (92880 <cl_hep_controller+0x2d8>)
   926d4:	4798      	blx	r3
   926d6:	2005      	movs	r0, #5
   926d8:	4b68      	ldr	r3, [pc, #416]	; (9287c <cl_hep_controller+0x2d4>)
   926da:	4798      	blx	r3
   926dc:	4b6b      	ldr	r3, [pc, #428]	; (9288c <cl_hep_controller+0x2e4>)
   926de:	4798      	blx	r3
   926e0:	2064      	movs	r0, #100	; 0x64
   926e2:	4b68      	ldr	r3, [pc, #416]	; (92884 <cl_hep_controller+0x2dc>)
   926e4:	4798      	blx	r3
   926e6:	4b64      	ldr	r3, [pc, #400]	; (92878 <cl_hep_controller+0x2d0>)
   926e8:	681b      	ldr	r3, [r3, #0]
   926ea:	4619      	mov	r1, r3
   926ec:	2005      	movs	r0, #5
   926ee:	4b66      	ldr	r3, [pc, #408]	; (92888 <cl_hep_controller+0x2e0>)
   926f0:	4798      	blx	r3
   926f2:	4b5f      	ldr	r3, [pc, #380]	; (92870 <cl_hep_controller+0x2c8>)
   926f4:	2203      	movs	r2, #3
   926f6:	701a      	strb	r2, [r3, #0]
   926f8:	e030      	b.n	9275c <cl_hep_controller+0x1b4>
   926fa:	4b5f      	ldr	r3, [pc, #380]	; (92878 <cl_hep_controller+0x2d0>)
   926fc:	2205      	movs	r2, #5
   926fe:	601a      	str	r2, [r3, #0]
   92700:	4b64      	ldr	r3, [pc, #400]	; (92894 <cl_hep_controller+0x2ec>)
   92702:	4798      	blx	r3
   92704:	2005      	movs	r0, #5
   92706:	4b5d      	ldr	r3, [pc, #372]	; (9287c <cl_hep_controller+0x2d4>)
   92708:	4798      	blx	r3
   9270a:	4b60      	ldr	r3, [pc, #384]	; (9288c <cl_hep_controller+0x2e4>)
   9270c:	4798      	blx	r3
   9270e:	2064      	movs	r0, #100	; 0x64
   92710:	4b5c      	ldr	r3, [pc, #368]	; (92884 <cl_hep_controller+0x2dc>)
   92712:	4798      	blx	r3
   92714:	4b58      	ldr	r3, [pc, #352]	; (92878 <cl_hep_controller+0x2d0>)
   92716:	681b      	ldr	r3, [r3, #0]
   92718:	4619      	mov	r1, r3
   9271a:	2005      	movs	r0, #5
   9271c:	4b5a      	ldr	r3, [pc, #360]	; (92888 <cl_hep_controller+0x2e0>)
   9271e:	4798      	blx	r3
   92720:	4b53      	ldr	r3, [pc, #332]	; (92870 <cl_hep_controller+0x2c8>)
   92722:	2204      	movs	r2, #4
   92724:	701a      	strb	r2, [r3, #0]
   92726:	e019      	b.n	9275c <cl_hep_controller+0x1b4>
   92728:	4b51      	ldr	r3, [pc, #324]	; (92870 <cl_hep_controller+0x2c8>)
   9272a:	2201      	movs	r2, #1
   9272c:	701a      	strb	r2, [r3, #0]
   9272e:	e015      	b.n	9275c <cl_hep_controller+0x1b4>
   92730:	4b4f      	ldr	r3, [pc, #316]	; (92870 <cl_hep_controller+0x2c8>)
   92732:	2202      	movs	r2, #2
   92734:	701a      	strb	r2, [r3, #0]
   92736:	e011      	b.n	9275c <cl_hep_controller+0x1b4>
   92738:	683b      	ldr	r3, [r7, #0]
   9273a:	b29a      	uxth	r2, r3
   9273c:	4b56      	ldr	r3, [pc, #344]	; (92898 <cl_hep_controller+0x2f0>)
   9273e:	801a      	strh	r2, [r3, #0]
   92740:	4b55      	ldr	r3, [pc, #340]	; (92898 <cl_hep_controller+0x2f0>)
   92742:	881b      	ldrh	r3, [r3, #0]
   92744:	461a      	mov	r2, r3
   92746:	4b4c      	ldr	r3, [pc, #304]	; (92878 <cl_hep_controller+0x2d0>)
   92748:	601a      	str	r2, [r3, #0]
   9274a:	e007      	b.n	9275c <cl_hep_controller+0x1b4>
   9274c:	683b      	ldr	r3, [r7, #0]
   9274e:	4a49      	ldr	r2, [pc, #292]	; (92874 <cl_hep_controller+0x2cc>)
   92750:	6013      	str	r3, [r2, #0]
   92752:	4b48      	ldr	r3, [pc, #288]	; (92874 <cl_hep_controller+0x2cc>)
   92754:	681b      	ldr	r3, [r3, #0]
   92756:	4a48      	ldr	r2, [pc, #288]	; (92878 <cl_hep_controller+0x2d0>)
   92758:	6013      	str	r3, [r2, #0]
   9275a:	bf00      	nop
   9275c:	e1c4      	b.n	92ae8 <cl_hep_controller+0x540>
   9275e:	79fb      	ldrb	r3, [r7, #7]
   92760:	3b02      	subs	r3, #2
   92762:	2b08      	cmp	r3, #8
   92764:	f200 81c2 	bhi.w	92aec <cl_hep_controller+0x544>
   92768:	a201      	add	r2, pc, #4	; (adr r2, 92770 <cl_hep_controller+0x1c8>)
   9276a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9276e:	bf00      	nop
   92770:	000927d3 	.word	0x000927d3
   92774:	000927db 	.word	0x000927db
   92778:	000927a5 	.word	0x000927a5
   9277c:	000927e3 	.word	0x000927e3
   92780:	000927ed 	.word	0x000927ed
   92784:	00092795 	.word	0x00092795
   92788:	00092aed 	.word	0x00092aed
   9278c:	00092aed 	.word	0x00092aed
   92790:	0009279d 	.word	0x0009279d
   92794:	4b36      	ldr	r3, [pc, #216]	; (92870 <cl_hep_controller+0x2c8>)
   92796:	2206      	movs	r2, #6
   92798:	701a      	strb	r2, [r3, #0]
   9279a:	e02b      	b.n	927f4 <cl_hep_controller+0x24c>
   9279c:	4b34      	ldr	r3, [pc, #208]	; (92870 <cl_hep_controller+0x2c8>)
   9279e:	2208      	movs	r2, #8
   927a0:	701a      	strb	r2, [r3, #0]
   927a2:	e027      	b.n	927f4 <cl_hep_controller+0x24c>
   927a4:	4b36      	ldr	r3, [pc, #216]	; (92880 <cl_hep_controller+0x2d8>)
   927a6:	4798      	blx	r3
   927a8:	4b33      	ldr	r3, [pc, #204]	; (92878 <cl_hep_controller+0x2d0>)
   927aa:	2205      	movs	r2, #5
   927ac:	601a      	str	r2, [r3, #0]
   927ae:	2005      	movs	r0, #5
   927b0:	4b32      	ldr	r3, [pc, #200]	; (9287c <cl_hep_controller+0x2d4>)
   927b2:	4798      	blx	r3
   927b4:	4b35      	ldr	r3, [pc, #212]	; (9288c <cl_hep_controller+0x2e4>)
   927b6:	4798      	blx	r3
   927b8:	2064      	movs	r0, #100	; 0x64
   927ba:	4b32      	ldr	r3, [pc, #200]	; (92884 <cl_hep_controller+0x2dc>)
   927bc:	4798      	blx	r3
   927be:	4b2e      	ldr	r3, [pc, #184]	; (92878 <cl_hep_controller+0x2d0>)
   927c0:	681b      	ldr	r3, [r3, #0]
   927c2:	4619      	mov	r1, r3
   927c4:	2005      	movs	r0, #5
   927c6:	4b30      	ldr	r3, [pc, #192]	; (92888 <cl_hep_controller+0x2e0>)
   927c8:	4798      	blx	r3
   927ca:	4b29      	ldr	r3, [pc, #164]	; (92870 <cl_hep_controller+0x2c8>)
   927cc:	2204      	movs	r2, #4
   927ce:	701a      	strb	r2, [r3, #0]
   927d0:	e010      	b.n	927f4 <cl_hep_controller+0x24c>
   927d2:	4b27      	ldr	r3, [pc, #156]	; (92870 <cl_hep_controller+0x2c8>)
   927d4:	2201      	movs	r2, #1
   927d6:	701a      	strb	r2, [r3, #0]
   927d8:	e00c      	b.n	927f4 <cl_hep_controller+0x24c>
   927da:	4b25      	ldr	r3, [pc, #148]	; (92870 <cl_hep_controller+0x2c8>)
   927dc:	2202      	movs	r2, #2
   927de:	701a      	strb	r2, [r3, #0]
   927e0:	e008      	b.n	927f4 <cl_hep_controller+0x24c>
   927e2:	683b      	ldr	r3, [r7, #0]
   927e4:	b29a      	uxth	r2, r3
   927e6:	4b2c      	ldr	r3, [pc, #176]	; (92898 <cl_hep_controller+0x2f0>)
   927e8:	801a      	strh	r2, [r3, #0]
   927ea:	e003      	b.n	927f4 <cl_hep_controller+0x24c>
   927ec:	683b      	ldr	r3, [r7, #0]
   927ee:	4a21      	ldr	r2, [pc, #132]	; (92874 <cl_hep_controller+0x2cc>)
   927f0:	6013      	str	r3, [r2, #0]
   927f2:	bf00      	nop
   927f4:	e17a      	b.n	92aec <cl_hep_controller+0x544>
   927f6:	79fb      	ldrb	r3, [r7, #7]
   927f8:	3b01      	subs	r3, #1
   927fa:	2b09      	cmp	r3, #9
   927fc:	f200 8178 	bhi.w	92af0 <cl_hep_controller+0x548>
   92800:	a201      	add	r2, pc, #4	; (adr r2, 92808 <cl_hep_controller+0x260>)
   92802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92806:	bf00      	nop
   92808:	00092841 	.word	0x00092841
   9280c:	00092869 	.word	0x00092869
   92810:	0009289d 	.word	0x0009289d
   92814:	00092af1 	.word	0x00092af1
   92818:	000928a5 	.word	0x000928a5
   9281c:	000928af 	.word	0x000928af
   92820:	00092831 	.word	0x00092831
   92824:	00092af1 	.word	0x00092af1
   92828:	00092af1 	.word	0x00092af1
   9282c:	00092839 	.word	0x00092839
   92830:	4b0f      	ldr	r3, [pc, #60]	; (92870 <cl_hep_controller+0x2c8>)
   92832:	2206      	movs	r2, #6
   92834:	701a      	strb	r2, [r3, #0]
   92836:	e03e      	b.n	928b6 <cl_hep_controller+0x30e>
   92838:	4b0d      	ldr	r3, [pc, #52]	; (92870 <cl_hep_controller+0x2c8>)
   9283a:	2208      	movs	r2, #8
   9283c:	701a      	strb	r2, [r3, #0]
   9283e:	e03a      	b.n	928b6 <cl_hep_controller+0x30e>
   92840:	4b14      	ldr	r3, [pc, #80]	; (92894 <cl_hep_controller+0x2ec>)
   92842:	4798      	blx	r3
   92844:	2005      	movs	r0, #5
   92846:	4b0d      	ldr	r3, [pc, #52]	; (9287c <cl_hep_controller+0x2d4>)
   92848:	4798      	blx	r3
   9284a:	4b10      	ldr	r3, [pc, #64]	; (9288c <cl_hep_controller+0x2e4>)
   9284c:	4798      	blx	r3
   9284e:	2064      	movs	r0, #100	; 0x64
   92850:	4b0c      	ldr	r3, [pc, #48]	; (92884 <cl_hep_controller+0x2dc>)
   92852:	4798      	blx	r3
   92854:	4b08      	ldr	r3, [pc, #32]	; (92878 <cl_hep_controller+0x2d0>)
   92856:	681b      	ldr	r3, [r3, #0]
   92858:	4619      	mov	r1, r3
   9285a:	2005      	movs	r0, #5
   9285c:	4b0a      	ldr	r3, [pc, #40]	; (92888 <cl_hep_controller+0x2e0>)
   9285e:	4798      	blx	r3
   92860:	4b03      	ldr	r3, [pc, #12]	; (92870 <cl_hep_controller+0x2c8>)
   92862:	2203      	movs	r2, #3
   92864:	701a      	strb	r2, [r3, #0]
   92866:	e026      	b.n	928b6 <cl_hep_controller+0x30e>
   92868:	4b01      	ldr	r3, [pc, #4]	; (92870 <cl_hep_controller+0x2c8>)
   9286a:	2201      	movs	r2, #1
   9286c:	701a      	strb	r2, [r3, #0]
   9286e:	e022      	b.n	928b6 <cl_hep_controller+0x30e>
   92870:	200726a3 	.word	0x200726a3
   92874:	200709f8 	.word	0x200709f8
   92878:	200726ac 	.word	0x200726ac
   9287c:	0009790d 	.word	0x0009790d
   92880:	000979fd 	.word	0x000979fd
   92884:	00091e2d 	.word	0x00091e2d
   92888:	00097a25 	.word	0x00097a25
   9288c:	00092b29 	.word	0x00092b29
   92890:	00097949 	.word	0x00097949
   92894:	00097a11 	.word	0x00097a11
   92898:	200726a4 	.word	0x200726a4
   9289c:	4b9a      	ldr	r3, [pc, #616]	; (92b08 <cl_hep_controller+0x560>)
   9289e:	2202      	movs	r2, #2
   928a0:	701a      	strb	r2, [r3, #0]
   928a2:	e008      	b.n	928b6 <cl_hep_controller+0x30e>
   928a4:	683b      	ldr	r3, [r7, #0]
   928a6:	b29a      	uxth	r2, r3
   928a8:	4b98      	ldr	r3, [pc, #608]	; (92b0c <cl_hep_controller+0x564>)
   928aa:	801a      	strh	r2, [r3, #0]
   928ac:	e003      	b.n	928b6 <cl_hep_controller+0x30e>
   928ae:	683b      	ldr	r3, [r7, #0]
   928b0:	4a97      	ldr	r2, [pc, #604]	; (92b10 <cl_hep_controller+0x568>)
   928b2:	6013      	str	r3, [r2, #0]
   928b4:	bf00      	nop
   928b6:	e11b      	b.n	92af0 <cl_hep_controller+0x548>
   928b8:	79fb      	ldrb	r3, [r7, #7]
   928ba:	2b0c      	cmp	r3, #12
   928bc:	d000      	beq.n	928c0 <cl_hep_controller+0x318>
   928be:	e008      	b.n	928d2 <cl_hep_controller+0x32a>
   928c0:	2005      	movs	r0, #5
   928c2:	4b94      	ldr	r3, [pc, #592]	; (92b14 <cl_hep_controller+0x56c>)
   928c4:	4798      	blx	r3
   928c6:	4603      	mov	r3, r0
   928c8:	73fb      	strb	r3, [r7, #15]
   928ca:	4b8f      	ldr	r3, [pc, #572]	; (92b08 <cl_hep_controller+0x560>)
   928cc:	2200      	movs	r2, #0
   928ce:	701a      	strb	r2, [r3, #0]
   928d0:	bf00      	nop
   928d2:	e114      	b.n	92afe <cl_hep_controller+0x556>
   928d4:	79fb      	ldrb	r3, [r7, #7]
   928d6:	2b0c      	cmp	r3, #12
   928d8:	d00b      	beq.n	928f2 <cl_hep_controller+0x34a>
   928da:	2b0d      	cmp	r3, #13
   928dc:	d000      	beq.n	928e0 <cl_hep_controller+0x338>
   928de:	e011      	b.n	92904 <cl_hep_controller+0x35c>
   928e0:	f107 030e 	add.w	r3, r7, #14
   928e4:	4618      	mov	r0, r3
   928e6:	4b8c      	ldr	r3, [pc, #560]	; (92b18 <cl_hep_controller+0x570>)
   928e8:	4798      	blx	r3
   928ea:	7bbb      	ldrb	r3, [r7, #14]
   928ec:	2b01      	cmp	r3, #1
   928ee:	bf00      	nop
   928f0:	e008      	b.n	92904 <cl_hep_controller+0x35c>
   928f2:	2005      	movs	r0, #5
   928f4:	4b87      	ldr	r3, [pc, #540]	; (92b14 <cl_hep_controller+0x56c>)
   928f6:	4798      	blx	r3
   928f8:	4603      	mov	r3, r0
   928fa:	73fb      	strb	r3, [r7, #15]
   928fc:	4b82      	ldr	r3, [pc, #520]	; (92b08 <cl_hep_controller+0x560>)
   928fe:	2200      	movs	r2, #0
   92900:	701a      	strb	r2, [r3, #0]
   92902:	bf00      	nop
   92904:	e0fb      	b.n	92afe <cl_hep_controller+0x556>
   92906:	79fb      	ldrb	r3, [r7, #7]
   92908:	3b01      	subs	r3, #1
   9290a:	2b06      	cmp	r3, #6
   9290c:	f200 80f2 	bhi.w	92af4 <cl_hep_controller+0x54c>
   92910:	a201      	add	r2, pc, #4	; (adr r2, 92918 <cl_hep_controller+0x370>)
   92912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92916:	bf00      	nop
   92918:	0009293d 	.word	0x0009293d
   9291c:	0009294d 	.word	0x0009294d
   92920:	00092955 	.word	0x00092955
   92924:	00092945 	.word	0x00092945
   92928:	0009295d 	.word	0x0009295d
   9292c:	00092967 	.word	0x00092967
   92930:	00092935 	.word	0x00092935
   92934:	4b74      	ldr	r3, [pc, #464]	; (92b08 <cl_hep_controller+0x560>)
   92936:	2206      	movs	r2, #6
   92938:	701a      	strb	r2, [r3, #0]
   9293a:	e018      	b.n	9296e <cl_hep_controller+0x3c6>
   9293c:	4b72      	ldr	r3, [pc, #456]	; (92b08 <cl_hep_controller+0x560>)
   9293e:	2203      	movs	r2, #3
   92940:	701a      	strb	r2, [r3, #0]
   92942:	e014      	b.n	9296e <cl_hep_controller+0x3c6>
   92944:	4b70      	ldr	r3, [pc, #448]	; (92b08 <cl_hep_controller+0x560>)
   92946:	2204      	movs	r2, #4
   92948:	701a      	strb	r2, [r3, #0]
   9294a:	e010      	b.n	9296e <cl_hep_controller+0x3c6>
   9294c:	4b6e      	ldr	r3, [pc, #440]	; (92b08 <cl_hep_controller+0x560>)
   9294e:	2201      	movs	r2, #1
   92950:	701a      	strb	r2, [r3, #0]
   92952:	e00c      	b.n	9296e <cl_hep_controller+0x3c6>
   92954:	4b6c      	ldr	r3, [pc, #432]	; (92b08 <cl_hep_controller+0x560>)
   92956:	2202      	movs	r2, #2
   92958:	701a      	strb	r2, [r3, #0]
   9295a:	e008      	b.n	9296e <cl_hep_controller+0x3c6>
   9295c:	683b      	ldr	r3, [r7, #0]
   9295e:	b29a      	uxth	r2, r3
   92960:	4b6a      	ldr	r3, [pc, #424]	; (92b0c <cl_hep_controller+0x564>)
   92962:	801a      	strh	r2, [r3, #0]
   92964:	e003      	b.n	9296e <cl_hep_controller+0x3c6>
   92966:	683b      	ldr	r3, [r7, #0]
   92968:	4a69      	ldr	r2, [pc, #420]	; (92b10 <cl_hep_controller+0x568>)
   9296a:	6013      	str	r3, [r2, #0]
   9296c:	bf00      	nop
   9296e:	e0c1      	b.n	92af4 <cl_hep_controller+0x54c>
   92970:	79fb      	ldrb	r3, [r7, #7]
   92972:	3b02      	subs	r3, #2
   92974:	2b0b      	cmp	r3, #11
   92976:	f200 80bf 	bhi.w	92af8 <cl_hep_controller+0x550>
   9297a:	a201      	add	r2, pc, #4	; (adr r2, 92980 <cl_hep_controller+0x3d8>)
   9297c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92980:	000929ed 	.word	0x000929ed
   92984:	000929f5 	.word	0x000929f5
   92988:	00092af9 	.word	0x00092af9
   9298c:	000929fd 	.word	0x000929fd
   92990:	00092a07 	.word	0x00092a07
   92994:	00092af9 	.word	0x00092af9
   92998:	00092a0f 	.word	0x00092a0f
   9299c:	00092a17 	.word	0x00092a17
   929a0:	00092af9 	.word	0x00092af9
   929a4:	00092af9 	.word	0x00092af9
   929a8:	00092a17 	.word	0x00092a17
   929ac:	000929b1 	.word	0x000929b1
   929b0:	4b5a      	ldr	r3, [pc, #360]	; (92b1c <cl_hep_controller+0x574>)
   929b2:	881b      	ldrh	r3, [r3, #0]
   929b4:	3301      	adds	r3, #1
   929b6:	b29a      	uxth	r2, r3
   929b8:	4b58      	ldr	r3, [pc, #352]	; (92b1c <cl_hep_controller+0x574>)
   929ba:	801a      	strh	r2, [r3, #0]
   929bc:	4b57      	ldr	r3, [pc, #348]	; (92b1c <cl_hep_controller+0x574>)
   929be:	881b      	ldrh	r3, [r3, #0]
   929c0:	2b3c      	cmp	r3, #60	; 0x3c
   929c2:	d931      	bls.n	92a28 <cl_hep_controller+0x480>
   929c4:	4b55      	ldr	r3, [pc, #340]	; (92b1c <cl_hep_controller+0x574>)
   929c6:	2200      	movs	r2, #0
   929c8:	801a      	strh	r2, [r3, #0]
   929ca:	4b55      	ldr	r3, [pc, #340]	; (92b20 <cl_hep_controller+0x578>)
   929cc:	881b      	ldrh	r3, [r3, #0]
   929ce:	3301      	adds	r3, #1
   929d0:	b29a      	uxth	r2, r3
   929d2:	4b53      	ldr	r3, [pc, #332]	; (92b20 <cl_hep_controller+0x578>)
   929d4:	801a      	strh	r2, [r3, #0]
   929d6:	4b52      	ldr	r3, [pc, #328]	; (92b20 <cl_hep_controller+0x578>)
   929d8:	881b      	ldrh	r3, [r3, #0]
   929da:	2b01      	cmp	r3, #1
   929dc:	d924      	bls.n	92a28 <cl_hep_controller+0x480>
   929de:	4b4a      	ldr	r3, [pc, #296]	; (92b08 <cl_hep_controller+0x560>)
   929e0:	2200      	movs	r2, #0
   929e2:	701a      	strb	r2, [r3, #0]
   929e4:	4b4e      	ldr	r3, [pc, #312]	; (92b20 <cl_hep_controller+0x578>)
   929e6:	2200      	movs	r2, #0
   929e8:	801a      	strh	r2, [r3, #0]
   929ea:	e01d      	b.n	92a28 <cl_hep_controller+0x480>
   929ec:	4b46      	ldr	r3, [pc, #280]	; (92b08 <cl_hep_controller+0x560>)
   929ee:	2201      	movs	r2, #1
   929f0:	701a      	strb	r2, [r3, #0]
   929f2:	e01a      	b.n	92a2a <cl_hep_controller+0x482>
   929f4:	4b44      	ldr	r3, [pc, #272]	; (92b08 <cl_hep_controller+0x560>)
   929f6:	2202      	movs	r2, #2
   929f8:	701a      	strb	r2, [r3, #0]
   929fa:	e016      	b.n	92a2a <cl_hep_controller+0x482>
   929fc:	683b      	ldr	r3, [r7, #0]
   929fe:	b29a      	uxth	r2, r3
   92a00:	4b42      	ldr	r3, [pc, #264]	; (92b0c <cl_hep_controller+0x564>)
   92a02:	801a      	strh	r2, [r3, #0]
   92a04:	e011      	b.n	92a2a <cl_hep_controller+0x482>
   92a06:	683b      	ldr	r3, [r7, #0]
   92a08:	4a41      	ldr	r2, [pc, #260]	; (92b10 <cl_hep_controller+0x568>)
   92a0a:	6013      	str	r3, [r2, #0]
   92a0c:	e00d      	b.n	92a2a <cl_hep_controller+0x482>
   92a0e:	4b3e      	ldr	r3, [pc, #248]	; (92b08 <cl_hep_controller+0x560>)
   92a10:	220e      	movs	r2, #14
   92a12:	701a      	strb	r2, [r3, #0]
   92a14:	e009      	b.n	92a2a <cl_hep_controller+0x482>
   92a16:	2005      	movs	r0, #5
   92a18:	4b3e      	ldr	r3, [pc, #248]	; (92b14 <cl_hep_controller+0x56c>)
   92a1a:	4798      	blx	r3
   92a1c:	4603      	mov	r3, r0
   92a1e:	73fb      	strb	r3, [r7, #15]
   92a20:	4b39      	ldr	r3, [pc, #228]	; (92b08 <cl_hep_controller+0x560>)
   92a22:	2200      	movs	r2, #0
   92a24:	701a      	strb	r2, [r3, #0]
   92a26:	e000      	b.n	92a2a <cl_hep_controller+0x482>
   92a28:	bf00      	nop
   92a2a:	e065      	b.n	92af8 <cl_hep_controller+0x550>
   92a2c:	79fb      	ldrb	r3, [r7, #7]
   92a2e:	3b02      	subs	r3, #2
   92a30:	2b0b      	cmp	r3, #11
   92a32:	d863      	bhi.n	92afc <cl_hep_controller+0x554>
   92a34:	a201      	add	r2, pc, #4	; (adr r2, 92a3c <cl_hep_controller+0x494>)
   92a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92a3a:	bf00      	nop
   92a3c:	00092a9d 	.word	0x00092a9d
   92a40:	00092aaf 	.word	0x00092aaf
   92a44:	00092afd 	.word	0x00092afd
   92a48:	00092ac1 	.word	0x00092ac1
   92a4c:	00092acb 	.word	0x00092acb
   92a50:	00092afd 	.word	0x00092afd
   92a54:	00092ad3 	.word	0x00092ad3
   92a58:	00092adb 	.word	0x00092adb
   92a5c:	00092afd 	.word	0x00092afd
   92a60:	00092afd 	.word	0x00092afd
   92a64:	00092afd 	.word	0x00092afd
   92a68:	00092a6d 	.word	0x00092a6d
   92a6c:	f107 030e 	add.w	r3, r7, #14
   92a70:	4618      	mov	r0, r3
   92a72:	4b29      	ldr	r3, [pc, #164]	; (92b18 <cl_hep_controller+0x570>)
   92a74:	4798      	blx	r3
   92a76:	f107 030c 	add.w	r3, r7, #12
   92a7a:	4618      	mov	r0, r3
   92a7c:	4b29      	ldr	r3, [pc, #164]	; (92b24 <cl_hep_controller+0x57c>)
   92a7e:	4798      	blx	r3
   92a80:	7bbb      	ldrb	r3, [r7, #14]
   92a82:	2b06      	cmp	r3, #6
   92a84:	d004      	beq.n	92a90 <cl_hep_controller+0x4e8>
   92a86:	2b07      	cmp	r3, #7
   92a88:	d004      	beq.n	92a94 <cl_hep_controller+0x4ec>
   92a8a:	2b02      	cmp	r3, #2
   92a8c:	d004      	beq.n	92a98 <cl_hep_controller+0x4f0>
   92a8e:	e004      	b.n	92a9a <cl_hep_controller+0x4f2>
   92a90:	bf00      	nop
   92a92:	e026      	b.n	92ae2 <cl_hep_controller+0x53a>
   92a94:	bf00      	nop
   92a96:	e024      	b.n	92ae2 <cl_hep_controller+0x53a>
   92a98:	bf00      	nop
   92a9a:	e022      	b.n	92ae2 <cl_hep_controller+0x53a>
   92a9c:	2005      	movs	r0, #5
   92a9e:	4b1d      	ldr	r3, [pc, #116]	; (92b14 <cl_hep_controller+0x56c>)
   92aa0:	4798      	blx	r3
   92aa2:	4603      	mov	r3, r0
   92aa4:	73fb      	strb	r3, [r7, #15]
   92aa6:	4b18      	ldr	r3, [pc, #96]	; (92b08 <cl_hep_controller+0x560>)
   92aa8:	2201      	movs	r2, #1
   92aaa:	701a      	strb	r2, [r3, #0]
   92aac:	e019      	b.n	92ae2 <cl_hep_controller+0x53a>
   92aae:	2005      	movs	r0, #5
   92ab0:	4b18      	ldr	r3, [pc, #96]	; (92b14 <cl_hep_controller+0x56c>)
   92ab2:	4798      	blx	r3
   92ab4:	4603      	mov	r3, r0
   92ab6:	73fb      	strb	r3, [r7, #15]
   92ab8:	4b13      	ldr	r3, [pc, #76]	; (92b08 <cl_hep_controller+0x560>)
   92aba:	2202      	movs	r2, #2
   92abc:	701a      	strb	r2, [r3, #0]
   92abe:	e010      	b.n	92ae2 <cl_hep_controller+0x53a>
   92ac0:	683b      	ldr	r3, [r7, #0]
   92ac2:	b29a      	uxth	r2, r3
   92ac4:	4b11      	ldr	r3, [pc, #68]	; (92b0c <cl_hep_controller+0x564>)
   92ac6:	801a      	strh	r2, [r3, #0]
   92ac8:	e00b      	b.n	92ae2 <cl_hep_controller+0x53a>
   92aca:	683b      	ldr	r3, [r7, #0]
   92acc:	4a10      	ldr	r2, [pc, #64]	; (92b10 <cl_hep_controller+0x568>)
   92ace:	6013      	str	r3, [r2, #0]
   92ad0:	e007      	b.n	92ae2 <cl_hep_controller+0x53a>
   92ad2:	4b0d      	ldr	r3, [pc, #52]	; (92b08 <cl_hep_controller+0x560>)
   92ad4:	220e      	movs	r2, #14
   92ad6:	701a      	strb	r2, [r3, #0]
   92ad8:	e003      	b.n	92ae2 <cl_hep_controller+0x53a>
   92ada:	4b0b      	ldr	r3, [pc, #44]	; (92b08 <cl_hep_controller+0x560>)
   92adc:	220f      	movs	r2, #15
   92ade:	701a      	strb	r2, [r3, #0]
   92ae0:	bf00      	nop
   92ae2:	e00b      	b.n	92afc <cl_hep_controller+0x554>
   92ae4:	bf00      	nop
   92ae6:	e00a      	b.n	92afe <cl_hep_controller+0x556>
   92ae8:	bf00      	nop
   92aea:	e008      	b.n	92afe <cl_hep_controller+0x556>
   92aec:	bf00      	nop
   92aee:	e006      	b.n	92afe <cl_hep_controller+0x556>
   92af0:	bf00      	nop
   92af2:	e004      	b.n	92afe <cl_hep_controller+0x556>
   92af4:	bf00      	nop
   92af6:	e002      	b.n	92afe <cl_hep_controller+0x556>
   92af8:	bf00      	nop
   92afa:	e000      	b.n	92afe <cl_hep_controller+0x556>
   92afc:	bf00      	nop
   92afe:	2300      	movs	r3, #0
   92b00:	4618      	mov	r0, r3
   92b02:	3710      	adds	r7, #16
   92b04:	46bd      	mov	sp, r7
   92b06:	bd80      	pop	{r7, pc}
   92b08:	200726a3 	.word	0x200726a3
   92b0c:	200726a4 	.word	0x200726a4
   92b10:	200709f8 	.word	0x200709f8
   92b14:	00097949 	.word	0x00097949
   92b18:	00092b41 	.word	0x00092b41
   92b1c:	200726a6 	.word	0x200726a6
   92b20:	200726a8 	.word	0x200726a8
   92b24:	00092b61 	.word	0x00092b61

00092b28 <cl_hep_pumpFeedback_start>:
   92b28:	b480      	push	{r7}
   92b2a:	af00      	add	r7, sp, #0
   92b2c:	4b03      	ldr	r3, [pc, #12]	; (92b3c <cl_hep_pumpFeedback_start+0x14>)
   92b2e:	2203      	movs	r2, #3
   92b30:	701a      	strb	r2, [r3, #0]
   92b32:	2300      	movs	r3, #0
   92b34:	4618      	mov	r0, r3
   92b36:	46bd      	mov	sp, r7
   92b38:	bc80      	pop	{r7}
   92b3a:	4770      	bx	lr
   92b3c:	200726b2 	.word	0x200726b2

00092b40 <cl_hep_pumpFeedback_get_state>:
   92b40:	b480      	push	{r7}
   92b42:	b083      	sub	sp, #12
   92b44:	af00      	add	r7, sp, #0
   92b46:	6078      	str	r0, [r7, #4]
   92b48:	4b04      	ldr	r3, [pc, #16]	; (92b5c <cl_hep_pumpFeedback_get_state+0x1c>)
   92b4a:	781a      	ldrb	r2, [r3, #0]
   92b4c:	687b      	ldr	r3, [r7, #4]
   92b4e:	701a      	strb	r2, [r3, #0]
   92b50:	2300      	movs	r3, #0
   92b52:	4618      	mov	r0, r3
   92b54:	370c      	adds	r7, #12
   92b56:	46bd      	mov	sp, r7
   92b58:	bc80      	pop	{r7}
   92b5a:	4770      	bx	lr
   92b5c:	200726b2 	.word	0x200726b2

00092b60 <cl_hep_pumpFeedback_get_delta>:
   92b60:	b480      	push	{r7}
   92b62:	b083      	sub	sp, #12
   92b64:	af00      	add	r7, sp, #0
   92b66:	6078      	str	r0, [r7, #4]
   92b68:	4b07      	ldr	r3, [pc, #28]	; (92b88 <cl_hep_pumpFeedback_get_delta+0x28>)
   92b6a:	881a      	ldrh	r2, [r3, #0]
   92b6c:	4b07      	ldr	r3, [pc, #28]	; (92b8c <cl_hep_pumpFeedback_get_delta+0x2c>)
   92b6e:	881b      	ldrh	r3, [r3, #0]
   92b70:	1ad3      	subs	r3, r2, r3
   92b72:	b29b      	uxth	r3, r3
   92b74:	b21a      	sxth	r2, r3
   92b76:	687b      	ldr	r3, [r7, #4]
   92b78:	801a      	strh	r2, [r3, #0]
   92b7a:	2300      	movs	r3, #0
   92b7c:	4618      	mov	r0, r3
   92b7e:	370c      	adds	r7, #12
   92b80:	46bd      	mov	sp, r7
   92b82:	bc80      	pop	{r7}
   92b84:	4770      	bx	lr
   92b86:	bf00      	nop
   92b88:	200726b6 	.word	0x200726b6
   92b8c:	200726b0 	.word	0x200726b0

00092b90 <cl_hep_pumpFeedback_timer>:
   92b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   92b92:	af00      	add	r7, sp, #0
   92b94:	4b64      	ldr	r3, [pc, #400]	; (92d28 <cl_hep_pumpFeedback_timer+0x198>)
   92b96:	781b      	ldrb	r3, [r3, #0]
   92b98:	2b00      	cmp	r3, #0
   92b9a:	f000 80b8 	beq.w	92d0e <cl_hep_pumpFeedback_timer+0x17e>
   92b9e:	4963      	ldr	r1, [pc, #396]	; (92d2c <cl_hep_pumpFeedback_timer+0x19c>)
   92ba0:	201b      	movs	r0, #27
   92ba2:	4b63      	ldr	r3, [pc, #396]	; (92d30 <cl_hep_pumpFeedback_timer+0x1a0>)
   92ba4:	4798      	blx	r3
   92ba6:	4b63      	ldr	r3, [pc, #396]	; (92d34 <cl_hep_pumpFeedback_timer+0x1a4>)
   92ba8:	881b      	ldrh	r3, [r3, #0]
   92baa:	3301      	adds	r3, #1
   92bac:	b29a      	uxth	r2, r3
   92bae:	4b61      	ldr	r3, [pc, #388]	; (92d34 <cl_hep_pumpFeedback_timer+0x1a4>)
   92bb0:	801a      	strh	r2, [r3, #0]
   92bb2:	4b60      	ldr	r3, [pc, #384]	; (92d34 <cl_hep_pumpFeedback_timer+0x1a4>)
   92bb4:	881b      	ldrh	r3, [r3, #0]
   92bb6:	f242 7210 	movw	r2, #10000	; 0x2710
   92bba:	4293      	cmp	r3, r2
   92bbc:	d903      	bls.n	92bc6 <cl_hep_pumpFeedback_timer+0x36>
   92bbe:	2101      	movs	r1, #1
   92bc0:	2035      	movs	r0, #53	; 0x35
   92bc2:	4b5d      	ldr	r3, [pc, #372]	; (92d38 <cl_hep_pumpFeedback_timer+0x1a8>)
   92bc4:	4798      	blx	r3
   92bc6:	4b58      	ldr	r3, [pc, #352]	; (92d28 <cl_hep_pumpFeedback_timer+0x198>)
   92bc8:	781b      	ldrb	r3, [r3, #0]
   92bca:	2b03      	cmp	r3, #3
   92bcc:	d106      	bne.n	92bdc <cl_hep_pumpFeedback_timer+0x4c>
   92bce:	4b5b      	ldr	r3, [pc, #364]	; (92d3c <cl_hep_pumpFeedback_timer+0x1ac>)
   92bd0:	881b      	ldrh	r3, [r3, #0]
   92bd2:	2b02      	cmp	r3, #2
   92bd4:	d902      	bls.n	92bdc <cl_hep_pumpFeedback_timer+0x4c>
   92bd6:	4b54      	ldr	r3, [pc, #336]	; (92d28 <cl_hep_pumpFeedback_timer+0x198>)
   92bd8:	2204      	movs	r2, #4
   92bda:	701a      	strb	r2, [r3, #0]
   92bdc:	4b58      	ldr	r3, [pc, #352]	; (92d40 <cl_hep_pumpFeedback_timer+0x1b0>)
   92bde:	781b      	ldrb	r3, [r3, #0]
   92be0:	f083 0301 	eor.w	r3, r3, #1
   92be4:	b2db      	uxtb	r3, r3
   92be6:	2b00      	cmp	r3, #0
   92be8:	d012      	beq.n	92c10 <cl_hep_pumpFeedback_timer+0x80>
   92bea:	4b50      	ldr	r3, [pc, #320]	; (92d2c <cl_hep_pumpFeedback_timer+0x19c>)
   92bec:	881b      	ldrh	r3, [r3, #0]
   92bee:	2b00      	cmp	r3, #0
   92bf0:	f040 8089 	bne.w	92d06 <cl_hep_pumpFeedback_timer+0x176>
   92bf4:	4b53      	ldr	r3, [pc, #332]	; (92d44 <cl_hep_pumpFeedback_timer+0x1b4>)
   92bf6:	881a      	ldrh	r2, [r3, #0]
   92bf8:	4b4c      	ldr	r3, [pc, #304]	; (92d2c <cl_hep_pumpFeedback_timer+0x19c>)
   92bfa:	881b      	ldrh	r3, [r3, #0]
   92bfc:	429a      	cmp	r2, r3
   92bfe:	f000 8082 	beq.w	92d06 <cl_hep_pumpFeedback_timer+0x176>
   92c02:	4b4f      	ldr	r3, [pc, #316]	; (92d40 <cl_hep_pumpFeedback_timer+0x1b0>)
   92c04:	2201      	movs	r2, #1
   92c06:	701a      	strb	r2, [r3, #0]
   92c08:	4b4a      	ldr	r3, [pc, #296]	; (92d34 <cl_hep_pumpFeedback_timer+0x1a4>)
   92c0a:	2200      	movs	r2, #0
   92c0c:	801a      	strh	r2, [r3, #0]
   92c0e:	e07a      	b.n	92d06 <cl_hep_pumpFeedback_timer+0x176>
   92c10:	4b46      	ldr	r3, [pc, #280]	; (92d2c <cl_hep_pumpFeedback_timer+0x19c>)
   92c12:	881b      	ldrh	r3, [r3, #0]
   92c14:	2b00      	cmp	r3, #0
   92c16:	d176      	bne.n	92d06 <cl_hep_pumpFeedback_timer+0x176>
   92c18:	4b4a      	ldr	r3, [pc, #296]	; (92d44 <cl_hep_pumpFeedback_timer+0x1b4>)
   92c1a:	881a      	ldrh	r2, [r3, #0]
   92c1c:	4b43      	ldr	r3, [pc, #268]	; (92d2c <cl_hep_pumpFeedback_timer+0x19c>)
   92c1e:	881b      	ldrh	r3, [r3, #0]
   92c20:	429a      	cmp	r2, r3
   92c22:	d070      	beq.n	92d06 <cl_hep_pumpFeedback_timer+0x176>
   92c24:	4b46      	ldr	r3, [pc, #280]	; (92d40 <cl_hep_pumpFeedback_timer+0x1b0>)
   92c26:	2201      	movs	r2, #1
   92c28:	701a      	strb	r2, [r3, #0]
   92c2a:	4b44      	ldr	r3, [pc, #272]	; (92d3c <cl_hep_pumpFeedback_timer+0x1ac>)
   92c2c:	881b      	ldrh	r3, [r3, #0]
   92c2e:	3301      	adds	r3, #1
   92c30:	b29a      	uxth	r2, r3
   92c32:	4b42      	ldr	r3, [pc, #264]	; (92d3c <cl_hep_pumpFeedback_timer+0x1ac>)
   92c34:	801a      	strh	r2, [r3, #0]
   92c36:	4b3f      	ldr	r3, [pc, #252]	; (92d34 <cl_hep_pumpFeedback_timer+0x1a4>)
   92c38:	881b      	ldrh	r3, [r3, #0]
   92c3a:	461a      	mov	r2, r3
   92c3c:	0092      	lsls	r2, r2, #2
   92c3e:	4413      	add	r3, r2
   92c40:	b29a      	uxth	r2, r3
   92c42:	4b41      	ldr	r3, [pc, #260]	; (92d48 <cl_hep_pumpFeedback_timer+0x1b8>)
   92c44:	801a      	strh	r2, [r3, #0]
   92c46:	4b38      	ldr	r3, [pc, #224]	; (92d28 <cl_hep_pumpFeedback_timer+0x198>)
   92c48:	781b      	ldrb	r3, [r3, #0]
   92c4a:	2b03      	cmp	r3, #3
   92c4c:	d04e      	beq.n	92cec <cl_hep_pumpFeedback_timer+0x15c>
   92c4e:	4b3e      	ldr	r3, [pc, #248]	; (92d48 <cl_hep_pumpFeedback_timer+0x1b8>)
   92c50:	881b      	ldrh	r3, [r3, #0]
   92c52:	461a      	mov	r2, r3
   92c54:	4b3d      	ldr	r3, [pc, #244]	; (92d4c <cl_hep_pumpFeedback_timer+0x1bc>)
   92c56:	4610      	mov	r0, r2
   92c58:	4798      	blx	r3
   92c5a:	4605      	mov	r5, r0
   92c5c:	460e      	mov	r6, r1
   92c5e:	4b3c      	ldr	r3, [pc, #240]	; (92d50 <cl_hep_pumpFeedback_timer+0x1c0>)
   92c60:	881b      	ldrh	r3, [r3, #0]
   92c62:	461a      	mov	r2, r3
   92c64:	4b39      	ldr	r3, [pc, #228]	; (92d4c <cl_hep_pumpFeedback_timer+0x1bc>)
   92c66:	4610      	mov	r0, r2
   92c68:	4798      	blx	r3
   92c6a:	4c3a      	ldr	r4, [pc, #232]	; (92d54 <cl_hep_pumpFeedback_timer+0x1c4>)
   92c6c:	a32a      	add	r3, pc, #168	; (adr r3, 92d18 <cl_hep_pumpFeedback_timer+0x188>)
   92c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   92c72:	47a0      	blx	r4
   92c74:	4603      	mov	r3, r0
   92c76:	460c      	mov	r4, r1
   92c78:	461a      	mov	r2, r3
   92c7a:	4623      	mov	r3, r4
   92c7c:	4c36      	ldr	r4, [pc, #216]	; (92d58 <cl_hep_pumpFeedback_timer+0x1c8>)
   92c7e:	4628      	mov	r0, r5
   92c80:	4631      	mov	r1, r6
   92c82:	47a0      	blx	r4
   92c84:	4603      	mov	r3, r0
   92c86:	2b00      	cmp	r3, #0
   92c88:	d007      	beq.n	92c9a <cl_hep_pumpFeedback_timer+0x10a>
   92c8a:	4b27      	ldr	r3, [pc, #156]	; (92d28 <cl_hep_pumpFeedback_timer+0x198>)
   92c8c:	2206      	movs	r2, #6
   92c8e:	701a      	strb	r2, [r3, #0]
   92c90:	2101      	movs	r1, #1
   92c92:	2035      	movs	r0, #53	; 0x35
   92c94:	4b28      	ldr	r3, [pc, #160]	; (92d38 <cl_hep_pumpFeedback_timer+0x1a8>)
   92c96:	4798      	blx	r3
   92c98:	e028      	b.n	92cec <cl_hep_pumpFeedback_timer+0x15c>
   92c9a:	4b2b      	ldr	r3, [pc, #172]	; (92d48 <cl_hep_pumpFeedback_timer+0x1b8>)
   92c9c:	881b      	ldrh	r3, [r3, #0]
   92c9e:	461a      	mov	r2, r3
   92ca0:	4b2a      	ldr	r3, [pc, #168]	; (92d4c <cl_hep_pumpFeedback_timer+0x1bc>)
   92ca2:	4610      	mov	r0, r2
   92ca4:	4798      	blx	r3
   92ca6:	4605      	mov	r5, r0
   92ca8:	460e      	mov	r6, r1
   92caa:	4b29      	ldr	r3, [pc, #164]	; (92d50 <cl_hep_pumpFeedback_timer+0x1c0>)
   92cac:	881b      	ldrh	r3, [r3, #0]
   92cae:	461a      	mov	r2, r3
   92cb0:	4b26      	ldr	r3, [pc, #152]	; (92d4c <cl_hep_pumpFeedback_timer+0x1bc>)
   92cb2:	4610      	mov	r0, r2
   92cb4:	4798      	blx	r3
   92cb6:	4c27      	ldr	r4, [pc, #156]	; (92d54 <cl_hep_pumpFeedback_timer+0x1c4>)
   92cb8:	a319      	add	r3, pc, #100	; (adr r3, 92d20 <cl_hep_pumpFeedback_timer+0x190>)
   92cba:	e9d3 2300 	ldrd	r2, r3, [r3]
   92cbe:	47a0      	blx	r4
   92cc0:	4603      	mov	r3, r0
   92cc2:	460c      	mov	r4, r1
   92cc4:	461a      	mov	r2, r3
   92cc6:	4623      	mov	r3, r4
   92cc8:	4c24      	ldr	r4, [pc, #144]	; (92d5c <cl_hep_pumpFeedback_timer+0x1cc>)
   92cca:	4628      	mov	r0, r5
   92ccc:	4631      	mov	r1, r6
   92cce:	47a0      	blx	r4
   92cd0:	4603      	mov	r3, r0
   92cd2:	2b00      	cmp	r3, #0
   92cd4:	d007      	beq.n	92ce6 <cl_hep_pumpFeedback_timer+0x156>
   92cd6:	4b14      	ldr	r3, [pc, #80]	; (92d28 <cl_hep_pumpFeedback_timer+0x198>)
   92cd8:	2207      	movs	r2, #7
   92cda:	701a      	strb	r2, [r3, #0]
   92cdc:	2101      	movs	r1, #1
   92cde:	2034      	movs	r0, #52	; 0x34
   92ce0:	4b15      	ldr	r3, [pc, #84]	; (92d38 <cl_hep_pumpFeedback_timer+0x1a8>)
   92ce2:	4798      	blx	r3
   92ce4:	e002      	b.n	92cec <cl_hep_pumpFeedback_timer+0x15c>
   92ce6:	4b10      	ldr	r3, [pc, #64]	; (92d28 <cl_hep_pumpFeedback_timer+0x198>)
   92ce8:	2205      	movs	r2, #5
   92cea:	701a      	strb	r2, [r3, #0]
   92cec:	4b16      	ldr	r3, [pc, #88]	; (92d48 <cl_hep_pumpFeedback_timer+0x1b8>)
   92cee:	881b      	ldrh	r3, [r3, #0]
   92cf0:	461a      	mov	r2, r3
   92cf2:	f64e 2360 	movw	r3, #60000	; 0xea60
   92cf6:	fb93 f3f2 	sdiv	r3, r3, r2
   92cfa:	b29a      	uxth	r2, r3
   92cfc:	4b18      	ldr	r3, [pc, #96]	; (92d60 <cl_hep_pumpFeedback_timer+0x1d0>)
   92cfe:	801a      	strh	r2, [r3, #0]
   92d00:	4b0c      	ldr	r3, [pc, #48]	; (92d34 <cl_hep_pumpFeedback_timer+0x1a4>)
   92d02:	2200      	movs	r2, #0
   92d04:	801a      	strh	r2, [r3, #0]
   92d06:	4b09      	ldr	r3, [pc, #36]	; (92d2c <cl_hep_pumpFeedback_timer+0x19c>)
   92d08:	881a      	ldrh	r2, [r3, #0]
   92d0a:	4b0e      	ldr	r3, [pc, #56]	; (92d44 <cl_hep_pumpFeedback_timer+0x1b4>)
   92d0c:	801a      	strh	r2, [r3, #0]
   92d0e:	2300      	movs	r3, #0
   92d10:	4618      	mov	r0, r3
   92d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   92d14:	f3af 8000 	nop.w
   92d18:	c28f5c29 	.word	0xc28f5c29
   92d1c:	3ff028f5 	.word	0x3ff028f5
   92d20:	7ae147ae 	.word	0x7ae147ae
   92d24:	3fefae14 	.word	0x3fefae14
   92d28:	200726b2 	.word	0x200726b2
   92d2c:	200709fc 	.word	0x200709fc
   92d30:	0008d6b1 	.word	0x0008d6b1
   92d34:	200726b4 	.word	0x200726b4
   92d38:	000830a5 	.word	0x000830a5
   92d3c:	200726ba 	.word	0x200726ba
   92d40:	200726bc 	.word	0x200726bc
   92d44:	200709fe 	.word	0x200709fe
   92d48:	200726b6 	.word	0x200726b6
   92d4c:	000a34c9 	.word	0x000a34c9
   92d50:	200726b0 	.word	0x200726b0
   92d54:	000a3595 	.word	0x000a3595
   92d58:	000a3ab5 	.word	0x000a3ab5
   92d5c:	000a3a79 	.word	0x000a3a79
   92d60:	200726b8 	.word	0x200726b8

00092d64 <cl_hep_pump_enddetction_timer>:
   92d64:	b580      	push	{r7, lr}
   92d66:	af00      	add	r7, sp, #0
   92d68:	4915      	ldr	r1, [pc, #84]	; (92dc0 <cl_hep_pump_enddetction_timer+0x5c>)
   92d6a:	2017      	movs	r0, #23
   92d6c:	4b15      	ldr	r3, [pc, #84]	; (92dc4 <cl_hep_pump_enddetction_timer+0x60>)
   92d6e:	4798      	blx	r3
   92d70:	4b15      	ldr	r3, [pc, #84]	; (92dc8 <cl_hep_pump_enddetction_timer+0x64>)
   92d72:	881a      	ldrh	r2, [r3, #0]
   92d74:	4b12      	ldr	r3, [pc, #72]	; (92dc0 <cl_hep_pump_enddetction_timer+0x5c>)
   92d76:	881b      	ldrh	r3, [r3, #0]
   92d78:	429a      	cmp	r2, r3
   92d7a:	d009      	beq.n	92d90 <cl_hep_pump_enddetction_timer+0x2c>
   92d7c:	4b10      	ldr	r3, [pc, #64]	; (92dc0 <cl_hep_pump_enddetction_timer+0x5c>)
   92d7e:	881a      	ldrh	r2, [r3, #0]
   92d80:	4b11      	ldr	r3, [pc, #68]	; (92dc8 <cl_hep_pump_enddetction_timer+0x64>)
   92d82:	801a      	strh	r2, [r3, #0]
   92d84:	4b0e      	ldr	r3, [pc, #56]	; (92dc0 <cl_hep_pump_enddetction_timer+0x5c>)
   92d86:	881b      	ldrh	r3, [r3, #0]
   92d88:	2b00      	cmp	r3, #0
   92d8a:	d101      	bne.n	92d90 <cl_hep_pump_enddetction_timer+0x2c>
   92d8c:	4b0f      	ldr	r3, [pc, #60]	; (92dcc <cl_hep_pump_enddetction_timer+0x68>)
   92d8e:	4798      	blx	r3
   92d90:	490f      	ldr	r1, [pc, #60]	; (92dd0 <cl_hep_pump_enddetction_timer+0x6c>)
   92d92:	2018      	movs	r0, #24
   92d94:	4b0b      	ldr	r3, [pc, #44]	; (92dc4 <cl_hep_pump_enddetction_timer+0x60>)
   92d96:	4798      	blx	r3
   92d98:	4b0e      	ldr	r3, [pc, #56]	; (92dd4 <cl_hep_pump_enddetction_timer+0x70>)
   92d9a:	881a      	ldrh	r2, [r3, #0]
   92d9c:	4b0c      	ldr	r3, [pc, #48]	; (92dd0 <cl_hep_pump_enddetction_timer+0x6c>)
   92d9e:	881b      	ldrh	r3, [r3, #0]
   92da0:	429a      	cmp	r2, r3
   92da2:	d009      	beq.n	92db8 <cl_hep_pump_enddetction_timer+0x54>
   92da4:	4b0a      	ldr	r3, [pc, #40]	; (92dd0 <cl_hep_pump_enddetction_timer+0x6c>)
   92da6:	881a      	ldrh	r2, [r3, #0]
   92da8:	4b0a      	ldr	r3, [pc, #40]	; (92dd4 <cl_hep_pump_enddetction_timer+0x70>)
   92daa:	801a      	strh	r2, [r3, #0]
   92dac:	4b08      	ldr	r3, [pc, #32]	; (92dd0 <cl_hep_pump_enddetction_timer+0x6c>)
   92dae:	881b      	ldrh	r3, [r3, #0]
   92db0:	2b01      	cmp	r3, #1
   92db2:	d101      	bne.n	92db8 <cl_hep_pump_enddetction_timer+0x54>
   92db4:	4b08      	ldr	r3, [pc, #32]	; (92dd8 <cl_hep_pump_enddetction_timer+0x74>)
   92db6:	4798      	blx	r3
   92db8:	2300      	movs	r3, #0
   92dba:	4618      	mov	r0, r3
   92dbc:	bd80      	pop	{r7, pc}
   92dbe:	bf00      	nop
   92dc0:	200726be 	.word	0x200726be
   92dc4:	0008d6b1 	.word	0x0008d6b1
   92dc8:	200726c0 	.word	0x200726c0
   92dcc:	00097a11 	.word	0x00097a11
   92dd0:	200726c2 	.word	0x200726c2
   92dd4:	200726c4 	.word	0x200726c4
   92dd8:	000979fd 	.word	0x000979fd

00092ddc <cl_level_switchcontroller>:
   92ddc:	b580      	push	{r7, lr}
   92dde:	b084      	sub	sp, #16
   92de0:	af00      	add	r7, sp, #0
   92de2:	4603      	mov	r3, r0
   92de4:	71fb      	strb	r3, [r7, #7]
   92de6:	79fb      	ldrb	r3, [r7, #7]
   92de8:	3b01      	subs	r3, #1
   92dea:	2b03      	cmp	r3, #3
   92dec:	d851      	bhi.n	92e92 <cl_level_switchcontroller+0xb6>
   92dee:	a201      	add	r2, pc, #4	; (adr r2, 92df4 <cl_level_switchcontroller+0x18>)
   92df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92df4:	00092e05 	.word	0x00092e05
   92df8:	00092e93 	.word	0x00092e93
   92dfc:	00092e93 	.word	0x00092e93
   92e00:	00092e33 	.word	0x00092e33
   92e04:	203e      	movs	r0, #62	; 0x3e
   92e06:	4b27      	ldr	r3, [pc, #156]	; (92ea4 <cl_level_switchcontroller+0xc8>)
   92e08:	4798      	blx	r3
   92e0a:	203d      	movs	r0, #61	; 0x3d
   92e0c:	4b25      	ldr	r3, [pc, #148]	; (92ea4 <cl_level_switchcontroller+0xc8>)
   92e0e:	4798      	blx	r3
   92e10:	202d      	movs	r0, #45	; 0x2d
   92e12:	4b24      	ldr	r3, [pc, #144]	; (92ea4 <cl_level_switchcontroller+0xc8>)
   92e14:	4798      	blx	r3
   92e16:	4b24      	ldr	r3, [pc, #144]	; (92ea8 <cl_level_switchcontroller+0xcc>)
   92e18:	881b      	ldrh	r3, [r3, #0]
   92e1a:	3301      	adds	r3, #1
   92e1c:	b29a      	uxth	r2, r3
   92e1e:	4b22      	ldr	r3, [pc, #136]	; (92ea8 <cl_level_switchcontroller+0xcc>)
   92e20:	801a      	strh	r2, [r3, #0]
   92e22:	2300      	movs	r3, #0
   92e24:	60fb      	str	r3, [r7, #12]
   92e26:	4b20      	ldr	r3, [pc, #128]	; (92ea8 <cl_level_switchcontroller+0xcc>)
   92e28:	881b      	ldrh	r3, [r3, #0]
   92e2a:	81bb      	strh	r3, [r7, #12]
   92e2c:	2315      	movs	r3, #21
   92e2e:	73bb      	strb	r3, [r7, #14]
   92e30:	e032      	b.n	92e98 <cl_level_switchcontroller+0xbc>
   92e32:	4b1e      	ldr	r3, [pc, #120]	; (92eac <cl_level_switchcontroller+0xd0>)
   92e34:	781b      	ldrb	r3, [r3, #0]
   92e36:	2b01      	cmp	r3, #1
   92e38:	d113      	bne.n	92e62 <cl_level_switchcontroller+0x86>
   92e3a:	2001      	movs	r0, #1
   92e3c:	4b1c      	ldr	r3, [pc, #112]	; (92eb0 <cl_level_switchcontroller+0xd4>)
   92e3e:	4798      	blx	r3
   92e40:	4b1a      	ldr	r3, [pc, #104]	; (92eac <cl_level_switchcontroller+0xd0>)
   92e42:	2200      	movs	r2, #0
   92e44:	701a      	strb	r2, [r3, #0]
   92e46:	4b1b      	ldr	r3, [pc, #108]	; (92eb4 <cl_level_switchcontroller+0xd8>)
   92e48:	2200      	movs	r2, #0
   92e4a:	801a      	strh	r2, [r3, #0]
   92e4c:	4b1a      	ldr	r3, [pc, #104]	; (92eb8 <cl_level_switchcontroller+0xdc>)
   92e4e:	781b      	ldrb	r3, [r3, #0]
   92e50:	2b02      	cmp	r3, #2
   92e52:	d020      	beq.n	92e96 <cl_level_switchcontroller+0xba>
   92e54:	4b14      	ldr	r3, [pc, #80]	; (92ea8 <cl_level_switchcontroller+0xcc>)
   92e56:	2200      	movs	r2, #0
   92e58:	801a      	strh	r2, [r3, #0]
   92e5a:	4b17      	ldr	r3, [pc, #92]	; (92eb8 <cl_level_switchcontroller+0xdc>)
   92e5c:	2202      	movs	r2, #2
   92e5e:	701a      	strb	r2, [r3, #0]
   92e60:	e019      	b.n	92e96 <cl_level_switchcontroller+0xba>
   92e62:	4b12      	ldr	r3, [pc, #72]	; (92eac <cl_level_switchcontroller+0xd0>)
   92e64:	781b      	ldrb	r3, [r3, #0]
   92e66:	2b02      	cmp	r3, #2
   92e68:	d115      	bne.n	92e96 <cl_level_switchcontroller+0xba>
   92e6a:	2001      	movs	r0, #1
   92e6c:	4b13      	ldr	r3, [pc, #76]	; (92ebc <cl_level_switchcontroller+0xe0>)
   92e6e:	4798      	blx	r3
   92e70:	4b0e      	ldr	r3, [pc, #56]	; (92eac <cl_level_switchcontroller+0xd0>)
   92e72:	2200      	movs	r2, #0
   92e74:	701a      	strb	r2, [r3, #0]
   92e76:	4b12      	ldr	r3, [pc, #72]	; (92ec0 <cl_level_switchcontroller+0xe4>)
   92e78:	2200      	movs	r2, #0
   92e7a:	801a      	strh	r2, [r3, #0]
   92e7c:	4b0e      	ldr	r3, [pc, #56]	; (92eb8 <cl_level_switchcontroller+0xdc>)
   92e7e:	781b      	ldrb	r3, [r3, #0]
   92e80:	2b01      	cmp	r3, #1
   92e82:	d008      	beq.n	92e96 <cl_level_switchcontroller+0xba>
   92e84:	4b08      	ldr	r3, [pc, #32]	; (92ea8 <cl_level_switchcontroller+0xcc>)
   92e86:	2200      	movs	r2, #0
   92e88:	801a      	strh	r2, [r3, #0]
   92e8a:	4b0b      	ldr	r3, [pc, #44]	; (92eb8 <cl_level_switchcontroller+0xdc>)
   92e8c:	2201      	movs	r2, #1
   92e8e:	701a      	strb	r2, [r3, #0]
   92e90:	e001      	b.n	92e96 <cl_level_switchcontroller+0xba>
   92e92:	bf00      	nop
   92e94:	e000      	b.n	92e98 <cl_level_switchcontroller+0xbc>
   92e96:	bf00      	nop
   92e98:	2300      	movs	r3, #0
   92e9a:	4618      	mov	r0, r3
   92e9c:	3710      	adds	r7, #16
   92e9e:	46bd      	mov	sp, r7
   92ea0:	bd80      	pop	{r7, pc}
   92ea2:	bf00      	nop
   92ea4:	00082ff1 	.word	0x00082ff1
   92ea8:	200726ce 	.word	0x200726ce
   92eac:	200726c8 	.word	0x200726c8
   92eb0:	000979cd 	.word	0x000979cd
   92eb4:	200726cc 	.word	0x200726cc
   92eb8:	200726d0 	.word	0x200726d0
   92ebc:	000979ad 	.word	0x000979ad
   92ec0:	200726ca 	.word	0x200726ca

00092ec4 <cl_isouf_controller>:
   92ec4:	b580      	push	{r7, lr}
   92ec6:	b088      	sub	sp, #32
   92ec8:	af00      	add	r7, sp, #0
   92eca:	4603      	mov	r3, r0
   92ecc:	71fb      	strb	r3, [r7, #7]
   92ece:	2300      	movs	r3, #0
   92ed0:	83fb      	strh	r3, [r7, #30]
   92ed2:	2300      	movs	r3, #0
   92ed4:	61bb      	str	r3, [r7, #24]
   92ed6:	2300      	movs	r3, #0
   92ed8:	617b      	str	r3, [r7, #20]
   92eda:	234d      	movs	r3, #77	; 0x4d
   92edc:	74fb      	strb	r3, [r7, #19]
   92ede:	2300      	movs	r3, #0
   92ee0:	747b      	strb	r3, [r7, #17]
   92ee2:	2300      	movs	r3, #0
   92ee4:	74bb      	strb	r3, [r7, #18]
   92ee6:	2300      	movs	r3, #0
   92ee8:	60fb      	str	r3, [r7, #12]
   92eea:	2300      	movs	r3, #0
   92eec:	72fb      	strb	r3, [r7, #11]
   92eee:	f107 020b 	add.w	r2, r7, #11
   92ef2:	79fb      	ldrb	r3, [r7, #7]
   92ef4:	4611      	mov	r1, r2
   92ef6:	4618      	mov	r0, r3
   92ef8:	4b50      	ldr	r3, [pc, #320]	; (9303c <cl_isouf_controller+0x178>)
   92efa:	4798      	blx	r3
   92efc:	4603      	mov	r3, r0
   92efe:	461a      	mov	r2, r3
   92f00:	4b4f      	ldr	r3, [pc, #316]	; (93040 <cl_isouf_controller+0x17c>)
   92f02:	701a      	strb	r2, [r3, #0]
   92f04:	4b4f      	ldr	r3, [pc, #316]	; (93044 <cl_isouf_controller+0x180>)
   92f06:	781b      	ldrb	r3, [r3, #0]
   92f08:	2b07      	cmp	r3, #7
   92f0a:	f200 8090 	bhi.w	9302e <cl_isouf_controller+0x16a>
   92f0e:	a201      	add	r2, pc, #4	; (adr r2, 92f14 <cl_isouf_controller+0x50>)
   92f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92f14:	00092f35 	.word	0x00092f35
   92f18:	00092f4b 	.word	0x00092f4b
   92f1c:	00092fe9 	.word	0x00092fe9
   92f20:	0009302f 	.word	0x0009302f
   92f24:	00092fff 	.word	0x00092fff
   92f28:	0009302f 	.word	0x0009302f
   92f2c:	0009302f 	.word	0x0009302f
   92f30:	0009301b 	.word	0x0009301b
   92f34:	7afb      	ldrb	r3, [r7, #11]
   92f36:	2b16      	cmp	r3, #22
   92f38:	d000      	beq.n	92f3c <cl_isouf_controller+0x78>
   92f3a:	e005      	b.n	92f48 <cl_isouf_controller+0x84>
   92f3c:	4b42      	ldr	r3, [pc, #264]	; (93048 <cl_isouf_controller+0x184>)
   92f3e:	4798      	blx	r3
   92f40:	4b40      	ldr	r3, [pc, #256]	; (93044 <cl_isouf_controller+0x180>)
   92f42:	2201      	movs	r2, #1
   92f44:	701a      	strb	r2, [r3, #0]
   92f46:	bf00      	nop
   92f48:	e072      	b.n	93030 <cl_isouf_controller+0x16c>
   92f4a:	7afb      	ldrb	r3, [r7, #11]
   92f4c:	2b09      	cmp	r3, #9
   92f4e:	d007      	beq.n	92f60 <cl_isouf_controller+0x9c>
   92f50:	2b18      	cmp	r3, #24
   92f52:	d03e      	beq.n	92fd2 <cl_isouf_controller+0x10e>
   92f54:	2b08      	cmp	r3, #8
   92f56:	d000      	beq.n	92f5a <cl_isouf_controller+0x96>
   92f58:	e045      	b.n	92fe6 <cl_isouf_controller+0x122>
   92f5a:	4b3c      	ldr	r3, [pc, #240]	; (9304c <cl_isouf_controller+0x188>)
   92f5c:	4798      	blx	r3
   92f5e:	e042      	b.n	92fe6 <cl_isouf_controller+0x122>
   92f60:	4b3b      	ldr	r3, [pc, #236]	; (93050 <cl_isouf_controller+0x18c>)
   92f62:	681b      	ldr	r3, [r3, #0]
   92f64:	3301      	adds	r3, #1
   92f66:	4a3a      	ldr	r2, [pc, #232]	; (93050 <cl_isouf_controller+0x18c>)
   92f68:	6013      	str	r3, [r2, #0]
   92f6a:	4b35      	ldr	r3, [pc, #212]	; (93040 <cl_isouf_controller+0x17c>)
   92f6c:	781b      	ldrb	r3, [r3, #0]
   92f6e:	2b00      	cmp	r3, #0
   92f70:	d138      	bne.n	92fe4 <cl_isouf_controller+0x120>
   92f72:	4b38      	ldr	r3, [pc, #224]	; (93054 <cl_isouf_controller+0x190>)
   92f74:	4798      	blx	r3
   92f76:	4b38      	ldr	r3, [pc, #224]	; (93058 <cl_isouf_controller+0x194>)
   92f78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   92f7a:	4613      	mov	r3, r2
   92f7c:	011b      	lsls	r3, r3, #4
   92f7e:	1a9b      	subs	r3, r3, r2
   92f80:	009b      	lsls	r3, r3, #2
   92f82:	461a      	mov	r2, r3
   92f84:	4b32      	ldr	r3, [pc, #200]	; (93050 <cl_isouf_controller+0x18c>)
   92f86:	681b      	ldr	r3, [r3, #0]
   92f88:	429a      	cmp	r2, r3
   92f8a:	d82b      	bhi.n	92fe4 <cl_isouf_controller+0x120>
   92f8c:	4b33      	ldr	r3, [pc, #204]	; (9305c <cl_isouf_controller+0x198>)
   92f8e:	4798      	blx	r3
   92f90:	4b2b      	ldr	r3, [pc, #172]	; (93040 <cl_isouf_controller+0x17c>)
   92f92:	781b      	ldrb	r3, [r3, #0]
   92f94:	2b00      	cmp	r3, #0
   92f96:	d125      	bne.n	92fe4 <cl_isouf_controller+0x120>
   92f98:	4b2a      	ldr	r3, [pc, #168]	; (93044 <cl_isouf_controller+0x180>)
   92f9a:	2204      	movs	r2, #4
   92f9c:	701a      	strb	r2, [r3, #0]
   92f9e:	4b30      	ldr	r3, [pc, #192]	; (93060 <cl_isouf_controller+0x19c>)
   92fa0:	2200      	movs	r2, #0
   92fa2:	701a      	strb	r2, [r3, #0]
   92fa4:	234a      	movs	r3, #74	; 0x4a
   92fa6:	74fb      	strb	r3, [r7, #19]
   92fa8:	2301      	movs	r3, #1
   92faa:	747b      	strb	r3, [r7, #17]
   92fac:	f107 0111 	add.w	r1, r7, #17
   92fb0:	7cfb      	ldrb	r3, [r7, #19]
   92fb2:	2201      	movs	r2, #1
   92fb4:	4618      	mov	r0, r3
   92fb6:	4b2b      	ldr	r3, [pc, #172]	; (93064 <cl_isouf_controller+0x1a0>)
   92fb8:	4798      	blx	r3
   92fba:	4603      	mov	r3, r0
   92fbc:	461a      	mov	r2, r3
   92fbe:	4b20      	ldr	r3, [pc, #128]	; (93040 <cl_isouf_controller+0x17c>)
   92fc0:	701a      	strb	r2, [r3, #0]
   92fc2:	205a      	movs	r0, #90	; 0x5a
   92fc4:	4b28      	ldr	r3, [pc, #160]	; (93068 <cl_isouf_controller+0x1a4>)
   92fc6:	4798      	blx	r3
   92fc8:	4603      	mov	r3, r0
   92fca:	461a      	mov	r2, r3
   92fcc:	4b1c      	ldr	r3, [pc, #112]	; (93040 <cl_isouf_controller+0x17c>)
   92fce:	701a      	strb	r2, [r3, #0]
   92fd0:	e008      	b.n	92fe4 <cl_isouf_controller+0x120>
   92fd2:	4b26      	ldr	r3, [pc, #152]	; (9306c <cl_isouf_controller+0x1a8>)
   92fd4:	4798      	blx	r3
   92fd6:	4b22      	ldr	r3, [pc, #136]	; (93060 <cl_isouf_controller+0x19c>)
   92fd8:	2200      	movs	r2, #0
   92fda:	701a      	strb	r2, [r3, #0]
   92fdc:	4b19      	ldr	r3, [pc, #100]	; (93044 <cl_isouf_controller+0x180>)
   92fde:	2202      	movs	r2, #2
   92fe0:	701a      	strb	r2, [r3, #0]
   92fe2:	e000      	b.n	92fe6 <cl_isouf_controller+0x122>
   92fe4:	bf00      	nop
   92fe6:	e023      	b.n	93030 <cl_isouf_controller+0x16c>
   92fe8:	7afb      	ldrb	r3, [r7, #11]
   92fea:	2b16      	cmp	r3, #22
   92fec:	d000      	beq.n	92ff0 <cl_isouf_controller+0x12c>
   92fee:	e005      	b.n	92ffc <cl_isouf_controller+0x138>
   92ff0:	4b1f      	ldr	r3, [pc, #124]	; (93070 <cl_isouf_controller+0x1ac>)
   92ff2:	4798      	blx	r3
   92ff4:	4b13      	ldr	r3, [pc, #76]	; (93044 <cl_isouf_controller+0x180>)
   92ff6:	2201      	movs	r2, #1
   92ff8:	701a      	strb	r2, [r3, #0]
   92ffa:	bf00      	nop
   92ffc:	e018      	b.n	93030 <cl_isouf_controller+0x16c>
   92ffe:	7afb      	ldrb	r3, [r7, #11]
   93000:	2b09      	cmp	r3, #9
   93002:	d008      	beq.n	93016 <cl_isouf_controller+0x152>
   93004:	2b16      	cmp	r3, #22
   93006:	d000      	beq.n	9300a <cl_isouf_controller+0x146>
   93008:	e006      	b.n	93018 <cl_isouf_controller+0x154>
   9300a:	4b19      	ldr	r3, [pc, #100]	; (93070 <cl_isouf_controller+0x1ac>)
   9300c:	4798      	blx	r3
   9300e:	4b0d      	ldr	r3, [pc, #52]	; (93044 <cl_isouf_controller+0x180>)
   93010:	2201      	movs	r2, #1
   93012:	701a      	strb	r2, [r3, #0]
   93014:	e000      	b.n	93018 <cl_isouf_controller+0x154>
   93016:	bf00      	nop
   93018:	e00a      	b.n	93030 <cl_isouf_controller+0x16c>
   9301a:	7afb      	ldrb	r3, [r7, #11]
   9301c:	2b09      	cmp	r3, #9
   9301e:	d002      	beq.n	93026 <cl_isouf_controller+0x162>
   93020:	2b0e      	cmp	r3, #14
   93022:	d002      	beq.n	9302a <cl_isouf_controller+0x166>
   93024:	e002      	b.n	9302c <cl_isouf_controller+0x168>
   93026:	bf00      	nop
   93028:	e002      	b.n	93030 <cl_isouf_controller+0x16c>
   9302a:	bf00      	nop
   9302c:	e000      	b.n	93030 <cl_isouf_controller+0x16c>
   9302e:	bf00      	nop
   93030:	2300      	movs	r3, #0
   93032:	4618      	mov	r0, r3
   93034:	3720      	adds	r7, #32
   93036:	46bd      	mov	sp, r7
   93038:	bd80      	pop	{r7, pc}
   9303a:	bf00      	nop
   9303c:	00093961 	.word	0x00093961
   93040:	200726d2 	.word	0x200726d2
   93044:	200726d1 	.word	0x200726d1
   93048:	000930ad 	.word	0x000930ad
   9304c:	00093935 	.word	0x00093935
   93050:	200726d4 	.word	0x200726d4
   93054:	00093129 	.word	0x00093129
   93058:	200731a4 	.word	0x200731a4
   9305c:	00093b95 	.word	0x00093b95
   93060:	200726d8 	.word	0x200726d8
   93064:	00099729 	.word	0x00099729
   93068:	0008a611 	.word	0x0008a611
   9306c:	00093075 	.word	0x00093075
   93070:	00093bad 	.word	0x00093bad

00093074 <Cl_Isouf_stop>:
   93074:	b580      	push	{r7, lr}
   93076:	b082      	sub	sp, #8
   93078:	af00      	add	r7, sp, #0
   9307a:	2100      	movs	r1, #0
   9307c:	2004      	movs	r0, #4
   9307e:	4b08      	ldr	r3, [pc, #32]	; (930a0 <Cl_Isouf_stop+0x2c>)
   93080:	4798      	blx	r3
   93082:	1dfb      	adds	r3, r7, #7
   93084:	2200      	movs	r2, #0
   93086:	4619      	mov	r1, r3
   93088:	204c      	movs	r0, #76	; 0x4c
   9308a:	4b06      	ldr	r3, [pc, #24]	; (930a4 <Cl_Isouf_stop+0x30>)
   9308c:	4798      	blx	r3
   9308e:	4603      	mov	r3, r0
   93090:	461a      	mov	r2, r3
   93092:	4b05      	ldr	r3, [pc, #20]	; (930a8 <Cl_Isouf_stop+0x34>)
   93094:	701a      	strb	r2, [r3, #0]
   93096:	bf00      	nop
   93098:	4618      	mov	r0, r3
   9309a:	3708      	adds	r7, #8
   9309c:	46bd      	mov	sp, r7
   9309e:	bd80      	pop	{r7, pc}
   930a0:	00093cd9 	.word	0x00093cd9
   930a4:	00099729 	.word	0x00099729
   930a8:	200726d2 	.word	0x200726d2

000930ac <Cl_Isouf_start>:
   930ac:	b580      	push	{r7, lr}
   930ae:	b082      	sub	sp, #8
   930b0:	af00      	add	r7, sp, #0
   930b2:	4b14      	ldr	r3, [pc, #80]	; (93104 <Cl_Isouf_start+0x58>)
   930b4:	2200      	movs	r2, #0
   930b6:	601a      	str	r2, [r3, #0]
   930b8:	200d      	movs	r0, #13
   930ba:	4b13      	ldr	r3, [pc, #76]	; (93108 <Cl_Isouf_start+0x5c>)
   930bc:	4798      	blx	r3
   930be:	200e      	movs	r0, #14
   930c0:	4b12      	ldr	r3, [pc, #72]	; (9310c <Cl_Isouf_start+0x60>)
   930c2:	4798      	blx	r3
   930c4:	200f      	movs	r0, #15
   930c6:	4b11      	ldr	r3, [pc, #68]	; (9310c <Cl_Isouf_start+0x60>)
   930c8:	4798      	blx	r3
   930ca:	2100      	movs	r1, #0
   930cc:	200a      	movs	r0, #10
   930ce:	4b10      	ldr	r3, [pc, #64]	; (93110 <Cl_Isouf_start+0x64>)
   930d0:	4798      	blx	r3
   930d2:	2100      	movs	r1, #0
   930d4:	2002      	movs	r0, #2
   930d6:	4b0f      	ldr	r3, [pc, #60]	; (93114 <Cl_Isouf_start+0x68>)
   930d8:	4798      	blx	r3
   930da:	4b0f      	ldr	r3, [pc, #60]	; (93118 <Cl_Isouf_start+0x6c>)
   930dc:	2201      	movs	r2, #1
   930de:	701a      	strb	r2, [r3, #0]
   930e0:	1dfb      	adds	r3, r7, #7
   930e2:	2200      	movs	r2, #0
   930e4:	4619      	mov	r1, r3
   930e6:	204b      	movs	r0, #75	; 0x4b
   930e8:	4b0c      	ldr	r3, [pc, #48]	; (9311c <Cl_Isouf_start+0x70>)
   930ea:	4798      	blx	r3
   930ec:	4603      	mov	r3, r0
   930ee:	461a      	mov	r2, r3
   930f0:	4b0b      	ldr	r3, [pc, #44]	; (93120 <Cl_Isouf_start+0x74>)
   930f2:	701a      	strb	r2, [r3, #0]
   930f4:	4b0b      	ldr	r3, [pc, #44]	; (93124 <Cl_Isouf_start+0x78>)
   930f6:	4798      	blx	r3
   930f8:	bf00      	nop
   930fa:	4618      	mov	r0, r3
   930fc:	3708      	adds	r7, #8
   930fe:	46bd      	mov	sp, r7
   93100:	bd80      	pop	{r7, pc}
   93102:	bf00      	nop
   93104:	200726d4 	.word	0x200726d4
   93108:	000979cd 	.word	0x000979cd
   9310c:	000979ad 	.word	0x000979ad
   93110:	000925a9 	.word	0x000925a9
   93114:	00093cd9 	.word	0x00093cd9
   93118:	200726d8 	.word	0x200726d8
   9311c:	00099729 	.word	0x00099729
   93120:	200726d2 	.word	0x200726d2
   93124:	000938f1 	.word	0x000938f1

00093128 <Cl_Iso_Senddata>:
   93128:	b5f0      	push	{r4, r5, r6, r7, lr}
   9312a:	b095      	sub	sp, #84	; 0x54
   9312c:	af00      	add	r7, sp, #0
   9312e:	f107 030c 	add.w	r3, r7, #12
   93132:	2228      	movs	r2, #40	; 0x28
   93134:	2100      	movs	r1, #0
   93136:	4618      	mov	r0, r3
   93138:	4b95      	ldr	r3, [pc, #596]	; (93390 <Cl_Iso_Senddata+0x268>)
   9313a:	4798      	blx	r3
   9313c:	2300      	movs	r3, #0
   9313e:	807b      	strh	r3, [r7, #2]
   93140:	2300      	movs	r3, #0
   93142:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
   93146:	2300      	movs	r3, #0
   93148:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
   9314c:	2300      	movs	r3, #0
   9314e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
   93152:	234d      	movs	r3, #77	; 0x4d
   93154:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
   93158:	232a      	movs	r3, #42	; 0x2a
   9315a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
   9315e:	230c      	movs	r3, #12
   93160:	733b      	strb	r3, [r7, #12]
   93162:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   93166:	3301      	adds	r3, #1
   93168:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
   9316c:	1cbb      	adds	r3, r7, #2
   9316e:	4619      	mov	r1, r3
   93170:	2014      	movs	r0, #20
   93172:	4b88      	ldr	r3, [pc, #544]	; (93394 <Cl_Iso_Senddata+0x26c>)
   93174:	4798      	blx	r3
   93176:	887a      	ldrh	r2, [r7, #2]
   93178:	4b87      	ldr	r3, [pc, #540]	; (93398 <Cl_Iso_Senddata+0x270>)
   9317a:	4610      	mov	r0, r2
   9317c:	4798      	blx	r3
   9317e:	4603      	mov	r3, r0
   93180:	647b      	str	r3, [r7, #68]	; 0x44
   93182:	4b86      	ldr	r3, [pc, #536]	; (9339c <Cl_Iso_Senddata+0x274>)
   93184:	4986      	ldr	r1, [pc, #536]	; (933a0 <Cl_Iso_Senddata+0x278>)
   93186:	6c78      	ldr	r0, [r7, #68]	; 0x44
   93188:	4798      	blx	r3
   9318a:	4603      	mov	r3, r0
   9318c:	461a      	mov	r2, r3
   9318e:	4b85      	ldr	r3, [pc, #532]	; (933a4 <Cl_Iso_Senddata+0x27c>)
   93190:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
   93194:	4610      	mov	r0, r2
   93196:	4798      	blx	r3
   93198:	4603      	mov	r3, r0
   9319a:	461a      	mov	r2, r3
   9319c:	4b82      	ldr	r3, [pc, #520]	; (933a8 <Cl_Iso_Senddata+0x280>)
   9319e:	4610      	mov	r0, r2
   931a0:	4798      	blx	r3
   931a2:	4603      	mov	r3, r0
   931a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
   931a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   931ac:	4618      	mov	r0, r3
   931ae:	4b7f      	ldr	r3, [pc, #508]	; (933ac <Cl_Iso_Senddata+0x284>)
   931b0:	4798      	blx	r3
   931b2:	4b7f      	ldr	r3, [pc, #508]	; (933b0 <Cl_Iso_Senddata+0x288>)
   931b4:	681a      	ldr	r2, [r3, #0]
   931b6:	4b7b      	ldr	r3, [pc, #492]	; (933a4 <Cl_Iso_Senddata+0x27c>)
   931b8:	497e      	ldr	r1, [pc, #504]	; (933b4 <Cl_Iso_Senddata+0x28c>)
   931ba:	4610      	mov	r0, r2
   931bc:	4798      	blx	r3
   931be:	4603      	mov	r3, r0
   931c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   931c2:	4b7d      	ldr	r3, [pc, #500]	; (933b8 <Cl_Iso_Senddata+0x290>)
   931c4:	497d      	ldr	r1, [pc, #500]	; (933bc <Cl_Iso_Senddata+0x294>)
   931c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   931c8:	4798      	blx	r3
   931ca:	4603      	mov	r3, r0
   931cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   931ce:	4b7c      	ldr	r3, [pc, #496]	; (933c0 <Cl_Iso_Senddata+0x298>)
   931d0:	681a      	ldr	r2, [r3, #0]
   931d2:	4b72      	ldr	r3, [pc, #456]	; (9339c <Cl_Iso_Senddata+0x274>)
   931d4:	497b      	ldr	r1, [pc, #492]	; (933c4 <Cl_Iso_Senddata+0x29c>)
   931d6:	4610      	mov	r0, r2
   931d8:	4798      	blx	r3
   931da:	4603      	mov	r3, r0
   931dc:	461a      	mov	r2, r3
   931de:	4b7a      	ldr	r3, [pc, #488]	; (933c8 <Cl_Iso_Senddata+0x2a0>)
   931e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   931e2:	4610      	mov	r0, r2
   931e4:	4798      	blx	r3
   931e6:	4603      	mov	r3, r0
   931e8:	461a      	mov	r2, r3
   931ea:	4b6e      	ldr	r3, [pc, #440]	; (933a4 <Cl_Iso_Senddata+0x27c>)
   931ec:	4977      	ldr	r1, [pc, #476]	; (933cc <Cl_Iso_Senddata+0x2a4>)
   931ee:	4610      	mov	r0, r2
   931f0:	4798      	blx	r3
   931f2:	4603      	mov	r3, r0
   931f4:	461a      	mov	r2, r3
   931f6:	4b72      	ldr	r3, [pc, #456]	; (933c0 <Cl_Iso_Senddata+0x298>)
   931f8:	601a      	str	r2, [r3, #0]
   931fa:	1cbb      	adds	r3, r7, #2
   931fc:	4619      	mov	r1, r3
   931fe:	2007      	movs	r0, #7
   93200:	4b64      	ldr	r3, [pc, #400]	; (93394 <Cl_Iso_Senddata+0x26c>)
   93202:	4798      	blx	r3
   93204:	887b      	ldrh	r3, [r7, #2]
   93206:	2b32      	cmp	r3, #50	; 0x32
   93208:	f240 80f6 	bls.w	933f8 <Cl_Iso_Senddata+0x2d0>
   9320c:	887b      	ldrh	r3, [r7, #2]
   9320e:	461a      	mov	r2, r3
   93210:	4b6f      	ldr	r3, [pc, #444]	; (933d0 <Cl_Iso_Senddata+0x2a8>)
   93212:	4610      	mov	r0, r2
   93214:	4798      	blx	r3
   93216:	4c6f      	ldr	r4, [pc, #444]	; (933d4 <Cl_Iso_Senddata+0x2ac>)
   93218:	a355      	add	r3, pc, #340	; (adr r3, 93370 <Cl_Iso_Senddata+0x248>)
   9321a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9321e:	47a0      	blx	r4
   93220:	4603      	mov	r3, r0
   93222:	460c      	mov	r4, r1
   93224:	461d      	mov	r5, r3
   93226:	4626      	mov	r6, r4
   93228:	887b      	ldrh	r3, [r7, #2]
   9322a:	461a      	mov	r2, r3
   9322c:	4b68      	ldr	r3, [pc, #416]	; (933d0 <Cl_Iso_Senddata+0x2a8>)
   9322e:	4610      	mov	r0, r2
   93230:	4798      	blx	r3
   93232:	4602      	mov	r2, r0
   93234:	460b      	mov	r3, r1
   93236:	4c67      	ldr	r4, [pc, #412]	; (933d4 <Cl_Iso_Senddata+0x2ac>)
   93238:	4628      	mov	r0, r5
   9323a:	4631      	mov	r1, r6
   9323c:	47a0      	blx	r4
   9323e:	4603      	mov	r3, r0
   93240:	460c      	mov	r4, r1
   93242:	461d      	mov	r5, r3
   93244:	4626      	mov	r6, r4
   93246:	887b      	ldrh	r3, [r7, #2]
   93248:	461a      	mov	r2, r3
   9324a:	4b61      	ldr	r3, [pc, #388]	; (933d0 <Cl_Iso_Senddata+0x2a8>)
   9324c:	4610      	mov	r0, r2
   9324e:	4798      	blx	r3
   93250:	4c60      	ldr	r4, [pc, #384]	; (933d4 <Cl_Iso_Senddata+0x2ac>)
   93252:	a349      	add	r3, pc, #292	; (adr r3, 93378 <Cl_Iso_Senddata+0x250>)
   93254:	e9d3 2300 	ldrd	r2, r3, [r3]
   93258:	47a0      	blx	r4
   9325a:	4603      	mov	r3, r0
   9325c:	460c      	mov	r4, r1
   9325e:	461a      	mov	r2, r3
   93260:	4623      	mov	r3, r4
   93262:	4c5d      	ldr	r4, [pc, #372]	; (933d8 <Cl_Iso_Senddata+0x2b0>)
   93264:	4628      	mov	r0, r5
   93266:	4631      	mov	r1, r6
   93268:	47a0      	blx	r4
   9326a:	4603      	mov	r3, r0
   9326c:	460c      	mov	r4, r1
   9326e:	4618      	mov	r0, r3
   93270:	4621      	mov	r1, r4
   93272:	4c5a      	ldr	r4, [pc, #360]	; (933dc <Cl_Iso_Senddata+0x2b4>)
   93274:	a342      	add	r3, pc, #264	; (adr r3, 93380 <Cl_Iso_Senddata+0x258>)
   93276:	e9d3 2300 	ldrd	r2, r3, [r3]
   9327a:	47a0      	blx	r4
   9327c:	4603      	mov	r3, r0
   9327e:	460c      	mov	r4, r1
   93280:	4619      	mov	r1, r3
   93282:	4622      	mov	r2, r4
   93284:	4b56      	ldr	r3, [pc, #344]	; (933e0 <Cl_Iso_Senddata+0x2b8>)
   93286:	4608      	mov	r0, r1
   93288:	4611      	mov	r1, r2
   9328a:	4798      	blx	r3
   9328c:	4602      	mov	r2, r0
   9328e:	4b55      	ldr	r3, [pc, #340]	; (933e4 <Cl_Iso_Senddata+0x2bc>)
   93290:	601a      	str	r2, [r3, #0]
   93292:	4b54      	ldr	r3, [pc, #336]	; (933e4 <Cl_Iso_Senddata+0x2bc>)
   93294:	681a      	ldr	r2, [r3, #0]
   93296:	4b54      	ldr	r3, [pc, #336]	; (933e8 <Cl_Iso_Senddata+0x2c0>)
   93298:	4610      	mov	r0, r2
   9329a:	4798      	blx	r3
   9329c:	4605      	mov	r5, r0
   9329e:	460e      	mov	r6, r1
   932a0:	4b47      	ldr	r3, [pc, #284]	; (933c0 <Cl_Iso_Senddata+0x298>)
   932a2:	681a      	ldr	r2, [r3, #0]
   932a4:	4b3f      	ldr	r3, [pc, #252]	; (933a4 <Cl_Iso_Senddata+0x27c>)
   932a6:	4943      	ldr	r1, [pc, #268]	; (933b4 <Cl_Iso_Senddata+0x28c>)
   932a8:	4610      	mov	r0, r2
   932aa:	4798      	blx	r3
   932ac:	4603      	mov	r3, r0
   932ae:	461a      	mov	r2, r3
   932b0:	4b4d      	ldr	r3, [pc, #308]	; (933e8 <Cl_Iso_Senddata+0x2c0>)
   932b2:	4610      	mov	r0, r2
   932b4:	4798      	blx	r3
   932b6:	4c49      	ldr	r4, [pc, #292]	; (933dc <Cl_Iso_Senddata+0x2b4>)
   932b8:	f04f 0200 	mov.w	r2, #0
   932bc:	4b4b      	ldr	r3, [pc, #300]	; (933ec <Cl_Iso_Senddata+0x2c4>)
   932be:	47a0      	blx	r4
   932c0:	4603      	mov	r3, r0
   932c2:	460c      	mov	r4, r1
   932c4:	4618      	mov	r0, r3
   932c6:	4621      	mov	r1, r4
   932c8:	4c42      	ldr	r4, [pc, #264]	; (933d4 <Cl_Iso_Senddata+0x2ac>)
   932ca:	a32f      	add	r3, pc, #188	; (adr r3, 93388 <Cl_Iso_Senddata+0x260>)
   932cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   932d0:	47a0      	blx	r4
   932d2:	4603      	mov	r3, r0
   932d4:	460c      	mov	r4, r1
   932d6:	4618      	mov	r0, r3
   932d8:	4621      	mov	r1, r4
   932da:	4c3f      	ldr	r4, [pc, #252]	; (933d8 <Cl_Iso_Senddata+0x2b0>)
   932dc:	f04f 0200 	mov.w	r2, #0
   932e0:	4b43      	ldr	r3, [pc, #268]	; (933f0 <Cl_Iso_Senddata+0x2c8>)
   932e2:	47a0      	blx	r4
   932e4:	4603      	mov	r3, r0
   932e6:	460c      	mov	r4, r1
   932e8:	461a      	mov	r2, r3
   932ea:	4623      	mov	r3, r4
   932ec:	4c41      	ldr	r4, [pc, #260]	; (933f4 <Cl_Iso_Senddata+0x2cc>)
   932ee:	4628      	mov	r0, r5
   932f0:	4631      	mov	r1, r6
   932f2:	47a0      	blx	r4
   932f4:	4603      	mov	r3, r0
   932f6:	460c      	mov	r4, r1
   932f8:	4619      	mov	r1, r3
   932fa:	4622      	mov	r2, r4
   932fc:	4b38      	ldr	r3, [pc, #224]	; (933e0 <Cl_Iso_Senddata+0x2b8>)
   932fe:	4608      	mov	r0, r1
   93300:	4611      	mov	r1, r2
   93302:	4798      	blx	r3
   93304:	4603      	mov	r3, r0
   93306:	63bb      	str	r3, [r7, #56]	; 0x38
   93308:	4b27      	ldr	r3, [pc, #156]	; (933a8 <Cl_Iso_Senddata+0x280>)
   9330a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   9330c:	4798      	blx	r3
   9330e:	4603      	mov	r3, r0
   93310:	607b      	str	r3, [r7, #4]
   93312:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   93316:	1c5a      	adds	r2, r3, #1
   93318:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   9331c:	793a      	ldrb	r2, [r7, #4]
   9331e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   93322:	440b      	add	r3, r1
   93324:	f803 2c44 	strb.w	r2, [r3, #-68]
   93328:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   9332c:	1c5a      	adds	r2, r3, #1
   9332e:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   93332:	797a      	ldrb	r2, [r7, #5]
   93334:	f107 0150 	add.w	r1, r7, #80	; 0x50
   93338:	440b      	add	r3, r1
   9333a:	f803 2c44 	strb.w	r2, [r3, #-68]
   9333e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   93342:	1c5a      	adds	r2, r3, #1
   93344:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   93348:	79ba      	ldrb	r2, [r7, #6]
   9334a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   9334e:	440b      	add	r3, r1
   93350:	f803 2c44 	strb.w	r2, [r3, #-68]
   93354:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   93358:	1c5a      	adds	r2, r3, #1
   9335a:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   9335e:	79fa      	ldrb	r2, [r7, #7]
   93360:	f107 0150 	add.w	r1, r7, #80	; 0x50
   93364:	440b      	add	r3, r1
   93366:	f803 2c44 	strb.w	r2, [r3, #-68]
   9336a:	e073      	b.n	93454 <Cl_Iso_Senddata+0x32c>
   9336c:	f3af 8000 	nop.w
   93370:	eb1c432d 	.word	0xeb1c432d
   93374:	bf1a36e2 	.word	0xbf1a36e2
   93378:	70a3d70a 	.word	0x70a3d70a
   9337c:	3fd70a3d 	.word	0x3fd70a3d
   93380:	851eb852 	.word	0x851eb852
   93384:	404331eb 	.word	0x404331eb
   93388:	47ae147b 	.word	0x47ae147b
   9338c:	3f947ae1 	.word	0x3f947ae1
   93390:	000a4369 	.word	0x000a4369
   93394:	0008d6b1 	.word	0x0008d6b1
   93398:	000a3d65 	.word	0x000a3d65
   9339c:	000a3e15 	.word	0x000a3e15
   933a0:	471d0800 	.word	0x471d0800
   933a4:	000a3f7d 	.word	0x000a3f7d
   933a8:	000a41ed 	.word	0x000a41ed
   933ac:	0008e8e1 	.word	0x0008e8e1
   933b0:	20072630 	.word	0x20072630
   933b4:	41200000 	.word	0x41200000
   933b8:	000a3c01 	.word	0x000a3c01
   933bc:	41c80000 	.word	0x41c80000
   933c0:	200726dc 	.word	0x200726dc
   933c4:	40a00000 	.word	0x40a00000
   933c8:	000a3c05 	.word	0x000a3c05
   933cc:	40c00000 	.word	0x40c00000
   933d0:	000a34c9 	.word	0x000a34c9
   933d4:	000a3595 	.word	0x000a3595
   933d8:	000a3231 	.word	0x000a3231
   933dc:	000a322d 	.word	0x000a322d
   933e0:	000a3b59 	.word	0x000a3b59
   933e4:	200726e0 	.word	0x200726e0
   933e8:	000a34ed 	.word	0x000a34ed
   933ec:	40390000 	.word	0x40390000
   933f0:	3ff00000 	.word	0x3ff00000
   933f4:	000a37e9 	.word	0x000a37e9
   933f8:	2300      	movs	r3, #0
   933fa:	607b      	str	r3, [r7, #4]
   933fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   93400:	1c5a      	adds	r2, r3, #1
   93402:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   93406:	793a      	ldrb	r2, [r7, #4]
   93408:	f107 0150 	add.w	r1, r7, #80	; 0x50
   9340c:	440b      	add	r3, r1
   9340e:	f803 2c44 	strb.w	r2, [r3, #-68]
   93412:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   93416:	1c5a      	adds	r2, r3, #1
   93418:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   9341c:	797a      	ldrb	r2, [r7, #5]
   9341e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   93422:	440b      	add	r3, r1
   93424:	f803 2c44 	strb.w	r2, [r3, #-68]
   93428:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   9342c:	1c5a      	adds	r2, r3, #1
   9342e:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   93432:	79ba      	ldrb	r2, [r7, #6]
   93434:	f107 0150 	add.w	r1, r7, #80	; 0x50
   93438:	440b      	add	r3, r1
   9343a:	f803 2c44 	strb.w	r2, [r3, #-68]
   9343e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   93442:	1c5a      	adds	r2, r3, #1
   93444:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   93448:	79fa      	ldrb	r2, [r7, #7]
   9344a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   9344e:	440b      	add	r3, r1
   93450:	f803 2c44 	strb.w	r2, [r3, #-68]
   93454:	4bae      	ldr	r3, [pc, #696]	; (93710 <Cl_Iso_Senddata+0x5e8>)
   93456:	681a      	ldr	r2, [r3, #0]
   93458:	4bae      	ldr	r3, [pc, #696]	; (93714 <Cl_Iso_Senddata+0x5ec>)
   9345a:	4610      	mov	r0, r2
   9345c:	4798      	blx	r3
   9345e:	4603      	mov	r3, r0
   93460:	607b      	str	r3, [r7, #4]
   93462:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   93466:	1c5a      	adds	r2, r3, #1
   93468:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   9346c:	793a      	ldrb	r2, [r7, #4]
   9346e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   93472:	440b      	add	r3, r1
   93474:	f803 2c44 	strb.w	r2, [r3, #-68]
   93478:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   9347c:	1c5a      	adds	r2, r3, #1
   9347e:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   93482:	797a      	ldrb	r2, [r7, #5]
   93484:	f107 0150 	add.w	r1, r7, #80	; 0x50
   93488:	440b      	add	r3, r1
   9348a:	f803 2c44 	strb.w	r2, [r3, #-68]
   9348e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   93492:	1c5a      	adds	r2, r3, #1
   93494:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   93498:	79ba      	ldrb	r2, [r7, #6]
   9349a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   9349e:	440b      	add	r3, r1
   934a0:	f803 2c44 	strb.w	r2, [r3, #-68]
   934a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   934a8:	1c5a      	adds	r2, r3, #1
   934aa:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   934ae:	79fa      	ldrb	r2, [r7, #7]
   934b0:	f107 0150 	add.w	r1, r7, #80	; 0x50
   934b4:	440b      	add	r3, r1
   934b6:	f803 2c44 	strb.w	r2, [r3, #-68]
   934ba:	1d3b      	adds	r3, r7, #4
   934bc:	4619      	mov	r1, r3
   934be:	200b      	movs	r0, #11
   934c0:	4b95      	ldr	r3, [pc, #596]	; (93718 <Cl_Iso_Senddata+0x5f0>)
   934c2:	4798      	blx	r3
   934c4:	88bb      	ldrh	r3, [r7, #4]
   934c6:	461a      	mov	r2, r3
   934c8:	4b94      	ldr	r3, [pc, #592]	; (9371c <Cl_Iso_Senddata+0x5f4>)
   934ca:	4610      	mov	r0, r2
   934cc:	4798      	blx	r3
   934ce:	4c94      	ldr	r4, [pc, #592]	; (93720 <Cl_Iso_Senddata+0x5f8>)
   934d0:	a38d      	add	r3, pc, #564	; (adr r3, 93708 <Cl_Iso_Senddata+0x5e0>)
   934d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   934d6:	47a0      	blx	r4
   934d8:	4603      	mov	r3, r0
   934da:	460c      	mov	r4, r1
   934dc:	4619      	mov	r1, r3
   934de:	4622      	mov	r2, r4
   934e0:	4b90      	ldr	r3, [pc, #576]	; (93724 <Cl_Iso_Senddata+0x5fc>)
   934e2:	4608      	mov	r0, r1
   934e4:	4611      	mov	r1, r2
   934e6:	4798      	blx	r3
   934e8:	4603      	mov	r3, r0
   934ea:	86fb      	strh	r3, [r7, #54]	; 0x36
   934ec:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
   934f0:	4618      	mov	r0, r3
   934f2:	4b8d      	ldr	r3, [pc, #564]	; (93728 <Cl_Iso_Senddata+0x600>)
   934f4:	4798      	blx	r3
   934f6:	4b8d      	ldr	r3, [pc, #564]	; (9372c <Cl_Iso_Senddata+0x604>)
   934f8:	681a      	ldr	r2, [r3, #0]
   934fa:	4b8d      	ldr	r3, [pc, #564]	; (93730 <Cl_Iso_Senddata+0x608>)
   934fc:	498d      	ldr	r1, [pc, #564]	; (93734 <Cl_Iso_Senddata+0x60c>)
   934fe:	4610      	mov	r0, r2
   93500:	4798      	blx	r3
   93502:	4603      	mov	r3, r0
   93504:	4618      	mov	r0, r3
   93506:	4b8c      	ldr	r3, [pc, #560]	; (93738 <Cl_Iso_Senddata+0x610>)
   93508:	681a      	ldr	r2, [r3, #0]
   9350a:	4b8c      	ldr	r3, [pc, #560]	; (9373c <Cl_Iso_Senddata+0x614>)
   9350c:	4611      	mov	r1, r2
   9350e:	4798      	blx	r3
   93510:	4603      	mov	r3, r0
   93512:	461a      	mov	r2, r3
   93514:	4b8a      	ldr	r3, [pc, #552]	; (93740 <Cl_Iso_Senddata+0x618>)
   93516:	498b      	ldr	r1, [pc, #556]	; (93744 <Cl_Iso_Senddata+0x61c>)
   93518:	4610      	mov	r0, r2
   9351a:	4798      	blx	r3
   9351c:	4603      	mov	r3, r0
   9351e:	461a      	mov	r2, r3
   93520:	4b82      	ldr	r3, [pc, #520]	; (9372c <Cl_Iso_Senddata+0x604>)
   93522:	601a      	str	r2, [r3, #0]
   93524:	4b81      	ldr	r3, [pc, #516]	; (9372c <Cl_Iso_Senddata+0x604>)
   93526:	681a      	ldr	r2, [r3, #0]
   93528:	4b7a      	ldr	r3, [pc, #488]	; (93714 <Cl_Iso_Senddata+0x5ec>)
   9352a:	4610      	mov	r0, r2
   9352c:	4798      	blx	r3
   9352e:	4603      	mov	r3, r0
   93530:	607b      	str	r3, [r7, #4]
   93532:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   93536:	1c5a      	adds	r2, r3, #1
   93538:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   9353c:	793a      	ldrb	r2, [r7, #4]
   9353e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   93542:	440b      	add	r3, r1
   93544:	f803 2c44 	strb.w	r2, [r3, #-68]
   93548:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   9354c:	1c5a      	adds	r2, r3, #1
   9354e:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   93552:	797a      	ldrb	r2, [r7, #5]
   93554:	f107 0150 	add.w	r1, r7, #80	; 0x50
   93558:	440b      	add	r3, r1
   9355a:	f803 2c44 	strb.w	r2, [r3, #-68]
   9355e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   93562:	1c5a      	adds	r2, r3, #1
   93564:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   93568:	79ba      	ldrb	r2, [r7, #6]
   9356a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   9356e:	440b      	add	r3, r1
   93570:	f803 2c44 	strb.w	r2, [r3, #-68]
   93574:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   93578:	1c5a      	adds	r2, r3, #1
   9357a:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   9357e:	79fa      	ldrb	r2, [r7, #7]
   93580:	f107 0150 	add.w	r1, r7, #80	; 0x50
   93584:	440b      	add	r3, r1
   93586:	f803 2c44 	strb.w	r2, [r3, #-68]
   9358a:	1d3b      	adds	r3, r7, #4
   9358c:	4619      	mov	r1, r3
   9358e:	200c      	movs	r0, #12
   93590:	4b61      	ldr	r3, [pc, #388]	; (93718 <Cl_Iso_Senddata+0x5f0>)
   93592:	4798      	blx	r3
   93594:	88bb      	ldrh	r3, [r7, #4]
   93596:	461a      	mov	r2, r3
   93598:	4b60      	ldr	r3, [pc, #384]	; (9371c <Cl_Iso_Senddata+0x5f4>)
   9359a:	4610      	mov	r0, r2
   9359c:	4798      	blx	r3
   9359e:	4c60      	ldr	r4, [pc, #384]	; (93720 <Cl_Iso_Senddata+0x5f8>)
   935a0:	a359      	add	r3, pc, #356	; (adr r3, 93708 <Cl_Iso_Senddata+0x5e0>)
   935a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   935a6:	47a0      	blx	r4
   935a8:	4603      	mov	r3, r0
   935aa:	460c      	mov	r4, r1
   935ac:	4619      	mov	r1, r3
   935ae:	4622      	mov	r2, r4
   935b0:	4b5c      	ldr	r3, [pc, #368]	; (93724 <Cl_Iso_Senddata+0x5fc>)
   935b2:	4608      	mov	r0, r1
   935b4:	4611      	mov	r1, r2
   935b6:	4798      	blx	r3
   935b8:	4603      	mov	r3, r0
   935ba:	86fb      	strh	r3, [r7, #54]	; 0x36
   935bc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
   935c0:	4618      	mov	r0, r3
   935c2:	4b61      	ldr	r3, [pc, #388]	; (93748 <Cl_Iso_Senddata+0x620>)
   935c4:	4798      	blx	r3
   935c6:	4b61      	ldr	r3, [pc, #388]	; (9374c <Cl_Iso_Senddata+0x624>)
   935c8:	681a      	ldr	r2, [r3, #0]
   935ca:	4b59      	ldr	r3, [pc, #356]	; (93730 <Cl_Iso_Senddata+0x608>)
   935cc:	4959      	ldr	r1, [pc, #356]	; (93734 <Cl_Iso_Senddata+0x60c>)
   935ce:	4610      	mov	r0, r2
   935d0:	4798      	blx	r3
   935d2:	4603      	mov	r3, r0
   935d4:	4618      	mov	r0, r3
   935d6:	4b5e      	ldr	r3, [pc, #376]	; (93750 <Cl_Iso_Senddata+0x628>)
   935d8:	681a      	ldr	r2, [r3, #0]
   935da:	4b58      	ldr	r3, [pc, #352]	; (9373c <Cl_Iso_Senddata+0x614>)
   935dc:	4611      	mov	r1, r2
   935de:	4798      	blx	r3
   935e0:	4603      	mov	r3, r0
   935e2:	461a      	mov	r2, r3
   935e4:	4b56      	ldr	r3, [pc, #344]	; (93740 <Cl_Iso_Senddata+0x618>)
   935e6:	4957      	ldr	r1, [pc, #348]	; (93744 <Cl_Iso_Senddata+0x61c>)
   935e8:	4610      	mov	r0, r2
   935ea:	4798      	blx	r3
   935ec:	4603      	mov	r3, r0
   935ee:	461a      	mov	r2, r3
   935f0:	4b56      	ldr	r3, [pc, #344]	; (9374c <Cl_Iso_Senddata+0x624>)
   935f2:	601a      	str	r2, [r3, #0]
   935f4:	4b55      	ldr	r3, [pc, #340]	; (9374c <Cl_Iso_Senddata+0x624>)
   935f6:	681a      	ldr	r2, [r3, #0]
   935f8:	4b46      	ldr	r3, [pc, #280]	; (93714 <Cl_Iso_Senddata+0x5ec>)
   935fa:	4610      	mov	r0, r2
   935fc:	4798      	blx	r3
   935fe:	4603      	mov	r3, r0
   93600:	607b      	str	r3, [r7, #4]
   93602:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   93606:	1c5a      	adds	r2, r3, #1
   93608:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   9360c:	793a      	ldrb	r2, [r7, #4]
   9360e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   93612:	440b      	add	r3, r1
   93614:	f803 2c44 	strb.w	r2, [r3, #-68]
   93618:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   9361c:	1c5a      	adds	r2, r3, #1
   9361e:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   93622:	797a      	ldrb	r2, [r7, #5]
   93624:	f107 0150 	add.w	r1, r7, #80	; 0x50
   93628:	440b      	add	r3, r1
   9362a:	f803 2c44 	strb.w	r2, [r3, #-68]
   9362e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   93632:	1c5a      	adds	r2, r3, #1
   93634:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   93638:	79ba      	ldrb	r2, [r7, #6]
   9363a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   9363e:	440b      	add	r3, r1
   93640:	f803 2c44 	strb.w	r2, [r3, #-68]
   93644:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   93648:	1c5a      	adds	r2, r3, #1
   9364a:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   9364e:	79fa      	ldrb	r2, [r7, #7]
   93650:	f107 0150 	add.w	r1, r7, #80	; 0x50
   93654:	440b      	add	r3, r1
   93656:	f803 2c44 	strb.w	r2, [r3, #-68]
   9365a:	1d3b      	adds	r3, r7, #4
   9365c:	4619      	mov	r1, r3
   9365e:	200e      	movs	r0, #14
   93660:	4b2d      	ldr	r3, [pc, #180]	; (93718 <Cl_Iso_Senddata+0x5f0>)
   93662:	4798      	blx	r3
   93664:	88bb      	ldrh	r3, [r7, #4]
   93666:	461a      	mov	r2, r3
   93668:	4b2c      	ldr	r3, [pc, #176]	; (9371c <Cl_Iso_Senddata+0x5f4>)
   9366a:	4610      	mov	r0, r2
   9366c:	4798      	blx	r3
   9366e:	4c2c      	ldr	r4, [pc, #176]	; (93720 <Cl_Iso_Senddata+0x5f8>)
   93670:	a325      	add	r3, pc, #148	; (adr r3, 93708 <Cl_Iso_Senddata+0x5e0>)
   93672:	e9d3 2300 	ldrd	r2, r3, [r3]
   93676:	47a0      	blx	r4
   93678:	4603      	mov	r3, r0
   9367a:	460c      	mov	r4, r1
   9367c:	4619      	mov	r1, r3
   9367e:	4622      	mov	r2, r4
   93680:	4b28      	ldr	r3, [pc, #160]	; (93724 <Cl_Iso_Senddata+0x5fc>)
   93682:	4608      	mov	r0, r1
   93684:	4611      	mov	r1, r2
   93686:	4798      	blx	r3
   93688:	4603      	mov	r3, r0
   9368a:	86fb      	strh	r3, [r7, #54]	; 0x36
   9368c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
   93690:	4618      	mov	r0, r3
   93692:	4b30      	ldr	r3, [pc, #192]	; (93754 <Cl_Iso_Senddata+0x62c>)
   93694:	4798      	blx	r3
   93696:	4b30      	ldr	r3, [pc, #192]	; (93758 <Cl_Iso_Senddata+0x630>)
   93698:	681a      	ldr	r2, [r3, #0]
   9369a:	4b25      	ldr	r3, [pc, #148]	; (93730 <Cl_Iso_Senddata+0x608>)
   9369c:	4925      	ldr	r1, [pc, #148]	; (93734 <Cl_Iso_Senddata+0x60c>)
   9369e:	4610      	mov	r0, r2
   936a0:	4798      	blx	r3
   936a2:	4603      	mov	r3, r0
   936a4:	4618      	mov	r0, r3
   936a6:	4b2d      	ldr	r3, [pc, #180]	; (9375c <Cl_Iso_Senddata+0x634>)
   936a8:	681a      	ldr	r2, [r3, #0]
   936aa:	4b24      	ldr	r3, [pc, #144]	; (9373c <Cl_Iso_Senddata+0x614>)
   936ac:	4611      	mov	r1, r2
   936ae:	4798      	blx	r3
   936b0:	4603      	mov	r3, r0
   936b2:	461a      	mov	r2, r3
   936b4:	4b22      	ldr	r3, [pc, #136]	; (93740 <Cl_Iso_Senddata+0x618>)
   936b6:	4923      	ldr	r1, [pc, #140]	; (93744 <Cl_Iso_Senddata+0x61c>)
   936b8:	4610      	mov	r0, r2
   936ba:	4798      	blx	r3
   936bc:	4603      	mov	r3, r0
   936be:	461a      	mov	r2, r3
   936c0:	4b25      	ldr	r3, [pc, #148]	; (93758 <Cl_Iso_Senddata+0x630>)
   936c2:	601a      	str	r2, [r3, #0]
   936c4:	1d3b      	adds	r3, r7, #4
   936c6:	4619      	mov	r1, r3
   936c8:	200f      	movs	r0, #15
   936ca:	4b13      	ldr	r3, [pc, #76]	; (93718 <Cl_Iso_Senddata+0x5f0>)
   936cc:	4798      	blx	r3
   936ce:	88bb      	ldrh	r3, [r7, #4]
   936d0:	461a      	mov	r2, r3
   936d2:	4b12      	ldr	r3, [pc, #72]	; (9371c <Cl_Iso_Senddata+0x5f4>)
   936d4:	4610      	mov	r0, r2
   936d6:	4798      	blx	r3
   936d8:	4c11      	ldr	r4, [pc, #68]	; (93720 <Cl_Iso_Senddata+0x5f8>)
   936da:	a30b      	add	r3, pc, #44	; (adr r3, 93708 <Cl_Iso_Senddata+0x5e0>)
   936dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   936e0:	47a0      	blx	r4
   936e2:	4603      	mov	r3, r0
   936e4:	460c      	mov	r4, r1
   936e6:	4619      	mov	r1, r3
   936e8:	4622      	mov	r2, r4
   936ea:	4b0e      	ldr	r3, [pc, #56]	; (93724 <Cl_Iso_Senddata+0x5fc>)
   936ec:	4608      	mov	r0, r1
   936ee:	4611      	mov	r1, r2
   936f0:	4798      	blx	r3
   936f2:	4603      	mov	r3, r0
   936f4:	86fb      	strh	r3, [r7, #54]	; 0x36
   936f6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
   936fa:	4618      	mov	r0, r3
   936fc:	4b18      	ldr	r3, [pc, #96]	; (93760 <Cl_Iso_Senddata+0x638>)
   936fe:	4798      	blx	r3
   93700:	4b18      	ldr	r3, [pc, #96]	; (93764 <Cl_Iso_Senddata+0x63c>)
   93702:	681a      	ldr	r2, [r3, #0]
   93704:	4b0a      	ldr	r3, [pc, #40]	; (93730 <Cl_Iso_Senddata+0x608>)
   93706:	e02f      	b.n	93768 <Cl_Iso_Senddata+0x640>
   93708:	58e21965 	.word	0x58e21965
   9370c:	3fe9b717 	.word	0x3fe9b717
   93710:	200726dc 	.word	0x200726dc
   93714:	000a41ed 	.word	0x000a41ed
   93718:	0008d6b1 	.word	0x0008d6b1
   9371c:	000a34c9 	.word	0x000a34c9
   93720:	000a3595 	.word	0x000a3595
   93724:	000a3b19 	.word	0x000a3b19
   93728:	0008406d 	.word	0x0008406d
   9372c:	200726e4 	.word	0x200726e4
   93730:	000a3e15 	.word	0x000a3e15
   93734:	40a00000 	.word	0x40a00000
   93738:	20072d74 	.word	0x20072d74
   9373c:	000a3c05 	.word	0x000a3c05
   93740:	000a3f7d 	.word	0x000a3f7d
   93744:	40c00000 	.word	0x40c00000
   93748:	000841ed 	.word	0x000841ed
   9374c:	200726e8 	.word	0x200726e8
   93750:	2007165c 	.word	0x2007165c
   93754:	00084371 	.word	0x00084371
   93758:	200726ec 	.word	0x200726ec
   9375c:	20071660 	.word	0x20071660
   93760:	00084481 	.word	0x00084481
   93764:	200726f0 	.word	0x200726f0
   93768:	4953      	ldr	r1, [pc, #332]	; (938b8 <Cl_Iso_Senddata+0x790>)
   9376a:	4610      	mov	r0, r2
   9376c:	4798      	blx	r3
   9376e:	4603      	mov	r3, r0
   93770:	4618      	mov	r0, r3
   93772:	4b52      	ldr	r3, [pc, #328]	; (938bc <Cl_Iso_Senddata+0x794>)
   93774:	681a      	ldr	r2, [r3, #0]
   93776:	4b52      	ldr	r3, [pc, #328]	; (938c0 <Cl_Iso_Senddata+0x798>)
   93778:	4611      	mov	r1, r2
   9377a:	4798      	blx	r3
   9377c:	4603      	mov	r3, r0
   9377e:	461a      	mov	r2, r3
   93780:	4b50      	ldr	r3, [pc, #320]	; (938c4 <Cl_Iso_Senddata+0x79c>)
   93782:	4951      	ldr	r1, [pc, #324]	; (938c8 <Cl_Iso_Senddata+0x7a0>)
   93784:	4610      	mov	r0, r2
   93786:	4798      	blx	r3
   93788:	4603      	mov	r3, r0
   9378a:	461a      	mov	r2, r3
   9378c:	4b4f      	ldr	r3, [pc, #316]	; (938cc <Cl_Iso_Senddata+0x7a4>)
   9378e:	601a      	str	r2, [r3, #0]
   93790:	4b4f      	ldr	r3, [pc, #316]	; (938d0 <Cl_Iso_Senddata+0x7a8>)
   93792:	681a      	ldr	r2, [r3, #0]
   93794:	4b4f      	ldr	r3, [pc, #316]	; (938d4 <Cl_Iso_Senddata+0x7ac>)
   93796:	6819      	ldr	r1, [r3, #0]
   93798:	4b49      	ldr	r3, [pc, #292]	; (938c0 <Cl_Iso_Senddata+0x798>)
   9379a:	4610      	mov	r0, r2
   9379c:	4798      	blx	r3
   9379e:	4603      	mov	r3, r0
   937a0:	461c      	mov	r4, r3
   937a2:	4b4d      	ldr	r3, [pc, #308]	; (938d8 <Cl_Iso_Senddata+0x7b0>)
   937a4:	681a      	ldr	r2, [r3, #0]
   937a6:	4b49      	ldr	r3, [pc, #292]	; (938cc <Cl_Iso_Senddata+0x7a4>)
   937a8:	6819      	ldr	r1, [r3, #0]
   937aa:	4b45      	ldr	r3, [pc, #276]	; (938c0 <Cl_Iso_Senddata+0x798>)
   937ac:	4610      	mov	r0, r2
   937ae:	4798      	blx	r3
   937b0:	4603      	mov	r3, r0
   937b2:	461a      	mov	r2, r3
   937b4:	4b49      	ldr	r3, [pc, #292]	; (938dc <Cl_Iso_Senddata+0x7b4>)
   937b6:	4611      	mov	r1, r2
   937b8:	4620      	mov	r0, r4
   937ba:	4798      	blx	r3
   937bc:	4603      	mov	r3, r0
   937be:	461a      	mov	r2, r3
   937c0:	4b40      	ldr	r3, [pc, #256]	; (938c4 <Cl_Iso_Senddata+0x79c>)
   937c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   937c6:	4610      	mov	r0, r2
   937c8:	4798      	blx	r3
   937ca:	4603      	mov	r3, r0
   937cc:	461a      	mov	r2, r3
   937ce:	4b43      	ldr	r3, [pc, #268]	; (938dc <Cl_Iso_Senddata+0x7b4>)
   937d0:	4943      	ldr	r1, [pc, #268]	; (938e0 <Cl_Iso_Senddata+0x7b8>)
   937d2:	4610      	mov	r0, r2
   937d4:	4798      	blx	r3
   937d6:	4603      	mov	r3, r0
   937d8:	461a      	mov	r2, r3
   937da:	4b42      	ldr	r3, [pc, #264]	; (938e4 <Cl_Iso_Senddata+0x7bc>)
   937dc:	4610      	mov	r0, r2
   937de:	4798      	blx	r3
   937e0:	4603      	mov	r3, r0
   937e2:	607b      	str	r3, [r7, #4]
   937e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   937e8:	1c5a      	adds	r2, r3, #1
   937ea:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   937ee:	793a      	ldrb	r2, [r7, #4]
   937f0:	f107 0150 	add.w	r1, r7, #80	; 0x50
   937f4:	440b      	add	r3, r1
   937f6:	f803 2c44 	strb.w	r2, [r3, #-68]
   937fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   937fe:	1c5a      	adds	r2, r3, #1
   93800:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   93804:	797a      	ldrb	r2, [r7, #5]
   93806:	f107 0150 	add.w	r1, r7, #80	; 0x50
   9380a:	440b      	add	r3, r1
   9380c:	f803 2c44 	strb.w	r2, [r3, #-68]
   93810:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   93814:	1c5a      	adds	r2, r3, #1
   93816:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   9381a:	79ba      	ldrb	r2, [r7, #6]
   9381c:	f107 0150 	add.w	r1, r7, #80	; 0x50
   93820:	440b      	add	r3, r1
   93822:	f803 2c44 	strb.w	r2, [r3, #-68]
   93826:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   9382a:	1c5a      	adds	r2, r3, #1
   9382c:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   93830:	79fa      	ldrb	r2, [r7, #7]
   93832:	f107 0150 	add.w	r1, r7, #80	; 0x50
   93836:	440b      	add	r3, r1
   93838:	f803 2c44 	strb.w	r2, [r3, #-68]
   9383c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   93840:	1c5a      	adds	r2, r3, #1
   93842:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   93846:	f107 0250 	add.w	r2, r7, #80	; 0x50
   9384a:	4413      	add	r3, r2
   9384c:	220a      	movs	r2, #10
   9384e:	f803 2c44 	strb.w	r2, [r3, #-68]
   93852:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   93856:	1c5a      	adds	r2, r3, #1
   93858:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   9385c:	f107 0250 	add.w	r2, r7, #80	; 0x50
   93860:	4413      	add	r3, r2
   93862:	220a      	movs	r2, #10
   93864:	f803 2c44 	strb.w	r2, [r3, #-68]
   93868:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   9386c:	1c5a      	adds	r2, r3, #1
   9386e:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   93872:	f107 0250 	add.w	r2, r7, #80	; 0x50
   93876:	4413      	add	r3, r2
   93878:	2200      	movs	r2, #0
   9387a:	f803 2c44 	strb.w	r2, [r3, #-68]
   9387e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   93882:	1c5a      	adds	r2, r3, #1
   93884:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   93888:	f107 0250 	add.w	r2, r7, #80	; 0x50
   9388c:	4413      	add	r3, r2
   9388e:	2200      	movs	r2, #0
   93890:	f803 2c44 	strb.w	r2, [r3, #-68]
   93894:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
   93898:	f107 030c 	add.w	r3, r7, #12
   9389c:	4619      	mov	r1, r3
   9389e:	202a      	movs	r0, #42	; 0x2a
   938a0:	4b11      	ldr	r3, [pc, #68]	; (938e8 <Cl_Iso_Senddata+0x7c0>)
   938a2:	4798      	blx	r3
   938a4:	4603      	mov	r3, r0
   938a6:	461a      	mov	r2, r3
   938a8:	4b10      	ldr	r3, [pc, #64]	; (938ec <Cl_Iso_Senddata+0x7c4>)
   938aa:	701a      	strb	r2, [r3, #0]
   938ac:	2300      	movs	r3, #0
   938ae:	4618      	mov	r0, r3
   938b0:	3754      	adds	r7, #84	; 0x54
   938b2:	46bd      	mov	sp, r7
   938b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   938b6:	bf00      	nop
   938b8:	40a00000 	.word	0x40a00000
   938bc:	20071664 	.word	0x20071664
   938c0:	000a3c05 	.word	0x000a3c05
   938c4:	000a3f7d 	.word	0x000a3f7d
   938c8:	40c00000 	.word	0x40c00000
   938cc:	200726f0 	.word	0x200726f0
   938d0:	200726e4 	.word	0x200726e4
   938d4:	200726e8 	.word	0x200726e8
   938d8:	200726ec 	.word	0x200726ec
   938dc:	000a3c01 	.word	0x000a3c01
   938e0:	41c80000 	.word	0x41c80000
   938e4:	000a41ed 	.word	0x000a41ed
   938e8:	00099729 	.word	0x00099729
   938ec:	200726d2 	.word	0x200726d2

000938f0 <Cl_Iso_UpdateTimeInfo>:
   938f0:	b580      	push	{r7, lr}
   938f2:	b084      	sub	sp, #16
   938f4:	af00      	add	r7, sp, #0
   938f6:	2304      	movs	r3, #4
   938f8:	73fb      	strb	r3, [r7, #15]
   938fa:	234d      	movs	r3, #77	; 0x4d
   938fc:	73bb      	strb	r3, [r7, #14]
   938fe:	1d3b      	adds	r3, r7, #4
   93900:	2200      	movs	r2, #0
   93902:	601a      	str	r2, [r3, #0]
   93904:	f8c3 2003 	str.w	r2, [r3, #3]
   93908:	230a      	movs	r3, #10
   9390a:	73bb      	strb	r3, [r7, #14]
   9390c:	230c      	movs	r3, #12
   9390e:	713b      	strb	r3, [r7, #4]
   93910:	2301      	movs	r3, #1
   93912:	717b      	strb	r3, [r7, #5]
   93914:	1d39      	adds	r1, r7, #4
   93916:	7bbb      	ldrb	r3, [r7, #14]
   93918:	2202      	movs	r2, #2
   9391a:	4618      	mov	r0, r3
   9391c:	4b04      	ldr	r3, [pc, #16]	; (93930 <Cl_Iso_UpdateTimeInfo+0x40>)
   9391e:	4798      	blx	r3
   93920:	4603      	mov	r3, r0
   93922:	73fb      	strb	r3, [r7, #15]
   93924:	2300      	movs	r3, #0
   93926:	4618      	mov	r0, r3
   93928:	3710      	adds	r7, #16
   9392a:	46bd      	mov	sp, r7
   9392c:	bd80      	pop	{r7, pc}
   9392e:	bf00      	nop
   93930:	00099729 	.word	0x00099729

00093934 <cl_checkforblooddetection>:
   93934:	b580      	push	{r7, lr}
   93936:	b082      	sub	sp, #8
   93938:	af00      	add	r7, sp, #0
   9393a:	2300      	movs	r3, #0
   9393c:	80fb      	strh	r3, [r7, #6]
   9393e:	1dbb      	adds	r3, r7, #6
   93940:	4619      	mov	r1, r3
   93942:	200a      	movs	r0, #10
   93944:	4b05      	ldr	r3, [pc, #20]	; (9395c <cl_checkforblooddetection+0x28>)
   93946:	4798      	blx	r3
   93948:	88fb      	ldrh	r3, [r7, #6]
   9394a:	2b01      	cmp	r3, #1
   9394c:	d101      	bne.n	93952 <cl_checkforblooddetection+0x1e>
   9394e:	2300      	movs	r3, #0
   93950:	e000      	b.n	93954 <cl_checkforblooddetection+0x20>
   93952:	2300      	movs	r3, #0
   93954:	4618      	mov	r0, r3
   93956:	3708      	adds	r7, #8
   93958:	46bd      	mov	sp, r7
   9395a:	bd80      	pop	{r7, pc}
   9395c:	0008d6b1 	.word	0x0008d6b1

00093960 <cl_isouf_translatemacevent>:
   93960:	b480      	push	{r7}
   93962:	b083      	sub	sp, #12
   93964:	af00      	add	r7, sp, #0
   93966:	4603      	mov	r3, r0
   93968:	6039      	str	r1, [r7, #0]
   9396a:	71fb      	strb	r3, [r7, #7]
   9396c:	79fb      	ldrb	r3, [r7, #7]
   9396e:	3b07      	subs	r3, #7
   93970:	2b53      	cmp	r3, #83	; 0x53
   93972:	f200 8107 	bhi.w	93b84 <cl_isouf_translatemacevent+0x224>
   93976:	a201      	add	r2, pc, #4	; (adr r2, 9397c <cl_isouf_translatemacevent+0x1c>)
   93978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9397c:	00093b0d 	.word	0x00093b0d
   93980:	00093b85 	.word	0x00093b85
   93984:	00093b85 	.word	0x00093b85
   93988:	00093aed 	.word	0x00093aed
   9398c:	00093af5 	.word	0x00093af5
   93990:	00093ae5 	.word	0x00093ae5
   93994:	00093b05 	.word	0x00093b05
   93998:	00093afd 	.word	0x00093afd
   9399c:	00093b85 	.word	0x00093b85
   939a0:	00093b85 	.word	0x00093b85
   939a4:	00093b85 	.word	0x00093b85
   939a8:	00093b85 	.word	0x00093b85
   939ac:	00093b85 	.word	0x00093b85
   939b0:	00093b85 	.word	0x00093b85
   939b4:	00093b65 	.word	0x00093b65
   939b8:	00093b85 	.word	0x00093b85
   939bc:	00093b15 	.word	0x00093b15
   939c0:	00093b85 	.word	0x00093b85
   939c4:	00093b85 	.word	0x00093b85
   939c8:	00093b85 	.word	0x00093b85
   939cc:	00093b85 	.word	0x00093b85
   939d0:	00093b85 	.word	0x00093b85
   939d4:	00093b85 	.word	0x00093b85
   939d8:	00093b85 	.word	0x00093b85
   939dc:	00093b85 	.word	0x00093b85
   939e0:	00093b85 	.word	0x00093b85
   939e4:	00093b85 	.word	0x00093b85
   939e8:	00093b55 	.word	0x00093b55
   939ec:	00093b5d 	.word	0x00093b5d
   939f0:	00093b85 	.word	0x00093b85
   939f4:	00093b85 	.word	0x00093b85
   939f8:	00093b85 	.word	0x00093b85
   939fc:	00093b6d 	.word	0x00093b6d
   93a00:	00093b75 	.word	0x00093b75
   93a04:	00093add 	.word	0x00093add
   93a08:	00093b85 	.word	0x00093b85
   93a0c:	00093b85 	.word	0x00093b85
   93a10:	00093b85 	.word	0x00093b85
   93a14:	00093b4d 	.word	0x00093b4d
   93a18:	00093b45 	.word	0x00093b45
   93a1c:	00093b85 	.word	0x00093b85
   93a20:	00093b85 	.word	0x00093b85
   93a24:	00093b85 	.word	0x00093b85
   93a28:	00093b85 	.word	0x00093b85
   93a2c:	00093b85 	.word	0x00093b85
   93a30:	00093b85 	.word	0x00093b85
   93a34:	00093b85 	.word	0x00093b85
   93a38:	00093b85 	.word	0x00093b85
   93a3c:	00093b85 	.word	0x00093b85
   93a40:	00093b1d 	.word	0x00093b1d
   93a44:	00093b85 	.word	0x00093b85
   93a48:	00093b25 	.word	0x00093b25
   93a4c:	00093b2d 	.word	0x00093b2d
   93a50:	00093b35 	.word	0x00093b35
   93a54:	00093b3d 	.word	0x00093b3d
   93a58:	00093b85 	.word	0x00093b85
   93a5c:	00093b85 	.word	0x00093b85
   93a60:	00093b85 	.word	0x00093b85
   93a64:	00093b85 	.word	0x00093b85
   93a68:	00093b85 	.word	0x00093b85
   93a6c:	00093b85 	.word	0x00093b85
   93a70:	00093b85 	.word	0x00093b85
   93a74:	00093b85 	.word	0x00093b85
   93a78:	00093b85 	.word	0x00093b85
   93a7c:	00093b85 	.word	0x00093b85
   93a80:	00093b85 	.word	0x00093b85
   93a84:	00093b85 	.word	0x00093b85
   93a88:	00093b85 	.word	0x00093b85
   93a8c:	00093b85 	.word	0x00093b85
   93a90:	00093b85 	.word	0x00093b85
   93a94:	00093b85 	.word	0x00093b85
   93a98:	00093b85 	.word	0x00093b85
   93a9c:	00093b85 	.word	0x00093b85
   93aa0:	00093b85 	.word	0x00093b85
   93aa4:	00093b85 	.word	0x00093b85
   93aa8:	00093b85 	.word	0x00093b85
   93aac:	00093b85 	.word	0x00093b85
   93ab0:	00093b85 	.word	0x00093b85
   93ab4:	00093b85 	.word	0x00093b85
   93ab8:	00093b85 	.word	0x00093b85
   93abc:	00093b85 	.word	0x00093b85
   93ac0:	00093acd 	.word	0x00093acd
   93ac4:	00093ad5 	.word	0x00093ad5
   93ac8:	00093b7d 	.word	0x00093b7d
   93acc:	683b      	ldr	r3, [r7, #0]
   93ace:	2216      	movs	r2, #22
   93ad0:	701a      	strb	r2, [r3, #0]
   93ad2:	e058      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93ad4:	683b      	ldr	r3, [r7, #0]
   93ad6:	2218      	movs	r2, #24
   93ad8:	701a      	strb	r2, [r3, #0]
   93ada:	e054      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93adc:	683b      	ldr	r3, [r7, #0]
   93ade:	2201      	movs	r2, #1
   93ae0:	701a      	strb	r2, [r3, #0]
   93ae2:	e050      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93ae4:	683b      	ldr	r3, [r7, #0]
   93ae6:	2210      	movs	r2, #16
   93ae8:	701a      	strb	r2, [r3, #0]
   93aea:	e04c      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93aec:	683b      	ldr	r3, [r7, #0]
   93aee:	2211      	movs	r2, #17
   93af0:	701a      	strb	r2, [r3, #0]
   93af2:	e048      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93af4:	683b      	ldr	r3, [r7, #0]
   93af6:	2212      	movs	r2, #18
   93af8:	701a      	strb	r2, [r3, #0]
   93afa:	e044      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93afc:	683b      	ldr	r3, [r7, #0]
   93afe:	2202      	movs	r2, #2
   93b00:	701a      	strb	r2, [r3, #0]
   93b02:	e040      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93b04:	683b      	ldr	r3, [r7, #0]
   93b06:	2203      	movs	r2, #3
   93b08:	701a      	strb	r2, [r3, #0]
   93b0a:	e03c      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93b0c:	683b      	ldr	r3, [r7, #0]
   93b0e:	2204      	movs	r2, #4
   93b10:	701a      	strb	r2, [r3, #0]
   93b12:	e038      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93b14:	683b      	ldr	r3, [r7, #0]
   93b16:	2205      	movs	r2, #5
   93b18:	701a      	strb	r2, [r3, #0]
   93b1a:	e034      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93b1c:	683b      	ldr	r3, [r7, #0]
   93b1e:	2207      	movs	r2, #7
   93b20:	701a      	strb	r2, [r3, #0]
   93b22:	e030      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93b24:	683b      	ldr	r3, [r7, #0]
   93b26:	2208      	movs	r2, #8
   93b28:	701a      	strb	r2, [r3, #0]
   93b2a:	e02c      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93b2c:	683b      	ldr	r3, [r7, #0]
   93b2e:	2209      	movs	r2, #9
   93b30:	701a      	strb	r2, [r3, #0]
   93b32:	e028      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93b34:	683b      	ldr	r3, [r7, #0]
   93b36:	220a      	movs	r2, #10
   93b38:	701a      	strb	r2, [r3, #0]
   93b3a:	e024      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93b3c:	683b      	ldr	r3, [r7, #0]
   93b3e:	220b      	movs	r2, #11
   93b40:	701a      	strb	r2, [r3, #0]
   93b42:	e020      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93b44:	683b      	ldr	r3, [r7, #0]
   93b46:	220c      	movs	r2, #12
   93b48:	701a      	strb	r2, [r3, #0]
   93b4a:	e01c      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93b4c:	683b      	ldr	r3, [r7, #0]
   93b4e:	220d      	movs	r2, #13
   93b50:	701a      	strb	r2, [r3, #0]
   93b52:	e018      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93b54:	683b      	ldr	r3, [r7, #0]
   93b56:	220f      	movs	r2, #15
   93b58:	701a      	strb	r2, [r3, #0]
   93b5a:	e014      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93b5c:	683b      	ldr	r3, [r7, #0]
   93b5e:	220f      	movs	r2, #15
   93b60:	701a      	strb	r2, [r3, #0]
   93b62:	e010      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93b64:	683b      	ldr	r3, [r7, #0]
   93b66:	2213      	movs	r2, #19
   93b68:	701a      	strb	r2, [r3, #0]
   93b6a:	e00c      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93b6c:	683b      	ldr	r3, [r7, #0]
   93b6e:	2214      	movs	r2, #20
   93b70:	701a      	strb	r2, [r3, #0]
   93b72:	e008      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93b74:	683b      	ldr	r3, [r7, #0]
   93b76:	2215      	movs	r2, #21
   93b78:	701a      	strb	r2, [r3, #0]
   93b7a:	e004      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93b7c:	683b      	ldr	r3, [r7, #0]
   93b7e:	2207      	movs	r2, #7
   93b80:	701a      	strb	r2, [r3, #0]
   93b82:	e000      	b.n	93b86 <cl_isouf_translatemacevent+0x226>
   93b84:	bf00      	nop
   93b86:	2300      	movs	r3, #0
   93b88:	4618      	mov	r0, r3
   93b8a:	370c      	adds	r7, #12
   93b8c:	46bd      	mov	sp, r7
   93b8e:	bc80      	pop	{r7}
   93b90:	4770      	bx	lr
   93b92:	bf00      	nop

00093b94 <cl_isoufcompleted>:
   93b94:	b580      	push	{r7, lr}
   93b96:	af00      	add	r7, sp, #0
   93b98:	2100      	movs	r1, #0
   93b9a:	2004      	movs	r0, #4
   93b9c:	4b02      	ldr	r3, [pc, #8]	; (93ba8 <cl_isoufcompleted+0x14>)
   93b9e:	4798      	blx	r3
   93ba0:	2300      	movs	r3, #0
   93ba2:	4618      	mov	r0, r3
   93ba4:	bd80      	pop	{r7, pc}
   93ba6:	bf00      	nop
   93ba8:	00093cd9 	.word	0x00093cd9

00093bac <cl_dialysate_ready_isouf>:
   93bac:	b580      	push	{r7, lr}
   93bae:	af00      	add	r7, sp, #0
   93bb0:	2001      	movs	r0, #1
   93bb2:	4b11      	ldr	r3, [pc, #68]	; (93bf8 <cl_dialysate_ready_isouf+0x4c>)
   93bb4:	4798      	blx	r3
   93bb6:	2002      	movs	r0, #2
   93bb8:	4b0f      	ldr	r3, [pc, #60]	; (93bf8 <cl_dialysate_ready_isouf+0x4c>)
   93bba:	4798      	blx	r3
   93bbc:	2005      	movs	r0, #5
   93bbe:	4b0f      	ldr	r3, [pc, #60]	; (93bfc <cl_dialysate_ready_isouf+0x50>)
   93bc0:	4798      	blx	r3
   93bc2:	4b0f      	ldr	r3, [pc, #60]	; (93c00 <cl_dialysate_ready_isouf+0x54>)
   93bc4:	4798      	blx	r3
   93bc6:	2001      	movs	r0, #1
   93bc8:	4b0e      	ldr	r3, [pc, #56]	; (93c04 <cl_dialysate_ready_isouf+0x58>)
   93bca:	4798      	blx	r3
   93bcc:	2002      	movs	r0, #2
   93bce:	4b0e      	ldr	r3, [pc, #56]	; (93c08 <cl_dialysate_ready_isouf+0x5c>)
   93bd0:	4798      	blx	r3
   93bd2:	2001      	movs	r0, #1
   93bd4:	4b0b      	ldr	r3, [pc, #44]	; (93c04 <cl_dialysate_ready_isouf+0x58>)
   93bd6:	4798      	blx	r3
   93bd8:	2012      	movs	r0, #18
   93bda:	4b0c      	ldr	r3, [pc, #48]	; (93c0c <cl_dialysate_ready_isouf+0x60>)
   93bdc:	4798      	blx	r3
   93bde:	2100      	movs	r1, #0
   93be0:	200a      	movs	r0, #10
   93be2:	4b0b      	ldr	r3, [pc, #44]	; (93c10 <cl_dialysate_ready_isouf+0x64>)
   93be4:	4798      	blx	r3
   93be6:	2100      	movs	r1, #0
   93be8:	2002      	movs	r0, #2
   93bea:	4b0a      	ldr	r3, [pc, #40]	; (93c14 <cl_dialysate_ready_isouf+0x68>)
   93bec:	4798      	blx	r3
   93bee:	4b0a      	ldr	r3, [pc, #40]	; (93c18 <cl_dialysate_ready_isouf+0x6c>)
   93bf0:	4798      	blx	r3
   93bf2:	2300      	movs	r3, #0
   93bf4:	4618      	mov	r0, r3
   93bf6:	bd80      	pop	{r7, pc}
   93bf8:	00097949 	.word	0x00097949
   93bfc:	00083319 	.word	0x00083319
   93c00:	00097999 	.word	0x00097999
   93c04:	000979cd 	.word	0x000979cd
   93c08:	000923ad 	.word	0x000923ad
   93c0c:	000979ad 	.word	0x000979ad
   93c10:	000925a9 	.word	0x000925a9
   93c14:	00093cd9 	.word	0x00093cd9
   93c18:	000930ad 	.word	0x000930ad

00093c1c <Cl_isouf_init>:
   93c1c:	b480      	push	{r7}
   93c1e:	af00      	add	r7, sp, #0
   93c20:	4b05      	ldr	r3, [pc, #20]	; (93c38 <Cl_isouf_init+0x1c>)
   93c22:	2200      	movs	r2, #0
   93c24:	701a      	strb	r2, [r3, #0]
   93c26:	4b05      	ldr	r3, [pc, #20]	; (93c3c <Cl_isouf_init+0x20>)
   93c28:	2200      	movs	r2, #0
   93c2a:	601a      	str	r2, [r3, #0]
   93c2c:	2300      	movs	r3, #0
   93c2e:	4618      	mov	r0, r3
   93c30:	46bd      	mov	sp, r7
   93c32:	bc80      	pop	{r7}
   93c34:	4770      	bx	lr
   93c36:	bf00      	nop
   93c38:	200726d1 	.word	0x200726d1
   93c3c:	200726d4 	.word	0x200726d4

00093c40 <cl_ufpumpFeedback_start>:
   93c40:	b480      	push	{r7}
   93c42:	af00      	add	r7, sp, #0
   93c44:	4b03      	ldr	r3, [pc, #12]	; (93c54 <cl_ufpumpFeedback_start+0x14>)
   93c46:	2201      	movs	r2, #1
   93c48:	701a      	strb	r2, [r3, #0]
   93c4a:	2300      	movs	r3, #0
   93c4c:	4618      	mov	r0, r3
   93c4e:	46bd      	mov	sp, r7
   93c50:	bc80      	pop	{r7}
   93c52:	4770      	bx	lr
   93c54:	200726f6 	.word	0x200726f6

00093c58 <cl_ufpumpFeedback_stop>:
   93c58:	b480      	push	{r7}
   93c5a:	af00      	add	r7, sp, #0
   93c5c:	2300      	movs	r3, #0
   93c5e:	4618      	mov	r0, r3
   93c60:	46bd      	mov	sp, r7
   93c62:	bc80      	pop	{r7}
   93c64:	4770      	bx	lr
   93c66:	bf00      	nop

00093c68 <cl_ufpumpFeedback_get_state>:
   93c68:	b480      	push	{r7}
   93c6a:	b083      	sub	sp, #12
   93c6c:	af00      	add	r7, sp, #0
   93c6e:	6078      	str	r0, [r7, #4]
   93c70:	4b04      	ldr	r3, [pc, #16]	; (93c84 <cl_ufpumpFeedback_get_state+0x1c>)
   93c72:	781a      	ldrb	r2, [r3, #0]
   93c74:	687b      	ldr	r3, [r7, #4]
   93c76:	701a      	strb	r2, [r3, #0]
   93c78:	2300      	movs	r3, #0
   93c7a:	4618      	mov	r0, r3
   93c7c:	370c      	adds	r7, #12
   93c7e:	46bd      	mov	sp, r7
   93c80:	bc80      	pop	{r7}
   93c82:	4770      	bx	lr
   93c84:	200726f6 	.word	0x200726f6

00093c88 <cl_ufpumpFeedback_get_delta>:
   93c88:	b480      	push	{r7}
   93c8a:	b083      	sub	sp, #12
   93c8c:	af00      	add	r7, sp, #0
   93c8e:	6078      	str	r0, [r7, #4]
   93c90:	4b07      	ldr	r3, [pc, #28]	; (93cb0 <cl_ufpumpFeedback_get_delta+0x28>)
   93c92:	881a      	ldrh	r2, [r3, #0]
   93c94:	4b07      	ldr	r3, [pc, #28]	; (93cb4 <cl_ufpumpFeedback_get_delta+0x2c>)
   93c96:	881b      	ldrh	r3, [r3, #0]
   93c98:	1ad3      	subs	r3, r2, r3
   93c9a:	b29b      	uxth	r3, r3
   93c9c:	b21a      	sxth	r2, r3
   93c9e:	687b      	ldr	r3, [r7, #4]
   93ca0:	801a      	strh	r2, [r3, #0]
   93ca2:	2300      	movs	r3, #0
   93ca4:	4618      	mov	r0, r3
   93ca6:	370c      	adds	r7, #12
   93ca8:	46bd      	mov	sp, r7
   93caa:	bc80      	pop	{r7}
   93cac:	4770      	bx	lr
   93cae:	bf00      	nop
   93cb0:	200726f8 	.word	0x200726f8
   93cb4:	200726f4 	.word	0x200726f4

00093cb8 <cl_ufpumpFeedback_set_expected_period>:
   93cb8:	b480      	push	{r7}
   93cba:	b083      	sub	sp, #12
   93cbc:	af00      	add	r7, sp, #0
   93cbe:	4603      	mov	r3, r0
   93cc0:	80fb      	strh	r3, [r7, #6]
   93cc2:	88fa      	ldrh	r2, [r7, #6]
   93cc4:	4b03      	ldr	r3, [pc, #12]	; (93cd4 <cl_ufpumpFeedback_set_expected_period+0x1c>)
   93cc6:	801a      	strh	r2, [r3, #0]
   93cc8:	2300      	movs	r3, #0
   93cca:	4618      	mov	r0, r3
   93ccc:	370c      	adds	r7, #12
   93cce:	46bd      	mov	sp, r7
   93cd0:	bc80      	pop	{r7}
   93cd2:	4770      	bx	lr
   93cd4:	200726f4 	.word	0x200726f4

00093cd8 <cl_uf_controller>:
   93cd8:	b580      	push	{r7, lr}
   93cda:	b08e      	sub	sp, #56	; 0x38
   93cdc:	af00      	add	r7, sp, #0
   93cde:	4603      	mov	r3, r0
   93ce0:	6039      	str	r1, [r7, #0]
   93ce2:	71fb      	strb	r3, [r7, #7]
   93ce4:	2300      	movs	r3, #0
   93ce6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   93cea:	2300      	movs	r3, #0
   93cec:	737b      	strb	r3, [r7, #13]
   93cee:	2300      	movs	r3, #0
   93cf0:	817b      	strh	r3, [r7, #10]
   93cf2:	2300      	movs	r3, #0
   93cf4:	633b      	str	r3, [r7, #48]	; 0x30
   93cf6:	2300      	movs	r3, #0
   93cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   93cfa:	4b9e      	ldr	r3, [pc, #632]	; (93f74 <cl_uf_controller+0x29c>)
   93cfc:	781b      	ldrb	r3, [r3, #0]
   93cfe:	2b04      	cmp	r3, #4
   93d00:	f200 81b6 	bhi.w	94070 <cl_uf_controller+0x398>
   93d04:	a201      	add	r2, pc, #4	; (adr r2, 93d0c <cl_uf_controller+0x34>)
   93d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93d0a:	bf00      	nop
   93d0c:	00093d21 	.word	0x00093d21
   93d10:	00093e5b 	.word	0x00093e5b
   93d14:	00093f55 	.word	0x00093f55
   93d18:	00094025 	.word	0x00094025
   93d1c:	00094071 	.word	0x00094071
   93d20:	79fb      	ldrb	r3, [r7, #7]
   93d22:	2b02      	cmp	r3, #2
   93d24:	d013      	beq.n	93d4e <cl_uf_controller+0x76>
   93d26:	2b08      	cmp	r3, #8
   93d28:	d05a      	beq.n	93de0 <cl_uf_controller+0x108>
   93d2a:	2b01      	cmp	r3, #1
   93d2c:	d000      	beq.n	93d30 <cl_uf_controller+0x58>
   93d2e:	e093      	b.n	93e58 <cl_uf_controller+0x180>
   93d30:	683b      	ldr	r3, [r7, #0]
   93d32:	4a91      	ldr	r2, [pc, #580]	; (93f78 <cl_uf_controller+0x2a0>)
   93d34:	6013      	str	r3, [r2, #0]
   93d36:	4b90      	ldr	r3, [pc, #576]	; (93f78 <cl_uf_controller+0x2a0>)
   93d38:	681b      	ldr	r3, [r3, #0]
   93d3a:	b29a      	uxth	r2, r3
   93d3c:	4b8f      	ldr	r3, [pc, #572]	; (93f7c <cl_uf_controller+0x2a4>)
   93d3e:	801a      	strh	r2, [r3, #0]
   93d40:	4b8e      	ldr	r3, [pc, #568]	; (93f7c <cl_uf_controller+0x2a4>)
   93d42:	881b      	ldrh	r3, [r3, #0]
   93d44:	4619      	mov	r1, r3
   93d46:	2004      	movs	r0, #4
   93d48:	4b8d      	ldr	r3, [pc, #564]	; (93f80 <cl_uf_controller+0x2a8>)
   93d4a:	4798      	blx	r3
   93d4c:	e084      	b.n	93e58 <cl_uf_controller+0x180>
   93d4e:	4b8d      	ldr	r3, [pc, #564]	; (93f84 <cl_uf_controller+0x2ac>)
   93d50:	781b      	ldrb	r3, [r3, #0]
   93d52:	2b0f      	cmp	r3, #15
   93d54:	d132      	bne.n	93dbc <cl_uf_controller+0xe4>
   93d56:	4b8c      	ldr	r3, [pc, #560]	; (93f88 <cl_uf_controller+0x2b0>)
   93d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   93d5a:	633b      	str	r3, [r7, #48]	; 0x30
   93d5c:	23f0      	movs	r3, #240	; 0xf0
   93d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   93d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   93d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   93d64:	fbb2 f2f3 	udiv	r2, r2, r3
   93d68:	4b88      	ldr	r3, [pc, #544]	; (93f8c <cl_uf_controller+0x2b4>)
   93d6a:	4610      	mov	r0, r2
   93d6c:	4798      	blx	r3
   93d6e:	4603      	mov	r3, r0
   93d70:	62bb      	str	r3, [r7, #40]	; 0x28
   93d72:	4b87      	ldr	r3, [pc, #540]	; (93f90 <cl_uf_controller+0x2b8>)
   93d74:	4987      	ldr	r1, [pc, #540]	; (93f94 <cl_uf_controller+0x2bc>)
   93d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   93d78:	4798      	blx	r3
   93d7a:	4603      	mov	r3, r0
   93d7c:	461a      	mov	r2, r3
   93d7e:	4b86      	ldr	r3, [pc, #536]	; (93f98 <cl_uf_controller+0x2c0>)
   93d80:	4610      	mov	r0, r2
   93d82:	4798      	blx	r3
   93d84:	4603      	mov	r3, r0
   93d86:	84fb      	strh	r3, [r7, #38]	; 0x26
   93d88:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   93d8c:	4618      	mov	r0, r3
   93d8e:	4b83      	ldr	r3, [pc, #524]	; (93f9c <cl_uf_controller+0x2c4>)
   93d90:	4798      	blx	r3
   93d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   93d94:	2b00      	cmp	r3, #0
   93d96:	d05c      	beq.n	93e52 <cl_uf_controller+0x17a>
   93d98:	4b81      	ldr	r3, [pc, #516]	; (93fa0 <cl_uf_controller+0x2c8>)
   93d9a:	681b      	ldr	r3, [r3, #0]
   93d9c:	4619      	mov	r1, r3
   93d9e:	2004      	movs	r0, #4
   93da0:	4b77      	ldr	r3, [pc, #476]	; (93f80 <cl_uf_controller+0x2a8>)
   93da2:	4798      	blx	r3
   93da4:	2004      	movs	r0, #4
   93da6:	4b7f      	ldr	r3, [pc, #508]	; (93fa4 <cl_uf_controller+0x2cc>)
   93da8:	4798      	blx	r3
   93daa:	4603      	mov	r3, r0
   93dac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   93db0:	4b7d      	ldr	r3, [pc, #500]	; (93fa8 <cl_uf_controller+0x2d0>)
   93db2:	4798      	blx	r3
   93db4:	4b6f      	ldr	r3, [pc, #444]	; (93f74 <cl_uf_controller+0x29c>)
   93db6:	2201      	movs	r2, #1
   93db8:	701a      	strb	r2, [r3, #0]
   93dba:	e04a      	b.n	93e52 <cl_uf_controller+0x17a>
   93dbc:	4b6f      	ldr	r3, [pc, #444]	; (93f7c <cl_uf_controller+0x2a4>)
   93dbe:	881b      	ldrh	r3, [r3, #0]
   93dc0:	4619      	mov	r1, r3
   93dc2:	2004      	movs	r0, #4
   93dc4:	4b6e      	ldr	r3, [pc, #440]	; (93f80 <cl_uf_controller+0x2a8>)
   93dc6:	4798      	blx	r3
   93dc8:	2004      	movs	r0, #4
   93dca:	4b76      	ldr	r3, [pc, #472]	; (93fa4 <cl_uf_controller+0x2cc>)
   93dcc:	4798      	blx	r3
   93dce:	4603      	mov	r3, r0
   93dd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   93dd4:	4b74      	ldr	r3, [pc, #464]	; (93fa8 <cl_uf_controller+0x2d0>)
   93dd6:	4798      	blx	r3
   93dd8:	4b66      	ldr	r3, [pc, #408]	; (93f74 <cl_uf_controller+0x29c>)
   93dda:	2201      	movs	r2, #1
   93ddc:	701a      	strb	r2, [r3, #0]
   93dde:	e038      	b.n	93e52 <cl_uf_controller+0x17a>
   93de0:	4b69      	ldr	r3, [pc, #420]	; (93f88 <cl_uf_controller+0x2b0>)
   93de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   93de4:	633b      	str	r3, [r7, #48]	; 0x30
   93de6:	23f0      	movs	r3, #240	; 0xf0
   93de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   93dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   93dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   93dee:	fbb2 f2f3 	udiv	r2, r2, r3
   93df2:	4b66      	ldr	r3, [pc, #408]	; (93f8c <cl_uf_controller+0x2b4>)
   93df4:	4610      	mov	r0, r2
   93df6:	4798      	blx	r3
   93df8:	4603      	mov	r3, r0
   93dfa:	623b      	str	r3, [r7, #32]
   93dfc:	4b64      	ldr	r3, [pc, #400]	; (93f90 <cl_uf_controller+0x2b8>)
   93dfe:	4965      	ldr	r1, [pc, #404]	; (93f94 <cl_uf_controller+0x2bc>)
   93e00:	6a38      	ldr	r0, [r7, #32]
   93e02:	4798      	blx	r3
   93e04:	4603      	mov	r3, r0
   93e06:	461a      	mov	r2, r3
   93e08:	4b63      	ldr	r3, [pc, #396]	; (93f98 <cl_uf_controller+0x2c0>)
   93e0a:	4610      	mov	r0, r2
   93e0c:	4798      	blx	r3
   93e0e:	4603      	mov	r3, r0
   93e10:	83fb      	strh	r3, [r7, #30]
   93e12:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
   93e16:	4618      	mov	r0, r3
   93e18:	4b60      	ldr	r3, [pc, #384]	; (93f9c <cl_uf_controller+0x2c4>)
   93e1a:	4798      	blx	r3
   93e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   93e1e:	2b00      	cmp	r3, #0
   93e20:	d019      	beq.n	93e56 <cl_uf_controller+0x17e>
   93e22:	4b5f      	ldr	r3, [pc, #380]	; (93fa0 <cl_uf_controller+0x2c8>)
   93e24:	681b      	ldr	r3, [r3, #0]
   93e26:	4619      	mov	r1, r3
   93e28:	2004      	movs	r0, #4
   93e2a:	4b55      	ldr	r3, [pc, #340]	; (93f80 <cl_uf_controller+0x2a8>)
   93e2c:	4798      	blx	r3
   93e2e:	4b5c      	ldr	r3, [pc, #368]	; (93fa0 <cl_uf_controller+0x2c8>)
   93e30:	681b      	ldr	r3, [r3, #0]
   93e32:	b21b      	sxth	r3, r3
   93e34:	4618      	mov	r0, r3
   93e36:	4b5d      	ldr	r3, [pc, #372]	; (93fac <cl_uf_controller+0x2d4>)
   93e38:	4798      	blx	r3
   93e3a:	2004      	movs	r0, #4
   93e3c:	4b59      	ldr	r3, [pc, #356]	; (93fa4 <cl_uf_controller+0x2cc>)
   93e3e:	4798      	blx	r3
   93e40:	4603      	mov	r3, r0
   93e42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   93e46:	4b58      	ldr	r3, [pc, #352]	; (93fa8 <cl_uf_controller+0x2d0>)
   93e48:	4798      	blx	r3
   93e4a:	4b4a      	ldr	r3, [pc, #296]	; (93f74 <cl_uf_controller+0x29c>)
   93e4c:	2201      	movs	r2, #1
   93e4e:	701a      	strb	r2, [r3, #0]
   93e50:	e001      	b.n	93e56 <cl_uf_controller+0x17e>
   93e52:	bf00      	nop
   93e54:	e10d      	b.n	94072 <cl_uf_controller+0x39a>
   93e56:	bf00      	nop
   93e58:	e10b      	b.n	94072 <cl_uf_controller+0x39a>
   93e5a:	79fb      	ldrb	r3, [r7, #7]
   93e5c:	3b01      	subs	r3, #1
   93e5e:	2b07      	cmp	r3, #7
   93e60:	d874      	bhi.n	93f4c <cl_uf_controller+0x274>
   93e62:	a201      	add	r2, pc, #4	; (adr r2, 93e68 <cl_uf_controller+0x190>)
   93e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93e68:	00093ea3 	.word	0x00093ea3
   93e6c:	00093f4d 	.word	0x00093f4d
   93e70:	00093f4d 	.word	0x00093f4d
   93e74:	00093eb5 	.word	0x00093eb5
   93e78:	00093ed3 	.word	0x00093ed3
   93e7c:	00093e89 	.word	0x00093e89
   93e80:	00093f4d 	.word	0x00093f4d
   93e84:	00093edb 	.word	0x00093edb
   93e88:	f107 030d 	add.w	r3, r7, #13
   93e8c:	4618      	mov	r0, r3
   93e8e:	4b48      	ldr	r3, [pc, #288]	; (93fb0 <cl_uf_controller+0x2d8>)
   93e90:	4798      	blx	r3
   93e92:	f107 030a 	add.w	r3, r7, #10
   93e96:	4618      	mov	r0, r3
   93e98:	4b46      	ldr	r3, [pc, #280]	; (93fb4 <cl_uf_controller+0x2dc>)
   93e9a:	4798      	blx	r3
   93e9c:	7b7b      	ldrb	r3, [r7, #13]
   93e9e:	2b05      	cmp	r3, #5
   93ea0:	e057      	b.n	93f52 <cl_uf_controller+0x27a>
   93ea2:	683b      	ldr	r3, [r7, #0]
   93ea4:	4a34      	ldr	r2, [pc, #208]	; (93f78 <cl_uf_controller+0x2a0>)
   93ea6:	6013      	str	r3, [r2, #0]
   93ea8:	683b      	ldr	r3, [r7, #0]
   93eaa:	4619      	mov	r1, r3
   93eac:	2004      	movs	r0, #4
   93eae:	4b34      	ldr	r3, [pc, #208]	; (93f80 <cl_uf_controller+0x2a8>)
   93eb0:	4798      	blx	r3
   93eb2:	e04e      	b.n	93f52 <cl_uf_controller+0x27a>
   93eb4:	2004      	movs	r0, #4
   93eb6:	4b40      	ldr	r3, [pc, #256]	; (93fb8 <cl_uf_controller+0x2e0>)
   93eb8:	4798      	blx	r3
   93eba:	4603      	mov	r3, r0
   93ebc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   93ec0:	4b3e      	ldr	r3, [pc, #248]	; (93fbc <cl_uf_controller+0x2e4>)
   93ec2:	4798      	blx	r3
   93ec4:	4603      	mov	r3, r0
   93ec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   93eca:	4b2a      	ldr	r3, [pc, #168]	; (93f74 <cl_uf_controller+0x29c>)
   93ecc:	2202      	movs	r2, #2
   93ece:	701a      	strb	r2, [r3, #0]
   93ed0:	e03f      	b.n	93f52 <cl_uf_controller+0x27a>
   93ed2:	4b28      	ldr	r3, [pc, #160]	; (93f74 <cl_uf_controller+0x29c>)
   93ed4:	2200      	movs	r2, #0
   93ed6:	701a      	strb	r2, [r3, #0]
   93ed8:	e03b      	b.n	93f52 <cl_uf_controller+0x27a>
   93eda:	4b2b      	ldr	r3, [pc, #172]	; (93f88 <cl_uf_controller+0x2b0>)
   93edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   93ede:	633b      	str	r3, [r7, #48]	; 0x30
   93ee0:	23f0      	movs	r3, #240	; 0xf0
   93ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
   93ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   93ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   93ee8:	fbb2 f2f3 	udiv	r2, r2, r3
   93eec:	4b27      	ldr	r3, [pc, #156]	; (93f8c <cl_uf_controller+0x2b4>)
   93eee:	4610      	mov	r0, r2
   93ef0:	4798      	blx	r3
   93ef2:	4603      	mov	r3, r0
   93ef4:	61bb      	str	r3, [r7, #24]
   93ef6:	4b26      	ldr	r3, [pc, #152]	; (93f90 <cl_uf_controller+0x2b8>)
   93ef8:	4926      	ldr	r1, [pc, #152]	; (93f94 <cl_uf_controller+0x2bc>)
   93efa:	69b8      	ldr	r0, [r7, #24]
   93efc:	4798      	blx	r3
   93efe:	4603      	mov	r3, r0
   93f00:	461a      	mov	r2, r3
   93f02:	4b25      	ldr	r3, [pc, #148]	; (93f98 <cl_uf_controller+0x2c0>)
   93f04:	4610      	mov	r0, r2
   93f06:	4798      	blx	r3
   93f08:	4603      	mov	r3, r0
   93f0a:	82fb      	strh	r3, [r7, #22]
   93f0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   93f10:	4618      	mov	r0, r3
   93f12:	4b22      	ldr	r3, [pc, #136]	; (93f9c <cl_uf_controller+0x2c4>)
   93f14:	4798      	blx	r3
   93f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   93f18:	2b00      	cmp	r3, #0
   93f1a:	d019      	beq.n	93f50 <cl_uf_controller+0x278>
   93f1c:	4b20      	ldr	r3, [pc, #128]	; (93fa0 <cl_uf_controller+0x2c8>)
   93f1e:	681b      	ldr	r3, [r3, #0]
   93f20:	4619      	mov	r1, r3
   93f22:	2004      	movs	r0, #4
   93f24:	4b16      	ldr	r3, [pc, #88]	; (93f80 <cl_uf_controller+0x2a8>)
   93f26:	4798      	blx	r3
   93f28:	4b1d      	ldr	r3, [pc, #116]	; (93fa0 <cl_uf_controller+0x2c8>)
   93f2a:	681b      	ldr	r3, [r3, #0]
   93f2c:	b21b      	sxth	r3, r3
   93f2e:	4618      	mov	r0, r3
   93f30:	4b1e      	ldr	r3, [pc, #120]	; (93fac <cl_uf_controller+0x2d4>)
   93f32:	4798      	blx	r3
   93f34:	2004      	movs	r0, #4
   93f36:	4b1b      	ldr	r3, [pc, #108]	; (93fa4 <cl_uf_controller+0x2cc>)
   93f38:	4798      	blx	r3
   93f3a:	4603      	mov	r3, r0
   93f3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   93f40:	4b19      	ldr	r3, [pc, #100]	; (93fa8 <cl_uf_controller+0x2d0>)
   93f42:	4798      	blx	r3
   93f44:	4b0b      	ldr	r3, [pc, #44]	; (93f74 <cl_uf_controller+0x29c>)
   93f46:	2201      	movs	r2, #1
   93f48:	701a      	strb	r2, [r3, #0]
   93f4a:	e001      	b.n	93f50 <cl_uf_controller+0x278>
   93f4c:	bf00      	nop
   93f4e:	e090      	b.n	94072 <cl_uf_controller+0x39a>
   93f50:	bf00      	nop
   93f52:	e08e      	b.n	94072 <cl_uf_controller+0x39a>
   93f54:	79fb      	ldrb	r3, [r7, #7]
   93f56:	2b01      	cmp	r3, #1
   93f58:	d002      	beq.n	93f60 <cl_uf_controller+0x288>
   93f5a:	2b02      	cmp	r3, #2
   93f5c:	d030      	beq.n	93fc0 <cl_uf_controller+0x2e8>
   93f5e:	e060      	b.n	94022 <cl_uf_controller+0x34a>
   93f60:	683b      	ldr	r3, [r7, #0]
   93f62:	4a05      	ldr	r2, [pc, #20]	; (93f78 <cl_uf_controller+0x2a0>)
   93f64:	6013      	str	r3, [r2, #0]
   93f66:	683b      	ldr	r3, [r7, #0]
   93f68:	4619      	mov	r1, r3
   93f6a:	2004      	movs	r0, #4
   93f6c:	4b04      	ldr	r3, [pc, #16]	; (93f80 <cl_uf_controller+0x2a8>)
   93f6e:	4798      	blx	r3
   93f70:	e057      	b.n	94022 <cl_uf_controller+0x34a>
   93f72:	bf00      	nop
   93f74:	200726fa 	.word	0x200726fa
   93f78:	200726fc 	.word	0x200726fc
   93f7c:	20072700 	.word	0x20072700
   93f80:	00097a25 	.word	0x00097a25
   93f84:	200704b0 	.word	0x200704b0
   93f88:	200731a4 	.word	0x200731a4
   93f8c:	000a3d65 	.word	0x000a3d65
   93f90:	000a3e15 	.word	0x000a3e15
   93f94:	41200000 	.word	0x41200000
   93f98:	000a41a1 	.word	0x000a41a1
   93f9c:	0008481d 	.word	0x0008481d
   93fa0:	20071678 	.word	0x20071678
   93fa4:	0009790d 	.word	0x0009790d
   93fa8:	00093c41 	.word	0x00093c41
   93fac:	00093cb9 	.word	0x00093cb9
   93fb0:	00093c69 	.word	0x00093c69
   93fb4:	00093c89 	.word	0x00093c89
   93fb8:	00097949 	.word	0x00097949
   93fbc:	00093c59 	.word	0x00093c59
   93fc0:	4b2e      	ldr	r3, [pc, #184]	; (9407c <cl_uf_controller+0x3a4>)
   93fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   93fc4:	633b      	str	r3, [r7, #48]	; 0x30
   93fc6:	23f0      	movs	r3, #240	; 0xf0
   93fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   93fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   93fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   93fce:	fbb2 f2f3 	udiv	r2, r2, r3
   93fd2:	4b2b      	ldr	r3, [pc, #172]	; (94080 <cl_uf_controller+0x3a8>)
   93fd4:	4610      	mov	r0, r2
   93fd6:	4798      	blx	r3
   93fd8:	4603      	mov	r3, r0
   93fda:	613b      	str	r3, [r7, #16]
   93fdc:	4b29      	ldr	r3, [pc, #164]	; (94084 <cl_uf_controller+0x3ac>)
   93fde:	492a      	ldr	r1, [pc, #168]	; (94088 <cl_uf_controller+0x3b0>)
   93fe0:	6938      	ldr	r0, [r7, #16]
   93fe2:	4798      	blx	r3
   93fe4:	4603      	mov	r3, r0
   93fe6:	461a      	mov	r2, r3
   93fe8:	4b28      	ldr	r3, [pc, #160]	; (9408c <cl_uf_controller+0x3b4>)
   93fea:	4610      	mov	r0, r2
   93fec:	4798      	blx	r3
   93fee:	4603      	mov	r3, r0
   93ff0:	81fb      	strh	r3, [r7, #14]
   93ff2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   93ff6:	4618      	mov	r0, r3
   93ff8:	4b25      	ldr	r3, [pc, #148]	; (94090 <cl_uf_controller+0x3b8>)
   93ffa:	4798      	blx	r3
   93ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   93ffe:	2b00      	cmp	r3, #0
   94000:	d00e      	beq.n	94020 <cl_uf_controller+0x348>
   94002:	2004      	movs	r0, #4
   94004:	4b23      	ldr	r3, [pc, #140]	; (94094 <cl_uf_controller+0x3bc>)
   94006:	4798      	blx	r3
   94008:	4603      	mov	r3, r0
   9400a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   9400e:	4b22      	ldr	r3, [pc, #136]	; (94098 <cl_uf_controller+0x3c0>)
   94010:	681b      	ldr	r3, [r3, #0]
   94012:	4619      	mov	r1, r3
   94014:	2004      	movs	r0, #4
   94016:	4b21      	ldr	r3, [pc, #132]	; (9409c <cl_uf_controller+0x3c4>)
   94018:	4798      	blx	r3
   9401a:	4b21      	ldr	r3, [pc, #132]	; (940a0 <cl_uf_controller+0x3c8>)
   9401c:	2201      	movs	r2, #1
   9401e:	701a      	strb	r2, [r3, #0]
   94020:	bf00      	nop
   94022:	e026      	b.n	94072 <cl_uf_controller+0x39a>
   94024:	79fb      	ldrb	r3, [r7, #7]
   94026:	2b02      	cmp	r3, #2
   94028:	d00d      	beq.n	94046 <cl_uf_controller+0x36e>
   9402a:	2b04      	cmp	r3, #4
   9402c:	d015      	beq.n	9405a <cl_uf_controller+0x382>
   9402e:	2b01      	cmp	r3, #1
   94030:	d000      	beq.n	94034 <cl_uf_controller+0x35c>
   94032:	e01c      	b.n	9406e <cl_uf_controller+0x396>
   94034:	683b      	ldr	r3, [r7, #0]
   94036:	4a1b      	ldr	r2, [pc, #108]	; (940a4 <cl_uf_controller+0x3cc>)
   94038:	6013      	str	r3, [r2, #0]
   9403a:	683b      	ldr	r3, [r7, #0]
   9403c:	4619      	mov	r1, r3
   9403e:	2004      	movs	r0, #4
   94040:	4b16      	ldr	r3, [pc, #88]	; (9409c <cl_uf_controller+0x3c4>)
   94042:	4798      	blx	r3
   94044:	e013      	b.n	9406e <cl_uf_controller+0x396>
   94046:	2004      	movs	r0, #4
   94048:	4b12      	ldr	r3, [pc, #72]	; (94094 <cl_uf_controller+0x3bc>)
   9404a:	4798      	blx	r3
   9404c:	4603      	mov	r3, r0
   9404e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   94052:	4b13      	ldr	r3, [pc, #76]	; (940a0 <cl_uf_controller+0x3c8>)
   94054:	2201      	movs	r2, #1
   94056:	701a      	strb	r2, [r3, #0]
   94058:	e009      	b.n	9406e <cl_uf_controller+0x396>
   9405a:	2004      	movs	r0, #4
   9405c:	4b12      	ldr	r3, [pc, #72]	; (940a8 <cl_uf_controller+0x3d0>)
   9405e:	4798      	blx	r3
   94060:	4603      	mov	r3, r0
   94062:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   94066:	4b0e      	ldr	r3, [pc, #56]	; (940a0 <cl_uf_controller+0x3c8>)
   94068:	2202      	movs	r2, #2
   9406a:	701a      	strb	r2, [r3, #0]
   9406c:	bf00      	nop
   9406e:	e000      	b.n	94072 <cl_uf_controller+0x39a>
   94070:	bf00      	nop
   94072:	2300      	movs	r3, #0
   94074:	4618      	mov	r0, r3
   94076:	3738      	adds	r7, #56	; 0x38
   94078:	46bd      	mov	sp, r7
   9407a:	bd80      	pop	{r7, pc}
   9407c:	200731a4 	.word	0x200731a4
   94080:	000a3d65 	.word	0x000a3d65
   94084:	000a3e15 	.word	0x000a3e15
   94088:	41200000 	.word	0x41200000
   9408c:	000a41a1 	.word	0x000a41a1
   94090:	0008481d 	.word	0x0008481d
   94094:	0009790d 	.word	0x0009790d
   94098:	20071678 	.word	0x20071678
   9409c:	00097a25 	.word	0x00097a25
   940a0:	200726fa 	.word	0x200726fa
   940a4:	200726fc 	.word	0x200726fc
   940a8:	00097949 	.word	0x00097949

000940ac <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   940ac:	b480      	push	{r7}
   940ae:	b083      	sub	sp, #12
   940b0:	af00      	add	r7, sp, #0
   940b2:	4603      	mov	r3, r0
   940b4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   940b6:	4908      	ldr	r1, [pc, #32]	; (940d8 <NVIC_EnableIRQ+0x2c>)
   940b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   940bc:	095b      	lsrs	r3, r3, #5
   940be:	79fa      	ldrb	r2, [r7, #7]
   940c0:	f002 021f 	and.w	r2, r2, #31
   940c4:	2001      	movs	r0, #1
   940c6:	fa00 f202 	lsl.w	r2, r0, r2
   940ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   940ce:	bf00      	nop
   940d0:	370c      	adds	r7, #12
   940d2:	46bd      	mov	sp, r7
   940d4:	bc80      	pop	{r7}
   940d6:	4770      	bx	lr
   940d8:	e000e100 	.word	0xe000e100

000940dc <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   940dc:	b480      	push	{r7}
   940de:	b08b      	sub	sp, #44	; 0x2c
   940e0:	af00      	add	r7, sp, #0
   940e2:	6078      	str	r0, [r7, #4]
   940e4:	460b      	mov	r3, r1
   940e6:	70fb      	strb	r3, [r7, #3]
   940e8:	687b      	ldr	r3, [r7, #4]
   940ea:	627b      	str	r3, [r7, #36]	; 0x24
   940ec:	78fb      	ldrb	r3, [r7, #3]
   940ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   940f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   940f4:	61fb      	str	r3, [r7, #28]
   940f6:	69fb      	ldr	r3, [r7, #28]
   940f8:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   940fa:	69bb      	ldr	r3, [r7, #24]
   940fc:	095b      	lsrs	r3, r3, #5
   940fe:	617b      	str	r3, [r7, #20]
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   94100:	697b      	ldr	r3, [r7, #20]
   94102:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   94106:	f203 7307 	addw	r3, r3, #1799	; 0x707
   9410a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   9410c:	613b      	str	r3, [r7, #16]

	if (level) {
   9410e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   94112:	2b00      	cmp	r3, #0
   94114:	d009      	beq.n	9412a <ioport_set_pin_level+0x4e>
   94116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   94118:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   9411a:	68fb      	ldr	r3, [r7, #12]
   9411c:	f003 031f 	and.w	r3, r3, #31
   94120:	2201      	movs	r2, #1
   94122:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   94124:	693b      	ldr	r3, [r7, #16]
   94126:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   94128:	e008      	b.n	9413c <ioport_set_pin_level+0x60>
   9412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9412c:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   9412e:	68bb      	ldr	r3, [r7, #8]
   94130:	f003 031f 	and.w	r3, r3, #31
   94134:	2201      	movs	r2, #1
   94136:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   94138:	693b      	ldr	r3, [r7, #16]
   9413a:	635a      	str	r2, [r3, #52]	; 0x34
   9413c:	bf00      	nop
   9413e:	372c      	adds	r7, #44	; 0x2c
   94140:	46bd      	mov	sp, r7
   94142:	bc80      	pop	{r7}
   94144:	4770      	bx	lr
   94146:	bf00      	nop

00094148 <sn65hvda540_set_en>:
extern	volatile  uint32_t delay_cnt ;
extern  volatile uint32_t delay ;
extern volatile uint32_t g_ul_ms_ticks ;

void sn65hvda540_set_en(sn65hvda540_ctrl_t *p_component, uint32_t pin_idx)
{
   94148:	b480      	push	{r7}
   9414a:	b083      	sub	sp, #12
   9414c:	af00      	add	r7, sp, #0
   9414e:	6078      	str	r0, [r7, #4]
   94150:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   94152:	687b      	ldr	r3, [r7, #4]
   94154:	683a      	ldr	r2, [r7, #0]
   94156:	601a      	str	r2, [r3, #0]
}
   94158:	bf00      	nop
   9415a:	370c      	adds	r7, #12
   9415c:	46bd      	mov	sp, r7
   9415e:	bc80      	pop	{r7}
   94160:	4770      	bx	lr
   94162:	bf00      	nop

00094164 <sn65hvda540_normal_mode>:

void sn65hvda540_normal_mode(sn65hvda540_ctrl_t *p_component)
{
   94164:	b580      	push	{r7, lr}
   94166:	b082      	sub	sp, #8
   94168:	af00      	add	r7, sp, #0
   9416a:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	ioport_set_pin_level(p_component->pio_en_idx, CAN_NORMAL_MODE);
   9416c:	687b      	ldr	r3, [r7, #4]
   9416e:	681b      	ldr	r3, [r3, #0]
   94170:	2100      	movs	r1, #0
   94172:	4618      	mov	r0, r3
   94174:	4b02      	ldr	r3, [pc, #8]	; (94180 <sn65hvda540_normal_mode+0x1c>)
   94176:	4798      	blx	r3
}
   94178:	bf00      	nop
   9417a:	3708      	adds	r7, #8
   9417c:	46bd      	mov	sp, r7
   9417e:	bd80      	pop	{r7, pc}
   94180:	000940dd 	.word	0x000940dd

00094184 <CAN0_Handler>:
uint32_t can_flag=0;
volatile DD_Sensor_status_type DD_Sensor_status ;
volatile temp_struct_type temp_struct;
//can_structure_id_type can_structure_id;

void CAN0_Handler(void)   {
   94184:	b580      	push	{r7, lr}
   94186:	b082      	sub	sp, #8
   94188:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	ul_status = (CAN0 -> CAN_SR);
   9418a:	4b13      	ldr	r3, [pc, #76]	; (941d8 <CAN0_Handler+0x54>)
   9418c:	691b      	ldr	r3, [r3, #16]
   9418e:	607b      	str	r3, [r7, #4]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   94190:	687b      	ldr	r3, [r7, #4]
   94192:	b2db      	uxtb	r3, r3
   94194:	2b00      	cmp	r3, #0
   94196:	d01b      	beq.n	941d0 <CAN0_Handler+0x4c>
		ul_status = CAN0->CAN_MB[1].CAN_MSR ;
   94198:	4b0f      	ldr	r3, [pc, #60]	; (941d8 <CAN0_Handler+0x54>)
   9419a:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
   9419e:	607b      	str	r3, [r7, #4]
		if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   941a0:	687b      	ldr	r3, [r7, #4]
   941a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   941a6:	2b00      	cmp	r3, #0
   941a8:	d012      	beq.n	941d0 <CAN0_Handler+0x4c>
			can0_mailbox.ul_mb_idx = 1;
   941aa:	4b0c      	ldr	r3, [pc, #48]	; (941dc <CAN0_Handler+0x58>)
   941ac:	2201      	movs	r2, #1
   941ae:	601a      	str	r2, [r3, #0]
			can0_mailbox.ul_status = ul_status;
   941b0:	4a0a      	ldr	r2, [pc, #40]	; (941dc <CAN0_Handler+0x58>)
   941b2:	687b      	ldr	r3, [r7, #4]
   941b4:	6093      	str	r3, [r2, #8]
			dd_can_mailbox_read(&can0_mailbox);
   941b6:	4809      	ldr	r0, [pc, #36]	; (941dc <CAN0_Handler+0x58>)
   941b8:	4b09      	ldr	r3, [pc, #36]	; (941e0 <CAN0_Handler+0x5c>)
   941ba:	4798      	blx	r3
			dd_can_dump_mailbox_data(&can0_mailbox);
   941bc:	4807      	ldr	r0, [pc, #28]	; (941dc <CAN0_Handler+0x58>)
   941be:	4b09      	ldr	r3, [pc, #36]	; (941e4 <CAN0_Handler+0x60>)
   941c0:	4798      	blx	r3
			g_ul_recv_status = 1;
   941c2:	4b09      	ldr	r3, [pc, #36]	; (941e8 <CAN0_Handler+0x64>)
   941c4:	2201      	movs	r2, #1
   941c6:	601a      	str	r2, [r3, #0]
			can_flag = g_ul_recv_status;
   941c8:	4b07      	ldr	r3, [pc, #28]	; (941e8 <CAN0_Handler+0x64>)
   941ca:	681b      	ldr	r3, [r3, #0]
   941cc:	4a07      	ldr	r2, [pc, #28]	; (941ec <CAN0_Handler+0x68>)
   941ce:	6013      	str	r3, [r2, #0]
		}
		
	}
}
   941d0:	bf00      	nop
   941d2:	3708      	adds	r7, #8
   941d4:	46bd      	mov	sp, r7
   941d6:	bd80      	pop	{r7, pc}
   941d8:	400b4000 	.word	0x400b4000
   941dc:	2007331c 	.word	0x2007331c
   941e0:	0009447d 	.word	0x0009447d
   941e4:	00094295 	.word	0x00094295
   941e8:	20072704 	.word	0x20072704
   941ec:	20072708 	.word	0x20072708

000941f0 <dd_master_command>:

 uint16_t dd_master_command(dd_cpu_id_type  cpu_id, MASTER_CMD_ID_TYPE command_id, uint16_t speed ) 
   {
   941f0:	b580      	push	{r7, lr}
   941f2:	b084      	sub	sp, #16
   941f4:	af00      	add	r7, sp, #0
   941f6:	4603      	mov	r3, r0
   941f8:	71fb      	strb	r3, [r7, #7]
   941fa:	460b      	mov	r3, r1
   941fc:	71bb      	strb	r3, [r7, #6]
   941fe:	4613      	mov	r3, r2
   94200:	80bb      	strh	r3, [r7, #4]
	 dd_data_size_type dd_data_size;
	dd_data_size.bytes_array[0] =  MASTER_CPU_id;         //senders id;
   94202:	230a      	movs	r3, #10
   94204:	733b      	strb	r3, [r7, #12]
	dd_data_size.bytes_array[1] =  command_id;
   94206:	79bb      	ldrb	r3, [r7, #6]
   94208:	737b      	strb	r3, [r7, #13]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(cpu_id); // receivers id
   9420a:	79fb      	ldrb	r3, [r7, #7]
   9420c:	049b      	lsls	r3, r3, #18
   9420e:	461a      	mov	r2, r3
   94210:	4b1b      	ldr	r3, [pc, #108]	; (94280 <dd_master_command+0x90>)
   94212:	4013      	ands	r3, r2
   94214:	4a1b      	ldr	r2, [pc, #108]	; (94284 <dd_master_command+0x94>)
   94216:	6113      	str	r3, [r2, #16]
//	dd_data_size.bytes_array[2] =0;
	
//	dd_data_size.bytes_array[3] =0;
    dd_data_size.two_bytes[1] = speed;
   94218:	88bb      	ldrh	r3, [r7, #4]
   9421a:	81fb      	strh	r3, [r7, #14]
	can0_mailbox.ul_datal =  dd_data_size.four_bytes;
   9421c:	68fb      	ldr	r3, [r7, #12]
   9421e:	4a19      	ldr	r2, [pc, #100]	; (94284 <dd_master_command+0x94>)
   94220:	6193      	str	r3, [r2, #24]
	can0_mailbox.ul_datah =0;
   94222:	4b18      	ldr	r3, [pc, #96]	; (94284 <dd_master_command+0x94>)
   94224:	2200      	movs	r2, #0
   94226:	61da      	str	r2, [r3, #28]
	
	CAN0->CAN_IDR = 0xffffffff;
   94228:	4b17      	ldr	r3, [pc, #92]	; (94288 <dd_master_command+0x98>)
   9422a:	f04f 32ff 	mov.w	r2, #4294967295
   9422e:	609a      	str	r2, [r3, #8]
	NVIC_EnableIRQ(CAN0_IRQn);	
   94230:	202b      	movs	r0, #43	; 0x2b
   94232:	4b16      	ldr	r3, [pc, #88]	; (9428c <dd_master_command+0x9c>)
   94234:	4798      	blx	r3
    can0_mailbox.ul_mb_idx =   MAILBOX_0;  // transmit for master
   94236:	4b13      	ldr	r3, [pc, #76]	; (94284 <dd_master_command+0x94>)
   94238:	2200      	movs	r2, #0
   9423a:	601a      	str	r2, [r3, #0]
    can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;  // message type , transmitting or receiving
   9423c:	4b11      	ldr	r3, [pc, #68]	; (94284 <dd_master_command+0x94>)
   9423e:	2203      	movs	r2, #3
   94240:	711a      	strb	r2, [r3, #4]
    can0_mailbox.uc_tx_prio = 0;                   // Message Priority
   94242:	4b10      	ldr	r3, [pc, #64]	; (94284 <dd_master_command+0x94>)
   94244:	2200      	movs	r2, #0
   94246:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_length = 4;                    // Can Message Length Header+data
   94248:	4b0e      	ldr	r3, [pc, #56]	; (94284 <dd_master_command+0x94>)
   9424a:	2204      	movs	r2, #4
   9424c:	719a      	strb	r2, [r3, #6]
    can0_mailbox.uc_id_ver = 0;                   // Can standard Version
   9424e:	4b0d      	ldr	r3, [pc, #52]	; (94284 <dd_master_command+0x94>)
   94250:	2200      	movs	r2, #0
   94252:	715a      	strb	r2, [r3, #5]
    can0_mailbox.ul_id_msk = 0x7fc;			      // 
   94254:	4b0b      	ldr	r3, [pc, #44]	; (94284 <dd_master_command+0x94>)
   94256:	f240 72fc 	movw	r2, #2044	; 0x7fc
   9425a:	60da      	str	r2, [r3, #12]
	uint32_t ul_status;	
	uint32_t ul_reg;
	uint32_t can_retun_cal ;
	while (CAN_MAILBOX_NOT_READY == dd_can_mailbox_write(&can0_mailbox));	
   9425c:	bf00      	nop
   9425e:	4809      	ldr	r0, [pc, #36]	; (94284 <dd_master_command+0x94>)
   94260:	4b0b      	ldr	r3, [pc, #44]	; (94290 <dd_master_command+0xa0>)
   94262:	4798      	blx	r3
   94264:	4603      	mov	r3, r0
   94266:	2b01      	cmp	r3, #1
   94268:	d0f9      	beq.n	9425e <dd_master_command+0x6e>
	
	NVIC_EnableIRQ(CAN0_IRQn);
   9426a:	202b      	movs	r0, #43	; 0x2b
   9426c:	4b07      	ldr	r3, [pc, #28]	; (9428c <dd_master_command+0x9c>)
   9426e:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   94270:	4b05      	ldr	r3, [pc, #20]	; (94288 <dd_master_command+0x98>)
   94272:	2202      	movs	r2, #2
   94274:	605a      	str	r2, [r3, #4]
	
	return CAN_MAILBOX_TRANSFER_OK;
   94276:	2300      	movs	r3, #0
}
   94278:	4618      	mov	r0, r3
   9427a:	3710      	adds	r7, #16
   9427c:	46bd      	mov	sp, r7
   9427e:	bd80      	pop	{r7, pc}
   94280:	1ffc0000 	.word	0x1ffc0000
   94284:	2007331c 	.word	0x2007331c
   94288:	400b4000 	.word	0x400b4000
   9428c:	000940ad 	.word	0x000940ad
   94290:	0009454d 	.word	0x0009454d

00094294 <dd_can_dump_mailbox_data>:


static void dd_can_dump_mailbox_data(can_mb_conf_t *p_mailbox )   {
   94294:	b480      	push	{r7}
   94296:	b083      	sub	sp, #12
   94298:	af00      	add	r7, sp, #0
   9429a:	6078      	str	r0, [r7, #4]
	temp_struct.temp_reg_32 = (p_mailbox->ul_datal);
   9429c:	687b      	ldr	r3, [r7, #4]
   9429e:	699b      	ldr	r3, [r3, #24]
   942a0:	4a70      	ldr	r2, [pc, #448]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   942a2:	6013      	str	r3, [r2, #0]
	DD_Sensor_status.CPU_SENDER_type_reg =  temp_struct.temp_reg_8[0]  ;
   942a4:	4b6f      	ldr	r3, [pc, #444]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   942a6:	781b      	ldrb	r3, [r3, #0]
   942a8:	b2da      	uxtb	r2, r3
   942aa:	4b6f      	ldr	r3, [pc, #444]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   942ac:	701a      	strb	r2, [r3, #0]
	DD_Sensor_status.SENSOR_GROUP_type_reg = temp_struct.temp_reg_8[1]  ;
   942ae:	4b6d      	ldr	r3, [pc, #436]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   942b0:	785b      	ldrb	r3, [r3, #1]
   942b2:	b2da      	uxtb	r2, r3
   942b4:	4b6c      	ldr	r3, [pc, #432]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   942b6:	705a      	strb	r2, [r3, #1]
	
	switch(DD_Sensor_status.CPU_SENDER_type_reg)   {
   942b8:	4b6b      	ldr	r3, [pc, #428]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   942ba:	781b      	ldrb	r3, [r3, #0]
   942bc:	b2db      	uxtb	r3, r3
   942be:	2b02      	cmp	r3, #2
   942c0:	f000 80c9 	beq.w	94456 <dd_can_dump_mailbox_data+0x1c2>
   942c4:	2b03      	cmp	r3, #3
   942c6:	d01d      	beq.n	94304 <dd_can_dump_mailbox_data+0x70>
   942c8:	2b01      	cmp	r3, #1
   942ca:	d000      	beq.n	942ce <dd_can_dump_mailbox_data+0x3a>
		} //switch(DD_Sensor_status.SENSOR_GROUP_type_reg)  ends here
		
		break;
		
		default:
		break;
   942cc:	e0c4      	b.n	94458 <dd_can_dump_mailbox_data+0x1c4>
	
	switch(DD_Sensor_status.CPU_SENDER_type_reg)   {
		
		case HEMO_CPU_id :
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
   942ce:	4b66      	ldr	r3, [pc, #408]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   942d0:	785b      	ldrb	r3, [r3, #1]
   942d2:	b2db      	uxtb	r3, r3
   942d4:	2b07      	cmp	r3, #7
   942d6:	d000      	beq.n	942da <dd_can_dump_mailbox_data+0x46>
			DD_Sensor_status.vptstatus  =  temp_struct.temp_reg_16[0] ;
			DD_Sensor_status.DUMMY =   temp_struct.temp_reg_16[1] ;
			break;
			
			default :
			break;
   942d8:	e013      	b.n	94302 <dd_can_dump_mailbox_data+0x6e>
		case HEMO_CPU_id :
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
			
			case Sensor_group_7 :
			DD_Sensor_status.aptstatus = temp_struct.temp_reg_16[1] ;		
   942da:	4b62      	ldr	r3, [pc, #392]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   942dc:	885b      	ldrh	r3, [r3, #2]
   942de:	b29a      	uxth	r2, r3
   942e0:	4b61      	ldr	r3, [pc, #388]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   942e2:	84da      	strh	r2, [r3, #38]	; 0x26
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   942e4:	687b      	ldr	r3, [r7, #4]
   942e6:	69db      	ldr	r3, [r3, #28]
   942e8:	4a5e      	ldr	r2, [pc, #376]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   942ea:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.vptstatus  =  temp_struct.temp_reg_16[0] ;
   942ec:	4b5d      	ldr	r3, [pc, #372]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   942ee:	881b      	ldrh	r3, [r3, #0]
   942f0:	b29a      	uxth	r2, r3
   942f2:	4b5d      	ldr	r3, [pc, #372]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   942f4:	851a      	strh	r2, [r3, #40]	; 0x28
			DD_Sensor_status.DUMMY =   temp_struct.temp_reg_16[1] ;
   942f6:	4b5b      	ldr	r3, [pc, #364]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   942f8:	885b      	ldrh	r3, [r3, #2]
   942fa:	b29a      	uxth	r2, r3
   942fc:	4b5a      	ldr	r3, [pc, #360]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   942fe:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
   94300:	bf00      	nop
			
			default :
			break;
		}
		break;
   94302:	e0a9      	b.n	94458 <dd_can_dump_mailbox_data+0x1c4>
		case PROPORTIONING_CPU_id :
		break;
		
		case SENSOR_CPU_id:
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
   94304:	4b58      	ldr	r3, [pc, #352]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   94306:	785b      	ldrb	r3, [r3, #1]
   94308:	b2db      	uxtb	r3, r3
   9430a:	3b01      	subs	r3, #1
   9430c:	2b05      	cmp	r3, #5
   9430e:	f200 80a0 	bhi.w	94452 <dd_can_dump_mailbox_data+0x1be>
   94312:	a201      	add	r2, pc, #4	; (adr r2, 94318 <dd_can_dump_mailbox_data+0x84>)
   94314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94318:	00094331 	.word	0x00094331
   9431c:	0009436d 	.word	0x0009436d
   94320:	0009439b 	.word	0x0009439b
   94324:	000943c9 	.word	0x000943c9
   94328:	000943f7 	.word	0x000943f7
   9432c:	00094425 	.word	0x00094425
			
			case Sensor_group_1 :													// Pressure Sensors 1,2 and 3
			DD_Sensor_status.ps1status = temp_struct.temp_reg_16[1] ;			
   94330:	4b4c      	ldr	r3, [pc, #304]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   94332:	885b      	ldrh	r3, [r3, #2]
   94334:	b29a      	uxth	r2, r3
   94336:	4b4c      	ldr	r3, [pc, #304]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   94338:	805a      	strh	r2, [r3, #2]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   9433a:	687b      	ldr	r3, [r7, #4]
   9433c:	69db      	ldr	r3, [r3, #28]
   9433e:	4a49      	ldr	r2, [pc, #292]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   94340:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.ps2status  =  temp_struct.temp_reg_16[0] ;
   94342:	4b48      	ldr	r3, [pc, #288]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   94344:	881b      	ldrh	r3, [r3, #0]
   94346:	b29a      	uxth	r2, r3
   94348:	4b47      	ldr	r3, [pc, #284]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   9434a:	809a      	strh	r2, [r3, #4]
			DD_Sensor_status.ps3status =   temp_struct.temp_reg_16[1] ;		
   9434c:	4b45      	ldr	r3, [pc, #276]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   9434e:	885b      	ldrh	r3, [r3, #2]
   94350:	b29a      	uxth	r2, r3
   94352:	4b45      	ldr	r3, [pc, #276]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   94354:	80da      	strh	r2, [r3, #6]
			  array1[1]	= 1;
   94356:	4b45      	ldr	r3, [pc, #276]	; (9446c <dd_can_dump_mailbox_data+0x1d8>)
   94358:	2201      	movs	r2, #1
   9435a:	705a      	strb	r2, [r3, #1]
			delay = g_ul_ms_ticks -  delay_cnt ;
   9435c:	4b44      	ldr	r3, [pc, #272]	; (94470 <dd_can_dump_mailbox_data+0x1dc>)
   9435e:	681a      	ldr	r2, [r3, #0]
   94360:	4b44      	ldr	r3, [pc, #272]	; (94474 <dd_can_dump_mailbox_data+0x1e0>)
   94362:	681b      	ldr	r3, [r3, #0]
   94364:	1ad3      	subs	r3, r2, r3
   94366:	4a44      	ldr	r2, [pc, #272]	; (94478 <dd_can_dump_mailbox_data+0x1e4>)
   94368:	6013      	str	r3, [r2, #0]
			break;
   9436a:	e073      	b.n	94454 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_2 :													// Thermocouple, Temp1 and Temp2
			DD_Sensor_status.thermocouple_status = temp_struct.temp_reg_16[1] ;			
   9436c:	4b3d      	ldr	r3, [pc, #244]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   9436e:	885b      	ldrh	r3, [r3, #2]
   94370:	b29a      	uxth	r2, r3
   94372:	4b3d      	ldr	r3, [pc, #244]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   94374:	811a      	strh	r2, [r3, #8]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   94376:	687b      	ldr	r3, [r7, #4]
   94378:	69db      	ldr	r3, [r3, #28]
   9437a:	4a3a      	ldr	r2, [pc, #232]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   9437c:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.Temp1status =  temp_struct.temp_reg_16[0] ;
   9437e:	4b39      	ldr	r3, [pc, #228]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   94380:	881b      	ldrh	r3, [r3, #0]
   94382:	b29a      	uxth	r2, r3
   94384:	4b38      	ldr	r3, [pc, #224]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   94386:	815a      	strh	r2, [r3, #10]
			DD_Sensor_status.Temp2status=   temp_struct.temp_reg_16[1] ;	
   94388:	4b36      	ldr	r3, [pc, #216]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   9438a:	885b      	ldrh	r3, [r3, #2]
   9438c:	b29a      	uxth	r2, r3
   9438e:	4b36      	ldr	r3, [pc, #216]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   94390:	819a      	strh	r2, [r3, #12]
			array1[2]	= 1;		
   94392:	4b36      	ldr	r3, [pc, #216]	; (9446c <dd_can_dump_mailbox_data+0x1d8>)
   94394:	2201      	movs	r2, #1
   94396:	709a      	strb	r2, [r3, #2]
			break;
   94398:	e05c      	b.n	94454 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_3 :													// Temp3, CS1-Temp and CS2-Temp
			DD_Sensor_status.Temp3status = temp_struct.temp_reg_16[1];			
   9439a:	4b32      	ldr	r3, [pc, #200]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   9439c:	885b      	ldrh	r3, [r3, #2]
   9439e:	b29a      	uxth	r2, r3
   943a0:	4b31      	ldr	r3, [pc, #196]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   943a2:	81da      	strh	r2, [r3, #14]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   943a4:	687b      	ldr	r3, [r7, #4]
   943a6:	69db      	ldr	r3, [r3, #28]
   943a8:	4a2e      	ldr	r2, [pc, #184]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   943aa:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.CS1_Tempstatus =  temp_struct.temp_reg_16[0] ;
   943ac:	4b2d      	ldr	r3, [pc, #180]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   943ae:	881b      	ldrh	r3, [r3, #0]
   943b0:	b29a      	uxth	r2, r3
   943b2:	4b2d      	ldr	r3, [pc, #180]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   943b4:	821a      	strh	r2, [r3, #16]
			DD_Sensor_status.CS2_Tempstatus=   temp_struct.temp_reg_16[1] ;			
   943b6:	4b2b      	ldr	r3, [pc, #172]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   943b8:	885b      	ldrh	r3, [r3, #2]
   943ba:	b29a      	uxth	r2, r3
   943bc:	4b2a      	ldr	r3, [pc, #168]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   943be:	825a      	strh	r2, [r3, #18]
			array1[3]	= 1;
   943c0:	4b2a      	ldr	r3, [pc, #168]	; (9446c <dd_can_dump_mailbox_data+0x1d8>)
   943c2:	2201      	movs	r2, #1
   943c4:	70da      	strb	r2, [r3, #3]
			break;
   943c6:	e045      	b.n	94454 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_4 :													// CS3- Temp, CS1 and CS2
			DD_Sensor_status.CS3_Tempstatus = temp_struct.temp_reg_16[1];			
   943c8:	4b26      	ldr	r3, [pc, #152]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   943ca:	885b      	ldrh	r3, [r3, #2]
   943cc:	b29a      	uxth	r2, r3
   943ce:	4b26      	ldr	r3, [pc, #152]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   943d0:	829a      	strh	r2, [r3, #20]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   943d2:	687b      	ldr	r3, [r7, #4]
   943d4:	69db      	ldr	r3, [r3, #28]
   943d6:	4a23      	ldr	r2, [pc, #140]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   943d8:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.CS1status =  temp_struct.temp_reg_16[0] ;
   943da:	4b22      	ldr	r3, [pc, #136]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   943dc:	881b      	ldrh	r3, [r3, #0]
   943de:	b29a      	uxth	r2, r3
   943e0:	4b21      	ldr	r3, [pc, #132]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   943e2:	82da      	strh	r2, [r3, #22]
			DD_Sensor_status.CS2status=   temp_struct.temp_reg_16[1] ;	
   943e4:	4b1f      	ldr	r3, [pc, #124]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   943e6:	885b      	ldrh	r3, [r3, #2]
   943e8:	b29a      	uxth	r2, r3
   943ea:	4b1f      	ldr	r3, [pc, #124]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   943ec:	831a      	strh	r2, [r3, #24]
			array1[4]	= 1;		
   943ee:	4b1f      	ldr	r3, [pc, #124]	; (9446c <dd_can_dump_mailbox_data+0x1d8>)
   943f0:	2201      	movs	r2, #1
   943f2:	711a      	strb	r2, [r3, #4]
			break;
   943f4:	e02e      	b.n	94454 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_5 :													// CS3, DAC1 and DAA
			DD_Sensor_status.CS3status = temp_struct.temp_reg_16[1];			
   943f6:	4b1b      	ldr	r3, [pc, #108]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   943f8:	885b      	ldrh	r3, [r3, #2]
   943fa:	b29a      	uxth	r2, r3
   943fc:	4b1a      	ldr	r3, [pc, #104]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   943fe:	835a      	strh	r2, [r3, #26]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   94400:	687b      	ldr	r3, [r7, #4]
   94402:	69db      	ldr	r3, [r3, #28]
   94404:	4a17      	ldr	r2, [pc, #92]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   94406:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.DAC1status =  temp_struct.temp_reg_16[0] ;
   94408:	4b16      	ldr	r3, [pc, #88]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   9440a:	881b      	ldrh	r3, [r3, #0]
   9440c:	b29a      	uxth	r2, r3
   9440e:	4b16      	ldr	r3, [pc, #88]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   94410:	839a      	strh	r2, [r3, #28]
			DD_Sensor_status.DAAstatus=   temp_struct.temp_reg_16[1] ;		
   94412:	4b14      	ldr	r3, [pc, #80]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   94414:	885b      	ldrh	r3, [r3, #2]
   94416:	b29a      	uxth	r2, r3
   94418:	4b13      	ldr	r3, [pc, #76]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   9441a:	83da      	strh	r2, [r3, #30]
			array1[5]	= 1;	
   9441c:	4b13      	ldr	r3, [pc, #76]	; (9446c <dd_can_dump_mailbox_data+0x1d8>)
   9441e:	2201      	movs	r2, #1
   94420:	715a      	strb	r2, [r3, #5]
			break;
   94422:	e017      	b.n	94454 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_6 :													// DAB, DAC2 and flow Sensor
			DD_Sensor_status.DABstatus = temp_struct.temp_reg_16[1];			
   94424:	4b0f      	ldr	r3, [pc, #60]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   94426:	885b      	ldrh	r3, [r3, #2]
   94428:	b29a      	uxth	r2, r3
   9442a:	4b0f      	ldr	r3, [pc, #60]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   9442c:	841a      	strh	r2, [r3, #32]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   9442e:	687b      	ldr	r3, [r7, #4]
   94430:	69db      	ldr	r3, [r3, #28]
   94432:	4a0c      	ldr	r2, [pc, #48]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   94434:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.DAC2status =  temp_struct.temp_reg_16[0] ;
   94436:	4b0b      	ldr	r3, [pc, #44]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   94438:	881b      	ldrh	r3, [r3, #0]
   9443a:	b29a      	uxth	r2, r3
   9443c:	4b0a      	ldr	r3, [pc, #40]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   9443e:	845a      	strh	r2, [r3, #34]	; 0x22
			DD_Sensor_status.flow_sensor_status=   temp_struct.temp_reg_16[1] ;	
   94440:	4b08      	ldr	r3, [pc, #32]	; (94464 <dd_can_dump_mailbox_data+0x1d0>)
   94442:	885b      	ldrh	r3, [r3, #2]
   94444:	b29a      	uxth	r2, r3
   94446:	4b08      	ldr	r3, [pc, #32]	; (94468 <dd_can_dump_mailbox_data+0x1d4>)
   94448:	849a      	strh	r2, [r3, #36]	; 0x24
			array1[6]	= 1;	
   9444a:	4b08      	ldr	r3, [pc, #32]	; (9446c <dd_can_dump_mailbox_data+0x1d8>)
   9444c:	2201      	movs	r2, #1
   9444e:	719a      	strb	r2, [r3, #6]
			
			break;
   94450:	e000      	b.n	94454 <dd_can_dump_mailbox_data+0x1c0>
			
			default :
			break;
   94452:	bf00      	nop
		} //switch(DD_Sensor_status.SENSOR_GROUP_type_reg)  ends here
		
		break;
   94454:	e000      	b.n	94458 <dd_can_dump_mailbox_data+0x1c4>
			break;
		}
		break;
		
		case PROPORTIONING_CPU_id :
		break;
   94456:	bf00      	nop
		break;
		
		default:
		break;
	}
}
   94458:	bf00      	nop
   9445a:	370c      	adds	r7, #12
   9445c:	46bd      	mov	sp, r7
   9445e:	bc80      	pop	{r7}
   94460:	4770      	bx	lr
   94462:	bf00      	nop
   94464:	200732ec 	.word	0x200732ec
   94468:	200732f0 	.word	0x200732f0
   9446c:	20072720 	.word	0x20072720
   94470:	20072680 	.word	0x20072680
   94474:	2007272c 	.word	0x2007272c
   94478:	20072730 	.word	0x20072730

0009447c <dd_can_mailbox_read>:


static uint32_t dd_can_mailbox_read(can_mb_conf_t *p_mailbox)   {
   9447c:	b480      	push	{r7}
   9447e:	b087      	sub	sp, #28
   94480:	af00      	add	r7, sp, #0
   94482:	6078      	str	r0, [r7, #4]

	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   94484:	2300      	movs	r3, #0
   94486:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   94488:	687b      	ldr	r3, [r7, #4]
   9448a:	681b      	ldr	r3, [r3, #0]
   9448c:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   9448e:	687b      	ldr	r3, [r7, #4]
   94490:	689b      	ldr	r3, [r3, #8]
   94492:	60fb      	str	r3, [r7, #12]
	 /* Check whether there is overwriting happening in Receive with * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	 
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {	ul_retval = CAN_MAILBOX_RX_OVER;	}
   94494:	68fb      	ldr	r3, [r7, #12]
   94496:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   9449a:	2b00      	cmp	r3, #0
   9449c:	d006      	beq.n	944ac <dd_can_mailbox_read+0x30>
   9449e:	68fb      	ldr	r3, [r7, #12]
   944a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   944a4:	2b00      	cmp	r3, #0
   944a6:	d001      	beq.n	944ac <dd_can_mailbox_read+0x30>
   944a8:	2302      	movs	r3, #2
   944aa:	617b      	str	r3, [r7, #20]

	/* Read the message family ID. */
	p_mailbox->ul_fid =	CAN0->CAN_MB[uc_index].CAN_MFID & CAN_MFID_MFID_Msk;	
   944ac:	4a26      	ldr	r2, [pc, #152]	; (94548 <dd_can_mailbox_read+0xcc>)
   944ae:	7cfb      	ldrb	r3, [r7, #19]
   944b0:	015b      	lsls	r3, r3, #5
   944b2:	4413      	add	r3, r2
   944b4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   944b8:	681b      	ldr	r3, [r3, #0]
   944ba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   944be:	687b      	ldr	r3, [r7, #4]
   944c0:	615a      	str	r2, [r3, #20]

	/* Read received data length. */
	p_mailbox->uc_length = (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   944c2:	68fb      	ldr	r3, [r7, #12]
   944c4:	0c1b      	lsrs	r3, r3, #16
   944c6:	b2db      	uxtb	r3, r3
   944c8:	f003 030f 	and.w	r3, r3, #15
   944cc:	b2da      	uxtb	r2, r3
   944ce:	687b      	ldr	r3, [r7, #4]
   944d0:	719a      	strb	r2, [r3, #6]
	
	/* Read received data. */
	p_mailbox->ul_datal = CAN0->CAN_MB[uc_index].CAN_MDL;
   944d2:	4a1d      	ldr	r2, [pc, #116]	; (94548 <dd_can_mailbox_read+0xcc>)
   944d4:	7cfb      	ldrb	r3, [r7, #19]
   944d6:	015b      	lsls	r3, r3, #5
   944d8:	4413      	add	r3, r2
   944da:	f503 7305 	add.w	r3, r3, #532	; 0x214
   944de:	681a      	ldr	r2, [r3, #0]
   944e0:	687b      	ldr	r3, [r7, #4]
   944e2:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = CAN0->CAN_MB[uc_index].CAN_MDH;
   944e4:	4a18      	ldr	r2, [pc, #96]	; (94548 <dd_can_mailbox_read+0xcc>)
   944e6:	7cfb      	ldrb	r3, [r7, #19]
   944e8:	015b      	lsls	r3, r3, #5
   944ea:	4413      	add	r3, r2
   944ec:	f503 7306 	add.w	r3, r3, #536	; 0x218
   944f0:	681a      	ldr	r2, [r3, #0]
   944f2:	687b      	ldr	r3, [r7, #4]
   944f4:	61da      	str	r2, [r3, #28]
	
	
	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   944f6:	4a14      	ldr	r2, [pc, #80]	; (94548 <dd_can_mailbox_read+0xcc>)
   944f8:	7cfb      	ldrb	r3, [r7, #19]
   944fa:	015b      	lsls	r3, r3, #5
   944fc:	4413      	add	r3, r2
   944fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
   94502:	681a      	ldr	r2, [r3, #0]
   94504:	687b      	ldr	r3, [r7, #4]
   94506:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   94508:	687b      	ldr	r3, [r7, #4]
   9450a:	689b      	ldr	r3, [r3, #8]
   9450c:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;	}
   9450e:	68fb      	ldr	r3, [r7, #12]
   94510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   94514:	2b00      	cmp	r3, #0
   94516:	d003      	beq.n	94520 <dd_can_mailbox_read+0xa4>
   94518:	697b      	ldr	r3, [r7, #20]
   9451a:	f043 0304 	orr.w	r3, r3, #4
   9451e:	617b      	str	r3, [r7, #20]
	else { ul_retval |= CAN_MAILBOX_TRANSFER_OK; }		
		
	/* Enable next receive process. */	 // Allows the reception of the next message
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |CAN_MCR_MDLC(p_mailbox->uc_length);    
   94520:	4909      	ldr	r1, [pc, #36]	; (94548 <dd_can_mailbox_read+0xcc>)
   94522:	7cfb      	ldrb	r3, [r7, #19]
   94524:	687a      	ldr	r2, [r7, #4]
   94526:	7992      	ldrb	r2, [r2, #6]
   94528:	0412      	lsls	r2, r2, #16
   9452a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   9452e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   94532:	015b      	lsls	r3, r3, #5
   94534:	440b      	add	r3, r1
   94536:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   9453a:	601a      	str	r2, [r3, #0]
	return ul_retval;
   9453c:	697b      	ldr	r3, [r7, #20]
}
   9453e:	4618      	mov	r0, r3
   94540:	371c      	adds	r7, #28
   94542:	46bd      	mov	sp, r7
   94544:	bc80      	pop	{r7}
   94546:	4770      	bx	lr
   94548:	400b4000 	.word	0x400b4000

0009454c <dd_can_mailbox_write>:

		
static uint32_t dd_can_mailbox_write(can_mb_conf_t *p_mailbox)
{
   9454c:	b480      	push	{r7}
   9454e:	b085      	sub	sp, #20
   94550:	af00      	add	r7, sp, #0
   94552:	6078      	str	r0, [r7, #4]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   94554:	687b      	ldr	r3, [r7, #4]
   94556:	681b      	ldr	r3, [r3, #0]
   94558:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   9455a:	4a2a      	ldr	r2, [pc, #168]	; (94604 <dd_can_mailbox_write+0xb8>)
   9455c:	7bfb      	ldrb	r3, [r7, #15]
   9455e:	015b      	lsls	r3, r3, #5
   94560:	4413      	add	r3, r2
   94562:	f503 7304 	add.w	r3, r3, #528	; 0x210
   94566:	681a      	ldr	r2, [r3, #0]
   94568:	687b      	ldr	r3, [r7, #4]
   9456a:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   9456c:	687b      	ldr	r3, [r7, #4]
   9456e:	689b      	ldr	r3, [r3, #8]
   94570:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   94572:	68bb      	ldr	r3, [r7, #8]
   94574:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   94578:	2b00      	cmp	r3, #0
   9457a:	d101      	bne.n	94580 <dd_can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   9457c:	2301      	movs	r3, #1
   9457e:	e03b      	b.n	945f8 <dd_can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) { 
   94580:	687b      	ldr	r3, [r7, #4]
   94582:	795b      	ldrb	r3, [r3, #5]
   94584:	2b00      	cmp	r3, #0
   94586:	d00b      	beq.n	945a0 <dd_can_mailbox_write+0x54>
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id | CAN_MAM_MIDE;
   94588:	491e      	ldr	r1, [pc, #120]	; (94604 <dd_can_mailbox_write+0xb8>)
   9458a:	7bfb      	ldrb	r3, [r7, #15]
   9458c:	687a      	ldr	r2, [r7, #4]
   9458e:	6912      	ldr	r2, [r2, #16]
   94590:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   94594:	015b      	lsls	r3, r3, #5
   94596:	440b      	add	r3, r1
   94598:	f503 7302 	add.w	r3, r3, #520	; 0x208
   9459c:	601a      	str	r2, [r3, #0]
   9459e:	e008      	b.n	945b2 <dd_can_mailbox_write+0x66>
	} else {
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   945a0:	4918      	ldr	r1, [pc, #96]	; (94604 <dd_can_mailbox_write+0xb8>)
   945a2:	7bfb      	ldrb	r3, [r7, #15]
   945a4:	687a      	ldr	r2, [r7, #4]
   945a6:	6912      	ldr	r2, [r2, #16]
   945a8:	015b      	lsls	r3, r3, #5
   945aa:	440b      	add	r3, r1
   945ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
   945b0:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	CAN0->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   945b2:	4914      	ldr	r1, [pc, #80]	; (94604 <dd_can_mailbox_write+0xb8>)
   945b4:	7bfb      	ldrb	r3, [r7, #15]
   945b6:	687a      	ldr	r2, [r7, #4]
   945b8:	6992      	ldr	r2, [r2, #24]
   945ba:	015b      	lsls	r3, r3, #5
   945bc:	440b      	add	r3, r1
   945be:	f503 7305 	add.w	r3, r3, #532	; 0x214
   945c2:	601a      	str	r2, [r3, #0]
	if (p_mailbox->uc_length > 4) {  CAN0->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   945c4:	687b      	ldr	r3, [r7, #4]
   945c6:	799b      	ldrb	r3, [r3, #6]
   945c8:	2b04      	cmp	r3, #4
   945ca:	d908      	bls.n	945de <dd_can_mailbox_write+0x92>
   945cc:	490d      	ldr	r1, [pc, #52]	; (94604 <dd_can_mailbox_write+0xb8>)
   945ce:	7bfb      	ldrb	r3, [r7, #15]
   945d0:	687a      	ldr	r2, [r7, #4]
   945d2:	69d2      	ldr	r2, [r2, #28]
   945d4:	015b      	lsls	r3, r3, #5
   945d6:	440b      	add	r3, r1
   945d8:	f503 7306 	add.w	r3, r3, #536	; 0x218
   945dc:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   945de:	4909      	ldr	r1, [pc, #36]	; (94604 <dd_can_mailbox_write+0xb8>)
   945e0:	7bfb      	ldrb	r3, [r7, #15]
   945e2:	687a      	ldr	r2, [r7, #4]
   945e4:	7992      	ldrb	r2, [r2, #6]
   945e6:	0412      	lsls	r2, r2, #16
   945e8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   945ec:	015b      	lsls	r3, r3, #5
   945ee:	440b      	add	r3, r1
   945f0:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   945f4:	601a      	str	r2, [r3, #0]

	return CAN_MAILBOX_TRANSFER_OK;
   945f6:	2300      	movs	r3, #0
}
   945f8:	4618      	mov	r0, r3
   945fa:	3714      	adds	r7, #20
   945fc:	46bd      	mov	sp, r7
   945fe:	bc80      	pop	{r7}
   94600:	4770      	bx	lr
   94602:	bf00      	nop
   94604:	400b4000 	.word	0x400b4000

00094608 <dd_can_global_send_transfer_cmd>:

void dd_can_global_send_transfer_cmd(uint8_t uc_mask)
{
   94608:	b480      	push	{r7}
   9460a:	b085      	sub	sp, #20
   9460c:	af00      	add	r7, sp, #0
   9460e:	4603      	mov	r3, r0
   94610:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_reg;

	ul_reg = CAN0->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   94612:	4b07      	ldr	r3, [pc, #28]	; (94630 <dd_can_global_send_transfer_cmd+0x28>)
   94614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   94616:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   9461a:	60fb      	str	r3, [r7, #12]
	CAN0->CAN_TCR = ul_reg | uc_mask;
   9461c:	4904      	ldr	r1, [pc, #16]	; (94630 <dd_can_global_send_transfer_cmd+0x28>)
   9461e:	79fa      	ldrb	r2, [r7, #7]
   94620:	68fb      	ldr	r3, [r7, #12]
   94622:	4313      	orrs	r3, r2
   94624:	624b      	str	r3, [r1, #36]	; 0x24
}
   94626:	bf00      	nop
   94628:	3714      	adds	r7, #20
   9462a:	46bd      	mov	sp, r7
   9462c:	bc80      	pop	{r7}
   9462e:	4770      	bx	lr
   94630:	400b4000 	.word	0x400b4000

00094634 <dd_can_mailbox_conf>:



static void dd_can_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   94634:	b480      	push	{r7}
   94636:	b085      	sub	sp, #20
   94638:	af00      	add	r7, sp, #0
   9463a:	6078      	str	r0, [r7, #4]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   9463c:	687b      	ldr	r3, [r7, #4]
   9463e:	681b      	ldr	r3, [r3, #0]
   94640:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   94642:	687b      	ldr	r3, [r7, #4]
   94644:	791b      	ldrb	r3, [r3, #4]
   94646:	2b00      	cmp	r3, #0
   94648:	d12f      	bne.n	946aa <dd_can_mailbox_conf+0x76>
		CAN0->CAN_MB[uc_index].CAN_MMR = 0;
   9464a:	4a35      	ldr	r2, [pc, #212]	; (94720 <dd_can_mailbox_conf+0xec>)
   9464c:	7bfb      	ldrb	r3, [r7, #15]
   9464e:	3310      	adds	r3, #16
   94650:	015b      	lsls	r3, r3, #5
   94652:	4413      	add	r3, r2
   94654:	2200      	movs	r2, #0
   94656:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MAM = 0;
   94658:	4a31      	ldr	r2, [pc, #196]	; (94720 <dd_can_mailbox_conf+0xec>)
   9465a:	7bfb      	ldrb	r3, [r7, #15]
   9465c:	3310      	adds	r3, #16
   9465e:	015b      	lsls	r3, r3, #5
   94660:	4413      	add	r3, r2
   94662:	3304      	adds	r3, #4
   94664:	2200      	movs	r2, #0
   94666:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MID = 0;
   94668:	4a2d      	ldr	r2, [pc, #180]	; (94720 <dd_can_mailbox_conf+0xec>)
   9466a:	7bfb      	ldrb	r3, [r7, #15]
   9466c:	015b      	lsls	r3, r3, #5
   9466e:	4413      	add	r3, r2
   94670:	f503 7302 	add.w	r3, r3, #520	; 0x208
   94674:	2200      	movs	r2, #0
   94676:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDL = 0;
   94678:	4a29      	ldr	r2, [pc, #164]	; (94720 <dd_can_mailbox_conf+0xec>)
   9467a:	7bfb      	ldrb	r3, [r7, #15]
   9467c:	015b      	lsls	r3, r3, #5
   9467e:	4413      	add	r3, r2
   94680:	f503 7305 	add.w	r3, r3, #532	; 0x214
   94684:	2200      	movs	r2, #0
   94686:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDH = 0;
   94688:	4a25      	ldr	r2, [pc, #148]	; (94720 <dd_can_mailbox_conf+0xec>)
   9468a:	7bfb      	ldrb	r3, [r7, #15]
   9468c:	015b      	lsls	r3, r3, #5
   9468e:	4413      	add	r3, r2
   94690:	f503 7306 	add.w	r3, r3, #536	; 0x218
   94694:	2200      	movs	r2, #0
   94696:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MCR = 0;
   94698:	4a21      	ldr	r2, [pc, #132]	; (94720 <dd_can_mailbox_conf+0xec>)
   9469a:	7bfb      	ldrb	r3, [r7, #15]
   9469c:	015b      	lsls	r3, r3, #5
   9469e:	4413      	add	r3, r2
   946a0:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   946a4:	2200      	movs	r2, #0
   946a6:	601a      	str	r2, [r3, #0]
		return;
   946a8:	e035      	b.n	94716 <dd_can_mailbox_conf+0xe2>
	}
	
	/* Set the priority in Transmit mode. */                                                                   
	CAN0->CAN_MB[uc_index].CAN_MMR = (CAN0->CAN_MB[uc_index].CAN_MMR &  ~CAN_MMR_PRIOR_Msk) | (p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);  
   946aa:	481d      	ldr	r0, [pc, #116]	; (94720 <dd_can_mailbox_conf+0xec>)
   946ac:	7bfb      	ldrb	r3, [r7, #15]
   946ae:	491c      	ldr	r1, [pc, #112]	; (94720 <dd_can_mailbox_conf+0xec>)
   946b0:	7bfa      	ldrb	r2, [r7, #15]
   946b2:	3210      	adds	r2, #16
   946b4:	0152      	lsls	r2, r2, #5
   946b6:	440a      	add	r2, r1
   946b8:	6812      	ldr	r2, [r2, #0]
   946ba:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   946be:	6879      	ldr	r1, [r7, #4]
   946c0:	79c9      	ldrb	r1, [r1, #7]
   946c2:	0409      	lsls	r1, r1, #16
   946c4:	430a      	orrs	r2, r1
   946c6:	3310      	adds	r3, #16
   946c8:	015b      	lsls	r3, r3, #5
   946ca:	4403      	add	r3, r0
   946cc:	601a      	str	r2, [r3, #0]
	/* Set the message ID and message acceptance mask for the mailbox in * other modes. */	
		CAN0 ->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   946ce:	4914      	ldr	r1, [pc, #80]	; (94720 <dd_can_mailbox_conf+0xec>)
   946d0:	7bfb      	ldrb	r3, [r7, #15]
   946d2:	687a      	ldr	r2, [r7, #4]
   946d4:	68d2      	ldr	r2, [r2, #12]
   946d6:	3310      	adds	r3, #16
   946d8:	015b      	lsls	r3, r3, #5
   946da:	440b      	add	r3, r1
   946dc:	3304      	adds	r3, #4
   946de:	601a      	str	r2, [r3, #0]
		CAN0 ->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;	
   946e0:	490f      	ldr	r1, [pc, #60]	; (94720 <dd_can_mailbox_conf+0xec>)
   946e2:	7bfb      	ldrb	r3, [r7, #15]
   946e4:	687a      	ldr	r2, [r7, #4]
   946e6:	6912      	ldr	r2, [r2, #16]
   946e8:	015b      	lsls	r3, r3, #5
   946ea:	440b      	add	r3, r1
   946ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
   946f0:	601a      	str	r2, [r3, #0]

	/* Set up mailbox in one of the five different modes. */                                                      
	CAN0 ->CAN_MB[uc_index].CAN_MMR = (CAN0 ->CAN_MB[uc_index].CAN_MMR & ~CAN_MMR_MOT_Msk) | (p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);		
   946f2:	480b      	ldr	r0, [pc, #44]	; (94720 <dd_can_mailbox_conf+0xec>)
   946f4:	7bfb      	ldrb	r3, [r7, #15]
   946f6:	490a      	ldr	r1, [pc, #40]	; (94720 <dd_can_mailbox_conf+0xec>)
   946f8:	7bfa      	ldrb	r2, [r7, #15]
   946fa:	3210      	adds	r2, #16
   946fc:	0152      	lsls	r2, r2, #5
   946fe:	440a      	add	r2, r1
   94700:	6812      	ldr	r2, [r2, #0]
   94702:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
   94706:	6879      	ldr	r1, [r7, #4]
   94708:	7909      	ldrb	r1, [r1, #4]
   9470a:	0609      	lsls	r1, r1, #24
   9470c:	430a      	orrs	r2, r1
   9470e:	3310      	adds	r3, #16
   94710:	015b      	lsls	r3, r3, #5
   94712:	4403      	add	r3, r0
   94714:	601a      	str	r2, [r3, #0]
}
   94716:	3714      	adds	r7, #20
   94718:	46bd      	mov	sp, r7
   9471a:	bc80      	pop	{r7}
   9471c:	4770      	bx	lr
   9471e:	bf00      	nop
   94720:	400b4000 	.word	0x400b4000

00094724 <DD_CAN_WRITE_PROPO>:
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}

void DD_CAN_WRITE_PROPO(uint16_t data, uint32_t rc_count)
{
   94724:	b580      	push	{r7, lr}
   94726:	b084      	sub	sp, #16
   94728:	af00      	add	r7, sp, #0
   9472a:	4603      	mov	r3, r0
   9472c:	6039      	str	r1, [r7, #0]
   9472e:	80fb      	strh	r3, [r7, #6]
// 	 can0_mailbox.ul_datah = 0x55AAAA55;
// 	 can0_mailbox.uc_length = 8;
// 	 dd_can_mailbox_write(&can0_mailbox);
// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
MASTER_CMD_ID_TYPE dd_propo_cmd;
dd_propo_cmd = data;
   94730:	88fb      	ldrh	r3, [r7, #6]
   94732:	73fb      	strb	r3, [r7, #15]
dd_master_command(PROPORTIONING_CPU_id, dd_propo_cmd,rc_count);
   94734:	683b      	ldr	r3, [r7, #0]
   94736:	b29a      	uxth	r2, r3
   94738:	7bfb      	ldrb	r3, [r7, #15]
   9473a:	4619      	mov	r1, r3
   9473c:	2002      	movs	r0, #2
   9473e:	4b04      	ldr	r3, [pc, #16]	; (94750 <DD_CAN_WRITE_PROPO+0x2c>)
   94740:	4798      	blx	r3
dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   94742:	2001      	movs	r0, #1
   94744:	4b03      	ldr	r3, [pc, #12]	; (94754 <DD_CAN_WRITE_PROPO+0x30>)
   94746:	4798      	blx	r3

}
   94748:	bf00      	nop
   9474a:	3710      	adds	r7, #16
   9474c:	46bd      	mov	sp, r7
   9474e:	bd80      	pop	{r7, pc}
   94750:	000941f1 	.word	0x000941f1
   94754:	00094609 	.word	0x00094609

00094758 <DD_CAN_WRITE_HEMO>:

void DD_CAN_WRITE_HEMO(uint16_t data, uint16_t speed)
{
   94758:	b580      	push	{r7, lr}
   9475a:	b084      	sub	sp, #16
   9475c:	af00      	add	r7, sp, #0
   9475e:	4603      	mov	r3, r0
   94760:	460a      	mov	r2, r1
   94762:	80fb      	strh	r3, [r7, #6]
   94764:	4613      	mov	r3, r2
   94766:	80bb      	strh	r3, [r7, #4]
	// 	 can0_mailbox.ul_datah = 0x55AAAA55;
	// 	 can0_mailbox.uc_length = 8;
	// 	 dd_can_mailbox_write(&can0_mailbox);
	// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
	MASTER_CMD_ID_TYPE dd_hemo_cmd;
	dd_hemo_cmd = data;
   94768:	88fb      	ldrh	r3, [r7, #6]
   9476a:	73fb      	strb	r3, [r7, #15]
	CAN0->CAN_IDR = 0xffffffff;
   9476c:	4b09      	ldr	r3, [pc, #36]	; (94794 <DD_CAN_WRITE_HEMO+0x3c>)
   9476e:	f04f 32ff 	mov.w	r2, #4294967295
   94772:	609a      	str	r2, [r3, #8]
	dd_master_command(HEMO_CPU_id, dd_hemo_cmd, speed);
   94774:	88ba      	ldrh	r2, [r7, #4]
   94776:	7bfb      	ldrb	r3, [r7, #15]
   94778:	4619      	mov	r1, r3
   9477a:	2001      	movs	r0, #1
   9477c:	4b06      	ldr	r3, [pc, #24]	; (94798 <DD_CAN_WRITE_HEMO+0x40>)
   9477e:	4798      	blx	r3
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   94780:	2001      	movs	r0, #1
   94782:	4b06      	ldr	r3, [pc, #24]	; (9479c <DD_CAN_WRITE_HEMO+0x44>)
   94784:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   94786:	4b03      	ldr	r3, [pc, #12]	; (94794 <DD_CAN_WRITE_HEMO+0x3c>)
   94788:	2202      	movs	r2, #2
   9478a:	605a      	str	r2, [r3, #4]
}
   9478c:	bf00      	nop
   9478e:	3710      	adds	r7, #16
   94790:	46bd      	mov	sp, r7
   94792:	bd80      	pop	{r7, pc}
   94794:	400b4000 	.word	0x400b4000
   94798:	000941f1 	.word	0x000941f1
   9479c:	00094609 	.word	0x00094609

000947a0 <DD_CAN_WRITE_SENSOR>:

void DD_CAN_WRITE_SENSOR(uint16_t data)
{
   947a0:	b580      	push	{r7, lr}
   947a2:	b084      	sub	sp, #16
   947a4:	af00      	add	r7, sp, #0
   947a6:	4603      	mov	r3, r0
   947a8:	80fb      	strh	r3, [r7, #6]
	// 	 can0_mailbox.ul_datah = 0x55AAAA55;
	// 	 can0_mailbox.uc_length = 8;
	// 	 dd_can_mailbox_write(&can0_mailbox);
	// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
	MASTER_CMD_ID_TYPE dd_sensor_cmd;
	dd_sensor_cmd = data;
   947aa:	88fb      	ldrh	r3, [r7, #6]
   947ac:	73fb      	strb	r3, [r7, #15]
	CAN0->CAN_IDR = 0xffffffff;
   947ae:	4b0a      	ldr	r3, [pc, #40]	; (947d8 <DD_CAN_WRITE_SENSOR+0x38>)
   947b0:	f04f 32ff 	mov.w	r2, #4294967295
   947b4:	609a      	str	r2, [r3, #8]
	dd_master_command(SENSOR_CPU_id, dd_sensor_cmd, 0);
   947b6:	7bfb      	ldrb	r3, [r7, #15]
   947b8:	2200      	movs	r2, #0
   947ba:	4619      	mov	r1, r3
   947bc:	2003      	movs	r0, #3
   947be:	4b07      	ldr	r3, [pc, #28]	; (947dc <DD_CAN_WRITE_SENSOR+0x3c>)
   947c0:	4798      	blx	r3
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   947c2:	2001      	movs	r0, #1
   947c4:	4b06      	ldr	r3, [pc, #24]	; (947e0 <DD_CAN_WRITE_SENSOR+0x40>)
   947c6:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   947c8:	4b03      	ldr	r3, [pc, #12]	; (947d8 <DD_CAN_WRITE_SENSOR+0x38>)
   947ca:	2202      	movs	r2, #2
   947cc:	605a      	str	r2, [r3, #4]
}
   947ce:	bf00      	nop
   947d0:	3710      	adds	r7, #16
   947d2:	46bd      	mov	sp, r7
   947d4:	bd80      	pop	{r7, pc}
   947d6:	bf00      	nop
   947d8:	400b4000 	.word	0x400b4000
   947dc:	000941f1 	.word	0x000941f1
   947e0:	00094609 	.word	0x00094609

000947e4 <DD_CAN_READ_APTVPT>:


void DD_CAN_READ_APTVPT(void)
{
   947e4:	b580      	push	{r7, lr}
   947e6:	af00      	add	r7, sp, #0
	
	DD_CAN_WRITE_HEMO(BP_APT_VPT_SEND_TO_MASTER, 0);
   947e8:	2100      	movs	r1, #0
   947ea:	2027      	movs	r0, #39	; 0x27
   947ec:	4b01      	ldr	r3, [pc, #4]	; (947f4 <DD_CAN_READ_APTVPT+0x10>)
   947ee:	4798      	blx	r3
	
}
   947f0:	bf00      	nop
   947f2:	bd80      	pop	{r7, pc}
   947f4:	00094759 	.word	0x00094759

000947f8 <DD_INIT_CAN>:



void DD_INIT_CAN()    

	{
   947f8:	b580      	push	{r7, lr}
   947fa:	b08e      	sub	sp, #56	; 0x38
   947fc:	af00      	add	r7, sp, #0
				
	can_bit_timing_t  *p_bit_time ;
	p_bit_time = (can_bit_timing_t *)&can_bit_time[6];
   947fe:	4b4f      	ldr	r3, [pc, #316]	; (9493c <DD_INIT_CAN+0x144>)
   94800:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_flag;
	uint32_t ul_tick;
	uint8_t uc_prescale = 120;
   94802:	2378      	movs	r3, #120	; 0x78
   94804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t ul_sysclk;
	CAN0 ->CAN_WPMR = 0x43414E00;  //Can write protection disabled
   94808:	4b4d      	ldr	r3, [pc, #308]	; (94940 <DD_INIT_CAN+0x148>)
   9480a:	4a4e      	ldr	r2, [pc, #312]	; (94944 <DD_INIT_CAN+0x14c>)
   9480c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	CAN0 ->CAN_MR &= ~CAN_MR_CANEN ;  //0xFFFFFFFE; // DISABLE CAN0
   94810:	4a4b      	ldr	r2, [pc, #300]	; (94940 <DD_INIT_CAN+0x148>)
   94812:	4b4b      	ldr	r3, [pc, #300]	; (94940 <DD_INIT_CAN+0x148>)
   94814:	681b      	ldr	r3, [r3, #0]
   94816:	f023 0301 	bic.w	r3, r3, #1
   9481a:	6013      	str	r3, [r2, #0]
	CAN0->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) | CAN_BR_PROPAG(p_bit_time->uc_prog - 1) | CAN_BR_SJW(p_bit_time->uc_sjw - 1) |	CAN_BR_BRP(uc_prescale - 1);
   9481c:	4948      	ldr	r1, [pc, #288]	; (94940 <DD_INIT_CAN+0x148>)
   9481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   94820:	78db      	ldrb	r3, [r3, #3]
   94822:	3b01      	subs	r3, #1
   94824:	f003 0207 	and.w	r2, r3, #7
   94828:	6abb      	ldr	r3, [r7, #40]	; 0x28
   9482a:	789b      	ldrb	r3, [r3, #2]
   9482c:	3b01      	subs	r3, #1
   9482e:	011b      	lsls	r3, r3, #4
   94830:	f003 0370 	and.w	r3, r3, #112	; 0x70
   94834:	431a      	orrs	r2, r3
   94836:	6abb      	ldr	r3, [r7, #40]	; 0x28
   94838:	785b      	ldrb	r3, [r3, #1]
   9483a:	3b01      	subs	r3, #1
   9483c:	021b      	lsls	r3, r3, #8
   9483e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   94842:	431a      	orrs	r2, r3
   94844:	6abb      	ldr	r3, [r7, #40]	; 0x28
   94846:	791b      	ldrb	r3, [r3, #4]
   94848:	3b01      	subs	r3, #1
   9484a:	031b      	lsls	r3, r3, #12
   9484c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   94850:	431a      	orrs	r2, r3
   94852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   94856:	3b01      	subs	r3, #1
   94858:	041b      	lsls	r3, r3, #16
   9485a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   9485e:	4313      	orrs	r3, r2
   94860:	614b      	str	r3, [r1, #20]
	can_mb_conf_t mb_config_t;
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   94862:	2300      	movs	r3, #0
   94864:	723b      	strb	r3, [r7, #8]
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   94866:	2300      	movs	r3, #0
   94868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   9486c:	e00b      	b.n	94886 <DD_INIT_CAN+0x8e>
		mb_config_t.ul_mb_idx = i;
   9486e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   94872:	607b      	str	r3, [r7, #4]
		dd_can_mailbox_conf(&mb_config_t);
   94874:	1d3b      	adds	r3, r7, #4
   94876:	4618      	mov	r0, r3
   94878:	4b33      	ldr	r3, [pc, #204]	; (94948 <DD_INIT_CAN+0x150>)
   9487a:	4798      	blx	r3
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   9487c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   94880:	3301      	adds	r3, #1
   94882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   94886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   9488a:	2b07      	cmp	r3, #7
   9488c:	d9ef      	bls.n	9486e <DD_INIT_CAN+0x76>
		mb_config_t.ul_mb_idx = i;
		dd_can_mailbox_conf(&mb_config_t);
	}
	// ALL MAIL BOX HAS BEEN RESET
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
   9488e:	4a2c      	ldr	r2, [pc, #176]	; (94940 <DD_INIT_CAN+0x148>)
   94890:	4b2b      	ldr	r3, [pc, #172]	; (94940 <DD_INIT_CAN+0x148>)
   94892:	681b      	ldr	r3, [r3, #0]
   94894:	f043 0301 	orr.w	r3, r3, #1
   94898:	6013      	str	r3, [r2, #0]
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   9489a:	2300      	movs	r3, #0
   9489c:	637b      	str	r3, [r7, #52]	; 0x34
	ul_tick = 0;
   9489e:	2300      	movs	r3, #0
   948a0:	633b      	str	r3, [r7, #48]	; 0x30
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   948a2:	e005      	b.n	948b0 <DD_INIT_CAN+0xb8>
		ul_flag = (CAN0->CAN_SR);
   948a4:	4b26      	ldr	r3, [pc, #152]	; (94940 <DD_INIT_CAN+0x148>)
   948a6:	691b      	ldr	r3, [r3, #16]
   948a8:	637b      	str	r3, [r7, #52]	; 0x34
		ul_tick++;
   948aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   948ac:	3301      	adds	r3, #1
   948ae:	633b      	str	r3, [r7, #48]	; 0x30
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   948b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   948b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   948b6:	2b00      	cmp	r3, #0
   948b8:	d103      	bne.n	948c2 <DD_INIT_CAN+0xca>
   948ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   948bc:	4a23      	ldr	r2, [pc, #140]	; (9494c <DD_INIT_CAN+0x154>)
   948be:	4293      	cmp	r3, r2
   948c0:	d9f0      	bls.n	948a4 <DD_INIT_CAN+0xac>
	/* Timeout or the CAN module has been synchronized with the bus. */
/*	if (CAN_TIMEOUT == ul_tick) { puts("CAN initialization (sync) ERROR" STRING_EOL);	}
	else {	puts("CAN initialization is completed." STRING_EOL);
	}*/
	//NVIC-> ISER reset_mailbox_conf(&can0_mailbox);
	can0_mailbox.ul_mb_idx =   MAILBOX_1;
   948c2:	4b23      	ldr	r3, [pc, #140]	; (94950 <DD_INIT_CAN+0x158>)
   948c4:	2201      	movs	r2, #1
   948c6:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE ;
   948c8:	4b21      	ldr	r3, [pc, #132]	; (94950 <DD_INIT_CAN+0x158>)
   948ca:	2201      	movs	r2, #1
   948cc:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 0;
   948ce:	4b20      	ldr	r3, [pc, #128]	; (94950 <DD_INIT_CAN+0x158>)
   948d0:	2200      	movs	r2, #0
   948d2:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   948d4:	4b1e      	ldr	r3, [pc, #120]	; (94950 <DD_INIT_CAN+0x158>)
   948d6:	2200      	movs	r2, #0
   948d8:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =  CAN_MFID_MFID_VA_dd(CAN_MASK);   // 0x7FC | CAN_MAM_MIDvA_Msk ;
   948da:	4b1d      	ldr	r3, [pc, #116]	; (94950 <DD_INIT_CAN+0x158>)
   948dc:	4a1d      	ldr	r2, [pc, #116]	; (94954 <DD_INIT_CAN+0x15c>)
   948de:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id) ;
   948e0:	4b1b      	ldr	r3, [pc, #108]	; (94950 <DD_INIT_CAN+0x158>)
   948e2:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   948e6:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   948e8:	4819      	ldr	r0, [pc, #100]	; (94950 <DD_INIT_CAN+0x158>)
   948ea:	4b17      	ldr	r3, [pc, #92]	; (94948 <DD_INIT_CAN+0x150>)
   948ec:	4798      	blx	r3
	
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   948ee:	4b18      	ldr	r3, [pc, #96]	; (94950 <DD_INIT_CAN+0x158>)
   948f0:	2200      	movs	r2, #0
   948f2:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   948f4:	4b16      	ldr	r3, [pc, #88]	; (94950 <DD_INIT_CAN+0x158>)
   948f6:	2203      	movs	r2, #3
   948f8:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   948fa:	4b15      	ldr	r3, [pc, #84]	; (94950 <DD_INIT_CAN+0x158>)
   948fc:	2201      	movs	r2, #1
   948fe:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   94900:	4b13      	ldr	r3, [pc, #76]	; (94950 <DD_INIT_CAN+0x158>)
   94902:	2200      	movs	r2, #0
   94904:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = CAN_MFID_MFID_VA_dd(CAN_MASK);// 0x7FC | CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk ;
   94906:	4b12      	ldr	r3, [pc, #72]	; (94950 <DD_INIT_CAN+0x158>)
   94908:	4a12      	ldr	r2, [pc, #72]	; (94954 <DD_INIT_CAN+0x15c>)
   9490a:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(PROPORTIONING_CPU_id);
   9490c:	4b10      	ldr	r3, [pc, #64]	; (94950 <DD_INIT_CAN+0x158>)
   9490e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   94912:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   94914:	480e      	ldr	r0, [pc, #56]	; (94950 <DD_INIT_CAN+0x158>)
   94916:	4b0c      	ldr	r3, [pc, #48]	; (94948 <DD_INIT_CAN+0x150>)
   94918:	4798      	blx	r3
		
		NVIC_EnableIRQ(CAN0_IRQn);
   9491a:	202b      	movs	r0, #43	; 0x2b
   9491c:	4b0e      	ldr	r3, [pc, #56]	; (94958 <DD_INIT_CAN+0x160>)
   9491e:	4798      	blx	r3
		CAN0->CAN_IER = CAN_IER_MB1;
   94920:	4b07      	ldr	r3, [pc, #28]	; (94940 <DD_INIT_CAN+0x148>)
   94922:	2202      	movs	r2, #2
   94924:	605a      	str	r2, [r3, #4]
// 					
	
	sn65hvda540_set_en(&can0_transceiver ,PIN_CAN0_STANDBY_IDX);
   94926:	2103      	movs	r1, #3
   94928:	480c      	ldr	r0, [pc, #48]	; (9495c <DD_INIT_CAN+0x164>)
   9492a:	4b0d      	ldr	r3, [pc, #52]	; (94960 <DD_INIT_CAN+0x168>)
   9492c:	4798      	blx	r3
	sn65hvda540_normal_mode(&can0_transceiver);
   9492e:	480b      	ldr	r0, [pc, #44]	; (9495c <DD_INIT_CAN+0x164>)
   94930:	4b0c      	ldr	r3, [pc, #48]	; (94964 <DD_INIT_CAN+0x16c>)
   94932:	4798      	blx	r3
		
		
	}
   94934:	bf00      	nop
   94936:	3738      	adds	r7, #56	; 0x38
   94938:	46bd      	mov	sp, r7
   9493a:	bd80      	pop	{r7, pc}
   9493c:	000a61f0 	.word	0x000a61f0
   94940:	400b4000 	.word	0x400b4000
   94944:	43414e00 	.word	0x43414e00
   94948:	00094635 	.word	0x00094635
   9494c:	0001869f 	.word	0x0001869f
   94950:	2007331c 	.word	0x2007331c
   94954:	1ffc0000 	.word	0x1ffc0000
   94958:	000940ad 	.word	0x000940ad
   9495c:	2007333c 	.word	0x2007333c
   94960:	00094149 	.word	0x00094149
   94964:	00094165 	.word	0x00094165

00094968 <DD_CAN_READ_SENSORS>:
	
	
	

uint16_t DD_CAN_READ_SENSORS(DD_sensortype ID_SENSOR)
{
   94968:	b480      	push	{r7}
   9496a:	b085      	sub	sp, #20
   9496c:	af00      	add	r7, sp, #0
   9496e:	4603      	mov	r3, r0
   94970:	71fb      	strb	r3, [r7, #7]
	int16_t SENSOR_VAL;
	uint8_t channel = 0;
   94972:	2300      	movs	r3, #0
   94974:	737b      	strb	r3, [r7, #13]
	//adc_chnl channel = channel_0;
	switch(ID_SENSOR)
   94976:	79fb      	ldrb	r3, [r7, #7]
   94978:	3b01      	subs	r3, #1
   9497a:	2b13      	cmp	r3, #19
   9497c:	f200 8090 	bhi.w	94aa0 <DD_CAN_READ_SENSORS+0x138>
   94980:	a201      	add	r2, pc, #4	; (adr r2, 94988 <DD_CAN_READ_SENSORS+0x20>)
   94982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94986:	bf00      	nop
   94988:	000949d9 	.word	0x000949d9
   9498c:	000949e3 	.word	0x000949e3
   94990:	000949ed 	.word	0x000949ed
   94994:	000949f7 	.word	0x000949f7
   94998:	00094a01 	.word	0x00094a01
   9499c:	00094a0b 	.word	0x00094a0b
   949a0:	00094a15 	.word	0x00094a15
   949a4:	00094a1f 	.word	0x00094a1f
   949a8:	00094a29 	.word	0x00094a29
   949ac:	00094a33 	.word	0x00094a33
   949b0:	00094a3d 	.word	0x00094a3d
   949b4:	00094a47 	.word	0x00094a47
   949b8:	00094a51 	.word	0x00094a51
   949bc:	00094a5b 	.word	0x00094a5b
   949c0:	00094a65 	.word	0x00094a65
   949c4:	00094a6f 	.word	0x00094a6f
   949c8:	00094a79 	.word	0x00094a79
   949cc:	00094a83 	.word	0x00094a83
   949d0:	00094a8d 	.word	0x00094a8d
   949d4:	00094a97 	.word	0x00094a97
	{
		case DD_CAN_SENSOR_ID1:
		
		SENSOR_VAL = DD_Sensor_status.ps1status;
   949d8:	4b34      	ldr	r3, [pc, #208]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   949da:	885b      	ldrh	r3, [r3, #2]
   949dc:	b29b      	uxth	r3, r3
   949de:	81fb      	strh	r3, [r7, #14]
		break;
   949e0:	e05e      	b.n	94aa0 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID2:
		SENSOR_VAL = DD_Sensor_status.ps2status;
   949e2:	4b32      	ldr	r3, [pc, #200]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   949e4:	889b      	ldrh	r3, [r3, #4]
   949e6:	b29b      	uxth	r3, r3
   949e8:	81fb      	strh	r3, [r7, #14]
		break;
   949ea:	e059      	b.n	94aa0 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID3:
		SENSOR_VAL = DD_Sensor_status.ps3status;
   949ec:	4b2f      	ldr	r3, [pc, #188]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   949ee:	88db      	ldrh	r3, [r3, #6]
   949f0:	b29b      	uxth	r3, r3
   949f2:	81fb      	strh	r3, [r7, #14]
		break;
   949f4:	e054      	b.n	94aa0 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID4:
		SENSOR_VAL = DD_Sensor_status.thermocouple_status;
   949f6:	4b2d      	ldr	r3, [pc, #180]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   949f8:	891b      	ldrh	r3, [r3, #8]
   949fa:	b29b      	uxth	r3, r3
   949fc:	81fb      	strh	r3, [r7, #14]
		break;
   949fe:	e04f      	b.n	94aa0 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID5:
		SENSOR_VAL = DD_Sensor_status.Temp1status;
   94a00:	4b2a      	ldr	r3, [pc, #168]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   94a02:	895b      	ldrh	r3, [r3, #10]
   94a04:	b29b      	uxth	r3, r3
   94a06:	81fb      	strh	r3, [r7, #14]
		
		break;
   94a08:	e04a      	b.n	94aa0 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID6:
		SENSOR_VAL = DD_Sensor_status.Temp2status;
   94a0a:	4b28      	ldr	r3, [pc, #160]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   94a0c:	899b      	ldrh	r3, [r3, #12]
   94a0e:	b29b      	uxth	r3, r3
   94a10:	81fb      	strh	r3, [r7, #14]
		break;
   94a12:	e045      	b.n	94aa0 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID7:
		SENSOR_VAL = DD_Sensor_status.CS3_Tempstatus;
   94a14:	4b25      	ldr	r3, [pc, #148]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   94a16:	8a9b      	ldrh	r3, [r3, #20]
   94a18:	b29b      	uxth	r3, r3
   94a1a:	81fb      	strh	r3, [r7, #14]
		break;
   94a1c:	e040      	b.n	94aa0 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID8:
		SENSOR_VAL = DD_Sensor_status.CS1_Tempstatus;
   94a1e:	4b23      	ldr	r3, [pc, #140]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   94a20:	8a1b      	ldrh	r3, [r3, #16]
   94a22:	b29b      	uxth	r3, r3
   94a24:	81fb      	strh	r3, [r7, #14]
		break;
   94a26:	e03b      	b.n	94aa0 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID9:
		SENSOR_VAL = DD_Sensor_status.CS2_Tempstatus;
   94a28:	4b20      	ldr	r3, [pc, #128]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   94a2a:	8a5b      	ldrh	r3, [r3, #18]
   94a2c:	b29b      	uxth	r3, r3
   94a2e:	81fb      	strh	r3, [r7, #14]
		break;
   94a30:	e036      	b.n	94aa0 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID10:
		SENSOR_VAL = DD_Sensor_status.CS3_Tempstatus;
   94a32:	4b1e      	ldr	r3, [pc, #120]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   94a34:	8a9b      	ldrh	r3, [r3, #20]
   94a36:	b29b      	uxth	r3, r3
   94a38:	81fb      	strh	r3, [r7, #14]
		break;
   94a3a:	e031      	b.n	94aa0 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID11:
		SENSOR_VAL = DD_Sensor_status.CS1status;
   94a3c:	4b1b      	ldr	r3, [pc, #108]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   94a3e:	8adb      	ldrh	r3, [r3, #22]
   94a40:	b29b      	uxth	r3, r3
   94a42:	81fb      	strh	r3, [r7, #14]
		break;
   94a44:	e02c      	b.n	94aa0 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID12:
		SENSOR_VAL = DD_Sensor_status.CS2status;
   94a46:	4b19      	ldr	r3, [pc, #100]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   94a48:	8b1b      	ldrh	r3, [r3, #24]
   94a4a:	b29b      	uxth	r3, r3
   94a4c:	81fb      	strh	r3, [r7, #14]
		break;
   94a4e:	e027      	b.n	94aa0 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID13:
		SENSOR_VAL = DD_Sensor_status.CS3status;
   94a50:	4b16      	ldr	r3, [pc, #88]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   94a52:	8b5b      	ldrh	r3, [r3, #26]
   94a54:	b29b      	uxth	r3, r3
   94a56:	81fb      	strh	r3, [r7, #14]
		break;
   94a58:	e022      	b.n	94aa0 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID14:
		SENSOR_VAL = DD_Sensor_status.DAC1status;
   94a5a:	4b14      	ldr	r3, [pc, #80]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   94a5c:	8b9b      	ldrh	r3, [r3, #28]
   94a5e:	b29b      	uxth	r3, r3
   94a60:	81fb      	strh	r3, [r7, #14]
		break;
   94a62:	e01d      	b.n	94aa0 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID15:
		SENSOR_VAL = DD_Sensor_status.DAAstatus;
   94a64:	4b11      	ldr	r3, [pc, #68]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   94a66:	8bdb      	ldrh	r3, [r3, #30]
   94a68:	b29b      	uxth	r3, r3
   94a6a:	81fb      	strh	r3, [r7, #14]
		break;
   94a6c:	e018      	b.n	94aa0 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID16:
		SENSOR_VAL = DD_Sensor_status.DABstatus;
   94a6e:	4b0f      	ldr	r3, [pc, #60]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   94a70:	8c1b      	ldrh	r3, [r3, #32]
   94a72:	b29b      	uxth	r3, r3
   94a74:	81fb      	strh	r3, [r7, #14]
		break;
   94a76:	e013      	b.n	94aa0 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID17:
		SENSOR_VAL = DD_Sensor_status.DAC2status;
   94a78:	4b0c      	ldr	r3, [pc, #48]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   94a7a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   94a7c:	b29b      	uxth	r3, r3
   94a7e:	81fb      	strh	r3, [r7, #14]
		break;
   94a80:	e00e      	b.n	94aa0 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID18:
		SENSOR_VAL = DD_Sensor_status.flow_sensor_status;
   94a82:	4b0a      	ldr	r3, [pc, #40]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   94a84:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   94a86:	b29b      	uxth	r3, r3
   94a88:	81fb      	strh	r3, [r7, #14]
		break;
   94a8a:	e009      	b.n	94aa0 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID19:
		SENSOR_VAL = DD_Sensor_status.aptstatus;
   94a8c:	4b07      	ldr	r3, [pc, #28]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   94a8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   94a90:	b29b      	uxth	r3, r3
   94a92:	81fb      	strh	r3, [r7, #14]
		break;
   94a94:	e004      	b.n	94aa0 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID20:
		SENSOR_VAL = DD_Sensor_status.vptstatus;
   94a96:	4b05      	ldr	r3, [pc, #20]	; (94aac <DD_CAN_READ_SENSORS+0x144>)
   94a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   94a9a:	b29b      	uxth	r3, r3
   94a9c:	81fb      	strh	r3, [r7, #14]
		break;
   94a9e:	bf00      	nop
 	}
	
		
	return SENSOR_VAL;
   94aa0:	89fb      	ldrh	r3, [r7, #14]
	
}
   94aa2:	4618      	mov	r0, r3
   94aa4:	3714      	adds	r7, #20
   94aa6:	46bd      	mov	sp, r7
   94aa8:	bc80      	pop	{r7}
   94aaa:	4770      	bx	lr
   94aac:	200732f0 	.word	0x200732f0

00094ab0 <DD_INIT_CLOCK>:
 *  Author: Gopalkrishna Kalibhat
 */ 
#include "DD_CLOCK.h"

void DD_INIT_CLOCK()
{
   94ab0:	b580      	push	{r7, lr}
   94ab2:	af00      	add	r7, sp, #0
	
	sysclk_init();
   94ab4:	4b07      	ldr	r3, [pc, #28]	; (94ad4 <DD_INIT_CLOCK+0x24>)
   94ab6:	4798      	blx	r3
	PMC->PMC_WPMR  = 0x504D4300;
   94ab8:	4b07      	ldr	r3, [pc, #28]	; (94ad8 <DD_INIT_CLOCK+0x28>)
   94aba:	4a08      	ldr	r2, [pc, #32]	; (94adc <DD_INIT_CLOCK+0x2c>)
   94abc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 = 0xF8007900;
   94ac0:	4b05      	ldr	r3, [pc, #20]	; (94ad8 <DD_INIT_CLOCK+0x28>)
   94ac2:	4a07      	ldr	r2, [pc, #28]	; (94ae0 <DD_INIT_CLOCK+0x30>)
   94ac4:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER1 = 0x0000083F;
   94ac6:	4b04      	ldr	r3, [pc, #16]	; (94ad8 <DD_INIT_CLOCK+0x28>)
   94ac8:	f640 023f 	movw	r2, #2111	; 0x83f
   94acc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
   94ad0:	bf00      	nop
   94ad2:	bd80      	pop	{r7, pc}
   94ad4:	0008044d 	.word	0x0008044d
   94ad8:	400e0600 	.word	0x400e0600
   94adc:	504d4300 	.word	0x504d4300
   94ae0:	f8007900 	.word	0xf8007900

00094ae4 <DD_INIT_PIO>:
   94ae4:	b580      	push	{r7, lr}
   94ae6:	af00      	add	r7, sp, #0
   94ae8:	4b38      	ldr	r3, [pc, #224]	; (94bcc <DD_INIT_PIO+0xe8>)
   94aea:	4a39      	ldr	r2, [pc, #228]	; (94bd0 <DD_INIT_PIO+0xec>)
   94aec:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   94af0:	4b36      	ldr	r3, [pc, #216]	; (94bcc <DD_INIT_PIO+0xe8>)
   94af2:	4a38      	ldr	r2, [pc, #224]	; (94bd4 <DD_INIT_PIO+0xf0>)
   94af4:	601a      	str	r2, [r3, #0]
   94af6:	4b35      	ldr	r3, [pc, #212]	; (94bcc <DD_INIT_PIO+0xe8>)
   94af8:	4a37      	ldr	r2, [pc, #220]	; (94bd8 <DD_INIT_PIO+0xf4>)
   94afa:	611a      	str	r2, [r3, #16]
   94afc:	4b33      	ldr	r3, [pc, #204]	; (94bcc <DD_INIT_PIO+0xe8>)
   94afe:	4a37      	ldr	r2, [pc, #220]	; (94bdc <DD_INIT_PIO+0xf8>)
   94b00:	615a      	str	r2, [r3, #20]
   94b02:	4b32      	ldr	r3, [pc, #200]	; (94bcc <DD_INIT_PIO+0xe8>)
   94b04:	4a36      	ldr	r2, [pc, #216]	; (94be0 <DD_INIT_PIO+0xfc>)
   94b06:	605a      	str	r2, [r3, #4]
   94b08:	4b30      	ldr	r3, [pc, #192]	; (94bcc <DD_INIT_PIO+0xe8>)
   94b0a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   94b0e:	665a      	str	r2, [r3, #100]	; 0x64
   94b10:	4b2e      	ldr	r3, [pc, #184]	; (94bcc <DD_INIT_PIO+0xe8>)
   94b12:	4a34      	ldr	r2, [pc, #208]	; (94be4 <DD_INIT_PIO+0x100>)
   94b14:	671a      	str	r2, [r3, #112]	; 0x70
   94b16:	4b2d      	ldr	r3, [pc, #180]	; (94bcc <DD_INIT_PIO+0xe8>)
   94b18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   94b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   94b20:	4b31      	ldr	r3, [pc, #196]	; (94be8 <DD_INIT_PIO+0x104>)
   94b22:	4a2b      	ldr	r2, [pc, #172]	; (94bd0 <DD_INIT_PIO+0xec>)
   94b24:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   94b28:	4b2f      	ldr	r3, [pc, #188]	; (94be8 <DD_INIT_PIO+0x104>)
   94b2a:	4a30      	ldr	r2, [pc, #192]	; (94bec <DD_INIT_PIO+0x108>)
   94b2c:	601a      	str	r2, [r3, #0]
   94b2e:	4b2e      	ldr	r3, [pc, #184]	; (94be8 <DD_INIT_PIO+0x104>)
   94b30:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
   94b34:	611a      	str	r2, [r3, #16]
   94b36:	4b2c      	ldr	r3, [pc, #176]	; (94be8 <DD_INIT_PIO+0x104>)
   94b38:	4a2d      	ldr	r2, [pc, #180]	; (94bf0 <DD_INIT_PIO+0x10c>)
   94b3a:	615a      	str	r2, [r3, #20]
   94b3c:	4b2a      	ldr	r3, [pc, #168]	; (94be8 <DD_INIT_PIO+0x104>)
   94b3e:	4a2d      	ldr	r2, [pc, #180]	; (94bf4 <DD_INIT_PIO+0x110>)
   94b40:	605a      	str	r2, [r3, #4]
   94b42:	4b2d      	ldr	r3, [pc, #180]	; (94bf8 <DD_INIT_PIO+0x114>)
   94b44:	4a22      	ldr	r2, [pc, #136]	; (94bd0 <DD_INIT_PIO+0xec>)
   94b46:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   94b4a:	4b2b      	ldr	r3, [pc, #172]	; (94bf8 <DD_INIT_PIO+0x114>)
   94b4c:	4a2b      	ldr	r2, [pc, #172]	; (94bfc <DD_INIT_PIO+0x118>)
   94b4e:	601a      	str	r2, [r3, #0]
   94b50:	4b29      	ldr	r3, [pc, #164]	; (94bf8 <DD_INIT_PIO+0x114>)
   94b52:	4a2b      	ldr	r2, [pc, #172]	; (94c00 <DD_INIT_PIO+0x11c>)
   94b54:	611a      	str	r2, [r3, #16]
   94b56:	4b28      	ldr	r3, [pc, #160]	; (94bf8 <DD_INIT_PIO+0x114>)
   94b58:	4a2a      	ldr	r2, [pc, #168]	; (94c04 <DD_INIT_PIO+0x120>)
   94b5a:	615a      	str	r2, [r3, #20]
   94b5c:	4b26      	ldr	r3, [pc, #152]	; (94bf8 <DD_INIT_PIO+0x114>)
   94b5e:	4a2a      	ldr	r2, [pc, #168]	; (94c08 <DD_INIT_PIO+0x124>)
   94b60:	605a      	str	r2, [r3, #4]
   94b62:	4b25      	ldr	r3, [pc, #148]	; (94bf8 <DD_INIT_PIO+0x114>)
   94b64:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
   94b68:	671a      	str	r2, [r3, #112]	; 0x70
   94b6a:	4b28      	ldr	r3, [pc, #160]	; (94c0c <DD_INIT_PIO+0x128>)
   94b6c:	4a18      	ldr	r2, [pc, #96]	; (94bd0 <DD_INIT_PIO+0xec>)
   94b6e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   94b72:	4b26      	ldr	r3, [pc, #152]	; (94c0c <DD_INIT_PIO+0x128>)
   94b74:	f240 72ff 	movw	r2, #2047	; 0x7ff
   94b78:	601a      	str	r2, [r3, #0]
   94b7a:	4b24      	ldr	r3, [pc, #144]	; (94c0c <DD_INIT_PIO+0x128>)
   94b7c:	f44f 72c3 	mov.w	r2, #390	; 0x186
   94b80:	611a      	str	r2, [r3, #16]
   94b82:	4b22      	ldr	r3, [pc, #136]	; (94c0c <DD_INIT_PIO+0x128>)
   94b84:	f240 6279 	movw	r2, #1657	; 0x679
   94b88:	615a      	str	r2, [r3, #20]
   94b8a:	4b1b      	ldr	r3, [pc, #108]	; (94bf8 <DD_INIT_PIO+0x114>)
   94b8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   94b90:	635a      	str	r2, [r3, #52]	; 0x34
   94b92:	4b1e      	ldr	r3, [pc, #120]	; (94c0c <DD_INIT_PIO+0x128>)
   94b94:	2201      	movs	r2, #1
   94b96:	631a      	str	r2, [r3, #48]	; 0x30
   94b98:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   94b9c:	2055      	movs	r0, #85	; 0x55
   94b9e:	4b1c      	ldr	r3, [pc, #112]	; (94c10 <DD_INIT_PIO+0x12c>)
   94ba0:	4798      	blx	r3
   94ba2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   94ba6:	2055      	movs	r0, #85	; 0x55
   94ba8:	4b19      	ldr	r3, [pc, #100]	; (94c10 <DD_INIT_PIO+0x12c>)
   94baa:	4798      	blx	r3
   94bac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   94bb0:	2001      	movs	r0, #1
   94bb2:	4b17      	ldr	r3, [pc, #92]	; (94c10 <DD_INIT_PIO+0x12c>)
   94bb4:	4798      	blx	r3
   94bb6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   94bba:	2000      	movs	r0, #0
   94bbc:	4b14      	ldr	r3, [pc, #80]	; (94c10 <DD_INIT_PIO+0x12c>)
   94bbe:	4798      	blx	r3
   94bc0:	4914      	ldr	r1, [pc, #80]	; (94c14 <DD_INIT_PIO+0x130>)
   94bc2:	2003      	movs	r0, #3
   94bc4:	4b12      	ldr	r3, [pc, #72]	; (94c10 <DD_INIT_PIO+0x12c>)
   94bc6:	4798      	blx	r3
   94bc8:	bf00      	nop
   94bca:	bd80      	pop	{r7, pc}
   94bcc:	400e0e00 	.word	0x400e0e00
   94bd0:	50494f00 	.word	0x50494f00
   94bd4:	21c9ecf8 	.word	0x21c9ecf8
   94bd8:	20f0b868 	.word	0x20f0b868
   94bdc:	01094494 	.word	0x01094494
   94be0:	1e361303 	.word	0x1e361303
   94be4:	00391000 	.word	0x00391000
   94be8:	400e1000 	.word	0x400e1000
   94bec:	0fe5f700 	.word	0x0fe5f700
   94bf0:	0fe59300 	.word	0x0fe59300
   94bf4:	f01800ff 	.word	0xf01800ff
   94bf8:	400e1200 	.word	0x400e1200
   94bfc:	7f9ffffe 	.word	0x7f9ffffe
   94c00:	18e1fffe 	.word	0x18e1fffe
   94c04:	671e0000 	.word	0x671e0000
   94c08:	80600001 	.word	0x80600001
   94c0c:	400e1400 	.word	0x400e1400
   94c10:	00098571 	.word	0x00098571
   94c14:	30000001 	.word	0x30000001

00094c18 <DD_DIS_PERI_AND_RESET_PIO>:
   94c18:	b480      	push	{r7}
   94c1a:	b083      	sub	sp, #12
   94c1c:	af00      	add	r7, sp, #0
   94c1e:	6078      	str	r0, [r7, #4]
   94c20:	6039      	str	r1, [r7, #0]
   94c22:	687b      	ldr	r3, [r7, #4]
   94c24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   94c28:	d01a      	beq.n	94c60 <DD_DIS_PERI_AND_RESET_PIO+0x48>
   94c2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   94c2e:	d803      	bhi.n	94c38 <DD_DIS_PERI_AND_RESET_PIO+0x20>
   94c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   94c34:	d007      	beq.n	94c46 <DD_DIS_PERI_AND_RESET_PIO+0x2e>
   94c36:	e03a      	b.n	94cae <DD_DIS_PERI_AND_RESET_PIO+0x96>
   94c38:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   94c3c:	d01d      	beq.n	94c7a <DD_DIS_PERI_AND_RESET_PIO+0x62>
   94c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   94c42:	d027      	beq.n	94c94 <DD_DIS_PERI_AND_RESET_PIO+0x7c>
   94c44:	e033      	b.n	94cae <DD_DIS_PERI_AND_RESET_PIO+0x96>
   94c46:	4a1d      	ldr	r2, [pc, #116]	; (94cbc <DD_DIS_PERI_AND_RESET_PIO+0xa4>)
   94c48:	2101      	movs	r1, #1
   94c4a:	683b      	ldr	r3, [r7, #0]
   94c4c:	fa01 f303 	lsl.w	r3, r1, r3
   94c50:	6013      	str	r3, [r2, #0]
   94c52:	4a1a      	ldr	r2, [pc, #104]	; (94cbc <DD_DIS_PERI_AND_RESET_PIO+0xa4>)
   94c54:	2101      	movs	r1, #1
   94c56:	683b      	ldr	r3, [r7, #0]
   94c58:	fa01 f303 	lsl.w	r3, r1, r3
   94c5c:	6353      	str	r3, [r2, #52]	; 0x34
   94c5e:	e026      	b.n	94cae <DD_DIS_PERI_AND_RESET_PIO+0x96>
   94c60:	4a17      	ldr	r2, [pc, #92]	; (94cc0 <DD_DIS_PERI_AND_RESET_PIO+0xa8>)
   94c62:	2101      	movs	r1, #1
   94c64:	683b      	ldr	r3, [r7, #0]
   94c66:	fa01 f303 	lsl.w	r3, r1, r3
   94c6a:	6013      	str	r3, [r2, #0]
   94c6c:	4a14      	ldr	r2, [pc, #80]	; (94cc0 <DD_DIS_PERI_AND_RESET_PIO+0xa8>)
   94c6e:	2101      	movs	r1, #1
   94c70:	683b      	ldr	r3, [r7, #0]
   94c72:	fa01 f303 	lsl.w	r3, r1, r3
   94c76:	6353      	str	r3, [r2, #52]	; 0x34
   94c78:	e019      	b.n	94cae <DD_DIS_PERI_AND_RESET_PIO+0x96>
   94c7a:	4a12      	ldr	r2, [pc, #72]	; (94cc4 <DD_DIS_PERI_AND_RESET_PIO+0xac>)
   94c7c:	2101      	movs	r1, #1
   94c7e:	683b      	ldr	r3, [r7, #0]
   94c80:	fa01 f303 	lsl.w	r3, r1, r3
   94c84:	6013      	str	r3, [r2, #0]
   94c86:	4a0f      	ldr	r2, [pc, #60]	; (94cc4 <DD_DIS_PERI_AND_RESET_PIO+0xac>)
   94c88:	2101      	movs	r1, #1
   94c8a:	683b      	ldr	r3, [r7, #0]
   94c8c:	fa01 f303 	lsl.w	r3, r1, r3
   94c90:	6353      	str	r3, [r2, #52]	; 0x34
   94c92:	e00c      	b.n	94cae <DD_DIS_PERI_AND_RESET_PIO+0x96>
   94c94:	4a0c      	ldr	r2, [pc, #48]	; (94cc8 <DD_DIS_PERI_AND_RESET_PIO+0xb0>)
   94c96:	2101      	movs	r1, #1
   94c98:	683b      	ldr	r3, [r7, #0]
   94c9a:	fa01 f303 	lsl.w	r3, r1, r3
   94c9e:	6013      	str	r3, [r2, #0]
   94ca0:	4a09      	ldr	r2, [pc, #36]	; (94cc8 <DD_DIS_PERI_AND_RESET_PIO+0xb0>)
   94ca2:	2101      	movs	r1, #1
   94ca4:	683b      	ldr	r3, [r7, #0]
   94ca6:	fa01 f303 	lsl.w	r3, r1, r3
   94caa:	6353      	str	r3, [r2, #52]	; 0x34
   94cac:	bf00      	nop
   94cae:	bf00      	nop
   94cb0:	4618      	mov	r0, r3
   94cb2:	370c      	adds	r7, #12
   94cb4:	46bd      	mov	sp, r7
   94cb6:	bc80      	pop	{r7}
   94cb8:	4770      	bx	lr
   94cba:	bf00      	nop
   94cbc:	400e0e00 	.word	0x400e0e00
   94cc0:	400e1000 	.word	0x400e1000
   94cc4:	400e1200 	.word	0x400e1200
   94cc8:	400e1400 	.word	0x400e1400

00094ccc <DD_EN_PERI_AND_SET_PIO>:
   94ccc:	b480      	push	{r7}
   94cce:	b083      	sub	sp, #12
   94cd0:	af00      	add	r7, sp, #0
   94cd2:	6078      	str	r0, [r7, #4]
   94cd4:	6039      	str	r1, [r7, #0]
   94cd6:	687b      	ldr	r3, [r7, #4]
   94cd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   94cdc:	d014      	beq.n	94d08 <DD_EN_PERI_AND_SET_PIO+0x3c>
   94cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   94ce2:	d803      	bhi.n	94cec <DD_EN_PERI_AND_SET_PIO+0x20>
   94ce4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   94ce8:	d007      	beq.n	94cfa <DD_EN_PERI_AND_SET_PIO+0x2e>
   94cea:	e022      	b.n	94d32 <DD_EN_PERI_AND_SET_PIO+0x66>
   94cec:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   94cf0:	d011      	beq.n	94d16 <DD_EN_PERI_AND_SET_PIO+0x4a>
   94cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   94cf6:	d015      	beq.n	94d24 <DD_EN_PERI_AND_SET_PIO+0x58>
   94cf8:	e01b      	b.n	94d32 <DD_EN_PERI_AND_SET_PIO+0x66>
   94cfa:	4a11      	ldr	r2, [pc, #68]	; (94d40 <DD_EN_PERI_AND_SET_PIO+0x74>)
   94cfc:	2101      	movs	r1, #1
   94cfe:	683b      	ldr	r3, [r7, #0]
   94d00:	fa01 f303 	lsl.w	r3, r1, r3
   94d04:	6053      	str	r3, [r2, #4]
   94d06:	e014      	b.n	94d32 <DD_EN_PERI_AND_SET_PIO+0x66>
   94d08:	4a0e      	ldr	r2, [pc, #56]	; (94d44 <DD_EN_PERI_AND_SET_PIO+0x78>)
   94d0a:	2101      	movs	r1, #1
   94d0c:	683b      	ldr	r3, [r7, #0]
   94d0e:	fa01 f303 	lsl.w	r3, r1, r3
   94d12:	6053      	str	r3, [r2, #4]
   94d14:	e00d      	b.n	94d32 <DD_EN_PERI_AND_SET_PIO+0x66>
   94d16:	4a0c      	ldr	r2, [pc, #48]	; (94d48 <DD_EN_PERI_AND_SET_PIO+0x7c>)
   94d18:	2101      	movs	r1, #1
   94d1a:	683b      	ldr	r3, [r7, #0]
   94d1c:	fa01 f303 	lsl.w	r3, r1, r3
   94d20:	6053      	str	r3, [r2, #4]
   94d22:	e006      	b.n	94d32 <DD_EN_PERI_AND_SET_PIO+0x66>
   94d24:	4a09      	ldr	r2, [pc, #36]	; (94d4c <DD_EN_PERI_AND_SET_PIO+0x80>)
   94d26:	2101      	movs	r1, #1
   94d28:	683b      	ldr	r3, [r7, #0]
   94d2a:	fa01 f303 	lsl.w	r3, r1, r3
   94d2e:	6053      	str	r3, [r2, #4]
   94d30:	bf00      	nop
   94d32:	bf00      	nop
   94d34:	4618      	mov	r0, r3
   94d36:	370c      	adds	r7, #12
   94d38:	46bd      	mov	sp, r7
   94d3a:	bc80      	pop	{r7}
   94d3c:	4770      	bx	lr
   94d3e:	bf00      	nop
   94d40:	400e0e00 	.word	0x400e0e00
   94d44:	400e1000 	.word	0x400e1000
   94d48:	400e1200 	.word	0x400e1200
   94d4c:	400e1400 	.word	0x400e1400

00094d50 <DD_SET_PIO>:
   94d50:	b480      	push	{r7}
   94d52:	b083      	sub	sp, #12
   94d54:	af00      	add	r7, sp, #0
   94d56:	6078      	str	r0, [r7, #4]
   94d58:	6039      	str	r1, [r7, #0]
   94d5a:	687b      	ldr	r3, [r7, #4]
   94d5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   94d60:	d014      	beq.n	94d8c <DD_SET_PIO+0x3c>
   94d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   94d66:	d803      	bhi.n	94d70 <DD_SET_PIO+0x20>
   94d68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   94d6c:	d007      	beq.n	94d7e <DD_SET_PIO+0x2e>
   94d6e:	e022      	b.n	94db6 <DD_SET_PIO+0x66>
   94d70:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   94d74:	d011      	beq.n	94d9a <DD_SET_PIO+0x4a>
   94d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   94d7a:	d015      	beq.n	94da8 <DD_SET_PIO+0x58>
   94d7c:	e01b      	b.n	94db6 <DD_SET_PIO+0x66>
   94d7e:	4a11      	ldr	r2, [pc, #68]	; (94dc4 <DD_SET_PIO+0x74>)
   94d80:	2101      	movs	r1, #1
   94d82:	683b      	ldr	r3, [r7, #0]
   94d84:	fa01 f303 	lsl.w	r3, r1, r3
   94d88:	6313      	str	r3, [r2, #48]	; 0x30
   94d8a:	e014      	b.n	94db6 <DD_SET_PIO+0x66>
   94d8c:	4a0e      	ldr	r2, [pc, #56]	; (94dc8 <DD_SET_PIO+0x78>)
   94d8e:	2101      	movs	r1, #1
   94d90:	683b      	ldr	r3, [r7, #0]
   94d92:	fa01 f303 	lsl.w	r3, r1, r3
   94d96:	6313      	str	r3, [r2, #48]	; 0x30
   94d98:	e00d      	b.n	94db6 <DD_SET_PIO+0x66>
   94d9a:	4a0c      	ldr	r2, [pc, #48]	; (94dcc <DD_SET_PIO+0x7c>)
   94d9c:	2101      	movs	r1, #1
   94d9e:	683b      	ldr	r3, [r7, #0]
   94da0:	fa01 f303 	lsl.w	r3, r1, r3
   94da4:	6313      	str	r3, [r2, #48]	; 0x30
   94da6:	e006      	b.n	94db6 <DD_SET_PIO+0x66>
   94da8:	4a09      	ldr	r2, [pc, #36]	; (94dd0 <DD_SET_PIO+0x80>)
   94daa:	2101      	movs	r1, #1
   94dac:	683b      	ldr	r3, [r7, #0]
   94dae:	fa01 f303 	lsl.w	r3, r1, r3
   94db2:	6313      	str	r3, [r2, #48]	; 0x30
   94db4:	bf00      	nop
   94db6:	2300      	movs	r3, #0
   94db8:	4618      	mov	r0, r3
   94dba:	370c      	adds	r7, #12
   94dbc:	46bd      	mov	sp, r7
   94dbe:	bc80      	pop	{r7}
   94dc0:	4770      	bx	lr
   94dc2:	bf00      	nop
   94dc4:	400e0e00 	.word	0x400e0e00
   94dc8:	400e1000 	.word	0x400e1000
   94dcc:	400e1200 	.word	0x400e1200
   94dd0:	400e1400 	.word	0x400e1400

00094dd4 <DD_RESET_PIO>:
   94dd4:	b480      	push	{r7}
   94dd6:	b083      	sub	sp, #12
   94dd8:	af00      	add	r7, sp, #0
   94dda:	6078      	str	r0, [r7, #4]
   94ddc:	6039      	str	r1, [r7, #0]
   94dde:	687b      	ldr	r3, [r7, #4]
   94de0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   94de4:	d014      	beq.n	94e10 <DD_RESET_PIO+0x3c>
   94de6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   94dea:	d803      	bhi.n	94df4 <DD_RESET_PIO+0x20>
   94dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   94df0:	d007      	beq.n	94e02 <DD_RESET_PIO+0x2e>
   94df2:	e022      	b.n	94e3a <DD_RESET_PIO+0x66>
   94df4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   94df8:	d011      	beq.n	94e1e <DD_RESET_PIO+0x4a>
   94dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   94dfe:	d015      	beq.n	94e2c <DD_RESET_PIO+0x58>
   94e00:	e01b      	b.n	94e3a <DD_RESET_PIO+0x66>
   94e02:	4a11      	ldr	r2, [pc, #68]	; (94e48 <DD_RESET_PIO+0x74>)
   94e04:	2101      	movs	r1, #1
   94e06:	683b      	ldr	r3, [r7, #0]
   94e08:	fa01 f303 	lsl.w	r3, r1, r3
   94e0c:	6353      	str	r3, [r2, #52]	; 0x34
   94e0e:	e014      	b.n	94e3a <DD_RESET_PIO+0x66>
   94e10:	4a0e      	ldr	r2, [pc, #56]	; (94e4c <DD_RESET_PIO+0x78>)
   94e12:	2101      	movs	r1, #1
   94e14:	683b      	ldr	r3, [r7, #0]
   94e16:	fa01 f303 	lsl.w	r3, r1, r3
   94e1a:	6353      	str	r3, [r2, #52]	; 0x34
   94e1c:	e00d      	b.n	94e3a <DD_RESET_PIO+0x66>
   94e1e:	4a0c      	ldr	r2, [pc, #48]	; (94e50 <DD_RESET_PIO+0x7c>)
   94e20:	2101      	movs	r1, #1
   94e22:	683b      	ldr	r3, [r7, #0]
   94e24:	fa01 f303 	lsl.w	r3, r1, r3
   94e28:	6353      	str	r3, [r2, #52]	; 0x34
   94e2a:	e006      	b.n	94e3a <DD_RESET_PIO+0x66>
   94e2c:	4a09      	ldr	r2, [pc, #36]	; (94e54 <DD_RESET_PIO+0x80>)
   94e2e:	2101      	movs	r1, #1
   94e30:	683b      	ldr	r3, [r7, #0]
   94e32:	fa01 f303 	lsl.w	r3, r1, r3
   94e36:	6353      	str	r3, [r2, #52]	; 0x34
   94e38:	bf00      	nop
   94e3a:	2300      	movs	r3, #0
   94e3c:	4618      	mov	r0, r3
   94e3e:	370c      	adds	r7, #12
   94e40:	46bd      	mov	sp, r7
   94e42:	bc80      	pop	{r7}
   94e44:	4770      	bx	lr
   94e46:	bf00      	nop
   94e48:	400e0e00 	.word	0x400e0e00
   94e4c:	400e1000 	.word	0x400e1000
   94e50:	400e1200 	.word	0x400e1200
   94e54:	400e1400 	.word	0x400e1400

00094e58 <DD_READ_PIO>:
   94e58:	b480      	push	{r7}
   94e5a:	b085      	sub	sp, #20
   94e5c:	af00      	add	r7, sp, #0
   94e5e:	6078      	str	r0, [r7, #4]
   94e60:	6039      	str	r1, [r7, #0]
   94e62:	2300      	movs	r3, #0
   94e64:	60fb      	str	r3, [r7, #12]
   94e66:	2300      	movs	r3, #0
   94e68:	817b      	strh	r3, [r7, #10]
   94e6a:	687b      	ldr	r3, [r7, #4]
   94e6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   94e70:	d01a      	beq.n	94ea8 <DD_READ_PIO+0x50>
   94e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   94e76:	d803      	bhi.n	94e80 <DD_READ_PIO+0x28>
   94e78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   94e7c:	d007      	beq.n	94e8e <DD_READ_PIO+0x36>
   94e7e:	e03c      	b.n	94efa <DD_READ_PIO+0xa2>
   94e80:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   94e84:	d01d      	beq.n	94ec2 <DD_READ_PIO+0x6a>
   94e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   94e8a:	d029      	beq.n	94ee0 <DD_READ_PIO+0x88>
   94e8c:	e035      	b.n	94efa <DD_READ_PIO+0xa2>
   94e8e:	4b1d      	ldr	r3, [pc, #116]	; (94f04 <DD_READ_PIO+0xac>)
   94e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   94e92:	2101      	movs	r1, #1
   94e94:	683a      	ldr	r2, [r7, #0]
   94e96:	fa01 f202 	lsl.w	r2, r1, r2
   94e9a:	4013      	ands	r3, r2
   94e9c:	2b00      	cmp	r3, #0
   94e9e:	d101      	bne.n	94ea4 <DD_READ_PIO+0x4c>
   94ea0:	2300      	movs	r3, #0
   94ea2:	e02a      	b.n	94efa <DD_READ_PIO+0xa2>
   94ea4:	2301      	movs	r3, #1
   94ea6:	e028      	b.n	94efa <DD_READ_PIO+0xa2>
   94ea8:	4b17      	ldr	r3, [pc, #92]	; (94f08 <DD_READ_PIO+0xb0>)
   94eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   94eac:	2101      	movs	r1, #1
   94eae:	683a      	ldr	r2, [r7, #0]
   94eb0:	fa01 f202 	lsl.w	r2, r1, r2
   94eb4:	4013      	ands	r3, r2
   94eb6:	2b00      	cmp	r3, #0
   94eb8:	d101      	bne.n	94ebe <DD_READ_PIO+0x66>
   94eba:	2300      	movs	r3, #0
   94ebc:	e01d      	b.n	94efa <DD_READ_PIO+0xa2>
   94ebe:	2301      	movs	r3, #1
   94ec0:	e01b      	b.n	94efa <DD_READ_PIO+0xa2>
   94ec2:	4b12      	ldr	r3, [pc, #72]	; (94f0c <DD_READ_PIO+0xb4>)
   94ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   94ec6:	2101      	movs	r1, #1
   94ec8:	683a      	ldr	r2, [r7, #0]
   94eca:	fa01 f202 	lsl.w	r2, r1, r2
   94ece:	4013      	ands	r3, r2
   94ed0:	2b00      	cmp	r3, #0
   94ed2:	d101      	bne.n	94ed8 <DD_READ_PIO+0x80>
   94ed4:	2300      	movs	r3, #0
   94ed6:	e010      	b.n	94efa <DD_READ_PIO+0xa2>
   94ed8:	2301      	movs	r3, #1
   94eda:	817b      	strh	r3, [r7, #10]
   94edc:	897b      	ldrh	r3, [r7, #10]
   94ede:	e00c      	b.n	94efa <DD_READ_PIO+0xa2>
   94ee0:	4b0b      	ldr	r3, [pc, #44]	; (94f10 <DD_READ_PIO+0xb8>)
   94ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   94ee4:	2101      	movs	r1, #1
   94ee6:	683a      	ldr	r2, [r7, #0]
   94ee8:	fa01 f202 	lsl.w	r2, r1, r2
   94eec:	4013      	ands	r3, r2
   94eee:	2b00      	cmp	r3, #0
   94ef0:	d101      	bne.n	94ef6 <DD_READ_PIO+0x9e>
   94ef2:	2300      	movs	r3, #0
   94ef4:	e001      	b.n	94efa <DD_READ_PIO+0xa2>
   94ef6:	2301      	movs	r3, #1
   94ef8:	e7ff      	b.n	94efa <DD_READ_PIO+0xa2>
   94efa:	4618      	mov	r0, r3
   94efc:	3714      	adds	r7, #20
   94efe:	46bd      	mov	sp, r7
   94f00:	bc80      	pop	{r7}
   94f02:	4770      	bx	lr
   94f04:	400e0e00 	.word	0x400e0e00
   94f08:	400e1000 	.word	0x400e1000
   94f0c:	400e1200 	.word	0x400e1200
   94f10:	400e1400 	.word	0x400e1400

00094f14 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   94f14:	b480      	push	{r7}
   94f16:	b083      	sub	sp, #12
   94f18:	af00      	add	r7, sp, #0
   94f1a:	4603      	mov	r3, r0
   94f1c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   94f1e:	4909      	ldr	r1, [pc, #36]	; (94f44 <NVIC_ClearPendingIRQ+0x30>)
   94f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
   94f24:	095b      	lsrs	r3, r3, #5
   94f26:	79fa      	ldrb	r2, [r7, #7]
   94f28:	f002 021f 	and.w	r2, r2, #31
   94f2c:	2001      	movs	r0, #1
   94f2e:	fa00 f202 	lsl.w	r2, r0, r2
   94f32:	3360      	adds	r3, #96	; 0x60
   94f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   94f38:	bf00      	nop
   94f3a:	370c      	adds	r7, #12
   94f3c:	46bd      	mov	sp, r7
   94f3e:	bc80      	pop	{r7}
   94f40:	4770      	bx	lr
   94f42:	bf00      	nop
   94f44:	e000e100 	.word	0xe000e100

00094f48 <UART_Handler>:

extern Cl_ReturnCodeType Cl_TimerTickCallback(void);
extern Cl_ReturnCodeType cl_systemtickcallback(void);

void UART_Handler(void)
{
   94f48:	b580      	push	{r7, lr}
   94f4a:	b084      	sub	sp, #16
   94f4c:	af00      	add	r7, sp, #0
	
	char rx_val ;
	uint32_t i,status;
	status= UART->UART_SR;
   94f4e:	4b0b      	ldr	r3, [pc, #44]	; (94f7c <UART_Handler+0x34>)
   94f50:	695b      	ldr	r3, [r3, #20]
   94f52:	60bb      	str	r3, [r7, #8]
//	if(status & 0x01)
	{
		rx_val=UART->UART_RHR;
   94f54:	4b09      	ldr	r3, [pc, #36]	; (94f7c <UART_Handler+0x34>)
   94f56:	699b      	ldr	r3, [r3, #24]
   94f58:	71fb      	strb	r3, [r7, #7]
	
		DD_CONSOLE_RX(rx_val);
   94f5a:	79fb      	ldrb	r3, [r7, #7]
   94f5c:	4618      	mov	r0, r3
   94f5e:	4b08      	ldr	r3, [pc, #32]	; (94f80 <UART_Handler+0x38>)
   94f60:	4798      	blx	r3
	
		for(i=0; i< 0xff;i++)
   94f62:	2300      	movs	r3, #0
   94f64:	60fb      	str	r3, [r7, #12]
   94f66:	e002      	b.n	94f6e <UART_Handler+0x26>
   94f68:	68fb      	ldr	r3, [r7, #12]
   94f6a:	3301      	adds	r3, #1
   94f6c:	60fb      	str	r3, [r7, #12]
   94f6e:	68fb      	ldr	r3, [r7, #12]
   94f70:	2bfe      	cmp	r3, #254	; 0xfe
   94f72:	d9f9      	bls.n	94f68 <UART_Handler+0x20>
		{
			;
		}
	}

}
   94f74:	bf00      	nop
   94f76:	3710      	adds	r7, #16
   94f78:	46bd      	mov	sp, r7
   94f7a:	bd80      	pop	{r7, pc}
   94f7c:	400e0800 	.word	0x400e0800
   94f80:	000969d5 	.word	0x000969d5

00094f84 <TC0_Handler>:


void TC0_Handler()
{
   94f84:	b580      	push	{r7, lr}
   94f86:	b082      	sub	sp, #8
   94f88:	af00      	add	r7, sp, #0
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   94f8a:	2100      	movs	r1, #0
   94f8c:	4807      	ldr	r0, [pc, #28]	; (94fac <TC0_Handler+0x28>)
   94f8e:	4b08      	ldr	r3, [pc, #32]	; (94fb0 <TC0_Handler+0x2c>)
   94f90:	4798      	blx	r3
   94f92:	4603      	mov	r3, r0
   94f94:	f003 0310 	and.w	r3, r3, #16
   94f98:	2b00      	cmp	r3, #0
   94f9a:	d003      	beq.n	94fa4 <TC0_Handler+0x20>
	{
		//printf("i m in handler tc0\n");
		
			Cl_ReturnCodeType RetVal;
			RetVal = Cl_TimerTickCallback();
   94f9c:	4b05      	ldr	r3, [pc, #20]	; (94fb4 <TC0_Handler+0x30>)
   94f9e:	4798      	blx	r3
   94fa0:	4603      	mov	r3, r0
   94fa2:	71fb      	strb	r3, [r7, #7]
	}
}
   94fa4:	bf00      	nop
   94fa6:	3708      	adds	r7, #8
   94fa8:	46bd      	mov	sp, r7
   94faa:	bd80      	pop	{r7, pc}
   94fac:	40080000 	.word	0x40080000
   94fb0:	00098c15 	.word	0x00098c15
   94fb4:	00091995 	.word	0x00091995

00094fb8 <TC6_Handler>:

void TC6_Handler()
{
   94fb8:	b580      	push	{r7, lr}
   94fba:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC6_IRQn);
   94fbc:	2021      	movs	r0, #33	; 0x21
   94fbe:	4b04      	ldr	r3, [pc, #16]	; (94fd0 <TC6_Handler+0x18>)
   94fc0:	4798      	blx	r3
	if ((tc_get_status(TC2, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   94fc2:	2100      	movs	r1, #0
   94fc4:	4803      	ldr	r0, [pc, #12]	; (94fd4 <TC6_Handler+0x1c>)
   94fc6:	4b04      	ldr	r3, [pc, #16]	; (94fd8 <TC6_Handler+0x20>)
   94fc8:	4798      	blx	r3
	{
		//printf("i m in handler tc6\n");
		
	}
}
   94fca:	bf00      	nop
   94fcc:	bd80      	pop	{r7, pc}
   94fce:	bf00      	nop
   94fd0:	00094f15 	.word	0x00094f15
   94fd4:	40088000 	.word	0x40088000
   94fd8:	00098c15 	.word	0x00098c15

00094fdc <TC3_Handler>:
	//printf("inside tc6\n");



void TC3_Handler()
{
   94fdc:	b580      	push	{r7, lr}
   94fde:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC3_IRQn);
   94fe0:	201e      	movs	r0, #30
   94fe2:	4b04      	ldr	r3, [pc, #16]	; (94ff4 <TC3_Handler+0x18>)
   94fe4:	4798      	blx	r3
	if ((tc_get_status(TC1, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   94fe6:	2100      	movs	r1, #0
   94fe8:	4803      	ldr	r0, [pc, #12]	; (94ff8 <TC3_Handler+0x1c>)
   94fea:	4b04      	ldr	r3, [pc, #16]	; (94ffc <TC3_Handler+0x20>)
   94fec:	4798      	blx	r3
	{
		//printf("i m in handler tc3\n");
		
	}
}
   94fee:	bf00      	nop
   94ff0:	bd80      	pop	{r7, pc}
   94ff2:	bf00      	nop
   94ff4:	00094f15 	.word	0x00094f15
   94ff8:	40084000 	.word	0x40084000
   94ffc:	00098c15 	.word	0x00098c15

00095000 <SysTick_Handler>:

void SysTick_Handler(void)
{
   95000:	b580      	push	{r7, lr}
   95002:	b082      	sub	sp, #8
   95004:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType RetVal;
	RetVal = cl_systemtickcallback();
   95006:	4b04      	ldr	r3, [pc, #16]	; (95018 <SysTick_Handler+0x18>)
   95008:	4798      	blx	r3
   9500a:	4603      	mov	r3, r0
   9500c:	71fb      	strb	r3, [r7, #7]
   9500e:	bf00      	nop
   95010:	3708      	adds	r7, #8
   95012:	46bd      	mov	sp, r7
   95014:	bd80      	pop	{r7, pc}
   95016:	bf00      	nop
   95018:	00091e49 	.word	0x00091e49

0009501c <osc_get_rate>:
   9501c:	b480      	push	{r7}
   9501e:	b083      	sub	sp, #12
   95020:	af00      	add	r7, sp, #0
   95022:	6078      	str	r0, [r7, #4]
   95024:	687b      	ldr	r3, [r7, #4]
   95026:	2b07      	cmp	r3, #7
   95028:	d825      	bhi.n	95076 <osc_get_rate+0x5a>
   9502a:	a201      	add	r2, pc, #4	; (adr r2, 95030 <osc_get_rate+0x14>)
   9502c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95030:	00095051 	.word	0x00095051
   95034:	00095057 	.word	0x00095057
   95038:	0009505d 	.word	0x0009505d
   9503c:	00095063 	.word	0x00095063
   95040:	00095067 	.word	0x00095067
   95044:	0009506b 	.word	0x0009506b
   95048:	0009506f 	.word	0x0009506f
   9504c:	00095073 	.word	0x00095073
   95050:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   95054:	e010      	b.n	95078 <osc_get_rate+0x5c>
   95056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   9505a:	e00d      	b.n	95078 <osc_get_rate+0x5c>
   9505c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   95060:	e00a      	b.n	95078 <osc_get_rate+0x5c>
   95062:	4b08      	ldr	r3, [pc, #32]	; (95084 <osc_get_rate+0x68>)
   95064:	e008      	b.n	95078 <osc_get_rate+0x5c>
   95066:	4b08      	ldr	r3, [pc, #32]	; (95088 <osc_get_rate+0x6c>)
   95068:	e006      	b.n	95078 <osc_get_rate+0x5c>
   9506a:	4b08      	ldr	r3, [pc, #32]	; (9508c <osc_get_rate+0x70>)
   9506c:	e004      	b.n	95078 <osc_get_rate+0x5c>
   9506e:	4b07      	ldr	r3, [pc, #28]	; (9508c <osc_get_rate+0x70>)
   95070:	e002      	b.n	95078 <osc_get_rate+0x5c>
   95072:	4b06      	ldr	r3, [pc, #24]	; (9508c <osc_get_rate+0x70>)
   95074:	e000      	b.n	95078 <osc_get_rate+0x5c>
   95076:	2300      	movs	r3, #0
   95078:	4618      	mov	r0, r3
   9507a:	370c      	adds	r7, #12
   9507c:	46bd      	mov	sp, r7
   9507e:	bc80      	pop	{r7}
   95080:	4770      	bx	lr
   95082:	bf00      	nop
   95084:	003d0900 	.word	0x003d0900
   95088:	007a1200 	.word	0x007a1200
   9508c:	00b71b00 	.word	0x00b71b00

00095090 <sysclk_get_main_hz>:
   95090:	b580      	push	{r7, lr}
   95092:	af00      	add	r7, sp, #0
   95094:	2006      	movs	r0, #6
   95096:	4b04      	ldr	r3, [pc, #16]	; (950a8 <sysclk_get_main_hz+0x18>)
   95098:	4798      	blx	r3
   9509a:	4602      	mov	r2, r0
   9509c:	4613      	mov	r3, r2
   9509e:	00db      	lsls	r3, r3, #3
   950a0:	1a9b      	subs	r3, r3, r2
   950a2:	005b      	lsls	r3, r3, #1
   950a4:	4618      	mov	r0, r3
   950a6:	bd80      	pop	{r7, pc}
   950a8:	0009501d 	.word	0x0009501d

000950ac <sysclk_get_cpu_hz>:
   950ac:	b580      	push	{r7, lr}
   950ae:	af00      	add	r7, sp, #0
   950b0:	4b02      	ldr	r3, [pc, #8]	; (950bc <sysclk_get_cpu_hz+0x10>)
   950b2:	4798      	blx	r3
   950b4:	4603      	mov	r3, r0
   950b6:	085b      	lsrs	r3, r3, #1
   950b8:	4618      	mov	r0, r3
   950ba:	bd80      	pop	{r7, pc}
   950bc:	00095091 	.word	0x00095091

000950c0 <sysclk_enable_peripheral_clock>:
   950c0:	b580      	push	{r7, lr}
   950c2:	b082      	sub	sp, #8
   950c4:	af00      	add	r7, sp, #0
   950c6:	6078      	str	r0, [r7, #4]
   950c8:	6878      	ldr	r0, [r7, #4]
   950ca:	4b03      	ldr	r3, [pc, #12]	; (950d8 <sysclk_enable_peripheral_clock+0x18>)
   950cc:	4798      	blx	r3
   950ce:	bf00      	nop
   950d0:	3708      	adds	r7, #8
   950d2:	46bd      	mov	sp, r7
   950d4:	bd80      	pop	{r7, pc}
   950d6:	bf00      	nop
   950d8:	00098af1 	.word	0x00098af1

000950dc <twi_master_setup>:
   950dc:	b580      	push	{r7, lr}
   950de:	b082      	sub	sp, #8
   950e0:	af00      	add	r7, sp, #0
   950e2:	6078      	str	r0, [r7, #4]
   950e4:	6039      	str	r1, [r7, #0]
   950e6:	4b10      	ldr	r3, [pc, #64]	; (95128 <twi_master_setup+0x4c>)
   950e8:	4798      	blx	r3
   950ea:	4602      	mov	r2, r0
   950ec:	683b      	ldr	r3, [r7, #0]
   950ee:	601a      	str	r2, [r3, #0]
   950f0:	683b      	ldr	r3, [r7, #0]
   950f2:	2200      	movs	r2, #0
   950f4:	725a      	strb	r2, [r3, #9]
   950f6:	687b      	ldr	r3, [r7, #4]
   950f8:	4a0c      	ldr	r2, [pc, #48]	; (9512c <twi_master_setup+0x50>)
   950fa:	4293      	cmp	r3, r2
   950fc:	d103      	bne.n	95106 <twi_master_setup+0x2a>
   950fe:	2016      	movs	r0, #22
   95100:	4b0b      	ldr	r3, [pc, #44]	; (95130 <twi_master_setup+0x54>)
   95102:	4798      	blx	r3
   95104:	e006      	b.n	95114 <twi_master_setup+0x38>
   95106:	687b      	ldr	r3, [r7, #4]
   95108:	4a0a      	ldr	r2, [pc, #40]	; (95134 <twi_master_setup+0x58>)
   9510a:	4293      	cmp	r3, r2
   9510c:	d102      	bne.n	95114 <twi_master_setup+0x38>
   9510e:	2017      	movs	r0, #23
   95110:	4b07      	ldr	r3, [pc, #28]	; (95130 <twi_master_setup+0x54>)
   95112:	4798      	blx	r3
   95114:	6839      	ldr	r1, [r7, #0]
   95116:	6878      	ldr	r0, [r7, #4]
   95118:	4b07      	ldr	r3, [pc, #28]	; (95138 <twi_master_setup+0x5c>)
   9511a:	4798      	blx	r3
   9511c:	4603      	mov	r3, r0
   9511e:	4618      	mov	r0, r3
   95120:	3708      	adds	r7, #8
   95122:	46bd      	mov	sp, r7
   95124:	bd80      	pop	{r7, pc}
   95126:	bf00      	nop
   95128:	000950ad 	.word	0x000950ad
   9512c:	4008c000 	.word	0x4008c000
   95130:	000950c1 	.word	0x000950c1
   95134:	40090000 	.word	0x40090000
   95138:	00080629 	.word	0x00080629

0009513c <twi_master_write1>:
   9513c:	b580      	push	{r7, lr}
   9513e:	b086      	sub	sp, #24
   95140:	af00      	add	r7, sp, #0
   95142:	6078      	str	r0, [r7, #4]
   95144:	6039      	str	r1, [r7, #0]
   95146:	4b63      	ldr	r3, [pc, #396]	; (952d4 <twi_master_write1+0x198>)
   95148:	2200      	movs	r2, #0
   9514a:	601a      	str	r2, [r3, #0]
   9514c:	4b62      	ldr	r3, [pc, #392]	; (952d8 <twi_master_write1+0x19c>)
   9514e:	681b      	ldr	r3, [r3, #0]
   95150:	3301      	adds	r3, #1
   95152:	4a61      	ldr	r2, [pc, #388]	; (952d8 <twi_master_write1+0x19c>)
   95154:	6013      	str	r3, [r2, #0]
   95156:	4b60      	ldr	r3, [pc, #384]	; (952d8 <twi_master_write1+0x19c>)
   95158:	681b      	ldr	r3, [r3, #0]
   9515a:	2b01      	cmp	r3, #1
   9515c:	dd04      	ble.n	95168 <twi_master_write1+0x2c>
   9515e:	2200      	movs	r2, #0
   95160:	2100      	movs	r1, #0
   95162:	203d      	movs	r0, #61	; 0x3d
   95164:	4b5d      	ldr	r3, [pc, #372]	; (952dc <twi_master_write1+0x1a0>)
   95166:	4798      	blx	r3
   95168:	495d      	ldr	r1, [pc, #372]	; (952e0 <twi_master_write1+0x1a4>)
   9516a:	485e      	ldr	r0, [pc, #376]	; (952e4 <twi_master_write1+0x1a8>)
   9516c:	4b5e      	ldr	r3, [pc, #376]	; (952e8 <twi_master_write1+0x1ac>)
   9516e:	4798      	blx	r3
   95170:	683b      	ldr	r3, [r7, #0]
   95172:	68db      	ldr	r3, [r3, #12]
   95174:	617b      	str	r3, [r7, #20]
   95176:	683b      	ldr	r3, [r7, #0]
   95178:	689b      	ldr	r3, [r3, #8]
   9517a:	613b      	str	r3, [r7, #16]
   9517c:	4b5b      	ldr	r3, [pc, #364]	; (952ec <twi_master_write1+0x1b0>)
   9517e:	2200      	movs	r2, #0
   95180:	701a      	strb	r2, [r3, #0]
   95182:	697b      	ldr	r3, [r7, #20]
   95184:	2b00      	cmp	r3, #0
   95186:	d104      	bne.n	95192 <twi_master_write1+0x56>
   95188:	4b53      	ldr	r3, [pc, #332]	; (952d8 <twi_master_write1+0x19c>)
   9518a:	2200      	movs	r2, #0
   9518c:	601a      	str	r2, [r3, #0]
   9518e:	2301      	movs	r3, #1
   95190:	e09c      	b.n	952cc <twi_master_write1+0x190>
   95192:	687b      	ldr	r3, [r7, #4]
   95194:	2200      	movs	r2, #0
   95196:	605a      	str	r2, [r3, #4]
   95198:	683b      	ldr	r3, [r7, #0]
   9519a:	7c1b      	ldrb	r3, [r3, #16]
   9519c:	041b      	lsls	r3, r3, #16
   9519e:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   951a2:	683b      	ldr	r3, [r7, #0]
   951a4:	685b      	ldr	r3, [r3, #4]
   951a6:	021b      	lsls	r3, r3, #8
   951a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
   951ac:	431a      	orrs	r2, r3
   951ae:	687b      	ldr	r3, [r7, #4]
   951b0:	605a      	str	r2, [r3, #4]
   951b2:	687b      	ldr	r3, [r7, #4]
   951b4:	2200      	movs	r2, #0
   951b6:	60da      	str	r2, [r3, #12]
   951b8:	683a      	ldr	r2, [r7, #0]
   951ba:	683b      	ldr	r3, [r7, #0]
   951bc:	685b      	ldr	r3, [r3, #4]
   951be:	4619      	mov	r1, r3
   951c0:	4610      	mov	r0, r2
   951c2:	4b4b      	ldr	r3, [pc, #300]	; (952f0 <twi_master_write1+0x1b4>)
   951c4:	4798      	blx	r3
   951c6:	4602      	mov	r2, r0
   951c8:	687b      	ldr	r3, [r7, #4]
   951ca:	60da      	str	r2, [r3, #12]
   951cc:	e033      	b.n	95236 <twi_master_write1+0xfa>
   951ce:	687b      	ldr	r3, [r7, #4]
   951d0:	6a1b      	ldr	r3, [r3, #32]
   951d2:	60fb      	str	r3, [r7, #12]
   951d4:	68fb      	ldr	r3, [r7, #12]
   951d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
   951da:	2b00      	cmp	r3, #0
   951dc:	d007      	beq.n	951ee <twi_master_write1+0xb2>
   951de:	4b43      	ldr	r3, [pc, #268]	; (952ec <twi_master_write1+0x1b0>)
   951e0:	2201      	movs	r2, #1
   951e2:	701a      	strb	r2, [r3, #0]
   951e4:	4b3c      	ldr	r3, [pc, #240]	; (952d8 <twi_master_write1+0x19c>)
   951e6:	2200      	movs	r2, #0
   951e8:	601a      	str	r2, [r3, #0]
   951ea:	2305      	movs	r3, #5
   951ec:	e06e      	b.n	952cc <twi_master_write1+0x190>
   951ee:	68fb      	ldr	r3, [r7, #12]
   951f0:	f003 0304 	and.w	r3, r3, #4
   951f4:	2b00      	cmp	r3, #0
   951f6:	d114      	bne.n	95222 <twi_master_write1+0xe6>
   951f8:	4b36      	ldr	r3, [pc, #216]	; (952d4 <twi_master_write1+0x198>)
   951fa:	681b      	ldr	r3, [r3, #0]
   951fc:	2b03      	cmp	r3, #3
   951fe:	dd1a      	ble.n	95236 <twi_master_write1+0xfa>
   95200:	4b34      	ldr	r3, [pc, #208]	; (952d4 <twi_master_write1+0x198>)
   95202:	2200      	movs	r2, #0
   95204:	601a      	str	r2, [r3, #0]
   95206:	687b      	ldr	r3, [r7, #4]
   95208:	2280      	movs	r2, #128	; 0x80
   9520a:	601a      	str	r2, [r3, #0]
   9520c:	4b39      	ldr	r3, [pc, #228]	; (952f4 <twi_master_write1+0x1b8>)
   9520e:	4798      	blx	r3
   95210:	4933      	ldr	r1, [pc, #204]	; (952e0 <twi_master_write1+0x1a4>)
   95212:	4834      	ldr	r0, [pc, #208]	; (952e4 <twi_master_write1+0x1a8>)
   95214:	4b34      	ldr	r3, [pc, #208]	; (952e8 <twi_master_write1+0x1ac>)
   95216:	4798      	blx	r3
   95218:	4b2f      	ldr	r3, [pc, #188]	; (952d8 <twi_master_write1+0x19c>)
   9521a:	2200      	movs	r2, #0
   9521c:	601a      	str	r2, [r3, #0]
   9521e:	2308      	movs	r3, #8
   95220:	e054      	b.n	952cc <twi_master_write1+0x190>
   95222:	693b      	ldr	r3, [r7, #16]
   95224:	1c5a      	adds	r2, r3, #1
   95226:	613a      	str	r2, [r7, #16]
   95228:	781b      	ldrb	r3, [r3, #0]
   9522a:	461a      	mov	r2, r3
   9522c:	687b      	ldr	r3, [r7, #4]
   9522e:	635a      	str	r2, [r3, #52]	; 0x34
   95230:	697b      	ldr	r3, [r7, #20]
   95232:	3b01      	subs	r3, #1
   95234:	617b      	str	r3, [r7, #20]
   95236:	697b      	ldr	r3, [r7, #20]
   95238:	2b00      	cmp	r3, #0
   9523a:	d1c8      	bne.n	951ce <twi_master_write1+0x92>
   9523c:	687b      	ldr	r3, [r7, #4]
   9523e:	6a1b      	ldr	r3, [r3, #32]
   95240:	60fb      	str	r3, [r7, #12]
   95242:	68fb      	ldr	r3, [r7, #12]
   95244:	f403 7380 	and.w	r3, r3, #256	; 0x100
   95248:	2b00      	cmp	r3, #0
   9524a:	d004      	beq.n	95256 <twi_master_write1+0x11a>
   9524c:	4b22      	ldr	r3, [pc, #136]	; (952d8 <twi_master_write1+0x19c>)
   9524e:	2200      	movs	r2, #0
   95250:	601a      	str	r2, [r3, #0]
   95252:	2305      	movs	r3, #5
   95254:	e03a      	b.n	952cc <twi_master_write1+0x190>
   95256:	68fb      	ldr	r3, [r7, #12]
   95258:	f003 0304 	and.w	r3, r3, #4
   9525c:	2b00      	cmp	r3, #0
   9525e:	d111      	bne.n	95284 <twi_master_write1+0x148>
   95260:	4b1c      	ldr	r3, [pc, #112]	; (952d4 <twi_master_write1+0x198>)
   95262:	681b      	ldr	r3, [r3, #0]
   95264:	2b03      	cmp	r3, #3
   95266:	dde9      	ble.n	9523c <twi_master_write1+0x100>
   95268:	687b      	ldr	r3, [r7, #4]
   9526a:	2280      	movs	r2, #128	; 0x80
   9526c:	601a      	str	r2, [r3, #0]
   9526e:	4b21      	ldr	r3, [pc, #132]	; (952f4 <twi_master_write1+0x1b8>)
   95270:	4798      	blx	r3
   95272:	4b19      	ldr	r3, [pc, #100]	; (952d8 <twi_master_write1+0x19c>)
   95274:	2200      	movs	r2, #0
   95276:	601a      	str	r2, [r3, #0]
   95278:	4919      	ldr	r1, [pc, #100]	; (952e0 <twi_master_write1+0x1a4>)
   9527a:	481a      	ldr	r0, [pc, #104]	; (952e4 <twi_master_write1+0x1a8>)
   9527c:	4b1a      	ldr	r3, [pc, #104]	; (952e8 <twi_master_write1+0x1ac>)
   9527e:	4798      	blx	r3
   95280:	2308      	movs	r3, #8
   95282:	e023      	b.n	952cc <twi_master_write1+0x190>
   95284:	bf00      	nop
   95286:	687b      	ldr	r3, [r7, #4]
   95288:	2202      	movs	r2, #2
   9528a:	601a      	str	r2, [r3, #0]
   9528c:	e014      	b.n	952b8 <twi_master_write1+0x17c>
   9528e:	4b11      	ldr	r3, [pc, #68]	; (952d4 <twi_master_write1+0x198>)
   95290:	681b      	ldr	r3, [r3, #0]
   95292:	2b03      	cmp	r3, #3
   95294:	dd10      	ble.n	952b8 <twi_master_write1+0x17c>
   95296:	4b0f      	ldr	r3, [pc, #60]	; (952d4 <twi_master_write1+0x198>)
   95298:	2200      	movs	r2, #0
   9529a:	601a      	str	r2, [r3, #0]
   9529c:	4b15      	ldr	r3, [pc, #84]	; (952f4 <twi_master_write1+0x1b8>)
   9529e:	4798      	blx	r3
   952a0:	4b0d      	ldr	r3, [pc, #52]	; (952d8 <twi_master_write1+0x19c>)
   952a2:	2200      	movs	r2, #0
   952a4:	601a      	str	r2, [r3, #0]
   952a6:	490e      	ldr	r1, [pc, #56]	; (952e0 <twi_master_write1+0x1a4>)
   952a8:	480e      	ldr	r0, [pc, #56]	; (952e4 <twi_master_write1+0x1a8>)
   952aa:	4b0f      	ldr	r3, [pc, #60]	; (952e8 <twi_master_write1+0x1ac>)
   952ac:	4798      	blx	r3
   952ae:	687b      	ldr	r3, [r7, #4]
   952b0:	2280      	movs	r2, #128	; 0x80
   952b2:	601a      	str	r2, [r3, #0]
   952b4:	2308      	movs	r3, #8
   952b6:	e009      	b.n	952cc <twi_master_write1+0x190>
   952b8:	687b      	ldr	r3, [r7, #4]
   952ba:	6a1b      	ldr	r3, [r3, #32]
   952bc:	f003 0301 	and.w	r3, r3, #1
   952c0:	2b00      	cmp	r3, #0
   952c2:	d0e4      	beq.n	9528e <twi_master_write1+0x152>
   952c4:	4b04      	ldr	r3, [pc, #16]	; (952d8 <twi_master_write1+0x19c>)
   952c6:	2200      	movs	r2, #0
   952c8:	601a      	str	r2, [r3, #0]
   952ca:	2300      	movs	r3, #0
   952cc:	4618      	mov	r0, r3
   952ce:	3718      	adds	r7, #24
   952d0:	46bd      	mov	sp, r7
   952d2:	bd80      	pop	{r7, pc}
   952d4:	20072658 	.word	0x20072658
   952d8:	2007270c 	.word	0x2007270c
   952dc:	00099729 	.word	0x00099729
   952e0:	20070a00 	.word	0x20070a00
   952e4:	4008c000 	.word	0x4008c000
   952e8:	000950dd 	.word	0x000950dd
   952ec:	20072649 	.word	0x20072649
   952f0:	000952f9 	.word	0x000952f9
   952f4:	00095411 	.word	0x00095411

000952f8 <twi_mk_addr>:
   952f8:	b480      	push	{r7}
   952fa:	b085      	sub	sp, #20
   952fc:	af00      	add	r7, sp, #0
   952fe:	6078      	str	r0, [r7, #4]
   95300:	6039      	str	r1, [r7, #0]
   95302:	683b      	ldr	r3, [r7, #0]
   95304:	2b00      	cmp	r3, #0
   95306:	d101      	bne.n	9530c <twi_mk_addr+0x14>
   95308:	2300      	movs	r3, #0
   9530a:	e01d      	b.n	95348 <twi_mk_addr+0x50>
   9530c:	687b      	ldr	r3, [r7, #4]
   9530e:	781b      	ldrb	r3, [r3, #0]
   95310:	60fb      	str	r3, [r7, #12]
   95312:	683b      	ldr	r3, [r7, #0]
   95314:	2b01      	cmp	r3, #1
   95316:	dd09      	ble.n	9532c <twi_mk_addr+0x34>
   95318:	68fb      	ldr	r3, [r7, #12]
   9531a:	021b      	lsls	r3, r3, #8
   9531c:	60fb      	str	r3, [r7, #12]
   9531e:	687b      	ldr	r3, [r7, #4]
   95320:	3301      	adds	r3, #1
   95322:	781b      	ldrb	r3, [r3, #0]
   95324:	461a      	mov	r2, r3
   95326:	68fb      	ldr	r3, [r7, #12]
   95328:	4313      	orrs	r3, r2
   9532a:	60fb      	str	r3, [r7, #12]
   9532c:	683b      	ldr	r3, [r7, #0]
   9532e:	2b02      	cmp	r3, #2
   95330:	dd09      	ble.n	95346 <twi_mk_addr+0x4e>
   95332:	68fb      	ldr	r3, [r7, #12]
   95334:	021b      	lsls	r3, r3, #8
   95336:	60fb      	str	r3, [r7, #12]
   95338:	687b      	ldr	r3, [r7, #4]
   9533a:	3302      	adds	r3, #2
   9533c:	781b      	ldrb	r3, [r3, #0]
   9533e:	461a      	mov	r2, r3
   95340:	68fb      	ldr	r3, [r7, #12]
   95342:	4313      	orrs	r3, r2
   95344:	60fb      	str	r3, [r7, #12]
   95346:	68fb      	ldr	r3, [r7, #12]
   95348:	4618      	mov	r0, r3
   9534a:	3714      	adds	r7, #20
   9534c:	46bd      	mov	sp, r7
   9534e:	bc80      	pop	{r7}
   95350:	4770      	bx	lr
   95352:	bf00      	nop

00095354 <DD_INIT_IIC>:
   95354:	b580      	push	{r7, lr}
   95356:	af00      	add	r7, sp, #0
   95358:	4b06      	ldr	r3, [pc, #24]	; (95374 <DD_INIT_IIC+0x20>)
   9535a:	4a07      	ldr	r2, [pc, #28]	; (95378 <DD_INIT_IIC+0x24>)
   9535c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   95360:	4b04      	ldr	r3, [pc, #16]	; (95374 <DD_INIT_IIC+0x20>)
   95362:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   95366:	605a      	str	r2, [r3, #4]
   95368:	4904      	ldr	r1, [pc, #16]	; (9537c <DD_INIT_IIC+0x28>)
   9536a:	4805      	ldr	r0, [pc, #20]	; (95380 <DD_INIT_IIC+0x2c>)
   9536c:	4b05      	ldr	r3, [pc, #20]	; (95384 <DD_INIT_IIC+0x30>)
   9536e:	4798      	blx	r3
   95370:	bf00      	nop
   95372:	bd80      	pop	{r7, pc}
   95374:	400e0e00 	.word	0x400e0e00
   95378:	50494f00 	.word	0x50494f00
   9537c:	20070a00 	.word	0x20070a00
   95380:	4008c000 	.word	0x4008c000
   95384:	000950dd 	.word	0x000950dd

00095388 <DD_IIC_SET_POT>:
   95388:	b580      	push	{r7, lr}
   9538a:	b088      	sub	sp, #32
   9538c:	af00      	add	r7, sp, #0
   9538e:	4603      	mov	r3, r0
   95390:	460a      	mov	r2, r1
   95392:	71fb      	strb	r3, [r7, #7]
   95394:	4613      	mov	r3, r2
   95396:	80bb      	strh	r3, [r7, #4]
   95398:	4a1a      	ldr	r2, [pc, #104]	; (95404 <DD_IIC_SET_POT+0x7c>)
   9539a:	f107 031c 	add.w	r3, r7, #28
   9539e:	6810      	ldr	r0, [r2, #0]
   953a0:	6018      	str	r0, [r3, #0]
   953a2:	f107 0308 	add.w	r3, r7, #8
   953a6:	2200      	movs	r2, #0
   953a8:	601a      	str	r2, [r3, #0]
   953aa:	605a      	str	r2, [r3, #4]
   953ac:	609a      	str	r2, [r3, #8]
   953ae:	60da      	str	r2, [r3, #12]
   953b0:	611a      	str	r2, [r3, #16]
   953b2:	f107 031c 	add.w	r3, r7, #28
   953b6:	613b      	str	r3, [r7, #16]
   953b8:	2304      	movs	r3, #4
   953ba:	617b      	str	r3, [r7, #20]
   953bc:	79fb      	ldrb	r3, [r7, #7]
   953be:	763b      	strb	r3, [r7, #24]
   953c0:	88bb      	ldrh	r3, [r7, #4]
   953c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   953c6:	d818      	bhi.n	953fa <DD_IIC_SET_POT+0x72>
   953c8:	88bb      	ldrh	r3, [r7, #4]
   953ca:	b2db      	uxtb	r3, r3
   953cc:	77fb      	strb	r3, [r7, #31]
   953ce:	88bb      	ldrh	r3, [r7, #4]
   953d0:	0a1b      	lsrs	r3, r3, #8
   953d2:	b29b      	uxth	r3, r3
   953d4:	b25b      	sxtb	r3, r3
   953d6:	f003 0303 	and.w	r3, r3, #3
   953da:	b25b      	sxtb	r3, r3
   953dc:	f043 0304 	orr.w	r3, r3, #4
   953e0:	b25b      	sxtb	r3, r3
   953e2:	b2db      	uxtb	r3, r3
   953e4:	77bb      	strb	r3, [r7, #30]
   953e6:	f107 031c 	add.w	r3, r7, #28
   953ea:	613b      	str	r3, [r7, #16]
   953ec:	f107 0308 	add.w	r3, r7, #8
   953f0:	4619      	mov	r1, r3
   953f2:	4805      	ldr	r0, [pc, #20]	; (95408 <DD_IIC_SET_POT+0x80>)
   953f4:	4b05      	ldr	r3, [pc, #20]	; (9540c <DD_IIC_SET_POT+0x84>)
   953f6:	4798      	blx	r3
   953f8:	e000      	b.n	953fc <DD_IIC_SET_POT+0x74>
   953fa:	bf00      	nop
   953fc:	3720      	adds	r7, #32
   953fe:	46bd      	mov	sp, r7
   95400:	bd80      	pop	{r7, pc}
   95402:	bf00      	nop
   95404:	000a623c 	.word	0x000a623c
   95408:	4008c000 	.word	0x4008c000
   9540c:	0009513d 	.word	0x0009513d

00095410 <clock_it>:
   95410:	b480      	push	{r7}
   95412:	af00      	add	r7, sp, #0
   95414:	bf00      	nop
   95416:	46bd      	mov	sp, r7
   95418:	bc80      	pop	{r7}
   9541a:	4770      	bx	lr

0009541c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   9541c:	b480      	push	{r7}
   9541e:	b083      	sub	sp, #12
   95420:	af00      	add	r7, sp, #0
   95422:	4603      	mov	r3, r0
   95424:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   95426:	4908      	ldr	r1, [pc, #32]	; (95448 <NVIC_EnableIRQ+0x2c>)
   95428:	f997 3007 	ldrsb.w	r3, [r7, #7]
   9542c:	095b      	lsrs	r3, r3, #5
   9542e:	79fa      	ldrb	r2, [r7, #7]
   95430:	f002 021f 	and.w	r2, r2, #31
   95434:	2001      	movs	r0, #1
   95436:	fa00 f202 	lsl.w	r2, r0, r2
   9543a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   9543e:	bf00      	nop
   95440:	370c      	adds	r7, #12
   95442:	46bd      	mov	sp, r7
   95444:	bc80      	pop	{r7}
   95446:	4770      	bx	lr
   95448:	e000e100 	.word	0xe000e100

0009544c <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   9544c:	b480      	push	{r7}
   9544e:	b083      	sub	sp, #12
   95450:	af00      	add	r7, sp, #0
   95452:	4603      	mov	r3, r0
   95454:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   95456:	4909      	ldr	r1, [pc, #36]	; (9547c <NVIC_DisableIRQ+0x30>)
   95458:	f997 3007 	ldrsb.w	r3, [r7, #7]
   9545c:	095b      	lsrs	r3, r3, #5
   9545e:	79fa      	ldrb	r2, [r7, #7]
   95460:	f002 021f 	and.w	r2, r2, #31
   95464:	2001      	movs	r0, #1
   95466:	fa00 f202 	lsl.w	r2, r0, r2
   9546a:	3320      	adds	r3, #32
   9546c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   95470:	bf00      	nop
   95472:	370c      	adds	r7, #12
   95474:	46bd      	mov	sp, r7
   95476:	bc80      	pop	{r7}
   95478:	4770      	bx	lr
   9547a:	bf00      	nop
   9547c:	e000e100 	.word	0xe000e100

00095480 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   95480:	b480      	push	{r7}
   95482:	b083      	sub	sp, #12
   95484:	af00      	add	r7, sp, #0
   95486:	4603      	mov	r3, r0
   95488:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   9548a:	4909      	ldr	r1, [pc, #36]	; (954b0 <NVIC_ClearPendingIRQ+0x30>)
   9548c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   95490:	095b      	lsrs	r3, r3, #5
   95492:	79fa      	ldrb	r2, [r7, #7]
   95494:	f002 021f 	and.w	r2, r2, #31
   95498:	2001      	movs	r0, #1
   9549a:	fa00 f202 	lsl.w	r2, r0, r2
   9549e:	3360      	adds	r3, #96	; 0x60
   954a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   954a4:	bf00      	nop
   954a6:	370c      	adds	r7, #12
   954a8:	46bd      	mov	sp, r7
   954aa:	bc80      	pop	{r7}
   954ac:	4770      	bx	lr
   954ae:	bf00      	nop
   954b0:	e000e100 	.word	0xe000e100

000954b4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   954b4:	b480      	push	{r7}
   954b6:	b083      	sub	sp, #12
   954b8:	af00      	add	r7, sp, #0
   954ba:	4603      	mov	r3, r0
   954bc:	6039      	str	r1, [r7, #0]
   954be:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   954c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   954c4:	2b00      	cmp	r3, #0
   954c6:	da0b      	bge.n	954e0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   954c8:	490d      	ldr	r1, [pc, #52]	; (95500 <NVIC_SetPriority+0x4c>)
   954ca:	79fb      	ldrb	r3, [r7, #7]
   954cc:	f003 030f 	and.w	r3, r3, #15
   954d0:	3b04      	subs	r3, #4
   954d2:	683a      	ldr	r2, [r7, #0]
   954d4:	b2d2      	uxtb	r2, r2
   954d6:	0112      	lsls	r2, r2, #4
   954d8:	b2d2      	uxtb	r2, r2
   954da:	440b      	add	r3, r1
   954dc:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   954de:	e009      	b.n	954f4 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   954e0:	4908      	ldr	r1, [pc, #32]	; (95504 <NVIC_SetPriority+0x50>)
   954e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
   954e6:	683a      	ldr	r2, [r7, #0]
   954e8:	b2d2      	uxtb	r2, r2
   954ea:	0112      	lsls	r2, r2, #4
   954ec:	b2d2      	uxtb	r2, r2
   954ee:	440b      	add	r3, r1
   954f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   954f4:	bf00      	nop
   954f6:	370c      	adds	r7, #12
   954f8:	46bd      	mov	sp, r7
   954fa:	bc80      	pop	{r7}
   954fc:	4770      	bx	lr
   954fe:	bf00      	nop
   95500:	e000ed00 	.word	0xe000ed00
   95504:	e000e100 	.word	0xe000e100

00095508 <DD_INIT_INT>:
 */ 

#include "DD_INT.h"

void DD_INIT_INT()
{
   95508:	b580      	push	{r7, lr}
   9550a:	af00      	add	r7, sp, #0
	
	
	NVIC_DisableIRQ(UART_IRQn);
   9550c:	2008      	movs	r0, #8
   9550e:	4b2e      	ldr	r3, [pc, #184]	; (955c8 <DD_INIT_INT+0xc0>)
   95510:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   95512:	2008      	movs	r0, #8
   95514:	4b2d      	ldr	r3, [pc, #180]	; (955cc <DD_INIT_INT+0xc4>)
   95516:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn, 0);
   95518:	2100      	movs	r1, #0
   9551a:	2008      	movs	r0, #8
   9551c:	4b2c      	ldr	r3, [pc, #176]	; (955d0 <DD_INIT_INT+0xc8>)
   9551e:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   95520:	2008      	movs	r0, #8
   95522:	4b2c      	ldr	r3, [pc, #176]	; (955d4 <DD_INIT_INT+0xcc>)
   95524:	4798      	blx	r3
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   95526:	2101      	movs	r1, #1
   95528:	482b      	ldr	r0, [pc, #172]	; (955d8 <DD_INIT_INT+0xd0>)
   9552a:	4b2c      	ldr	r3, [pc, #176]	; (955dc <DD_INIT_INT+0xd4>)
   9552c:	4798      	blx	r3
		
	NVIC_DisableIRQ(TC0_IRQn);
   9552e:	201b      	movs	r0, #27
   95530:	4b25      	ldr	r3, [pc, #148]	; (955c8 <DD_INIT_INT+0xc0>)
   95532:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC0_IRQn);
   95534:	201b      	movs	r0, #27
   95536:	4b25      	ldr	r3, [pc, #148]	; (955cc <DD_INIT_INT+0xc4>)
   95538:	4798      	blx	r3
	NVIC_SetPriority(TC0_IRQn, 0);
   9553a:	2100      	movs	r1, #0
   9553c:	201b      	movs	r0, #27
   9553e:	4b24      	ldr	r3, [pc, #144]	; (955d0 <DD_INIT_INT+0xc8>)
   95540:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
   95542:	201b      	movs	r0, #27
   95544:	4b23      	ldr	r3, [pc, #140]	; (955d4 <DD_INIT_INT+0xcc>)
   95546:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC2_IRQn);
	NVIC_ClearPendingIRQ(TC2_IRQn);
	NVIC_SetPriority(TC2_IRQn, 0);*/
	
	NVIC_DisableIRQ(TC3_IRQn);
   95548:	201e      	movs	r0, #30
   9554a:	4b1f      	ldr	r3, [pc, #124]	; (955c8 <DD_INIT_INT+0xc0>)
   9554c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC3_IRQn);
   9554e:	201e      	movs	r0, #30
   95550:	4b1e      	ldr	r3, [pc, #120]	; (955cc <DD_INIT_INT+0xc4>)
   95552:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,0);
   95554:	2100      	movs	r1, #0
   95556:	201e      	movs	r0, #30
   95558:	4b1d      	ldr	r3, [pc, #116]	; (955d0 <DD_INIT_INT+0xc8>)
   9555a:	4798      	blx	r3
	NVIC_EnableIRQ(TC3_IRQn);
   9555c:	201e      	movs	r0, #30
   9555e:	4b1d      	ldr	r3, [pc, #116]	; (955d4 <DD_INIT_INT+0xcc>)
   95560:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC5_IRQn);
	NVIC_ClearPendingIRQ(TC5_IRQn);
	NVIC_SetPriority(TC5_IRQn, 0);
	*/
	NVIC_DisableIRQ(TC6_IRQn);
   95562:	2021      	movs	r0, #33	; 0x21
   95564:	4b18      	ldr	r3, [pc, #96]	; (955c8 <DD_INIT_INT+0xc0>)
   95566:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC6_IRQn);
   95568:	2021      	movs	r0, #33	; 0x21
   9556a:	4b18      	ldr	r3, [pc, #96]	; (955cc <DD_INIT_INT+0xc4>)
   9556c:	4798      	blx	r3
	NVIC_SetPriority(TC6_IRQn, 0);
   9556e:	2100      	movs	r1, #0
   95570:	2021      	movs	r0, #33	; 0x21
   95572:	4b17      	ldr	r3, [pc, #92]	; (955d0 <DD_INIT_INT+0xc8>)
   95574:	4798      	blx	r3
	NVIC_EnableIRQ(TC6_IRQn);
   95576:	2021      	movs	r0, #33	; 0x21
   95578:	4b16      	ldr	r3, [pc, #88]	; (955d4 <DD_INIT_INT+0xcc>)
   9557a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC8_IRQn);
	NVIC_SetPriority(TC8_IRQn, 0);
*/
	
	
	NVIC->ICER[6] = 0xFFFFFFFF;
   9557c:	4b18      	ldr	r3, [pc, #96]	; (955e0 <DD_INIT_INT+0xd8>)
   9557e:	f04f 32ff 	mov.w	r2, #4294967295
   95582:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	NVIC->ICPR[6] = 0XFFFFFFFF;
   95586:	4b16      	ldr	r3, [pc, #88]	; (955e0 <DD_INIT_INT+0xd8>)
   95588:	f04f 32ff 	mov.w	r2, #4294967295
   9558c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	NVIC_SetPriority(TC6_IRQn, 0);
   95590:	2100      	movs	r1, #0
   95592:	2021      	movs	r0, #33	; 0x21
   95594:	4b0e      	ldr	r3, [pc, #56]	; (955d0 <DD_INIT_INT+0xc8>)
   95596:	4798      	blx	r3
	//NVIC_EnableIRQ(TC6_IRQn);
	NVIC->ISER[6] = 0xFFFFFFFF;
   95598:	4b11      	ldr	r3, [pc, #68]	; (955e0 <DD_INIT_INT+0xd8>)
   9559a:	f04f 32ff 	mov.w	r2, #4294967295
   9559e:	619a      	str	r2, [r3, #24]
	
	
	// FOR TIMER2 OF 100ms MEANS 10HZ FREQUENCY
	NVIC->ICER[3] = 0xFFFFFFFF;
   955a0:	4b0f      	ldr	r3, [pc, #60]	; (955e0 <DD_INIT_INT+0xd8>)
   955a2:	f04f 32ff 	mov.w	r2, #4294967295
   955a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	NVIC->ICPR[3] = 0XFFFFFFFF;
   955aa:	4b0d      	ldr	r3, [pc, #52]	; (955e0 <DD_INIT_INT+0xd8>)
   955ac:	f04f 32ff 	mov.w	r2, #4294967295
   955b0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	//NVIC_DisableIRQ(TC3_IRQn);
	//NVIC_ClearPendingIRQ(TC3_IRQn);
	NVIC_SetPriority(TC3_IRQn, 0);
   955b4:	2100      	movs	r1, #0
   955b6:	201e      	movs	r0, #30
   955b8:	4b05      	ldr	r3, [pc, #20]	; (955d0 <DD_INIT_INT+0xc8>)
   955ba:	4798      	blx	r3
	//NVIC_EnableIRQ(TC3_IRQn);
	NVIC->ISER[3] = 0xFFFFFFFF;
   955bc:	4b08      	ldr	r3, [pc, #32]	; (955e0 <DD_INIT_INT+0xd8>)
   955be:	f04f 32ff 	mov.w	r2, #4294967295
   955c2:	60da      	str	r2, [r3, #12]
   955c4:	bf00      	nop
   955c6:	bd80      	pop	{r7, pc}
   955c8:	0009544d 	.word	0x0009544d
   955cc:	00095481 	.word	0x00095481
   955d0:	000954b5 	.word	0x000954b5
   955d4:	0009541d 	.word	0x0009541d
   955d8:	400e0800 	.word	0x400e0800
   955dc:	00098ce1 	.word	0x00098ce1
   955e0:	e000e100 	.word	0xe000e100

000955e4 <DD_INIT_NVM>:
 */ 

#include "DD_NVM.h"

void DD_INIT_NVM()
{
   955e4:	b590      	push	{r4, r7, lr}
   955e6:	b0c7      	sub	sp, #284	; 0x11c
   955e8:	af00      	add	r7, sp, #0
	
	uint32_t ul_last_page_addr = LAST_PAGE_ADDRESS;
   955ea:	4b4b      	ldr	r3, [pc, #300]	; (95718 <DD_INIT_NVM+0x134>)
   955ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint32_t *pul_last_page = (uint32_t *) ul_last_page_addr;
   955f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   955f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t ul_rc;
	uint32_t ul_idx;
	uint8_t uc_key, cnt = 0;
   955f8:	2300      	movs	r3, #0
   955fa:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	
	uint32_t ul_page_buffer[IFLASH_PAGE_SIZE / sizeof(uint32_t)];
	
	
	ul_rc = flash_init(FLASH_ACCESS_MODE_128, 6);
   955fe:	2106      	movs	r1, #6
   95600:	2000      	movs	r0, #0
   95602:	4b46      	ldr	r3, [pc, #280]	; (9571c <DD_INIT_NVM+0x138>)
   95604:	4798      	blx	r3
   95606:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	if (ul_rc != FLASH_RC_OK)
   9560a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   9560e:	2b00      	cmp	r3, #0
   95610:	d176      	bne.n	95700 <DD_INIT_NVM+0x11c>
		
	
	
	/* Unlock page */
	//printf("-I- Unlocking last page: 0x%08x\r\n", ul_last_page_addr);
	ul_rc = flash_unlock(ul_last_page_addr,
   95612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   95616:	f103 01ff 	add.w	r1, r3, #255	; 0xff
   9561a:	2300      	movs	r3, #0
   9561c:	2200      	movs	r2, #0
   9561e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   95622:	4c3f      	ldr	r4, [pc, #252]	; (95720 <DD_INIT_NVM+0x13c>)
   95624:	47a0      	blx	r4
   95626:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
	if (ul_rc != FLASH_RC_OK) {
   9562a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   9562e:	2b00      	cmp	r3, #0
   95630:	d168      	bne.n	95704 <DD_INIT_NVM+0x120>
		return 0;
	}
	
	/* Write page */
	//printf("-I- Writing last page with walking bit pattern\n\r");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++)
   95632:	2300      	movs	r3, #0
   95634:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   95638:	e010      	b.n	9565c <DD_INIT_NVM+0x78>
	 {
		ul_page_buffer[ul_idx] = cnt ;   //1 << (ul_idx % 32);
   9563a:	f897 1113 	ldrb.w	r1, [r7, #275]	; 0x113
   9563e:	463b      	mov	r3, r7
   95640:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
   95644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		cnt ++;
   95648:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
   9564c:	3301      	adds	r3, #1
   9564e:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		return 0;
	}
	
	/* Write page */
	//printf("-I- Writing last page with walking bit pattern\n\r");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++)
   95652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   95656:	3301      	adds	r3, #1
   95658:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   9565c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   95660:	2b3f      	cmp	r3, #63	; 0x3f
   95662:	d9ea      	bls.n	9563a <DD_INIT_NVM+0x56>
// 	}
	
	
	/* Validate page */
	//printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
   95664:	2300      	movs	r3, #0
   95666:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   9566a:	e012      	b.n	95692 <DD_INIT_NVM+0xae>
		//printf(".");
		if (pul_last_page[ul_idx] != ul_page_buffer[ul_idx]) {
   9566c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   95670:	009b      	lsls	r3, r3, #2
   95672:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
   95676:	4413      	add	r3, r2
   95678:	681a      	ldr	r2, [r3, #0]
   9567a:	463b      	mov	r3, r7
   9567c:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
   95680:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   95684:	429a      	cmp	r2, r3
   95686:	d13f      	bne.n	95708 <DD_INIT_NVM+0x124>
// 	}
	
	
	/* Validate page */
	//printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
   95688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   9568c:	3301      	adds	r3, #1
   9568e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   95692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   95696:	2b3f      	cmp	r3, #63	; 0x3f
   95698:	d9e8      	bls.n	9566c <DD_INIT_NVM+0x88>
	
	
	
		/* Lock page */
		//printf("-I- Locking last page\n\r");
		ul_rc = flash_lock(ul_last_page_addr,
   9569a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   9569e:	f103 01ff 	add.w	r1, r3, #255	; 0xff
   956a2:	2300      	movs	r3, #0
   956a4:	2200      	movs	r2, #0
   956a6:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   956aa:	4c1e      	ldr	r4, [pc, #120]	; (95724 <DD_INIT_NVM+0x140>)
   956ac:	47a0      	blx	r4
   956ae:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
		if (ul_rc != FLASH_RC_OK) {
   956b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   956b6:	2b00      	cmp	r3, #0
   956b8:	d128      	bne.n	9570c <DD_INIT_NVM+0x128>
			return 0;
		}

		/* Check if the associated region is locked. */
		//printf("-I- Try to program the locked page ...\n\r");
		ul_rc = flash_write(ul_last_page_addr, ul_page_buffer,
   956ba:	4639      	mov	r1, r7
   956bc:	2301      	movs	r3, #1
   956be:	f44f 7280 	mov.w	r2, #256	; 0x100
   956c2:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   956c6:	4c18      	ldr	r4, [pc, #96]	; (95728 <DD_INIT_NVM+0x144>)
   956c8:	47a0      	blx	r4
   956ca:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		}

		//printf("-I- Please open Segger's JMem program \n\r");
		//printf("-I- Read memory at address 0x%08lx to check contents\n\r",		(UL)ul_last_page_addr);
		//printf("-I- Press any key to continue...\n\r");
		while (0 != uart_read(CONSOLE_UART, &uc_key));
   956ce:	bf00      	nop
   956d0:	f207 1303 	addw	r3, r7, #259	; 0x103
   956d4:	4619      	mov	r1, r3
   956d6:	4815      	ldr	r0, [pc, #84]	; (9572c <DD_INIT_NVM+0x148>)
   956d8:	4b15      	ldr	r3, [pc, #84]	; (95730 <DD_INIT_NVM+0x14c>)
   956da:	4798      	blx	r3
   956dc:	4603      	mov	r3, r0
   956de:	2b00      	cmp	r3, #0
   956e0:	d1f6      	bne.n	956d0 <DD_INIT_NVM+0xec>

		//printf("-I- Good job!\n\r""-I- Now set the security bit \n\r"		"-I- Press any key to continue to see what happened...\n\r");
		while (0 != uart_read(CONSOLE_UART, &uc_key));
   956e2:	bf00      	nop
   956e4:	f207 1303 	addw	r3, r7, #259	; 0x103
   956e8:	4619      	mov	r1, r3
   956ea:	4810      	ldr	r0, [pc, #64]	; (9572c <DD_INIT_NVM+0x148>)
   956ec:	4b10      	ldr	r3, [pc, #64]	; (95730 <DD_INIT_NVM+0x14c>)
   956ee:	4798      	blx	r3
   956f0:	4603      	mov	r3, r0
   956f2:	2b00      	cmp	r3, #0
   956f4:	d1f6      	bne.n	956e4 <DD_INIT_NVM+0x100>
		
		
		/* Set security bit */
		//printf("-I- Setting security bit \n\r");
		ul_rc = flash_enable_security_bit();
   956f6:	4b0f      	ldr	r3, [pc, #60]	; (95734 <DD_INIT_NVM+0x150>)
   956f8:	4798      	blx	r3
   956fa:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
   956fe:	e006      	b.n	9570e <DD_INIT_NVM+0x12a>
	
	ul_rc = flash_init(FLASH_ACCESS_MODE_128, 6);
	if (ul_rc != FLASH_RC_OK)
	 {
	//	printf("-F- Initialization error %lu\n\r", (UL)ul_rc);
		return 0;
   95700:	bf00      	nop
   95702:	e004      	b.n	9570e <DD_INIT_NVM+0x12a>
	//printf("-I- Unlocking last page: 0x%08x\r\n", ul_last_page_addr);
	ul_rc = flash_unlock(ul_last_page_addr,
	ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
	if (ul_rc != FLASH_RC_OK) {
		//printf("-F- Unlock error %lu\n\r", (UL)ul_rc);
		return 0;
   95704:	bf00      	nop
   95706:	e002      	b.n	9570e <DD_INIT_NVM+0x12a>
	//printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
		//printf(".");
		if (pul_last_page[ul_idx] != ul_page_buffer[ul_idx]) {
			//printf("\n\r-F- data error\n\r");
			return 0;
   95708:	bf00      	nop
   9570a:	e000      	b.n	9570e <DD_INIT_NVM+0x12a>
		//printf("-I- Locking last page\n\r");
		ul_rc = flash_lock(ul_last_page_addr,
		ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
		if (ul_rc != FLASH_RC_OK) {
			//printf("-F- Flash locking error %lu\n\r", (UL)ul_rc);
			return 0;
   9570c:	bf00      	nop

		//printf("-I- All tests done\n\r");



}
   9570e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
   95712:	46bd      	mov	sp, r7
   95714:	bd90      	pop	{r4, r7, pc}
   95716:	bf00      	nop
   95718:	000fff00 	.word	0x000fff00
   9571c:	00080965 	.word	0x00080965
   95720:	00080b89 	.word	0x00080b89
   95724:	00080aed 	.word	0x00080aed
   95728:	00080999 	.word	0x00080999
   9572c:	400e0800 	.word	0x400e0800
   95730:	00098d41 	.word	0x00098d41
   95734:	00080ccd 	.word	0x00080ccd

00095738 <DD_INIT_PWM>:

#include "DD_PWM.h"
#include "Platform/Drivers/DD_SYS/DD_SYS.h"

void DD_INIT_PWM()
{
   95738:	b480      	push	{r7}
   9573a:	af00      	add	r7, sp, #0
	PWM->PWM_WPCR = 0x50574D00;
   9573c:	4b2b      	ldr	r3, [pc, #172]	; (957ec <DD_INIT_PWM+0xb4>)
   9573e:	4a2c      	ldr	r2, [pc, #176]	; (957f0 <DD_INIT_PWM+0xb8>)
   95740:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_CH_NUM[0].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   95744:	4b29      	ldr	r3, [pc, #164]	; (957ec <DD_INIT_PWM+0xb4>)
   95746:	4a2b      	ldr	r2, [pc, #172]	; (957f4 <DD_INIT_PWM+0xbc>)
   95748:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	PWM->PWM_CH_NUM[1].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   9574c:	4b27      	ldr	r3, [pc, #156]	; (957ec <DD_INIT_PWM+0xb4>)
   9574e:	4a29      	ldr	r2, [pc, #164]	; (957f4 <DD_INIT_PWM+0xbc>)
   95750:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	PWM->PWM_CH_NUM[2].PWM_CMR= PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   95754:	4b25      	ldr	r3, [pc, #148]	; (957ec <DD_INIT_PWM+0xb4>)
   95756:	4a27      	ldr	r2, [pc, #156]	; (957f4 <DD_INIT_PWM+0xbc>)
   95758:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	//PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_16|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   9575c:	4b23      	ldr	r3, [pc, #140]	; (957ec <DD_INIT_PWM+0xb4>)
   9575e:	4a26      	ldr	r2, [pc, #152]	; (957f8 <DD_INIT_PWM+0xc0>)
   95760:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0


	//PIOC->PIO_ABSR = 0x00E00054;


	PWM->PWM_DIS = 0x000000FF;
   95764:	4b21      	ldr	r3, [pc, #132]	; (957ec <DD_INIT_PWM+0xb4>)
   95766:	22ff      	movs	r2, #255	; 0xff
   95768:	609a      	str	r2, [r3, #8]
	PWM->PWM_CLK = 0X00000A06;
   9576a:	4b20      	ldr	r3, [pc, #128]	; (957ec <DD_INIT_PWM+0xb4>)
   9576c:	f640 2206 	movw	r2, #2566	; 0xa06
   95770:	601a      	str	r2, [r3, #0]
	PWM->PWM_CH_NUM[4].PWM_CMR = 0x0000000B; // selecting CLOCKA
   95772:	4b1e      	ldr	r3, [pc, #120]	; (957ec <DD_INIT_PWM+0xb4>)
   95774:	220b      	movs	r2, #11
   95776:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
// 	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x000001FA;
// 	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x000000FD;
// 	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x000000F8;
// 	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x0000007C;
	PWM->PWM_CH_NUM[4].PWM_CPRD =1000;
   9577a:	4b1c      	ldr	r3, [pc, #112]	; (957ec <DD_INIT_PWM+0xb4>)
   9577c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   95780:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 500;
   95784:	4b19      	ldr	r3, [pc, #100]	; (957ec <DD_INIT_PWM+0xb4>)
   95786:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   9578a:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284


	
	//PWM->PWM_CH_NUM[5].PWM_CPRD = 0x000016b5;
	PWM->PWM_CH_NUM[5].PWM_CPRD = 28000;
   9578e:	4b17      	ldr	r3, [pc, #92]	; (957ec <DD_INIT_PWM+0xb4>)
   95790:	f646 5260 	movw	r2, #28000	; 0x6d60
   95794:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000b5a;
   95798:	4b14      	ldr	r3, [pc, #80]	; (957ec <DD_INIT_PWM+0xb4>)
   9579a:	f640 325a 	movw	r2, #2906	; 0xb5a
   9579e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
//	PWM->PWM_CH_NUM[6].PWM_CPRD = 0x00000600;
//	PWM->PWM_CH_NUM[6].PWM_CDTY = 0x00000200;

	PWM->PWM_CH_NUM[0].PWM_CPRD = 0x00000550;
   957a2:	4b12      	ldr	r3, [pc, #72]	; (957ec <DD_INIT_PWM+0xb4>)
   957a4:	f44f 62aa 	mov.w	r2, #1360	; 0x550
   957a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	//PWM->PWM_CH_NUM[0].PWM_CDTY = 0x00000000;		//0x00000514;     commented on 12-05-2017 to start with zero duty dc motor2
	PWM->PWM_CH_NUM[0].PWM_CDTY = 800;
   957ac:	4b0f      	ldr	r3, [pc, #60]	; (957ec <DD_INIT_PWM+0xb4>)
   957ae:	f44f 7248 	mov.w	r2, #800	; 0x320
   957b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	
	
	
	PWM->PWM_CH_NUM[1].PWM_CPRD = 0x00001000;  // heater
   957b6:	4b0d      	ldr	r3, [pc, #52]	; (957ec <DD_INIT_PWM+0xb4>)
   957b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   957bc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	PWM->PWM_CH_NUM[1].PWM_CDTY = 0x00000800;
   957c0:	4b0a      	ldr	r3, [pc, #40]	; (957ec <DD_INIT_PWM+0xb4>)
   957c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   957c6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	

	PWM->PWM_CH_NUM[2].PWM_CPRD = 0x00000550;
   957ca:	4b08      	ldr	r3, [pc, #32]	; (957ec <DD_INIT_PWM+0xb4>)
   957cc:	f44f 62aa 	mov.w	r2, #1360	; 0x550
   957d0:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	//PWM->PWM_CH_NUM[2].PWM_CDTY = 0x0000038E;
//	PWM->PWM_CH_NUM[2].PWM_CDTY = 0x00000000;		//0x000003B6;     commented on 12-05-2017 to start with zero duty   dc motor1
	PWM->PWM_CH_NUM[2].PWM_CDTY = 800;
   957d4:	4b05      	ldr	r3, [pc, #20]	; (957ec <DD_INIT_PWM+0xb4>)
   957d6:	f44f 7248 	mov.w	r2, #800	; 0x320
   957da:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
//	PWM->PWM_ENA = 0x000000FF;
	PWM->PWM_ENA = 0x00000037;	                    
   957de:	4b03      	ldr	r3, [pc, #12]	; (957ec <DD_INIT_PWM+0xb4>)
   957e0:	2237      	movs	r2, #55	; 0x37
   957e2:	605a      	str	r2, [r3, #4]


	
	
}
   957e4:	bf00      	nop
   957e6:	46bd      	mov	sp, r7
   957e8:	bc80      	pop	{r7}
   957ea:	4770      	bx	lr
   957ec:	40094000 	.word	0x40094000
   957f0:	50574d00 	.word	0x50574d00
   957f4:	00070605 	.word	0x00070605
   957f8:	00070604 	.word	0x00070604

000957fc <DD_SET_DUTY>:


 uint32_t DD_SET_DUTY(const pwm_chnl CHANNEL_NUMBER,uint32_t DUTY)
 {
   957fc:	b480      	push	{r7}
   957fe:	b083      	sub	sp, #12
   95800:	af00      	add	r7, sp, #0
   95802:	4603      	mov	r3, r0
   95804:	6039      	str	r1, [r7, #0]
   95806:	71fb      	strb	r3, [r7, #7]
	// PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CDTYUPD = DUTY;
//	PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRD = 0x800;
	 PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CDTY = DUTY;
   95808:	4a06      	ldr	r2, [pc, #24]	; (95824 <DD_SET_DUTY+0x28>)
   9580a:	79fb      	ldrb	r3, [r7, #7]
   9580c:	3310      	adds	r3, #16
   9580e:	015b      	lsls	r3, r3, #5
   95810:	4413      	add	r3, r2
   95812:	3304      	adds	r3, #4
   95814:	683a      	ldr	r2, [r7, #0]
   95816:	601a      	str	r2, [r3, #0]
	 
	 return 0;
   95818:	2300      	movs	r3, #0
 }
   9581a:	4618      	mov	r0, r3
   9581c:	370c      	adds	r7, #12
   9581e:	46bd      	mov	sp, r7
   95820:	bc80      	pop	{r7}
   95822:	4770      	bx	lr
   95824:	40094000 	.word	0x40094000

00095828 <DD_SET_PRDY>:
 
 uint32_t DD_SET_PRDY(const pwm_chnl CHANNEL_NUMBER,uint32_t PERIOD_VALUE)
 {
   95828:	b480      	push	{r7}
   9582a:	b083      	sub	sp, #12
   9582c:	af00      	add	r7, sp, #0
   9582e:	4603      	mov	r3, r0
   95830:	6039      	str	r1, [r7, #0]
   95832:	71fb      	strb	r3, [r7, #7]
	 PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRDUPD = PERIOD_VALUE;
   95834:	4a06      	ldr	r2, [pc, #24]	; (95850 <DD_SET_PRDY+0x28>)
   95836:	79fb      	ldrb	r3, [r7, #7]
   95838:	015b      	lsls	r3, r3, #5
   9583a:	4413      	add	r3, r2
   9583c:	f503 7304 	add.w	r3, r3, #528	; 0x210
   95840:	683a      	ldr	r2, [r7, #0]
   95842:	601a      	str	r2, [r3, #0]
	// PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRD = PERIOD_VALUE;
	 
	 return 0;
   95844:	2300      	movs	r3, #0
 }
   95846:	4618      	mov	r0, r3
   95848:	370c      	adds	r7, #12
   9584a:	46bd      	mov	sp, r7
   9584c:	bc80      	pop	{r7}
   9584e:	4770      	bx	lr
   95850:	40094000 	.word	0x40094000

00095854 <dd_spi_set_transfer_delay>:
void dd_spi_set_delay_between_chip_select(uint32_t ul_delay) {
	SPI0->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
	SPI0->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
}

void dd_spi_set_transfer_delay(uint16_t ul_pcs_group_id, uint8_t uc_dlybs, uint8_t uc_dlybct)  {
   95854:	b490      	push	{r4, r7}
   95856:	b082      	sub	sp, #8
   95858:	af00      	add	r7, sp, #0
   9585a:	4603      	mov	r3, r0
   9585c:	80fb      	strh	r3, [r7, #6]
   9585e:	460b      	mov	r3, r1
   95860:	717b      	strb	r3, [r7, #5]
   95862:	4613      	mov	r3, r2
   95864:	713b      	strb	r3, [r7, #4]
	SPI0->SPI_CSR[ul_pcs_group_id] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   95866:	4911      	ldr	r1, [pc, #68]	; (958ac <dd_spi_set_transfer_delay+0x58>)
   95868:	88fb      	ldrh	r3, [r7, #6]
   9586a:	4810      	ldr	r0, [pc, #64]	; (958ac <dd_spi_set_transfer_delay+0x58>)
   9586c:	88fa      	ldrh	r2, [r7, #6]
   9586e:	320c      	adds	r2, #12
   95870:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   95874:	b292      	uxth	r2, r2
   95876:	330c      	adds	r3, #12
   95878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_DLYBS(uc_dlybs) | SPI_CSR_DLYBCT(uc_dlybct);
   9587c:	4c0b      	ldr	r4, [pc, #44]	; (958ac <dd_spi_set_transfer_delay+0x58>)
   9587e:	88fb      	ldrh	r3, [r7, #6]
   95880:	490a      	ldr	r1, [pc, #40]	; (958ac <dd_spi_set_transfer_delay+0x58>)
   95882:	88fa      	ldrh	r2, [r7, #6]
   95884:	320c      	adds	r2, #12
   95886:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   9588a:	797a      	ldrb	r2, [r7, #5]
   9588c:	0412      	lsls	r2, r2, #16
   9588e:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   95892:	7938      	ldrb	r0, [r7, #4]
   95894:	0600      	lsls	r0, r0, #24
   95896:	4302      	orrs	r2, r0
   95898:	430a      	orrs	r2, r1
   9589a:	330c      	adds	r3, #12
   9589c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
   958a0:	bf00      	nop
   958a2:	3708      	adds	r7, #8
   958a4:	46bd      	mov	sp, r7
   958a6:	bc90      	pop	{r4, r7}
   958a8:	4770      	bx	lr
   958aa:	bf00      	nop
   958ac:	40008000 	.word	0x40008000

000958b0 <dd_spi_set_bits_per_transfer>:

void dd_spi_set_bits_per_transfer(uint16_t ul_pcs_group_id, uint32_t ul_bits)
{
   958b0:	b480      	push	{r7}
   958b2:	b083      	sub	sp, #12
   958b4:	af00      	add	r7, sp, #0
   958b6:	4603      	mov	r3, r0
   958b8:	6039      	str	r1, [r7, #0]
   958ba:	80fb      	strh	r3, [r7, #6]
	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_BITS_Msk);
   958bc:	490e      	ldr	r1, [pc, #56]	; (958f8 <dd_spi_set_bits_per_transfer+0x48>)
   958be:	88fb      	ldrh	r3, [r7, #6]
   958c0:	480d      	ldr	r0, [pc, #52]	; (958f8 <dd_spi_set_bits_per_transfer+0x48>)
   958c2:	88fa      	ldrh	r2, [r7, #6]
   958c4:	320c      	adds	r2, #12
   958c6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   958ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
   958ce:	330c      	adds	r3, #12
   958d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= ul_bits;
   958d4:	4808      	ldr	r0, [pc, #32]	; (958f8 <dd_spi_set_bits_per_transfer+0x48>)
   958d6:	88fb      	ldrh	r3, [r7, #6]
   958d8:	4907      	ldr	r1, [pc, #28]	; (958f8 <dd_spi_set_bits_per_transfer+0x48>)
   958da:	88fa      	ldrh	r2, [r7, #6]
   958dc:	320c      	adds	r2, #12
   958de:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   958e2:	683a      	ldr	r2, [r7, #0]
   958e4:	430a      	orrs	r2, r1
   958e6:	330c      	adds	r3, #12
   958e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   958ec:	bf00      	nop
   958ee:	370c      	adds	r7, #12
   958f0:	46bd      	mov	sp, r7
   958f2:	bc80      	pop	{r7}
   958f4:	4770      	bx	lr
   958f6:	bf00      	nop
   958f8:	40008000 	.word	0x40008000

000958fc <dd_spi_set_clock_polarity>:
		SPI0->SPI_WPMR =  (0x5350490u << 1);
	}
	
}

void dd_spi_set_clock_polarity(uint16_t ul_pcs_group_id, uint32_t ul_polarity)   {
   958fc:	b480      	push	{r7}
   958fe:	b083      	sub	sp, #12
   95900:	af00      	add	r7, sp, #0
   95902:	4603      	mov	r3, r0
   95904:	6039      	str	r1, [r7, #0]
   95906:	80fb      	strh	r3, [r7, #6]
	
	if (ul_polarity) {
   95908:	683b      	ldr	r3, [r7, #0]
   9590a:	2b00      	cmp	r3, #0
   9590c:	d00c      	beq.n	95928 <dd_spi_set_clock_polarity+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
   9590e:	490f      	ldr	r1, [pc, #60]	; (9594c <dd_spi_set_clock_polarity+0x50>)
   95910:	88fb      	ldrh	r3, [r7, #6]
   95912:	480e      	ldr	r0, [pc, #56]	; (9594c <dd_spi_set_clock_polarity+0x50>)
   95914:	88fa      	ldrh	r2, [r7, #6]
   95916:	320c      	adds	r2, #12
   95918:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   9591c:	f042 0201 	orr.w	r2, r2, #1
   95920:	330c      	adds	r3, #12
   95922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
	}	
}
   95926:	e00b      	b.n	95940 <dd_spi_set_clock_polarity+0x44>
void dd_spi_set_clock_polarity(uint16_t ul_pcs_group_id, uint32_t ul_polarity)   {
	
	if (ul_polarity) {
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
   95928:	4908      	ldr	r1, [pc, #32]	; (9594c <dd_spi_set_clock_polarity+0x50>)
   9592a:	88fb      	ldrh	r3, [r7, #6]
   9592c:	4807      	ldr	r0, [pc, #28]	; (9594c <dd_spi_set_clock_polarity+0x50>)
   9592e:	88fa      	ldrh	r2, [r7, #6]
   95930:	320c      	adds	r2, #12
   95932:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   95936:	f022 0201 	bic.w	r2, r2, #1
   9593a:	330c      	adds	r3, #12
   9593c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}	
}
   95940:	bf00      	nop
   95942:	370c      	adds	r7, #12
   95944:	46bd      	mov	sp, r7
   95946:	bc80      	pop	{r7}
   95948:	4770      	bx	lr
   9594a:	bf00      	nop
   9594c:	40008000 	.word	0x40008000

00095950 <dd_spi_set_clock_phase>:

void dd_spi_set_clock_phase(uint16_t ul_pcs_group_id, uint32_t ul_phase)
{
   95950:	b480      	push	{r7}
   95952:	b083      	sub	sp, #12
   95954:	af00      	add	r7, sp, #0
   95956:	4603      	mov	r3, r0
   95958:	6039      	str	r1, [r7, #0]
   9595a:	80fb      	strh	r3, [r7, #6]
	if (ul_phase) {
   9595c:	683b      	ldr	r3, [r7, #0]
   9595e:	2b00      	cmp	r3, #0
   95960:	d00c      	beq.n	9597c <dd_spi_set_clock_phase+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
   95962:	490f      	ldr	r1, [pc, #60]	; (959a0 <dd_spi_set_clock_phase+0x50>)
   95964:	88fb      	ldrh	r3, [r7, #6]
   95966:	480e      	ldr	r0, [pc, #56]	; (959a0 <dd_spi_set_clock_phase+0x50>)
   95968:	88fa      	ldrh	r2, [r7, #6]
   9596a:	320c      	adds	r2, #12
   9596c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   95970:	f042 0202 	orr.w	r2, r2, #2
   95974:	330c      	adds	r3, #12
   95976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
	}
}
   9597a:	e00b      	b.n	95994 <dd_spi_set_clock_phase+0x44>
void dd_spi_set_clock_phase(uint16_t ul_pcs_group_id, uint32_t ul_phase)
{
	if (ul_phase) {
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
   9597c:	4908      	ldr	r1, [pc, #32]	; (959a0 <dd_spi_set_clock_phase+0x50>)
   9597e:	88fb      	ldrh	r3, [r7, #6]
   95980:	4807      	ldr	r0, [pc, #28]	; (959a0 <dd_spi_set_clock_phase+0x50>)
   95982:	88fa      	ldrh	r2, [r7, #6]
   95984:	320c      	adds	r2, #12
   95986:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   9598a:	f022 0202 	bic.w	r2, r2, #2
   9598e:	330c      	adds	r3, #12
   95990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
   95994:	bf00      	nop
   95996:	370c      	adds	r7, #12
   95998:	46bd      	mov	sp, r7
   9599a:	bc80      	pop	{r7}
   9599c:	4770      	bx	lr
   9599e:	bf00      	nop
   959a0:	40008000 	.word	0x40008000

000959a4 <dd_spi_set_baudrate_div>:

int16_t dd_spi_set_baudrate_div(uint16_t ul_pcs_group_id,uint8_t uc_baudrate_divider)
{
   959a4:	b480      	push	{r7}
   959a6:	b083      	sub	sp, #12
   959a8:	af00      	add	r7, sp, #0
   959aa:	4603      	mov	r3, r0
   959ac:	460a      	mov	r2, r1
   959ae:	80fb      	strh	r3, [r7, #6]
   959b0:	4613      	mov	r3, r2
   959b2:	717b      	strb	r3, [r7, #5]
	/* Programming the SCBR field to 0 is forbidden */
	if (!uc_baudrate_divider)
   959b4:	797b      	ldrb	r3, [r7, #5]
   959b6:	2b00      	cmp	r3, #0
   959b8:	d102      	bne.n	959c0 <dd_spi_set_baudrate_div+0x1c>
	return -1;
   959ba:	f04f 33ff 	mov.w	r3, #4294967295
   959be:	e01a      	b.n	959f6 <dd_spi_set_baudrate_div+0x52>

	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_SCBR_Msk);
   959c0:	490f      	ldr	r1, [pc, #60]	; (95a00 <dd_spi_set_baudrate_div+0x5c>)
   959c2:	88fb      	ldrh	r3, [r7, #6]
   959c4:	480e      	ldr	r0, [pc, #56]	; (95a00 <dd_spi_set_baudrate_div+0x5c>)
   959c6:	88fa      	ldrh	r2, [r7, #6]
   959c8:	320c      	adds	r2, #12
   959ca:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   959ce:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
   959d2:	330c      	adds	r3, #12
   959d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_SCBR(uc_baudrate_divider);
   959d8:	4809      	ldr	r0, [pc, #36]	; (95a00 <dd_spi_set_baudrate_div+0x5c>)
   959da:	88fb      	ldrh	r3, [r7, #6]
   959dc:	4908      	ldr	r1, [pc, #32]	; (95a00 <dd_spi_set_baudrate_div+0x5c>)
   959de:	88fa      	ldrh	r2, [r7, #6]
   959e0:	320c      	adds	r2, #12
   959e2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   959e6:	797a      	ldrb	r2, [r7, #5]
   959e8:	0212      	lsls	r2, r2, #8
   959ea:	b292      	uxth	r2, r2
   959ec:	430a      	orrs	r2, r1
   959ee:	330c      	adds	r3, #12
   959f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	return 0;
   959f4:	2300      	movs	r3, #0
}
   959f6:	4618      	mov	r0, r3
   959f8:	370c      	adds	r7, #12
   959fa:	46bd      	mov	sp, r7
   959fc:	bc80      	pop	{r7}
   959fe:	4770      	bx	lr
   95a00:	40008000 	.word	0x40008000

00095a04 <DD_SPI_SET_POT>:
{
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
	SPI0->SPI_MR |= ((SPI_MR_PCS_Msk & ((pcs_ul_value) << SPI_MR_PCS_Pos)));
}

void DD_SPI_SET_POT(void *p_buf, uint32_t size)  {
   95a04:	b580      	push	{r7, lr}
   95a06:	b086      	sub	sp, #24
   95a08:	af00      	add	r7, sp, #0
   95a0a:	6078      	str	r0, [r7, #4]
   95a0c:	6039      	str	r1, [r7, #0]
	uint8_t uc_pcs;
	static uint16_t data;

	uint16_t *p_buffer;

	p_buffer = p_buf;
   95a0e:	687b      	ldr	r3, [r7, #4]
   95a10:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < size; i++) {
   95a12:	2300      	movs	r3, #0
   95a14:	617b      	str	r3, [r7, #20]
   95a16:	e029      	b.n	95a6c <DD_SPI_SET_POT+0x68>
		dd_spi_write(p_buffer[i]);
   95a18:	697b      	ldr	r3, [r7, #20]
   95a1a:	005b      	lsls	r3, r3, #1
   95a1c:	68fa      	ldr	r2, [r7, #12]
   95a1e:	4413      	add	r3, r2
   95a20:	881b      	ldrh	r3, [r3, #0]
   95a22:	4618      	mov	r0, r3
   95a24:	4b15      	ldr	r3, [pc, #84]	; (95a7c <DD_SPI_SET_POT+0x78>)
   95a26:	4798      	blx	r3
		
		for (uint32_t  j=0;j<10000;j++)
   95a28:	2300      	movs	r3, #0
   95a2a:	613b      	str	r3, [r7, #16]
   95a2c:	e002      	b.n	95a34 <DD_SPI_SET_POT+0x30>
   95a2e:	693b      	ldr	r3, [r7, #16]
   95a30:	3301      	adds	r3, #1
   95a32:	613b      	str	r3, [r7, #16]
   95a34:	693b      	ldr	r3, [r7, #16]
   95a36:	f242 720f 	movw	r2, #9999	; 0x270f
   95a3a:	4293      	cmp	r3, r2
   95a3c:	d9f7      	bls.n	95a2e <DD_SPI_SET_POT+0x2a>
		{
			;
		}
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
   95a3e:	bf00      	nop
   95a40:	4b0f      	ldr	r3, [pc, #60]	; (95a80 <DD_SPI_SET_POT+0x7c>)
   95a42:	691b      	ldr	r3, [r3, #16]
   95a44:	f003 0301 	and.w	r3, r3, #1
   95a48:	2b00      	cmp	r3, #0
   95a4a:	d0f9      	beq.n	95a40 <DD_SPI_SET_POT+0x3c>
		dd_spi_read(&data, &uc_pcs);
   95a4c:	f107 030b 	add.w	r3, r7, #11
   95a50:	4619      	mov	r1, r3
   95a52:	480c      	ldr	r0, [pc, #48]	; (95a84 <DD_SPI_SET_POT+0x80>)
   95a54:	4b0c      	ldr	r3, [pc, #48]	; (95a88 <DD_SPI_SET_POT+0x84>)
   95a56:	4798      	blx	r3
		p_buffer[i] = data;
   95a58:	697b      	ldr	r3, [r7, #20]
   95a5a:	005b      	lsls	r3, r3, #1
   95a5c:	68fa      	ldr	r2, [r7, #12]
   95a5e:	4413      	add	r3, r2
   95a60:	4a08      	ldr	r2, [pc, #32]	; (95a84 <DD_SPI_SET_POT+0x80>)
   95a62:	8812      	ldrh	r2, [r2, #0]
   95a64:	801a      	strh	r2, [r3, #0]

	uint16_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
   95a66:	697b      	ldr	r3, [r7, #20]
   95a68:	3301      	adds	r3, #1
   95a6a:	617b      	str	r3, [r7, #20]
   95a6c:	697a      	ldr	r2, [r7, #20]
   95a6e:	683b      	ldr	r3, [r7, #0]
   95a70:	429a      	cmp	r2, r3
   95a72:	d3d1      	bcc.n	95a18 <DD_SPI_SET_POT+0x14>
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
		dd_spi_read(&data, &uc_pcs);
		p_buffer[i] = data;
	}
}
   95a74:	bf00      	nop
   95a76:	3718      	adds	r7, #24
   95a78:	46bd      	mov	sp, r7
   95a7a:	bd80      	pop	{r7, pc}
   95a7c:	00095afd 	.word	0x00095afd
   95a80:	40008000 	.word	0x40008000
   95a84:	20072712 	.word	0x20072712
   95a88:	00095a8d 	.word	0x00095a8d

00095a8c <dd_spi_read>:

spi_status_t dd_spi_read(uint16_t *us_data, uint8_t *p_pcs) {
   95a8c:	b480      	push	{r7}
   95a8e:	b085      	sub	sp, #20
   95a90:	af00      	add	r7, sp, #0
   95a92:	6078      	str	r0, [r7, #4]
   95a94:	6039      	str	r1, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
   95a96:	f643 2398 	movw	r3, #15000	; 0x3a98
   95a9a:	60fb      	str	r3, [r7, #12]
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   95a9c:	e006      	b.n	95aac <dd_spi_read+0x20>
		if (!timeout--) {
   95a9e:	68fb      	ldr	r3, [r7, #12]
   95aa0:	1e5a      	subs	r2, r3, #1
   95aa2:	60fa      	str	r2, [r7, #12]
   95aa4:	2b00      	cmp	r3, #0
   95aa6:	d101      	bne.n	95aac <dd_spi_read+0x20>
			return SPI_ERROR_TIMEOUT;
   95aa8:	2301      	movs	r3, #1
   95aaa:	e01e      	b.n	95aea <dd_spi_read+0x5e>

spi_status_t dd_spi_read(uint16_t *us_data, uint8_t *p_pcs) {
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   95aac:	4b11      	ldr	r3, [pc, #68]	; (95af4 <dd_spi_read+0x68>)
   95aae:	691b      	ldr	r3, [r3, #16]
   95ab0:	f003 0301 	and.w	r3, r3, #1
   95ab4:	2b00      	cmp	r3, #0
   95ab6:	d0f2      	beq.n	95a9e <dd_spi_read+0x12>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = SPI0->SPI_RDR;
   95ab8:	4b0e      	ldr	r3, [pc, #56]	; (95af4 <dd_spi_read+0x68>)
   95aba:	689b      	ldr	r3, [r3, #8]
   95abc:	4a0e      	ldr	r2, [pc, #56]	; (95af8 <dd_spi_read+0x6c>)
   95abe:	6013      	str	r3, [r2, #0]
	if ((SPI0->SPI_MR & SPI_MR_PS)) {
   95ac0:	4b0c      	ldr	r3, [pc, #48]	; (95af4 <dd_spi_read+0x68>)
   95ac2:	685b      	ldr	r3, [r3, #4]
   95ac4:	f003 0302 	and.w	r3, r3, #2
   95ac8:	2b00      	cmp	r3, #0
   95aca:	d008      	beq.n	95ade <dd_spi_read+0x52>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   95acc:	4b0a      	ldr	r3, [pc, #40]	; (95af8 <dd_spi_read+0x6c>)
   95ace:	681b      	ldr	r3, [r3, #0]
   95ad0:	0c1b      	lsrs	r3, r3, #16
   95ad2:	b2db      	uxtb	r3, r3
   95ad4:	f003 030f 	and.w	r3, r3, #15
   95ad8:	b2da      	uxtb	r2, r3
   95ada:	683b      	ldr	r3, [r7, #0]
   95adc:	701a      	strb	r2, [r3, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   95ade:	4b06      	ldr	r3, [pc, #24]	; (95af8 <dd_spi_read+0x6c>)
   95ae0:	681b      	ldr	r3, [r3, #0]
   95ae2:	b29a      	uxth	r2, r3
   95ae4:	687b      	ldr	r3, [r7, #4]
   95ae6:	801a      	strh	r2, [r3, #0]

	return SPI_OK;
   95ae8:	2300      	movs	r3, #0
}
   95aea:	4618      	mov	r0, r3
   95aec:	3714      	adds	r7, #20
   95aee:	46bd      	mov	sp, r7
   95af0:	bc80      	pop	{r7}
   95af2:	4770      	bx	lr
   95af4:	40008000 	.word	0x40008000
   95af8:	20072714 	.word	0x20072714

00095afc <dd_spi_write>:

spi_status_t dd_spi_write(uint16_t us_data)  {
   95afc:	b480      	push	{r7}
   95afe:	b085      	sub	sp, #20
   95b00:	af00      	add	r7, sp, #0
   95b02:	4603      	mov	r3, r0
   95b04:	80fb      	strh	r3, [r7, #6]
	uint32_t timeout = SPI_TIMEOUT;
   95b06:	f643 2398 	movw	r3, #15000	; 0x3a98
   95b0a:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   95b0c:	e006      	b.n	95b1c <dd_spi_write+0x20>
		if (!timeout--) {
   95b0e:	68fb      	ldr	r3, [r7, #12]
   95b10:	1e5a      	subs	r2, r3, #1
   95b12:	60fa      	str	r2, [r7, #12]
   95b14:	2b00      	cmp	r3, #0
   95b16:	d101      	bne.n	95b1c <dd_spi_write+0x20>
			return SPI_ERROR_TIMEOUT;
   95b18:	2301      	movs	r3, #1
   95b1a:	e00b      	b.n	95b34 <dd_spi_write+0x38>

spi_status_t dd_spi_write(uint16_t us_data)  {
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   95b1c:	4b08      	ldr	r3, [pc, #32]	; (95b40 <dd_spi_write+0x44>)
   95b1e:	691b      	ldr	r3, [r3, #16]
   95b20:	f003 0302 	and.w	r3, r3, #2
   95b24:	2b00      	cmp	r3, #0
   95b26:	d0f2      	beq.n	95b0e <dd_spi_write+0x12>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}
	value = SPI_TDR_TD(us_data);
   95b28:	88fb      	ldrh	r3, [r7, #6]
   95b2a:	60bb      	str	r3, [r7, #8]
	SPI0->SPI_TDR = value;
   95b2c:	4a04      	ldr	r2, [pc, #16]	; (95b40 <dd_spi_write+0x44>)
   95b2e:	68bb      	ldr	r3, [r7, #8]
   95b30:	60d3      	str	r3, [r2, #12]

	return SPI_OK;
   95b32:	2300      	movs	r3, #0
}
   95b34:	4618      	mov	r0, r3
   95b36:	3714      	adds	r7, #20
   95b38:	46bd      	mov	sp, r7
   95b3a:	bc80      	pop	{r7}
   95b3c:	4770      	bx	lr
   95b3e:	bf00      	nop
   95b40:	40008000 	.word	0x40008000

00095b44 <DD_INIT_SPI>:
}
}

//void dd_spi_master_initialize(void)
void DD_INIT_SPI()
{
   95b44:	b580      	push	{r7, lr}
   95b46:	af00      	add	r7, sp, #0
	PIOA->PIO_WPMR = 0x50494F00;
   95b48:	4b38      	ldr	r3, [pc, #224]	; (95c2c <DD_INIT_SPI+0xe8>)
   95b4a:	4a39      	ldr	r2, [pc, #228]	; (95c30 <DD_INIT_SPI+0xec>)
   95b4c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//PIOA->PIO_PER  = 0x10000000;
	//PIOA->PIO_OER  = 0x10000000;         //CS0
	PIOA->PIO_PDR  = 0x1E000000;         //MISO,MOSI,SCK
   95b50:	4b36      	ldr	r3, [pc, #216]	; (95c2c <DD_INIT_SPI+0xe8>)
   95b52:	f04f 52f0 	mov.w	r2, #503316480	; 0x1e000000
   95b56:	605a      	str	r2, [r3, #4]
//	PIOA->PIO_ABSR = 0x00000000;
	
	
	SPI0->SPI_WPMR = 0x53504900;         // SPI_WPMR_WPEN
   95b58:	4b36      	ldr	r3, [pc, #216]	; (95c34 <DD_INIT_SPI+0xf0>)
   95b5a:	4a37      	ldr	r2, [pc, #220]	; (95c38 <DD_INIT_SPI+0xf4>)
   95b5c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//puts("-I- Initialize SPI as master\r");
	//dd_spi_set_writeprotect(0);
	
	PMC->PMC_WPMR = 0x504D4300;
   95b60:	4b36      	ldr	r3, [pc, #216]	; (95c3c <DD_INIT_SPI+0xf8>)
   95b62:	4a37      	ldr	r2, [pc, #220]	; (95c40 <DD_INIT_SPI+0xfc>)
   95b64:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	spi_enable_clock(SPI_MASTER_BASE);
   95b68:	4832      	ldr	r0, [pc, #200]	; (95c34 <DD_INIT_SPI+0xf0>)
   95b6a:	4b36      	ldr	r3, [pc, #216]	; (95c44 <DD_INIT_SPI+0x100>)
   95b6c:	4798      	blx	r3
	
	
	
	SPI0->SPI_CR = SPI_CR_SPIDIS;
   95b6e:	4b31      	ldr	r3, [pc, #196]	; (95c34 <DD_INIT_SPI+0xf0>)
   95b70:	2202      	movs	r2, #2
   95b72:	601a      	str	r2, [r3, #0]
	//spi_disable(SPI_MASTER_BASE);
	
	SPI0->SPI_CR = SPI_CR_SWRST;
   95b74:	4b2f      	ldr	r3, [pc, #188]	; (95c34 <DD_INIT_SPI+0xf0>)
   95b76:	2280      	movs	r2, #128	; 0x80
   95b78:	601a      	str	r2, [r3, #0]
	//spi_reset(SPI_MASTER_BASE);
	
	SPI0->SPI_CR = SPI_CR_LASTXFER;
   95b7a:	4b2e      	ldr	r3, [pc, #184]	; (95c34 <DD_INIT_SPI+0xf0>)
   95b7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   95b80:	601a      	str	r2, [r3, #0]
	//spi_set_lastxfer(SPI_MASTER_BASE);
	
	SPI0->SPI_MR |= SPI_MR_MSTR;
   95b82:	4a2c      	ldr	r2, [pc, #176]	; (95c34 <DD_INIT_SPI+0xf0>)
   95b84:	4b2b      	ldr	r3, [pc, #172]	; (95c34 <DD_INIT_SPI+0xf0>)
   95b86:	685b      	ldr	r3, [r3, #4]
   95b88:	f043 0301 	orr.w	r3, r3, #1
   95b8c:	6053      	str	r3, [r2, #4]
	//spi_set_master_mode(SPI_MASTER_BASE);
	
	SPI0->SPI_MR |= SPI_MR_MODFDIS;
   95b8e:	4a29      	ldr	r2, [pc, #164]	; (95c34 <DD_INIT_SPI+0xf0>)
   95b90:	4b28      	ldr	r3, [pc, #160]	; (95c34 <DD_INIT_SPI+0xf0>)
   95b92:	685b      	ldr	r3, [r3, #4]
   95b94:	f043 0310 	orr.w	r3, r3, #16
   95b98:	6053      	str	r3, [r2, #4]
	
	
	
	
	//chip selection procedure done here
	SPI0->SPI_MR &= (~SPI_MR_PS); // SPI SET FIXED PERIPHERAL.	/ 	SPI0->SPI_MR &= (~SPI_MR_PCSDEC); // The chip selects are directly connected to a peripheral device.
   95b9a:	4a26      	ldr	r2, [pc, #152]	; (95c34 <DD_INIT_SPI+0xf0>)
   95b9c:	4b25      	ldr	r3, [pc, #148]	; (95c34 <DD_INIT_SPI+0xf0>)
   95b9e:	685b      	ldr	r3, [r3, #4]
   95ba0:	f023 0302 	bic.w	r3, r3, #2
   95ba4:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
   95ba6:	4a23      	ldr	r2, [pc, #140]	; (95c34 <DD_INIT_SPI+0xf0>)
   95ba8:	4b22      	ldr	r3, [pc, #136]	; (95c34 <DD_INIT_SPI+0xf0>)
   95baa:	685b      	ldr	r3, [r3, #4]
   95bac:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   95bb0:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR &= (~SPI_MR_PCSDEC);
   95bb2:	4a20      	ldr	r2, [pc, #128]	; (95c34 <DD_INIT_SPI+0xf0>)
   95bb4:	4b1f      	ldr	r3, [pc, #124]	; (95c34 <DD_INIT_SPI+0xf0>)
   95bb6:	685b      	ldr	r3, [r3, #4]
   95bb8:	f023 0304 	bic.w	r3, r3, #4
   95bbc:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR |= SPI_MR_PCS(SPI_CHIP_PCS);
   95bbe:	491d      	ldr	r1, [pc, #116]	; (95c34 <DD_INIT_SPI+0xf0>)
   95bc0:	4b1c      	ldr	r3, [pc, #112]	; (95c34 <DD_INIT_SPI+0xf0>)
   95bc2:	685a      	ldr	r2, [r3, #4]
   95bc4:	4b20      	ldr	r3, [pc, #128]	; (95c48 <DD_INIT_SPI+0x104>)
   95bc6:	781b      	ldrb	r3, [r3, #0]
   95bc8:	4618      	mov	r0, r3
   95bca:	2301      	movs	r3, #1
   95bcc:	4083      	lsls	r3, r0
   95bce:	43db      	mvns	r3, r3
   95bd0:	041b      	lsls	r3, r3, #16
   95bd2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   95bd6:	4313      	orrs	r3, r2
   95bd8:	604b      	str	r3, [r1, #4]
	// 	SPI0->SPI_MR = 0x00000001;
	// 	SPI0->SPI_CSR = 0x10800080;
	
	
	//spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);
	dd_spi_set_clock_polarity(SPI_CHIP_SEL, SPI_CLK_POLARITY_0);
   95bda:	4b1b      	ldr	r3, [pc, #108]	; (95c48 <DD_INIT_SPI+0x104>)
   95bdc:	781b      	ldrb	r3, [r3, #0]
   95bde:	b29b      	uxth	r3, r3
   95be0:	2100      	movs	r1, #0
   95be2:	4618      	mov	r0, r3
   95be4:	4b19      	ldr	r3, [pc, #100]	; (95c4c <DD_INIT_SPI+0x108>)
   95be6:	4798      	blx	r3
	dd_spi_set_clock_phase(SPI_CHIP_SEL, SPI_CLK_PHASE_0);
   95be8:	4b17      	ldr	r3, [pc, #92]	; (95c48 <DD_INIT_SPI+0x104>)
   95bea:	781b      	ldrb	r3, [r3, #0]
   95bec:	b29b      	uxth	r3, r3
   95bee:	2100      	movs	r1, #0
   95bf0:	4618      	mov	r0, r3
   95bf2:	4b17      	ldr	r3, [pc, #92]	; (95c50 <DD_INIT_SPI+0x10c>)
   95bf4:	4798      	blx	r3
	dd_spi_set_bits_per_transfer(SPI_CHIP_SEL,SPI_CSR_BITS_16_BIT);
   95bf6:	4b14      	ldr	r3, [pc, #80]	; (95c48 <DD_INIT_SPI+0x104>)
   95bf8:	781b      	ldrb	r3, [r3, #0]
   95bfa:	b29b      	uxth	r3, r3
   95bfc:	2180      	movs	r1, #128	; 0x80
   95bfe:	4618      	mov	r0, r3
   95c00:	4b14      	ldr	r3, [pc, #80]	; (95c54 <DD_INIT_SPI+0x110>)
   95c02:	4798      	blx	r3
	dd_spi_set_baudrate_div(SPI_CHIP_SEL, 0xff );	//(sysclk_get_peripheral_hz()/ gs_ul_spi_clock)
   95c04:	4b10      	ldr	r3, [pc, #64]	; (95c48 <DD_INIT_SPI+0x104>)
   95c06:	781b      	ldrb	r3, [r3, #0]
   95c08:	b29b      	uxth	r3, r3
   95c0a:	21ff      	movs	r1, #255	; 0xff
   95c0c:	4618      	mov	r0, r3
   95c0e:	4b12      	ldr	r3, [pc, #72]	; (95c58 <DD_INIT_SPI+0x114>)
   95c10:	4798      	blx	r3
	dd_spi_set_transfer_delay(SPI_CHIP_SEL, SPI_DLYBS,SPI_DLYBCT);
   95c12:	4b0d      	ldr	r3, [pc, #52]	; (95c48 <DD_INIT_SPI+0x104>)
   95c14:	781b      	ldrb	r3, [r3, #0]
   95c16:	b29b      	uxth	r3, r3
   95c18:	2210      	movs	r2, #16
   95c1a:	2180      	movs	r1, #128	; 0x80
   95c1c:	4618      	mov	r0, r3
   95c1e:	4b0f      	ldr	r3, [pc, #60]	; (95c5c <DD_INIT_SPI+0x118>)
   95c20:	4798      	blx	r3
	SPI0->SPI_CR = SPI_CR_SPIEN;
   95c22:	4b04      	ldr	r3, [pc, #16]	; (95c34 <DD_INIT_SPI+0xf0>)
   95c24:	2201      	movs	r2, #1
   95c26:	601a      	str	r2, [r3, #0]
}
   95c28:	bf00      	nop
   95c2a:	bd80      	pop	{r7, pc}
   95c2c:	400e0e00 	.word	0x400e0e00
   95c30:	50494f00 	.word	0x50494f00
   95c34:	40008000 	.word	0x40008000
   95c38:	53504900 	.word	0x53504900
   95c3c:	400e0600 	.word	0x400e0600
   95c40:	504d4300 	.word	0x504d4300
   95c44:	000805dd 	.word	0x000805dd
   95c48:	20072710 	.word	0x20072710
   95c4c:	000958fd 	.word	0x000958fd
   95c50:	00095951 	.word	0x00095951
   95c54:	000958b1 	.word	0x000958b1
   95c58:	000959a5 	.word	0x000959a5
   95c5c:	00095855 	.word	0x00095855

00095c60 <DD_ENABLE_BYPASS>:
   95c60:	b580      	push	{r7, lr}
   95c62:	af00      	add	r7, sp, #0
   95c64:	200f      	movs	r0, #15
   95c66:	4b07      	ldr	r3, [pc, #28]	; (95c84 <DD_ENABLE_BYPASS+0x24>)
   95c68:	4798      	blx	r3
   95c6a:	200d      	movs	r0, #13
   95c6c:	4b06      	ldr	r3, [pc, #24]	; (95c88 <DD_ENABLE_BYPASS+0x28>)
   95c6e:	4798      	blx	r3
   95c70:	200e      	movs	r0, #14
   95c72:	4b05      	ldr	r3, [pc, #20]	; (95c88 <DD_ENABLE_BYPASS+0x28>)
   95c74:	4798      	blx	r3
   95c76:	4b05      	ldr	r3, [pc, #20]	; (95c8c <DD_ENABLE_BYPASS+0x2c>)
   95c78:	2201      	movs	r2, #1
   95c7a:	701a      	strb	r2, [r3, #0]
   95c7c:	2300      	movs	r3, #0
   95c7e:	4618      	mov	r0, r3
   95c80:	bd80      	pop	{r7, pc}
   95c82:	bf00      	nop
   95c84:	00096229 	.word	0x00096229
   95c88:	000962f1 	.word	0x000962f1
   95c8c:	2007271e 	.word	0x2007271e

00095c90 <DD_DISABLE_BYPASS>:
   95c90:	b580      	push	{r7, lr}
   95c92:	af00      	add	r7, sp, #0
   95c94:	200f      	movs	r0, #15
   95c96:	4b07      	ldr	r3, [pc, #28]	; (95cb4 <DD_DISABLE_BYPASS+0x24>)
   95c98:	4798      	blx	r3
   95c9a:	200d      	movs	r0, #13
   95c9c:	4b06      	ldr	r3, [pc, #24]	; (95cb8 <DD_DISABLE_BYPASS+0x28>)
   95c9e:	4798      	blx	r3
   95ca0:	200e      	movs	r0, #14
   95ca2:	4b05      	ldr	r3, [pc, #20]	; (95cb8 <DD_DISABLE_BYPASS+0x28>)
   95ca4:	4798      	blx	r3
   95ca6:	4b05      	ldr	r3, [pc, #20]	; (95cbc <DD_DISABLE_BYPASS+0x2c>)
   95ca8:	2200      	movs	r2, #0
   95caa:	701a      	strb	r2, [r3, #0]
   95cac:	2300      	movs	r3, #0
   95cae:	4618      	mov	r0, r3
   95cb0:	bd80      	pop	{r7, pc}
   95cb2:	bf00      	nop
   95cb4:	000962f1 	.word	0x000962f1
   95cb8:	00096229 	.word	0x00096229
   95cbc:	2007271e 	.word	0x2007271e

00095cc0 <DD_ENABLE_LOOPBACK>:
   95cc0:	b580      	push	{r7, lr}
   95cc2:	af00      	add	r7, sp, #0
   95cc4:	4b05      	ldr	r3, [pc, #20]	; (95cdc <DD_ENABLE_LOOPBACK+0x1c>)
   95cc6:	2201      	movs	r2, #1
   95cc8:	701a      	strb	r2, [r3, #0]
   95cca:	2010      	movs	r0, #16
   95ccc:	4b04      	ldr	r3, [pc, #16]	; (95ce0 <DD_ENABLE_LOOPBACK+0x20>)
   95cce:	4798      	blx	r3
   95cd0:	2012      	movs	r0, #18
   95cd2:	4b04      	ldr	r3, [pc, #16]	; (95ce4 <DD_ENABLE_LOOPBACK+0x24>)
   95cd4:	4798      	blx	r3
   95cd6:	2300      	movs	r3, #0
   95cd8:	4618      	mov	r0, r3
   95cda:	bd80      	pop	{r7, pc}
   95cdc:	2007271f 	.word	0x2007271f
   95ce0:	00096229 	.word	0x00096229
   95ce4:	000962f1 	.word	0x000962f1

00095ce8 <DD_DISABLE_LOOPBACK>:
   95ce8:	b580      	push	{r7, lr}
   95cea:	af00      	add	r7, sp, #0
   95cec:	4b05      	ldr	r3, [pc, #20]	; (95d04 <DD_DISABLE_LOOPBACK+0x1c>)
   95cee:	2200      	movs	r2, #0
   95cf0:	701a      	strb	r2, [r3, #0]
   95cf2:	2010      	movs	r0, #16
   95cf4:	4b04      	ldr	r3, [pc, #16]	; (95d08 <DD_DISABLE_LOOPBACK+0x20>)
   95cf6:	4798      	blx	r3
   95cf8:	2012      	movs	r0, #18
   95cfa:	4b04      	ldr	r3, [pc, #16]	; (95d0c <DD_DISABLE_LOOPBACK+0x24>)
   95cfc:	4798      	blx	r3
   95cfe:	2300      	movs	r3, #0
   95d00:	4618      	mov	r0, r3
   95d02:	bd80      	pop	{r7, pc}
   95d04:	2007271f 	.word	0x2007271f
   95d08:	000962f1 	.word	0x000962f1
   95d0c:	00096229 	.word	0x00096229

00095d10 <DD_SET_PUMP>:
   95d10:	b580      	push	{r7, lr}
   95d12:	b084      	sub	sp, #16
   95d14:	af00      	add	r7, sp, #0
   95d16:	4603      	mov	r3, r0
   95d18:	71fb      	strb	r3, [r7, #7]
   95d1a:	79fb      	ldrb	r3, [r7, #7]
   95d1c:	3b01      	subs	r3, #1
   95d1e:	2b04      	cmp	r3, #4
   95d20:	d858      	bhi.n	95dd4 <DD_SET_PUMP+0xc4>
   95d22:	a201      	add	r2, pc, #4	; (adr r2, 95d28 <DD_SET_PUMP+0x18>)
   95d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95d28:	00095d3d 	.word	0x00095d3d
   95d2c:	00095d61 	.word	0x00095d61
   95d30:	00095dd5 	.word	0x00095dd5
   95d34:	00095d85 	.word	0x00095d85
   95d38:	00095dbb 	.word	0x00095dbb
   95d3c:	2314      	movs	r3, #20
   95d3e:	60fb      	str	r3, [r7, #12]
   95d40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   95d44:	60bb      	str	r3, [r7, #8]
   95d46:	4b26      	ldr	r3, [pc, #152]	; (95de0 <DD_SET_PUMP+0xd0>)
   95d48:	2204      	movs	r2, #4
   95d4a:	605a      	str	r2, [r3, #4]
   95d4c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   95d50:	2014      	movs	r0, #20
   95d52:	4b24      	ldr	r3, [pc, #144]	; (95de4 <DD_SET_PUMP+0xd4>)
   95d54:	4798      	blx	r3
   95d56:	68f9      	ldr	r1, [r7, #12]
   95d58:	68b8      	ldr	r0, [r7, #8]
   95d5a:	4b23      	ldr	r3, [pc, #140]	; (95de8 <DD_SET_PUMP+0xd8>)
   95d5c:	4798      	blx	r3
   95d5e:	e039      	b.n	95dd4 <DD_SET_PUMP+0xc4>
   95d60:	2315      	movs	r3, #21
   95d62:	60fb      	str	r3, [r7, #12]
   95d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   95d68:	60bb      	str	r3, [r7, #8]
   95d6a:	4b1d      	ldr	r3, [pc, #116]	; (95de0 <DD_SET_PUMP+0xd0>)
   95d6c:	2201      	movs	r2, #1
   95d6e:	605a      	str	r2, [r3, #4]
   95d70:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   95d74:	2015      	movs	r0, #21
   95d76:	4b1b      	ldr	r3, [pc, #108]	; (95de4 <DD_SET_PUMP+0xd4>)
   95d78:	4798      	blx	r3
   95d7a:	68f9      	ldr	r1, [r7, #12]
   95d7c:	68b8      	ldr	r0, [r7, #8]
   95d7e:	4b1a      	ldr	r3, [pc, #104]	; (95de8 <DD_SET_PUMP+0xd8>)
   95d80:	4798      	blx	r3
   95d82:	e027      	b.n	95dd4 <DD_SET_PUMP+0xc4>
   95d84:	2316      	movs	r3, #22
   95d86:	60fb      	str	r3, [r7, #12]
   95d88:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95d8c:	60bb      	str	r3, [r7, #8]
   95d8e:	68f9      	ldr	r1, [r7, #12]
   95d90:	68b8      	ldr	r0, [r7, #8]
   95d92:	4b16      	ldr	r3, [pc, #88]	; (95dec <DD_SET_PUMP+0xdc>)
   95d94:	4798      	blx	r3
   95d96:	4b12      	ldr	r3, [pc, #72]	; (95de0 <DD_SET_PUMP+0xd0>)
   95d98:	2220      	movs	r2, #32
   95d9a:	605a      	str	r2, [r3, #4]
   95d9c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   95da0:	2056      	movs	r0, #86	; 0x56
   95da2:	4b10      	ldr	r3, [pc, #64]	; (95de4 <DD_SET_PUMP+0xd4>)
   95da4:	4798      	blx	r3
   95da6:	230f      	movs	r3, #15
   95da8:	60fb      	str	r3, [r7, #12]
   95daa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   95dae:	60bb      	str	r3, [r7, #8]
   95db0:	68f9      	ldr	r1, [r7, #12]
   95db2:	68b8      	ldr	r0, [r7, #8]
   95db4:	4b0d      	ldr	r3, [pc, #52]	; (95dec <DD_SET_PUMP+0xdc>)
   95db6:	4798      	blx	r3
   95db8:	e00c      	b.n	95dd4 <DD_SET_PUMP+0xc4>
   95dba:	4b09      	ldr	r3, [pc, #36]	; (95de0 <DD_SET_PUMP+0xd0>)
   95dbc:	2210      	movs	r2, #16
   95dbe:	605a      	str	r2, [r3, #4]
   95dc0:	2302      	movs	r3, #2
   95dc2:	60fb      	str	r3, [r7, #12]
   95dc4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   95dc8:	60bb      	str	r3, [r7, #8]
   95dca:	68f9      	ldr	r1, [r7, #12]
   95dcc:	68b8      	ldr	r0, [r7, #8]
   95dce:	4b07      	ldr	r3, [pc, #28]	; (95dec <DD_SET_PUMP+0xdc>)
   95dd0:	4798      	blx	r3
   95dd2:	bf00      	nop
   95dd4:	2300      	movs	r3, #0
   95dd6:	4618      	mov	r0, r3
   95dd8:	3710      	adds	r7, #16
   95dda:	46bd      	mov	sp, r7
   95ddc:	bd80      	pop	{r7, pc}
   95dde:	bf00      	nop
   95de0:	40094000 	.word	0x40094000
   95de4:	00098571 	.word	0x00098571
   95de8:	00094ccd 	.word	0x00094ccd
   95dec:	00094dd5 	.word	0x00094dd5

00095df0 <DD_SET_HEATER>:
   95df0:	b580      	push	{r7, lr}
   95df2:	b082      	sub	sp, #8
   95df4:	af00      	add	r7, sp, #0
   95df6:	231c      	movs	r3, #28
   95df8:	607b      	str	r3, [r7, #4]
   95dfa:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95dfe:	603b      	str	r3, [r7, #0]
   95e00:	6879      	ldr	r1, [r7, #4]
   95e02:	6838      	ldr	r0, [r7, #0]
   95e04:	4b0d      	ldr	r3, [pc, #52]	; (95e3c <DD_SET_HEATER+0x4c>)
   95e06:	4798      	blx	r3
   95e08:	2064      	movs	r0, #100	; 0x64
   95e0a:	4b0d      	ldr	r3, [pc, #52]	; (95e40 <DD_SET_HEATER+0x50>)
   95e0c:	4798      	blx	r3
   95e0e:	4b0d      	ldr	r3, [pc, #52]	; (95e44 <DD_SET_HEATER+0x54>)
   95e10:	2202      	movs	r2, #2
   95e12:	605a      	str	r2, [r3, #4]
   95e14:	230c      	movs	r3, #12
   95e16:	607b      	str	r3, [r7, #4]
   95e18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   95e1c:	603b      	str	r3, [r7, #0]
   95e1e:	4a0a      	ldr	r2, [pc, #40]	; (95e48 <DD_SET_HEATER+0x58>)
   95e20:	2101      	movs	r1, #1
   95e22:	687b      	ldr	r3, [r7, #4]
   95e24:	fa01 f303 	lsl.w	r3, r1, r3
   95e28:	6053      	str	r3, [r2, #4]
   95e2a:	6879      	ldr	r1, [r7, #4]
   95e2c:	6838      	ldr	r0, [r7, #0]
   95e2e:	4b07      	ldr	r3, [pc, #28]	; (95e4c <DD_SET_HEATER+0x5c>)
   95e30:	4798      	blx	r3
   95e32:	2300      	movs	r3, #0
   95e34:	4618      	mov	r0, r3
   95e36:	3708      	adds	r7, #8
   95e38:	46bd      	mov	sp, r7
   95e3a:	bd80      	pop	{r7, pc}
   95e3c:	00094d51 	.word	0x00094d51
   95e40:	00091e2d 	.word	0x00091e2d
   95e44:	40094000 	.word	0x40094000
   95e48:	400e0e00 	.word	0x400e0e00
   95e4c:	00094ccd 	.word	0x00094ccd

00095e50 <DD_RESET_HEATER>:
   95e50:	b580      	push	{r7, lr}
   95e52:	b082      	sub	sp, #8
   95e54:	af00      	add	r7, sp, #0
   95e56:	4b11      	ldr	r3, [pc, #68]	; (95e9c <DD_RESET_HEATER+0x4c>)
   95e58:	2202      	movs	r2, #2
   95e5a:	609a      	str	r2, [r3, #8]
   95e5c:	230c      	movs	r3, #12
   95e5e:	607b      	str	r3, [r7, #4]
   95e60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   95e64:	603b      	str	r3, [r7, #0]
   95e66:	4a0e      	ldr	r2, [pc, #56]	; (95ea0 <DD_RESET_HEATER+0x50>)
   95e68:	2101      	movs	r1, #1
   95e6a:	687b      	ldr	r3, [r7, #4]
   95e6c:	fa01 f303 	lsl.w	r3, r1, r3
   95e70:	6053      	str	r3, [r2, #4]
   95e72:	6879      	ldr	r1, [r7, #4]
   95e74:	6838      	ldr	r0, [r7, #0]
   95e76:	4b0b      	ldr	r3, [pc, #44]	; (95ea4 <DD_RESET_HEATER+0x54>)
   95e78:	4798      	blx	r3
   95e7a:	2064      	movs	r0, #100	; 0x64
   95e7c:	4b0a      	ldr	r3, [pc, #40]	; (95ea8 <DD_RESET_HEATER+0x58>)
   95e7e:	4798      	blx	r3
   95e80:	231c      	movs	r3, #28
   95e82:	607b      	str	r3, [r7, #4]
   95e84:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95e88:	603b      	str	r3, [r7, #0]
   95e8a:	6879      	ldr	r1, [r7, #4]
   95e8c:	6838      	ldr	r0, [r7, #0]
   95e8e:	4b07      	ldr	r3, [pc, #28]	; (95eac <DD_RESET_HEATER+0x5c>)
   95e90:	4798      	blx	r3
   95e92:	2300      	movs	r3, #0
   95e94:	4618      	mov	r0, r3
   95e96:	3708      	adds	r7, #8
   95e98:	46bd      	mov	sp, r7
   95e9a:	bd80      	pop	{r7, pc}
   95e9c:	40094000 	.word	0x40094000
   95ea0:	400e0e00 	.word	0x400e0e00
   95ea4:	00094c19 	.word	0x00094c19
   95ea8:	00091e2d 	.word	0x00091e2d
   95eac:	00094dd5 	.word	0x00094dd5

00095eb0 <DD_RESET_PUMP>:
   95eb0:	b580      	push	{r7, lr}
   95eb2:	b084      	sub	sp, #16
   95eb4:	af00      	add	r7, sp, #0
   95eb6:	4603      	mov	r3, r0
   95eb8:	71fb      	strb	r3, [r7, #7]
   95eba:	79fb      	ldrb	r3, [r7, #7]
   95ebc:	3b01      	subs	r3, #1
   95ebe:	2b04      	cmp	r3, #4
   95ec0:	d85b      	bhi.n	95f7a <DD_RESET_PUMP+0xca>
   95ec2:	a201      	add	r2, pc, #4	; (adr r2, 95ec8 <DD_RESET_PUMP+0x18>)
   95ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95ec8:	00095edd 	.word	0x00095edd
   95ecc:	00095f09 	.word	0x00095f09
   95ed0:	00095f7b 	.word	0x00095f7b
   95ed4:	00095f35 	.word	0x00095f35
   95ed8:	00095f61 	.word	0x00095f61
   95edc:	2314      	movs	r3, #20
   95ede:	60fb      	str	r3, [r7, #12]
   95ee0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   95ee4:	60bb      	str	r3, [r7, #8]
   95ee6:	4b27      	ldr	r3, [pc, #156]	; (95f84 <DD_RESET_PUMP+0xd4>)
   95ee8:	2204      	movs	r2, #4
   95eea:	609a      	str	r2, [r3, #8]
   95eec:	4b26      	ldr	r3, [pc, #152]	; (95f88 <DD_RESET_PUMP+0xd8>)
   95eee:	4a27      	ldr	r2, [pc, #156]	; (95f8c <DD_RESET_PUMP+0xdc>)
   95ef0:	671a      	str	r2, [r3, #112]	; 0x70
   95ef2:	4a25      	ldr	r2, [pc, #148]	; (95f88 <DD_RESET_PUMP+0xd8>)
   95ef4:	2101      	movs	r1, #1
   95ef6:	68fb      	ldr	r3, [r7, #12]
   95ef8:	fa01 f303 	lsl.w	r3, r1, r3
   95efc:	6053      	str	r3, [r2, #4]
   95efe:	68f9      	ldr	r1, [r7, #12]
   95f00:	68b8      	ldr	r0, [r7, #8]
   95f02:	4b23      	ldr	r3, [pc, #140]	; (95f90 <DD_RESET_PUMP+0xe0>)
   95f04:	4798      	blx	r3
   95f06:	e038      	b.n	95f7a <DD_RESET_PUMP+0xca>
   95f08:	2315      	movs	r3, #21
   95f0a:	60fb      	str	r3, [r7, #12]
   95f0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   95f10:	60bb      	str	r3, [r7, #8]
   95f12:	4b1c      	ldr	r3, [pc, #112]	; (95f84 <DD_RESET_PUMP+0xd4>)
   95f14:	2201      	movs	r2, #1
   95f16:	609a      	str	r2, [r3, #8]
   95f18:	4b1b      	ldr	r3, [pc, #108]	; (95f88 <DD_RESET_PUMP+0xd8>)
   95f1a:	4a1c      	ldr	r2, [pc, #112]	; (95f8c <DD_RESET_PUMP+0xdc>)
   95f1c:	671a      	str	r2, [r3, #112]	; 0x70
   95f1e:	4a1a      	ldr	r2, [pc, #104]	; (95f88 <DD_RESET_PUMP+0xd8>)
   95f20:	2101      	movs	r1, #1
   95f22:	68fb      	ldr	r3, [r7, #12]
   95f24:	fa01 f303 	lsl.w	r3, r1, r3
   95f28:	6053      	str	r3, [r2, #4]
   95f2a:	68f9      	ldr	r1, [r7, #12]
   95f2c:	68b8      	ldr	r0, [r7, #8]
   95f2e:	4b18      	ldr	r3, [pc, #96]	; (95f90 <DD_RESET_PUMP+0xe0>)
   95f30:	4798      	blx	r3
   95f32:	e022      	b.n	95f7a <DD_RESET_PUMP+0xca>
   95f34:	2316      	movs	r3, #22
   95f36:	60fb      	str	r3, [r7, #12]
   95f38:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95f3c:	60bb      	str	r3, [r7, #8]
   95f3e:	68f9      	ldr	r1, [r7, #12]
   95f40:	68b8      	ldr	r0, [r7, #8]
   95f42:	4b13      	ldr	r3, [pc, #76]	; (95f90 <DD_RESET_PUMP+0xe0>)
   95f44:	4798      	blx	r3
   95f46:	4b0f      	ldr	r3, [pc, #60]	; (95f84 <DD_RESET_PUMP+0xd4>)
   95f48:	2220      	movs	r2, #32
   95f4a:	609a      	str	r2, [r3, #8]
   95f4c:	230f      	movs	r3, #15
   95f4e:	60fb      	str	r3, [r7, #12]
   95f50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   95f54:	60bb      	str	r3, [r7, #8]
   95f56:	68f9      	ldr	r1, [r7, #12]
   95f58:	68b8      	ldr	r0, [r7, #8]
   95f5a:	4b0e      	ldr	r3, [pc, #56]	; (95f94 <DD_RESET_PUMP+0xe4>)
   95f5c:	4798      	blx	r3
   95f5e:	e00c      	b.n	95f7a <DD_RESET_PUMP+0xca>
   95f60:	2302      	movs	r3, #2
   95f62:	60fb      	str	r3, [r7, #12]
   95f64:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   95f68:	60bb      	str	r3, [r7, #8]
   95f6a:	68f9      	ldr	r1, [r7, #12]
   95f6c:	68b8      	ldr	r0, [r7, #8]
   95f6e:	4b09      	ldr	r3, [pc, #36]	; (95f94 <DD_RESET_PUMP+0xe4>)
   95f70:	4798      	blx	r3
   95f72:	4b04      	ldr	r3, [pc, #16]	; (95f84 <DD_RESET_PUMP+0xd4>)
   95f74:	2210      	movs	r2, #16
   95f76:	609a      	str	r2, [r3, #8]
   95f78:	bf00      	nop
   95f7a:	2300      	movs	r3, #0
   95f7c:	4618      	mov	r0, r3
   95f7e:	3710      	adds	r7, #16
   95f80:	46bd      	mov	sp, r7
   95f82:	bd80      	pop	{r7, pc}
   95f84:	40094000 	.word	0x40094000
   95f88:	400e0e00 	.word	0x400e0e00
   95f8c:	00391000 	.word	0x00391000
   95f90:	00094c19 	.word	0x00094c19
   95f94:	00094d51 	.word	0x00094d51

00095f98 <DD_SET_SPEED>:
   95f98:	b580      	push	{r7, lr}
   95f9a:	b086      	sub	sp, #24
   95f9c:	af00      	add	r7, sp, #0
   95f9e:	4603      	mov	r3, r0
   95fa0:	6039      	str	r1, [r7, #0]
   95fa2:	71fb      	strb	r3, [r7, #7]
   95fa4:	79fb      	ldrb	r3, [r7, #7]
   95fa6:	3b01      	subs	r3, #1
   95fa8:	2b04      	cmp	r3, #4
   95faa:	f200 8082 	bhi.w	960b2 <DD_SET_SPEED+0x11a>
   95fae:	a201      	add	r2, pc, #4	; (adr r2, 95fb4 <DD_SET_SPEED+0x1c>)
   95fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95fb4:	00095fc9 	.word	0x00095fc9
   95fb8:	00095fdd 	.word	0x00095fdd
   95fbc:	00095ff1 	.word	0x00095ff1
   95fc0:	00096073 	.word	0x00096073
   95fc4:	00096093 	.word	0x00096093
   95fc8:	2302      	movs	r3, #2
   95fca:	73fb      	strb	r3, [r7, #15]
   95fcc:	683b      	ldr	r3, [r7, #0]
   95fce:	613b      	str	r3, [r7, #16]
   95fd0:	7bfb      	ldrb	r3, [r7, #15]
   95fd2:	6939      	ldr	r1, [r7, #16]
   95fd4:	4618      	mov	r0, r3
   95fd6:	4b39      	ldr	r3, [pc, #228]	; (960bc <DD_SET_SPEED+0x124>)
   95fd8:	4798      	blx	r3
   95fda:	e06a      	b.n	960b2 <DD_SET_SPEED+0x11a>
   95fdc:	2300      	movs	r3, #0
   95fde:	73fb      	strb	r3, [r7, #15]
   95fe0:	683b      	ldr	r3, [r7, #0]
   95fe2:	613b      	str	r3, [r7, #16]
   95fe4:	7bfb      	ldrb	r3, [r7, #15]
   95fe6:	6939      	ldr	r1, [r7, #16]
   95fe8:	4618      	mov	r0, r3
   95fea:	4b34      	ldr	r3, [pc, #208]	; (960bc <DD_SET_SPEED+0x124>)
   95fec:	4798      	blx	r3
   95fee:	e060      	b.n	960b2 <DD_SET_SPEED+0x11a>
   95ff0:	683b      	ldr	r3, [r7, #0]
   95ff2:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   95ff6:	d01c      	beq.n	96032 <DD_SET_SPEED+0x9a>
   95ff8:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   95ffc:	d804      	bhi.n	96008 <DD_SET_SPEED+0x70>
   95ffe:	2bc8      	cmp	r3, #200	; 0xc8
   96000:	d009      	beq.n	96016 <DD_SET_SPEED+0x7e>
   96002:	2bf0      	cmp	r3, #240	; 0xf0
   96004:	d00e      	beq.n	96024 <DD_SET_SPEED+0x8c>
   96006:	e029      	b.n	9605c <DD_SET_SPEED+0xc4>
   96008:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
   9600c:	d018      	beq.n	96040 <DD_SET_SPEED+0xa8>
   9600e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
   96012:	d01c      	beq.n	9604e <DD_SET_SPEED+0xb6>
   96014:	e022      	b.n	9605c <DD_SET_SPEED+0xc4>
   96016:	f44f 73b8 	mov.w	r3, #368	; 0x170
   9601a:	613b      	str	r3, [r7, #16]
   9601c:	f240 3375 	movw	r3, #885	; 0x375
   96020:	617b      	str	r3, [r7, #20]
   96022:	e01b      	b.n	9605c <DD_SET_SPEED+0xc4>
   96024:	f44f 73a8 	mov.w	r3, #336	; 0x150
   96028:	613b      	str	r3, [r7, #16]
   9602a:	f44f 7340 	mov.w	r3, #768	; 0x300
   9602e:	617b      	str	r3, [r7, #20]
   96030:	e014      	b.n	9605c <DD_SET_SPEED+0xc4>
   96032:	f44f 7398 	mov.w	r3, #304	; 0x130
   96036:	613b      	str	r3, [r7, #16]
   96038:	f44f 7320 	mov.w	r3, #640	; 0x280
   9603c:	617b      	str	r3, [r7, #20]
   9603e:	e00d      	b.n	9605c <DD_SET_SPEED+0xc4>
   96040:	f44f 7390 	mov.w	r3, #288	; 0x120
   96044:	613b      	str	r3, [r7, #16]
   96046:	f44f 7314 	mov.w	r3, #592	; 0x250
   9604a:	617b      	str	r3, [r7, #20]
   9604c:	e006      	b.n	9605c <DD_SET_SPEED+0xc4>
   9604e:	f44f 7388 	mov.w	r3, #272	; 0x110
   96052:	613b      	str	r3, [r7, #16]
   96054:	f44f 7304 	mov.w	r3, #528	; 0x210
   96058:	617b      	str	r3, [r7, #20]
   9605a:	bf00      	nop
   9605c:	7bfb      	ldrb	r3, [r7, #15]
   9605e:	6939      	ldr	r1, [r7, #16]
   96060:	4618      	mov	r0, r3
   96062:	4b16      	ldr	r3, [pc, #88]	; (960bc <DD_SET_SPEED+0x124>)
   96064:	4798      	blx	r3
   96066:	7bfb      	ldrb	r3, [r7, #15]
   96068:	6979      	ldr	r1, [r7, #20]
   9606a:	4618      	mov	r0, r3
   9606c:	4b14      	ldr	r3, [pc, #80]	; (960c0 <DD_SET_SPEED+0x128>)
   9606e:	4798      	blx	r3
   96070:	e01f      	b.n	960b2 <DD_SET_SPEED+0x11a>
   96072:	2305      	movs	r3, #5
   96074:	73fb      	strb	r3, [r7, #15]
   96076:	683b      	ldr	r3, [r7, #0]
   96078:	085b      	lsrs	r3, r3, #1
   9607a:	613b      	str	r3, [r7, #16]
   9607c:	7bfb      	ldrb	r3, [r7, #15]
   9607e:	6939      	ldr	r1, [r7, #16]
   96080:	4618      	mov	r0, r3
   96082:	4b0e      	ldr	r3, [pc, #56]	; (960bc <DD_SET_SPEED+0x124>)
   96084:	4798      	blx	r3
   96086:	7bfb      	ldrb	r3, [r7, #15]
   96088:	6839      	ldr	r1, [r7, #0]
   9608a:	4618      	mov	r0, r3
   9608c:	4b0c      	ldr	r3, [pc, #48]	; (960c0 <DD_SET_SPEED+0x128>)
   9608e:	4798      	blx	r3
   96090:	e00f      	b.n	960b2 <DD_SET_SPEED+0x11a>
   96092:	2304      	movs	r3, #4
   96094:	73fb      	strb	r3, [r7, #15]
   96096:	683b      	ldr	r3, [r7, #0]
   96098:	085b      	lsrs	r3, r3, #1
   9609a:	613b      	str	r3, [r7, #16]
   9609c:	7bfb      	ldrb	r3, [r7, #15]
   9609e:	6939      	ldr	r1, [r7, #16]
   960a0:	4618      	mov	r0, r3
   960a2:	4b06      	ldr	r3, [pc, #24]	; (960bc <DD_SET_SPEED+0x124>)
   960a4:	4798      	blx	r3
   960a6:	7bfb      	ldrb	r3, [r7, #15]
   960a8:	6839      	ldr	r1, [r7, #0]
   960aa:	4618      	mov	r0, r3
   960ac:	4b04      	ldr	r3, [pc, #16]	; (960c0 <DD_SET_SPEED+0x128>)
   960ae:	4798      	blx	r3
   960b0:	bf00      	nop
   960b2:	2300      	movs	r3, #0
   960b4:	4618      	mov	r0, r3
   960b6:	3718      	adds	r7, #24
   960b8:	46bd      	mov	sp, r7
   960ba:	bd80      	pop	{r7, pc}
   960bc:	000957fd 	.word	0x000957fd
   960c0:	00095829 	.word	0x00095829

000960c4 <DD_SET_PUMPFREQ>:
   960c4:	b580      	push	{r7, lr}
   960c6:	b084      	sub	sp, #16
   960c8:	af00      	add	r7, sp, #0
   960ca:	4603      	mov	r3, r0
   960cc:	6039      	str	r1, [r7, #0]
   960ce:	71fb      	strb	r3, [r7, #7]
   960d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   960d4:	60fb      	str	r3, [r7, #12]
   960d6:	683b      	ldr	r3, [r7, #0]
   960d8:	60fb      	str	r3, [r7, #12]
   960da:	79fb      	ldrb	r3, [r7, #7]
   960dc:	2b01      	cmp	r3, #1
   960de:	d002      	beq.n	960e6 <DD_SET_PUMPFREQ+0x22>
   960e0:	2b02      	cmp	r3, #2
   960e2:	d008      	beq.n	960f6 <DD_SET_PUMPFREQ+0x32>
   960e4:	e00f      	b.n	96106 <DD_SET_PUMPFREQ+0x42>
   960e6:	2302      	movs	r3, #2
   960e8:	72fb      	strb	r3, [r7, #11]
   960ea:	7afb      	ldrb	r3, [r7, #11]
   960ec:	68f9      	ldr	r1, [r7, #12]
   960ee:	4618      	mov	r0, r3
   960f0:	4b07      	ldr	r3, [pc, #28]	; (96110 <DD_SET_PUMPFREQ+0x4c>)
   960f2:	4798      	blx	r3
   960f4:	e007      	b.n	96106 <DD_SET_PUMPFREQ+0x42>
   960f6:	2300      	movs	r3, #0
   960f8:	72fb      	strb	r3, [r7, #11]
   960fa:	7afb      	ldrb	r3, [r7, #11]
   960fc:	68f9      	ldr	r1, [r7, #12]
   960fe:	4618      	mov	r0, r3
   96100:	4b03      	ldr	r3, [pc, #12]	; (96110 <DD_SET_PUMPFREQ+0x4c>)
   96102:	4798      	blx	r3
   96104:	bf00      	nop
   96106:	2300      	movs	r3, #0
   96108:	4618      	mov	r0, r3
   9610a:	3710      	adds	r7, #16
   9610c:	46bd      	mov	sp, r7
   9610e:	bd80      	pop	{r7, pc}
   96110:	00095829 	.word	0x00095829

00096114 <DD_CHNG_HTR>:
   96114:	b580      	push	{r7, lr}
   96116:	b084      	sub	sp, #16
   96118:	af00      	add	r7, sp, #0
   9611a:	6078      	str	r0, [r7, #4]
   9611c:	2301      	movs	r3, #1
   9611e:	73fb      	strb	r3, [r7, #15]
   96120:	7bfb      	ldrb	r3, [r7, #15]
   96122:	6879      	ldr	r1, [r7, #4]
   96124:	4618      	mov	r0, r3
   96126:	4b03      	ldr	r3, [pc, #12]	; (96134 <DD_CHNG_HTR+0x20>)
   96128:	4798      	blx	r3
   9612a:	2300      	movs	r3, #0
   9612c:	4618      	mov	r0, r3
   9612e:	3710      	adds	r7, #16
   96130:	46bd      	mov	sp, r7
   96132:	bd80      	pop	{r7, pc}
   96134:	000957fd 	.word	0x000957fd

00096138 <DD_SET_DIR>:
   96138:	b580      	push	{r7, lr}
   9613a:	b082      	sub	sp, #8
   9613c:	af00      	add	r7, sp, #0
   9613e:	2301      	movs	r3, #1
   96140:	607b      	str	r3, [r7, #4]
   96142:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   96146:	603b      	str	r3, [r7, #0]
   96148:	6879      	ldr	r1, [r7, #4]
   9614a:	6838      	ldr	r0, [r7, #0]
   9614c:	4b03      	ldr	r3, [pc, #12]	; (9615c <DD_SET_DIR+0x24>)
   9614e:	4798      	blx	r3
   96150:	2300      	movs	r3, #0
   96152:	4618      	mov	r0, r3
   96154:	3708      	adds	r7, #8
   96156:	46bd      	mov	sp, r7
   96158:	bd80      	pop	{r7, pc}
   9615a:	bf00      	nop
   9615c:	00094d51 	.word	0x00094d51

00096160 <DD_RESET_DIR>:
   96160:	b580      	push	{r7, lr}
   96162:	b082      	sub	sp, #8
   96164:	af00      	add	r7, sp, #0
   96166:	2301      	movs	r3, #1
   96168:	607b      	str	r3, [r7, #4]
   9616a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9616e:	603b      	str	r3, [r7, #0]
   96170:	6879      	ldr	r1, [r7, #4]
   96172:	6838      	ldr	r0, [r7, #0]
   96174:	4b03      	ldr	r3, [pc, #12]	; (96184 <DD_RESET_DIR+0x24>)
   96176:	4798      	blx	r3
   96178:	2300      	movs	r3, #0
   9617a:	4618      	mov	r0, r3
   9617c:	3708      	adds	r7, #8
   9617e:	46bd      	mov	sp, r7
   96180:	bd80      	pop	{r7, pc}
   96182:	bf00      	nop
   96184:	00094dd5 	.word	0x00094dd5

00096188 <DD_SET_RED>:
   96188:	b580      	push	{r7, lr}
   9618a:	af00      	add	r7, sp, #0
   9618c:	201e      	movs	r0, #30
   9618e:	4b02      	ldr	r3, [pc, #8]	; (96198 <DD_SET_RED+0x10>)
   96190:	4798      	blx	r3
   96192:	2300      	movs	r3, #0
   96194:	4618      	mov	r0, r3
   96196:	bd80      	pop	{r7, pc}
   96198:	00096229 	.word	0x00096229

0009619c <DD_SET_GREEN>:
   9619c:	b580      	push	{r7, lr}
   9619e:	af00      	add	r7, sp, #0
   961a0:	2020      	movs	r0, #32
   961a2:	4b02      	ldr	r3, [pc, #8]	; (961ac <DD_SET_GREEN+0x10>)
   961a4:	4798      	blx	r3
   961a6:	2300      	movs	r3, #0
   961a8:	4618      	mov	r0, r3
   961aa:	bd80      	pop	{r7, pc}
   961ac:	00096229 	.word	0x00096229

000961b0 <DD_SET_YELLOW>:
   961b0:	b580      	push	{r7, lr}
   961b2:	af00      	add	r7, sp, #0
   961b4:	201f      	movs	r0, #31
   961b6:	4b02      	ldr	r3, [pc, #8]	; (961c0 <DD_SET_YELLOW+0x10>)
   961b8:	4798      	blx	r3
   961ba:	2300      	movs	r3, #0
   961bc:	4618      	mov	r0, r3
   961be:	bd80      	pop	{r7, pc}
   961c0:	00096229 	.word	0x00096229

000961c4 <DD_SET_BUZZER>:
   961c4:	b580      	push	{r7, lr}
   961c6:	af00      	add	r7, sp, #0
   961c8:	201d      	movs	r0, #29
   961ca:	4b02      	ldr	r3, [pc, #8]	; (961d4 <DD_SET_BUZZER+0x10>)
   961cc:	4798      	blx	r3
   961ce:	2300      	movs	r3, #0
   961d0:	4618      	mov	r0, r3
   961d2:	bd80      	pop	{r7, pc}
   961d4:	00096229 	.word	0x00096229

000961d8 <DD_RESET_RED>:
   961d8:	b580      	push	{r7, lr}
   961da:	af00      	add	r7, sp, #0
   961dc:	201e      	movs	r0, #30
   961de:	4b02      	ldr	r3, [pc, #8]	; (961e8 <DD_RESET_RED+0x10>)
   961e0:	4798      	blx	r3
   961e2:	2300      	movs	r3, #0
   961e4:	4618      	mov	r0, r3
   961e6:	bd80      	pop	{r7, pc}
   961e8:	000962f1 	.word	0x000962f1

000961ec <DD_RESET_GREEN>:
   961ec:	b580      	push	{r7, lr}
   961ee:	af00      	add	r7, sp, #0
   961f0:	2020      	movs	r0, #32
   961f2:	4b02      	ldr	r3, [pc, #8]	; (961fc <DD_RESET_GREEN+0x10>)
   961f4:	4798      	blx	r3
   961f6:	2300      	movs	r3, #0
   961f8:	4618      	mov	r0, r3
   961fa:	bd80      	pop	{r7, pc}
   961fc:	000962f1 	.word	0x000962f1

00096200 <DD_RESET_YELLOW>:
   96200:	b580      	push	{r7, lr}
   96202:	af00      	add	r7, sp, #0
   96204:	201f      	movs	r0, #31
   96206:	4b02      	ldr	r3, [pc, #8]	; (96210 <DD_RESET_YELLOW+0x10>)
   96208:	4798      	blx	r3
   9620a:	2300      	movs	r3, #0
   9620c:	4618      	mov	r0, r3
   9620e:	bd80      	pop	{r7, pc}
   96210:	000962f1 	.word	0x000962f1

00096214 <DD_RESET_BUZZER>:
   96214:	b580      	push	{r7, lr}
   96216:	af00      	add	r7, sp, #0
   96218:	201d      	movs	r0, #29
   9621a:	4b02      	ldr	r3, [pc, #8]	; (96224 <DD_RESET_BUZZER+0x10>)
   9621c:	4798      	blx	r3
   9621e:	2300      	movs	r3, #0
   96220:	4618      	mov	r0, r3
   96222:	bd80      	pop	{r7, pc}
   96224:	000962f1 	.word	0x000962f1

00096228 <DD_SET_VALVE>:
   96228:	b580      	push	{r7, lr}
   9622a:	b082      	sub	sp, #8
   9622c:	af00      	add	r7, sp, #0
   9622e:	4603      	mov	r3, r0
   96230:	71fb      	strb	r3, [r7, #7]
   96232:	79fb      	ldrb	r3, [r7, #7]
   96234:	2b00      	cmp	r3, #0
   96236:	d015      	beq.n	96264 <DD_SET_VALVE+0x3c>
   96238:	79fb      	ldrb	r3, [r7, #7]
   9623a:	2b10      	cmp	r3, #16
   9623c:	d812      	bhi.n	96264 <DD_SET_VALVE+0x3c>
   9623e:	79fb      	ldrb	r3, [r7, #7]
   96240:	3b01      	subs	r3, #1
   96242:	2201      	movs	r2, #1
   96244:	fa02 f303 	lsl.w	r3, r2, r3
   96248:	b21a      	sxth	r2, r3
   9624a:	4b21      	ldr	r3, [pc, #132]	; (962d0 <DD_SET_VALVE+0xa8>)
   9624c:	881b      	ldrh	r3, [r3, #0]
   9624e:	b21b      	sxth	r3, r3
   96250:	4313      	orrs	r3, r2
   96252:	b21b      	sxth	r3, r3
   96254:	b29a      	uxth	r2, r3
   96256:	4b1e      	ldr	r3, [pc, #120]	; (962d0 <DD_SET_VALVE+0xa8>)
   96258:	801a      	strh	r2, [r3, #0]
   9625a:	4b1e      	ldr	r3, [pc, #120]	; (962d4 <DD_SET_VALVE+0xac>)
   9625c:	4798      	blx	r3
   9625e:	4b1e      	ldr	r3, [pc, #120]	; (962d8 <DD_SET_VALVE+0xb0>)
   96260:	4798      	blx	r3
   96262:	e030      	b.n	962c6 <DD_SET_VALVE+0x9e>
   96264:	79fb      	ldrb	r3, [r7, #7]
   96266:	2b10      	cmp	r3, #16
   96268:	d915      	bls.n	96296 <DD_SET_VALVE+0x6e>
   9626a:	79fb      	ldrb	r3, [r7, #7]
   9626c:	2b16      	cmp	r3, #22
   9626e:	d812      	bhi.n	96296 <DD_SET_VALVE+0x6e>
   96270:	79fb      	ldrb	r3, [r7, #7]
   96272:	3b11      	subs	r3, #17
   96274:	2201      	movs	r2, #1
   96276:	fa02 f303 	lsl.w	r3, r2, r3
   9627a:	b21a      	sxth	r2, r3
   9627c:	4b17      	ldr	r3, [pc, #92]	; (962dc <DD_SET_VALVE+0xb4>)
   9627e:	881b      	ldrh	r3, [r3, #0]
   96280:	b21b      	sxth	r3, r3
   96282:	4313      	orrs	r3, r2
   96284:	b21b      	sxth	r3, r3
   96286:	b29a      	uxth	r2, r3
   96288:	4b14      	ldr	r3, [pc, #80]	; (962dc <DD_SET_VALVE+0xb4>)
   9628a:	801a      	strh	r2, [r3, #0]
   9628c:	4b14      	ldr	r3, [pc, #80]	; (962e0 <DD_SET_VALVE+0xb8>)
   9628e:	4798      	blx	r3
   96290:	4b14      	ldr	r3, [pc, #80]	; (962e4 <DD_SET_VALVE+0xbc>)
   96292:	4798      	blx	r3
   96294:	e017      	b.n	962c6 <DD_SET_VALVE+0x9e>
   96296:	79fb      	ldrb	r3, [r7, #7]
   96298:	2b1c      	cmp	r3, #28
   9629a:	d914      	bls.n	962c6 <DD_SET_VALVE+0x9e>
   9629c:	79fb      	ldrb	r3, [r7, #7]
   9629e:	2b20      	cmp	r3, #32
   962a0:	d811      	bhi.n	962c6 <DD_SET_VALVE+0x9e>
   962a2:	79fb      	ldrb	r3, [r7, #7]
   962a4:	3b11      	subs	r3, #17
   962a6:	2201      	movs	r2, #1
   962a8:	fa02 f303 	lsl.w	r3, r2, r3
   962ac:	b21a      	sxth	r2, r3
   962ae:	4b0e      	ldr	r3, [pc, #56]	; (962e8 <DD_SET_VALVE+0xc0>)
   962b0:	881b      	ldrh	r3, [r3, #0]
   962b2:	b21b      	sxth	r3, r3
   962b4:	4313      	orrs	r3, r2
   962b6:	b21b      	sxth	r3, r3
   962b8:	b29a      	uxth	r2, r3
   962ba:	4b0b      	ldr	r3, [pc, #44]	; (962e8 <DD_SET_VALVE+0xc0>)
   962bc:	801a      	strh	r2, [r3, #0]
   962be:	4b0b      	ldr	r3, [pc, #44]	; (962ec <DD_SET_VALVE+0xc4>)
   962c0:	4798      	blx	r3
   962c2:	4b08      	ldr	r3, [pc, #32]	; (962e4 <DD_SET_VALVE+0xbc>)
   962c4:	4798      	blx	r3
   962c6:	2300      	movs	r3, #0
   962c8:	4618      	mov	r0, r3
   962ca:	3708      	adds	r7, #8
   962cc:	46bd      	mov	sp, r7
   962ce:	bd80      	pop	{r7, pc}
   962d0:	20072718 	.word	0x20072718
   962d4:	000963f5 	.word	0x000963f5
   962d8:	00097095 	.word	0x00097095
   962dc:	2007271a 	.word	0x2007271a
   962e0:	00096581 	.word	0x00096581
   962e4:	000970dd 	.word	0x000970dd
   962e8:	2007271c 	.word	0x2007271c
   962ec:	00096629 	.word	0x00096629

000962f0 <DD_RESET_VALVE>:
   962f0:	b580      	push	{r7, lr}
   962f2:	b082      	sub	sp, #8
   962f4:	af00      	add	r7, sp, #0
   962f6:	4603      	mov	r3, r0
   962f8:	71fb      	strb	r3, [r7, #7]
   962fa:	79fb      	ldrb	r3, [r7, #7]
   962fc:	2b01      	cmp	r3, #1
   962fe:	d104      	bne.n	9630a <DD_RESET_VALVE+0x1a>
   96300:	2206      	movs	r2, #6
   96302:	4932      	ldr	r1, [pc, #200]	; (963cc <DD_RESET_VALVE+0xdc>)
   96304:	2018      	movs	r0, #24
   96306:	4b32      	ldr	r3, [pc, #200]	; (963d0 <DD_RESET_VALVE+0xe0>)
   96308:	4798      	blx	r3
   9630a:	79fb      	ldrb	r3, [r7, #7]
   9630c:	2b00      	cmp	r3, #0
   9630e:	d01b      	beq.n	96348 <DD_RESET_VALVE+0x58>
   96310:	79fb      	ldrb	r3, [r7, #7]
   96312:	2b10      	cmp	r3, #16
   96314:	d818      	bhi.n	96348 <DD_RESET_VALVE+0x58>
   96316:	79fb      	ldrb	r3, [r7, #7]
   96318:	3b01      	subs	r3, #1
   9631a:	2201      	movs	r2, #1
   9631c:	fa02 f303 	lsl.w	r3, r2, r3
   96320:	b21b      	sxth	r3, r3
   96322:	43db      	mvns	r3, r3
   96324:	b21a      	sxth	r2, r3
   96326:	4b2b      	ldr	r3, [pc, #172]	; (963d4 <DD_RESET_VALVE+0xe4>)
   96328:	881b      	ldrh	r3, [r3, #0]
   9632a:	b21b      	sxth	r3, r3
   9632c:	4013      	ands	r3, r2
   9632e:	b21b      	sxth	r3, r3
   96330:	b29a      	uxth	r2, r3
   96332:	4b28      	ldr	r3, [pc, #160]	; (963d4 <DD_RESET_VALVE+0xe4>)
   96334:	801a      	strh	r2, [r3, #0]
   96336:	4b27      	ldr	r3, [pc, #156]	; (963d4 <DD_RESET_VALVE+0xe4>)
   96338:	881a      	ldrh	r2, [r3, #0]
   9633a:	4b26      	ldr	r3, [pc, #152]	; (963d4 <DD_RESET_VALVE+0xe4>)
   9633c:	801a      	strh	r2, [r3, #0]
   9633e:	4b26      	ldr	r3, [pc, #152]	; (963d8 <DD_RESET_VALVE+0xe8>)
   96340:	4798      	blx	r3
   96342:	4b26      	ldr	r3, [pc, #152]	; (963dc <DD_RESET_VALVE+0xec>)
   96344:	4798      	blx	r3
   96346:	e03c      	b.n	963c2 <DD_RESET_VALVE+0xd2>
   96348:	79fb      	ldrb	r3, [r7, #7]
   9634a:	2b10      	cmp	r3, #16
   9634c:	d91b      	bls.n	96386 <DD_RESET_VALVE+0x96>
   9634e:	79fb      	ldrb	r3, [r7, #7]
   96350:	2b16      	cmp	r3, #22
   96352:	d818      	bhi.n	96386 <DD_RESET_VALVE+0x96>
   96354:	79fb      	ldrb	r3, [r7, #7]
   96356:	3b11      	subs	r3, #17
   96358:	2201      	movs	r2, #1
   9635a:	fa02 f303 	lsl.w	r3, r2, r3
   9635e:	b21b      	sxth	r3, r3
   96360:	43db      	mvns	r3, r3
   96362:	b21a      	sxth	r2, r3
   96364:	4b1e      	ldr	r3, [pc, #120]	; (963e0 <DD_RESET_VALVE+0xf0>)
   96366:	881b      	ldrh	r3, [r3, #0]
   96368:	b21b      	sxth	r3, r3
   9636a:	4013      	ands	r3, r2
   9636c:	b21b      	sxth	r3, r3
   9636e:	b29a      	uxth	r2, r3
   96370:	4b1b      	ldr	r3, [pc, #108]	; (963e0 <DD_RESET_VALVE+0xf0>)
   96372:	801a      	strh	r2, [r3, #0]
   96374:	4b1a      	ldr	r3, [pc, #104]	; (963e0 <DD_RESET_VALVE+0xf0>)
   96376:	881a      	ldrh	r2, [r3, #0]
   96378:	4b19      	ldr	r3, [pc, #100]	; (963e0 <DD_RESET_VALVE+0xf0>)
   9637a:	801a      	strh	r2, [r3, #0]
   9637c:	4b19      	ldr	r3, [pc, #100]	; (963e4 <DD_RESET_VALVE+0xf4>)
   9637e:	4798      	blx	r3
   96380:	4b19      	ldr	r3, [pc, #100]	; (963e8 <DD_RESET_VALVE+0xf8>)
   96382:	4798      	blx	r3
   96384:	e01d      	b.n	963c2 <DD_RESET_VALVE+0xd2>
   96386:	79fb      	ldrb	r3, [r7, #7]
   96388:	2b1c      	cmp	r3, #28
   9638a:	d91a      	bls.n	963c2 <DD_RESET_VALVE+0xd2>
   9638c:	79fb      	ldrb	r3, [r7, #7]
   9638e:	2b20      	cmp	r3, #32
   96390:	d817      	bhi.n	963c2 <DD_RESET_VALVE+0xd2>
   96392:	79fb      	ldrb	r3, [r7, #7]
   96394:	3b11      	subs	r3, #17
   96396:	2201      	movs	r2, #1
   96398:	fa02 f303 	lsl.w	r3, r2, r3
   9639c:	b21b      	sxth	r3, r3
   9639e:	43db      	mvns	r3, r3
   963a0:	b21a      	sxth	r2, r3
   963a2:	4b12      	ldr	r3, [pc, #72]	; (963ec <DD_RESET_VALVE+0xfc>)
   963a4:	881b      	ldrh	r3, [r3, #0]
   963a6:	b21b      	sxth	r3, r3
   963a8:	4013      	ands	r3, r2
   963aa:	b21b      	sxth	r3, r3
   963ac:	b29a      	uxth	r2, r3
   963ae:	4b0f      	ldr	r3, [pc, #60]	; (963ec <DD_RESET_VALVE+0xfc>)
   963b0:	801a      	strh	r2, [r3, #0]
   963b2:	4b0e      	ldr	r3, [pc, #56]	; (963ec <DD_RESET_VALVE+0xfc>)
   963b4:	881a      	ldrh	r2, [r3, #0]
   963b6:	4b0d      	ldr	r3, [pc, #52]	; (963ec <DD_RESET_VALVE+0xfc>)
   963b8:	801a      	strh	r2, [r3, #0]
   963ba:	4b0d      	ldr	r3, [pc, #52]	; (963f0 <DD_RESET_VALVE+0x100>)
   963bc:	4798      	blx	r3
   963be:	4b0a      	ldr	r3, [pc, #40]	; (963e8 <DD_RESET_VALVE+0xf8>)
   963c0:	4798      	blx	r3
   963c2:	2300      	movs	r3, #0
   963c4:	4618      	mov	r0, r3
   963c6:	3708      	adds	r7, #8
   963c8:	46bd      	mov	sp, r7
   963ca:	bd80      	pop	{r7, pc}
   963cc:	000a6240 	.word	0x000a6240
   963d0:	00099729 	.word	0x00099729
   963d4:	20072718 	.word	0x20072718
   963d8:	000963f5 	.word	0x000963f5
   963dc:	00097095 	.word	0x00097095
   963e0:	2007271a 	.word	0x2007271a
   963e4:	00096581 	.word	0x00096581
   963e8:	000970dd 	.word	0x000970dd
   963ec:	2007271c 	.word	0x2007271c
   963f0:	00096629 	.word	0x00096629

000963f4 <DD_SET_VALVE_1_16_IO>:
   963f4:	b580      	push	{r7, lr}
   963f6:	b084      	sub	sp, #16
   963f8:	af00      	add	r7, sp, #0
   963fa:	2301      	movs	r3, #1
   963fc:	73fb      	strb	r3, [r7, #15]
   963fe:	e0af      	b.n	96560 <DD_SET_VALVE_1_16_IO+0x16c>
   96400:	7bfb      	ldrb	r3, [r7, #15]
   96402:	3b01      	subs	r3, #1
   96404:	2b0f      	cmp	r3, #15
   96406:	f200 8083 	bhi.w	96510 <DD_SET_VALVE_1_16_IO+0x11c>
   9640a:	a201      	add	r2, pc, #4	; (adr r2, 96410 <DD_SET_VALVE_1_16_IO+0x1c>)
   9640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96410:	00096451 	.word	0x00096451
   96414:	0009645d 	.word	0x0009645d
   96418:	00096469 	.word	0x00096469
   9641c:	00096475 	.word	0x00096475
   96420:	00096481 	.word	0x00096481
   96424:	0009648d 	.word	0x0009648d
   96428:	00096499 	.word	0x00096499
   9642c:	000964a5 	.word	0x000964a5
   96430:	000964b1 	.word	0x000964b1
   96434:	000964bd 	.word	0x000964bd
   96438:	000964c9 	.word	0x000964c9
   9643c:	000964d5 	.word	0x000964d5
   96440:	000964e1 	.word	0x000964e1
   96444:	000964ed 	.word	0x000964ed
   96448:	000964f9 	.word	0x000964f9
   9644c:	00096505 	.word	0x00096505
   96450:	230a      	movs	r3, #10
   96452:	60bb      	str	r3, [r7, #8]
   96454:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   96458:	607b      	str	r3, [r7, #4]
   9645a:	e05a      	b.n	96512 <DD_SET_VALVE_1_16_IO+0x11e>
   9645c:	2302      	movs	r3, #2
   9645e:	60bb      	str	r3, [r7, #8]
   96460:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96464:	607b      	str	r3, [r7, #4]
   96466:	e054      	b.n	96512 <DD_SET_VALVE_1_16_IO+0x11e>
   96468:	2303      	movs	r3, #3
   9646a:	60bb      	str	r3, [r7, #8]
   9646c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96470:	607b      	str	r3, [r7, #4]
   96472:	e04e      	b.n	96512 <DD_SET_VALVE_1_16_IO+0x11e>
   96474:	2304      	movs	r3, #4
   96476:	60bb      	str	r3, [r7, #8]
   96478:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9647c:	607b      	str	r3, [r7, #4]
   9647e:	e048      	b.n	96512 <DD_SET_VALVE_1_16_IO+0x11e>
   96480:	2305      	movs	r3, #5
   96482:	60bb      	str	r3, [r7, #8]
   96484:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96488:	607b      	str	r3, [r7, #4]
   9648a:	e042      	b.n	96512 <DD_SET_VALVE_1_16_IO+0x11e>
   9648c:	2306      	movs	r3, #6
   9648e:	60bb      	str	r3, [r7, #8]
   96490:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96494:	607b      	str	r3, [r7, #4]
   96496:	e03c      	b.n	96512 <DD_SET_VALVE_1_16_IO+0x11e>
   96498:	2307      	movs	r3, #7
   9649a:	60bb      	str	r3, [r7, #8]
   9649c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   964a0:	607b      	str	r3, [r7, #4]
   964a2:	e036      	b.n	96512 <DD_SET_VALVE_1_16_IO+0x11e>
   964a4:	2308      	movs	r3, #8
   964a6:	60bb      	str	r3, [r7, #8]
   964a8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   964ac:	607b      	str	r3, [r7, #4]
   964ae:	e030      	b.n	96512 <DD_SET_VALVE_1_16_IO+0x11e>
   964b0:	2309      	movs	r3, #9
   964b2:	60bb      	str	r3, [r7, #8]
   964b4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   964b8:	607b      	str	r3, [r7, #4]
   964ba:	e02a      	b.n	96512 <DD_SET_VALVE_1_16_IO+0x11e>
   964bc:	230a      	movs	r3, #10
   964be:	60bb      	str	r3, [r7, #8]
   964c0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   964c4:	607b      	str	r3, [r7, #4]
   964c6:	e024      	b.n	96512 <DD_SET_VALVE_1_16_IO+0x11e>
   964c8:	230b      	movs	r3, #11
   964ca:	60bb      	str	r3, [r7, #8]
   964cc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   964d0:	607b      	str	r3, [r7, #4]
   964d2:	e01e      	b.n	96512 <DD_SET_VALVE_1_16_IO+0x11e>
   964d4:	230c      	movs	r3, #12
   964d6:	60bb      	str	r3, [r7, #8]
   964d8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   964dc:	607b      	str	r3, [r7, #4]
   964de:	e018      	b.n	96512 <DD_SET_VALVE_1_16_IO+0x11e>
   964e0:	230d      	movs	r3, #13
   964e2:	60bb      	str	r3, [r7, #8]
   964e4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   964e8:	607b      	str	r3, [r7, #4]
   964ea:	e012      	b.n	96512 <DD_SET_VALVE_1_16_IO+0x11e>
   964ec:	230e      	movs	r3, #14
   964ee:	60bb      	str	r3, [r7, #8]
   964f0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   964f4:	607b      	str	r3, [r7, #4]
   964f6:	e00c      	b.n	96512 <DD_SET_VALVE_1_16_IO+0x11e>
   964f8:	230f      	movs	r3, #15
   964fa:	60bb      	str	r3, [r7, #8]
   964fc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96500:	607b      	str	r3, [r7, #4]
   96502:	e006      	b.n	96512 <DD_SET_VALVE_1_16_IO+0x11e>
   96504:	2310      	movs	r3, #16
   96506:	60bb      	str	r3, [r7, #8]
   96508:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9650c:	607b      	str	r3, [r7, #4]
   9650e:	e000      	b.n	96512 <DD_SET_VALVE_1_16_IO+0x11e>
   96510:	bf00      	nop
   96512:	4b18      	ldr	r3, [pc, #96]	; (96574 <DD_SET_VALVE_1_16_IO+0x180>)
   96514:	881b      	ldrh	r3, [r3, #0]
   96516:	461a      	mov	r2, r3
   96518:	7bfb      	ldrb	r3, [r7, #15]
   9651a:	3b01      	subs	r3, #1
   9651c:	fa42 f303 	asr.w	r3, r2, r3
   96520:	f003 0301 	and.w	r3, r3, #1
   96524:	2b00      	cmp	r3, #0
   96526:	d00c      	beq.n	96542 <DD_SET_VALVE_1_16_IO+0x14e>
   96528:	7bfb      	ldrb	r3, [r7, #15]
   9652a:	2b01      	cmp	r3, #1
   9652c:	d104      	bne.n	96538 <DD_SET_VALVE_1_16_IO+0x144>
   9652e:	68b9      	ldr	r1, [r7, #8]
   96530:	6878      	ldr	r0, [r7, #4]
   96532:	4b11      	ldr	r3, [pc, #68]	; (96578 <DD_SET_VALVE_1_16_IO+0x184>)
   96534:	4798      	blx	r3
   96536:	e010      	b.n	9655a <DD_SET_VALVE_1_16_IO+0x166>
   96538:	68b9      	ldr	r1, [r7, #8]
   9653a:	6878      	ldr	r0, [r7, #4]
   9653c:	4b0f      	ldr	r3, [pc, #60]	; (9657c <DD_SET_VALVE_1_16_IO+0x188>)
   9653e:	4798      	blx	r3
   96540:	e00b      	b.n	9655a <DD_SET_VALVE_1_16_IO+0x166>
   96542:	7bfb      	ldrb	r3, [r7, #15]
   96544:	2b01      	cmp	r3, #1
   96546:	d104      	bne.n	96552 <DD_SET_VALVE_1_16_IO+0x15e>
   96548:	68b9      	ldr	r1, [r7, #8]
   9654a:	6878      	ldr	r0, [r7, #4]
   9654c:	4b0b      	ldr	r3, [pc, #44]	; (9657c <DD_SET_VALVE_1_16_IO+0x188>)
   9654e:	4798      	blx	r3
   96550:	e003      	b.n	9655a <DD_SET_VALVE_1_16_IO+0x166>
   96552:	68b9      	ldr	r1, [r7, #8]
   96554:	6878      	ldr	r0, [r7, #4]
   96556:	4b08      	ldr	r3, [pc, #32]	; (96578 <DD_SET_VALVE_1_16_IO+0x184>)
   96558:	4798      	blx	r3
   9655a:	7bfb      	ldrb	r3, [r7, #15]
   9655c:	3301      	adds	r3, #1
   9655e:	73fb      	strb	r3, [r7, #15]
   96560:	7bfb      	ldrb	r3, [r7, #15]
   96562:	2b10      	cmp	r3, #16
   96564:	f67f af4c 	bls.w	96400 <DD_SET_VALVE_1_16_IO+0xc>
   96568:	2300      	movs	r3, #0
   9656a:	4618      	mov	r0, r3
   9656c:	3710      	adds	r7, #16
   9656e:	46bd      	mov	sp, r7
   96570:	bd80      	pop	{r7, pc}
   96572:	bf00      	nop
   96574:	20072718 	.word	0x20072718
   96578:	00094d51 	.word	0x00094d51
   9657c:	00094dd5 	.word	0x00094dd5

00096580 <DD_SET_VALVE_17_20_IO>:
   96580:	b580      	push	{r7, lr}
   96582:	b084      	sub	sp, #16
   96584:	af00      	add	r7, sp, #0
   96586:	2311      	movs	r3, #17
   96588:	73fb      	strb	r3, [r7, #15]
   9658a:	e03f      	b.n	9660c <DD_SET_VALVE_17_20_IO+0x8c>
   9658c:	7bfb      	ldrb	r3, [r7, #15]
   9658e:	3b11      	subs	r3, #17
   96590:	2b03      	cmp	r3, #3
   96592:	d823      	bhi.n	965dc <DD_SET_VALVE_17_20_IO+0x5c>
   96594:	a201      	add	r2, pc, #4	; (adr r2, 9659c <DD_SET_VALVE_17_20_IO+0x1c>)
   96596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9659a:	bf00      	nop
   9659c:	000965ad 	.word	0x000965ad
   965a0:	000965b9 	.word	0x000965b9
   965a4:	000965c5 	.word	0x000965c5
   965a8:	000965d1 	.word	0x000965d1
   965ac:	2301      	movs	r3, #1
   965ae:	60bb      	str	r3, [r7, #8]
   965b0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   965b4:	607b      	str	r3, [r7, #4]
   965b6:	e012      	b.n	965de <DD_SET_VALVE_17_20_IO+0x5e>
   965b8:	2302      	movs	r3, #2
   965ba:	60bb      	str	r3, [r7, #8]
   965bc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   965c0:	607b      	str	r3, [r7, #4]
   965c2:	e00c      	b.n	965de <DD_SET_VALVE_17_20_IO+0x5e>
   965c4:	2303      	movs	r3, #3
   965c6:	60bb      	str	r3, [r7, #8]
   965c8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   965cc:	607b      	str	r3, [r7, #4]
   965ce:	e006      	b.n	965de <DD_SET_VALVE_17_20_IO+0x5e>
   965d0:	2304      	movs	r3, #4
   965d2:	60bb      	str	r3, [r7, #8]
   965d4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   965d8:	607b      	str	r3, [r7, #4]
   965da:	e000      	b.n	965de <DD_SET_VALVE_17_20_IO+0x5e>
   965dc:	bf00      	nop
   965de:	4b0f      	ldr	r3, [pc, #60]	; (9661c <DD_SET_VALVE_17_20_IO+0x9c>)
   965e0:	881b      	ldrh	r3, [r3, #0]
   965e2:	461a      	mov	r2, r3
   965e4:	7bfb      	ldrb	r3, [r7, #15]
   965e6:	3b11      	subs	r3, #17
   965e8:	fa42 f303 	asr.w	r3, r2, r3
   965ec:	f003 0301 	and.w	r3, r3, #1
   965f0:	2b00      	cmp	r3, #0
   965f2:	d004      	beq.n	965fe <DD_SET_VALVE_17_20_IO+0x7e>
   965f4:	68b9      	ldr	r1, [r7, #8]
   965f6:	6878      	ldr	r0, [r7, #4]
   965f8:	4b09      	ldr	r3, [pc, #36]	; (96620 <DD_SET_VALVE_17_20_IO+0xa0>)
   965fa:	4798      	blx	r3
   965fc:	e003      	b.n	96606 <DD_SET_VALVE_17_20_IO+0x86>
   965fe:	68b9      	ldr	r1, [r7, #8]
   96600:	6878      	ldr	r0, [r7, #4]
   96602:	4b08      	ldr	r3, [pc, #32]	; (96624 <DD_SET_VALVE_17_20_IO+0xa4>)
   96604:	4798      	blx	r3
   96606:	7bfb      	ldrb	r3, [r7, #15]
   96608:	3301      	adds	r3, #1
   9660a:	73fb      	strb	r3, [r7, #15]
   9660c:	7bfb      	ldrb	r3, [r7, #15]
   9660e:	2b14      	cmp	r3, #20
   96610:	d9bc      	bls.n	9658c <DD_SET_VALVE_17_20_IO+0xc>
   96612:	2300      	movs	r3, #0
   96614:	4618      	mov	r0, r3
   96616:	3710      	adds	r7, #16
   96618:	46bd      	mov	sp, r7
   9661a:	bd80      	pop	{r7, pc}
   9661c:	2007271a 	.word	0x2007271a
   96620:	00094dd5 	.word	0x00094dd5
   96624:	00094d51 	.word	0x00094d51

00096628 <DD_SET_VALVE_21_32_IO>:
   96628:	b580      	push	{r7, lr}
   9662a:	b084      	sub	sp, #16
   9662c:	af00      	add	r7, sp, #0
   9662e:	231d      	movs	r3, #29
   96630:	73fb      	strb	r3, [r7, #15]
   96632:	e03f      	b.n	966b4 <DD_SET_VALVE_21_32_IO+0x8c>
   96634:	7bfb      	ldrb	r3, [r7, #15]
   96636:	3b1d      	subs	r3, #29
   96638:	2b03      	cmp	r3, #3
   9663a:	d823      	bhi.n	96684 <DD_SET_VALVE_21_32_IO+0x5c>
   9663c:	a201      	add	r2, pc, #4	; (adr r2, 96644 <DD_SET_VALVE_21_32_IO+0x1c>)
   9663e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96642:	bf00      	nop
   96644:	00096655 	.word	0x00096655
   96648:	00096661 	.word	0x00096661
   9664c:	0009666d 	.word	0x0009666d
   96650:	00096679 	.word	0x00096679
   96654:	230d      	movs	r3, #13
   96656:	60bb      	str	r3, [r7, #8]
   96658:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9665c:	607b      	str	r3, [r7, #4]
   9665e:	e012      	b.n	96686 <DD_SET_VALVE_21_32_IO+0x5e>
   96660:	230e      	movs	r3, #14
   96662:	60bb      	str	r3, [r7, #8]
   96664:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96668:	607b      	str	r3, [r7, #4]
   9666a:	e00c      	b.n	96686 <DD_SET_VALVE_21_32_IO+0x5e>
   9666c:	230f      	movs	r3, #15
   9666e:	60bb      	str	r3, [r7, #8]
   96670:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96674:	607b      	str	r3, [r7, #4]
   96676:	e006      	b.n	96686 <DD_SET_VALVE_21_32_IO+0x5e>
   96678:	2310      	movs	r3, #16
   9667a:	60bb      	str	r3, [r7, #8]
   9667c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96680:	607b      	str	r3, [r7, #4]
   96682:	e000      	b.n	96686 <DD_SET_VALVE_21_32_IO+0x5e>
   96684:	bf00      	nop
   96686:	4b0f      	ldr	r3, [pc, #60]	; (966c4 <DD_SET_VALVE_21_32_IO+0x9c>)
   96688:	881b      	ldrh	r3, [r3, #0]
   9668a:	461a      	mov	r2, r3
   9668c:	7bfb      	ldrb	r3, [r7, #15]
   9668e:	3b11      	subs	r3, #17
   96690:	fa42 f303 	asr.w	r3, r2, r3
   96694:	f003 0301 	and.w	r3, r3, #1
   96698:	2b00      	cmp	r3, #0
   9669a:	d004      	beq.n	966a6 <DD_SET_VALVE_21_32_IO+0x7e>
   9669c:	68b9      	ldr	r1, [r7, #8]
   9669e:	6878      	ldr	r0, [r7, #4]
   966a0:	4b09      	ldr	r3, [pc, #36]	; (966c8 <DD_SET_VALVE_21_32_IO+0xa0>)
   966a2:	4798      	blx	r3
   966a4:	e003      	b.n	966ae <DD_SET_VALVE_21_32_IO+0x86>
   966a6:	68b9      	ldr	r1, [r7, #8]
   966a8:	6878      	ldr	r0, [r7, #4]
   966aa:	4b08      	ldr	r3, [pc, #32]	; (966cc <DD_SET_VALVE_21_32_IO+0xa4>)
   966ac:	4798      	blx	r3
   966ae:	7bfb      	ldrb	r3, [r7, #15]
   966b0:	3301      	adds	r3, #1
   966b2:	73fb      	strb	r3, [r7, #15]
   966b4:	7bfb      	ldrb	r3, [r7, #15]
   966b6:	2b20      	cmp	r3, #32
   966b8:	d9bc      	bls.n	96634 <DD_SET_VALVE_21_32_IO+0xc>
   966ba:	2300      	movs	r3, #0
   966bc:	4618      	mov	r0, r3
   966be:	3710      	adds	r7, #16
   966c0:	46bd      	mov	sp, r7
   966c2:	bd80      	pop	{r7, pc}
   966c4:	2007271c 	.word	0x2007271c
   966c8:	00094dd5 	.word	0x00094dd5
   966cc:	00094d51 	.word	0x00094d51

000966d0 <DD_SET_CLAMP>:
   966d0:	b580      	push	{r7, lr}
   966d2:	b082      	sub	sp, #8
   966d4:	af00      	add	r7, sp, #0
   966d6:	231b      	movs	r3, #27
   966d8:	607b      	str	r3, [r7, #4]
   966da:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   966de:	603b      	str	r3, [r7, #0]
   966e0:	6879      	ldr	r1, [r7, #4]
   966e2:	6838      	ldr	r0, [r7, #0]
   966e4:	4b03      	ldr	r3, [pc, #12]	; (966f4 <DD_SET_CLAMP+0x24>)
   966e6:	4798      	blx	r3
   966e8:	2300      	movs	r3, #0
   966ea:	4618      	mov	r0, r3
   966ec:	3708      	adds	r7, #8
   966ee:	46bd      	mov	sp, r7
   966f0:	bd80      	pop	{r7, pc}
   966f2:	bf00      	nop
   966f4:	00094d51 	.word	0x00094d51

000966f8 <DD_RESET_CLAMP>:
   966f8:	b580      	push	{r7, lr}
   966fa:	b082      	sub	sp, #8
   966fc:	af00      	add	r7, sp, #0
   966fe:	231b      	movs	r3, #27
   96700:	607b      	str	r3, [r7, #4]
   96702:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96706:	603b      	str	r3, [r7, #0]
   96708:	6879      	ldr	r1, [r7, #4]
   9670a:	6838      	ldr	r0, [r7, #0]
   9670c:	4b03      	ldr	r3, [pc, #12]	; (9671c <DD_RESET_CLAMP+0x24>)
   9670e:	4798      	blx	r3
   96710:	2300      	movs	r3, #0
   96712:	4618      	mov	r0, r3
   96714:	3708      	adds	r7, #8
   96716:	46bd      	mov	sp, r7
   96718:	bd80      	pop	{r7, pc}
   9671a:	bf00      	nop
   9671c:	00094dd5 	.word	0x00094dd5

00096720 <DD_RD_SENSIN>:
   96720:	b580      	push	{r7, lr}
   96722:	b086      	sub	sp, #24
   96724:	af00      	add	r7, sp, #0
   96726:	4603      	mov	r3, r0
   96728:	71fb      	strb	r3, [r7, #7]
   9672a:	2300      	movs	r3, #0
   9672c:	73fb      	strb	r3, [r7, #15]
   9672e:	79fb      	ldrb	r3, [r7, #7]
   96730:	3b01      	subs	r3, #1
   96732:	2b24      	cmp	r3, #36	; 0x24
   96734:	f200 812c 	bhi.w	96990 <DD_RD_SENSIN+0x270>
   96738:	a201      	add	r2, pc, #4	; (adr r2, 96740 <DD_RD_SENSIN+0x20>)
   9673a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9673e:	bf00      	nop
   96740:	000967d5 	.word	0x000967d5
   96744:	000967e1 	.word	0x000967e1
   96748:	000967ed 	.word	0x000967ed
   9674c:	000967f9 	.word	0x000967f9
   96750:	00096805 	.word	0x00096805
   96754:	00096811 	.word	0x00096811
   96758:	0009681d 	.word	0x0009681d
   9675c:	00096829 	.word	0x00096829
   96760:	00096835 	.word	0x00096835
   96764:	00096841 	.word	0x00096841
   96768:	0009684d 	.word	0x0009684d
   9676c:	00096859 	.word	0x00096859
   96770:	00096865 	.word	0x00096865
   96774:	00096871 	.word	0x00096871
   96778:	0009687d 	.word	0x0009687d
   9677c:	00096889 	.word	0x00096889
   96780:	00096895 	.word	0x00096895
   96784:	000968a1 	.word	0x000968a1
   96788:	000968ad 	.word	0x000968ad
   9678c:	000968b9 	.word	0x000968b9
   96790:	000968c5 	.word	0x000968c5
   96794:	000968d1 	.word	0x000968d1
   96798:	000968dd 	.word	0x000968dd
   9679c:	000968e9 	.word	0x000968e9
   967a0:	000968f5 	.word	0x000968f5
   967a4:	00096901 	.word	0x00096901
   967a8:	0009690d 	.word	0x0009690d
   967ac:	00096919 	.word	0x00096919
   967b0:	00096925 	.word	0x00096925
   967b4:	00096931 	.word	0x00096931
   967b8:	0009693d 	.word	0x0009693d
   967bc:	00096949 	.word	0x00096949
   967c0:	00096955 	.word	0x00096955
   967c4:	00096961 	.word	0x00096961
   967c8:	0009696d 	.word	0x0009696d
   967cc:	00096979 	.word	0x00096979
   967d0:	00096985 	.word	0x00096985
   967d4:	2307      	movs	r3, #7
   967d6:	617b      	str	r3, [r7, #20]
   967d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   967dc:	613b      	str	r3, [r7, #16]
   967de:	e0d8      	b.n	96992 <DD_RD_SENSIN+0x272>
   967e0:	2319      	movs	r3, #25
   967e2:	617b      	str	r3, [r7, #20]
   967e4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   967e8:	613b      	str	r3, [r7, #16]
   967ea:	e0d2      	b.n	96992 <DD_RD_SENSIN+0x272>
   967ec:	230c      	movs	r3, #12
   967ee:	617b      	str	r3, [r7, #20]
   967f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   967f4:	613b      	str	r3, [r7, #16]
   967f6:	e0cc      	b.n	96992 <DD_RD_SENSIN+0x272>
   967f8:	2300      	movs	r3, #0
   967fa:	617b      	str	r3, [r7, #20]
   967fc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   96800:	613b      	str	r3, [r7, #16]
   96802:	e0c6      	b.n	96992 <DD_RD_SENSIN+0x272>
   96804:	231e      	movs	r3, #30
   96806:	617b      	str	r3, [r7, #20]
   96808:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9680c:	613b      	str	r3, [r7, #16]
   9680e:	e0c0      	b.n	96992 <DD_RD_SENSIN+0x272>
   96810:	2306      	movs	r3, #6
   96812:	617b      	str	r3, [r7, #20]
   96814:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   96818:	613b      	str	r3, [r7, #16]
   9681a:	e0ba      	b.n	96992 <DD_RD_SENSIN+0x272>
   9681c:	2309      	movs	r3, #9
   9681e:	617b      	str	r3, [r7, #20]
   96820:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   96824:	613b      	str	r3, [r7, #16]
   96826:	e0b4      	b.n	96992 <DD_RD_SENSIN+0x272>
   96828:	2305      	movs	r3, #5
   9682a:	617b      	str	r3, [r7, #20]
   9682c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   96830:	613b      	str	r3, [r7, #16]
   96832:	e0ae      	b.n	96992 <DD_RD_SENSIN+0x272>
   96834:	2308      	movs	r3, #8
   96836:	617b      	str	r3, [r7, #20]
   96838:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9683c:	613b      	str	r3, [r7, #16]
   9683e:	e0a8      	b.n	96992 <DD_RD_SENSIN+0x272>
   96840:	2312      	movs	r3, #18
   96842:	617b      	str	r3, [r7, #20]
   96844:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   96848:	613b      	str	r3, [r7, #16]
   9684a:	e0a2      	b.n	96992 <DD_RD_SENSIN+0x272>
   9684c:	231a      	movs	r3, #26
   9684e:	617b      	str	r3, [r7, #20]
   96850:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96854:	613b      	str	r3, [r7, #16]
   96856:	e09c      	b.n	96992 <DD_RD_SENSIN+0x272>
   96858:	2313      	movs	r3, #19
   9685a:	617b      	str	r3, [r7, #20]
   9685c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   96860:	613b      	str	r3, [r7, #16]
   96862:	e096      	b.n	96992 <DD_RD_SENSIN+0x272>
   96864:	2303      	movs	r3, #3
   96866:	617b      	str	r3, [r7, #20]
   96868:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9686c:	613b      	str	r3, [r7, #16]
   9686e:	e090      	b.n	96992 <DD_RD_SENSIN+0x272>
   96870:	2310      	movs	r3, #16
   96872:	617b      	str	r3, [r7, #20]
   96874:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   96878:	613b      	str	r3, [r7, #16]
   9687a:	e08a      	b.n	96992 <DD_RD_SENSIN+0x272>
   9687c:	2312      	movs	r3, #18
   9687e:	617b      	str	r3, [r7, #20]
   96880:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96884:	613b      	str	r3, [r7, #16]
   96886:	e084      	b.n	96992 <DD_RD_SENSIN+0x272>
   96888:	2304      	movs	r3, #4
   9688a:	617b      	str	r3, [r7, #20]
   9688c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   96890:	613b      	str	r3, [r7, #16]
   96892:	e07e      	b.n	96992 <DD_RD_SENSIN+0x272>
   96894:	2316      	movs	r3, #22
   96896:	617b      	str	r3, [r7, #20]
   96898:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9689c:	613b      	str	r3, [r7, #16]
   9689e:	e078      	b.n	96992 <DD_RD_SENSIN+0x272>
   968a0:	230a      	movs	r3, #10
   968a2:	617b      	str	r3, [r7, #20]
   968a4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   968a8:	613b      	str	r3, [r7, #16]
   968aa:	e072      	b.n	96992 <DD_RD_SENSIN+0x272>
   968ac:	2317      	movs	r3, #23
   968ae:	617b      	str	r3, [r7, #20]
   968b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   968b4:	613b      	str	r3, [r7, #16]
   968b6:	e06c      	b.n	96992 <DD_RD_SENSIN+0x272>
   968b8:	2309      	movs	r3, #9
   968ba:	617b      	str	r3, [r7, #20]
   968bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   968c0:	613b      	str	r3, [r7, #16]
   968c2:	e066      	b.n	96992 <DD_RD_SENSIN+0x272>
   968c4:	2319      	movs	r3, #25
   968c6:	617b      	str	r3, [r7, #20]
   968c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   968cc:	613b      	str	r3, [r7, #16]
   968ce:	e060      	b.n	96992 <DD_RD_SENSIN+0x272>
   968d0:	2318      	movs	r3, #24
   968d2:	617b      	str	r3, [r7, #20]
   968d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   968d8:	613b      	str	r3, [r7, #16]
   968da:	e05a      	b.n	96992 <DD_RD_SENSIN+0x272>
   968dc:	231b      	movs	r3, #27
   968de:	617b      	str	r3, [r7, #20]
   968e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   968e4:	613b      	str	r3, [r7, #16]
   968e6:	e054      	b.n	96992 <DD_RD_SENSIN+0x272>
   968e8:	2318      	movs	r3, #24
   968ea:	617b      	str	r3, [r7, #20]
   968ec:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   968f0:	613b      	str	r3, [r7, #16]
   968f2:	e04e      	b.n	96992 <DD_RD_SENSIN+0x272>
   968f4:	230e      	movs	r3, #14
   968f6:	617b      	str	r3, [r7, #20]
   968f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   968fc:	613b      	str	r3, [r7, #16]
   968fe:	e048      	b.n	96992 <DD_RD_SENSIN+0x272>
   96900:	230f      	movs	r3, #15
   96902:	617b      	str	r3, [r7, #20]
   96904:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   96908:	613b      	str	r3, [r7, #16]
   9690a:	e042      	b.n	96992 <DD_RD_SENSIN+0x272>
   9690c:	231d      	movs	r3, #29
   9690e:	617b      	str	r3, [r7, #20]
   96910:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96914:	613b      	str	r3, [r7, #16]
   96916:	e03c      	b.n	96992 <DD_RD_SENSIN+0x272>
   96918:	2314      	movs	r3, #20
   9691a:	617b      	str	r3, [r7, #20]
   9691c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96920:	613b      	str	r3, [r7, #16]
   96922:	e036      	b.n	96992 <DD_RD_SENSIN+0x272>
   96924:	2311      	movs	r3, #17
   96926:	617b      	str	r3, [r7, #20]
   96928:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9692c:	613b      	str	r3, [r7, #16]
   9692e:	e030      	b.n	96992 <DD_RD_SENSIN+0x272>
   96930:	2313      	movs	r3, #19
   96932:	617b      	str	r3, [r7, #20]
   96934:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96938:	613b      	str	r3, [r7, #16]
   9693a:	e02a      	b.n	96992 <DD_RD_SENSIN+0x272>
   9693c:	2310      	movs	r3, #16
   9693e:	617b      	str	r3, [r7, #20]
   96940:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   96944:	613b      	str	r3, [r7, #16]
   96946:	e024      	b.n	96992 <DD_RD_SENSIN+0x272>
   96948:	2318      	movs	r3, #24
   9694a:	617b      	str	r3, [r7, #20]
   9694c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   96950:	613b      	str	r3, [r7, #16]
   96952:	e01e      	b.n	96992 <DD_RD_SENSIN+0x272>
   96954:	2315      	movs	r3, #21
   96956:	617b      	str	r3, [r7, #20]
   96958:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9695c:	613b      	str	r3, [r7, #16]
   9695e:	e018      	b.n	96992 <DD_RD_SENSIN+0x272>
   96960:	230a      	movs	r3, #10
   96962:	617b      	str	r3, [r7, #20]
   96964:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   96968:	613b      	str	r3, [r7, #16]
   9696a:	e012      	b.n	96992 <DD_RD_SENSIN+0x272>
   9696c:	2302      	movs	r3, #2
   9696e:	617b      	str	r3, [r7, #20]
   96970:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   96974:	613b      	str	r3, [r7, #16]
   96976:	e00c      	b.n	96992 <DD_RD_SENSIN+0x272>
   96978:	231a      	movs	r3, #26
   9697a:	617b      	str	r3, [r7, #20]
   9697c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   96980:	613b      	str	r3, [r7, #16]
   96982:	e006      	b.n	96992 <DD_RD_SENSIN+0x272>
   96984:	2304      	movs	r3, #4
   96986:	617b      	str	r3, [r7, #20]
   96988:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9698c:	613b      	str	r3, [r7, #16]
   9698e:	e000      	b.n	96992 <DD_RD_SENSIN+0x272>
   96990:	bf00      	nop
   96992:	6979      	ldr	r1, [r7, #20]
   96994:	6938      	ldr	r0, [r7, #16]
   96996:	4b04      	ldr	r3, [pc, #16]	; (969a8 <DD_RD_SENSIN+0x288>)
   96998:	4798      	blx	r3
   9699a:	4603      	mov	r3, r0
   9699c:	73fb      	strb	r3, [r7, #15]
   9699e:	7bfb      	ldrb	r3, [r7, #15]
   969a0:	4618      	mov	r0, r3
   969a2:	3718      	adds	r7, #24
   969a4:	46bd      	mov	sp, r7
   969a6:	bd80      	pop	{r7, pc}
   969a8:	00094e59 	.word	0x00094e59

000969ac <DD_CONSOLE_TX>:
   969ac:	b580      	push	{r7, lr}
   969ae:	b084      	sub	sp, #16
   969b0:	af00      	add	r7, sp, #0
   969b2:	4603      	mov	r3, r0
   969b4:	71fb      	strb	r3, [r7, #7]
   969b6:	2301      	movs	r3, #1
   969b8:	73fb      	strb	r3, [r7, #15]
   969ba:	79fb      	ldrb	r3, [r7, #7]
   969bc:	4618      	mov	r0, r3
   969be:	4b04      	ldr	r3, [pc, #16]	; (969d0 <DD_CONSOLE_TX+0x24>)
   969c0:	4798      	blx	r3
   969c2:	4603      	mov	r3, r0
   969c4:	73fb      	strb	r3, [r7, #15]
   969c6:	7bfb      	ldrb	r3, [r7, #15]
   969c8:	4618      	mov	r0, r3
   969ca:	3710      	adds	r7, #16
   969cc:	46bd      	mov	sp, r7
   969ce:	bd80      	pop	{r7, pc}
   969d0:	000977d9 	.word	0x000977d9

000969d4 <DD_CONSOLE_RX>:
   969d4:	b580      	push	{r7, lr}
   969d6:	b084      	sub	sp, #16
   969d8:	af00      	add	r7, sp, #0
   969da:	4603      	mov	r3, r0
   969dc:	71fb      	strb	r3, [r7, #7]
   969de:	79fb      	ldrb	r3, [r7, #7]
   969e0:	73fb      	strb	r3, [r7, #15]
   969e2:	7bfb      	ldrb	r3, [r7, #15]
   969e4:	4618      	mov	r0, r3
   969e6:	4b03      	ldr	r3, [pc, #12]	; (969f4 <DD_CONSOLE_RX+0x20>)
   969e8:	4798      	blx	r3
   969ea:	2301      	movs	r3, #1
   969ec:	4618      	mov	r0, r3
   969ee:	3710      	adds	r7, #16
   969f0:	46bd      	mov	sp, r7
   969f2:	bd80      	pop	{r7, pc}
   969f4:	00097d09 	.word	0x00097d09

000969f8 <DD_CONFIG_TIMER>:
   969f8:	b590      	push	{r4, r7, lr}
   969fa:	b089      	sub	sp, #36	; 0x24
   969fc:	af00      	add	r7, sp, #0
   969fe:	4603      	mov	r3, r0
   96a00:	460a      	mov	r2, r1
   96a02:	71fb      	strb	r3, [r7, #7]
   96a04:	4613      	mov	r3, r2
   96a06:	71bb      	strb	r3, [r7, #6]
   96a08:	2300      	movs	r3, #0
   96a0a:	61fb      	str	r3, [r7, #28]
   96a0c:	79bb      	ldrb	r3, [r7, #6]
   96a0e:	2201      	movs	r2, #1
   96a10:	fb92 f3f3 	sdiv	r3, r2, r3
   96a14:	01db      	lsls	r3, r3, #7
   96a16:	4a1b      	ldr	r2, [pc, #108]	; (96a84 <DD_CONFIG_TIMER+0x8c>)
   96a18:	fb92 f3f3 	sdiv	r3, r2, r3
   96a1c:	1e5a      	subs	r2, r3, #1
   96a1e:	4b1a      	ldr	r3, [pc, #104]	; (96a88 <DD_CONFIG_TIMER+0x90>)
   96a20:	4610      	mov	r0, r2
   96a22:	4798      	blx	r3
   96a24:	4603      	mov	r3, r0
   96a26:	460c      	mov	r4, r1
   96a28:	e9c7 3404 	strd	r3, r4, [r7, #16]
   96a2c:	4b17      	ldr	r3, [pc, #92]	; (96a8c <DD_CONFIG_TIMER+0x94>)
   96a2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   96a32:	4798      	blx	r3
   96a34:	4603      	mov	r3, r0
   96a36:	60fb      	str	r3, [r7, #12]
   96a38:	79fb      	ldrb	r3, [r7, #7]
   96a3a:	2b01      	cmp	r3, #1
   96a3c:	d00a      	beq.n	96a54 <DD_CONFIG_TIMER+0x5c>
   96a3e:	2b02      	cmp	r3, #2
   96a40:	d011      	beq.n	96a66 <DD_CONFIG_TIMER+0x6e>
   96a42:	2b00      	cmp	r3, #0
   96a44:	d118      	bne.n	96a78 <DD_CONFIG_TIMER+0x80>
   96a46:	68fb      	ldr	r3, [r7, #12]
   96a48:	221b      	movs	r2, #27
   96a4a:	69f9      	ldr	r1, [r7, #28]
   96a4c:	4810      	ldr	r0, [pc, #64]	; (96a90 <DD_CONFIG_TIMER+0x98>)
   96a4e:	4c11      	ldr	r4, [pc, #68]	; (96a94 <DD_CONFIG_TIMER+0x9c>)
   96a50:	47a0      	blx	r4
   96a52:	e011      	b.n	96a78 <DD_CONFIG_TIMER+0x80>
   96a54:	4b10      	ldr	r3, [pc, #64]	; (96a98 <DD_CONFIG_TIMER+0xa0>)
   96a56:	60fb      	str	r3, [r7, #12]
   96a58:	68fb      	ldr	r3, [r7, #12]
   96a5a:	221e      	movs	r2, #30
   96a5c:	69f9      	ldr	r1, [r7, #28]
   96a5e:	480f      	ldr	r0, [pc, #60]	; (96a9c <DD_CONFIG_TIMER+0xa4>)
   96a60:	4c0c      	ldr	r4, [pc, #48]	; (96a94 <DD_CONFIG_TIMER+0x9c>)
   96a62:	47a0      	blx	r4
   96a64:	e008      	b.n	96a78 <DD_CONFIG_TIMER+0x80>
   96a66:	4b0e      	ldr	r3, [pc, #56]	; (96aa0 <DD_CONFIG_TIMER+0xa8>)
   96a68:	60fb      	str	r3, [r7, #12]
   96a6a:	68fb      	ldr	r3, [r7, #12]
   96a6c:	2221      	movs	r2, #33	; 0x21
   96a6e:	69f9      	ldr	r1, [r7, #28]
   96a70:	480c      	ldr	r0, [pc, #48]	; (96aa4 <DD_CONFIG_TIMER+0xac>)
   96a72:	4c08      	ldr	r4, [pc, #32]	; (96a94 <DD_CONFIG_TIMER+0x9c>)
   96a74:	47a0      	blx	r4
   96a76:	bf00      	nop
   96a78:	bf00      	nop
   96a7a:	4618      	mov	r0, r3
   96a7c:	3724      	adds	r7, #36	; 0x24
   96a7e:	46bd      	mov	sp, r7
   96a80:	bd90      	pop	{r4, r7, pc}
   96a82:	bf00      	nop
   96a84:	0501bd00 	.word	0x0501bd00
   96a88:	000a34c9 	.word	0x000a34c9
   96a8c:	000a3b19 	.word	0x000a3b19
   96a90:	40080000 	.word	0x40080000
   96a94:	000972d5 	.word	0x000972d5
   96a98:	00321161 	.word	0x00321161
   96a9c:	40084000 	.word	0x40084000
   96aa0:	001e0a6d 	.word	0x001e0a6d
   96aa4:	40088000 	.word	0x40088000

00096aa8 <DD_SET_FLOW_PATH>:
   96aa8:	b580      	push	{r7, lr}
   96aaa:	b082      	sub	sp, #8
   96aac:	af00      	add	r7, sp, #0
   96aae:	4603      	mov	r3, r0
   96ab0:	71fb      	strb	r3, [r7, #7]
   96ab2:	79fb      	ldrb	r3, [r7, #7]
   96ab4:	3b01      	subs	r3, #1
   96ab6:	2b12      	cmp	r3, #18
   96ab8:	f200 82df 	bhi.w	9707a <DD_SET_FLOW_PATH+0x5d2>
   96abc:	a201      	add	r2, pc, #4	; (adr r2, 96ac4 <DD_SET_FLOW_PATH+0x1c>)
   96abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96ac2:	bf00      	nop
   96ac4:	00096bc3 	.word	0x00096bc3
   96ac8:	00096c3d 	.word	0x00096c3d
   96acc:	00096cb7 	.word	0x00096cb7
   96ad0:	00096d13 	.word	0x00096d13
   96ad4:	00096d85 	.word	0x00096d85
   96ad8:	00096e37 	.word	0x00096e37
   96adc:	00096ee9 	.word	0x00096ee9
   96ae0:	0009707b 	.word	0x0009707b
   96ae4:	0009707b 	.word	0x0009707b
   96ae8:	00096f4b 	.word	0x00096f4b
   96aec:	00096f95 	.word	0x00096f95
   96af0:	0009707b 	.word	0x0009707b
   96af4:	0009707b 	.word	0x0009707b
   96af8:	0009707b 	.word	0x0009707b
   96afc:	0009707b 	.word	0x0009707b
   96b00:	0009707b 	.word	0x0009707b
   96b04:	00096b43 	.word	0x00096b43
   96b08:	00096ff9 	.word	0x00096ff9
   96b0c:	00096b11 	.word	0x00096b11
   96b10:	2005      	movs	r0, #5
   96b12:	4b97      	ldr	r3, [pc, #604]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b14:	4798      	blx	r3
   96b16:	2006      	movs	r0, #6
   96b18:	4b95      	ldr	r3, [pc, #596]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b1a:	4798      	blx	r3
   96b1c:	2007      	movs	r0, #7
   96b1e:	4b94      	ldr	r3, [pc, #592]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b20:	4798      	blx	r3
   96b22:	2008      	movs	r0, #8
   96b24:	4b92      	ldr	r3, [pc, #584]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b26:	4798      	blx	r3
   96b28:	2009      	movs	r0, #9
   96b2a:	4b91      	ldr	r3, [pc, #580]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b2c:	4798      	blx	r3
   96b2e:	200a      	movs	r0, #10
   96b30:	4b8f      	ldr	r3, [pc, #572]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b32:	4798      	blx	r3
   96b34:	200b      	movs	r0, #11
   96b36:	4b8e      	ldr	r3, [pc, #568]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b38:	4798      	blx	r3
   96b3a:	200c      	movs	r0, #12
   96b3c:	4b8c      	ldr	r3, [pc, #560]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b3e:	4798      	blx	r3
   96b40:	e29b      	b.n	9707a <DD_SET_FLOW_PATH+0x5d2>
   96b42:	2001      	movs	r0, #1
   96b44:	4b8a      	ldr	r3, [pc, #552]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b46:	4798      	blx	r3
   96b48:	2002      	movs	r0, #2
   96b4a:	4b89      	ldr	r3, [pc, #548]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b4c:	4798      	blx	r3
   96b4e:	2003      	movs	r0, #3
   96b50:	4b87      	ldr	r3, [pc, #540]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b52:	4798      	blx	r3
   96b54:	2004      	movs	r0, #4
   96b56:	4b86      	ldr	r3, [pc, #536]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b58:	4798      	blx	r3
   96b5a:	2005      	movs	r0, #5
   96b5c:	4b84      	ldr	r3, [pc, #528]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b5e:	4798      	blx	r3
   96b60:	2006      	movs	r0, #6
   96b62:	4b83      	ldr	r3, [pc, #524]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b64:	4798      	blx	r3
   96b66:	2007      	movs	r0, #7
   96b68:	4b81      	ldr	r3, [pc, #516]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b6a:	4798      	blx	r3
   96b6c:	2008      	movs	r0, #8
   96b6e:	4b80      	ldr	r3, [pc, #512]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b70:	4798      	blx	r3
   96b72:	2009      	movs	r0, #9
   96b74:	4b7e      	ldr	r3, [pc, #504]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b76:	4798      	blx	r3
   96b78:	200a      	movs	r0, #10
   96b7a:	4b7d      	ldr	r3, [pc, #500]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b7c:	4798      	blx	r3
   96b7e:	200b      	movs	r0, #11
   96b80:	4b7b      	ldr	r3, [pc, #492]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b82:	4798      	blx	r3
   96b84:	200c      	movs	r0, #12
   96b86:	4b7a      	ldr	r3, [pc, #488]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b88:	4798      	blx	r3
   96b8a:	200d      	movs	r0, #13
   96b8c:	4b78      	ldr	r3, [pc, #480]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b8e:	4798      	blx	r3
   96b90:	200e      	movs	r0, #14
   96b92:	4b77      	ldr	r3, [pc, #476]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b94:	4798      	blx	r3
   96b96:	200f      	movs	r0, #15
   96b98:	4b75      	ldr	r3, [pc, #468]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96b9a:	4798      	blx	r3
   96b9c:	2010      	movs	r0, #16
   96b9e:	4b74      	ldr	r3, [pc, #464]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96ba0:	4798      	blx	r3
   96ba2:	2011      	movs	r0, #17
   96ba4:	4b72      	ldr	r3, [pc, #456]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96ba6:	4798      	blx	r3
   96ba8:	2012      	movs	r0, #18
   96baa:	4b71      	ldr	r3, [pc, #452]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96bac:	4798      	blx	r3
   96bae:	2013      	movs	r0, #19
   96bb0:	4b6f      	ldr	r3, [pc, #444]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96bb2:	4798      	blx	r3
   96bb4:	2002      	movs	r0, #2
   96bb6:	4b6f      	ldr	r3, [pc, #444]	; (96d74 <DD_SET_FLOW_PATH+0x2cc>)
   96bb8:	4798      	blx	r3
   96bba:	2001      	movs	r0, #1
   96bbc:	4b6d      	ldr	r3, [pc, #436]	; (96d74 <DD_SET_FLOW_PATH+0x2cc>)
   96bbe:	4798      	blx	r3
   96bc0:	e25b      	b.n	9707a <DD_SET_FLOW_PATH+0x5d2>
   96bc2:	2001      	movs	r0, #1
   96bc4:	4b6c      	ldr	r3, [pc, #432]	; (96d78 <DD_SET_FLOW_PATH+0x2d0>)
   96bc6:	4798      	blx	r3
   96bc8:	2003      	movs	r0, #3
   96bca:	4b69      	ldr	r3, [pc, #420]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96bcc:	4798      	blx	r3
   96bce:	2004      	movs	r0, #4
   96bd0:	4b67      	ldr	r3, [pc, #412]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96bd2:	4798      	blx	r3
   96bd4:	2005      	movs	r0, #5
   96bd6:	4b66      	ldr	r3, [pc, #408]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96bd8:	4798      	blx	r3
   96bda:	2006      	movs	r0, #6
   96bdc:	4b64      	ldr	r3, [pc, #400]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96bde:	4798      	blx	r3
   96be0:	2007      	movs	r0, #7
   96be2:	4b63      	ldr	r3, [pc, #396]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96be4:	4798      	blx	r3
   96be6:	2008      	movs	r0, #8
   96be8:	4b61      	ldr	r3, [pc, #388]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96bea:	4798      	blx	r3
   96bec:	2009      	movs	r0, #9
   96bee:	4b60      	ldr	r3, [pc, #384]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96bf0:	4798      	blx	r3
   96bf2:	200a      	movs	r0, #10
   96bf4:	4b5e      	ldr	r3, [pc, #376]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96bf6:	4798      	blx	r3
   96bf8:	200b      	movs	r0, #11
   96bfa:	4b5d      	ldr	r3, [pc, #372]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96bfc:	4798      	blx	r3
   96bfe:	200c      	movs	r0, #12
   96c00:	4b5b      	ldr	r3, [pc, #364]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c02:	4798      	blx	r3
   96c04:	200d      	movs	r0, #13
   96c06:	4b5a      	ldr	r3, [pc, #360]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c08:	4798      	blx	r3
   96c0a:	200e      	movs	r0, #14
   96c0c:	4b58      	ldr	r3, [pc, #352]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c0e:	4798      	blx	r3
   96c10:	200f      	movs	r0, #15
   96c12:	4b59      	ldr	r3, [pc, #356]	; (96d78 <DD_SET_FLOW_PATH+0x2d0>)
   96c14:	4798      	blx	r3
   96c16:	2010      	movs	r0, #16
   96c18:	4b55      	ldr	r3, [pc, #340]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c1a:	4798      	blx	r3
   96c1c:	2011      	movs	r0, #17
   96c1e:	4b54      	ldr	r3, [pc, #336]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c20:	4798      	blx	r3
   96c22:	2012      	movs	r0, #18
   96c24:	4b54      	ldr	r3, [pc, #336]	; (96d78 <DD_SET_FLOW_PATH+0x2d0>)
   96c26:	4798      	blx	r3
   96c28:	2013      	movs	r0, #19
   96c2a:	4b51      	ldr	r3, [pc, #324]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c2c:	4798      	blx	r3
   96c2e:	2002      	movs	r0, #2
   96c30:	4b50      	ldr	r3, [pc, #320]	; (96d74 <DD_SET_FLOW_PATH+0x2cc>)
   96c32:	4798      	blx	r3
   96c34:	2001      	movs	r0, #1
   96c36:	4b4f      	ldr	r3, [pc, #316]	; (96d74 <DD_SET_FLOW_PATH+0x2cc>)
   96c38:	4798      	blx	r3
   96c3a:	e21e      	b.n	9707a <DD_SET_FLOW_PATH+0x5d2>
   96c3c:	2001      	movs	r0, #1
   96c3e:	4b4e      	ldr	r3, [pc, #312]	; (96d78 <DD_SET_FLOW_PATH+0x2d0>)
   96c40:	4798      	blx	r3
   96c42:	2003      	movs	r0, #3
   96c44:	4b4a      	ldr	r3, [pc, #296]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c46:	4798      	blx	r3
   96c48:	2004      	movs	r0, #4
   96c4a:	4b49      	ldr	r3, [pc, #292]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c4c:	4798      	blx	r3
   96c4e:	2005      	movs	r0, #5
   96c50:	4b47      	ldr	r3, [pc, #284]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c52:	4798      	blx	r3
   96c54:	2006      	movs	r0, #6
   96c56:	4b46      	ldr	r3, [pc, #280]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c58:	4798      	blx	r3
   96c5a:	2007      	movs	r0, #7
   96c5c:	4b44      	ldr	r3, [pc, #272]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c5e:	4798      	blx	r3
   96c60:	2008      	movs	r0, #8
   96c62:	4b43      	ldr	r3, [pc, #268]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c64:	4798      	blx	r3
   96c66:	2009      	movs	r0, #9
   96c68:	4b41      	ldr	r3, [pc, #260]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c6a:	4798      	blx	r3
   96c6c:	200a      	movs	r0, #10
   96c6e:	4b40      	ldr	r3, [pc, #256]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c70:	4798      	blx	r3
   96c72:	200b      	movs	r0, #11
   96c74:	4b3e      	ldr	r3, [pc, #248]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c76:	4798      	blx	r3
   96c78:	200c      	movs	r0, #12
   96c7a:	4b3d      	ldr	r3, [pc, #244]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c7c:	4798      	blx	r3
   96c7e:	200d      	movs	r0, #13
   96c80:	4b3b      	ldr	r3, [pc, #236]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c82:	4798      	blx	r3
   96c84:	200e      	movs	r0, #14
   96c86:	4b3a      	ldr	r3, [pc, #232]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c88:	4798      	blx	r3
   96c8a:	200f      	movs	r0, #15
   96c8c:	4b38      	ldr	r3, [pc, #224]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c8e:	4798      	blx	r3
   96c90:	2010      	movs	r0, #16
   96c92:	4b37      	ldr	r3, [pc, #220]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c94:	4798      	blx	r3
   96c96:	2011      	movs	r0, #17
   96c98:	4b35      	ldr	r3, [pc, #212]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96c9a:	4798      	blx	r3
   96c9c:	2012      	movs	r0, #18
   96c9e:	4b36      	ldr	r3, [pc, #216]	; (96d78 <DD_SET_FLOW_PATH+0x2d0>)
   96ca0:	4798      	blx	r3
   96ca2:	2013      	movs	r0, #19
   96ca4:	4b32      	ldr	r3, [pc, #200]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96ca6:	4798      	blx	r3
   96ca8:	2001      	movs	r0, #1
   96caa:	4b34      	ldr	r3, [pc, #208]	; (96d7c <DD_SET_FLOW_PATH+0x2d4>)
   96cac:	4798      	blx	r3
   96cae:	2002      	movs	r0, #2
   96cb0:	4b30      	ldr	r3, [pc, #192]	; (96d74 <DD_SET_FLOW_PATH+0x2cc>)
   96cb2:	4798      	blx	r3
   96cb4:	e1e1      	b.n	9707a <DD_SET_FLOW_PATH+0x5d2>
   96cb6:	2005      	movs	r0, #5
   96cb8:	4b2d      	ldr	r3, [pc, #180]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96cba:	4798      	blx	r3
   96cbc:	2008      	movs	r0, #8
   96cbe:	4b2c      	ldr	r3, [pc, #176]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96cc0:	4798      	blx	r3
   96cc2:	200a      	movs	r0, #10
   96cc4:	4b2a      	ldr	r3, [pc, #168]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96cc6:	4798      	blx	r3
   96cc8:	200b      	movs	r0, #11
   96cca:	4b29      	ldr	r3, [pc, #164]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96ccc:	4798      	blx	r3
   96cce:	2032      	movs	r0, #50	; 0x32
   96cd0:	4b2b      	ldr	r3, [pc, #172]	; (96d80 <DD_SET_FLOW_PATH+0x2d8>)
   96cd2:	4798      	blx	r3
   96cd4:	2006      	movs	r0, #6
   96cd6:	4b28      	ldr	r3, [pc, #160]	; (96d78 <DD_SET_FLOW_PATH+0x2d0>)
   96cd8:	4798      	blx	r3
   96cda:	2007      	movs	r0, #7
   96cdc:	4b26      	ldr	r3, [pc, #152]	; (96d78 <DD_SET_FLOW_PATH+0x2d0>)
   96cde:	4798      	blx	r3
   96ce0:	2009      	movs	r0, #9
   96ce2:	4b25      	ldr	r3, [pc, #148]	; (96d78 <DD_SET_FLOW_PATH+0x2d0>)
   96ce4:	4798      	blx	r3
   96ce6:	200c      	movs	r0, #12
   96ce8:	4b23      	ldr	r3, [pc, #140]	; (96d78 <DD_SET_FLOW_PATH+0x2d0>)
   96cea:	4798      	blx	r3
   96cec:	200d      	movs	r0, #13
   96cee:	4b20      	ldr	r3, [pc, #128]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96cf0:	4798      	blx	r3
   96cf2:	200e      	movs	r0, #14
   96cf4:	4b1e      	ldr	r3, [pc, #120]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96cf6:	4798      	blx	r3
   96cf8:	200f      	movs	r0, #15
   96cfa:	4b1f      	ldr	r3, [pc, #124]	; (96d78 <DD_SET_FLOW_PATH+0x2d0>)
   96cfc:	4798      	blx	r3
   96cfe:	2010      	movs	r0, #16
   96d00:	4b1b      	ldr	r3, [pc, #108]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96d02:	4798      	blx	r3
   96d04:	2011      	movs	r0, #17
   96d06:	4b1c      	ldr	r3, [pc, #112]	; (96d78 <DD_SET_FLOW_PATH+0x2d0>)
   96d08:	4798      	blx	r3
   96d0a:	2012      	movs	r0, #18
   96d0c:	4b1a      	ldr	r3, [pc, #104]	; (96d78 <DD_SET_FLOW_PATH+0x2d0>)
   96d0e:	4798      	blx	r3
   96d10:	e1b3      	b.n	9707a <DD_SET_FLOW_PATH+0x5d2>
   96d12:	2006      	movs	r0, #6
   96d14:	4b16      	ldr	r3, [pc, #88]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96d16:	4798      	blx	r3
   96d18:	2007      	movs	r0, #7
   96d1a:	4b15      	ldr	r3, [pc, #84]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96d1c:	4798      	blx	r3
   96d1e:	2009      	movs	r0, #9
   96d20:	4b13      	ldr	r3, [pc, #76]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96d22:	4798      	blx	r3
   96d24:	200c      	movs	r0, #12
   96d26:	4b12      	ldr	r3, [pc, #72]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96d28:	4798      	blx	r3
   96d2a:	2032      	movs	r0, #50	; 0x32
   96d2c:	4b14      	ldr	r3, [pc, #80]	; (96d80 <DD_SET_FLOW_PATH+0x2d8>)
   96d2e:	4798      	blx	r3
   96d30:	2005      	movs	r0, #5
   96d32:	4b11      	ldr	r3, [pc, #68]	; (96d78 <DD_SET_FLOW_PATH+0x2d0>)
   96d34:	4798      	blx	r3
   96d36:	2008      	movs	r0, #8
   96d38:	4b0f      	ldr	r3, [pc, #60]	; (96d78 <DD_SET_FLOW_PATH+0x2d0>)
   96d3a:	4798      	blx	r3
   96d3c:	200a      	movs	r0, #10
   96d3e:	4b0e      	ldr	r3, [pc, #56]	; (96d78 <DD_SET_FLOW_PATH+0x2d0>)
   96d40:	4798      	blx	r3
   96d42:	200b      	movs	r0, #11
   96d44:	4b0c      	ldr	r3, [pc, #48]	; (96d78 <DD_SET_FLOW_PATH+0x2d0>)
   96d46:	4798      	blx	r3
   96d48:	200d      	movs	r0, #13
   96d4a:	4b09      	ldr	r3, [pc, #36]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96d4c:	4798      	blx	r3
   96d4e:	200e      	movs	r0, #14
   96d50:	4b07      	ldr	r3, [pc, #28]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96d52:	4798      	blx	r3
   96d54:	200f      	movs	r0, #15
   96d56:	4b08      	ldr	r3, [pc, #32]	; (96d78 <DD_SET_FLOW_PATH+0x2d0>)
   96d58:	4798      	blx	r3
   96d5a:	2010      	movs	r0, #16
   96d5c:	4b04      	ldr	r3, [pc, #16]	; (96d70 <DD_SET_FLOW_PATH+0x2c8>)
   96d5e:	4798      	blx	r3
   96d60:	2011      	movs	r0, #17
   96d62:	4b05      	ldr	r3, [pc, #20]	; (96d78 <DD_SET_FLOW_PATH+0x2d0>)
   96d64:	4798      	blx	r3
   96d66:	2012      	movs	r0, #18
   96d68:	4b03      	ldr	r3, [pc, #12]	; (96d78 <DD_SET_FLOW_PATH+0x2d0>)
   96d6a:	4798      	blx	r3
   96d6c:	e185      	b.n	9707a <DD_SET_FLOW_PATH+0x5d2>
   96d6e:	bf00      	nop
   96d70:	000962f1 	.word	0x000962f1
   96d74:	00095eb1 	.word	0x00095eb1
   96d78:	00096229 	.word	0x00096229
   96d7c:	00095d11 	.word	0x00095d11
   96d80:	00091e2d 	.word	0x00091e2d
   96d84:	2005      	movs	r0, #5
   96d86:	4b96      	ldr	r3, [pc, #600]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96d88:	4798      	blx	r3
   96d8a:	2008      	movs	r0, #8
   96d8c:	4b94      	ldr	r3, [pc, #592]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96d8e:	4798      	blx	r3
   96d90:	200a      	movs	r0, #10
   96d92:	4b93      	ldr	r3, [pc, #588]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96d94:	4798      	blx	r3
   96d96:	200b      	movs	r0, #11
   96d98:	4b91      	ldr	r3, [pc, #580]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96d9a:	4798      	blx	r3
   96d9c:	2064      	movs	r0, #100	; 0x64
   96d9e:	4b91      	ldr	r3, [pc, #580]	; (96fe4 <DD_SET_FLOW_PATH+0x53c>)
   96da0:	4798      	blx	r3
   96da2:	2006      	movs	r0, #6
   96da4:	4b90      	ldr	r3, [pc, #576]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96da6:	4798      	blx	r3
   96da8:	2007      	movs	r0, #7
   96daa:	4b8f      	ldr	r3, [pc, #572]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96dac:	4798      	blx	r3
   96dae:	2009      	movs	r0, #9
   96db0:	4b8d      	ldr	r3, [pc, #564]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96db2:	4798      	blx	r3
   96db4:	200c      	movs	r0, #12
   96db6:	4b8c      	ldr	r3, [pc, #560]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96db8:	4798      	blx	r3
   96dba:	4b8c      	ldr	r3, [pc, #560]	; (96fec <DD_SET_FLOW_PATH+0x544>)
   96dbc:	781b      	ldrb	r3, [r3, #0]
   96dbe:	2b00      	cmp	r3, #0
   96dc0:	d010      	beq.n	96de4 <DD_SET_FLOW_PATH+0x33c>
   96dc2:	4b8b      	ldr	r3, [pc, #556]	; (96ff0 <DD_SET_FLOW_PATH+0x548>)
   96dc4:	781b      	ldrb	r3, [r3, #0]
   96dc6:	f083 0301 	eor.w	r3, r3, #1
   96dca:	b2db      	uxtb	r3, r3
   96dcc:	2b00      	cmp	r3, #0
   96dce:	d009      	beq.n	96de4 <DD_SET_FLOW_PATH+0x33c>
   96dd0:	200f      	movs	r0, #15
   96dd2:	4b85      	ldr	r3, [pc, #532]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96dd4:	4798      	blx	r3
   96dd6:	200d      	movs	r0, #13
   96dd8:	4b81      	ldr	r3, [pc, #516]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96dda:	4798      	blx	r3
   96ddc:	200e      	movs	r0, #14
   96dde:	4b80      	ldr	r3, [pc, #512]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96de0:	4798      	blx	r3
   96de2:	e016      	b.n	96e12 <DD_SET_FLOW_PATH+0x36a>
   96de4:	4b82      	ldr	r3, [pc, #520]	; (96ff0 <DD_SET_FLOW_PATH+0x548>)
   96de6:	781b      	ldrb	r3, [r3, #0]
   96de8:	2b00      	cmp	r3, #0
   96dea:	d009      	beq.n	96e00 <DD_SET_FLOW_PATH+0x358>
   96dec:	200f      	movs	r0, #15
   96dee:	4b7e      	ldr	r3, [pc, #504]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96df0:	4798      	blx	r3
   96df2:	200d      	movs	r0, #13
   96df4:	4b7a      	ldr	r3, [pc, #488]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96df6:	4798      	blx	r3
   96df8:	200e      	movs	r0, #14
   96dfa:	4b7b      	ldr	r3, [pc, #492]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96dfc:	4798      	blx	r3
   96dfe:	e008      	b.n	96e12 <DD_SET_FLOW_PATH+0x36a>
   96e00:	200f      	movs	r0, #15
   96e02:	4b77      	ldr	r3, [pc, #476]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96e04:	4798      	blx	r3
   96e06:	200d      	movs	r0, #13
   96e08:	4b77      	ldr	r3, [pc, #476]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96e0a:	4798      	blx	r3
   96e0c:	200e      	movs	r0, #14
   96e0e:	4b76      	ldr	r3, [pc, #472]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96e10:	4798      	blx	r3
   96e12:	4b78      	ldr	r3, [pc, #480]	; (96ff4 <DD_SET_FLOW_PATH+0x54c>)
   96e14:	781b      	ldrb	r3, [r3, #0]
   96e16:	2b00      	cmp	r3, #0
   96e18:	d006      	beq.n	96e28 <DD_SET_FLOW_PATH+0x380>
   96e1a:	2010      	movs	r0, #16
   96e1c:	4b72      	ldr	r3, [pc, #456]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96e1e:	4798      	blx	r3
   96e20:	2012      	movs	r0, #18
   96e22:	4b6f      	ldr	r3, [pc, #444]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96e24:	4798      	blx	r3
   96e26:	e128      	b.n	9707a <DD_SET_FLOW_PATH+0x5d2>
   96e28:	2010      	movs	r0, #16
   96e2a:	4b6d      	ldr	r3, [pc, #436]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96e2c:	4798      	blx	r3
   96e2e:	2012      	movs	r0, #18
   96e30:	4b6d      	ldr	r3, [pc, #436]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96e32:	4798      	blx	r3
   96e34:	e121      	b.n	9707a <DD_SET_FLOW_PATH+0x5d2>
   96e36:	2006      	movs	r0, #6
   96e38:	4b69      	ldr	r3, [pc, #420]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96e3a:	4798      	blx	r3
   96e3c:	2007      	movs	r0, #7
   96e3e:	4b68      	ldr	r3, [pc, #416]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96e40:	4798      	blx	r3
   96e42:	2009      	movs	r0, #9
   96e44:	4b66      	ldr	r3, [pc, #408]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96e46:	4798      	blx	r3
   96e48:	200c      	movs	r0, #12
   96e4a:	4b65      	ldr	r3, [pc, #404]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96e4c:	4798      	blx	r3
   96e4e:	2064      	movs	r0, #100	; 0x64
   96e50:	4b64      	ldr	r3, [pc, #400]	; (96fe4 <DD_SET_FLOW_PATH+0x53c>)
   96e52:	4798      	blx	r3
   96e54:	2005      	movs	r0, #5
   96e56:	4b64      	ldr	r3, [pc, #400]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96e58:	4798      	blx	r3
   96e5a:	2008      	movs	r0, #8
   96e5c:	4b62      	ldr	r3, [pc, #392]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96e5e:	4798      	blx	r3
   96e60:	200a      	movs	r0, #10
   96e62:	4b61      	ldr	r3, [pc, #388]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96e64:	4798      	blx	r3
   96e66:	200b      	movs	r0, #11
   96e68:	4b5f      	ldr	r3, [pc, #380]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96e6a:	4798      	blx	r3
   96e6c:	4b5f      	ldr	r3, [pc, #380]	; (96fec <DD_SET_FLOW_PATH+0x544>)
   96e6e:	781b      	ldrb	r3, [r3, #0]
   96e70:	2b00      	cmp	r3, #0
   96e72:	d010      	beq.n	96e96 <DD_SET_FLOW_PATH+0x3ee>
   96e74:	4b5e      	ldr	r3, [pc, #376]	; (96ff0 <DD_SET_FLOW_PATH+0x548>)
   96e76:	781b      	ldrb	r3, [r3, #0]
   96e78:	f083 0301 	eor.w	r3, r3, #1
   96e7c:	b2db      	uxtb	r3, r3
   96e7e:	2b00      	cmp	r3, #0
   96e80:	d009      	beq.n	96e96 <DD_SET_FLOW_PATH+0x3ee>
   96e82:	200f      	movs	r0, #15
   96e84:	4b58      	ldr	r3, [pc, #352]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96e86:	4798      	blx	r3
   96e88:	200d      	movs	r0, #13
   96e8a:	4b55      	ldr	r3, [pc, #340]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96e8c:	4798      	blx	r3
   96e8e:	200e      	movs	r0, #14
   96e90:	4b53      	ldr	r3, [pc, #332]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96e92:	4798      	blx	r3
   96e94:	e016      	b.n	96ec4 <DD_SET_FLOW_PATH+0x41c>
   96e96:	4b56      	ldr	r3, [pc, #344]	; (96ff0 <DD_SET_FLOW_PATH+0x548>)
   96e98:	781b      	ldrb	r3, [r3, #0]
   96e9a:	2b00      	cmp	r3, #0
   96e9c:	d009      	beq.n	96eb2 <DD_SET_FLOW_PATH+0x40a>
   96e9e:	200f      	movs	r0, #15
   96ea0:	4b51      	ldr	r3, [pc, #324]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96ea2:	4798      	blx	r3
   96ea4:	200d      	movs	r0, #13
   96ea6:	4b4e      	ldr	r3, [pc, #312]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96ea8:	4798      	blx	r3
   96eaa:	200e      	movs	r0, #14
   96eac:	4b4e      	ldr	r3, [pc, #312]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96eae:	4798      	blx	r3
   96eb0:	e008      	b.n	96ec4 <DD_SET_FLOW_PATH+0x41c>
   96eb2:	200f      	movs	r0, #15
   96eb4:	4b4a      	ldr	r3, [pc, #296]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96eb6:	4798      	blx	r3
   96eb8:	200d      	movs	r0, #13
   96eba:	4b4b      	ldr	r3, [pc, #300]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96ebc:	4798      	blx	r3
   96ebe:	200e      	movs	r0, #14
   96ec0:	4b49      	ldr	r3, [pc, #292]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96ec2:	4798      	blx	r3
   96ec4:	4b4b      	ldr	r3, [pc, #300]	; (96ff4 <DD_SET_FLOW_PATH+0x54c>)
   96ec6:	781b      	ldrb	r3, [r3, #0]
   96ec8:	2b00      	cmp	r3, #0
   96eca:	d006      	beq.n	96eda <DD_SET_FLOW_PATH+0x432>
   96ecc:	2010      	movs	r0, #16
   96ece:	4b46      	ldr	r3, [pc, #280]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96ed0:	4798      	blx	r3
   96ed2:	2012      	movs	r0, #18
   96ed4:	4b42      	ldr	r3, [pc, #264]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96ed6:	4798      	blx	r3
   96ed8:	e0cf      	b.n	9707a <DD_SET_FLOW_PATH+0x5d2>
   96eda:	2012      	movs	r0, #18
   96edc:	4b42      	ldr	r3, [pc, #264]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96ede:	4798      	blx	r3
   96ee0:	2010      	movs	r0, #16
   96ee2:	4b3f      	ldr	r3, [pc, #252]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96ee4:	4798      	blx	r3
   96ee6:	e0c8      	b.n	9707a <DD_SET_FLOW_PATH+0x5d2>
   96ee8:	2004      	movs	r0, #4
   96eea:	4b3d      	ldr	r3, [pc, #244]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96eec:	4798      	blx	r3
   96eee:	2005      	movs	r0, #5
   96ef0:	4b3d      	ldr	r3, [pc, #244]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96ef2:	4798      	blx	r3
   96ef4:	2006      	movs	r0, #6
   96ef6:	4b3c      	ldr	r3, [pc, #240]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96ef8:	4798      	blx	r3
   96efa:	2007      	movs	r0, #7
   96efc:	4b3a      	ldr	r3, [pc, #232]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96efe:	4798      	blx	r3
   96f00:	2008      	movs	r0, #8
   96f02:	4b39      	ldr	r3, [pc, #228]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96f04:	4798      	blx	r3
   96f06:	2009      	movs	r0, #9
   96f08:	4b37      	ldr	r3, [pc, #220]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96f0a:	4798      	blx	r3
   96f0c:	200a      	movs	r0, #10
   96f0e:	4b36      	ldr	r3, [pc, #216]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96f10:	4798      	blx	r3
   96f12:	200b      	movs	r0, #11
   96f14:	4b34      	ldr	r3, [pc, #208]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96f16:	4798      	blx	r3
   96f18:	200c      	movs	r0, #12
   96f1a:	4b33      	ldr	r3, [pc, #204]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96f1c:	4798      	blx	r3
   96f1e:	200d      	movs	r0, #13
   96f20:	4b31      	ldr	r3, [pc, #196]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96f22:	4798      	blx	r3
   96f24:	200e      	movs	r0, #14
   96f26:	4b30      	ldr	r3, [pc, #192]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96f28:	4798      	blx	r3
   96f2a:	200f      	movs	r0, #15
   96f2c:	4b2e      	ldr	r3, [pc, #184]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96f2e:	4798      	blx	r3
   96f30:	2010      	movs	r0, #16
   96f32:	4b2b      	ldr	r3, [pc, #172]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96f34:	4798      	blx	r3
   96f36:	2011      	movs	r0, #17
   96f38:	4b2b      	ldr	r3, [pc, #172]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96f3a:	4798      	blx	r3
   96f3c:	2012      	movs	r0, #18
   96f3e:	4b2a      	ldr	r3, [pc, #168]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96f40:	4798      	blx	r3
   96f42:	2013      	movs	r0, #19
   96f44:	4b26      	ldr	r3, [pc, #152]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96f46:	4798      	blx	r3
   96f48:	e097      	b.n	9707a <DD_SET_FLOW_PATH+0x5d2>
   96f4a:	2005      	movs	r0, #5
   96f4c:	4b24      	ldr	r3, [pc, #144]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96f4e:	4798      	blx	r3
   96f50:	2008      	movs	r0, #8
   96f52:	4b23      	ldr	r3, [pc, #140]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96f54:	4798      	blx	r3
   96f56:	200a      	movs	r0, #10
   96f58:	4b21      	ldr	r3, [pc, #132]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96f5a:	4798      	blx	r3
   96f5c:	200b      	movs	r0, #11
   96f5e:	4b20      	ldr	r3, [pc, #128]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96f60:	4798      	blx	r3
   96f62:	2064      	movs	r0, #100	; 0x64
   96f64:	4b1f      	ldr	r3, [pc, #124]	; (96fe4 <DD_SET_FLOW_PATH+0x53c>)
   96f66:	4798      	blx	r3
   96f68:	2006      	movs	r0, #6
   96f6a:	4b1f      	ldr	r3, [pc, #124]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96f6c:	4798      	blx	r3
   96f6e:	2007      	movs	r0, #7
   96f70:	4b1d      	ldr	r3, [pc, #116]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96f72:	4798      	blx	r3
   96f74:	2009      	movs	r0, #9
   96f76:	4b1c      	ldr	r3, [pc, #112]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96f78:	4798      	blx	r3
   96f7a:	200c      	movs	r0, #12
   96f7c:	4b1a      	ldr	r3, [pc, #104]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96f7e:	4798      	blx	r3
   96f80:	2010      	movs	r0, #16
   96f82:	4b19      	ldr	r3, [pc, #100]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96f84:	4798      	blx	r3
   96f86:	200f      	movs	r0, #15
   96f88:	4b15      	ldr	r3, [pc, #84]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96f8a:	4798      	blx	r3
   96f8c:	2012      	movs	r0, #18
   96f8e:	4b14      	ldr	r3, [pc, #80]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96f90:	4798      	blx	r3
   96f92:	e072      	b.n	9707a <DD_SET_FLOW_PATH+0x5d2>
   96f94:	2006      	movs	r0, #6
   96f96:	4b12      	ldr	r3, [pc, #72]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96f98:	4798      	blx	r3
   96f9a:	2007      	movs	r0, #7
   96f9c:	4b10      	ldr	r3, [pc, #64]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96f9e:	4798      	blx	r3
   96fa0:	2009      	movs	r0, #9
   96fa2:	4b0f      	ldr	r3, [pc, #60]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96fa4:	4798      	blx	r3
   96fa6:	200c      	movs	r0, #12
   96fa8:	4b0d      	ldr	r3, [pc, #52]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96faa:	4798      	blx	r3
   96fac:	2064      	movs	r0, #100	; 0x64
   96fae:	4b0d      	ldr	r3, [pc, #52]	; (96fe4 <DD_SET_FLOW_PATH+0x53c>)
   96fb0:	4798      	blx	r3
   96fb2:	2005      	movs	r0, #5
   96fb4:	4b0c      	ldr	r3, [pc, #48]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96fb6:	4798      	blx	r3
   96fb8:	2008      	movs	r0, #8
   96fba:	4b0b      	ldr	r3, [pc, #44]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96fbc:	4798      	blx	r3
   96fbe:	200a      	movs	r0, #10
   96fc0:	4b09      	ldr	r3, [pc, #36]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96fc2:	4798      	blx	r3
   96fc4:	200b      	movs	r0, #11
   96fc6:	4b08      	ldr	r3, [pc, #32]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96fc8:	4798      	blx	r3
   96fca:	200f      	movs	r0, #15
   96fcc:	4b04      	ldr	r3, [pc, #16]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96fce:	4798      	blx	r3
   96fd0:	2010      	movs	r0, #16
   96fd2:	4b05      	ldr	r3, [pc, #20]	; (96fe8 <DD_SET_FLOW_PATH+0x540>)
   96fd4:	4798      	blx	r3
   96fd6:	2012      	movs	r0, #18
   96fd8:	4b01      	ldr	r3, [pc, #4]	; (96fe0 <DD_SET_FLOW_PATH+0x538>)
   96fda:	4798      	blx	r3
   96fdc:	e04d      	b.n	9707a <DD_SET_FLOW_PATH+0x5d2>
   96fde:	bf00      	nop
   96fe0:	000962f1 	.word	0x000962f1
   96fe4:	00091e2d 	.word	0x00091e2d
   96fe8:	00096229 	.word	0x00096229
   96fec:	2007271e 	.word	0x2007271e
   96ff0:	200726d8 	.word	0x200726d8
   96ff4:	2007271f 	.word	0x2007271f
   96ff8:	2005      	movs	r0, #5
   96ffa:	4b22      	ldr	r3, [pc, #136]	; (97084 <DD_SET_FLOW_PATH+0x5dc>)
   96ffc:	4798      	blx	r3
   96ffe:	2006      	movs	r0, #6
   97000:	4b20      	ldr	r3, [pc, #128]	; (97084 <DD_SET_FLOW_PATH+0x5dc>)
   97002:	4798      	blx	r3
   97004:	2007      	movs	r0, #7
   97006:	4b1f      	ldr	r3, [pc, #124]	; (97084 <DD_SET_FLOW_PATH+0x5dc>)
   97008:	4798      	blx	r3
   9700a:	2008      	movs	r0, #8
   9700c:	4b1d      	ldr	r3, [pc, #116]	; (97084 <DD_SET_FLOW_PATH+0x5dc>)
   9700e:	4798      	blx	r3
   97010:	2009      	movs	r0, #9
   97012:	4b1c      	ldr	r3, [pc, #112]	; (97084 <DD_SET_FLOW_PATH+0x5dc>)
   97014:	4798      	blx	r3
   97016:	200a      	movs	r0, #10
   97018:	4b1a      	ldr	r3, [pc, #104]	; (97084 <DD_SET_FLOW_PATH+0x5dc>)
   9701a:	4798      	blx	r3
   9701c:	200b      	movs	r0, #11
   9701e:	4b19      	ldr	r3, [pc, #100]	; (97084 <DD_SET_FLOW_PATH+0x5dc>)
   97020:	4798      	blx	r3
   97022:	200c      	movs	r0, #12
   97024:	4b17      	ldr	r3, [pc, #92]	; (97084 <DD_SET_FLOW_PATH+0x5dc>)
   97026:	4798      	blx	r3
   97028:	4b17      	ldr	r3, [pc, #92]	; (97088 <DD_SET_FLOW_PATH+0x5e0>)
   9702a:	781b      	ldrb	r3, [r3, #0]
   9702c:	2b00      	cmp	r3, #0
   9702e:	d009      	beq.n	97044 <DD_SET_FLOW_PATH+0x59c>
   97030:	200f      	movs	r0, #15
   97032:	4b16      	ldr	r3, [pc, #88]	; (9708c <DD_SET_FLOW_PATH+0x5e4>)
   97034:	4798      	blx	r3
   97036:	200d      	movs	r0, #13
   97038:	4b12      	ldr	r3, [pc, #72]	; (97084 <DD_SET_FLOW_PATH+0x5dc>)
   9703a:	4798      	blx	r3
   9703c:	200e      	movs	r0, #14
   9703e:	4b11      	ldr	r3, [pc, #68]	; (97084 <DD_SET_FLOW_PATH+0x5dc>)
   97040:	4798      	blx	r3
   97042:	e008      	b.n	97056 <DD_SET_FLOW_PATH+0x5ae>
   97044:	200f      	movs	r0, #15
   97046:	4b0f      	ldr	r3, [pc, #60]	; (97084 <DD_SET_FLOW_PATH+0x5dc>)
   97048:	4798      	blx	r3
   9704a:	200d      	movs	r0, #13
   9704c:	4b0f      	ldr	r3, [pc, #60]	; (9708c <DD_SET_FLOW_PATH+0x5e4>)
   9704e:	4798      	blx	r3
   97050:	200e      	movs	r0, #14
   97052:	4b0e      	ldr	r3, [pc, #56]	; (9708c <DD_SET_FLOW_PATH+0x5e4>)
   97054:	4798      	blx	r3
   97056:	4b0e      	ldr	r3, [pc, #56]	; (97090 <DD_SET_FLOW_PATH+0x5e8>)
   97058:	781b      	ldrb	r3, [r3, #0]
   9705a:	2b00      	cmp	r3, #0
   9705c:	d006      	beq.n	9706c <DD_SET_FLOW_PATH+0x5c4>
   9705e:	2010      	movs	r0, #16
   97060:	4b0a      	ldr	r3, [pc, #40]	; (9708c <DD_SET_FLOW_PATH+0x5e4>)
   97062:	4798      	blx	r3
   97064:	2012      	movs	r0, #18
   97066:	4b07      	ldr	r3, [pc, #28]	; (97084 <DD_SET_FLOW_PATH+0x5dc>)
   97068:	4798      	blx	r3
   9706a:	e005      	b.n	97078 <DD_SET_FLOW_PATH+0x5d0>
   9706c:	2010      	movs	r0, #16
   9706e:	4b05      	ldr	r3, [pc, #20]	; (97084 <DD_SET_FLOW_PATH+0x5dc>)
   97070:	4798      	blx	r3
   97072:	2012      	movs	r0, #18
   97074:	4b05      	ldr	r3, [pc, #20]	; (9708c <DD_SET_FLOW_PATH+0x5e4>)
   97076:	4798      	blx	r3
   97078:	bf00      	nop
   9707a:	2300      	movs	r3, #0
   9707c:	4618      	mov	r0, r3
   9707e:	3708      	adds	r7, #8
   97080:	46bd      	mov	sp, r7
   97082:	bd80      	pop	{r7, pc}
   97084:	000962f1 	.word	0x000962f1
   97088:	2007271e 	.word	0x2007271e
   9708c:	00096229 	.word	0x00096229
   97090:	2007271f 	.word	0x2007271f

00097094 <DD_LATCH_STROBE_X1_X16>:
   97094:	b580      	push	{r7, lr}
   97096:	af00      	add	r7, sp, #0
   97098:	210d      	movs	r1, #13
   9709a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   9709e:	4b0c      	ldr	r3, [pc, #48]	; (970d0 <DD_LATCH_STROBE_X1_X16+0x3c>)
   970a0:	4798      	blx	r3
   970a2:	2002      	movs	r0, #2
   970a4:	4b0b      	ldr	r3, [pc, #44]	; (970d4 <DD_LATCH_STROBE_X1_X16+0x40>)
   970a6:	4798      	blx	r3
   970a8:	210d      	movs	r1, #13
   970aa:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   970ae:	4b0a      	ldr	r3, [pc, #40]	; (970d8 <DD_LATCH_STROBE_X1_X16+0x44>)
   970b0:	4798      	blx	r3
   970b2:	2002      	movs	r0, #2
   970b4:	4b07      	ldr	r3, [pc, #28]	; (970d4 <DD_LATCH_STROBE_X1_X16+0x40>)
   970b6:	4798      	blx	r3
   970b8:	210d      	movs	r1, #13
   970ba:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   970be:	4b04      	ldr	r3, [pc, #16]	; (970d0 <DD_LATCH_STROBE_X1_X16+0x3c>)
   970c0:	4798      	blx	r3
   970c2:	2002      	movs	r0, #2
   970c4:	4b03      	ldr	r3, [pc, #12]	; (970d4 <DD_LATCH_STROBE_X1_X16+0x40>)
   970c6:	4798      	blx	r3
   970c8:	2300      	movs	r3, #0
   970ca:	4618      	mov	r0, r3
   970cc:	bd80      	pop	{r7, pc}
   970ce:	bf00      	nop
   970d0:	00094dd5 	.word	0x00094dd5
   970d4:	00091e2d 	.word	0x00091e2d
   970d8:	00094d51 	.word	0x00094d51

000970dc <DD_LATCH_STROBE_X17_X20>:
   970dc:	b580      	push	{r7, lr}
   970de:	af00      	add	r7, sp, #0
   970e0:	210b      	movs	r1, #11
   970e2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   970e6:	4b0c      	ldr	r3, [pc, #48]	; (97118 <DD_LATCH_STROBE_X17_X20+0x3c>)
   970e8:	4798      	blx	r3
   970ea:	2002      	movs	r0, #2
   970ec:	4b0b      	ldr	r3, [pc, #44]	; (9711c <DD_LATCH_STROBE_X17_X20+0x40>)
   970ee:	4798      	blx	r3
   970f0:	210b      	movs	r1, #11
   970f2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   970f6:	4b0a      	ldr	r3, [pc, #40]	; (97120 <DD_LATCH_STROBE_X17_X20+0x44>)
   970f8:	4798      	blx	r3
   970fa:	2002      	movs	r0, #2
   970fc:	4b07      	ldr	r3, [pc, #28]	; (9711c <DD_LATCH_STROBE_X17_X20+0x40>)
   970fe:	4798      	blx	r3
   97100:	210b      	movs	r1, #11
   97102:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   97106:	4b04      	ldr	r3, [pc, #16]	; (97118 <DD_LATCH_STROBE_X17_X20+0x3c>)
   97108:	4798      	blx	r3
   9710a:	2002      	movs	r0, #2
   9710c:	4b03      	ldr	r3, [pc, #12]	; (9711c <DD_LATCH_STROBE_X17_X20+0x40>)
   9710e:	4798      	blx	r3
   97110:	2300      	movs	r3, #0
   97112:	4618      	mov	r0, r3
   97114:	bd80      	pop	{r7, pc}
   97116:	bf00      	nop
   97118:	00094dd5 	.word	0x00094dd5
   9711c:	00091e2d 	.word	0x00091e2d
   97120:	00094d51 	.word	0x00094d51

00097124 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   97124:	b480      	push	{r7}
   97126:	b083      	sub	sp, #12
   97128:	af00      	add	r7, sp, #0
   9712a:	4603      	mov	r3, r0
   9712c:	6039      	str	r1, [r7, #0]
   9712e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   97130:	f997 3007 	ldrsb.w	r3, [r7, #7]
   97134:	2b00      	cmp	r3, #0
   97136:	da0b      	bge.n	97150 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   97138:	490d      	ldr	r1, [pc, #52]	; (97170 <NVIC_SetPriority+0x4c>)
   9713a:	79fb      	ldrb	r3, [r7, #7]
   9713c:	f003 030f 	and.w	r3, r3, #15
   97140:	3b04      	subs	r3, #4
   97142:	683a      	ldr	r2, [r7, #0]
   97144:	b2d2      	uxtb	r2, r2
   97146:	0112      	lsls	r2, r2, #4
   97148:	b2d2      	uxtb	r2, r2
   9714a:	440b      	add	r3, r1
   9714c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   9714e:	e009      	b.n	97164 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   97150:	4908      	ldr	r1, [pc, #32]	; (97174 <NVIC_SetPriority+0x50>)
   97152:	f997 3007 	ldrsb.w	r3, [r7, #7]
   97156:	683a      	ldr	r2, [r7, #0]
   97158:	b2d2      	uxtb	r2, r2
   9715a:	0112      	lsls	r2, r2, #4
   9715c:	b2d2      	uxtb	r2, r2
   9715e:	440b      	add	r3, r1
   97160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   97164:	bf00      	nop
   97166:	370c      	adds	r7, #12
   97168:	46bd      	mov	sp, r7
   9716a:	bc80      	pop	{r7}
   9716c:	4770      	bx	lr
   9716e:	bf00      	nop
   97170:	e000ed00 	.word	0xe000ed00
   97174:	e000e100 	.word	0xe000e100

00097178 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b> 
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   97178:	b580      	push	{r7, lr}
   9717a:	b082      	sub	sp, #8
   9717c:	af00      	add	r7, sp, #0
   9717e:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
   97180:	687b      	ldr	r3, [r7, #4]
   97182:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   97186:	d301      	bcc.n	9718c <SysTick_Config+0x14>
   97188:	2301      	movs	r3, #1
   9718a:	e011      	b.n	971b0 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
   9718c:	4a0a      	ldr	r2, [pc, #40]	; (971b8 <SysTick_Config+0x40>)
   9718e:	687b      	ldr	r3, [r7, #4]
   97190:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   97194:	3b01      	subs	r3, #1
   97196:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   97198:	210f      	movs	r1, #15
   9719a:	f04f 30ff 	mov.w	r0, #4294967295
   9719e:	4b07      	ldr	r3, [pc, #28]	; (971bc <SysTick_Config+0x44>)
   971a0:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   971a2:	4b05      	ldr	r3, [pc, #20]	; (971b8 <SysTick_Config+0x40>)
   971a4:	2200      	movs	r2, #0
   971a6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   971a8:	4b03      	ldr	r3, [pc, #12]	; (971b8 <SysTick_Config+0x40>)
   971aa:	2207      	movs	r2, #7
   971ac:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   971ae:	2300      	movs	r3, #0
}
   971b0:	4618      	mov	r0, r3
   971b2:	3708      	adds	r7, #8
   971b4:	46bd      	mov	sp, r7
   971b6:	bd80      	pop	{r7, pc}
   971b8:	e000e010 	.word	0xe000e010
   971bc:	00097125 	.word	0x00097125

000971c0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   971c0:	b480      	push	{r7}
   971c2:	b083      	sub	sp, #12
   971c4:	af00      	add	r7, sp, #0
   971c6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   971c8:	687b      	ldr	r3, [r7, #4]
   971ca:	2b07      	cmp	r3, #7
   971cc:	d825      	bhi.n	9721a <osc_get_rate+0x5a>
   971ce:	a201      	add	r2, pc, #4	; (adr r2, 971d4 <osc_get_rate+0x14>)
   971d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   971d4:	000971f5 	.word	0x000971f5
   971d8:	000971fb 	.word	0x000971fb
   971dc:	00097201 	.word	0x00097201
   971e0:	00097207 	.word	0x00097207
   971e4:	0009720b 	.word	0x0009720b
   971e8:	0009720f 	.word	0x0009720f
   971ec:	00097213 	.word	0x00097213
   971f0:	00097217 	.word	0x00097217
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   971f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   971f8:	e010      	b.n	9721c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   971fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   971fe:	e00d      	b.n	9721c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   97200:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   97204:	e00a      	b.n	9721c <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   97206:	4b08      	ldr	r3, [pc, #32]	; (97228 <osc_get_rate+0x68>)
   97208:	e008      	b.n	9721c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   9720a:	4b08      	ldr	r3, [pc, #32]	; (9722c <osc_get_rate+0x6c>)
   9720c:	e006      	b.n	9721c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   9720e:	4b08      	ldr	r3, [pc, #32]	; (97230 <osc_get_rate+0x70>)
   97210:	e004      	b.n	9721c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   97212:	4b07      	ldr	r3, [pc, #28]	; (97230 <osc_get_rate+0x70>)
   97214:	e002      	b.n	9721c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   97216:	4b06      	ldr	r3, [pc, #24]	; (97230 <osc_get_rate+0x70>)
   97218:	e000      	b.n	9721c <osc_get_rate+0x5c>
#endif
	}

	return 0;
   9721a:	2300      	movs	r3, #0
}
   9721c:	4618      	mov	r0, r3
   9721e:	370c      	adds	r7, #12
   97220:	46bd      	mov	sp, r7
   97222:	bc80      	pop	{r7}
   97224:	4770      	bx	lr
   97226:	bf00      	nop
   97228:	003d0900 	.word	0x003d0900
   9722c:	007a1200 	.word	0x007a1200
   97230:	00b71b00 	.word	0x00b71b00

00097234 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   97234:	b580      	push	{r7, lr}
   97236:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   97238:	2006      	movs	r0, #6
   9723a:	4b04      	ldr	r3, [pc, #16]	; (9724c <sysclk_get_main_hz+0x18>)
   9723c:	4798      	blx	r3
   9723e:	4602      	mov	r2, r0
   97240:	4613      	mov	r3, r2
   97242:	00db      	lsls	r3, r3, #3
   97244:	1a9b      	subs	r3, r3, r2
   97246:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   97248:	4618      	mov	r0, r3
   9724a:	bd80      	pop	{r7, pc}
   9724c:	000971c1 	.word	0x000971c1

00097250 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   97250:	b580      	push	{r7, lr}
   97252:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   97254:	4b02      	ldr	r3, [pc, #8]	; (97260 <sysclk_get_cpu_hz+0x10>)
   97256:	4798      	blx	r3
   97258:	4603      	mov	r3, r0
   9725a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   9725c:	4618      	mov	r0, r3
   9725e:	bd80      	pop	{r7, pc}
   97260:	00097235 	.word	0x00097235

00097264 <DD_INIT_TIMER>:
 */ 
#include "DD_TIMER.h"


void DD_INIT_TIMER()
{
   97264:	b580      	push	{r7, lr}
   97266:	af00      	add	r7, sp, #0
	TC0->TC_WPMR = 0x54494D00;
   97268:	4b15      	ldr	r3, [pc, #84]	; (972c0 <DD_INIT_TIMER+0x5c>)
   9726a:	4a16      	ldr	r2, [pc, #88]	; (972c4 <DD_INIT_TIMER+0x60>)
   9726c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC1->TC_WPMR = 0x54494D00;
   97270:	4b15      	ldr	r3, [pc, #84]	; (972c8 <DD_INIT_TIMER+0x64>)
   97272:	4a14      	ldr	r2, [pc, #80]	; (972c4 <DD_INIT_TIMER+0x60>)
   97274:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC2->TC_WPMR = 0x54494D00;
   97278:	4b14      	ldr	r3, [pc, #80]	; (972cc <DD_INIT_TIMER+0x68>)
   9727a:	4a12      	ldr	r2, [pc, #72]	; (972c4 <DD_INIT_TIMER+0x60>)
   9727c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	pmc_enable_periph_clk(ID_TC0);
   97280:	201b      	movs	r0, #27
   97282:	4b13      	ldr	r3, [pc, #76]	; (972d0 <DD_INIT_TIMER+0x6c>)
   97284:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   97286:	201c      	movs	r0, #28
   97288:	4b11      	ldr	r3, [pc, #68]	; (972d0 <DD_INIT_TIMER+0x6c>)
   9728a:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC2);
   9728c:	201d      	movs	r0, #29
   9728e:	4b10      	ldr	r3, [pc, #64]	; (972d0 <DD_INIT_TIMER+0x6c>)
   97290:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   97292:	4b0b      	ldr	r3, [pc, #44]	; (972c0 <DD_INIT_TIMER+0x5c>)
   97294:	f24c 0203 	movw	r2, #49155	; 0xc003
   97298:	605a      	str	r2, [r3, #4]
	//TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   9729a:	4b0b      	ldr	r3, [pc, #44]	; (972c8 <DD_INIT_TIMER+0x64>)
   9729c:	f24c 0203 	movw	r2, #49155	; 0xc003
   972a0:	605a      	str	r2, [r3, #4]
	//TC1->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC1->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   972a2:	4b0a      	ldr	r3, [pc, #40]	; (972cc <DD_INIT_TIMER+0x68>)
   972a4:	f24c 0203 	movw	r2, #49155	; 0xc003
   972a8:	605a      	str	r2, [r3, #4]
	//TC2->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC2->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	
	TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   972aa:	4b05      	ldr	r3, [pc, #20]	; (972c0 <DD_INIT_TIMER+0x5c>)
   972ac:	2210      	movs	r2, #16
   972ae:	625a      	str	r2, [r3, #36]	; 0x24
	
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   972b0:	4b05      	ldr	r3, [pc, #20]	; (972c8 <DD_INIT_TIMER+0x64>)
   972b2:	2210      	movs	r2, #16
   972b4:	625a      	str	r2, [r3, #36]	; 0x24
//	TC1->TC_CHANNEL[0].TC_IDR = 0xef;		//TC_IDR_COVFS|TC_IDR_CPAS|TC_IDR_ETRGS|TC_IDR_LDRAS|TC_IDR_CPBS|TC_IDR_LDRBS|TC_IDR_LOVRS;
//	TC1->TC_CHANNEL[0].TC_IMR = 0x10;//0x00 | TC_IMR_CPCS;
	
	TC2->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   972b6:	4b05      	ldr	r3, [pc, #20]	; (972cc <DD_INIT_TIMER+0x68>)
   972b8:	2210      	movs	r2, #16
   972ba:	625a      	str	r2, [r3, #36]	; 0x24
//	TC2->TC_CHANNEL[0].TC_IDR = TC_IDR_COVFS|TC_IDR_CPAS|TC_IDR_ETRGS|TC_IDR_LDRAS|TC_IDR_CPBS|TC_IDR_LDRBS|TC_IDR_LOVRS;
//	TC2->TC_CHANNEL[0].TC_IMR = 0x00 | TC_IMR_CPCS;
	
}
   972bc:	bf00      	nop
   972be:	bd80      	pop	{r7, pc}
   972c0:	40080000 	.word	0x40080000
   972c4:	54494d00 	.word	0x54494d00
   972c8:	40084000 	.word	0x40084000
   972cc:	40088000 	.word	0x40088000
   972d0:	00098af1 	.word	0x00098af1

000972d4 <DD_SET_TIMER>:




uint8_t DD_SET_TIMER(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t rc)
{
   972d4:	b580      	push	{r7, lr}
   972d6:	b084      	sub	sp, #16
   972d8:	af00      	add	r7, sp, #0
   972da:	60f8      	str	r0, [r7, #12]
   972dc:	60b9      	str	r1, [r7, #8]
   972de:	603b      	str	r3, [r7, #0]
   972e0:	4613      	mov	r3, r2
   972e2:	71fb      	strb	r3, [r7, #7]
	//printf("inside timer");
	//uint32_t rc = 0; 
	pmc_set_writeprotect(0);
   972e4:	2000      	movs	r0, #0
   972e6:	4b16      	ldr	r3, [pc, #88]	; (97340 <DD_SET_TIMER+0x6c>)
   972e8:	4798      	blx	r3
	channel=0;
   972ea:	2300      	movs	r3, #0
   972ec:	60bb      	str	r3, [r7, #8]
//	pmc_enable_periph_clk(ID_TC6);
	//tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   972ee:	4b15      	ldr	r3, [pc, #84]	; (97344 <DD_SET_TIMER+0x70>)
   972f0:	f24c 0203 	movw	r2, #49155	; 0xc003
   972f4:	605a      	str	r2, [r3, #4]
//	rc=656249; //value to get 1sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
	tc_write_rc(tc, channel, rc);
   972f6:	683a      	ldr	r2, [r7, #0]
   972f8:	68b9      	ldr	r1, [r7, #8]
   972fa:	68f8      	ldr	r0, [r7, #12]
   972fc:	4b12      	ldr	r3, [pc, #72]	; (97348 <DD_SET_TIMER+0x74>)
   972fe:	4798      	blx	r3
	tc_start(tc, channel);
   97300:	68b9      	ldr	r1, [r7, #8]
   97302:	68f8      	ldr	r0, [r7, #12]
   97304:	4b11      	ldr	r3, [pc, #68]	; (9734c <DD_SET_TIMER+0x78>)
   97306:	4798      	blx	r3
	tc_enable_interrupt(tc, channel, TC_IER_CPCS);
   97308:	2210      	movs	r2, #16
   9730a:	68b9      	ldr	r1, [r7, #8]
   9730c:	68f8      	ldr	r0, [r7, #12]
   9730e:	4b10      	ldr	r3, [pc, #64]	; (97350 <DD_SET_TIMER+0x7c>)
   97310:	4798      	blx	r3
//	tc_write_rc(TC2, channel, rc);
//	tc_start(TC2, channel);
	if (SysTick_Config(sysclk_get_cpu_hz() / 1000)) {
   97312:	4b10      	ldr	r3, [pc, #64]	; (97354 <DD_SET_TIMER+0x80>)
   97314:	4798      	blx	r3
   97316:	4602      	mov	r2, r0
   97318:	4b0f      	ldr	r3, [pc, #60]	; (97358 <DD_SET_TIMER+0x84>)
   9731a:	fba3 2302 	umull	r2, r3, r3, r2
   9731e:	099b      	lsrs	r3, r3, #6
   97320:	4618      	mov	r0, r3
   97322:	4b0e      	ldr	r3, [pc, #56]	; (9735c <DD_SET_TIMER+0x88>)
   97324:	4798      	blx	r3
   97326:	4603      	mov	r3, r0
   97328:	2b00      	cmp	r3, #0
   9732a:	d003      	beq.n	97334 <DD_SET_TIMER+0x60>
		puts("-F- Systick configuration error\r");
   9732c:	480c      	ldr	r0, [pc, #48]	; (97360 <DD_SET_TIMER+0x8c>)
   9732e:	4b0d      	ldr	r3, [pc, #52]	; (97364 <DD_SET_TIMER+0x90>)
   97330:	4798      	blx	r3
		while (1);
   97332:	e7fe      	b.n	97332 <DD_SET_TIMER+0x5e>
	}
	
}
   97334:	bf00      	nop
   97336:	4618      	mov	r0, r3
   97338:	3710      	adds	r7, #16
   9733a:	46bd      	mov	sp, r7
   9733c:	bd80      	pop	{r7, pc}
   9733e:	bf00      	nop
   97340:	00098b71 	.word	0x00098b71
   97344:	40088000 	.word	0x40088000
   97348:	00098bc9 	.word	0x00098bc9
   9734c:	00098ba9 	.word	0x00098ba9
   97350:	00098bed 	.word	0x00098bed
   97354:	00097251 	.word	0x00097251
   97358:	10624dd3 	.word	0x10624dd3
   9735c:	00097179 	.word	0x00097179
   97360:	000a6248 	.word	0x000a6248
   97364:	000a446d 	.word	0x000a446d

00097368 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   97368:	b480      	push	{r7}
   9736a:	b083      	sub	sp, #12
   9736c:	af00      	add	r7, sp, #0
   9736e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   97370:	687b      	ldr	r3, [r7, #4]
   97372:	2b07      	cmp	r3, #7
   97374:	d825      	bhi.n	973c2 <osc_get_rate+0x5a>
   97376:	a201      	add	r2, pc, #4	; (adr r2, 9737c <osc_get_rate+0x14>)
   97378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9737c:	0009739d 	.word	0x0009739d
   97380:	000973a3 	.word	0x000973a3
   97384:	000973a9 	.word	0x000973a9
   97388:	000973af 	.word	0x000973af
   9738c:	000973b3 	.word	0x000973b3
   97390:	000973b7 	.word	0x000973b7
   97394:	000973bb 	.word	0x000973bb
   97398:	000973bf 	.word	0x000973bf
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   9739c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   973a0:	e010      	b.n	973c4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   973a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   973a6:	e00d      	b.n	973c4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   973a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   973ac:	e00a      	b.n	973c4 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   973ae:	4b08      	ldr	r3, [pc, #32]	; (973d0 <osc_get_rate+0x68>)
   973b0:	e008      	b.n	973c4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   973b2:	4b08      	ldr	r3, [pc, #32]	; (973d4 <osc_get_rate+0x6c>)
   973b4:	e006      	b.n	973c4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   973b6:	4b08      	ldr	r3, [pc, #32]	; (973d8 <osc_get_rate+0x70>)
   973b8:	e004      	b.n	973c4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   973ba:	4b07      	ldr	r3, [pc, #28]	; (973d8 <osc_get_rate+0x70>)
   973bc:	e002      	b.n	973c4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   973be:	4b06      	ldr	r3, [pc, #24]	; (973d8 <osc_get_rate+0x70>)
   973c0:	e000      	b.n	973c4 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   973c2:	2300      	movs	r3, #0
}
   973c4:	4618      	mov	r0, r3
   973c6:	370c      	adds	r7, #12
   973c8:	46bd      	mov	sp, r7
   973ca:	bc80      	pop	{r7}
   973cc:	4770      	bx	lr
   973ce:	bf00      	nop
   973d0:	003d0900 	.word	0x003d0900
   973d4:	007a1200 	.word	0x007a1200
   973d8:	00b71b00 	.word	0x00b71b00

000973dc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   973dc:	b580      	push	{r7, lr}
   973de:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   973e0:	2006      	movs	r0, #6
   973e2:	4b04      	ldr	r3, [pc, #16]	; (973f4 <sysclk_get_main_hz+0x18>)
   973e4:	4798      	blx	r3
   973e6:	4602      	mov	r2, r0
   973e8:	4613      	mov	r3, r2
   973ea:	00db      	lsls	r3, r3, #3
   973ec:	1a9b      	subs	r3, r3, r2
   973ee:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   973f0:	4618      	mov	r0, r3
   973f2:	bd80      	pop	{r7, pc}
   973f4:	00097369 	.word	0x00097369

000973f8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   973f8:	b580      	push	{r7, lr}
   973fa:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   973fc:	4b02      	ldr	r3, [pc, #8]	; (97408 <sysclk_get_peripheral_hz+0x10>)
   973fe:	4798      	blx	r3
   97400:	4603      	mov	r3, r0
   97402:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   97404:	4618      	mov	r0, r3
   97406:	bd80      	pop	{r7, pc}
   97408:	000973dd 	.word	0x000973dd

0009740c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   9740c:	b580      	push	{r7, lr}
   9740e:	b082      	sub	sp, #8
   97410:	af00      	add	r7, sp, #0
   97412:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   97414:	6878      	ldr	r0, [r7, #4]
   97416:	4b03      	ldr	r3, [pc, #12]	; (97424 <sysclk_enable_peripheral_clock+0x18>)
   97418:	4798      	blx	r3
}
   9741a:	bf00      	nop
   9741c:	3708      	adds	r7, #8
   9741e:	46bd      	mov	sp, r7
   97420:	bd80      	pop	{r7, pc}
   97422:	bf00      	nop
   97424:	00098af1 	.word	0x00098af1

00097428 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   97428:	b580      	push	{r7, lr}
   9742a:	b08c      	sub	sp, #48	; 0x30
   9742c:	af00      	add	r7, sp, #0
   9742e:	6078      	str	r0, [r7, #4]
   97430:	6039      	str	r1, [r7, #0]
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   97432:	4b40      	ldr	r3, [pc, #256]	; (97534 <usart_serial_init+0x10c>)
   97434:	4798      	blx	r3
   97436:	4603      	mov	r3, r0
   97438:	623b      	str	r3, [r7, #32]
	uart_settings.ul_baudrate = opt->baudrate;
   9743a:	683b      	ldr	r3, [r7, #0]
   9743c:	681b      	ldr	r3, [r3, #0]
   9743e:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
   97440:	683b      	ldr	r3, [r7, #0]
   97442:	689b      	ldr	r3, [r3, #8]
   97444:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   97446:	683b      	ldr	r3, [r7, #0]
   97448:	681b      	ldr	r3, [r3, #0]
   9744a:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
   9744c:	683b      	ldr	r3, [r7, #0]
   9744e:	685b      	ldr	r3, [r3, #4]
   97450:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
   97452:	683b      	ldr	r3, [r7, #0]
   97454:	689b      	ldr	r3, [r3, #8]
   97456:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
   97458:	683b      	ldr	r3, [r7, #0]
   9745a:	7b1b      	ldrb	r3, [r3, #12]
   9745c:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   9745e:	2300      	movs	r3, #0
   97460:	61bb      	str	r3, [r7, #24]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   97462:	687b      	ldr	r3, [r7, #4]
   97464:	4a34      	ldr	r2, [pc, #208]	; (97538 <usart_serial_init+0x110>)
   97466:	4293      	cmp	r3, r2
   97468:	d108      	bne.n	9747c <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   9746a:	2008      	movs	r0, #8
   9746c:	4b33      	ldr	r3, [pc, #204]	; (9753c <usart_serial_init+0x114>)
   9746e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   97470:	f107 0320 	add.w	r3, r7, #32
   97474:	4619      	mov	r1, r3
   97476:	6878      	ldr	r0, [r7, #4]
   97478:	4b31      	ldr	r3, [pc, #196]	; (97540 <usart_serial_init+0x118>)
   9747a:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   9747c:	687b      	ldr	r3, [r7, #4]
   9747e:	4a31      	ldr	r2, [pc, #196]	; (97544 <usart_serial_init+0x11c>)
   97480:	4293      	cmp	r3, r2
   97482:	d111      	bne.n	974a8 <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   97484:	2011      	movs	r0, #17
   97486:	4b2d      	ldr	r3, [pc, #180]	; (9753c <usart_serial_init+0x114>)
   97488:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   9748a:	4b2a      	ldr	r3, [pc, #168]	; (97534 <usart_serial_init+0x10c>)
   9748c:	4798      	blx	r3
   9748e:	4602      	mov	r2, r0
   97490:	f107 0308 	add.w	r3, r7, #8
   97494:	4619      	mov	r1, r3
   97496:	6878      	ldr	r0, [r7, #4]
   97498:	4b2b      	ldr	r3, [pc, #172]	; (97548 <usart_serial_init+0x120>)
   9749a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   9749c:	6878      	ldr	r0, [r7, #4]
   9749e:	4b2b      	ldr	r3, [pc, #172]	; (9754c <usart_serial_init+0x124>)
   974a0:	4798      	blx	r3
		usart_enable_rx(p_usart);
   974a2:	6878      	ldr	r0, [r7, #4]
   974a4:	4b2a      	ldr	r3, [pc, #168]	; (97550 <usart_serial_init+0x128>)
   974a6:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   974a8:	687b      	ldr	r3, [r7, #4]
   974aa:	4a2a      	ldr	r2, [pc, #168]	; (97554 <usart_serial_init+0x12c>)
   974ac:	4293      	cmp	r3, r2
   974ae:	d111      	bne.n	974d4 <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   974b0:	2012      	movs	r0, #18
   974b2:	4b22      	ldr	r3, [pc, #136]	; (9753c <usart_serial_init+0x114>)
   974b4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   974b6:	4b1f      	ldr	r3, [pc, #124]	; (97534 <usart_serial_init+0x10c>)
   974b8:	4798      	blx	r3
   974ba:	4602      	mov	r2, r0
   974bc:	f107 0308 	add.w	r3, r7, #8
   974c0:	4619      	mov	r1, r3
   974c2:	6878      	ldr	r0, [r7, #4]
   974c4:	4b20      	ldr	r3, [pc, #128]	; (97548 <usart_serial_init+0x120>)
   974c6:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   974c8:	6878      	ldr	r0, [r7, #4]
   974ca:	4b20      	ldr	r3, [pc, #128]	; (9754c <usart_serial_init+0x124>)
   974cc:	4798      	blx	r3
		usart_enable_rx(p_usart);
   974ce:	6878      	ldr	r0, [r7, #4]
   974d0:	4b1f      	ldr	r3, [pc, #124]	; (97550 <usart_serial_init+0x128>)
   974d2:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   974d4:	687b      	ldr	r3, [r7, #4]
   974d6:	4a20      	ldr	r2, [pc, #128]	; (97558 <usart_serial_init+0x130>)
   974d8:	4293      	cmp	r3, r2
   974da:	d111      	bne.n	97500 <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   974dc:	2013      	movs	r0, #19
   974de:	4b17      	ldr	r3, [pc, #92]	; (9753c <usart_serial_init+0x114>)
   974e0:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   974e2:	4b14      	ldr	r3, [pc, #80]	; (97534 <usart_serial_init+0x10c>)
   974e4:	4798      	blx	r3
   974e6:	4602      	mov	r2, r0
   974e8:	f107 0308 	add.w	r3, r7, #8
   974ec:	4619      	mov	r1, r3
   974ee:	6878      	ldr	r0, [r7, #4]
   974f0:	4b15      	ldr	r3, [pc, #84]	; (97548 <usart_serial_init+0x120>)
   974f2:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   974f4:	6878      	ldr	r0, [r7, #4]
   974f6:	4b15      	ldr	r3, [pc, #84]	; (9754c <usart_serial_init+0x124>)
   974f8:	4798      	blx	r3
		usart_enable_rx(p_usart);
   974fa:	6878      	ldr	r0, [r7, #4]
   974fc:	4b14      	ldr	r3, [pc, #80]	; (97550 <usart_serial_init+0x128>)
   974fe:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   97500:	687b      	ldr	r3, [r7, #4]
   97502:	4a16      	ldr	r2, [pc, #88]	; (9755c <usart_serial_init+0x134>)
   97504:	4293      	cmp	r3, r2
   97506:	d111      	bne.n	9752c <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   97508:	2014      	movs	r0, #20
   9750a:	4b0c      	ldr	r3, [pc, #48]	; (9753c <usart_serial_init+0x114>)
   9750c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   9750e:	4b09      	ldr	r3, [pc, #36]	; (97534 <usart_serial_init+0x10c>)
   97510:	4798      	blx	r3
   97512:	4602      	mov	r2, r0
   97514:	f107 0308 	add.w	r3, r7, #8
   97518:	4619      	mov	r1, r3
   9751a:	6878      	ldr	r0, [r7, #4]
   9751c:	4b0a      	ldr	r3, [pc, #40]	; (97548 <usart_serial_init+0x120>)
   9751e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   97520:	6878      	ldr	r0, [r7, #4]
   97522:	4b0a      	ldr	r3, [pc, #40]	; (9754c <usart_serial_init+0x124>)
   97524:	4798      	blx	r3
		usart_enable_rx(p_usart);
   97526:	6878      	ldr	r0, [r7, #4]
   97528:	4b09      	ldr	r3, [pc, #36]	; (97550 <usart_serial_init+0x128>)
   9752a:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
   9752c:	bf00      	nop
   9752e:	3730      	adds	r7, #48	; 0x30
   97530:	46bd      	mov	sp, r7
   97532:	bd80      	pop	{r7, pc}
   97534:	000973f9 	.word	0x000973f9
   97538:	400e0800 	.word	0x400e0800
   9753c:	0009740d 	.word	0x0009740d
   97540:	00098c39 	.word	0x00098c39
   97544:	40098000 	.word	0x40098000
   97548:	00098e4d 	.word	0x00098e4d
   9754c:	00098ed1 	.word	0x00098ed1
   97550:	00098f01 	.word	0x00098f01
   97554:	4009c000 	.word	0x4009c000
   97558:	400a0000 	.word	0x400a0000
   9755c:	400a4000 	.word	0x400a4000

00097560 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   97560:	b580      	push	{r7, lr}
   97562:	b082      	sub	sp, #8
   97564:	af00      	add	r7, sp, #0
   97566:	6078      	str	r0, [r7, #4]
   97568:	460b      	mov	r3, r1
   9756a:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   9756c:	687b      	ldr	r3, [r7, #4]
   9756e:	4a27      	ldr	r2, [pc, #156]	; (9760c <usart_serial_putchar+0xac>)
   97570:	4293      	cmp	r3, r2
   97572:	d10a      	bne.n	9758a <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   97574:	bf00      	nop
   97576:	78fb      	ldrb	r3, [r7, #3]
   97578:	4619      	mov	r1, r3
   9757a:	6878      	ldr	r0, [r7, #4]
   9757c:	4b24      	ldr	r3, [pc, #144]	; (97610 <usart_serial_putchar+0xb0>)
   9757e:	4798      	blx	r3
   97580:	4603      	mov	r3, r0
   97582:	2b00      	cmp	r3, #0
   97584:	d1f7      	bne.n	97576 <usart_serial_putchar+0x16>
		return 1;
   97586:	2301      	movs	r3, #1
   97588:	e03c      	b.n	97604 <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   9758a:	687b      	ldr	r3, [r7, #4]
   9758c:	4a21      	ldr	r2, [pc, #132]	; (97614 <usart_serial_putchar+0xb4>)
   9758e:	4293      	cmp	r3, r2
   97590:	d10a      	bne.n	975a8 <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   97592:	bf00      	nop
   97594:	78fb      	ldrb	r3, [r7, #3]
   97596:	4619      	mov	r1, r3
   97598:	6878      	ldr	r0, [r7, #4]
   9759a:	4b1f      	ldr	r3, [pc, #124]	; (97618 <usart_serial_putchar+0xb8>)
   9759c:	4798      	blx	r3
   9759e:	4603      	mov	r3, r0
   975a0:	2b00      	cmp	r3, #0
   975a2:	d1f7      	bne.n	97594 <usart_serial_putchar+0x34>
		return 1;
   975a4:	2301      	movs	r3, #1
   975a6:	e02d      	b.n	97604 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   975a8:	687b      	ldr	r3, [r7, #4]
   975aa:	4a1c      	ldr	r2, [pc, #112]	; (9761c <usart_serial_putchar+0xbc>)
   975ac:	4293      	cmp	r3, r2
   975ae:	d10a      	bne.n	975c6 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   975b0:	bf00      	nop
   975b2:	78fb      	ldrb	r3, [r7, #3]
   975b4:	4619      	mov	r1, r3
   975b6:	6878      	ldr	r0, [r7, #4]
   975b8:	4b17      	ldr	r3, [pc, #92]	; (97618 <usart_serial_putchar+0xb8>)
   975ba:	4798      	blx	r3
   975bc:	4603      	mov	r3, r0
   975be:	2b00      	cmp	r3, #0
   975c0:	d1f7      	bne.n	975b2 <usart_serial_putchar+0x52>
		return 1;
   975c2:	2301      	movs	r3, #1
   975c4:	e01e      	b.n	97604 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   975c6:	687b      	ldr	r3, [r7, #4]
   975c8:	4a15      	ldr	r2, [pc, #84]	; (97620 <usart_serial_putchar+0xc0>)
   975ca:	4293      	cmp	r3, r2
   975cc:	d10a      	bne.n	975e4 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   975ce:	bf00      	nop
   975d0:	78fb      	ldrb	r3, [r7, #3]
   975d2:	4619      	mov	r1, r3
   975d4:	6878      	ldr	r0, [r7, #4]
   975d6:	4b10      	ldr	r3, [pc, #64]	; (97618 <usart_serial_putchar+0xb8>)
   975d8:	4798      	blx	r3
   975da:	4603      	mov	r3, r0
   975dc:	2b00      	cmp	r3, #0
   975de:	d1f7      	bne.n	975d0 <usart_serial_putchar+0x70>
		return 1;
   975e0:	2301      	movs	r3, #1
   975e2:	e00f      	b.n	97604 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   975e4:	687b      	ldr	r3, [r7, #4]
   975e6:	4a0f      	ldr	r2, [pc, #60]	; (97624 <usart_serial_putchar+0xc4>)
   975e8:	4293      	cmp	r3, r2
   975ea:	d10a      	bne.n	97602 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   975ec:	bf00      	nop
   975ee:	78fb      	ldrb	r3, [r7, #3]
   975f0:	4619      	mov	r1, r3
   975f2:	6878      	ldr	r0, [r7, #4]
   975f4:	4b08      	ldr	r3, [pc, #32]	; (97618 <usart_serial_putchar+0xb8>)
   975f6:	4798      	blx	r3
   975f8:	4603      	mov	r3, r0
   975fa:	2b00      	cmp	r3, #0
   975fc:	d1f7      	bne.n	975ee <usart_serial_putchar+0x8e>
		return 1;
   975fe:	2301      	movs	r3, #1
   97600:	e000      	b.n	97604 <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   97602:	2300      	movs	r3, #0
}
   97604:	4618      	mov	r0, r3
   97606:	3708      	adds	r7, #8
   97608:	46bd      	mov	sp, r7
   9760a:	bd80      	pop	{r7, pc}
   9760c:	400e0800 	.word	0x400e0800
   97610:	00098cfd 	.word	0x00098cfd
   97614:	40098000 	.word	0x40098000
   97618:	00098f69 	.word	0x00098f69
   9761c:	4009c000 	.word	0x4009c000
   97620:	400a0000 	.word	0x400a0000
   97624:	400a4000 	.word	0x400a4000

00097628 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   97628:	b580      	push	{r7, lr}
   9762a:	b084      	sub	sp, #16
   9762c:	af00      	add	r7, sp, #0
   9762e:	6078      	str	r0, [r7, #4]
   97630:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   97632:	2300      	movs	r3, #0
   97634:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   97636:	687b      	ldr	r3, [r7, #4]
   97638:	4a2b      	ldr	r2, [pc, #172]	; (976e8 <usart_serial_getchar+0xc0>)
   9763a:	4293      	cmp	r3, r2
   9763c:	d107      	bne.n	9764e <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   9763e:	bf00      	nop
   97640:	6839      	ldr	r1, [r7, #0]
   97642:	6878      	ldr	r0, [r7, #4]
   97644:	4b29      	ldr	r3, [pc, #164]	; (976ec <usart_serial_getchar+0xc4>)
   97646:	4798      	blx	r3
   97648:	4603      	mov	r3, r0
   9764a:	2b00      	cmp	r3, #0
   9764c:	d1f8      	bne.n	97640 <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   9764e:	687b      	ldr	r3, [r7, #4]
   97650:	4a27      	ldr	r2, [pc, #156]	; (976f0 <usart_serial_getchar+0xc8>)
   97652:	4293      	cmp	r3, r2
   97654:	d10d      	bne.n	97672 <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   97656:	bf00      	nop
   97658:	f107 030c 	add.w	r3, r7, #12
   9765c:	4619      	mov	r1, r3
   9765e:	6878      	ldr	r0, [r7, #4]
   97660:	4b24      	ldr	r3, [pc, #144]	; (976f4 <usart_serial_getchar+0xcc>)
   97662:	4798      	blx	r3
   97664:	4603      	mov	r3, r0
   97666:	2b00      	cmp	r3, #0
   97668:	d1f6      	bne.n	97658 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   9766a:	68fb      	ldr	r3, [r7, #12]
   9766c:	b2da      	uxtb	r2, r3
   9766e:	683b      	ldr	r3, [r7, #0]
   97670:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   97672:	687b      	ldr	r3, [r7, #4]
   97674:	4a20      	ldr	r2, [pc, #128]	; (976f8 <usart_serial_getchar+0xd0>)
   97676:	4293      	cmp	r3, r2
   97678:	d10d      	bne.n	97696 <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   9767a:	bf00      	nop
   9767c:	f107 030c 	add.w	r3, r7, #12
   97680:	4619      	mov	r1, r3
   97682:	6878      	ldr	r0, [r7, #4]
   97684:	4b1b      	ldr	r3, [pc, #108]	; (976f4 <usart_serial_getchar+0xcc>)
   97686:	4798      	blx	r3
   97688:	4603      	mov	r3, r0
   9768a:	2b00      	cmp	r3, #0
   9768c:	d1f6      	bne.n	9767c <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   9768e:	68fb      	ldr	r3, [r7, #12]
   97690:	b2da      	uxtb	r2, r3
   97692:	683b      	ldr	r3, [r7, #0]
   97694:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   97696:	687b      	ldr	r3, [r7, #4]
   97698:	4a18      	ldr	r2, [pc, #96]	; (976fc <usart_serial_getchar+0xd4>)
   9769a:	4293      	cmp	r3, r2
   9769c:	d10d      	bne.n	976ba <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   9769e:	bf00      	nop
   976a0:	f107 030c 	add.w	r3, r7, #12
   976a4:	4619      	mov	r1, r3
   976a6:	6878      	ldr	r0, [r7, #4]
   976a8:	4b12      	ldr	r3, [pc, #72]	; (976f4 <usart_serial_getchar+0xcc>)
   976aa:	4798      	blx	r3
   976ac:	4603      	mov	r3, r0
   976ae:	2b00      	cmp	r3, #0
   976b0:	d1f6      	bne.n	976a0 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   976b2:	68fb      	ldr	r3, [r7, #12]
   976b4:	b2da      	uxtb	r2, r3
   976b6:	683b      	ldr	r3, [r7, #0]
   976b8:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   976ba:	687b      	ldr	r3, [r7, #4]
   976bc:	4a10      	ldr	r2, [pc, #64]	; (97700 <usart_serial_getchar+0xd8>)
   976be:	4293      	cmp	r3, r2
   976c0:	d10d      	bne.n	976de <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   976c2:	bf00      	nop
   976c4:	f107 030c 	add.w	r3, r7, #12
   976c8:	4619      	mov	r1, r3
   976ca:	6878      	ldr	r0, [r7, #4]
   976cc:	4b09      	ldr	r3, [pc, #36]	; (976f4 <usart_serial_getchar+0xcc>)
   976ce:	4798      	blx	r3
   976d0:	4603      	mov	r3, r0
   976d2:	2b00      	cmp	r3, #0
   976d4:	d1f6      	bne.n	976c4 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   976d6:	68fb      	ldr	r3, [r7, #12]
   976d8:	b2da      	uxtb	r2, r3
   976da:	683b      	ldr	r3, [r7, #0]
   976dc:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   976de:	bf00      	nop
   976e0:	3710      	adds	r7, #16
   976e2:	46bd      	mov	sp, r7
   976e4:	bd80      	pop	{r7, pc}
   976e6:	bf00      	nop
   976e8:	400e0800 	.word	0x400e0800
   976ec:	00098d41 	.word	0x00098d41
   976f0:	40098000 	.word	0x40098000
   976f4:	00098f99 	.word	0x00098f99
   976f8:	4009c000 	.word	0x4009c000
   976fc:	400a0000 	.word	0x400a0000
   97700:	400a4000 	.word	0x400a4000

00097704 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   97704:	b580      	push	{r7, lr}
   97706:	b082      	sub	sp, #8
   97708:	af00      	add	r7, sp, #0
   9770a:	6078      	str	r0, [r7, #4]
   9770c:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   9770e:	4a0f      	ldr	r2, [pc, #60]	; (9774c <stdio_serial_init+0x48>)
   97710:	687b      	ldr	r3, [r7, #4]
   97712:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   97714:	4b0e      	ldr	r3, [pc, #56]	; (97750 <stdio_serial_init+0x4c>)
   97716:	4a0f      	ldr	r2, [pc, #60]	; (97754 <stdio_serial_init+0x50>)
   97718:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   9771a:	4b0f      	ldr	r3, [pc, #60]	; (97758 <stdio_serial_init+0x54>)
   9771c:	4a0f      	ldr	r2, [pc, #60]	; (9775c <stdio_serial_init+0x58>)
   9771e:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   97720:	6839      	ldr	r1, [r7, #0]
   97722:	6878      	ldr	r0, [r7, #4]
   97724:	4b0e      	ldr	r3, [pc, #56]	; (97760 <stdio_serial_init+0x5c>)
   97726:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   97728:	4b0e      	ldr	r3, [pc, #56]	; (97764 <stdio_serial_init+0x60>)
   9772a:	681b      	ldr	r3, [r3, #0]
   9772c:	689b      	ldr	r3, [r3, #8]
   9772e:	2100      	movs	r1, #0
   97730:	4618      	mov	r0, r3
   97732:	4b0d      	ldr	r3, [pc, #52]	; (97768 <stdio_serial_init+0x64>)
   97734:	4798      	blx	r3
	setbuf(stdin, NULL);
   97736:	4b0b      	ldr	r3, [pc, #44]	; (97764 <stdio_serial_init+0x60>)
   97738:	681b      	ldr	r3, [r3, #0]
   9773a:	685b      	ldr	r3, [r3, #4]
   9773c:	2100      	movs	r1, #0
   9773e:	4618      	mov	r0, r3
   97740:	4b09      	ldr	r3, [pc, #36]	; (97768 <stdio_serial_init+0x64>)
   97742:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   97744:	bf00      	nop
   97746:	3708      	adds	r7, #8
   97748:	46bd      	mov	sp, r7
   9774a:	bd80      	pop	{r7, pc}
   9774c:	20073354 	.word	0x20073354
   97750:	20073350 	.word	0x20073350
   97754:	00097561 	.word	0x00097561
   97758:	2007334c 	.word	0x2007334c
   9775c:	00097629 	.word	0x00097629
   97760:	00097429 	.word	0x00097429
   97764:	200710c8 	.word	0x200710c8
   97768:	000a447d 	.word	0x000a447d

0009776c <DD_INIT_UART>:
	.paritytype = CONF_UART_PARITY,
	.stopbits = true
};

void DD_INIT_UART()
{
   9776c:	b580      	push	{r7, lr}
   9776e:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_UART);
   97770:	2008      	movs	r0, #8
   97772:	4b11      	ldr	r3, [pc, #68]	; (977b8 <DD_INIT_UART+0x4c>)
   97774:	4798      	blx	r3
	UART->UART_CR	= 0x00000050;
   97776:	4b11      	ldr	r3, [pc, #68]	; (977bc <DD_INIT_UART+0x50>)
   97778:	2250      	movs	r2, #80	; 0x50
   9777a:	601a      	str	r2, [r3, #0]
	UART->UART_MR	= 0x00000800;
   9777c:	4b0f      	ldr	r3, [pc, #60]	; (977bc <DD_INIT_UART+0x50>)
   9777e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   97782:	605a      	str	r2, [r3, #4]
	UART->UART_BRGR = 0x00000046;
   97784:	4b0d      	ldr	r3, [pc, #52]	; (977bc <DD_INIT_UART+0x50>)
   97786:	2246      	movs	r2, #70	; 0x46
   97788:	621a      	str	r2, [r3, #32]
		
	//uart_init(UART,&uart_options);
	stdio_serial_init(UART, &uart_serial_options);
   9778a:	490d      	ldr	r1, [pc, #52]	; (977c0 <DD_INIT_UART+0x54>)
   9778c:	480b      	ldr	r0, [pc, #44]	; (977bc <DD_INIT_UART+0x50>)
   9778e:	4b0d      	ldr	r3, [pc, #52]	; (977c4 <DD_INIT_UART+0x58>)
   97790:	4798      	blx	r3
	uart_enable(UART);
   97792:	480a      	ldr	r0, [pc, #40]	; (977bc <DD_INIT_UART+0x50>)
   97794:	4b0c      	ldr	r3, [pc, #48]	; (977c8 <DD_INIT_UART+0x5c>)
   97796:	4798      	blx	r3
	uart_enable_interrupt(UART, UART_SR_RXRDY);
   97798:	2101      	movs	r1, #1
   9779a:	4808      	ldr	r0, [pc, #32]	; (977bc <DD_INIT_UART+0x50>)
   9779c:	4b0b      	ldr	r3, [pc, #44]	; (977cc <DD_INIT_UART+0x60>)
   9779e:	4798      	blx	r3
	uart_enable(UART);
   977a0:	4806      	ldr	r0, [pc, #24]	; (977bc <DD_INIT_UART+0x50>)
   977a2:	4b09      	ldr	r3, [pc, #36]	; (977c8 <DD_INIT_UART+0x5c>)
   977a4:	4798      	blx	r3
	uart_enable_rx(UART);
   977a6:	4805      	ldr	r0, [pc, #20]	; (977bc <DD_INIT_UART+0x50>)
   977a8:	4b09      	ldr	r3, [pc, #36]	; (977d0 <DD_INIT_UART+0x64>)
   977aa:	4798      	blx	r3
	uart_enable_tx(UART);
   977ac:	4803      	ldr	r0, [pc, #12]	; (977bc <DD_INIT_UART+0x50>)
   977ae:	4b09      	ldr	r3, [pc, #36]	; (977d4 <DD_INIT_UART+0x68>)
   977b0:	4798      	blx	r3
	
	
}
   977b2:	bf00      	nop
   977b4:	bd80      	pop	{r7, pc}
   977b6:	bf00      	nop
   977b8:	0009740d 	.word	0x0009740d
   977bc:	400e0800 	.word	0x400e0800
   977c0:	000a626c 	.word	0x000a626c
   977c4:	00097705 	.word	0x00097705
   977c8:	00098cc9 	.word	0x00098cc9
   977cc:	00098ce1 	.word	0x00098ce1
   977d0:	00098cb1 	.word	0x00098cb1
   977d4:	00098c99 	.word	0x00098c99

000977d8 <DD_TX_UART>:

uint32_t DD_TX_UART(uint8_t sv_consoleTxdatabyte)
{
   977d8:	b580      	push	{r7, lr}
   977da:	b084      	sub	sp, #16
   977dc:	af00      	add	r7, sp, #0
   977de:	4603      	mov	r3, r0
   977e0:	71fb      	strb	r3, [r7, #7]
	uint32_t uart_stat;
	uart_stat= uart_write(UART,sv_consoleTxdatabyte);
   977e2:	79fb      	ldrb	r3, [r7, #7]
   977e4:	4619      	mov	r1, r3
   977e6:	4804      	ldr	r0, [pc, #16]	; (977f8 <DD_TX_UART+0x20>)
   977e8:	4b04      	ldr	r3, [pc, #16]	; (977fc <DD_TX_UART+0x24>)
   977ea:	4798      	blx	r3
   977ec:	60f8      	str	r0, [r7, #12]
	
	return uart_stat;
   977ee:	68fb      	ldr	r3, [r7, #12]
}
   977f0:	4618      	mov	r0, r3
   977f2:	3710      	adds	r7, #16
   977f4:	46bd      	mov	sp, r7
   977f6:	bd80      	pop	{r7, pc}
   977f8:	400e0800 	.word	0x400e0800
   977fc:	00098cfd 	.word	0x00098cfd

00097800 <SV_CAN_WRITE_PROPO>:
}


void SV_CAN_WRITE_PROPO(uint16_t propo_cmd, uint16_t data)

{
   97800:	b580      	push	{r7, lr}
   97802:	b082      	sub	sp, #8
   97804:	af00      	add	r7, sp, #0
   97806:	4603      	mov	r3, r0
   97808:	460a      	mov	r2, r1
   9780a:	80fb      	strh	r3, [r7, #6]
   9780c:	4613      	mov	r3, r2
   9780e:	80bb      	strh	r3, [r7, #4]
	 DD_CAN_WRITE_PROPO(propo_cmd, data);							// Gopal: command to send Acid Rc, Bicarb Rc and the user set Conductivity value
   97810:	88ba      	ldrh	r2, [r7, #4]
   97812:	88fb      	ldrh	r3, [r7, #6]
   97814:	4611      	mov	r1, r2
   97816:	4618      	mov	r0, r3
   97818:	4b02      	ldr	r3, [pc, #8]	; (97824 <SV_CAN_WRITE_PROPO+0x24>)
   9781a:	4798      	blx	r3
	
}
   9781c:	bf00      	nop
   9781e:	3708      	adds	r7, #8
   97820:	46bd      	mov	sp, r7
   97822:	bd80      	pop	{r7, pc}
   97824:	00094725 	.word	0x00094725

00097828 <SV_CAN_READ_HEMO>:

uint32_t SV_CAN_READ_HEMO()

{
   97828:	b580      	push	{r7, lr}
   9782a:	af00      	add	r7, sp, #0
	DD_CAN_READ_APTVPT();
   9782c:	4b02      	ldr	r3, [pc, #8]	; (97838 <SV_CAN_READ_HEMO+0x10>)
   9782e:	4798      	blx	r3
	return 0;
   97830:	2300      	movs	r3, #0
}
   97832:	4618      	mov	r0, r3
   97834:	bd80      	pop	{r7, pc}
   97836:	bf00      	nop
   97838:	000947e5 	.word	0x000947e5

0009783c <SV_CAN_WRITE_SENSOR>:
}


void SV_CAN_WRITE_SENSOR(uint8_t SENSOR_CPU_id, uint16_t* data)

{
   9783c:	b580      	push	{r7, lr}
   9783e:	b082      	sub	sp, #8
   97840:	af00      	add	r7, sp, #0
   97842:	4603      	mov	r3, r0
   97844:	6039      	str	r1, [r7, #0]
   97846:	71fb      	strb	r3, [r7, #7]
	DD_CAN_WRITE_SENSOR(data);
   97848:	683b      	ldr	r3, [r7, #0]
   9784a:	b29b      	uxth	r3, r3
   9784c:	4618      	mov	r0, r3
   9784e:	4b03      	ldr	r3, [pc, #12]	; (9785c <SV_CAN_WRITE_SENSOR+0x20>)
   97850:	4798      	blx	r3
	
}
   97852:	bf00      	nop
   97854:	3708      	adds	r7, #8
   97856:	46bd      	mov	sp, r7
   97858:	bd80      	pop	{r7, pc}
   9785a:	bf00      	nop
   9785c:	000947a1 	.word	0x000947a1

00097860 <SV_CAN_REQUEST_SENSORDATA>:

void SV_CAN_REQUEST_SENSORDATA(void)
{
   97860:	b580      	push	{r7, lr}
   97862:	af00      	add	r7, sp, #0
	
		
	delay_cnt = g_ul_ms_ticks ;
   97864:	4b23      	ldr	r3, [pc, #140]	; (978f4 <SV_CAN_REQUEST_SENSORDATA+0x94>)
   97866:	681b      	ldr	r3, [r3, #0]
   97868:	4a23      	ldr	r2, [pc, #140]	; (978f8 <SV_CAN_REQUEST_SENSORDATA+0x98>)
   9786a:	6013      	str	r3, [r2, #0]
	delay = 0;	
   9786c:	4b23      	ldr	r3, [pc, #140]	; (978fc <SV_CAN_REQUEST_SENSORDATA+0x9c>)
   9786e:	2200      	movs	r2, #0
   97870:	601a      	str	r2, [r3, #0]
	cl_wait(10);
   97872:	200a      	movs	r0, #10
   97874:	4b22      	ldr	r3, [pc, #136]	; (97900 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   97876:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group1);
   97878:	2141      	movs	r1, #65	; 0x41
   9787a:	2003      	movs	r0, #3
   9787c:	4b21      	ldr	r3, [pc, #132]	; (97904 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   9787e:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[1]	= 0;
   97880:	4b21      	ldr	r3, [pc, #132]	; (97908 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   97882:	2200      	movs	r2, #0
   97884:	705a      	strb	r2, [r3, #1]
	
//	while(	!array1[1]);
	cl_wait(10);
   97886:	200a      	movs	r0, #10
   97888:	4b1d      	ldr	r3, [pc, #116]	; (97900 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9788a:	4798      	blx	r3

	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group2);
   9788c:	2142      	movs	r1, #66	; 0x42
   9788e:	2003      	movs	r0, #3
   97890:	4b1c      	ldr	r3, [pc, #112]	; (97904 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   97892:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}

	array1[2]	= 0;
   97894:	4b1c      	ldr	r3, [pc, #112]	; (97908 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   97896:	2200      	movs	r2, #0
   97898:	709a      	strb	r2, [r3, #2]
//	while(	!array1[2]);
cl_wait(10);
   9789a:	200a      	movs	r0, #10
   9789c:	4b18      	ldr	r3, [pc, #96]	; (97900 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9789e:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group3);
   978a0:	2143      	movs	r1, #67	; 0x43
   978a2:	2003      	movs	r0, #3
   978a4:	4b17      	ldr	r3, [pc, #92]	; (97904 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   978a6:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[3]	= 0;
   978a8:	4b17      	ldr	r3, [pc, #92]	; (97908 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   978aa:	2200      	movs	r2, #0
   978ac:	70da      	strb	r2, [r3, #3]
//	while(	!array1[3]);
cl_wait(10);
   978ae:	200a      	movs	r0, #10
   978b0:	4b13      	ldr	r3, [pc, #76]	; (97900 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   978b2:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group4);
   978b4:	2144      	movs	r1, #68	; 0x44
   978b6:	2003      	movs	r0, #3
   978b8:	4b12      	ldr	r3, [pc, #72]	; (97904 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   978ba:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[4]	= 0;
   978bc:	4b12      	ldr	r3, [pc, #72]	; (97908 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   978be:	2200      	movs	r2, #0
   978c0:	711a      	strb	r2, [r3, #4]
//	while(	!array1[4]);
cl_wait(10);
   978c2:	200a      	movs	r0, #10
   978c4:	4b0e      	ldr	r3, [pc, #56]	; (97900 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   978c6:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group5);
   978c8:	2145      	movs	r1, #69	; 0x45
   978ca:	2003      	movs	r0, #3
   978cc:	4b0d      	ldr	r3, [pc, #52]	; (97904 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   978ce:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[5]	= 0;
   978d0:	4b0d      	ldr	r3, [pc, #52]	; (97908 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   978d2:	2200      	movs	r2, #0
   978d4:	715a      	strb	r2, [r3, #5]
//	while(	!array1[5]);
cl_wait(10);
   978d6:	200a      	movs	r0, #10
   978d8:	4b09      	ldr	r3, [pc, #36]	; (97900 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   978da:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group6);
   978dc:	2146      	movs	r1, #70	; 0x46
   978de:	2003      	movs	r0, #3
   978e0:	4b08      	ldr	r3, [pc, #32]	; (97904 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   978e2:	4798      	blx	r3
// 	for(int i=0; i<100; i++)
// 	{
// 		
// 	}
// 	
cl_wait(10);
   978e4:	200a      	movs	r0, #10
   978e6:	4b06      	ldr	r3, [pc, #24]	; (97900 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   978e8:	4798      	blx	r3
	array1[6]	= 0;
   978ea:	4b07      	ldr	r3, [pc, #28]	; (97908 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   978ec:	2200      	movs	r2, #0
   978ee:	719a      	strb	r2, [r3, #6]
//	while(	!array1[6]);
	
	
}
   978f0:	bf00      	nop
   978f2:	bd80      	pop	{r7, pc}
   978f4:	20072680 	.word	0x20072680
   978f8:	2007272c 	.word	0x2007272c
   978fc:	20072730 	.word	0x20072730
   97900:	00091e2d 	.word	0x00091e2d
   97904:	0009783d 	.word	0x0009783d
   97908:	20072720 	.word	0x20072720

0009790c <sv_cntrl_activatepump>:
   9790c:	b580      	push	{r7, lr}
   9790e:	b084      	sub	sp, #16
   97910:	af00      	add	r7, sp, #0
   97912:	4603      	mov	r3, r0
   97914:	71fb      	strb	r3, [r7, #7]
   97916:	2300      	movs	r3, #0
   97918:	60fb      	str	r3, [r7, #12]
   9791a:	79fb      	ldrb	r3, [r7, #7]
   9791c:	2b03      	cmp	r3, #3
   9791e:	d004      	beq.n	9792a <sv_cntrl_activatepump+0x1e>
   97920:	79fb      	ldrb	r3, [r7, #7]
   97922:	4618      	mov	r0, r3
   97924:	4b06      	ldr	r3, [pc, #24]	; (97940 <sv_cntrl_activatepump+0x34>)
   97926:	4798      	blx	r3
   97928:	e005      	b.n	97936 <sv_cntrl_activatepump+0x2a>
   9792a:	2301      	movs	r3, #1
   9792c:	733b      	strb	r3, [r7, #12]
   9792e:	2100      	movs	r1, #0
   97930:	2020      	movs	r0, #32
   97932:	4b04      	ldr	r3, [pc, #16]	; (97944 <sv_cntrl_activatepump+0x38>)
   97934:	4798      	blx	r3
   97936:	2300      	movs	r3, #0
   97938:	4618      	mov	r0, r3
   9793a:	3710      	adds	r7, #16
   9793c:	46bd      	mov	sp, r7
   9793e:	bd80      	pop	{r7, pc}
   97940:	00095d11 	.word	0x00095d11
   97944:	00094759 	.word	0x00094759

00097948 <sv_cntrl_deactivatepump>:
   97948:	b580      	push	{r7, lr}
   9794a:	b084      	sub	sp, #16
   9794c:	af00      	add	r7, sp, #0
   9794e:	4603      	mov	r3, r0
   97950:	71fb      	strb	r3, [r7, #7]
   97952:	2300      	movs	r3, #0
   97954:	60fb      	str	r3, [r7, #12]
   97956:	79fb      	ldrb	r3, [r7, #7]
   97958:	2b03      	cmp	r3, #3
   9795a:	d004      	beq.n	97966 <sv_cntrl_deactivatepump+0x1e>
   9795c:	79fb      	ldrb	r3, [r7, #7]
   9795e:	4618      	mov	r0, r3
   97960:	4b06      	ldr	r3, [pc, #24]	; (9797c <sv_cntrl_deactivatepump+0x34>)
   97962:	4798      	blx	r3
   97964:	e005      	b.n	97972 <sv_cntrl_deactivatepump+0x2a>
   97966:	2302      	movs	r3, #2
   97968:	733b      	strb	r3, [r7, #12]
   9796a:	2100      	movs	r1, #0
   9796c:	2021      	movs	r0, #33	; 0x21
   9796e:	4b04      	ldr	r3, [pc, #16]	; (97980 <sv_cntrl_deactivatepump+0x38>)
   97970:	4798      	blx	r3
   97972:	2300      	movs	r3, #0
   97974:	4618      	mov	r0, r3
   97976:	3710      	adds	r7, #16
   97978:	46bd      	mov	sp, r7
   9797a:	bd80      	pop	{r7, pc}
   9797c:	00095eb1 	.word	0x00095eb1
   97980:	00094759 	.word	0x00094759

00097984 <sv_cntrl_poweronheater>:
   97984:	b580      	push	{r7, lr}
   97986:	af00      	add	r7, sp, #0
   97988:	4b02      	ldr	r3, [pc, #8]	; (97994 <sv_cntrl_poweronheater+0x10>)
   9798a:	4798      	blx	r3
   9798c:	2300      	movs	r3, #0
   9798e:	4618      	mov	r0, r3
   97990:	bd80      	pop	{r7, pc}
   97992:	bf00      	nop
   97994:	00095df1 	.word	0x00095df1

00097998 <sv_cntrl_poweroffheater>:
   97998:	b580      	push	{r7, lr}
   9799a:	af00      	add	r7, sp, #0
   9799c:	4b02      	ldr	r3, [pc, #8]	; (979a8 <sv_cntrl_poweroffheater+0x10>)
   9799e:	4798      	blx	r3
   979a0:	2300      	movs	r3, #0
   979a2:	4618      	mov	r0, r3
   979a4:	bd80      	pop	{r7, pc}
   979a6:	bf00      	nop
   979a8:	00095e51 	.word	0x00095e51

000979ac <sv_cntrl_activate_valve>:
   979ac:	b580      	push	{r7, lr}
   979ae:	b082      	sub	sp, #8
   979b0:	af00      	add	r7, sp, #0
   979b2:	4603      	mov	r3, r0
   979b4:	71fb      	strb	r3, [r7, #7]
   979b6:	79fb      	ldrb	r3, [r7, #7]
   979b8:	4618      	mov	r0, r3
   979ba:	4b03      	ldr	r3, [pc, #12]	; (979c8 <sv_cntrl_activate_valve+0x1c>)
   979bc:	4798      	blx	r3
   979be:	2300      	movs	r3, #0
   979c0:	4618      	mov	r0, r3
   979c2:	3708      	adds	r7, #8
   979c4:	46bd      	mov	sp, r7
   979c6:	bd80      	pop	{r7, pc}
   979c8:	00096229 	.word	0x00096229

000979cc <sv_cntrl_deactivate_valve>:
   979cc:	b580      	push	{r7, lr}
   979ce:	b082      	sub	sp, #8
   979d0:	af00      	add	r7, sp, #0
   979d2:	4603      	mov	r3, r0
   979d4:	71fb      	strb	r3, [r7, #7]
   979d6:	79fb      	ldrb	r3, [r7, #7]
   979d8:	2b10      	cmp	r3, #16
   979da:	d101      	bne.n	979e0 <sv_cntrl_deactivate_valve+0x14>
   979dc:	4b05      	ldr	r3, [pc, #20]	; (979f4 <sv_cntrl_deactivate_valve+0x28>)
   979de:	4798      	blx	r3
   979e0:	79fb      	ldrb	r3, [r7, #7]
   979e2:	4618      	mov	r0, r3
   979e4:	4b04      	ldr	r3, [pc, #16]	; (979f8 <sv_cntrl_deactivate_valve+0x2c>)
   979e6:	4798      	blx	r3
   979e8:	2300      	movs	r3, #0
   979ea:	4618      	mov	r0, r3
   979ec:	3708      	adds	r7, #8
   979ee:	46bd      	mov	sp, r7
   979f0:	bd80      	pop	{r7, pc}
   979f2:	bf00      	nop
   979f4:	00095e51 	.word	0x00095e51
   979f8:	000962f1 	.word	0x000962f1

000979fc <sv_cntrl_setHepa_dir>:
   979fc:	b580      	push	{r7, lr}
   979fe:	af00      	add	r7, sp, #0
   97a00:	4b02      	ldr	r3, [pc, #8]	; (97a0c <sv_cntrl_setHepa_dir+0x10>)
   97a02:	4798      	blx	r3
   97a04:	2300      	movs	r3, #0
   97a06:	4618      	mov	r0, r3
   97a08:	bd80      	pop	{r7, pc}
   97a0a:	bf00      	nop
   97a0c:	00096139 	.word	0x00096139

00097a10 <sv_cntrl_resetHepa_dir>:
   97a10:	b580      	push	{r7, lr}
   97a12:	af00      	add	r7, sp, #0
   97a14:	4b02      	ldr	r3, [pc, #8]	; (97a20 <sv_cntrl_resetHepa_dir+0x10>)
   97a16:	4798      	blx	r3
   97a18:	2300      	movs	r3, #0
   97a1a:	4618      	mov	r0, r3
   97a1c:	bd80      	pop	{r7, pc}
   97a1e:	bf00      	nop
   97a20:	00096161 	.word	0x00096161

00097a24 <sv_cntrl_setpumpspeed>:
   97a24:	b580      	push	{r7, lr}
   97a26:	b084      	sub	sp, #16
   97a28:	af00      	add	r7, sp, #0
   97a2a:	4603      	mov	r3, r0
   97a2c:	6039      	str	r1, [r7, #0]
   97a2e:	71fb      	strb	r3, [r7, #7]
   97a30:	2300      	movs	r3, #0
   97a32:	60fb      	str	r3, [r7, #12]
   97a34:	2304      	movs	r3, #4
   97a36:	733b      	strb	r3, [r7, #12]
   97a38:	683b      	ldr	r3, [r7, #0]
   97a3a:	b2db      	uxtb	r3, r3
   97a3c:	737b      	strb	r3, [r7, #13]
   97a3e:	683b      	ldr	r3, [r7, #0]
   97a40:	0a1b      	lsrs	r3, r3, #8
   97a42:	b2db      	uxtb	r3, r3
   97a44:	73bb      	strb	r3, [r7, #14]
   97a46:	79fb      	ldrb	r3, [r7, #7]
   97a48:	2b03      	cmp	r3, #3
   97a4a:	d005      	beq.n	97a58 <sv_cntrl_setpumpspeed+0x34>
   97a4c:	79fb      	ldrb	r3, [r7, #7]
   97a4e:	6839      	ldr	r1, [r7, #0]
   97a50:	4618      	mov	r0, r3
   97a52:	4b07      	ldr	r3, [pc, #28]	; (97a70 <sv_cntrl_setpumpspeed+0x4c>)
   97a54:	4798      	blx	r3
   97a56:	e005      	b.n	97a64 <sv_cntrl_setpumpspeed+0x40>
   97a58:	683b      	ldr	r3, [r7, #0]
   97a5a:	b29b      	uxth	r3, r3
   97a5c:	4619      	mov	r1, r3
   97a5e:	2023      	movs	r0, #35	; 0x23
   97a60:	4b04      	ldr	r3, [pc, #16]	; (97a74 <sv_cntrl_setpumpspeed+0x50>)
   97a62:	4798      	blx	r3
   97a64:	2300      	movs	r3, #0
   97a66:	4618      	mov	r0, r3
   97a68:	3710      	adds	r7, #16
   97a6a:	46bd      	mov	sp, r7
   97a6c:	bd80      	pop	{r7, pc}
   97a6e:	bf00      	nop
   97a70:	00095f99 	.word	0x00095f99
   97a74:	00094759 	.word	0x00094759

00097a78 <sv_spi_blood_read_temp>:
   97a78:	b480      	push	{r7}
   97a7a:	b083      	sub	sp, #12
   97a7c:	af00      	add	r7, sp, #0
   97a7e:	6078      	str	r0, [r7, #4]
   97a80:	bf00      	nop
   97a82:	370c      	adds	r7, #12
   97a84:	46bd      	mov	sp, r7
   97a86:	bc80      	pop	{r7}
   97a88:	4770      	bx	lr
   97a8a:	bf00      	nop

00097a8c <sv_cntrl_incheater>:
   97a8c:	b580      	push	{r7, lr}
   97a8e:	b082      	sub	sp, #8
   97a90:	af00      	add	r7, sp, #0
   97a92:	6078      	str	r0, [r7, #4]
   97a94:	4b0c      	ldr	r3, [pc, #48]	; (97ac8 <sv_cntrl_incheater+0x3c>)
   97a96:	6878      	ldr	r0, [r7, #4]
   97a98:	4798      	blx	r3
   97a9a:	4602      	mov	r2, r0
   97a9c:	4b0b      	ldr	r3, [pc, #44]	; (97acc <sv_cntrl_incheater+0x40>)
   97a9e:	601a      	str	r2, [r3, #0]
   97aa0:	687b      	ldr	r3, [r7, #4]
   97aa2:	f641 524c 	movw	r2, #7500	; 0x1d4c
   97aa6:	4293      	cmp	r3, r2
   97aa8:	dd02      	ble.n	97ab0 <sv_cntrl_incheater+0x24>
   97aaa:	f641 534c 	movw	r3, #7500	; 0x1d4c
   97aae:	607b      	str	r3, [r7, #4]
   97ab0:	687b      	ldr	r3, [r7, #4]
   97ab2:	2b00      	cmp	r3, #0
   97ab4:	dd03      	ble.n	97abe <sv_cntrl_incheater+0x32>
   97ab6:	687b      	ldr	r3, [r7, #4]
   97ab8:	4618      	mov	r0, r3
   97aba:	4b05      	ldr	r3, [pc, #20]	; (97ad0 <sv_cntrl_incheater+0x44>)
   97abc:	4798      	blx	r3
   97abe:	2300      	movs	r3, #0
   97ac0:	4618      	mov	r0, r3
   97ac2:	3708      	adds	r7, #8
   97ac4:	46bd      	mov	sp, r7
   97ac6:	bd80      	pop	{r7, pc}
   97ac8:	000a3d6d 	.word	0x000a3d6d
   97acc:	20072d94 	.word	0x20072d94
   97ad0:	00096115 	.word	0x00096115

00097ad4 <sv_cntrl_decheater>:
   97ad4:	b580      	push	{r7, lr}
   97ad6:	b082      	sub	sp, #8
   97ad8:	af00      	add	r7, sp, #0
   97ada:	6078      	str	r0, [r7, #4]
   97adc:	687b      	ldr	r3, [r7, #4]
   97ade:	2b00      	cmp	r3, #0
   97ae0:	dd03      	ble.n	97aea <sv_cntrl_decheater+0x16>
   97ae2:	687b      	ldr	r3, [r7, #4]
   97ae4:	4618      	mov	r0, r3
   97ae6:	4b03      	ldr	r3, [pc, #12]	; (97af4 <sv_cntrl_decheater+0x20>)
   97ae8:	4798      	blx	r3
   97aea:	2300      	movs	r3, #0
   97aec:	4618      	mov	r0, r3
   97aee:	3708      	adds	r7, #8
   97af0:	46bd      	mov	sp, r7
   97af2:	bd80      	pop	{r7, pc}
   97af4:	00096115 	.word	0x00096115

00097af8 <sv_cntrl_activatevenousclamp>:
   97af8:	b580      	push	{r7, lr}
   97afa:	af00      	add	r7, sp, #0
   97afc:	4b02      	ldr	r3, [pc, #8]	; (97b08 <sv_cntrl_activatevenousclamp+0x10>)
   97afe:	4798      	blx	r3
   97b00:	2300      	movs	r3, #0
   97b02:	4618      	mov	r0, r3
   97b04:	bd80      	pop	{r7, pc}
   97b06:	bf00      	nop
   97b08:	000966d1 	.word	0x000966d1

00097b0c <sv_cntrl_deactivatevenousclamp>:
   97b0c:	b580      	push	{r7, lr}
   97b0e:	af00      	add	r7, sp, #0
   97b10:	4b02      	ldr	r3, [pc, #8]	; (97b1c <sv_cntrl_deactivatevenousclamp+0x10>)
   97b12:	4798      	blx	r3
   97b14:	2300      	movs	r3, #0
   97b16:	4618      	mov	r0, r3
   97b18:	bd80      	pop	{r7, pc}
   97b1a:	bf00      	nop
   97b1c:	000966f9 	.word	0x000966f9

00097b20 <sv_cntrl_enable_loopback>:
   97b20:	b580      	push	{r7, lr}
   97b22:	af00      	add	r7, sp, #0
   97b24:	4b03      	ldr	r3, [pc, #12]	; (97b34 <sv_cntrl_enable_loopback+0x14>)
   97b26:	4798      	blx	r3
   97b28:	4b03      	ldr	r3, [pc, #12]	; (97b38 <sv_cntrl_enable_loopback+0x18>)
   97b2a:	2201      	movs	r2, #1
   97b2c:	701a      	strb	r2, [r3, #0]
   97b2e:	2300      	movs	r3, #0
   97b30:	4618      	mov	r0, r3
   97b32:	bd80      	pop	{r7, pc}
   97b34:	00095cc1 	.word	0x00095cc1
   97b38:	20073107 	.word	0x20073107

00097b3c <sv_cntrl_disable_loopback>:
   97b3c:	b580      	push	{r7, lr}
   97b3e:	af00      	add	r7, sp, #0
   97b40:	4b03      	ldr	r3, [pc, #12]	; (97b50 <sv_cntrl_disable_loopback+0x14>)
   97b42:	4798      	blx	r3
   97b44:	4b03      	ldr	r3, [pc, #12]	; (97b54 <sv_cntrl_disable_loopback+0x18>)
   97b46:	2200      	movs	r2, #0
   97b48:	701a      	strb	r2, [r3, #0]
   97b4a:	2300      	movs	r3, #0
   97b4c:	4618      	mov	r0, r3
   97b4e:	bd80      	pop	{r7, pc}
   97b50:	00095ce9 	.word	0x00095ce9
   97b54:	20073107 	.word	0x20073107

00097b58 <sv_cntrl_enable_bypass>:
   97b58:	b580      	push	{r7, lr}
   97b5a:	af00      	add	r7, sp, #0
   97b5c:	4b05      	ldr	r3, [pc, #20]	; (97b74 <sv_cntrl_enable_bypass+0x1c>)
   97b5e:	4798      	blx	r3
   97b60:	2004      	movs	r0, #4
   97b62:	4b05      	ldr	r3, [pc, #20]	; (97b78 <sv_cntrl_enable_bypass+0x20>)
   97b64:	4798      	blx	r3
   97b66:	4b05      	ldr	r3, [pc, #20]	; (97b7c <sv_cntrl_enable_bypass+0x24>)
   97b68:	2201      	movs	r2, #1
   97b6a:	701a      	strb	r2, [r3, #0]
   97b6c:	2300      	movs	r3, #0
   97b6e:	4618      	mov	r0, r3
   97b70:	bd80      	pop	{r7, pc}
   97b72:	bf00      	nop
   97b74:	00095c61 	.word	0x00095c61
   97b78:	00097949 	.word	0x00097949
   97b7c:	2007319d 	.word	0x2007319d

00097b80 <sv_cntrl_disable_bypass>:
   97b80:	b580      	push	{r7, lr}
   97b82:	af00      	add	r7, sp, #0
   97b84:	4b03      	ldr	r3, [pc, #12]	; (97b94 <sv_cntrl_disable_bypass+0x14>)
   97b86:	4798      	blx	r3
   97b88:	4b03      	ldr	r3, [pc, #12]	; (97b98 <sv_cntrl_disable_bypass+0x18>)
   97b8a:	2200      	movs	r2, #0
   97b8c:	701a      	strb	r2, [r3, #0]
   97b8e:	2300      	movs	r3, #0
   97b90:	4618      	mov	r0, r3
   97b92:	bd80      	pop	{r7, pc}
   97b94:	00095c91 	.word	0x00095c91
   97b98:	2007319d 	.word	0x2007319d

00097b9c <sv_cntrl_setflowpath>:
   97b9c:	b580      	push	{r7, lr}
   97b9e:	b082      	sub	sp, #8
   97ba0:	af00      	add	r7, sp, #0
   97ba2:	4603      	mov	r3, r0
   97ba4:	71fb      	strb	r3, [r7, #7]
   97ba6:	4b0a      	ldr	r3, [pc, #40]	; (97bd0 <sv_cntrl_setflowpath+0x34>)
   97ba8:	681a      	ldr	r2, [r3, #0]
   97baa:	4b0a      	ldr	r3, [pc, #40]	; (97bd4 <sv_cntrl_setflowpath+0x38>)
   97bac:	681b      	ldr	r3, [r3, #0]
   97bae:	1ad3      	subs	r3, r2, r3
   97bb0:	4a09      	ldr	r2, [pc, #36]	; (97bd8 <sv_cntrl_setflowpath+0x3c>)
   97bb2:	6013      	str	r3, [r2, #0]
   97bb4:	4b06      	ldr	r3, [pc, #24]	; (97bd0 <sv_cntrl_setflowpath+0x34>)
   97bb6:	681b      	ldr	r3, [r3, #0]
   97bb8:	4a06      	ldr	r2, [pc, #24]	; (97bd4 <sv_cntrl_setflowpath+0x38>)
   97bba:	6013      	str	r3, [r2, #0]
   97bbc:	79fb      	ldrb	r3, [r7, #7]
   97bbe:	4618      	mov	r0, r3
   97bc0:	4b06      	ldr	r3, [pc, #24]	; (97bdc <sv_cntrl_setflowpath+0x40>)
   97bc2:	4798      	blx	r3
   97bc4:	2300      	movs	r3, #0
   97bc6:	4618      	mov	r0, r3
   97bc8:	3708      	adds	r7, #8
   97bca:	46bd      	mov	sp, r7
   97bcc:	bd80      	pop	{r7, pc}
   97bce:	bf00      	nop
   97bd0:	20072680 	.word	0x20072680
   97bd4:	20072f20 	.word	0x20072f20
   97bd8:	20073084 	.word	0x20073084
   97bdc:	00096aa9 	.word	0x00096aa9

00097be0 <sv_cntrl_setpumpfreq>:
   97be0:	b580      	push	{r7, lr}
   97be2:	b082      	sub	sp, #8
   97be4:	af00      	add	r7, sp, #0
   97be6:	4603      	mov	r3, r0
   97be8:	6039      	str	r1, [r7, #0]
   97bea:	71fb      	strb	r3, [r7, #7]
   97bec:	79fb      	ldrb	r3, [r7, #7]
   97bee:	6839      	ldr	r1, [r7, #0]
   97bf0:	4618      	mov	r0, r3
   97bf2:	4b03      	ldr	r3, [pc, #12]	; (97c00 <sv_cntrl_setpumpfreq+0x20>)
   97bf4:	4798      	blx	r3
   97bf6:	2300      	movs	r3, #0
   97bf8:	4618      	mov	r0, r3
   97bfa:	3708      	adds	r7, #8
   97bfc:	46bd      	mov	sp, r7
   97bfe:	bd80      	pop	{r7, pc}
   97c00:	000960c5 	.word	0x000960c5

00097c04 <sv_cntrl_setredalarm>:
   97c04:	b580      	push	{r7, lr}
   97c06:	af00      	add	r7, sp, #0
   97c08:	4b02      	ldr	r3, [pc, #8]	; (97c14 <sv_cntrl_setredalarm+0x10>)
   97c0a:	4798      	blx	r3
   97c0c:	2300      	movs	r3, #0
   97c0e:	4618      	mov	r0, r3
   97c10:	bd80      	pop	{r7, pc}
   97c12:	bf00      	nop
   97c14:	00096189 	.word	0x00096189

00097c18 <sv_cntrl_setyellowalarm>:
   97c18:	b580      	push	{r7, lr}
   97c1a:	af00      	add	r7, sp, #0
   97c1c:	4b02      	ldr	r3, [pc, #8]	; (97c28 <sv_cntrl_setyellowalarm+0x10>)
   97c1e:	4798      	blx	r3
   97c20:	2300      	movs	r3, #0
   97c22:	4618      	mov	r0, r3
   97c24:	bd80      	pop	{r7, pc}
   97c26:	bf00      	nop
   97c28:	000961b1 	.word	0x000961b1

00097c2c <sv_cntrl_setgreenalarm>:
   97c2c:	b580      	push	{r7, lr}
   97c2e:	af00      	add	r7, sp, #0
   97c30:	4b02      	ldr	r3, [pc, #8]	; (97c3c <sv_cntrl_setgreenalarm+0x10>)
   97c32:	4798      	blx	r3
   97c34:	2300      	movs	r3, #0
   97c36:	4618      	mov	r0, r3
   97c38:	bd80      	pop	{r7, pc}
   97c3a:	bf00      	nop
   97c3c:	0009619d 	.word	0x0009619d

00097c40 <sv_cntrl_buzzer>:
   97c40:	b580      	push	{r7, lr}
   97c42:	af00      	add	r7, sp, #0
   97c44:	4b02      	ldr	r3, [pc, #8]	; (97c50 <sv_cntrl_buzzer+0x10>)
   97c46:	4798      	blx	r3
   97c48:	2300      	movs	r3, #0
   97c4a:	4618      	mov	r0, r3
   97c4c:	bd80      	pop	{r7, pc}
   97c4e:	bf00      	nop
   97c50:	000961c5 	.word	0x000961c5

00097c54 <sv_cntrl_resetredalarm>:
   97c54:	b580      	push	{r7, lr}
   97c56:	af00      	add	r7, sp, #0
   97c58:	4b02      	ldr	r3, [pc, #8]	; (97c64 <sv_cntrl_resetredalarm+0x10>)
   97c5a:	4798      	blx	r3
   97c5c:	2300      	movs	r3, #0
   97c5e:	4618      	mov	r0, r3
   97c60:	bd80      	pop	{r7, pc}
   97c62:	bf00      	nop
   97c64:	000961d9 	.word	0x000961d9

00097c68 <sv_cntrl_resetyellowalarm>:
   97c68:	b580      	push	{r7, lr}
   97c6a:	af00      	add	r7, sp, #0
   97c6c:	4b02      	ldr	r3, [pc, #8]	; (97c78 <sv_cntrl_resetyellowalarm+0x10>)
   97c6e:	4798      	blx	r3
   97c70:	2300      	movs	r3, #0
   97c72:	4618      	mov	r0, r3
   97c74:	bd80      	pop	{r7, pc}
   97c76:	bf00      	nop
   97c78:	00096201 	.word	0x00096201

00097c7c <sv_cntrl_resetgreenalarm>:
   97c7c:	b580      	push	{r7, lr}
   97c7e:	af00      	add	r7, sp, #0
   97c80:	4b02      	ldr	r3, [pc, #8]	; (97c8c <sv_cntrl_resetgreenalarm+0x10>)
   97c82:	4798      	blx	r3
   97c84:	2300      	movs	r3, #0
   97c86:	4618      	mov	r0, r3
   97c88:	bd80      	pop	{r7, pc}
   97c8a:	bf00      	nop
   97c8c:	000961ed 	.word	0x000961ed

00097c90 <sv_cntrl_nobuzzer>:
   97c90:	b580      	push	{r7, lr}
   97c92:	af00      	add	r7, sp, #0
   97c94:	4b02      	ldr	r3, [pc, #8]	; (97ca0 <sv_cntrl_nobuzzer+0x10>)
   97c96:	4798      	blx	r3
   97c98:	2300      	movs	r3, #0
   97c9a:	4618      	mov	r0, r3
   97c9c:	bd80      	pop	{r7, pc}
   97c9e:	bf00      	nop
   97ca0:	00096215 	.word	0x00096215

00097ca4 <sv_cntrl_setoutput>:
   97ca4:	b580      	push	{r7, lr}
   97ca6:	b082      	sub	sp, #8
   97ca8:	af00      	add	r7, sp, #0
   97caa:	6078      	str	r0, [r7, #4]
   97cac:	6039      	str	r1, [r7, #0]
   97cae:	6879      	ldr	r1, [r7, #4]
   97cb0:	6838      	ldr	r0, [r7, #0]
   97cb2:	4b03      	ldr	r3, [pc, #12]	; (97cc0 <sv_cntrl_setoutput+0x1c>)
   97cb4:	4798      	blx	r3
   97cb6:	2300      	movs	r3, #0
   97cb8:	4618      	mov	r0, r3
   97cba:	3708      	adds	r7, #8
   97cbc:	46bd      	mov	sp, r7
   97cbe:	bd80      	pop	{r7, pc}
   97cc0:	00094d51 	.word	0x00094d51

00097cc4 <sv_cntrl_resetoutput>:
   97cc4:	b580      	push	{r7, lr}
   97cc6:	b082      	sub	sp, #8
   97cc8:	af00      	add	r7, sp, #0
   97cca:	6078      	str	r0, [r7, #4]
   97ccc:	6039      	str	r1, [r7, #0]
   97cce:	6879      	ldr	r1, [r7, #4]
   97cd0:	6838      	ldr	r0, [r7, #0]
   97cd2:	4b03      	ldr	r3, [pc, #12]	; (97ce0 <sv_cntrl_resetoutput+0x1c>)
   97cd4:	4798      	blx	r3
   97cd6:	2300      	movs	r3, #0
   97cd8:	4618      	mov	r0, r3
   97cda:	3708      	adds	r7, #8
   97cdc:	46bd      	mov	sp, r7
   97cde:	bd80      	pop	{r7, pc}
   97ce0:	00094dd5 	.word	0x00094dd5

00097ce4 <sv_console_bytedatawrite>:
   97ce4:	b580      	push	{r7, lr}
   97ce6:	b084      	sub	sp, #16
   97ce8:	af00      	add	r7, sp, #0
   97cea:	4603      	mov	r3, r0
   97cec:	71fb      	strb	r3, [r7, #7]
   97cee:	79fb      	ldrb	r3, [r7, #7]
   97cf0:	4618      	mov	r0, r3
   97cf2:	4b04      	ldr	r3, [pc, #16]	; (97d04 <sv_console_bytedatawrite+0x20>)
   97cf4:	4798      	blx	r3
   97cf6:	4603      	mov	r3, r0
   97cf8:	60fb      	str	r3, [r7, #12]
   97cfa:	68fb      	ldr	r3, [r7, #12]
   97cfc:	4618      	mov	r0, r3
   97cfe:	3710      	adds	r7, #16
   97d00:	46bd      	mov	sp, r7
   97d02:	bd80      	pop	{r7, pc}
   97d04:	000969ad 	.word	0x000969ad

00097d08 <sv_console_receivedbyte>:
   97d08:	b580      	push	{r7, lr}
   97d0a:	b082      	sub	sp, #8
   97d0c:	af00      	add	r7, sp, #0
   97d0e:	4603      	mov	r3, r0
   97d10:	71fb      	strb	r3, [r7, #7]
   97d12:	79fb      	ldrb	r3, [r7, #7]
   97d14:	4618      	mov	r0, r3
   97d16:	4b03      	ldr	r3, [pc, #12]	; (97d24 <sv_console_receivedbyte+0x1c>)
   97d18:	4798      	blx	r3
   97d1a:	2300      	movs	r3, #0
   97d1c:	4618      	mov	r0, r3
   97d1e:	3708      	adds	r7, #8
   97d20:	46bd      	mov	sp, r7
   97d22:	bd80      	pop	{r7, pc}
   97d24:	00099c85 	.word	0x00099c85

00097d28 <sv_prop_startpropeo_aligning>:
   97d28:	b590      	push	{r4, r7, lr}
   97d2a:	b085      	sub	sp, #20
   97d2c:	af00      	add	r7, sp, #0
   97d2e:	4b07      	ldr	r3, [pc, #28]	; (97d4c <sv_prop_startpropeo_aligning+0x24>)
   97d30:	463c      	mov	r4, r7
   97d32:	6818      	ldr	r0, [r3, #0]
   97d34:	6859      	ldr	r1, [r3, #4]
   97d36:	689a      	ldr	r2, [r3, #8]
   97d38:	68db      	ldr	r3, [r3, #12]
   97d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   97d3c:	2100      	movs	r1, #0
   97d3e:	2001      	movs	r0, #1
   97d40:	4b03      	ldr	r3, [pc, #12]	; (97d50 <sv_prop_startpropeo_aligning+0x28>)
   97d42:	4798      	blx	r3
   97d44:	bf00      	nop
   97d46:	3714      	adds	r7, #20
   97d48:	46bd      	mov	sp, r7
   97d4a:	bd90      	pop	{r4, r7, pc}
   97d4c:	000a627c 	.word	0x000a627c
   97d50:	00097801 	.word	0x00097801

00097d54 <sv_prop_startmixing>:
   97d54:	b580      	push	{r7, lr}
   97d56:	af00      	add	r7, sp, #0
   97d58:	2100      	movs	r1, #0
   97d5a:	2002      	movs	r0, #2
   97d5c:	4b01      	ldr	r3, [pc, #4]	; (97d64 <sv_prop_startmixing+0x10>)
   97d5e:	4798      	blx	r3
   97d60:	bf00      	nop
   97d62:	bd80      	pop	{r7, pc}
   97d64:	00097801 	.word	0x00097801

00097d68 <sv_prop_startacidpump>:
   97d68:	b580      	push	{r7, lr}
   97d6a:	af00      	add	r7, sp, #0
   97d6c:	2100      	movs	r1, #0
   97d6e:	200c      	movs	r0, #12
   97d70:	4b01      	ldr	r3, [pc, #4]	; (97d78 <sv_prop_startacidpump+0x10>)
   97d72:	4798      	blx	r3
   97d74:	bf00      	nop
   97d76:	bd80      	pop	{r7, pc}
   97d78:	00097801 	.word	0x00097801

00097d7c <sv_prop_set_propo_ACIDrc>:
   97d7c:	b580      	push	{r7, lr}
   97d7e:	b084      	sub	sp, #16
   97d80:	af00      	add	r7, sp, #0
   97d82:	4603      	mov	r3, r0
   97d84:	80fb      	strh	r3, [r7, #6]
   97d86:	88fb      	ldrh	r3, [r7, #6]
   97d88:	81fb      	strh	r3, [r7, #14]
   97d8a:	88fb      	ldrh	r3, [r7, #6]
   97d8c:	4619      	mov	r1, r3
   97d8e:	200e      	movs	r0, #14
   97d90:	4b02      	ldr	r3, [pc, #8]	; (97d9c <sv_prop_set_propo_ACIDrc+0x20>)
   97d92:	4798      	blx	r3
   97d94:	bf00      	nop
   97d96:	3710      	adds	r7, #16
   97d98:	46bd      	mov	sp, r7
   97d9a:	bd80      	pop	{r7, pc}
   97d9c:	00097801 	.word	0x00097801

00097da0 <sv_prop_stopmixing>:
   97da0:	b580      	push	{r7, lr}
   97da2:	af00      	add	r7, sp, #0
   97da4:	2100      	movs	r1, #0
   97da6:	2003      	movs	r0, #3
   97da8:	4b01      	ldr	r3, [pc, #4]	; (97db0 <sv_prop_stopmixing+0x10>)
   97daa:	4798      	blx	r3
   97dac:	bf00      	nop
   97dae:	bd80      	pop	{r7, pc}
   97db0:	00097801 	.word	0x00097801

00097db4 <sv_prop_start_disinfect_intake>:
   97db4:	b580      	push	{r7, lr}
   97db6:	af00      	add	r7, sp, #0
   97db8:	2100      	movs	r1, #0
   97dba:	2004      	movs	r0, #4
   97dbc:	4b01      	ldr	r3, [pc, #4]	; (97dc4 <sv_prop_start_disinfect_intake+0x10>)
   97dbe:	4798      	blx	r3
   97dc0:	bf00      	nop
   97dc2:	bd80      	pop	{r7, pc}
   97dc4:	00097801 	.word	0x00097801

00097dc8 <sv_prop_stop_disinfect_intake>:
   97dc8:	b580      	push	{r7, lr}
   97dca:	af00      	add	r7, sp, #0
   97dcc:	2100      	movs	r1, #0
   97dce:	2005      	movs	r0, #5
   97dd0:	4b01      	ldr	r3, [pc, #4]	; (97dd8 <sv_prop_stop_disinfect_intake+0x10>)
   97dd2:	4798      	blx	r3
   97dd4:	bf00      	nop
   97dd6:	bd80      	pop	{r7, pc}
   97dd8:	00097801 	.word	0x00097801

00097ddc <sv_prop_start_citricdisinfect_intake>:
   97ddc:	b580      	push	{r7, lr}
   97dde:	af00      	add	r7, sp, #0
   97de0:	2100      	movs	r1, #0
   97de2:	2006      	movs	r0, #6
   97de4:	4b01      	ldr	r3, [pc, #4]	; (97dec <sv_prop_start_citricdisinfect_intake+0x10>)
   97de6:	4798      	blx	r3
   97de8:	bf00      	nop
   97dea:	bd80      	pop	{r7, pc}
   97dec:	00097801 	.word	0x00097801

00097df0 <sv_prop_stop_citricdisinfect_intake>:
   97df0:	b580      	push	{r7, lr}
   97df2:	af00      	add	r7, sp, #0
   97df4:	2100      	movs	r1, #0
   97df6:	2007      	movs	r0, #7
   97df8:	4b01      	ldr	r3, [pc, #4]	; (97e00 <sv_prop_stop_citricdisinfect_intake+0x10>)
   97dfa:	4798      	blx	r3
   97dfc:	bf00      	nop
   97dfe:	bd80      	pop	{r7, pc}
   97e00:	00097801 	.word	0x00097801

00097e04 <sv_prop_startopenfill>:
   97e04:	b580      	push	{r7, lr}
   97e06:	af00      	add	r7, sp, #0
   97e08:	2206      	movs	r2, #6
   97e0a:	4905      	ldr	r1, [pc, #20]	; (97e20 <sv_prop_startopenfill+0x1c>)
   97e0c:	2018      	movs	r0, #24
   97e0e:	4b05      	ldr	r3, [pc, #20]	; (97e24 <sv_prop_startopenfill+0x20>)
   97e10:	4798      	blx	r3
   97e12:	2100      	movs	r1, #0
   97e14:	2008      	movs	r0, #8
   97e16:	4b04      	ldr	r3, [pc, #16]	; (97e28 <sv_prop_startopenfill+0x24>)
   97e18:	4798      	blx	r3
   97e1a:	bf00      	nop
   97e1c:	bd80      	pop	{r7, pc}
   97e1e:	bf00      	nop
   97e20:	000a628c 	.word	0x000a628c
   97e24:	00099729 	.word	0x00099729
   97e28:	00097801 	.word	0x00097801

00097e2c <sv_prop_stopopenfill>:
   97e2c:	b580      	push	{r7, lr}
   97e2e:	af00      	add	r7, sp, #0
   97e30:	2206      	movs	r2, #6
   97e32:	4905      	ldr	r1, [pc, #20]	; (97e48 <sv_prop_stopopenfill+0x1c>)
   97e34:	2018      	movs	r0, #24
   97e36:	4b05      	ldr	r3, [pc, #20]	; (97e4c <sv_prop_stopopenfill+0x20>)
   97e38:	4798      	blx	r3
   97e3a:	2100      	movs	r1, #0
   97e3c:	2009      	movs	r0, #9
   97e3e:	4b04      	ldr	r3, [pc, #16]	; (97e50 <sv_prop_stopopenfill+0x24>)
   97e40:	4798      	blx	r3
   97e42:	bf00      	nop
   97e44:	bd80      	pop	{r7, pc}
   97e46:	bf00      	nop
   97e48:	000a6294 	.word	0x000a6294
   97e4c:	00099729 	.word	0x00099729
   97e50:	00097801 	.word	0x00097801

00097e54 <sv_cs_setpotvalue>:
   97e54:	b580      	push	{r7, lr}
   97e56:	b082      	sub	sp, #8
   97e58:	af00      	add	r7, sp, #0
   97e5a:	4603      	mov	r3, r0
   97e5c:	80fb      	strh	r3, [r7, #6]
   97e5e:	88fb      	ldrh	r3, [r7, #6]
   97e60:	4618      	mov	r0, r3
   97e62:	4b03      	ldr	r3, [pc, #12]	; (97e70 <sv_cs_setpotvalue+0x1c>)
   97e64:	4798      	blx	r3
   97e66:	bf00      	nop
   97e68:	4618      	mov	r0, r3
   97e6a:	3708      	adds	r7, #8
   97e6c:	46bd      	mov	sp, r7
   97e6e:	bd80      	pop	{r7, pc}
   97e70:	00097e99 	.word	0x00097e99

00097e74 <sv_cs_setcondpotvalue>:
   97e74:	b580      	push	{r7, lr}
   97e76:	b082      	sub	sp, #8
   97e78:	af00      	add	r7, sp, #0
   97e7a:	4603      	mov	r3, r0
   97e7c:	80fb      	strh	r3, [r7, #6]
   97e7e:	88fb      	ldrh	r3, [r7, #6]
   97e80:	4619      	mov	r1, r3
   97e82:	202f      	movs	r0, #47	; 0x2f
   97e84:	4b03      	ldr	r3, [pc, #12]	; (97e94 <sv_cs_setcondpotvalue+0x20>)
   97e86:	4798      	blx	r3
   97e88:	bf00      	nop
   97e8a:	4618      	mov	r0, r3
   97e8c:	3708      	adds	r7, #8
   97e8e:	46bd      	mov	sp, r7
   97e90:	bd80      	pop	{r7, pc}
   97e92:	bf00      	nop
   97e94:	00095389 	.word	0x00095389

00097e98 <SV_CS_SET_POT>:
   97e98:	b580      	push	{r7, lr}
   97e9a:	b084      	sub	sp, #16
   97e9c:	af00      	add	r7, sp, #0
   97e9e:	6078      	str	r0, [r7, #4]
   97ea0:	687b      	ldr	r3, [r7, #4]
   97ea2:	81fb      	strh	r3, [r7, #14]
   97ea4:	89fb      	ldrh	r3, [r7, #14]
   97ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
   97eaa:	81fb      	strh	r3, [r7, #14]
   97eac:	4b08      	ldr	r3, [pc, #32]	; (97ed0 <SV_CS_SET_POT+0x38>)
   97eae:	f641 4202 	movw	r2, #7170	; 0x1c02
   97eb2:	801a      	strh	r2, [r3, #0]
   97eb4:	89fb      	ldrh	r3, [r7, #14]
   97eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   97eba:	b29a      	uxth	r2, r3
   97ebc:	4b04      	ldr	r3, [pc, #16]	; (97ed0 <SV_CS_SET_POT+0x38>)
   97ebe:	805a      	strh	r2, [r3, #2]
   97ec0:	2102      	movs	r1, #2
   97ec2:	4803      	ldr	r0, [pc, #12]	; (97ed0 <SV_CS_SET_POT+0x38>)
   97ec4:	4b03      	ldr	r3, [pc, #12]	; (97ed4 <SV_CS_SET_POT+0x3c>)
   97ec6:	4798      	blx	r3
   97ec8:	bf00      	nop
   97eca:	3710      	adds	r7, #16
   97ecc:	46bd      	mov	sp, r7
   97ece:	bd80      	pop	{r7, pc}
   97ed0:	20073344 	.word	0x20073344
   97ed4:	00095a05 	.word	0x00095a05

00097ed8 <sv_status_getsystemstatus>:
   97ed8:	b580      	push	{r7, lr}
   97eda:	b098      	sub	sp, #96	; 0x60
   97edc:	af00      	add	r7, sp, #0
   97ede:	6078      	str	r0, [r7, #4]
   97ee0:	2300      	movs	r3, #0
   97ee2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
   97ee6:	2301      	movs	r3, #1
   97ee8:	853b      	strh	r3, [r7, #40]	; 0x28
   97eea:	2301      	movs	r3, #1
   97eec:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
   97ef0:	2001      	movs	r0, #1
   97ef2:	4b9c      	ldr	r3, [pc, #624]	; (98164 <sv_status_getsystemstatus+0x28c>)
   97ef4:	4798      	blx	r3
   97ef6:	4603      	mov	r3, r0
   97ef8:	85bb      	strh	r3, [r7, #44]	; 0x2c
   97efa:	2002      	movs	r0, #2
   97efc:	4b99      	ldr	r3, [pc, #612]	; (98164 <sv_status_getsystemstatus+0x28c>)
   97efe:	4798      	blx	r3
   97f00:	4603      	mov	r3, r0
   97f02:	85fb      	strh	r3, [r7, #46]	; 0x2e
   97f04:	2003      	movs	r0, #3
   97f06:	4b97      	ldr	r3, [pc, #604]	; (98164 <sv_status_getsystemstatus+0x28c>)
   97f08:	4798      	blx	r3
   97f0a:	4603      	mov	r3, r0
   97f0c:	863b      	strh	r3, [r7, #48]	; 0x30
   97f0e:	2005      	movs	r0, #5
   97f10:	4b94      	ldr	r3, [pc, #592]	; (98164 <sv_status_getsystemstatus+0x28c>)
   97f12:	4798      	blx	r3
   97f14:	4603      	mov	r3, r0
   97f16:	867b      	strh	r3, [r7, #50]	; 0x32
   97f18:	2006      	movs	r0, #6
   97f1a:	4b92      	ldr	r3, [pc, #584]	; (98164 <sv_status_getsystemstatus+0x28c>)
   97f1c:	4798      	blx	r3
   97f1e:	4603      	mov	r3, r0
   97f20:	86bb      	strh	r3, [r7, #52]	; 0x34
   97f22:	2007      	movs	r0, #7
   97f24:	4b8f      	ldr	r3, [pc, #572]	; (98164 <sv_status_getsystemstatus+0x28c>)
   97f26:	4798      	blx	r3
   97f28:	4603      	mov	r3, r0
   97f2a:	86fb      	strh	r3, [r7, #54]	; 0x36
   97f2c:	200d      	movs	r0, #13
   97f2e:	4b8d      	ldr	r3, [pc, #564]	; (98164 <sv_status_getsystemstatus+0x28c>)
   97f30:	4798      	blx	r3
   97f32:	4603      	mov	r3, r0
   97f34:	877b      	strh	r3, [r7, #58]	; 0x3a
   97f36:	200e      	movs	r0, #14
   97f38:	4b8a      	ldr	r3, [pc, #552]	; (98164 <sv_status_getsystemstatus+0x28c>)
   97f3a:	4798      	blx	r3
   97f3c:	4603      	mov	r3, r0
   97f3e:	87bb      	strh	r3, [r7, #60]	; 0x3c
   97f40:	200b      	movs	r0, #11
   97f42:	4b88      	ldr	r3, [pc, #544]	; (98164 <sv_status_getsystemstatus+0x28c>)
   97f44:	4798      	blx	r3
   97f46:	4603      	mov	r3, r0
   97f48:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   97f4c:	200c      	movs	r0, #12
   97f4e:	4b85      	ldr	r3, [pc, #532]	; (98164 <sv_status_getsystemstatus+0x28c>)
   97f50:	4798      	blx	r3
   97f52:	4603      	mov	r3, r0
   97f54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
   97f58:	2013      	movs	r0, #19
   97f5a:	4b82      	ldr	r3, [pc, #520]	; (98164 <sv_status_getsystemstatus+0x28c>)
   97f5c:	4798      	blx	r3
   97f5e:	4603      	mov	r3, r0
   97f60:	83bb      	strh	r3, [r7, #28]
   97f62:	2014      	movs	r0, #20
   97f64:	4b7f      	ldr	r3, [pc, #508]	; (98164 <sv_status_getsystemstatus+0x28c>)
   97f66:	4798      	blx	r3
   97f68:	4603      	mov	r3, r0
   97f6a:	83fb      	strh	r3, [r7, #30]
   97f6c:	200e      	movs	r0, #14
   97f6e:	4b7e      	ldr	r3, [pc, #504]	; (98168 <sv_status_getsystemstatus+0x290>)
   97f70:	4798      	blx	r3
   97f72:	4603      	mov	r3, r0
   97f74:	733b      	strb	r3, [r7, #12]
   97f76:	2005      	movs	r0, #5
   97f78:	4b7b      	ldr	r3, [pc, #492]	; (98168 <sv_status_getsystemstatus+0x290>)
   97f7a:	4798      	blx	r3
   97f7c:	4603      	mov	r3, r0
   97f7e:	b29b      	uxth	r3, r3
   97f80:	81fb      	strh	r3, [r7, #14]
   97f82:	200f      	movs	r0, #15
   97f84:	4b78      	ldr	r3, [pc, #480]	; (98168 <sv_status_getsystemstatus+0x290>)
   97f86:	4798      	blx	r3
   97f88:	4603      	mov	r3, r0
   97f8a:	b29b      	uxth	r3, r3
   97f8c:	823b      	strh	r3, [r7, #16]
   97f8e:	2010      	movs	r0, #16
   97f90:	4b75      	ldr	r3, [pc, #468]	; (98168 <sv_status_getsystemstatus+0x290>)
   97f92:	4798      	blx	r3
   97f94:	4603      	mov	r3, r0
   97f96:	b29b      	uxth	r3, r3
   97f98:	827b      	strh	r3, [r7, #18]
   97f9a:	200d      	movs	r0, #13
   97f9c:	4b72      	ldr	r3, [pc, #456]	; (98168 <sv_status_getsystemstatus+0x290>)
   97f9e:	4798      	blx	r3
   97fa0:	4603      	mov	r3, r0
   97fa2:	b29b      	uxth	r3, r3
   97fa4:	82fb      	strh	r3, [r7, #22]
   97fa6:	2006      	movs	r0, #6
   97fa8:	4b6f      	ldr	r3, [pc, #444]	; (98168 <sv_status_getsystemstatus+0x290>)
   97faa:	4798      	blx	r3
   97fac:	4603      	mov	r3, r0
   97fae:	b29b      	uxth	r3, r3
   97fb0:	833b      	strh	r3, [r7, #24]
   97fb2:	2007      	movs	r0, #7
   97fb4:	4b6c      	ldr	r3, [pc, #432]	; (98168 <sv_status_getsystemstatus+0x290>)
   97fb6:	4798      	blx	r3
   97fb8:	4603      	mov	r3, r0
   97fba:	b29b      	uxth	r3, r3
   97fbc:	837b      	strh	r3, [r7, #26]
   97fbe:	201a      	movs	r0, #26
   97fc0:	4b69      	ldr	r3, [pc, #420]	; (98168 <sv_status_getsystemstatus+0x290>)
   97fc2:	4798      	blx	r3
   97fc4:	4603      	mov	r3, r0
   97fc6:	b29b      	uxth	r3, r3
   97fc8:	84bb      	strh	r3, [r7, #36]	; 0x24
   97fca:	2008      	movs	r0, #8
   97fcc:	4b66      	ldr	r3, [pc, #408]	; (98168 <sv_status_getsystemstatus+0x290>)
   97fce:	4798      	blx	r3
   97fd0:	4603      	mov	r3, r0
   97fd2:	b29b      	uxth	r3, r3
   97fd4:	84fb      	strh	r3, [r7, #38]	; 0x26
   97fd6:	2003      	movs	r0, #3
   97fd8:	4b63      	ldr	r3, [pc, #396]	; (98168 <sv_status_getsystemstatus+0x290>)
   97fda:	4798      	blx	r3
   97fdc:	4603      	mov	r3, r0
   97fde:	b29b      	uxth	r3, r3
   97fe0:	853b      	strh	r3, [r7, #40]	; 0x28
   97fe2:	2004      	movs	r0, #4
   97fe4:	4b60      	ldr	r3, [pc, #384]	; (98168 <sv_status_getsystemstatus+0x290>)
   97fe6:	4798      	blx	r3
   97fe8:	4603      	mov	r3, r0
   97fea:	b29b      	uxth	r3, r3
   97fec:	857b      	strh	r3, [r7, #42]	; 0x2a
   97fee:	2001      	movs	r0, #1
   97ff0:	4b5d      	ldr	r3, [pc, #372]	; (98168 <sv_status_getsystemstatus+0x290>)
   97ff2:	4798      	blx	r3
   97ff4:	4603      	mov	r3, r0
   97ff6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
   97ffa:	200c      	movs	r0, #12
   97ffc:	4b5a      	ldr	r3, [pc, #360]	; (98168 <sv_status_getsystemstatus+0x290>)
   97ffe:	4798      	blx	r3
   98000:	4603      	mov	r3, r0
   98002:	b29b      	uxth	r3, r3
   98004:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
   98008:	201b      	movs	r0, #27
   9800a:	4b57      	ldr	r3, [pc, #348]	; (98168 <sv_status_getsystemstatus+0x290>)
   9800c:	4798      	blx	r3
   9800e:	4603      	mov	r3, r0
   98010:	b29b      	uxth	r3, r3
   98012:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
   98016:	2009      	movs	r0, #9
   98018:	4b53      	ldr	r3, [pc, #332]	; (98168 <sv_status_getsystemstatus+0x290>)
   9801a:	4798      	blx	r3
   9801c:	4603      	mov	r3, r0
   9801e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
   98022:	200a      	movs	r0, #10
   98024:	4b50      	ldr	r3, [pc, #320]	; (98168 <sv_status_getsystemstatus+0x290>)
   98026:	4798      	blx	r3
   98028:	4603      	mov	r3, r0
   9802a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
   9802e:	2013      	movs	r0, #19
   98030:	4b4d      	ldr	r3, [pc, #308]	; (98168 <sv_status_getsystemstatus+0x290>)
   98032:	4798      	blx	r3
   98034:	4603      	mov	r3, r0
   98036:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
   9803a:	2014      	movs	r0, #20
   9803c:	4b4a      	ldr	r3, [pc, #296]	; (98168 <sv_status_getsystemstatus+0x290>)
   9803e:	4798      	blx	r3
   98040:	4603      	mov	r3, r0
   98042:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
   98046:	2015      	movs	r0, #21
   98048:	4b47      	ldr	r3, [pc, #284]	; (98168 <sv_status_getsystemstatus+0x290>)
   9804a:	4798      	blx	r3
   9804c:	4603      	mov	r3, r0
   9804e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
   98052:	2016      	movs	r0, #22
   98054:	4b44      	ldr	r3, [pc, #272]	; (98168 <sv_status_getsystemstatus+0x290>)
   98056:	4798      	blx	r3
   98058:	4603      	mov	r3, r0
   9805a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
   9805e:	2017      	movs	r0, #23
   98060:	4b41      	ldr	r3, [pc, #260]	; (98168 <sv_status_getsystemstatus+0x290>)
   98062:	4798      	blx	r3
   98064:	4603      	mov	r3, r0
   98066:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
   9806a:	2018      	movs	r0, #24
   9806c:	4b3e      	ldr	r3, [pc, #248]	; (98168 <sv_status_getsystemstatus+0x290>)
   9806e:	4798      	blx	r3
   98070:	4603      	mov	r3, r0
   98072:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
   98076:	2002      	movs	r0, #2
   98078:	4b3b      	ldr	r3, [pc, #236]	; (98168 <sv_status_getsystemstatus+0x290>)
   9807a:	4798      	blx	r3
   9807c:	4603      	mov	r3, r0
   9807e:	b29b      	uxth	r3, r3
   98080:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
   98084:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
   98086:	687b      	ldr	r3, [r7, #4]
   98088:	841a      	strh	r2, [r3, #32]
   9808a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
   9808c:	687b      	ldr	r3, [r7, #4]
   9808e:	845a      	strh	r2, [r3, #34]	; 0x22
   98090:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
   98092:	687b      	ldr	r3, [r7, #4]
   98094:	849a      	strh	r2, [r3, #36]	; 0x24
   98096:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
   98098:	687b      	ldr	r3, [r7, #4]
   9809a:	85da      	strh	r2, [r3, #46]	; 0x2e
   9809c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
   9809e:	687b      	ldr	r3, [r7, #4]
   980a0:	861a      	strh	r2, [r3, #48]	; 0x30
   980a2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
   980a4:	687b      	ldr	r3, [r7, #4]
   980a6:	865a      	strh	r2, [r3, #50]	; 0x32
   980a8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
   980ac:	687b      	ldr	r3, [r7, #4]
   980ae:	869a      	strh	r2, [r3, #52]	; 0x34
   980b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
   980b4:	687b      	ldr	r3, [r7, #4]
   980b6:	86da      	strh	r2, [r3, #54]	; 0x36
   980b8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   980ba:	687b      	ldr	r3, [r7, #4]
   980bc:	84da      	strh	r2, [r3, #38]	; 0x26
   980be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
   980c0:	687b      	ldr	r3, [r7, #4]
   980c2:	851a      	strh	r2, [r3, #40]	; 0x28
   980c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   980c6:	687b      	ldr	r3, [r7, #4]
   980c8:	855a      	strh	r2, [r3, #42]	; 0x2a
   980ca:	8bba      	ldrh	r2, [r7, #28]
   980cc:	687b      	ldr	r3, [r7, #4]
   980ce:	821a      	strh	r2, [r3, #16]
   980d0:	8bfa      	ldrh	r2, [r7, #30]
   980d2:	687b      	ldr	r3, [r7, #4]
   980d4:	825a      	strh	r2, [r3, #18]
   980d6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
   980da:	687b      	ldr	r3, [r7, #4]
   980dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   980e0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   980e2:	687b      	ldr	r3, [r7, #4]
   980e4:	839a      	strh	r2, [r3, #28]
   980e6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
   980ea:	687b      	ldr	r3, [r7, #4]
   980ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   980f0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
   980f2:	687b      	ldr	r3, [r7, #4]
   980f4:	83da      	strh	r2, [r3, #30]
   980f6:	89fa      	ldrh	r2, [r7, #14]
   980f8:	687b      	ldr	r3, [r7, #4]
   980fa:	805a      	strh	r2, [r3, #2]
   980fc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
   98100:	687b      	ldr	r3, [r7, #4]
   98102:	879a      	strh	r2, [r3, #60]	; 0x3c
   98104:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   98106:	687b      	ldr	r3, [r7, #4]
   98108:	831a      	strh	r2, [r3, #24]
   9810a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   9810c:	687b      	ldr	r3, [r7, #4]
   9810e:	835a      	strh	r2, [r3, #26]
   98110:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
   98114:	687b      	ldr	r3, [r7, #4]
   98116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
   9811a:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
   9811e:	687b      	ldr	r3, [r7, #4]
   98120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   98124:	7b3a      	ldrb	r2, [r7, #12]
   98126:	687b      	ldr	r3, [r7, #4]
   98128:	701a      	strb	r2, [r3, #0]
   9812a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
   9812e:	687b      	ldr	r3, [r7, #4]
   98130:	875a      	strh	r2, [r3, #58]	; 0x3a
   98132:	8b3a      	ldrh	r2, [r7, #24]
   98134:	687b      	ldr	r3, [r7, #4]
   98136:	819a      	strh	r2, [r3, #12]
   98138:	8b7a      	ldrh	r2, [r7, #26]
   9813a:	687b      	ldr	r3, [r7, #4]
   9813c:	81da      	strh	r2, [r3, #14]
   9813e:	8afa      	ldrh	r2, [r7, #22]
   98140:	687b      	ldr	r3, [r7, #4]
   98142:	815a      	strh	r2, [r3, #10]
   98144:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
   98148:	687b      	ldr	r3, [r7, #4]
   9814a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   9814e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
   98152:	687b      	ldr	r3, [r7, #4]
   98154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
   98158:	2300      	movs	r3, #0
   9815a:	4618      	mov	r0, r3
   9815c:	3760      	adds	r7, #96	; 0x60
   9815e:	46bd      	mov	sp, r7
   98160:	bd80      	pop	{r7, pc}
   98162:	bf00      	nop
   98164:	00094969 	.word	0x00094969
   98168:	00096721 	.word	0x00096721

0009816c <SV_SYSTEM_INIT>:
   9816c:	b580      	push	{r7, lr}
   9816e:	b082      	sub	sp, #8
   98170:	af00      	add	r7, sp, #0
   98172:	4b1b      	ldr	r3, [pc, #108]	; (981e0 <SV_SYSTEM_INIT+0x74>)
   98174:	4798      	blx	r3
   98176:	4b1b      	ldr	r3, [pc, #108]	; (981e4 <SV_SYSTEM_INIT+0x78>)
   98178:	4798      	blx	r3
   9817a:	4b1b      	ldr	r3, [pc, #108]	; (981e8 <SV_SYSTEM_INIT+0x7c>)
   9817c:	4798      	blx	r3
   9817e:	4b1b      	ldr	r3, [pc, #108]	; (981ec <SV_SYSTEM_INIT+0x80>)
   98180:	4798      	blx	r3
   98182:	4b1b      	ldr	r3, [pc, #108]	; (981f0 <SV_SYSTEM_INIT+0x84>)
   98184:	4798      	blx	r3
   98186:	4b1b      	ldr	r3, [pc, #108]	; (981f4 <SV_SYSTEM_INIT+0x88>)
   98188:	4798      	blx	r3
   9818a:	4b1b      	ldr	r3, [pc, #108]	; (981f8 <SV_SYSTEM_INIT+0x8c>)
   9818c:	4798      	blx	r3
   9818e:	4b1b      	ldr	r3, [pc, #108]	; (981fc <SV_SYSTEM_INIT+0x90>)
   98190:	4798      	blx	r3
   98192:	4b1b      	ldr	r3, [pc, #108]	; (98200 <SV_SYSTEM_INIT+0x94>)
   98194:	4798      	blx	r3
   98196:	4b1b      	ldr	r3, [pc, #108]	; (98204 <SV_SYSTEM_INIT+0x98>)
   98198:	4798      	blx	r3
   9819a:	2003      	movs	r0, #3
   9819c:	4b1a      	ldr	r3, [pc, #104]	; (98208 <SV_SYSTEM_INIT+0x9c>)
   9819e:	4798      	blx	r3
   981a0:	2006      	movs	r0, #6
   981a2:	4b19      	ldr	r3, [pc, #100]	; (98208 <SV_SYSTEM_INIT+0x9c>)
   981a4:	4798      	blx	r3
   981a6:	2008      	movs	r0, #8
   981a8:	4b17      	ldr	r3, [pc, #92]	; (98208 <SV_SYSTEM_INIT+0x9c>)
   981aa:	4798      	blx	r3
   981ac:	2009      	movs	r0, #9
   981ae:	4b16      	ldr	r3, [pc, #88]	; (98208 <SV_SYSTEM_INIT+0x9c>)
   981b0:	4798      	blx	r3
   981b2:	2000      	movs	r0, #0
   981b4:	4b14      	ldr	r3, [pc, #80]	; (98208 <SV_SYSTEM_INIT+0x9c>)
   981b6:	4798      	blx	r3
   981b8:	200a      	movs	r0, #10
   981ba:	4b13      	ldr	r3, [pc, #76]	; (98208 <SV_SYSTEM_INIT+0x9c>)
   981bc:	4798      	blx	r3
   981be:	2300      	movs	r3, #0
   981c0:	607b      	str	r3, [r7, #4]
   981c2:	e002      	b.n	981ca <SV_SYSTEM_INIT+0x5e>
   981c4:	687b      	ldr	r3, [r7, #4]
   981c6:	3301      	adds	r3, #1
   981c8:	607b      	str	r3, [r7, #4]
   981ca:	687b      	ldr	r3, [r7, #4]
   981cc:	2b09      	cmp	r3, #9
   981ce:	ddf9      	ble.n	981c4 <SV_SYSTEM_INIT+0x58>
   981d0:	2101      	movs	r1, #1
   981d2:	2000      	movs	r0, #0
   981d4:	4b0d      	ldr	r3, [pc, #52]	; (9820c <SV_SYSTEM_INIT+0xa0>)
   981d6:	4798      	blx	r3
   981d8:	bf00      	nop
   981da:	3708      	adds	r7, #8
   981dc:	46bd      	mov	sp, r7
   981de:	bd80      	pop	{r7, pc}
   981e0:	00094ab1 	.word	0x00094ab1
   981e4:	00094ae5 	.word	0x00094ae5
   981e8:	0009776d 	.word	0x0009776d
   981ec:	00097265 	.word	0x00097265
   981f0:	00095739 	.word	0x00095739
   981f4:	000955e5 	.word	0x000955e5
   981f8:	00095509 	.word	0x00095509
   981fc:	00095355 	.word	0x00095355
   98200:	00095b45 	.word	0x00095b45
   98204:	000947f9 	.word	0x000947f9
   98208:	0008cc01 	.word	0x0008cc01
   9820c:	00098211 	.word	0x00098211

00098210 <SV_START_TIMER>:
   98210:	b580      	push	{r7, lr}
   98212:	b082      	sub	sp, #8
   98214:	af00      	add	r7, sp, #0
   98216:	4603      	mov	r3, r0
   98218:	6039      	str	r1, [r7, #0]
   9821a:	71fb      	strb	r3, [r7, #7]
   9821c:	683b      	ldr	r3, [r7, #0]
   9821e:	b2da      	uxtb	r2, r3
   98220:	79fb      	ldrb	r3, [r7, #7]
   98222:	4611      	mov	r1, r2
   98224:	4618      	mov	r0, r3
   98226:	4b03      	ldr	r3, [pc, #12]	; (98234 <SV_START_TIMER+0x24>)
   98228:	4798      	blx	r3
   9822a:	2300      	movs	r3, #0
   9822c:	4618      	mov	r0, r3
   9822e:	3708      	adds	r7, #8
   98230:	46bd      	mov	sp, r7
   98232:	bd80      	pop	{r7, pc}
   98234:	000969f9 	.word	0x000969f9

00098238 <sv_nvmgetdata>:
	uint8_t byte[2];
	uint16_t twobyte;
	}nvdatatype;
	
Sv_ReturnCodesType sv_nvmgetdata(uint8_t dataItemId, uint8_t* pdata)
{
   98238:	b480      	push	{r7}
   9823a:	b085      	sub	sp, #20
   9823c:	af00      	add	r7, sp, #0
   9823e:	4603      	mov	r3, r0
   98240:	6039      	str	r1, [r7, #0]
   98242:	71fb      	strb	r3, [r7, #7]
	{
		pdata[size] = nvmarray[(dataItemId-1) * 4 + size] ;
	}
#endif
	
			temp.twobyte = nvmarray[dataItemId-1]  ;
   98244:	79fb      	ldrb	r3, [r7, #7]
   98246:	3b01      	subs	r3, #1
   98248:	4a08      	ldr	r2, [pc, #32]	; (9826c <sv_nvmgetdata+0x34>)
   9824a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   9824e:	81bb      	strh	r3, [r7, #12]
			pdata[0] = temp.byte[0]  ;
   98250:	7b3a      	ldrb	r2, [r7, #12]
   98252:	683b      	ldr	r3, [r7, #0]
   98254:	701a      	strb	r2, [r3, #0]
			pdata[1] = temp.byte[1]  ;
   98256:	683b      	ldr	r3, [r7, #0]
   98258:	3301      	adds	r3, #1
   9825a:	7b7a      	ldrb	r2, [r7, #13]
   9825c:	701a      	strb	r2, [r3, #0]
		break;
		default:
		break;
	}
	#endif
		return SV_OK;
   9825e:	2300      	movs	r3, #0
}
   98260:	4618      	mov	r0, r3
   98262:	3714      	adds	r7, #20
   98264:	46bd      	mov	sp, r7
   98266:	bc80      	pop	{r7}
   98268:	4770      	bx	lr
   9826a:	bf00      	nop
   9826c:	20070a0c 	.word	0x20070a0c

00098270 <sv_nvmsetdata>:


Sv_ReturnCodesType sv_nvmsetdata(uint8_t dataItemId,uint8_t* pdata,uint8_t datasize)
{
   98270:	b480      	push	{r7}
   98272:	b085      	sub	sp, #20
   98274:	af00      	add	r7, sp, #0
   98276:	4603      	mov	r3, r0
   98278:	6039      	str	r1, [r7, #0]
   9827a:	71fb      	strb	r3, [r7, #7]
   9827c:	4613      	mov	r3, r2
   9827e:	71bb      	strb	r3, [r7, #6]
				
				
					
	#endif
	
			temp.byte[0] = pdata[0];
   98280:	683b      	ldr	r3, [r7, #0]
   98282:	781b      	ldrb	r3, [r3, #0]
   98284:	733b      	strb	r3, [r7, #12]
			temp.byte[1] = pdata[1];
   98286:	683b      	ldr	r3, [r7, #0]
   98288:	785b      	ldrb	r3, [r3, #1]
   9828a:	737b      	strb	r3, [r7, #13]
			nvmarray[dataItemId-1] = temp.twobyte;
   9828c:	79fb      	ldrb	r3, [r7, #7]
   9828e:	3b01      	subs	r3, #1
   98290:	89b9      	ldrh	r1, [r7, #12]
   98292:	4a04      	ldr	r2, [pc, #16]	; (982a4 <sv_nvmsetdata+0x34>)
   98294:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			
		return SV_OK;
   98298:	2300      	movs	r3, #0
   9829a:	4618      	mov	r0, r3
   9829c:	3714      	adds	r7, #20
   9829e:	46bd      	mov	sp, r7
   982a0:	bc80      	pop	{r7}
   982a2:	4770      	bx	lr
   982a4:	20070a0c 	.word	0x20070a0c

000982a8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   982a8:	b580      	push	{r7, lr}
   982aa:	b086      	sub	sp, #24
   982ac:	af00      	add	r7, sp, #0
   982ae:	60f8      	str	r0, [r7, #12]
   982b0:	60b9      	str	r1, [r7, #8]
   982b2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   982b4:	2300      	movs	r3, #0
   982b6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   982b8:	68fb      	ldr	r3, [r7, #12]
   982ba:	2b00      	cmp	r3, #0
   982bc:	d012      	beq.n	982e4 <_read+0x3c>
		return -1;
   982be:	f04f 33ff 	mov.w	r3, #4294967295
   982c2:	e013      	b.n	982ec <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   982c4:	4b0b      	ldr	r3, [pc, #44]	; (982f4 <_read+0x4c>)
   982c6:	681b      	ldr	r3, [r3, #0]
   982c8:	4a0b      	ldr	r2, [pc, #44]	; (982f8 <_read+0x50>)
   982ca:	6812      	ldr	r2, [r2, #0]
   982cc:	68b9      	ldr	r1, [r7, #8]
   982ce:	4610      	mov	r0, r2
   982d0:	4798      	blx	r3
		ptr++;
   982d2:	68bb      	ldr	r3, [r7, #8]
   982d4:	3301      	adds	r3, #1
   982d6:	60bb      	str	r3, [r7, #8]
		nChars++;
   982d8:	697b      	ldr	r3, [r7, #20]
   982da:	3301      	adds	r3, #1
   982dc:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   982de:	687b      	ldr	r3, [r7, #4]
   982e0:	3b01      	subs	r3, #1
   982e2:	607b      	str	r3, [r7, #4]
   982e4:	687b      	ldr	r3, [r7, #4]
   982e6:	2b00      	cmp	r3, #0
   982e8:	dcec      	bgt.n	982c4 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   982ea:	697b      	ldr	r3, [r7, #20]
}
   982ec:	4618      	mov	r0, r3
   982ee:	3718      	adds	r7, #24
   982f0:	46bd      	mov	sp, r7
   982f2:	bd80      	pop	{r7, pc}
   982f4:	2007334c 	.word	0x2007334c
   982f8:	20073354 	.word	0x20073354

000982fc <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   982fc:	b580      	push	{r7, lr}
   982fe:	b086      	sub	sp, #24
   98300:	af00      	add	r7, sp, #0
   98302:	60f8      	str	r0, [r7, #12]
   98304:	60b9      	str	r1, [r7, #8]
   98306:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   98308:	2300      	movs	r3, #0
   9830a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   9830c:	68fb      	ldr	r3, [r7, #12]
   9830e:	2b01      	cmp	r3, #1
   98310:	d01e      	beq.n	98350 <_write+0x54>
   98312:	68fb      	ldr	r3, [r7, #12]
   98314:	2b02      	cmp	r3, #2
   98316:	d01b      	beq.n	98350 <_write+0x54>
   98318:	68fb      	ldr	r3, [r7, #12]
   9831a:	2b03      	cmp	r3, #3
   9831c:	d018      	beq.n	98350 <_write+0x54>
		return -1;
   9831e:	f04f 33ff 	mov.w	r3, #4294967295
   98322:	e019      	b.n	98358 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   98324:	4b0e      	ldr	r3, [pc, #56]	; (98360 <_write+0x64>)
   98326:	681a      	ldr	r2, [r3, #0]
   98328:	4b0e      	ldr	r3, [pc, #56]	; (98364 <_write+0x68>)
   9832a:	6818      	ldr	r0, [r3, #0]
   9832c:	68bb      	ldr	r3, [r7, #8]
   9832e:	1c59      	adds	r1, r3, #1
   98330:	60b9      	str	r1, [r7, #8]
   98332:	781b      	ldrb	r3, [r3, #0]
   98334:	4619      	mov	r1, r3
   98336:	4790      	blx	r2
   98338:	4603      	mov	r3, r0
   9833a:	2b00      	cmp	r3, #0
   9833c:	da02      	bge.n	98344 <_write+0x48>
			return -1;
   9833e:	f04f 33ff 	mov.w	r3, #4294967295
   98342:	e009      	b.n	98358 <_write+0x5c>
		}
		++nChars;
   98344:	697b      	ldr	r3, [r7, #20]
   98346:	3301      	adds	r3, #1
   98348:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   9834a:	687b      	ldr	r3, [r7, #4]
   9834c:	3b01      	subs	r3, #1
   9834e:	607b      	str	r3, [r7, #4]
   98350:	687b      	ldr	r3, [r7, #4]
   98352:	2b00      	cmp	r3, #0
   98354:	d1e6      	bne.n	98324 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   98356:	697b      	ldr	r3, [r7, #20]
}
   98358:	4618      	mov	r0, r3
   9835a:	3718      	adds	r7, #24
   9835c:	46bd      	mov	sp, r7
   9835e:	bd80      	pop	{r7, pc}
   98360:	20073350 	.word	0x20073350
   98364:	20073354 	.word	0x20073354

00098368 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   98368:	b580      	push	{r7, lr}
   9836a:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   9836c:	4b05      	ldr	r3, [pc, #20]	; (98384 <board_init+0x1c>)
   9836e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   98372:	605a      	str	r2, [r3, #4]
//hh	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
//hh	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   98374:	4a04      	ldr	r2, [pc, #16]	; (98388 <board_init+0x20>)
   98376:	f44f 7140 	mov.w	r1, #768	; 0x300
   9837a:	4804      	ldr	r0, [pc, #16]	; (9838c <board_init+0x24>)
   9837c:	4b04      	ldr	r3, [pc, #16]	; (98390 <board_init+0x28>)
   9837e:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   98380:	bf00      	nop
   98382:	bd80      	pop	{r7, pc}
   98384:	400e1a50 	.word	0x400e1a50
   98388:	08000001 	.word	0x08000001
   9838c:	400e0e00 	.word	0x400e0e00
   98390:	000986ad 	.word	0x000986ad

00098394 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   98394:	b480      	push	{r7}
   98396:	b085      	sub	sp, #20
   98398:	af00      	add	r7, sp, #0
   9839a:	60f8      	str	r0, [r7, #12]
   9839c:	60b9      	str	r1, [r7, #8]
   9839e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   983a0:	687b      	ldr	r3, [r7, #4]
   983a2:	2b00      	cmp	r3, #0
   983a4:	d003      	beq.n	983ae <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   983a6:	68fb      	ldr	r3, [r7, #12]
   983a8:	68ba      	ldr	r2, [r7, #8]
   983aa:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   983ac:	e002      	b.n	983b4 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
   983ae:	68fb      	ldr	r3, [r7, #12]
   983b0:	68ba      	ldr	r2, [r7, #8]
   983b2:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   983b4:	bf00      	nop
   983b6:	3714      	adds	r7, #20
   983b8:	46bd      	mov	sp, r7
   983ba:	bc80      	pop	{r7}
   983bc:	4770      	bx	lr
   983be:	bf00      	nop

000983c0 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   983c0:	b480      	push	{r7}
   983c2:	b087      	sub	sp, #28
   983c4:	af00      	add	r7, sp, #0
   983c6:	60f8      	str	r0, [r7, #12]
   983c8:	60b9      	str	r1, [r7, #8]
   983ca:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   983cc:	68fb      	ldr	r3, [r7, #12]
   983ce:	687a      	ldr	r2, [r7, #4]
   983d0:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   983d2:	68bb      	ldr	r3, [r7, #8]
   983d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   983d8:	d01f      	beq.n	9841a <pio_set_peripheral+0x5a>
   983da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   983de:	d805      	bhi.n	983ec <pio_set_peripheral+0x2c>
   983e0:	2b00      	cmp	r3, #0
   983e2:	d027      	beq.n	98434 <pio_set_peripheral+0x74>
   983e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   983e8:	d00a      	beq.n	98400 <pio_set_peripheral+0x40>
   983ea:	e01f      	b.n	9842c <pio_set_peripheral+0x6c>
   983ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   983f0:	d020      	beq.n	98434 <pio_set_peripheral+0x74>
   983f2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   983f6:	d01d      	beq.n	98434 <pio_set_peripheral+0x74>
   983f8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   983fc:	d01a      	beq.n	98434 <pio_set_peripheral+0x74>
   983fe:	e015      	b.n	9842c <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   98400:	68fb      	ldr	r3, [r7, #12]
   98402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   98404:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   98406:	68fb      	ldr	r3, [r7, #12]
   98408:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   9840a:	687b      	ldr	r3, [r7, #4]
   9840c:	43d9      	mvns	r1, r3
   9840e:	697b      	ldr	r3, [r7, #20]
   98410:	400b      	ands	r3, r1
   98412:	401a      	ands	r2, r3
   98414:	68fb      	ldr	r3, [r7, #12]
   98416:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   98418:	e008      	b.n	9842c <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   9841a:	68fb      	ldr	r3, [r7, #12]
   9841c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   9841e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   98420:	687a      	ldr	r2, [r7, #4]
   98422:	697b      	ldr	r3, [r7, #20]
   98424:	431a      	orrs	r2, r3
   98426:	68fb      	ldr	r3, [r7, #12]
   98428:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   9842a:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   9842c:	68fb      	ldr	r3, [r7, #12]
   9842e:	687a      	ldr	r2, [r7, #4]
   98430:	605a      	str	r2, [r3, #4]
   98432:	e000      	b.n	98436 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   98434:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   98436:	371c      	adds	r7, #28
   98438:	46bd      	mov	sp, r7
   9843a:	bc80      	pop	{r7}
   9843c:	4770      	bx	lr
   9843e:	bf00      	nop

00098440 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   98440:	b580      	push	{r7, lr}
   98442:	b084      	sub	sp, #16
   98444:	af00      	add	r7, sp, #0
   98446:	60f8      	str	r0, [r7, #12]
   98448:	60b9      	str	r1, [r7, #8]
   9844a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   9844c:	68b9      	ldr	r1, [r7, #8]
   9844e:	68f8      	ldr	r0, [r7, #12]
   98450:	4b19      	ldr	r3, [pc, #100]	; (984b8 <pio_set_input+0x78>)
   98452:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   98454:	687b      	ldr	r3, [r7, #4]
   98456:	f003 0301 	and.w	r3, r3, #1
   9845a:	461a      	mov	r2, r3
   9845c:	68b9      	ldr	r1, [r7, #8]
   9845e:	68f8      	ldr	r0, [r7, #12]
   98460:	4b16      	ldr	r3, [pc, #88]	; (984bc <pio_set_input+0x7c>)
   98462:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   98464:	687b      	ldr	r3, [r7, #4]
   98466:	f003 030a 	and.w	r3, r3, #10
   9846a:	2b00      	cmp	r3, #0
   9846c:	d003      	beq.n	98476 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   9846e:	68fb      	ldr	r3, [r7, #12]
   98470:	68ba      	ldr	r2, [r7, #8]
   98472:	621a      	str	r2, [r3, #32]
   98474:	e002      	b.n	9847c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   98476:	68fb      	ldr	r3, [r7, #12]
   98478:	68ba      	ldr	r2, [r7, #8]
   9847a:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   9847c:	687b      	ldr	r3, [r7, #4]
   9847e:	f003 0302 	and.w	r3, r3, #2
   98482:	2b00      	cmp	r3, #0
   98484:	d004      	beq.n	98490 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   98486:	68fb      	ldr	r3, [r7, #12]
   98488:	68ba      	ldr	r2, [r7, #8]
   9848a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   9848e:	e008      	b.n	984a2 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   98490:	687b      	ldr	r3, [r7, #4]
   98492:	f003 0308 	and.w	r3, r3, #8
   98496:	2b00      	cmp	r3, #0
   98498:	d003      	beq.n	984a2 <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   9849a:	68fb      	ldr	r3, [r7, #12]
   9849c:	68ba      	ldr	r2, [r7, #8]
   9849e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   984a2:	68fb      	ldr	r3, [r7, #12]
   984a4:	68ba      	ldr	r2, [r7, #8]
   984a6:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   984a8:	68fb      	ldr	r3, [r7, #12]
   984aa:	68ba      	ldr	r2, [r7, #8]
   984ac:	601a      	str	r2, [r3, #0]
}
   984ae:	bf00      	nop
   984b0:	3710      	adds	r7, #16
   984b2:	46bd      	mov	sp, r7
   984b4:	bd80      	pop	{r7, pc}
   984b6:	bf00      	nop
   984b8:	00098525 	.word	0x00098525
   984bc:	00098395 	.word	0x00098395

000984c0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   984c0:	b580      	push	{r7, lr}
   984c2:	b084      	sub	sp, #16
   984c4:	af00      	add	r7, sp, #0
   984c6:	60f8      	str	r0, [r7, #12]
   984c8:	60b9      	str	r1, [r7, #8]
   984ca:	607a      	str	r2, [r7, #4]
   984cc:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   984ce:	68b9      	ldr	r1, [r7, #8]
   984d0:	68f8      	ldr	r0, [r7, #12]
   984d2:	4b12      	ldr	r3, [pc, #72]	; (9851c <pio_set_output+0x5c>)
   984d4:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   984d6:	69ba      	ldr	r2, [r7, #24]
   984d8:	68b9      	ldr	r1, [r7, #8]
   984da:	68f8      	ldr	r0, [r7, #12]
   984dc:	4b10      	ldr	r3, [pc, #64]	; (98520 <pio_set_output+0x60>)
   984de:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   984e0:	683b      	ldr	r3, [r7, #0]
   984e2:	2b00      	cmp	r3, #0
   984e4:	d003      	beq.n	984ee <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   984e6:	68fb      	ldr	r3, [r7, #12]
   984e8:	68ba      	ldr	r2, [r7, #8]
   984ea:	651a      	str	r2, [r3, #80]	; 0x50
   984ec:	e002      	b.n	984f4 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   984ee:	68fb      	ldr	r3, [r7, #12]
   984f0:	68ba      	ldr	r2, [r7, #8]
   984f2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   984f4:	687b      	ldr	r3, [r7, #4]
   984f6:	2b00      	cmp	r3, #0
   984f8:	d003      	beq.n	98502 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   984fa:	68fb      	ldr	r3, [r7, #12]
   984fc:	68ba      	ldr	r2, [r7, #8]
   984fe:	631a      	str	r2, [r3, #48]	; 0x30
   98500:	e002      	b.n	98508 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   98502:	68fb      	ldr	r3, [r7, #12]
   98504:	68ba      	ldr	r2, [r7, #8]
   98506:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   98508:	68fb      	ldr	r3, [r7, #12]
   9850a:	68ba      	ldr	r2, [r7, #8]
   9850c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   9850e:	68fb      	ldr	r3, [r7, #12]
   98510:	68ba      	ldr	r2, [r7, #8]
   98512:	601a      	str	r2, [r3, #0]
}
   98514:	bf00      	nop
   98516:	3710      	adds	r7, #16
   98518:	46bd      	mov	sp, r7
   9851a:	bd80      	pop	{r7, pc}
   9851c:	00098525 	.word	0x00098525
   98520:	00098395 	.word	0x00098395

00098524 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   98524:	b480      	push	{r7}
   98526:	b083      	sub	sp, #12
   98528:	af00      	add	r7, sp, #0
   9852a:	6078      	str	r0, [r7, #4]
   9852c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   9852e:	687b      	ldr	r3, [r7, #4]
   98530:	683a      	ldr	r2, [r7, #0]
   98532:	645a      	str	r2, [r3, #68]	; 0x44
}
   98534:	bf00      	nop
   98536:	370c      	adds	r7, #12
   98538:	46bd      	mov	sp, r7
   9853a:	bc80      	pop	{r7}
   9853c:	4770      	bx	lr
   9853e:	bf00      	nop

00098540 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   98540:	b480      	push	{r7}
   98542:	b083      	sub	sp, #12
   98544:	af00      	add	r7, sp, #0
   98546:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   98548:	687b      	ldr	r3, [r7, #4]
   9854a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   9854c:	4618      	mov	r0, r3
   9854e:	370c      	adds	r7, #12
   98550:	46bd      	mov	sp, r7
   98552:	bc80      	pop	{r7}
   98554:	4770      	bx	lr
   98556:	bf00      	nop

00098558 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   98558:	b480      	push	{r7}
   9855a:	b083      	sub	sp, #12
   9855c:	af00      	add	r7, sp, #0
   9855e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   98560:	687b      	ldr	r3, [r7, #4]
   98562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   98564:	4618      	mov	r0, r3
   98566:	370c      	adds	r7, #12
   98568:	46bd      	mov	sp, r7
   9856a:	bc80      	pop	{r7}
   9856c:	4770      	bx	lr
   9856e:	bf00      	nop

00098570 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   98570:	b590      	push	{r4, r7, lr}
   98572:	b087      	sub	sp, #28
   98574:	af02      	add	r7, sp, #8
   98576:	6078      	str	r0, [r7, #4]
   98578:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   9857a:	687b      	ldr	r3, [r7, #4]
   9857c:	095b      	lsrs	r3, r3, #5
   9857e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   98582:	f203 7307 	addw	r3, r3, #1799	; 0x707
   98586:	025b      	lsls	r3, r3, #9
   98588:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   9858a:	683b      	ldr	r3, [r7, #0]
   9858c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   98590:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   98594:	d046      	beq.n	98624 <pio_configure_pin+0xb4>
   98596:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9859a:	d806      	bhi.n	985aa <pio_configure_pin+0x3a>
   9859c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   985a0:	d00a      	beq.n	985b8 <pio_configure_pin+0x48>
   985a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   985a6:	d022      	beq.n	985ee <pio_configure_pin+0x7e>
   985a8:	e070      	b.n	9868c <pio_configure_pin+0x11c>
   985aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   985ae:	d045      	beq.n	9863c <pio_configure_pin+0xcc>
   985b0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   985b4:	d042      	beq.n	9863c <pio_configure_pin+0xcc>
   985b6:	e069      	b.n	9868c <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   985b8:	687b      	ldr	r3, [r7, #4]
   985ba:	f003 031f 	and.w	r3, r3, #31
   985be:	2201      	movs	r2, #1
   985c0:	fa02 f303 	lsl.w	r3, r2, r3
   985c4:	461a      	mov	r2, r3
   985c6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   985ca:	68f8      	ldr	r0, [r7, #12]
   985cc:	4b33      	ldr	r3, [pc, #204]	; (9869c <pio_configure_pin+0x12c>)
   985ce:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   985d0:	687b      	ldr	r3, [r7, #4]
   985d2:	f003 031f 	and.w	r3, r3, #31
   985d6:	2201      	movs	r2, #1
   985d8:	fa02 f303 	lsl.w	r3, r2, r3
   985dc:	4619      	mov	r1, r3
   985de:	683b      	ldr	r3, [r7, #0]
   985e0:	f003 0301 	and.w	r3, r3, #1
   985e4:	461a      	mov	r2, r3
   985e6:	68f8      	ldr	r0, [r7, #12]
   985e8:	4b2d      	ldr	r3, [pc, #180]	; (986a0 <pio_configure_pin+0x130>)
   985ea:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   985ec:	e050      	b.n	98690 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   985ee:	687b      	ldr	r3, [r7, #4]
   985f0:	f003 031f 	and.w	r3, r3, #31
   985f4:	2201      	movs	r2, #1
   985f6:	fa02 f303 	lsl.w	r3, r2, r3
   985fa:	461a      	mov	r2, r3
   985fc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   98600:	68f8      	ldr	r0, [r7, #12]
   98602:	4b26      	ldr	r3, [pc, #152]	; (9869c <pio_configure_pin+0x12c>)
   98604:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   98606:	687b      	ldr	r3, [r7, #4]
   98608:	f003 031f 	and.w	r3, r3, #31
   9860c:	2201      	movs	r2, #1
   9860e:	fa02 f303 	lsl.w	r3, r2, r3
   98612:	4619      	mov	r1, r3
   98614:	683b      	ldr	r3, [r7, #0]
   98616:	f003 0301 	and.w	r3, r3, #1
   9861a:	461a      	mov	r2, r3
   9861c:	68f8      	ldr	r0, [r7, #12]
   9861e:	4b20      	ldr	r3, [pc, #128]	; (986a0 <pio_configure_pin+0x130>)
   98620:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   98622:	e035      	b.n	98690 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   98624:	687b      	ldr	r3, [r7, #4]
   98626:	f003 031f 	and.w	r3, r3, #31
   9862a:	2201      	movs	r2, #1
   9862c:	fa02 f303 	lsl.w	r3, r2, r3
   98630:	683a      	ldr	r2, [r7, #0]
   98632:	4619      	mov	r1, r3
   98634:	68f8      	ldr	r0, [r7, #12]
   98636:	4b1b      	ldr	r3, [pc, #108]	; (986a4 <pio_configure_pin+0x134>)
   98638:	4798      	blx	r3
		break;
   9863a:	e029      	b.n	98690 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9863c:	687b      	ldr	r3, [r7, #4]
   9863e:	f003 031f 	and.w	r3, r3, #31
   98642:	2201      	movs	r2, #1
   98644:	fa02 f303 	lsl.w	r3, r2, r3
   98648:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   9864a:	683b      	ldr	r3, [r7, #0]
   9864c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   98650:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   98654:	bf0c      	ite	eq
   98656:	2301      	moveq	r3, #1
   98658:	2300      	movne	r3, #0
   9865a:	b2db      	uxtb	r3, r3
   9865c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   9865e:	683b      	ldr	r3, [r7, #0]
   98660:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   98664:	2b00      	cmp	r3, #0
   98666:	bf14      	ite	ne
   98668:	2301      	movne	r3, #1
   9866a:	2300      	moveq	r3, #0
   9866c:	b2db      	uxtb	r3, r3
   9866e:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   98670:	683b      	ldr	r3, [r7, #0]
   98672:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   98676:	2b00      	cmp	r3, #0
   98678:	bf14      	ite	ne
   9867a:	2301      	movne	r3, #1
   9867c:	2300      	moveq	r3, #0
   9867e:	b2db      	uxtb	r3, r3
   98680:	9300      	str	r3, [sp, #0]
   98682:	4603      	mov	r3, r0
   98684:	68f8      	ldr	r0, [r7, #12]
   98686:	4c08      	ldr	r4, [pc, #32]	; (986a8 <pio_configure_pin+0x138>)
   98688:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   9868a:	e001      	b.n	98690 <pio_configure_pin+0x120>

	default:
		return 0;
   9868c:	2300      	movs	r3, #0
   9868e:	e000      	b.n	98692 <pio_configure_pin+0x122>
	}

	return 1;
   98690:	2301      	movs	r3, #1
}
   98692:	4618      	mov	r0, r3
   98694:	3714      	adds	r7, #20
   98696:	46bd      	mov	sp, r7
   98698:	bd90      	pop	{r4, r7, pc}
   9869a:	bf00      	nop
   9869c:	000983c1 	.word	0x000983c1
   986a0:	00098395 	.word	0x00098395
   986a4:	00098441 	.word	0x00098441
   986a8:	000984c1 	.word	0x000984c1

000986ac <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   986ac:	b590      	push	{r4, r7, lr}
   986ae:	b087      	sub	sp, #28
   986b0:	af02      	add	r7, sp, #8
   986b2:	60f8      	str	r0, [r7, #12]
   986b4:	60b9      	str	r1, [r7, #8]
   986b6:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   986b8:	687b      	ldr	r3, [r7, #4]
   986ba:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   986be:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   986c2:	d026      	beq.n	98712 <pio_configure_pin_group+0x66>
   986c4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   986c8:	d806      	bhi.n	986d8 <pio_configure_pin_group+0x2c>
   986ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   986ce:	d00a      	beq.n	986e6 <pio_configure_pin_group+0x3a>
   986d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   986d4:	d00e      	beq.n	986f4 <pio_configure_pin_group+0x48>
   986d6:	e044      	b.n	98762 <pio_configure_pin_group+0xb6>
   986d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   986dc:	d01f      	beq.n	9871e <pio_configure_pin_group+0x72>
   986de:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   986e2:	d01c      	beq.n	9871e <pio_configure_pin_group+0x72>
   986e4:	e03d      	b.n	98762 <pio_configure_pin_group+0xb6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   986e6:	68ba      	ldr	r2, [r7, #8]
   986e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   986ec:	68f8      	ldr	r0, [r7, #12]
   986ee:	4b20      	ldr	r3, [pc, #128]	; (98770 <pio_configure_pin_group+0xc4>)
   986f0:	4798      	blx	r3
		//pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   986f2:	e038      	b.n	98766 <pio_configure_pin_group+0xba>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   986f4:	68ba      	ldr	r2, [r7, #8]
   986f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   986fa:	68f8      	ldr	r0, [r7, #12]
   986fc:	4b1c      	ldr	r3, [pc, #112]	; (98770 <pio_configure_pin_group+0xc4>)
   986fe:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   98700:	687b      	ldr	r3, [r7, #4]
   98702:	f003 0301 	and.w	r3, r3, #1
   98706:	461a      	mov	r2, r3
   98708:	68b9      	ldr	r1, [r7, #8]
   9870a:	68f8      	ldr	r0, [r7, #12]
   9870c:	4b19      	ldr	r3, [pc, #100]	; (98774 <pio_configure_pin_group+0xc8>)
   9870e:	4798      	blx	r3
		break;
   98710:	e029      	b.n	98766 <pio_configure_pin_group+0xba>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   98712:	687a      	ldr	r2, [r7, #4]
   98714:	68b9      	ldr	r1, [r7, #8]
   98716:	68f8      	ldr	r0, [r7, #12]
   98718:	4b17      	ldr	r3, [pc, #92]	; (98778 <pio_configure_pin_group+0xcc>)
   9871a:	4798      	blx	r3
		break;
   9871c:	e023      	b.n	98766 <pio_configure_pin_group+0xba>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   9871e:	687b      	ldr	r3, [r7, #4]
   98720:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   98724:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   98728:	bf0c      	ite	eq
   9872a:	2301      	moveq	r3, #1
   9872c:	2300      	movne	r3, #0
   9872e:	b2db      	uxtb	r3, r3
   98730:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   98732:	687b      	ldr	r3, [r7, #4]
   98734:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   98738:	2b00      	cmp	r3, #0
   9873a:	bf14      	ite	ne
   9873c:	2301      	movne	r3, #1
   9873e:	2300      	moveq	r3, #0
   98740:	b2db      	uxtb	r3, r3
   98742:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   98744:	687b      	ldr	r3, [r7, #4]
   98746:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   9874a:	2b00      	cmp	r3, #0
   9874c:	bf14      	ite	ne
   9874e:	2301      	movne	r3, #1
   98750:	2300      	moveq	r3, #0
   98752:	b2db      	uxtb	r3, r3
   98754:	9300      	str	r3, [sp, #0]
   98756:	460b      	mov	r3, r1
   98758:	68b9      	ldr	r1, [r7, #8]
   9875a:	68f8      	ldr	r0, [r7, #12]
   9875c:	4c07      	ldr	r4, [pc, #28]	; (9877c <pio_configure_pin_group+0xd0>)
   9875e:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   98760:	e001      	b.n	98766 <pio_configure_pin_group+0xba>

	default:
		return 0;
   98762:	2300      	movs	r3, #0
   98764:	e000      	b.n	98768 <pio_configure_pin_group+0xbc>
	}

	return 1;
   98766:	2301      	movs	r3, #1
}
   98768:	4618      	mov	r0, r3
   9876a:	3714      	adds	r7, #20
   9876c:	46bd      	mov	sp, r7
   9876e:	bd90      	pop	{r4, r7, pc}
   98770:	000983c1 	.word	0x000983c1
   98774:	00098395 	.word	0x00098395
   98778:	00098441 	.word	0x00098441
   9877c:	000984c1 	.word	0x000984c1

00098780 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   98780:	b580      	push	{r7, lr}
   98782:	b084      	sub	sp, #16
   98784:	af00      	add	r7, sp, #0
   98786:	6078      	str	r0, [r7, #4]
   98788:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   9878a:	6878      	ldr	r0, [r7, #4]
   9878c:	4b24      	ldr	r3, [pc, #144]	; (98820 <pio_handler_process+0xa0>)
   9878e:	4798      	blx	r3
   98790:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   98792:	6878      	ldr	r0, [r7, #4]
   98794:	4b23      	ldr	r3, [pc, #140]	; (98824 <pio_handler_process+0xa4>)
   98796:	4798      	blx	r3
   98798:	4602      	mov	r2, r0
   9879a:	68fb      	ldr	r3, [r7, #12]
   9879c:	4013      	ands	r3, r2
   9879e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   987a0:	68fb      	ldr	r3, [r7, #12]
   987a2:	2b00      	cmp	r3, #0
   987a4:	d037      	beq.n	98816 <pio_handler_process+0x96>
		/* Find triggering source */
		i = 0;
   987a6:	2300      	movs	r3, #0
   987a8:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   987aa:	e031      	b.n	98810 <pio_handler_process+0x90>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   987ac:	4a1e      	ldr	r2, [pc, #120]	; (98828 <pio_handler_process+0xa8>)
   987ae:	68bb      	ldr	r3, [r7, #8]
   987b0:	011b      	lsls	r3, r3, #4
   987b2:	4413      	add	r3, r2
   987b4:	681a      	ldr	r2, [r3, #0]
   987b6:	683b      	ldr	r3, [r7, #0]
   987b8:	429a      	cmp	r2, r3
   987ba:	d126      	bne.n	9880a <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   987bc:	4a1a      	ldr	r2, [pc, #104]	; (98828 <pio_handler_process+0xa8>)
   987be:	68bb      	ldr	r3, [r7, #8]
   987c0:	011b      	lsls	r3, r3, #4
   987c2:	4413      	add	r3, r2
   987c4:	3304      	adds	r3, #4
   987c6:	681a      	ldr	r2, [r3, #0]
   987c8:	68fb      	ldr	r3, [r7, #12]
   987ca:	4013      	ands	r3, r2
   987cc:	2b00      	cmp	r3, #0
   987ce:	d01c      	beq.n	9880a <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   987d0:	4a15      	ldr	r2, [pc, #84]	; (98828 <pio_handler_process+0xa8>)
   987d2:	68bb      	ldr	r3, [r7, #8]
   987d4:	011b      	lsls	r3, r3, #4
   987d6:	4413      	add	r3, r2
   987d8:	330c      	adds	r3, #12
   987da:	681b      	ldr	r3, [r3, #0]
   987dc:	4912      	ldr	r1, [pc, #72]	; (98828 <pio_handler_process+0xa8>)
   987de:	68ba      	ldr	r2, [r7, #8]
   987e0:	0112      	lsls	r2, r2, #4
   987e2:	440a      	add	r2, r1
   987e4:	6810      	ldr	r0, [r2, #0]
   987e6:	4910      	ldr	r1, [pc, #64]	; (98828 <pio_handler_process+0xa8>)
   987e8:	68ba      	ldr	r2, [r7, #8]
   987ea:	0112      	lsls	r2, r2, #4
   987ec:	440a      	add	r2, r1
   987ee:	3204      	adds	r2, #4
   987f0:	6812      	ldr	r2, [r2, #0]
   987f2:	4611      	mov	r1, r2
   987f4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   987f6:	4a0c      	ldr	r2, [pc, #48]	; (98828 <pio_handler_process+0xa8>)
   987f8:	68bb      	ldr	r3, [r7, #8]
   987fa:	011b      	lsls	r3, r3, #4
   987fc:	4413      	add	r3, r2
   987fe:	3304      	adds	r3, #4
   98800:	681b      	ldr	r3, [r3, #0]
   98802:	43db      	mvns	r3, r3
   98804:	68fa      	ldr	r2, [r7, #12]
   98806:	4013      	ands	r3, r2
   98808:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   9880a:	68bb      	ldr	r3, [r7, #8]
   9880c:	3301      	adds	r3, #1
   9880e:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   98810:	68fb      	ldr	r3, [r7, #12]
   98812:	2b00      	cmp	r3, #0
   98814:	d1ca      	bne.n	987ac <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   98816:	bf00      	nop
   98818:	3710      	adds	r7, #16
   9881a:	46bd      	mov	sp, r7
   9881c:	bd80      	pop	{r7, pc}
   9881e:	bf00      	nop
   98820:	00098541 	.word	0x00098541
   98824:	00098559 	.word	0x00098559
   98828:	20072734 	.word	0x20072734

0009882c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   9882c:	b580      	push	{r7, lr}
   9882e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   98830:	210b      	movs	r1, #11
   98832:	4802      	ldr	r0, [pc, #8]	; (9883c <PIOA_Handler+0x10>)
   98834:	4b02      	ldr	r3, [pc, #8]	; (98840 <PIOA_Handler+0x14>)
   98836:	4798      	blx	r3
}
   98838:	bf00      	nop
   9883a:	bd80      	pop	{r7, pc}
   9883c:	400e0e00 	.word	0x400e0e00
   98840:	00098781 	.word	0x00098781

00098844 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   98844:	b580      	push	{r7, lr}
   98846:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   98848:	210c      	movs	r1, #12
   9884a:	4802      	ldr	r0, [pc, #8]	; (98854 <PIOB_Handler+0x10>)
   9884c:	4b02      	ldr	r3, [pc, #8]	; (98858 <PIOB_Handler+0x14>)
   9884e:	4798      	blx	r3
}
   98850:	bf00      	nop
   98852:	bd80      	pop	{r7, pc}
   98854:	400e1000 	.word	0x400e1000
   98858:	00098781 	.word	0x00098781

0009885c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   9885c:	b580      	push	{r7, lr}
   9885e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   98860:	210d      	movs	r1, #13
   98862:	4802      	ldr	r0, [pc, #8]	; (9886c <PIOC_Handler+0x10>)
   98864:	4b02      	ldr	r3, [pc, #8]	; (98870 <PIOC_Handler+0x14>)
   98866:	4798      	blx	r3
}
   98868:	bf00      	nop
   9886a:	bd80      	pop	{r7, pc}
   9886c:	400e1200 	.word	0x400e1200
   98870:	00098781 	.word	0x00098781

00098874 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   98874:	b580      	push	{r7, lr}
   98876:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   98878:	210e      	movs	r1, #14
   9887a:	4802      	ldr	r0, [pc, #8]	; (98884 <PIOD_Handler+0x10>)
   9887c:	4b02      	ldr	r3, [pc, #8]	; (98888 <PIOD_Handler+0x14>)
   9887e:	4798      	blx	r3
}
   98880:	bf00      	nop
   98882:	bd80      	pop	{r7, pc}
   98884:	400e1400 	.word	0x400e1400
   98888:	00098781 	.word	0x00098781

0009888c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   9888c:	b480      	push	{r7}
   9888e:	b085      	sub	sp, #20
   98890:	af00      	add	r7, sp, #0
   98892:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   98894:	491c      	ldr	r1, [pc, #112]	; (98908 <pmc_switch_mck_to_pllack+0x7c>)
   98896:	4b1c      	ldr	r3, [pc, #112]	; (98908 <pmc_switch_mck_to_pllack+0x7c>)
   98898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9889a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   9889e:	687b      	ldr	r3, [r7, #4]
   988a0:	4313      	orrs	r3, r2
   988a2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   988a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   988a8:	60fb      	str	r3, [r7, #12]
   988aa:	e007      	b.n	988bc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   988ac:	68fb      	ldr	r3, [r7, #12]
   988ae:	2b00      	cmp	r3, #0
   988b0:	d101      	bne.n	988b6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   988b2:	2301      	movs	r3, #1
   988b4:	e023      	b.n	988fe <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   988b6:	68fb      	ldr	r3, [r7, #12]
   988b8:	3b01      	subs	r3, #1
   988ba:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   988bc:	4b12      	ldr	r3, [pc, #72]	; (98908 <pmc_switch_mck_to_pllack+0x7c>)
   988be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   988c0:	f003 0308 	and.w	r3, r3, #8
   988c4:	2b00      	cmp	r3, #0
   988c6:	d0f1      	beq.n	988ac <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   988c8:	4a0f      	ldr	r2, [pc, #60]	; (98908 <pmc_switch_mck_to_pllack+0x7c>)
   988ca:	4b0f      	ldr	r3, [pc, #60]	; (98908 <pmc_switch_mck_to_pllack+0x7c>)
   988cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   988ce:	f023 0303 	bic.w	r3, r3, #3
   988d2:	f043 0302 	orr.w	r3, r3, #2
   988d6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   988d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   988dc:	60fb      	str	r3, [r7, #12]
   988de:	e007      	b.n	988f0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   988e0:	68fb      	ldr	r3, [r7, #12]
   988e2:	2b00      	cmp	r3, #0
   988e4:	d101      	bne.n	988ea <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   988e6:	2301      	movs	r3, #1
   988e8:	e009      	b.n	988fe <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   988ea:	68fb      	ldr	r3, [r7, #12]
   988ec:	3b01      	subs	r3, #1
   988ee:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   988f0:	4b05      	ldr	r3, [pc, #20]	; (98908 <pmc_switch_mck_to_pllack+0x7c>)
   988f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   988f4:	f003 0308 	and.w	r3, r3, #8
   988f8:	2b00      	cmp	r3, #0
   988fa:	d0f1      	beq.n	988e0 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   988fc:	2300      	movs	r3, #0
}
   988fe:	4618      	mov	r0, r3
   98900:	3714      	adds	r7, #20
   98902:	46bd      	mov	sp, r7
   98904:	bc80      	pop	{r7}
   98906:	4770      	bx	lr
   98908:	400e0600 	.word	0x400e0600

0009890c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   9890c:	b480      	push	{r7}
   9890e:	b083      	sub	sp, #12
   98910:	af00      	add	r7, sp, #0
   98912:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   98914:	687b      	ldr	r3, [r7, #4]
   98916:	2b01      	cmp	r3, #1
   98918:	d107      	bne.n	9892a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   9891a:	4a08      	ldr	r2, [pc, #32]	; (9893c <pmc_switch_sclk_to_32kxtal+0x30>)
   9891c:	4b07      	ldr	r3, [pc, #28]	; (9893c <pmc_switch_sclk_to_32kxtal+0x30>)
   9891e:	689b      	ldr	r3, [r3, #8]
   98920:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   98924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   98928:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   9892a:	4b04      	ldr	r3, [pc, #16]	; (9893c <pmc_switch_sclk_to_32kxtal+0x30>)
   9892c:	4a04      	ldr	r2, [pc, #16]	; (98940 <pmc_switch_sclk_to_32kxtal+0x34>)
   9892e:	601a      	str	r2, [r3, #0]
}
   98930:	bf00      	nop
   98932:	370c      	adds	r7, #12
   98934:	46bd      	mov	sp, r7
   98936:	bc80      	pop	{r7}
   98938:	4770      	bx	lr
   9893a:	bf00      	nop
   9893c:	400e1a10 	.word	0x400e1a10
   98940:	a5000008 	.word	0xa5000008

00098944 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   98944:	b480      	push	{r7}
   98946:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   98948:	4b09      	ldr	r3, [pc, #36]	; (98970 <pmc_osc_is_ready_32kxtal+0x2c>)
   9894a:	695b      	ldr	r3, [r3, #20]
   9894c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   98950:	2b00      	cmp	r3, #0
   98952:	d007      	beq.n	98964 <pmc_osc_is_ready_32kxtal+0x20>
   98954:	4b07      	ldr	r3, [pc, #28]	; (98974 <pmc_osc_is_ready_32kxtal+0x30>)
   98956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   98958:	f003 0380 	and.w	r3, r3, #128	; 0x80
   9895c:	2b00      	cmp	r3, #0
   9895e:	d001      	beq.n	98964 <pmc_osc_is_ready_32kxtal+0x20>
   98960:	2301      	movs	r3, #1
   98962:	e000      	b.n	98966 <pmc_osc_is_ready_32kxtal+0x22>
   98964:	2300      	movs	r3, #0
}
   98966:	4618      	mov	r0, r3
   98968:	46bd      	mov	sp, r7
   9896a:	bc80      	pop	{r7}
   9896c:	4770      	bx	lr
   9896e:	bf00      	nop
   98970:	400e1a10 	.word	0x400e1a10
   98974:	400e0600 	.word	0x400e0600

00098978 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   98978:	b480      	push	{r7}
   9897a:	b085      	sub	sp, #20
   9897c:	af00      	add	r7, sp, #0
   9897e:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   98980:	2300      	movs	r3, #0
   98982:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   98984:	4b21      	ldr	r3, [pc, #132]	; (98a0c <pmc_switch_mainck_to_fastrc+0x94>)
   98986:	6a1b      	ldr	r3, [r3, #32]
   98988:	f003 0301 	and.w	r3, r3, #1
   9898c:	2b00      	cmp	r3, #0
   9898e:	d00e      	beq.n	989ae <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   98990:	491e      	ldr	r1, [pc, #120]	; (98a0c <pmc_switch_mainck_to_fastrc+0x94>)
   98992:	4b1e      	ldr	r3, [pc, #120]	; (98a0c <pmc_switch_mainck_to_fastrc+0x94>)
   98994:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   98996:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   9899a:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   9899e:	687a      	ldr	r2, [r7, #4]
   989a0:	4313      	orrs	r3, r2
   989a2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   989a6:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   989aa:	620b      	str	r3, [r1, #32]
   989ac:	e00b      	b.n	989c6 <pmc_switch_mainck_to_fastrc+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   989ae:	2301      	movs	r3, #1
   989b0:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   989b2:	4916      	ldr	r1, [pc, #88]	; (98a0c <pmc_switch_mainck_to_fastrc+0x94>)
   989b4:	4b15      	ldr	r3, [pc, #84]	; (98a0c <pmc_switch_mainck_to_fastrc+0x94>)
   989b6:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
   989b8:	4b15      	ldr	r3, [pc, #84]	; (98a10 <pmc_switch_mainck_to_fastrc+0x98>)
   989ba:	4013      	ands	r3, r2
   989bc:	687a      	ldr	r2, [r7, #4]
   989be:	431a      	orrs	r2, r3
   989c0:	4b14      	ldr	r3, [pc, #80]	; (98a14 <pmc_switch_mainck_to_fastrc+0x9c>)
   989c2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   989c4:	620b      	str	r3, [r1, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   989c6:	bf00      	nop
   989c8:	4b10      	ldr	r3, [pc, #64]	; (98a0c <pmc_switch_mainck_to_fastrc+0x94>)
   989ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   989cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   989d0:	2b00      	cmp	r3, #0
   989d2:	d0f9      	beq.n	989c8 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   989d4:	4a0d      	ldr	r2, [pc, #52]	; (98a0c <pmc_switch_mainck_to_fastrc+0x94>)
   989d6:	4b0d      	ldr	r3, [pc, #52]	; (98a0c <pmc_switch_mainck_to_fastrc+0x94>)
   989d8:	6a1b      	ldr	r3, [r3, #32]
   989da:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   989de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   989e2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   989e6:	6213      	str	r3, [r2, #32]
			PMC_CKGR_MOR_KEY_VALUE;

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   989e8:	68fb      	ldr	r3, [r7, #12]
   989ea:	2b00      	cmp	r3, #0
   989ec:	d009      	beq.n	98a02 <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   989ee:	4a07      	ldr	r2, [pc, #28]	; (98a0c <pmc_switch_mainck_to_fastrc+0x94>)
   989f0:	4b06      	ldr	r3, [pc, #24]	; (98a0c <pmc_switch_mainck_to_fastrc+0x94>)
   989f2:	6a1b      	ldr	r3, [r3, #32]
   989f4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   989f8:	f023 0301 	bic.w	r3, r3, #1
   989fc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   98a00:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   98a02:	bf00      	nop
   98a04:	3714      	adds	r7, #20
   98a06:	46bd      	mov	sp, r7
   98a08:	bc80      	pop	{r7}
   98a0a:	4770      	bx	lr
   98a0c:	400e0600 	.word	0x400e0600
   98a10:	ffc80086 	.word	0xffc80086
   98a14:	0037ff09 	.word	0x0037ff09

00098a18 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   98a18:	b480      	push	{r7}
   98a1a:	b083      	sub	sp, #12
   98a1c:	af00      	add	r7, sp, #0
   98a1e:	6078      	str	r0, [r7, #4]
   98a20:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   98a22:	687b      	ldr	r3, [r7, #4]
   98a24:	2b00      	cmp	r3, #0
   98a26:	d008      	beq.n	98a3a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   98a28:	4916      	ldr	r1, [pc, #88]	; (98a84 <pmc_switch_mainck_to_xtal+0x6c>)
   98a2a:	4b16      	ldr	r3, [pc, #88]	; (98a84 <pmc_switch_mainck_to_xtal+0x6c>)
   98a2c:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   98a2e:	4a16      	ldr	r2, [pc, #88]	; (98a88 <pmc_switch_mainck_to_xtal+0x70>)
   98a30:	401a      	ands	r2, r3
   98a32:	4b16      	ldr	r3, [pc, #88]	; (98a8c <pmc_switch_mainck_to_xtal+0x74>)
   98a34:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   98a36:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
	}
}
   98a38:	e01e      	b.n	98a78 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   98a3a:	4912      	ldr	r1, [pc, #72]	; (98a84 <pmc_switch_mainck_to_xtal+0x6c>)
   98a3c:	4b11      	ldr	r3, [pc, #68]	; (98a84 <pmc_switch_mainck_to_xtal+0x6c>)
   98a3e:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   98a40:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   98a44:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   98a48:	683a      	ldr	r2, [r7, #0]
   98a4a:	0212      	lsls	r2, r2, #8
   98a4c:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   98a4e:	4313      	orrs	r3, r2
   98a50:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   98a54:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   98a58:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   98a5a:	bf00      	nop
   98a5c:	4b09      	ldr	r3, [pc, #36]	; (98a84 <pmc_switch_mainck_to_xtal+0x6c>)
   98a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   98a60:	f003 0301 	and.w	r3, r3, #1
   98a64:	2b00      	cmp	r3, #0
   98a66:	d0f9      	beq.n	98a5c <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   98a68:	4a06      	ldr	r2, [pc, #24]	; (98a84 <pmc_switch_mainck_to_xtal+0x6c>)
   98a6a:	4b06      	ldr	r3, [pc, #24]	; (98a84 <pmc_switch_mainck_to_xtal+0x6c>)
   98a6c:	6a1b      	ldr	r3, [r3, #32]
   98a6e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   98a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   98a76:	6213      	str	r3, [r2, #32]
	}
}
   98a78:	bf00      	nop
   98a7a:	370c      	adds	r7, #12
   98a7c:	46bd      	mov	sp, r7
   98a7e:	bc80      	pop	{r7}
   98a80:	4770      	bx	lr
   98a82:	bf00      	nop
   98a84:	400e0600 	.word	0x400e0600
   98a88:	fec8fffc 	.word	0xfec8fffc
   98a8c:	01370002 	.word	0x01370002

00098a90 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   98a90:	b480      	push	{r7}
   98a92:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   98a94:	4b03      	ldr	r3, [pc, #12]	; (98aa4 <pmc_osc_is_ready_mainck+0x14>)
   98a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   98a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   98a9c:	4618      	mov	r0, r3
   98a9e:	46bd      	mov	sp, r7
   98aa0:	bc80      	pop	{r7}
   98aa2:	4770      	bx	lr
   98aa4:	400e0600 	.word	0x400e0600

00098aa8 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   98aa8:	b480      	push	{r7}
   98aaa:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   98aac:	4b03      	ldr	r3, [pc, #12]	; (98abc <pmc_disable_pllack+0x14>)
   98aae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   98ab2:	629a      	str	r2, [r3, #40]	; 0x28
}
   98ab4:	bf00      	nop
   98ab6:	46bd      	mov	sp, r7
   98ab8:	bc80      	pop	{r7}
   98aba:	4770      	bx	lr
   98abc:	400e0600 	.word	0x400e0600

00098ac0 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   98ac0:	b480      	push	{r7}
   98ac2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   98ac4:	4b03      	ldr	r3, [pc, #12]	; (98ad4 <pmc_is_locked_pllack+0x14>)
   98ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   98ac8:	f003 0302 	and.w	r3, r3, #2
}
   98acc:	4618      	mov	r0, r3
   98ace:	46bd      	mov	sp, r7
   98ad0:	bc80      	pop	{r7}
   98ad2:	4770      	bx	lr
   98ad4:	400e0600 	.word	0x400e0600

00098ad8 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   98ad8:	b480      	push	{r7}
   98ada:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   98adc:	4b03      	ldr	r3, [pc, #12]	; (98aec <pmc_is_locked_upll+0x14>)
   98ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   98ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   98ae4:	4618      	mov	r0, r3
   98ae6:	46bd      	mov	sp, r7
   98ae8:	bc80      	pop	{r7}
   98aea:	4770      	bx	lr
   98aec:	400e0600 	.word	0x400e0600

00098af0 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   98af0:	b480      	push	{r7}
   98af2:	b083      	sub	sp, #12
   98af4:	af00      	add	r7, sp, #0
   98af6:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   98af8:	687b      	ldr	r3, [r7, #4]
   98afa:	2b2c      	cmp	r3, #44	; 0x2c
   98afc:	d901      	bls.n	98b02 <pmc_enable_periph_clk+0x12>
		return 1;
   98afe:	2301      	movs	r3, #1
   98b00:	e02f      	b.n	98b62 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   98b02:	687b      	ldr	r3, [r7, #4]
   98b04:	2b1f      	cmp	r3, #31
   98b06:	d813      	bhi.n	98b30 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   98b08:	4b18      	ldr	r3, [pc, #96]	; (98b6c <pmc_enable_periph_clk+0x7c>)
   98b0a:	699a      	ldr	r2, [r3, #24]
   98b0c:	2101      	movs	r1, #1
   98b0e:	687b      	ldr	r3, [r7, #4]
   98b10:	fa01 f303 	lsl.w	r3, r1, r3
   98b14:	401a      	ands	r2, r3
   98b16:	2101      	movs	r1, #1
   98b18:	687b      	ldr	r3, [r7, #4]
   98b1a:	fa01 f303 	lsl.w	r3, r1, r3
   98b1e:	429a      	cmp	r2, r3
   98b20:	d01e      	beq.n	98b60 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   98b22:	4a12      	ldr	r2, [pc, #72]	; (98b6c <pmc_enable_periph_clk+0x7c>)
   98b24:	2101      	movs	r1, #1
   98b26:	687b      	ldr	r3, [r7, #4]
   98b28:	fa01 f303 	lsl.w	r3, r1, r3
   98b2c:	6113      	str	r3, [r2, #16]
   98b2e:	e017      	b.n	98b60 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   98b30:	687b      	ldr	r3, [r7, #4]
   98b32:	3b20      	subs	r3, #32
   98b34:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   98b36:	4b0d      	ldr	r3, [pc, #52]	; (98b6c <pmc_enable_periph_clk+0x7c>)
   98b38:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   98b3c:	2101      	movs	r1, #1
   98b3e:	687b      	ldr	r3, [r7, #4]
   98b40:	fa01 f303 	lsl.w	r3, r1, r3
   98b44:	401a      	ands	r2, r3
   98b46:	2101      	movs	r1, #1
   98b48:	687b      	ldr	r3, [r7, #4]
   98b4a:	fa01 f303 	lsl.w	r3, r1, r3
   98b4e:	429a      	cmp	r2, r3
   98b50:	d006      	beq.n	98b60 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   98b52:	4a06      	ldr	r2, [pc, #24]	; (98b6c <pmc_enable_periph_clk+0x7c>)
   98b54:	2101      	movs	r1, #1
   98b56:	687b      	ldr	r3, [r7, #4]
   98b58:	fa01 f303 	lsl.w	r3, r1, r3
   98b5c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   98b60:	2300      	movs	r3, #0
}
   98b62:	4618      	mov	r0, r3
   98b64:	370c      	adds	r7, #12
   98b66:	46bd      	mov	sp, r7
   98b68:	bc80      	pop	{r7}
   98b6a:	4770      	bx	lr
   98b6c:	400e0600 	.word	0x400e0600

00098b70 <pmc_set_writeprotect>:
 * \brief Enable or disable write protect of PMC registers.
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
   98b70:	b480      	push	{r7}
   98b72:	b083      	sub	sp, #12
   98b74:	af00      	add	r7, sp, #0
   98b76:	6078      	str	r0, [r7, #4]
	if (ul_enable) {
   98b78:	687b      	ldr	r3, [r7, #4]
   98b7a:	2b00      	cmp	r3, #0
   98b7c:	d004      	beq.n	98b88 <pmc_set_writeprotect+0x18>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
   98b7e:	4b07      	ldr	r3, [pc, #28]	; (98b9c <pmc_set_writeprotect+0x2c>)
   98b80:	4a07      	ldr	r2, [pc, #28]	; (98ba0 <pmc_set_writeprotect+0x30>)
   98b82:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
	}
}
   98b86:	e003      	b.n	98b90 <pmc_set_writeprotect+0x20>
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
   98b88:	4b04      	ldr	r3, [pc, #16]	; (98b9c <pmc_set_writeprotect+0x2c>)
   98b8a:	4a06      	ldr	r2, [pc, #24]	; (98ba4 <pmc_set_writeprotect+0x34>)
   98b8c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
   98b90:	bf00      	nop
   98b92:	370c      	adds	r7, #12
   98b94:	46bd      	mov	sp, r7
   98b96:	bc80      	pop	{r7}
   98b98:	4770      	bx	lr
   98b9a:	bf00      	nop
   98b9c:	400e0600 	.word	0x400e0600
   98ba0:	504d4301 	.word	0x504d4301
   98ba4:	504d4300 	.word	0x504d4300

00098ba8 <tc_start>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
   98ba8:	b480      	push	{r7}
   98baa:	b083      	sub	sp, #12
   98bac:	af00      	add	r7, sp, #0
   98bae:	6078      	str	r0, [r7, #4]
   98bb0:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   98bb2:	687a      	ldr	r2, [r7, #4]
   98bb4:	683b      	ldr	r3, [r7, #0]
   98bb6:	019b      	lsls	r3, r3, #6
   98bb8:	4413      	add	r3, r2
   98bba:	2205      	movs	r2, #5
   98bbc:	601a      	str	r2, [r3, #0]
}
   98bbe:	bf00      	nop
   98bc0:	370c      	adds	r7, #12
   98bc2:	46bd      	mov	sp, r7
   98bc4:	bc80      	pop	{r7}
   98bc6:	4770      	bx	lr

00098bc8 <tc_write_rc>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_rc(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
   98bc8:	b480      	push	{r7}
   98bca:	b085      	sub	sp, #20
   98bcc:	af00      	add	r7, sp, #0
   98bce:	60f8      	str	r0, [r7, #12]
   98bd0:	60b9      	str	r1, [r7, #8]
   98bd2:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   98bd4:	68fa      	ldr	r2, [r7, #12]
   98bd6:	68bb      	ldr	r3, [r7, #8]
   98bd8:	019b      	lsls	r3, r3, #6
   98bda:	4413      	add	r3, r2
   98bdc:	331c      	adds	r3, #28
   98bde:	687a      	ldr	r2, [r7, #4]
   98be0:	601a      	str	r2, [r3, #0]
}
   98be2:	bf00      	nop
   98be4:	3714      	adds	r7, #20
   98be6:	46bd      	mov	sp, r7
   98be8:	bc80      	pop	{r7}
   98bea:	4770      	bx	lr

00098bec <tc_enable_interrupt>:
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void tc_enable_interrupt(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_sources)
{
   98bec:	b480      	push	{r7}
   98bee:	b087      	sub	sp, #28
   98bf0:	af00      	add	r7, sp, #0
   98bf2:	60f8      	str	r0, [r7, #12]
   98bf4:	60b9      	str	r1, [r7, #8]
   98bf6:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   98bf8:	68fa      	ldr	r2, [r7, #12]
   98bfa:	68bb      	ldr	r3, [r7, #8]
   98bfc:	019b      	lsls	r3, r3, #6
   98bfe:	4413      	add	r3, r2
   98c00:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   98c02:	697b      	ldr	r3, [r7, #20]
   98c04:	687a      	ldr	r2, [r7, #4]
   98c06:	625a      	str	r2, [r3, #36]	; 0x24
}
   98c08:	bf00      	nop
   98c0a:	371c      	adds	r7, #28
   98c0c:	46bd      	mov	sp, r7
   98c0e:	bc80      	pop	{r7}
   98c10:	4770      	bx	lr
   98c12:	bf00      	nop

00098c14 <tc_get_status>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t tc_get_status(Tc *p_tc, uint32_t ul_channel)
{
   98c14:	b480      	push	{r7}
   98c16:	b085      	sub	sp, #20
   98c18:	af00      	add	r7, sp, #0
   98c1a:	6078      	str	r0, [r7, #4]
   98c1c:	6039      	str	r1, [r7, #0]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   98c1e:	687a      	ldr	r2, [r7, #4]
   98c20:	683b      	ldr	r3, [r7, #0]
   98c22:	019b      	lsls	r3, r3, #6
   98c24:	4413      	add	r3, r2
   98c26:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   98c28:	68fb      	ldr	r3, [r7, #12]
   98c2a:	6a1b      	ldr	r3, [r3, #32]
}
   98c2c:	4618      	mov	r0, r3
   98c2e:	3714      	adds	r7, #20
   98c30:	46bd      	mov	sp, r7
   98c32:	bc80      	pop	{r7}
   98c34:	4770      	bx	lr
   98c36:	bf00      	nop

00098c38 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   98c38:	b480      	push	{r7}
   98c3a:	b085      	sub	sp, #20
   98c3c:	af00      	add	r7, sp, #0
   98c3e:	6078      	str	r0, [r7, #4]
   98c40:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   98c42:	2300      	movs	r3, #0
   98c44:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   98c46:	687b      	ldr	r3, [r7, #4]
   98c48:	22ac      	movs	r2, #172	; 0xac
   98c4a:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   98c4c:	683b      	ldr	r3, [r7, #0]
   98c4e:	681a      	ldr	r2, [r3, #0]
   98c50:	683b      	ldr	r3, [r7, #0]
   98c52:	685b      	ldr	r3, [r3, #4]
   98c54:	fbb2 f3f3 	udiv	r3, r2, r3
   98c58:	091b      	lsrs	r3, r3, #4
   98c5a:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   98c5c:	68fb      	ldr	r3, [r7, #12]
   98c5e:	2b00      	cmp	r3, #0
   98c60:	d003      	beq.n	98c6a <uart_init+0x32>
   98c62:	68fb      	ldr	r3, [r7, #12]
   98c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   98c68:	d301      	bcc.n	98c6e <uart_init+0x36>
		return 1;
   98c6a:	2301      	movs	r3, #1
   98c6c:	e00f      	b.n	98c8e <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   98c6e:	687b      	ldr	r3, [r7, #4]
   98c70:	68fa      	ldr	r2, [r7, #12]
   98c72:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   98c74:	683b      	ldr	r3, [r7, #0]
   98c76:	689a      	ldr	r2, [r3, #8]
   98c78:	687b      	ldr	r3, [r7, #4]
   98c7a:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   98c7c:	687b      	ldr	r3, [r7, #4]
   98c7e:	f240 2202 	movw	r2, #514	; 0x202
   98c82:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   98c86:	687b      	ldr	r3, [r7, #4]
   98c88:	2250      	movs	r2, #80	; 0x50
   98c8a:	601a      	str	r2, [r3, #0]

	return 0;
   98c8c:	2300      	movs	r3, #0
}
   98c8e:	4618      	mov	r0, r3
   98c90:	3714      	adds	r7, #20
   98c92:	46bd      	mov	sp, r7
   98c94:	bc80      	pop	{r7}
   98c96:	4770      	bx	lr

00098c98 <uart_enable_tx>:
 * \brief Enable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
   98c98:	b480      	push	{r7}
   98c9a:	b083      	sub	sp, #12
   98c9c:	af00      	add	r7, sp, #0
   98c9e:	6078      	str	r0, [r7, #4]
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
   98ca0:	687b      	ldr	r3, [r7, #4]
   98ca2:	2240      	movs	r2, #64	; 0x40
   98ca4:	601a      	str	r2, [r3, #0]
}
   98ca6:	bf00      	nop
   98ca8:	370c      	adds	r7, #12
   98caa:	46bd      	mov	sp, r7
   98cac:	bc80      	pop	{r7}
   98cae:	4770      	bx	lr

00098cb0 <uart_enable_rx>:
 * \brief Enable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
   98cb0:	b480      	push	{r7}
   98cb2:	b083      	sub	sp, #12
   98cb4:	af00      	add	r7, sp, #0
   98cb6:	6078      	str	r0, [r7, #4]
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
   98cb8:	687b      	ldr	r3, [r7, #4]
   98cba:	2210      	movs	r2, #16
   98cbc:	601a      	str	r2, [r3, #0]
}
   98cbe:	bf00      	nop
   98cc0:	370c      	adds	r7, #12
   98cc2:	46bd      	mov	sp, r7
   98cc4:	bc80      	pop	{r7}
   98cc6:	4770      	bx	lr

00098cc8 <uart_enable>:
 * \brief Enable UART receiver and transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
   98cc8:	b480      	push	{r7}
   98cca:	b083      	sub	sp, #12
   98ccc:	af00      	add	r7, sp, #0
   98cce:	6078      	str	r0, [r7, #4]
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   98cd0:	687b      	ldr	r3, [r7, #4]
   98cd2:	2250      	movs	r2, #80	; 0x50
   98cd4:	601a      	str	r2, [r3, #0]
}
   98cd6:	bf00      	nop
   98cd8:	370c      	adds	r7, #12
   98cda:	46bd      	mov	sp, r7
   98cdc:	bc80      	pop	{r7}
   98cde:	4770      	bx	lr

00098ce0 <uart_enable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
   98ce0:	b480      	push	{r7}
   98ce2:	b083      	sub	sp, #12
   98ce4:	af00      	add	r7, sp, #0
   98ce6:	6078      	str	r0, [r7, #4]
   98ce8:	6039      	str	r1, [r7, #0]
	p_uart->UART_IER = ul_sources;
   98cea:	687b      	ldr	r3, [r7, #4]
   98cec:	683a      	ldr	r2, [r7, #0]
   98cee:	609a      	str	r2, [r3, #8]
}
   98cf0:	bf00      	nop
   98cf2:	370c      	adds	r7, #12
   98cf4:	46bd      	mov	sp, r7
   98cf6:	bc80      	pop	{r7}
   98cf8:	4770      	bx	lr
   98cfa:	bf00      	nop

00098cfc <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   98cfc:	b480      	push	{r7}
   98cfe:	b083      	sub	sp, #12
   98d00:	af00      	add	r7, sp, #0
   98d02:	6078      	str	r0, [r7, #4]
   98d04:	460b      	mov	r3, r1
   98d06:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   98d08:	687b      	ldr	r3, [r7, #4]
   98d0a:	695b      	ldr	r3, [r3, #20]
   98d0c:	f003 0302 	and.w	r3, r3, #2
   98d10:	2b00      	cmp	r3, #0
   98d12:	d101      	bne.n	98d18 <uart_write+0x1c>
		return 1;
   98d14:	2301      	movs	r3, #1
   98d16:	e00c      	b.n	98d32 <uart_write+0x36>
if(cl_console_sync != true)
   98d18:	4b08      	ldr	r3, [pc, #32]	; (98d3c <uart_write+0x40>)
   98d1a:	781b      	ldrb	r3, [r3, #0]
   98d1c:	f083 0301 	eor.w	r3, r3, #1
   98d20:	b2db      	uxtb	r3, r3
   98d22:	2b00      	cmp	r3, #0
   98d24:	d001      	beq.n	98d2a <uart_write+0x2e>
	return 1;
   98d26:	2301      	movs	r3, #1
   98d28:	e003      	b.n	98d32 <uart_write+0x36>
	/* Send character */
	
	p_uart->UART_THR = uc_data;
   98d2a:	78fa      	ldrb	r2, [r7, #3]
   98d2c:	687b      	ldr	r3, [r7, #4]
   98d2e:	61da      	str	r2, [r3, #28]
	return 0;
   98d30:	2300      	movs	r3, #0
}
   98d32:	4618      	mov	r0, r3
   98d34:	370c      	adds	r7, #12
   98d36:	46bd      	mov	sp, r7
   98d38:	bc80      	pop	{r7}
   98d3a:	4770      	bx	lr
   98d3c:	200727b1 	.word	0x200727b1

00098d40 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   98d40:	b480      	push	{r7}
   98d42:	b083      	sub	sp, #12
   98d44:	af00      	add	r7, sp, #0
   98d46:	6078      	str	r0, [r7, #4]
   98d48:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   98d4a:	687b      	ldr	r3, [r7, #4]
   98d4c:	695b      	ldr	r3, [r3, #20]
   98d4e:	f003 0301 	and.w	r3, r3, #1
   98d52:	2b00      	cmp	r3, #0
   98d54:	d101      	bne.n	98d5a <uart_read+0x1a>
		return 1;
   98d56:	2301      	movs	r3, #1
   98d58:	e005      	b.n	98d66 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   98d5a:	687b      	ldr	r3, [r7, #4]
   98d5c:	699b      	ldr	r3, [r3, #24]
   98d5e:	b2da      	uxtb	r2, r3
   98d60:	683b      	ldr	r3, [r7, #0]
   98d62:	701a      	strb	r2, [r3, #0]
	return 0;
   98d64:	2300      	movs	r3, #0
}
   98d66:	4618      	mov	r0, r3
   98d68:	370c      	adds	r7, #12
   98d6a:	46bd      	mov	sp, r7
   98d6c:	bc80      	pop	{r7}
   98d6e:	4770      	bx	lr

00098d70 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   98d70:	b480      	push	{r7}
   98d72:	b089      	sub	sp, #36	; 0x24
   98d74:	af00      	add	r7, sp, #0
   98d76:	60f8      	str	r0, [r7, #12]
   98d78:	60b9      	str	r1, [r7, #8]
   98d7a:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   98d7c:	68bb      	ldr	r3, [r7, #8]
   98d7e:	011a      	lsls	r2, r3, #4
   98d80:	687b      	ldr	r3, [r7, #4]
   98d82:	429a      	cmp	r2, r3
   98d84:	d802      	bhi.n	98d8c <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   98d86:	2310      	movs	r3, #16
   98d88:	61fb      	str	r3, [r7, #28]
   98d8a:	e001      	b.n	98d90 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   98d8c:	2308      	movs	r3, #8
   98d8e:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   98d90:	687b      	ldr	r3, [r7, #4]
   98d92:	00da      	lsls	r2, r3, #3
   98d94:	69fb      	ldr	r3, [r7, #28]
   98d96:	68b9      	ldr	r1, [r7, #8]
   98d98:	fb01 f303 	mul.w	r3, r1, r3
   98d9c:	085b      	lsrs	r3, r3, #1
   98d9e:	441a      	add	r2, r3
   98da0:	69fb      	ldr	r3, [r7, #28]
   98da2:	68b9      	ldr	r1, [r7, #8]
   98da4:	fb01 f303 	mul.w	r3, r1, r3
   98da8:	fbb2 f3f3 	udiv	r3, r2, r3
   98dac:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   98dae:	69bb      	ldr	r3, [r7, #24]
   98db0:	08db      	lsrs	r3, r3, #3
   98db2:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   98db4:	69bb      	ldr	r3, [r7, #24]
   98db6:	f003 0307 	and.w	r3, r3, #7
   98dba:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   98dbc:	697b      	ldr	r3, [r7, #20]
   98dbe:	2b00      	cmp	r3, #0
   98dc0:	d003      	beq.n	98dca <usart_set_async_baudrate+0x5a>
   98dc2:	697b      	ldr	r3, [r7, #20]
   98dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   98dc8:	d301      	bcc.n	98dce <usart_set_async_baudrate+0x5e>
		return 1;
   98dca:	2301      	movs	r3, #1
   98dcc:	e00f      	b.n	98dee <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   98dce:	69fb      	ldr	r3, [r7, #28]
   98dd0:	2b08      	cmp	r3, #8
   98dd2:	d105      	bne.n	98de0 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   98dd4:	68fb      	ldr	r3, [r7, #12]
   98dd6:	685b      	ldr	r3, [r3, #4]
   98dd8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   98ddc:	68fb      	ldr	r3, [r7, #12]
   98dde:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   98de0:	693b      	ldr	r3, [r7, #16]
   98de2:	041a      	lsls	r2, r3, #16
   98de4:	697b      	ldr	r3, [r7, #20]
   98de6:	431a      	orrs	r2, r3
   98de8:	68fb      	ldr	r3, [r7, #12]
   98dea:	621a      	str	r2, [r3, #32]

	return 0;
   98dec:	2300      	movs	r3, #0
}
   98dee:	4618      	mov	r0, r3
   98df0:	3724      	adds	r7, #36	; 0x24
   98df2:	46bd      	mov	sp, r7
   98df4:	bc80      	pop	{r7}
   98df6:	4770      	bx	lr

00098df8 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   98df8:	b580      	push	{r7, lr}
   98dfa:	b082      	sub	sp, #8
   98dfc:	af00      	add	r7, sp, #0
   98dfe:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   98e00:	6878      	ldr	r0, [r7, #4]
   98e02:	4b0d      	ldr	r3, [pc, #52]	; (98e38 <usart_reset+0x40>)
   98e04:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   98e06:	687b      	ldr	r3, [r7, #4]
   98e08:	2200      	movs	r2, #0
   98e0a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   98e0c:	687b      	ldr	r3, [r7, #4]
   98e0e:	2200      	movs	r2, #0
   98e10:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   98e12:	687b      	ldr	r3, [r7, #4]
   98e14:	2200      	movs	r2, #0
   98e16:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   98e18:	6878      	ldr	r0, [r7, #4]
   98e1a:	4b08      	ldr	r3, [pc, #32]	; (98e3c <usart_reset+0x44>)
   98e1c:	4798      	blx	r3
	usart_reset_rx(p_usart);
   98e1e:	6878      	ldr	r0, [r7, #4]
   98e20:	4b07      	ldr	r3, [pc, #28]	; (98e40 <usart_reset+0x48>)
   98e22:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   98e24:	6878      	ldr	r0, [r7, #4]
   98e26:	4b07      	ldr	r3, [pc, #28]	; (98e44 <usart_reset+0x4c>)
   98e28:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   98e2a:	6878      	ldr	r0, [r7, #4]
   98e2c:	4b06      	ldr	r3, [pc, #24]	; (98e48 <usart_reset+0x50>)
   98e2e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   98e30:	bf00      	nop
   98e32:	3708      	adds	r7, #8
   98e34:	46bd      	mov	sp, r7
   98e36:	bd80      	pop	{r7, pc}
   98e38:	00098fcd 	.word	0x00098fcd
   98e3c:	00098ee9 	.word	0x00098ee9
   98e40:	00098f19 	.word	0x00098f19
   98e44:	00098f31 	.word	0x00098f31
   98e48:	00098f4d 	.word	0x00098f4d

00098e4c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   98e4c:	b580      	push	{r7, lr}
   98e4e:	b084      	sub	sp, #16
   98e50:	af00      	add	r7, sp, #0
   98e52:	60f8      	str	r0, [r7, #12]
   98e54:	60b9      	str	r1, [r7, #8]
   98e56:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   98e58:	68f8      	ldr	r0, [r7, #12]
   98e5a:	4b1a      	ldr	r3, [pc, #104]	; (98ec4 <usart_init_rs232+0x78>)
   98e5c:	4798      	blx	r3

	ul_reg_val = 0;
   98e5e:	4b1a      	ldr	r3, [pc, #104]	; (98ec8 <usart_init_rs232+0x7c>)
   98e60:	2200      	movs	r2, #0
   98e62:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   98e64:	68bb      	ldr	r3, [r7, #8]
   98e66:	2b00      	cmp	r3, #0
   98e68:	d009      	beq.n	98e7e <usart_init_rs232+0x32>
   98e6a:	68bb      	ldr	r3, [r7, #8]
   98e6c:	681b      	ldr	r3, [r3, #0]
   98e6e:	687a      	ldr	r2, [r7, #4]
   98e70:	4619      	mov	r1, r3
   98e72:	68f8      	ldr	r0, [r7, #12]
   98e74:	4b15      	ldr	r3, [pc, #84]	; (98ecc <usart_init_rs232+0x80>)
   98e76:	4798      	blx	r3
   98e78:	4603      	mov	r3, r0
   98e7a:	2b00      	cmp	r3, #0
   98e7c:	d001      	beq.n	98e82 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   98e7e:	2301      	movs	r3, #1
   98e80:	e01b      	b.n	98eba <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   98e82:	68bb      	ldr	r3, [r7, #8]
   98e84:	685a      	ldr	r2, [r3, #4]
   98e86:	68bb      	ldr	r3, [r7, #8]
   98e88:	689b      	ldr	r3, [r3, #8]
   98e8a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   98e8c:	68bb      	ldr	r3, [r7, #8]
   98e8e:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   98e90:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   98e92:	68bb      	ldr	r3, [r7, #8]
   98e94:	68db      	ldr	r3, [r3, #12]
   98e96:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   98e98:	4b0b      	ldr	r3, [pc, #44]	; (98ec8 <usart_init_rs232+0x7c>)
   98e9a:	681b      	ldr	r3, [r3, #0]
   98e9c:	4313      	orrs	r3, r2
   98e9e:	4a0a      	ldr	r2, [pc, #40]	; (98ec8 <usart_init_rs232+0x7c>)
   98ea0:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   98ea2:	4b09      	ldr	r3, [pc, #36]	; (98ec8 <usart_init_rs232+0x7c>)
   98ea4:	681b      	ldr	r3, [r3, #0]
   98ea6:	4a08      	ldr	r2, [pc, #32]	; (98ec8 <usart_init_rs232+0x7c>)
   98ea8:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   98eaa:	68fb      	ldr	r3, [r7, #12]
   98eac:	685a      	ldr	r2, [r3, #4]
   98eae:	4b06      	ldr	r3, [pc, #24]	; (98ec8 <usart_init_rs232+0x7c>)
   98eb0:	681b      	ldr	r3, [r3, #0]
   98eb2:	431a      	orrs	r2, r3
   98eb4:	68fb      	ldr	r3, [r7, #12]
   98eb6:	605a      	str	r2, [r3, #4]

	return 0;
   98eb8:	2300      	movs	r3, #0
}
   98eba:	4618      	mov	r0, r3
   98ebc:	3710      	adds	r7, #16
   98ebe:	46bd      	mov	sp, r7
   98ec0:	bd80      	pop	{r7, pc}
   98ec2:	bf00      	nop
   98ec4:	00098df9 	.word	0x00098df9
   98ec8:	200727a4 	.word	0x200727a4
   98ecc:	00098d71 	.word	0x00098d71

00098ed0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   98ed0:	b480      	push	{r7}
   98ed2:	b083      	sub	sp, #12
   98ed4:	af00      	add	r7, sp, #0
   98ed6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   98ed8:	687b      	ldr	r3, [r7, #4]
   98eda:	2240      	movs	r2, #64	; 0x40
   98edc:	601a      	str	r2, [r3, #0]
}
   98ede:	bf00      	nop
   98ee0:	370c      	adds	r7, #12
   98ee2:	46bd      	mov	sp, r7
   98ee4:	bc80      	pop	{r7}
   98ee6:	4770      	bx	lr

00098ee8 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   98ee8:	b480      	push	{r7}
   98eea:	b083      	sub	sp, #12
   98eec:	af00      	add	r7, sp, #0
   98eee:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   98ef0:	687b      	ldr	r3, [r7, #4]
   98ef2:	2288      	movs	r2, #136	; 0x88
   98ef4:	601a      	str	r2, [r3, #0]
}
   98ef6:	bf00      	nop
   98ef8:	370c      	adds	r7, #12
   98efa:	46bd      	mov	sp, r7
   98efc:	bc80      	pop	{r7}
   98efe:	4770      	bx	lr

00098f00 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   98f00:	b480      	push	{r7}
   98f02:	b083      	sub	sp, #12
   98f04:	af00      	add	r7, sp, #0
   98f06:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   98f08:	687b      	ldr	r3, [r7, #4]
   98f0a:	2210      	movs	r2, #16
   98f0c:	601a      	str	r2, [r3, #0]
}
   98f0e:	bf00      	nop
   98f10:	370c      	adds	r7, #12
   98f12:	46bd      	mov	sp, r7
   98f14:	bc80      	pop	{r7}
   98f16:	4770      	bx	lr

00098f18 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   98f18:	b480      	push	{r7}
   98f1a:	b083      	sub	sp, #12
   98f1c:	af00      	add	r7, sp, #0
   98f1e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   98f20:	687b      	ldr	r3, [r7, #4]
   98f22:	2224      	movs	r2, #36	; 0x24
   98f24:	601a      	str	r2, [r3, #0]
}
   98f26:	bf00      	nop
   98f28:	370c      	adds	r7, #12
   98f2a:	46bd      	mov	sp, r7
   98f2c:	bc80      	pop	{r7}
   98f2e:	4770      	bx	lr

00098f30 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   98f30:	b480      	push	{r7}
   98f32:	b083      	sub	sp, #12
   98f34:	af00      	add	r7, sp, #0
   98f36:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   98f38:	687b      	ldr	r3, [r7, #4]
   98f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
   98f3e:	601a      	str	r2, [r3, #0]
}
   98f40:	bf00      	nop
   98f42:	370c      	adds	r7, #12
   98f44:	46bd      	mov	sp, r7
   98f46:	bc80      	pop	{r7}
   98f48:	4770      	bx	lr
   98f4a:	bf00      	nop

00098f4c <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   98f4c:	b480      	push	{r7}
   98f4e:	b083      	sub	sp, #12
   98f50:	af00      	add	r7, sp, #0
   98f52:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   98f54:	687b      	ldr	r3, [r7, #4]
   98f56:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   98f5a:	601a      	str	r2, [r3, #0]
}
   98f5c:	bf00      	nop
   98f5e:	370c      	adds	r7, #12
   98f60:	46bd      	mov	sp, r7
   98f62:	bc80      	pop	{r7}
   98f64:	4770      	bx	lr
   98f66:	bf00      	nop

00098f68 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   98f68:	b480      	push	{r7}
   98f6a:	b083      	sub	sp, #12
   98f6c:	af00      	add	r7, sp, #0
   98f6e:	6078      	str	r0, [r7, #4]
   98f70:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   98f72:	687b      	ldr	r3, [r7, #4]
   98f74:	695b      	ldr	r3, [r3, #20]
   98f76:	f003 0302 	and.w	r3, r3, #2
   98f7a:	2b00      	cmp	r3, #0
   98f7c:	d101      	bne.n	98f82 <usart_write+0x1a>
		return 1;
   98f7e:	2301      	movs	r3, #1
   98f80:	e005      	b.n	98f8e <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   98f82:	683b      	ldr	r3, [r7, #0]
   98f84:	f3c3 0208 	ubfx	r2, r3, #0, #9
   98f88:	687b      	ldr	r3, [r7, #4]
   98f8a:	61da      	str	r2, [r3, #28]
	return 0;
   98f8c:	2300      	movs	r3, #0
}
   98f8e:	4618      	mov	r0, r3
   98f90:	370c      	adds	r7, #12
   98f92:	46bd      	mov	sp, r7
   98f94:	bc80      	pop	{r7}
   98f96:	4770      	bx	lr

00098f98 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   98f98:	b480      	push	{r7}
   98f9a:	b083      	sub	sp, #12
   98f9c:	af00      	add	r7, sp, #0
   98f9e:	6078      	str	r0, [r7, #4]
   98fa0:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   98fa2:	687b      	ldr	r3, [r7, #4]
   98fa4:	695b      	ldr	r3, [r3, #20]
   98fa6:	f003 0301 	and.w	r3, r3, #1
   98faa:	2b00      	cmp	r3, #0
   98fac:	d101      	bne.n	98fb2 <usart_read+0x1a>
		return 1;
   98fae:	2301      	movs	r3, #1
   98fb0:	e006      	b.n	98fc0 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   98fb2:	687b      	ldr	r3, [r7, #4]
   98fb4:	699b      	ldr	r3, [r3, #24]
   98fb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
   98fba:	683b      	ldr	r3, [r7, #0]
   98fbc:	601a      	str	r2, [r3, #0]

	return 0;
   98fbe:	2300      	movs	r3, #0
}
   98fc0:	4618      	mov	r0, r3
   98fc2:	370c      	adds	r7, #12
   98fc4:	46bd      	mov	sp, r7
   98fc6:	bc80      	pop	{r7}
   98fc8:	4770      	bx	lr
   98fca:	bf00      	nop

00098fcc <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   98fcc:	b480      	push	{r7}
   98fce:	b083      	sub	sp, #12
   98fd0:	af00      	add	r7, sp, #0
   98fd2:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   98fd4:	687b      	ldr	r3, [r7, #4]
   98fd6:	4a04      	ldr	r2, [pc, #16]	; (98fe8 <usart_disable_writeprotect+0x1c>)
   98fd8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   98fdc:	bf00      	nop
   98fde:	370c      	adds	r7, #12
   98fe0:	46bd      	mov	sp, r7
   98fe2:	bc80      	pop	{r7}
   98fe4:	4770      	bx	lr
   98fe6:	bf00      	nop
   98fe8:	55534100 	.word	0x55534100

00098fec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   98fec:	b480      	push	{r7}
   98fee:	af00      	add	r7, sp, #0
	while (1) {
	}
   98ff0:	e7fe      	b.n	98ff0 <Dummy_Handler+0x4>
   98ff2:	bf00      	nop

00098ff4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   98ff4:	b580      	push	{r7, lr}
   98ff6:	b082      	sub	sp, #8
   98ff8:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   98ffa:	4b1e      	ldr	r3, [pc, #120]	; (99074 <Reset_Handler+0x80>)
   98ffc:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   98ffe:	4b1e      	ldr	r3, [pc, #120]	; (99078 <Reset_Handler+0x84>)
   99000:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   99002:	687a      	ldr	r2, [r7, #4]
   99004:	683b      	ldr	r3, [r7, #0]
   99006:	429a      	cmp	r2, r3
   99008:	d00c      	beq.n	99024 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   9900a:	e007      	b.n	9901c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   9900c:	683b      	ldr	r3, [r7, #0]
   9900e:	1d1a      	adds	r2, r3, #4
   99010:	603a      	str	r2, [r7, #0]
   99012:	687a      	ldr	r2, [r7, #4]
   99014:	1d11      	adds	r1, r2, #4
   99016:	6079      	str	r1, [r7, #4]
   99018:	6812      	ldr	r2, [r2, #0]
   9901a:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   9901c:	683b      	ldr	r3, [r7, #0]
   9901e:	4a17      	ldr	r2, [pc, #92]	; (9907c <Reset_Handler+0x88>)
   99020:	4293      	cmp	r3, r2
   99022:	d3f3      	bcc.n	9900c <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   99024:	4b16      	ldr	r3, [pc, #88]	; (99080 <Reset_Handler+0x8c>)
   99026:	603b      	str	r3, [r7, #0]
   99028:	e004      	b.n	99034 <Reset_Handler+0x40>
		*pDest++ = 0;
   9902a:	683b      	ldr	r3, [r7, #0]
   9902c:	1d1a      	adds	r2, r3, #4
   9902e:	603a      	str	r2, [r7, #0]
   99030:	2200      	movs	r2, #0
   99032:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   99034:	683b      	ldr	r3, [r7, #0]
   99036:	4a13      	ldr	r2, [pc, #76]	; (99084 <Reset_Handler+0x90>)
   99038:	4293      	cmp	r3, r2
   9903a:	d3f6      	bcc.n	9902a <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   9903c:	4b12      	ldr	r3, [pc, #72]	; (99088 <Reset_Handler+0x94>)
   9903e:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   99040:	4a12      	ldr	r2, [pc, #72]	; (9908c <Reset_Handler+0x98>)
   99042:	687b      	ldr	r3, [r7, #4]
   99044:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   99048:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   9904c:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   9904e:	687b      	ldr	r3, [r7, #4]
   99050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   99054:	d309      	bcc.n	9906a <Reset_Handler+0x76>
   99056:	687b      	ldr	r3, [r7, #4]
   99058:	4a0d      	ldr	r2, [pc, #52]	; (99090 <Reset_Handler+0x9c>)
   9905a:	4293      	cmp	r3, r2
   9905c:	d805      	bhi.n	9906a <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   9905e:	4a0b      	ldr	r2, [pc, #44]	; (9908c <Reset_Handler+0x98>)
   99060:	4b0a      	ldr	r3, [pc, #40]	; (9908c <Reset_Handler+0x98>)
   99062:	689b      	ldr	r3, [r3, #8]
   99064:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   99068:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   9906a:	4b0a      	ldr	r3, [pc, #40]	; (99094 <Reset_Handler+0xa0>)
   9906c:	4798      	blx	r3

	/* Branch to main function */
	main();
   9906e:	4b0a      	ldr	r3, [pc, #40]	; (99098 <Reset_Handler+0xa4>)
   99070:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   99072:	e7fe      	b.n	99072 <Reset_Handler+0x7e>
   99074:	000a6364 	.word	0x000a6364
   99078:	20070000 	.word	0x20070000
   9907c:	200714dc 	.word	0x200714dc
   99080:	200714dc 	.word	0x200714dc
   99084:	20073364 	.word	0x20073364
   99088:	00080000 	.word	0x00080000
   9908c:	e000ed00 	.word	0xe000ed00
   99090:	200fffff 	.word	0x200fffff
   99094:	000a422d 	.word	0x000a422d
   99098:	0008a659 	.word	0x0008a659

0009909c <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   9909c:	b480      	push	{r7}
   9909e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   990a0:	4b57      	ldr	r3, [pc, #348]	; (99200 <SystemCoreClockUpdate+0x164>)
   990a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   990a4:	f003 0303 	and.w	r3, r3, #3
   990a8:	2b03      	cmp	r3, #3
   990aa:	f200 808a 	bhi.w	991c2 <SystemCoreClockUpdate+0x126>
   990ae:	a201      	add	r2, pc, #4	; (adr r2, 990b4 <SystemCoreClockUpdate+0x18>)
   990b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   990b4:	000990c5 	.word	0x000990c5
   990b8:	000990e5 	.word	0x000990e5
   990bc:	00099135 	.word	0x00099135
   990c0:	00099135 	.word	0x00099135
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   990c4:	4b4f      	ldr	r3, [pc, #316]	; (99204 <SystemCoreClockUpdate+0x168>)
   990c6:	695b      	ldr	r3, [r3, #20]
   990c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   990cc:	2b00      	cmp	r3, #0
   990ce:	d004      	beq.n	990da <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   990d0:	4b4d      	ldr	r3, [pc, #308]	; (99208 <SystemCoreClockUpdate+0x16c>)
   990d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   990d6:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   990d8:	e073      	b.n	991c2 <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   990da:	4b4b      	ldr	r3, [pc, #300]	; (99208 <SystemCoreClockUpdate+0x16c>)
   990dc:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   990e0:	601a      	str	r2, [r3, #0]
		}
		break;
   990e2:	e06e      	b.n	991c2 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   990e4:	4b46      	ldr	r3, [pc, #280]	; (99200 <SystemCoreClockUpdate+0x164>)
   990e6:	6a1b      	ldr	r3, [r3, #32]
   990e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   990ec:	2b00      	cmp	r3, #0
   990ee:	d003      	beq.n	990f8 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   990f0:	4b45      	ldr	r3, [pc, #276]	; (99208 <SystemCoreClockUpdate+0x16c>)
   990f2:	4a46      	ldr	r2, [pc, #280]	; (9920c <SystemCoreClockUpdate+0x170>)
   990f4:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   990f6:	e064      	b.n	991c2 <SystemCoreClockUpdate+0x126>
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   990f8:	4b43      	ldr	r3, [pc, #268]	; (99208 <SystemCoreClockUpdate+0x16c>)
   990fa:	4a45      	ldr	r2, [pc, #276]	; (99210 <SystemCoreClockUpdate+0x174>)
   990fc:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   990fe:	4b40      	ldr	r3, [pc, #256]	; (99200 <SystemCoreClockUpdate+0x164>)
   99100:	6a1b      	ldr	r3, [r3, #32]
   99102:	f003 0370 	and.w	r3, r3, #112	; 0x70
   99106:	2b10      	cmp	r3, #16
   99108:	d004      	beq.n	99114 <SystemCoreClockUpdate+0x78>
   9910a:	2b20      	cmp	r3, #32
   9910c:	d008      	beq.n	99120 <SystemCoreClockUpdate+0x84>
   9910e:	2b00      	cmp	r3, #0
   99110:	d00e      	beq.n	99130 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   99112:	e00e      	b.n	99132 <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   99114:	4b3c      	ldr	r3, [pc, #240]	; (99208 <SystemCoreClockUpdate+0x16c>)
   99116:	681b      	ldr	r3, [r3, #0]
   99118:	005b      	lsls	r3, r3, #1
   9911a:	4a3b      	ldr	r2, [pc, #236]	; (99208 <SystemCoreClockUpdate+0x16c>)
   9911c:	6013      	str	r3, [r2, #0]
				break;
   9911e:	e008      	b.n	99132 <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   99120:	4b39      	ldr	r3, [pc, #228]	; (99208 <SystemCoreClockUpdate+0x16c>)
   99122:	681a      	ldr	r2, [r3, #0]
   99124:	4613      	mov	r3, r2
   99126:	005b      	lsls	r3, r3, #1
   99128:	4413      	add	r3, r2
   9912a:	4a37      	ldr	r2, [pc, #220]	; (99208 <SystemCoreClockUpdate+0x16c>)
   9912c:	6013      	str	r3, [r2, #0]
				break;
   9912e:	e000      	b.n	99132 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   99130:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   99132:	e046      	b.n	991c2 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   99134:	4b32      	ldr	r3, [pc, #200]	; (99200 <SystemCoreClockUpdate+0x164>)
   99136:	6a1b      	ldr	r3, [r3, #32]
   99138:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   9913c:	2b00      	cmp	r3, #0
   9913e:	d003      	beq.n	99148 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   99140:	4b31      	ldr	r3, [pc, #196]	; (99208 <SystemCoreClockUpdate+0x16c>)
   99142:	4a32      	ldr	r2, [pc, #200]	; (9920c <SystemCoreClockUpdate+0x170>)
   99144:	601a      	str	r2, [r3, #0]
   99146:	e01c      	b.n	99182 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   99148:	4b2f      	ldr	r3, [pc, #188]	; (99208 <SystemCoreClockUpdate+0x16c>)
   9914a:	4a31      	ldr	r2, [pc, #196]	; (99210 <SystemCoreClockUpdate+0x174>)
   9914c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   9914e:	4b2c      	ldr	r3, [pc, #176]	; (99200 <SystemCoreClockUpdate+0x164>)
   99150:	6a1b      	ldr	r3, [r3, #32]
   99152:	f003 0370 	and.w	r3, r3, #112	; 0x70
   99156:	2b10      	cmp	r3, #16
   99158:	d004      	beq.n	99164 <SystemCoreClockUpdate+0xc8>
   9915a:	2b20      	cmp	r3, #32
   9915c:	d008      	beq.n	99170 <SystemCoreClockUpdate+0xd4>
   9915e:	2b00      	cmp	r3, #0
   99160:	d00e      	beq.n	99180 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   99162:	e00e      	b.n	99182 <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   99164:	4b28      	ldr	r3, [pc, #160]	; (99208 <SystemCoreClockUpdate+0x16c>)
   99166:	681b      	ldr	r3, [r3, #0]
   99168:	005b      	lsls	r3, r3, #1
   9916a:	4a27      	ldr	r2, [pc, #156]	; (99208 <SystemCoreClockUpdate+0x16c>)
   9916c:	6013      	str	r3, [r2, #0]
				break;
   9916e:	e008      	b.n	99182 <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   99170:	4b25      	ldr	r3, [pc, #148]	; (99208 <SystemCoreClockUpdate+0x16c>)
   99172:	681a      	ldr	r2, [r3, #0]
   99174:	4613      	mov	r3, r2
   99176:	005b      	lsls	r3, r3, #1
   99178:	4413      	add	r3, r2
   9917a:	4a23      	ldr	r2, [pc, #140]	; (99208 <SystemCoreClockUpdate+0x16c>)
   9917c:	6013      	str	r3, [r2, #0]
				break;
   9917e:	e000      	b.n	99182 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   99180:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   99182:	4b1f      	ldr	r3, [pc, #124]	; (99200 <SystemCoreClockUpdate+0x164>)
   99184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   99186:	f003 0303 	and.w	r3, r3, #3
   9918a:	2b02      	cmp	r3, #2
   9918c:	d115      	bne.n	991ba <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   9918e:	4b1c      	ldr	r3, [pc, #112]	; (99200 <SystemCoreClockUpdate+0x164>)
   99190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   99192:	4b20      	ldr	r3, [pc, #128]	; (99214 <SystemCoreClockUpdate+0x178>)
   99194:	4013      	ands	r3, r2
   99196:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   99198:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   9919a:	4a1b      	ldr	r2, [pc, #108]	; (99208 <SystemCoreClockUpdate+0x16c>)
   9919c:	6812      	ldr	r2, [r2, #0]
   9919e:	fb02 f303 	mul.w	r3, r2, r3
   991a2:	4a19      	ldr	r2, [pc, #100]	; (99208 <SystemCoreClockUpdate+0x16c>)
   991a4:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   991a6:	4b16      	ldr	r3, [pc, #88]	; (99200 <SystemCoreClockUpdate+0x164>)
   991a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   991aa:	b2db      	uxtb	r3, r3
   991ac:	4a16      	ldr	r2, [pc, #88]	; (99208 <SystemCoreClockUpdate+0x16c>)
   991ae:	6812      	ldr	r2, [r2, #0]
   991b0:	fbb2 f3f3 	udiv	r3, r2, r3
   991b4:	4a14      	ldr	r2, [pc, #80]	; (99208 <SystemCoreClockUpdate+0x16c>)
   991b6:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   991b8:	e002      	b.n	991c0 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   991ba:	4b13      	ldr	r3, [pc, #76]	; (99208 <SystemCoreClockUpdate+0x16c>)
   991bc:	4a16      	ldr	r2, [pc, #88]	; (99218 <SystemCoreClockUpdate+0x17c>)
   991be:	601a      	str	r2, [r3, #0]
		}
		break;
   991c0:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   991c2:	4b0f      	ldr	r3, [pc, #60]	; (99200 <SystemCoreClockUpdate+0x164>)
   991c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   991c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   991ca:	2b70      	cmp	r3, #112	; 0x70
   991cc:	d108      	bne.n	991e0 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   991ce:	4b0e      	ldr	r3, [pc, #56]	; (99208 <SystemCoreClockUpdate+0x16c>)
   991d0:	681b      	ldr	r3, [r3, #0]
   991d2:	4a12      	ldr	r2, [pc, #72]	; (9921c <SystemCoreClockUpdate+0x180>)
   991d4:	fba2 2303 	umull	r2, r3, r2, r3
   991d8:	085b      	lsrs	r3, r3, #1
   991da:	4a0b      	ldr	r2, [pc, #44]	; (99208 <SystemCoreClockUpdate+0x16c>)
   991dc:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   991de:	e00a      	b.n	991f6 <SystemCoreClockUpdate+0x15a>
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   991e0:	4b07      	ldr	r3, [pc, #28]	; (99200 <SystemCoreClockUpdate+0x164>)
   991e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   991e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   991e8:	091b      	lsrs	r3, r3, #4
   991ea:	4a07      	ldr	r2, [pc, #28]	; (99208 <SystemCoreClockUpdate+0x16c>)
   991ec:	6812      	ldr	r2, [r2, #0]
   991ee:	fa22 f303 	lsr.w	r3, r2, r3
   991f2:	4a05      	ldr	r2, [pc, #20]	; (99208 <SystemCoreClockUpdate+0x16c>)
   991f4:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   991f6:	bf00      	nop
   991f8:	46bd      	mov	sp, r7
   991fa:	bc80      	pop	{r7}
   991fc:	4770      	bx	lr
   991fe:	bf00      	nop
   99200:	400e0600 	.word	0x400e0600
   99204:	400e1a10 	.word	0x400e1a10
   99208:	20070a60 	.word	0x20070a60
   9920c:	00b71b00 	.word	0x00b71b00
   99210:	003d0900 	.word	0x003d0900
   99214:	07ff0000 	.word	0x07ff0000
   99218:	0e4e1c00 	.word	0x0e4e1c00
   9921c:	aaaaaaab 	.word	0xaaaaaaab

00099220 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   99220:	b480      	push	{r7}
   99222:	b083      	sub	sp, #12
   99224:	af00      	add	r7, sp, #0
   99226:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   99228:	687b      	ldr	r3, [r7, #4]
   9922a:	4a25      	ldr	r2, [pc, #148]	; (992c0 <system_init_flash+0xa0>)
   9922c:	4293      	cmp	r3, r2
   9922e:	d806      	bhi.n	9923e <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   99230:	4b24      	ldr	r3, [pc, #144]	; (992c4 <system_init_flash+0xa4>)
   99232:	2200      	movs	r2, #0
   99234:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   99236:	4b24      	ldr	r3, [pc, #144]	; (992c8 <system_init_flash+0xa8>)
   99238:	2200      	movs	r2, #0
   9923a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   9923c:	e03b      	b.n	992b6 <system_init_flash+0x96>
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   9923e:	687b      	ldr	r3, [r7, #4]
   99240:	4a22      	ldr	r2, [pc, #136]	; (992cc <system_init_flash+0xac>)
   99242:	4293      	cmp	r3, r2
   99244:	d808      	bhi.n	99258 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   99246:	4b1f      	ldr	r3, [pc, #124]	; (992c4 <system_init_flash+0xa4>)
   99248:	f44f 7280 	mov.w	r2, #256	; 0x100
   9924c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   9924e:	4b1e      	ldr	r3, [pc, #120]	; (992c8 <system_init_flash+0xa8>)
   99250:	f44f 7280 	mov.w	r2, #256	; 0x100
   99254:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   99256:	e02e      	b.n	992b6 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   99258:	687b      	ldr	r3, [r7, #4]
   9925a:	4a1d      	ldr	r2, [pc, #116]	; (992d0 <system_init_flash+0xb0>)
   9925c:	4293      	cmp	r3, r2
   9925e:	d808      	bhi.n	99272 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   99260:	4b18      	ldr	r3, [pc, #96]	; (992c4 <system_init_flash+0xa4>)
   99262:	f44f 7200 	mov.w	r2, #512	; 0x200
   99266:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   99268:	4b17      	ldr	r3, [pc, #92]	; (992c8 <system_init_flash+0xa8>)
   9926a:	f44f 7200 	mov.w	r2, #512	; 0x200
   9926e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   99270:	e021      	b.n	992b6 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   99272:	687b      	ldr	r3, [r7, #4]
   99274:	4a17      	ldr	r2, [pc, #92]	; (992d4 <system_init_flash+0xb4>)
   99276:	4293      	cmp	r3, r2
   99278:	d808      	bhi.n	9928c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   9927a:	4b12      	ldr	r3, [pc, #72]	; (992c4 <system_init_flash+0xa4>)
   9927c:	f44f 7240 	mov.w	r2, #768	; 0x300
   99280:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   99282:	4b11      	ldr	r3, [pc, #68]	; (992c8 <system_init_flash+0xa8>)
   99284:	f44f 7240 	mov.w	r2, #768	; 0x300
   99288:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   9928a:	e014      	b.n	992b6 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   9928c:	687b      	ldr	r3, [r7, #4]
   9928e:	4a12      	ldr	r2, [pc, #72]	; (992d8 <system_init_flash+0xb8>)
   99290:	4293      	cmp	r3, r2
   99292:	d808      	bhi.n	992a6 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   99294:	4b0b      	ldr	r3, [pc, #44]	; (992c4 <system_init_flash+0xa4>)
   99296:	f44f 6280 	mov.w	r2, #1024	; 0x400
   9929a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
   9929c:	4b0a      	ldr	r3, [pc, #40]	; (992c8 <system_init_flash+0xa8>)
   9929e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   992a2:	601a      	str	r2, [r3, #0]
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   992a4:	e007      	b.n	992b6 <system_init_flash+0x96>
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   992a6:	4b07      	ldr	r3, [pc, #28]	; (992c4 <system_init_flash+0xa4>)
   992a8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   992ac:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   992ae:	4b06      	ldr	r3, [pc, #24]	; (992c8 <system_init_flash+0xa8>)
   992b0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   992b4:	601a      	str	r2, [r3, #0]
	}
}
   992b6:	bf00      	nop
   992b8:	370c      	adds	r7, #12
   992ba:	46bd      	mov	sp, r7
   992bc:	bc80      	pop	{r7}
   992be:	4770      	bx	lr
   992c0:	0121eabf 	.word	0x0121eabf
   992c4:	400e0a00 	.word	0x400e0a00
   992c8:	400e0c00 	.word	0x400e0c00
   992cc:	02faf07f 	.word	0x02faf07f
   992d0:	03d08fff 	.word	0x03d08fff
   992d4:	04c4b3ff 	.word	0x04c4b3ff
   992d8:	055d4a7f 	.word	0x055d4a7f

000992dc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   992dc:	b480      	push	{r7}
   992de:	b085      	sub	sp, #20
   992e0:	af00      	add	r7, sp, #0
   992e2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   992e4:	4b0a      	ldr	r3, [pc, #40]	; (99310 <_sbrk+0x34>)
   992e6:	681b      	ldr	r3, [r3, #0]
   992e8:	2b00      	cmp	r3, #0
   992ea:	d102      	bne.n	992f2 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   992ec:	4b08      	ldr	r3, [pc, #32]	; (99310 <_sbrk+0x34>)
   992ee:	4a09      	ldr	r2, [pc, #36]	; (99314 <_sbrk+0x38>)
   992f0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   992f2:	4b07      	ldr	r3, [pc, #28]	; (99310 <_sbrk+0x34>)
   992f4:	681b      	ldr	r3, [r3, #0]
   992f6:	60fb      	str	r3, [r7, #12]

	heap += incr;
   992f8:	4b05      	ldr	r3, [pc, #20]	; (99310 <_sbrk+0x34>)
   992fa:	681a      	ldr	r2, [r3, #0]
   992fc:	687b      	ldr	r3, [r7, #4]
   992fe:	4413      	add	r3, r2
   99300:	4a03      	ldr	r2, [pc, #12]	; (99310 <_sbrk+0x34>)
   99302:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   99304:	68fb      	ldr	r3, [r7, #12]
}
   99306:	4618      	mov	r0, r3
   99308:	3714      	adds	r7, #20
   9930a:	46bd      	mov	sp, r7
   9930c:	bc80      	pop	{r7}
   9930e:	4770      	bx	lr
   99310:	200727a8 	.word	0x200727a8
   99314:	20075368 	.word	0x20075368

00099318 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   99318:	b480      	push	{r7}
   9931a:	b083      	sub	sp, #12
   9931c:	af00      	add	r7, sp, #0
   9931e:	6078      	str	r0, [r7, #4]
	return -1;
   99320:	f04f 33ff 	mov.w	r3, #4294967295
}
   99324:	4618      	mov	r0, r3
   99326:	370c      	adds	r7, #12
   99328:	46bd      	mov	sp, r7
   9932a:	bc80      	pop	{r7}
   9932c:	4770      	bx	lr
   9932e:	bf00      	nop

00099330 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   99330:	b480      	push	{r7}
   99332:	b083      	sub	sp, #12
   99334:	af00      	add	r7, sp, #0
   99336:	6078      	str	r0, [r7, #4]
   99338:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   9933a:	683b      	ldr	r3, [r7, #0]
   9933c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   99340:	605a      	str	r2, [r3, #4]

	return 0;
   99342:	2300      	movs	r3, #0
}
   99344:	4618      	mov	r0, r3
   99346:	370c      	adds	r7, #12
   99348:	46bd      	mov	sp, r7
   9934a:	bc80      	pop	{r7}
   9934c:	4770      	bx	lr
   9934e:	bf00      	nop

00099350 <_isatty>:

extern int _isatty(int file)
{
   99350:	b480      	push	{r7}
   99352:	b083      	sub	sp, #12
   99354:	af00      	add	r7, sp, #0
   99356:	6078      	str	r0, [r7, #4]
	return 1;
   99358:	2301      	movs	r3, #1
}
   9935a:	4618      	mov	r0, r3
   9935c:	370c      	adds	r7, #12
   9935e:	46bd      	mov	sp, r7
   99360:	bc80      	pop	{r7}
   99362:	4770      	bx	lr

00099364 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   99364:	b480      	push	{r7}
   99366:	b085      	sub	sp, #20
   99368:	af00      	add	r7, sp, #0
   9936a:	60f8      	str	r0, [r7, #12]
   9936c:	60b9      	str	r1, [r7, #8]
   9936e:	607a      	str	r2, [r7, #4]
	return 0;
   99370:	2300      	movs	r3, #0
}
   99372:	4618      	mov	r0, r3
   99374:	3714      	adds	r7, #20
   99376:	46bd      	mov	sp, r7
   99378:	bc80      	pop	{r7}
   9937a:	4770      	bx	lr

0009937c <Cl_Console_Read_ConsoleMessage_Status>:
   9937c:	b480      	push	{r7}
   9937e:	b083      	sub	sp, #12
   99380:	af00      	add	r7, sp, #0
   99382:	2304      	movs	r3, #4
   99384:	71fb      	strb	r3, [r7, #7]
   99386:	4b0b      	ldr	r3, [pc, #44]	; (993b4 <Cl_Console_Read_ConsoleMessage_Status+0x38>)
   99388:	7e1b      	ldrb	r3, [r3, #24]
   9938a:	2b00      	cmp	r3, #0
   9938c:	d002      	beq.n	99394 <Cl_Console_Read_ConsoleMessage_Status+0x18>
   9938e:	2300      	movs	r3, #0
   99390:	71fb      	strb	r3, [r7, #7]
   99392:	e008      	b.n	993a6 <Cl_Console_Read_ConsoleMessage_Status+0x2a>
   99394:	4b08      	ldr	r3, [pc, #32]	; (993b8 <Cl_Console_Read_ConsoleMessage_Status+0x3c>)
   99396:	7e1b      	ldrb	r3, [r3, #24]
   99398:	2b00      	cmp	r3, #0
   9939a:	d002      	beq.n	993a2 <Cl_Console_Read_ConsoleMessage_Status+0x26>
   9939c:	2300      	movs	r3, #0
   9939e:	71fb      	strb	r3, [r7, #7]
   993a0:	e001      	b.n	993a6 <Cl_Console_Read_ConsoleMessage_Status+0x2a>
   993a2:	2301      	movs	r3, #1
   993a4:	71fb      	strb	r3, [r7, #7]
   993a6:	79fb      	ldrb	r3, [r7, #7]
   993a8:	4618      	mov	r0, r3
   993aa:	370c      	adds	r7, #12
   993ac:	46bd      	mov	sp, r7
   993ae:	bc80      	pop	{r7}
   993b0:	4770      	bx	lr
   993b2:	bf00      	nop
   993b4:	20072fb4 	.word	0x20072fb4
   993b8:	20072e7c 	.word	0x20072e7c

000993bc <Cl_Console_Read_Message_Ready_Status>:
   993bc:	b480      	push	{r7}
   993be:	af00      	add	r7, sp, #0
   993c0:	4b05      	ldr	r3, [pc, #20]	; (993d8 <Cl_Console_Read_Message_Ready_Status+0x1c>)
   993c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   993c6:	2b00      	cmp	r3, #0
   993c8:	d001      	beq.n	993ce <Cl_Console_Read_Message_Ready_Status+0x12>
   993ca:	2300      	movs	r3, #0
   993cc:	e000      	b.n	993d0 <Cl_Console_Read_Message_Ready_Status+0x14>
   993ce:	2301      	movs	r3, #1
   993d0:	4618      	mov	r0, r3
   993d2:	46bd      	mov	sp, r7
   993d4:	bc80      	pop	{r7}
   993d6:	4770      	bx	lr
   993d8:	20072df8 	.word	0x20072df8

000993dc <Cl_Console_Read_Message_Console>:
   993dc:	b480      	push	{r7}
   993de:	b083      	sub	sp, #12
   993e0:	af00      	add	r7, sp, #0
   993e2:	4b54      	ldr	r3, [pc, #336]	; (99534 <Cl_Console_Read_Message_Console+0x158>)
   993e4:	7e1b      	ldrb	r3, [r3, #24]
   993e6:	2b00      	cmp	r3, #0
   993e8:	d03c      	beq.n	99464 <Cl_Console_Read_Message_Console+0x88>
   993ea:	4b52      	ldr	r3, [pc, #328]	; (99534 <Cl_Console_Read_Message_Console+0x158>)
   993ec:	7e5b      	ldrb	r3, [r3, #25]
   993ee:	f083 0301 	eor.w	r3, r3, #1
   993f2:	b2db      	uxtb	r3, r3
   993f4:	2b00      	cmp	r3, #0
   993f6:	d035      	beq.n	99464 <Cl_Console_Read_Message_Console+0x88>
   993f8:	4b4f      	ldr	r3, [pc, #316]	; (99538 <Cl_Console_Read_Message_Console+0x15c>)
   993fa:	2200      	movs	r2, #0
   993fc:	701a      	strb	r2, [r3, #0]
   993fe:	2300      	movs	r3, #0
   99400:	71fb      	strb	r3, [r7, #7]
   99402:	e010      	b.n	99426 <Cl_Console_Read_Message_Console+0x4a>
   99404:	4b4c      	ldr	r3, [pc, #304]	; (99538 <Cl_Console_Read_Message_Console+0x15c>)
   99406:	781b      	ldrb	r3, [r3, #0]
   99408:	4619      	mov	r1, r3
   9940a:	79fb      	ldrb	r3, [r7, #7]
   9940c:	4a49      	ldr	r2, [pc, #292]	; (99534 <Cl_Console_Read_Message_Console+0x158>)
   9940e:	5cd2      	ldrb	r2, [r2, r3]
   99410:	4b4a      	ldr	r3, [pc, #296]	; (9953c <Cl_Console_Read_Message_Console+0x160>)
   99412:	545a      	strb	r2, [r3, r1]
   99414:	4b48      	ldr	r3, [pc, #288]	; (99538 <Cl_Console_Read_Message_Console+0x15c>)
   99416:	781b      	ldrb	r3, [r3, #0]
   99418:	3301      	adds	r3, #1
   9941a:	b2da      	uxtb	r2, r3
   9941c:	4b46      	ldr	r3, [pc, #280]	; (99538 <Cl_Console_Read_Message_Console+0x15c>)
   9941e:	701a      	strb	r2, [r3, #0]
   99420:	79fb      	ldrb	r3, [r7, #7]
   99422:	3301      	adds	r3, #1
   99424:	71fb      	strb	r3, [r7, #7]
   99426:	4b43      	ldr	r3, [pc, #268]	; (99534 <Cl_Console_Read_Message_Console+0x158>)
   99428:	7d1b      	ldrb	r3, [r3, #20]
   9942a:	79fa      	ldrb	r2, [r7, #7]
   9942c:	429a      	cmp	r2, r3
   9942e:	d3e9      	bcc.n	99404 <Cl_Console_Read_Message_Console+0x28>
   99430:	4b40      	ldr	r3, [pc, #256]	; (99534 <Cl_Console_Read_Message_Console+0x158>)
   99432:	7f5b      	ldrb	r3, [r3, #29]
   99434:	f083 0301 	eor.w	r3, r3, #1
   99438:	b2db      	uxtb	r3, r3
   9943a:	2b00      	cmp	r3, #0
   9943c:	d003      	beq.n	99446 <Cl_Console_Read_Message_Console+0x6a>
   9943e:	4b3f      	ldr	r3, [pc, #252]	; (9953c <Cl_Console_Read_Message_Console+0x160>)
   99440:	2201      	movs	r2, #1
   99442:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   99446:	4b3b      	ldr	r3, [pc, #236]	; (99534 <Cl_Console_Read_Message_Console+0x158>)
   99448:	2201      	movs	r2, #1
   9944a:	765a      	strb	r2, [r3, #25]
   9944c:	4b39      	ldr	r3, [pc, #228]	; (99534 <Cl_Console_Read_Message_Console+0x158>)
   9944e:	2200      	movs	r2, #0
   99450:	761a      	strb	r2, [r3, #24]
   99452:	4b38      	ldr	r3, [pc, #224]	; (99534 <Cl_Console_Read_Message_Console+0x158>)
   99454:	2200      	movs	r2, #0
   99456:	76da      	strb	r2, [r3, #27]
   99458:	4b36      	ldr	r3, [pc, #216]	; (99534 <Cl_Console_Read_Message_Console+0x158>)
   9945a:	2200      	movs	r2, #0
   9945c:	751a      	strb	r2, [r3, #20]
   9945e:	4b35      	ldr	r3, [pc, #212]	; (99534 <Cl_Console_Read_Message_Console+0x158>)
   99460:	2201      	movs	r2, #1
   99462:	771a      	strb	r2, [r3, #28]
   99464:	4b36      	ldr	r3, [pc, #216]	; (99540 <Cl_Console_Read_Message_Console+0x164>)
   99466:	7e1b      	ldrb	r3, [r3, #24]
   99468:	2b00      	cmp	r3, #0
   9946a:	d05c      	beq.n	99526 <Cl_Console_Read_Message_Console+0x14a>
   9946c:	4b34      	ldr	r3, [pc, #208]	; (99540 <Cl_Console_Read_Message_Console+0x164>)
   9946e:	7e5b      	ldrb	r3, [r3, #25]
   99470:	f083 0301 	eor.w	r3, r3, #1
   99474:	b2db      	uxtb	r3, r3
   99476:	2b00      	cmp	r3, #0
   99478:	d055      	beq.n	99526 <Cl_Console_Read_Message_Console+0x14a>
   9947a:	4b2e      	ldr	r3, [pc, #184]	; (99534 <Cl_Console_Read_Message_Console+0x158>)
   9947c:	7f5b      	ldrb	r3, [r3, #29]
   9947e:	f083 0301 	eor.w	r3, r3, #1
   99482:	b2db      	uxtb	r3, r3
   99484:	2b00      	cmp	r3, #0
   99486:	d002      	beq.n	9948e <Cl_Console_Read_Message_Console+0xb2>
   99488:	4b2b      	ldr	r3, [pc, #172]	; (99538 <Cl_Console_Read_Message_Console+0x15c>)
   9948a:	2200      	movs	r2, #0
   9948c:	701a      	strb	r2, [r3, #0]
   9948e:	2300      	movs	r3, #0
   99490:	71fb      	strb	r3, [r7, #7]
   99492:	e010      	b.n	994b6 <Cl_Console_Read_Message_Console+0xda>
   99494:	4b28      	ldr	r3, [pc, #160]	; (99538 <Cl_Console_Read_Message_Console+0x15c>)
   99496:	781b      	ldrb	r3, [r3, #0]
   99498:	4619      	mov	r1, r3
   9949a:	79fb      	ldrb	r3, [r7, #7]
   9949c:	4a28      	ldr	r2, [pc, #160]	; (99540 <Cl_Console_Read_Message_Console+0x164>)
   9949e:	5cd2      	ldrb	r2, [r2, r3]
   994a0:	4b26      	ldr	r3, [pc, #152]	; (9953c <Cl_Console_Read_Message_Console+0x160>)
   994a2:	545a      	strb	r2, [r3, r1]
   994a4:	4b24      	ldr	r3, [pc, #144]	; (99538 <Cl_Console_Read_Message_Console+0x15c>)
   994a6:	781b      	ldrb	r3, [r3, #0]
   994a8:	3301      	adds	r3, #1
   994aa:	b2da      	uxtb	r2, r3
   994ac:	4b22      	ldr	r3, [pc, #136]	; (99538 <Cl_Console_Read_Message_Console+0x15c>)
   994ae:	701a      	strb	r2, [r3, #0]
   994b0:	79fb      	ldrb	r3, [r7, #7]
   994b2:	3301      	adds	r3, #1
   994b4:	71fb      	strb	r3, [r7, #7]
   994b6:	4b22      	ldr	r3, [pc, #136]	; (99540 <Cl_Console_Read_Message_Console+0x164>)
   994b8:	7d1b      	ldrb	r3, [r3, #20]
   994ba:	79fa      	ldrb	r2, [r7, #7]
   994bc:	429a      	cmp	r2, r3
   994be:	d3e9      	bcc.n	99494 <Cl_Console_Read_Message_Console+0xb8>
   994c0:	4b1f      	ldr	r3, [pc, #124]	; (99540 <Cl_Console_Read_Message_Console+0x164>)
   994c2:	7f5b      	ldrb	r3, [r3, #29]
   994c4:	f083 0301 	eor.w	r3, r3, #1
   994c8:	b2db      	uxtb	r3, r3
   994ca:	2b00      	cmp	r3, #0
   994cc:	d003      	beq.n	994d6 <Cl_Console_Read_Message_Console+0xfa>
   994ce:	4b1b      	ldr	r3, [pc, #108]	; (9953c <Cl_Console_Read_Message_Console+0x160>)
   994d0:	2201      	movs	r2, #1
   994d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   994d6:	4b1a      	ldr	r3, [pc, #104]	; (99540 <Cl_Console_Read_Message_Console+0x164>)
   994d8:	2201      	movs	r2, #1
   994da:	765a      	strb	r2, [r3, #25]
   994dc:	4b18      	ldr	r3, [pc, #96]	; (99540 <Cl_Console_Read_Message_Console+0x164>)
   994de:	2200      	movs	r2, #0
   994e0:	761a      	strb	r2, [r3, #24]
   994e2:	4b17      	ldr	r3, [pc, #92]	; (99540 <Cl_Console_Read_Message_Console+0x164>)
   994e4:	2200      	movs	r2, #0
   994e6:	751a      	strb	r2, [r3, #20]
   994e8:	4b15      	ldr	r3, [pc, #84]	; (99540 <Cl_Console_Read_Message_Console+0x164>)
   994ea:	2200      	movs	r2, #0
   994ec:	76da      	strb	r2, [r3, #27]
   994ee:	4b14      	ldr	r3, [pc, #80]	; (99540 <Cl_Console_Read_Message_Console+0x164>)
   994f0:	2201      	movs	r2, #1
   994f2:	771a      	strb	r2, [r3, #28]
   994f4:	4b0f      	ldr	r3, [pc, #60]	; (99534 <Cl_Console_Read_Message_Console+0x158>)
   994f6:	7f5b      	ldrb	r3, [r3, #29]
   994f8:	2b00      	cmp	r3, #0
   994fa:	d014      	beq.n	99526 <Cl_Console_Read_Message_Console+0x14a>
   994fc:	4b0d      	ldr	r3, [pc, #52]	; (99534 <Cl_Console_Read_Message_Console+0x158>)
   994fe:	2201      	movs	r2, #1
   99500:	765a      	strb	r2, [r3, #25]
   99502:	4b0c      	ldr	r3, [pc, #48]	; (99534 <Cl_Console_Read_Message_Console+0x158>)
   99504:	2200      	movs	r2, #0
   99506:	761a      	strb	r2, [r3, #24]
   99508:	4b0a      	ldr	r3, [pc, #40]	; (99534 <Cl_Console_Read_Message_Console+0x158>)
   9950a:	2200      	movs	r2, #0
   9950c:	76da      	strb	r2, [r3, #27]
   9950e:	4b09      	ldr	r3, [pc, #36]	; (99534 <Cl_Console_Read_Message_Console+0x158>)
   99510:	2200      	movs	r2, #0
   99512:	775a      	strb	r2, [r3, #29]
   99514:	4b0a      	ldr	r3, [pc, #40]	; (99540 <Cl_Console_Read_Message_Console+0x164>)
   99516:	2200      	movs	r2, #0
   99518:	775a      	strb	r2, [r3, #29]
   9951a:	4b06      	ldr	r3, [pc, #24]	; (99534 <Cl_Console_Read_Message_Console+0x158>)
   9951c:	2200      	movs	r2, #0
   9951e:	751a      	strb	r2, [r3, #20]
   99520:	4b04      	ldr	r3, [pc, #16]	; (99534 <Cl_Console_Read_Message_Console+0x158>)
   99522:	2201      	movs	r2, #1
   99524:	771a      	strb	r2, [r3, #28]
   99526:	2300      	movs	r3, #0
   99528:	4618      	mov	r0, r3
   9952a:	370c      	adds	r7, #12
   9952c:	46bd      	mov	sp, r7
   9952e:	bc80      	pop	{r7}
   99530:	4770      	bx	lr
   99532:	bf00      	nop
   99534:	20072fb4 	.word	0x20072fb4
   99538:	200727b2 	.word	0x200727b2
   9953c:	20072df8 	.word	0x20072df8
   99540:	20072e7c 	.word	0x20072e7c

00099544 <Cl_Mac_Create_ConsoleEvent>:
   99544:	b580      	push	{r7, lr}
   99546:	b084      	sub	sp, #16
   99548:	af00      	add	r7, sp, #0
   9954a:	2300      	movs	r3, #0
   9954c:	70fb      	strb	r3, [r7, #3]
   9954e:	2300      	movs	r3, #0
   99550:	60bb      	str	r3, [r7, #8]
   99552:	2300      	movs	r3, #0
   99554:	607b      	str	r3, [r7, #4]
   99556:	4b46      	ldr	r3, [pc, #280]	; (99670 <Cl_Mac_Create_ConsoleEvent+0x12c>)
   99558:	4a46      	ldr	r2, [pc, #280]	; (99674 <Cl_Mac_Create_ConsoleEvent+0x130>)
   9955a:	601a      	str	r2, [r3, #0]
   9955c:	4b45      	ldr	r3, [pc, #276]	; (99674 <Cl_Mac_Create_ConsoleEvent+0x130>)
   9955e:	781a      	ldrb	r2, [r3, #0]
   99560:	4b45      	ldr	r3, [pc, #276]	; (99678 <Cl_Mac_Create_ConsoleEvent+0x134>)
   99562:	709a      	strb	r2, [r3, #2]
   99564:	4b43      	ldr	r3, [pc, #268]	; (99674 <Cl_Mac_Create_ConsoleEvent+0x130>)
   99566:	785a      	ldrb	r2, [r3, #1]
   99568:	4b43      	ldr	r3, [pc, #268]	; (99678 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9956a:	70da      	strb	r2, [r3, #3]
   9956c:	4b43      	ldr	r3, [pc, #268]	; (9967c <Cl_Mac_Create_ConsoleEvent+0x138>)
   9956e:	607b      	str	r3, [r7, #4]
   99570:	4b43      	ldr	r3, [pc, #268]	; (99680 <Cl_Mac_Create_ConsoleEvent+0x13c>)
   99572:	60bb      	str	r3, [r7, #8]
   99574:	2300      	movs	r3, #0
   99576:	73fb      	strb	r3, [r7, #15]
   99578:	e00c      	b.n	99594 <Cl_Mac_Create_ConsoleEvent+0x50>
   9957a:	687b      	ldr	r3, [r7, #4]
   9957c:	781a      	ldrb	r2, [r3, #0]
   9957e:	68bb      	ldr	r3, [r7, #8]
   99580:	701a      	strb	r2, [r3, #0]
   99582:	68bb      	ldr	r3, [r7, #8]
   99584:	3301      	adds	r3, #1
   99586:	60bb      	str	r3, [r7, #8]
   99588:	687b      	ldr	r3, [r7, #4]
   9958a:	3301      	adds	r3, #1
   9958c:	607b      	str	r3, [r7, #4]
   9958e:	7bfb      	ldrb	r3, [r7, #15]
   99590:	3301      	adds	r3, #1
   99592:	73fb      	strb	r3, [r7, #15]
   99594:	4b38      	ldr	r3, [pc, #224]	; (99678 <Cl_Mac_Create_ConsoleEvent+0x134>)
   99596:	78db      	ldrb	r3, [r3, #3]
   99598:	7bfa      	ldrb	r2, [r7, #15]
   9959a:	429a      	cmp	r2, r3
   9959c:	d3ed      	bcc.n	9957a <Cl_Mac_Create_ConsoleEvent+0x36>
   9959e:	4b36      	ldr	r3, [pc, #216]	; (99678 <Cl_Mac_Create_ConsoleEvent+0x134>)
   995a0:	789b      	ldrb	r3, [r3, #2]
   995a2:	2b04      	cmp	r3, #4
   995a4:	d00f      	beq.n	995c6 <Cl_Mac_Create_ConsoleEvent+0x82>
   995a6:	4b37      	ldr	r3, [pc, #220]	; (99684 <Cl_Mac_Create_ConsoleEvent+0x140>)
   995a8:	4798      	blx	r3
   995aa:	4b37      	ldr	r3, [pc, #220]	; (99688 <Cl_Mac_Create_ConsoleEvent+0x144>)
   995ac:	881b      	ldrh	r3, [r3, #0]
   995ae:	3301      	adds	r3, #1
   995b0:	b29a      	uxth	r2, r3
   995b2:	4b35      	ldr	r3, [pc, #212]	; (99688 <Cl_Mac_Create_ConsoleEvent+0x144>)
   995b4:	801a      	strh	r2, [r3, #0]
   995b6:	4b34      	ldr	r3, [pc, #208]	; (99688 <Cl_Mac_Create_ConsoleEvent+0x144>)
   995b8:	881b      	ldrh	r3, [r3, #0]
   995ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   995be:	d302      	bcc.n	995c6 <Cl_Mac_Create_ConsoleEvent+0x82>
   995c0:	4b31      	ldr	r3, [pc, #196]	; (99688 <Cl_Mac_Create_ConsoleEvent+0x144>)
   995c2:	2200      	movs	r2, #0
   995c4:	801a      	strh	r2, [r3, #0]
   995c6:	4b2c      	ldr	r3, [pc, #176]	; (99678 <Cl_Mac_Create_ConsoleEvent+0x134>)
   995c8:	789b      	ldrb	r3, [r3, #2]
   995ca:	2b17      	cmp	r3, #23
   995cc:	d103      	bne.n	995d6 <Cl_Mac_Create_ConsoleEvent+0x92>
   995ce:	482a      	ldr	r0, [pc, #168]	; (99678 <Cl_Mac_Create_ConsoleEvent+0x134>)
   995d0:	4b2e      	ldr	r3, [pc, #184]	; (9968c <Cl_Mac_Create_ConsoleEvent+0x148>)
   995d2:	4798      	blx	r3
   995d4:	e046      	b.n	99664 <Cl_Mac_Create_ConsoleEvent+0x120>
   995d6:	4b28      	ldr	r3, [pc, #160]	; (99678 <Cl_Mac_Create_ConsoleEvent+0x134>)
   995d8:	2201      	movs	r2, #1
   995da:	761a      	strb	r2, [r3, #24]
   995dc:	4b25      	ldr	r3, [pc, #148]	; (99674 <Cl_Mac_Create_ConsoleEvent+0x130>)
   995de:	2200      	movs	r2, #0
   995e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   995e4:	4b24      	ldr	r3, [pc, #144]	; (99678 <Cl_Mac_Create_ConsoleEvent+0x134>)
   995e6:	789b      	ldrb	r3, [r3, #2]
   995e8:	1cba      	adds	r2, r7, #2
   995ea:	4611      	mov	r1, r2
   995ec:	4618      	mov	r0, r3
   995ee:	4b28      	ldr	r3, [pc, #160]	; (99690 <Cl_Mac_Create_ConsoleEvent+0x14c>)
   995f0:	4798      	blx	r3
   995f2:	78ba      	ldrb	r2, [r7, #2]
   995f4:	4b27      	ldr	r3, [pc, #156]	; (99694 <Cl_Mac_Create_ConsoleEvent+0x150>)
   995f6:	701a      	strb	r2, [r3, #0]
   995f8:	4b27      	ldr	r3, [pc, #156]	; (99698 <Cl_Mac_Create_ConsoleEvent+0x154>)
   995fa:	2201      	movs	r2, #1
   995fc:	701a      	strb	r2, [r3, #0]
   995fe:	4b27      	ldr	r3, [pc, #156]	; (9969c <Cl_Mac_Create_ConsoleEvent+0x158>)
   99600:	781b      	ldrb	r3, [r3, #0]
   99602:	2b0a      	cmp	r3, #10
   99604:	d82e      	bhi.n	99664 <Cl_Mac_Create_ConsoleEvent+0x120>
   99606:	4b25      	ldr	r3, [pc, #148]	; (9969c <Cl_Mac_Create_ConsoleEvent+0x158>)
   99608:	781b      	ldrb	r3, [r3, #0]
   9960a:	4619      	mov	r1, r3
   9960c:	78ba      	ldrb	r2, [r7, #2]
   9960e:	4b23      	ldr	r3, [pc, #140]	; (9969c <Cl_Mac_Create_ConsoleEvent+0x158>)
   99610:	440b      	add	r3, r1
   99612:	709a      	strb	r2, [r3, #2]
   99614:	4b21      	ldr	r3, [pc, #132]	; (9969c <Cl_Mac_Create_ConsoleEvent+0x158>)
   99616:	2201      	movs	r2, #1
   99618:	705a      	strb	r2, [r3, #1]
   9961a:	4b20      	ldr	r3, [pc, #128]	; (9969c <Cl_Mac_Create_ConsoleEvent+0x158>)
   9961c:	781b      	ldrb	r3, [r3, #0]
   9961e:	3301      	adds	r3, #1
   99620:	b2da      	uxtb	r2, r3
   99622:	4b1e      	ldr	r3, [pc, #120]	; (9969c <Cl_Mac_Create_ConsoleEvent+0x158>)
   99624:	701a      	strb	r2, [r3, #0]
   99626:	4b15      	ldr	r3, [pc, #84]	; (9967c <Cl_Mac_Create_ConsoleEvent+0x138>)
   99628:	607b      	str	r3, [r7, #4]
   9962a:	4b1c      	ldr	r3, [pc, #112]	; (9969c <Cl_Mac_Create_ConsoleEvent+0x158>)
   9962c:	781b      	ldrb	r3, [r3, #0]
   9962e:	3301      	adds	r3, #1
   99630:	00db      	lsls	r3, r3, #3
   99632:	4a1a      	ldr	r2, [pc, #104]	; (9969c <Cl_Mac_Create_ConsoleEvent+0x158>)
   99634:	4413      	add	r3, r2
   99636:	3304      	adds	r3, #4
   99638:	60bb      	str	r3, [r7, #8]
   9963a:	2300      	movs	r3, #0
   9963c:	73fb      	strb	r3, [r7, #15]
   9963e:	e00c      	b.n	9965a <Cl_Mac_Create_ConsoleEvent+0x116>
   99640:	687b      	ldr	r3, [r7, #4]
   99642:	781a      	ldrb	r2, [r3, #0]
   99644:	68bb      	ldr	r3, [r7, #8]
   99646:	701a      	strb	r2, [r3, #0]
   99648:	68bb      	ldr	r3, [r7, #8]
   9964a:	3301      	adds	r3, #1
   9964c:	60bb      	str	r3, [r7, #8]
   9964e:	687b      	ldr	r3, [r7, #4]
   99650:	3301      	adds	r3, #1
   99652:	607b      	str	r3, [r7, #4]
   99654:	7bfb      	ldrb	r3, [r7, #15]
   99656:	3301      	adds	r3, #1
   99658:	73fb      	strb	r3, [r7, #15]
   9965a:	4b07      	ldr	r3, [pc, #28]	; (99678 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9965c:	78db      	ldrb	r3, [r3, #3]
   9965e:	7bfa      	ldrb	r2, [r7, #15]
   99660:	429a      	cmp	r2, r3
   99662:	d3ed      	bcc.n	99640 <Cl_Mac_Create_ConsoleEvent+0xfc>
   99664:	2300      	movs	r3, #0
   99666:	4618      	mov	r0, r3
   99668:	3710      	adds	r7, #16
   9966a:	46bd      	mov	sp, r7
   9966c:	bd80      	pop	{r7, pc}
   9966e:	bf00      	nop
   99670:	200727b4 	.word	0x200727b4
   99674:	20072df8 	.word	0x20072df8
   99678:	20072f98 	.word	0x20072f98
   9967c:	20072dfa 	.word	0x20072dfa
   99680:	20072f9c 	.word	0x20072f9c
   99684:	000996a1 	.word	0x000996a1
   99688:	200727ae 	.word	0x200727ae
   9968c:	0008ef11 	.word	0x0008ef11
   99690:	00099879 	.word	0x00099879
   99694:	20072172 	.word	0x20072172
   99698:	20072174 	.word	0x20072174
   9969c:	20072fd4 	.word	0x20072fd4

000996a0 <Cl_Cosnsole_MsgAcknlowledge>:
   996a0:	b580      	push	{r7, lr}
   996a2:	b082      	sub	sp, #8
   996a4:	af00      	add	r7, sp, #0
   996a6:	2001      	movs	r0, #1
   996a8:	4b19      	ldr	r3, [pc, #100]	; (99710 <Cl_Cosnsole_MsgAcknlowledge+0x70>)
   996aa:	4798      	blx	r3
   996ac:	4b19      	ldr	r3, [pc, #100]	; (99714 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   996ae:	22cc      	movs	r2, #204	; 0xcc
   996b0:	701a      	strb	r2, [r3, #0]
   996b2:	4b18      	ldr	r3, [pc, #96]	; (99714 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   996b4:	22dd      	movs	r2, #221	; 0xdd
   996b6:	705a      	strb	r2, [r3, #1]
   996b8:	4b16      	ldr	r3, [pc, #88]	; (99714 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   996ba:	2204      	movs	r2, #4
   996bc:	709a      	strb	r2, [r3, #2]
   996be:	4b15      	ldr	r3, [pc, #84]	; (99714 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   996c0:	2201      	movs	r2, #1
   996c2:	70da      	strb	r2, [r3, #3]
   996c4:	4b14      	ldr	r3, [pc, #80]	; (99718 <Cl_Cosnsole_MsgAcknlowledge+0x78>)
   996c6:	789a      	ldrb	r2, [r3, #2]
   996c8:	4b12      	ldr	r3, [pc, #72]	; (99714 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   996ca:	711a      	strb	r2, [r3, #4]
   996cc:	4b11      	ldr	r3, [pc, #68]	; (99714 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   996ce:	22ee      	movs	r2, #238	; 0xee
   996d0:	715a      	strb	r2, [r3, #5]
   996d2:	4b10      	ldr	r3, [pc, #64]	; (99714 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   996d4:	22bb      	movs	r2, #187	; 0xbb
   996d6:	719a      	strb	r2, [r3, #6]
   996d8:	2300      	movs	r3, #0
   996da:	71fb      	strb	r3, [r7, #7]
   996dc:	e00f      	b.n	996fe <Cl_Cosnsole_MsgAcknlowledge+0x5e>
   996de:	4b0f      	ldr	r3, [pc, #60]	; (9971c <Cl_Cosnsole_MsgAcknlowledge+0x7c>)
   996e0:	2201      	movs	r2, #1
   996e2:	701a      	strb	r2, [r3, #0]
   996e4:	79fb      	ldrb	r3, [r7, #7]
   996e6:	4a0b      	ldr	r2, [pc, #44]	; (99714 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   996e8:	5cd3      	ldrb	r3, [r2, r3]
   996ea:	4619      	mov	r1, r3
   996ec:	480c      	ldr	r0, [pc, #48]	; (99720 <Cl_Cosnsole_MsgAcknlowledge+0x80>)
   996ee:	4b0d      	ldr	r3, [pc, #52]	; (99724 <Cl_Cosnsole_MsgAcknlowledge+0x84>)
   996f0:	4798      	blx	r3
   996f2:	4603      	mov	r3, r0
   996f4:	2b00      	cmp	r3, #0
   996f6:	d102      	bne.n	996fe <Cl_Cosnsole_MsgAcknlowledge+0x5e>
   996f8:	79fb      	ldrb	r3, [r7, #7]
   996fa:	3301      	adds	r3, #1
   996fc:	71fb      	strb	r3, [r7, #7]
   996fe:	79fb      	ldrb	r3, [r7, #7]
   99700:	2b06      	cmp	r3, #6
   99702:	d9ec      	bls.n	996de <Cl_Cosnsole_MsgAcknlowledge+0x3e>
   99704:	2300      	movs	r3, #0
   99706:	4618      	mov	r0, r3
   99708:	3708      	adds	r7, #8
   9970a:	46bd      	mov	sp, r7
   9970c:	bd80      	pop	{r7, pc}
   9970e:	bf00      	nop
   99710:	00091e2d 	.word	0x00091e2d
   99714:	20072e9c 	.word	0x20072e9c
   99718:	20072f98 	.word	0x20072f98
   9971c:	200727b1 	.word	0x200727b1
   99720:	400e0800 	.word	0x400e0800
   99724:	00098cfd 	.word	0x00098cfd

00099728 <Cl_SendDatatoconsole>:
   99728:	b580      	push	{r7, lr}
   9972a:	b086      	sub	sp, #24
   9972c:	af00      	add	r7, sp, #0
   9972e:	4603      	mov	r3, r0
   99730:	6039      	str	r1, [r7, #0]
   99732:	71fb      	strb	r3, [r7, #7]
   99734:	4613      	mov	r3, r2
   99736:	71bb      	strb	r3, [r7, #6]
   99738:	2300      	movs	r3, #0
   9973a:	75fb      	strb	r3, [r7, #23]
   9973c:	2304      	movs	r3, #4
   9973e:	75bb      	strb	r3, [r7, #22]
   99740:	2300      	movs	r3, #0
   99742:	757b      	strb	r3, [r7, #21]
   99744:	2300      	movs	r3, #0
   99746:	613b      	str	r3, [r7, #16]
   99748:	2300      	movs	r3, #0
   9974a:	60fb      	str	r3, [r7, #12]
   9974c:	4a40      	ldr	r2, [pc, #256]	; (99850 <Cl_SendDatatoconsole+0x128>)
   9974e:	79fb      	ldrb	r3, [r7, #7]
   99750:	7013      	strb	r3, [r2, #0]
   99752:	683b      	ldr	r3, [r7, #0]
   99754:	b2da      	uxtb	r2, r3
   99756:	4b3f      	ldr	r3, [pc, #252]	; (99854 <Cl_SendDatatoconsole+0x12c>)
   99758:	701a      	strb	r2, [r3, #0]
   9975a:	4a3f      	ldr	r2, [pc, #252]	; (99858 <Cl_SendDatatoconsole+0x130>)
   9975c:	79bb      	ldrb	r3, [r7, #6]
   9975e:	7013      	strb	r3, [r2, #0]
   99760:	79fb      	ldrb	r3, [r7, #7]
   99762:	2b36      	cmp	r3, #54	; 0x36
   99764:	d102      	bne.n	9976c <Cl_SendDatatoconsole+0x44>
   99766:	4b3d      	ldr	r3, [pc, #244]	; (9985c <Cl_SendDatatoconsole+0x134>)
   99768:	2201      	movs	r2, #1
   9976a:	701a      	strb	r2, [r3, #0]
   9976c:	79bb      	ldrb	r3, [r7, #6]
   9976e:	2b00      	cmp	r3, #0
   99770:	d004      	beq.n	9977c <Cl_SendDatatoconsole+0x54>
   99772:	683b      	ldr	r3, [r7, #0]
   99774:	2b00      	cmp	r3, #0
   99776:	d001      	beq.n	9977c <Cl_SendDatatoconsole+0x54>
   99778:	683b      	ldr	r3, [r7, #0]
   9977a:	613b      	str	r3, [r7, #16]
   9977c:	79bb      	ldrb	r3, [r7, #6]
   9977e:	3306      	adds	r3, #6
   99780:	757b      	strb	r3, [r7, #21]
   99782:	4b37      	ldr	r3, [pc, #220]	; (99860 <Cl_SendDatatoconsole+0x138>)
   99784:	60fb      	str	r3, [r7, #12]
   99786:	4b37      	ldr	r3, [pc, #220]	; (99864 <Cl_SendDatatoconsole+0x13c>)
   99788:	22cc      	movs	r2, #204	; 0xcc
   9978a:	701a      	strb	r2, [r3, #0]
   9978c:	4b35      	ldr	r3, [pc, #212]	; (99864 <Cl_SendDatatoconsole+0x13c>)
   9978e:	22dd      	movs	r2, #221	; 0xdd
   99790:	705a      	strb	r2, [r3, #1]
   99792:	4a34      	ldr	r2, [pc, #208]	; (99864 <Cl_SendDatatoconsole+0x13c>)
   99794:	79fb      	ldrb	r3, [r7, #7]
   99796:	7093      	strb	r3, [r2, #2]
   99798:	4a32      	ldr	r2, [pc, #200]	; (99864 <Cl_SendDatatoconsole+0x13c>)
   9979a:	79bb      	ldrb	r3, [r7, #6]
   9979c:	70d3      	strb	r3, [r2, #3]
   9979e:	2300      	movs	r3, #0
   997a0:	75fb      	strb	r3, [r7, #23]
   997a2:	e00c      	b.n	997be <Cl_SendDatatoconsole+0x96>
   997a4:	7dbb      	ldrb	r3, [r7, #22]
   997a6:	7dfa      	ldrb	r2, [r7, #23]
   997a8:	6839      	ldr	r1, [r7, #0]
   997aa:	440a      	add	r2, r1
   997ac:	7811      	ldrb	r1, [r2, #0]
   997ae:	4a2d      	ldr	r2, [pc, #180]	; (99864 <Cl_SendDatatoconsole+0x13c>)
   997b0:	54d1      	strb	r1, [r2, r3]
   997b2:	7dbb      	ldrb	r3, [r7, #22]
   997b4:	3301      	adds	r3, #1
   997b6:	75bb      	strb	r3, [r7, #22]
   997b8:	7dfb      	ldrb	r3, [r7, #23]
   997ba:	3301      	adds	r3, #1
   997bc:	75fb      	strb	r3, [r7, #23]
   997be:	7dfa      	ldrb	r2, [r7, #23]
   997c0:	79bb      	ldrb	r3, [r7, #6]
   997c2:	429a      	cmp	r2, r3
   997c4:	d3ee      	bcc.n	997a4 <Cl_SendDatatoconsole+0x7c>
   997c6:	7dbb      	ldrb	r3, [r7, #22]
   997c8:	1c5a      	adds	r2, r3, #1
   997ca:	75ba      	strb	r2, [r7, #22]
   997cc:	461a      	mov	r2, r3
   997ce:	4b25      	ldr	r3, [pc, #148]	; (99864 <Cl_SendDatatoconsole+0x13c>)
   997d0:	21ee      	movs	r1, #238	; 0xee
   997d2:	5499      	strb	r1, [r3, r2]
   997d4:	7dbb      	ldrb	r3, [r7, #22]
   997d6:	1c5a      	adds	r2, r3, #1
   997d8:	75ba      	strb	r2, [r7, #22]
   997da:	461a      	mov	r2, r3
   997dc:	4b21      	ldr	r3, [pc, #132]	; (99864 <Cl_SendDatatoconsole+0x13c>)
   997de:	21bb      	movs	r1, #187	; 0xbb
   997e0:	5499      	strb	r1, [r3, r2]
   997e2:	4b1e      	ldr	r3, [pc, #120]	; (9985c <Cl_SendDatatoconsole+0x134>)
   997e4:	781b      	ldrb	r3, [r3, #0]
   997e6:	2b00      	cmp	r3, #0
   997e8:	d013      	beq.n	99812 <Cl_SendDatatoconsole+0xea>
   997ea:	4b1f      	ldr	r3, [pc, #124]	; (99868 <Cl_SendDatatoconsole+0x140>)
   997ec:	22aa      	movs	r2, #170	; 0xaa
   997ee:	701a      	strb	r2, [r3, #0]
   997f0:	2300      	movs	r3, #0
   997f2:	75fb      	strb	r3, [r7, #23]
   997f4:	e009      	b.n	9980a <Cl_SendDatatoconsole+0xe2>
   997f6:	7dfb      	ldrb	r3, [r7, #23]
   997f8:	3301      	adds	r3, #1
   997fa:	7dfa      	ldrb	r2, [r7, #23]
   997fc:	4919      	ldr	r1, [pc, #100]	; (99864 <Cl_SendDatatoconsole+0x13c>)
   997fe:	5c89      	ldrb	r1, [r1, r2]
   99800:	4a19      	ldr	r2, [pc, #100]	; (99868 <Cl_SendDatatoconsole+0x140>)
   99802:	54d1      	strb	r1, [r2, r3]
   99804:	7dfb      	ldrb	r3, [r7, #23]
   99806:	3301      	adds	r3, #1
   99808:	75fb      	strb	r3, [r7, #23]
   9980a:	7dfa      	ldrb	r2, [r7, #23]
   9980c:	7d7b      	ldrb	r3, [r7, #21]
   9980e:	429a      	cmp	r2, r3
   99810:	d3f1      	bcc.n	997f6 <Cl_SendDatatoconsole+0xce>
   99812:	2300      	movs	r3, #0
   99814:	75fb      	strb	r3, [r7, #23]
   99816:	e00e      	b.n	99836 <Cl_SendDatatoconsole+0x10e>
   99818:	4b14      	ldr	r3, [pc, #80]	; (9986c <Cl_SendDatatoconsole+0x144>)
   9981a:	2201      	movs	r2, #1
   9981c:	701a      	strb	r2, [r3, #0]
   9981e:	7dfb      	ldrb	r3, [r7, #23]
   99820:	4a10      	ldr	r2, [pc, #64]	; (99864 <Cl_SendDatatoconsole+0x13c>)
   99822:	5cd3      	ldrb	r3, [r2, r3]
   99824:	4618      	mov	r0, r3
   99826:	4b12      	ldr	r3, [pc, #72]	; (99870 <Cl_SendDatatoconsole+0x148>)
   99828:	4798      	blx	r3
   9982a:	4603      	mov	r3, r0
   9982c:	2b00      	cmp	r3, #0
   9982e:	d102      	bne.n	99836 <Cl_SendDatatoconsole+0x10e>
   99830:	7dfb      	ldrb	r3, [r7, #23]
   99832:	3301      	adds	r3, #1
   99834:	75fb      	strb	r3, [r7, #23]
   99836:	7dfa      	ldrb	r2, [r7, #23]
   99838:	7d7b      	ldrb	r3, [r7, #21]
   9983a:	429a      	cmp	r2, r3
   9983c:	d3ec      	bcc.n	99818 <Cl_SendDatatoconsole+0xf0>
   9983e:	4a0d      	ldr	r2, [pc, #52]	; (99874 <Cl_SendDatatoconsole+0x14c>)
   99840:	79fb      	ldrb	r3, [r7, #7]
   99842:	7013      	strb	r3, [r2, #0]
   99844:	2300      	movs	r3, #0
   99846:	4618      	mov	r0, r3
   99848:	3718      	adds	r7, #24
   9984a:	46bd      	mov	sp, r7
   9984c:	bd80      	pop	{r7, pc}
   9984e:	bf00      	nop
   99850:	20073359 	.word	0x20073359
   99854:	2007335a 	.word	0x2007335a
   99858:	20073358 	.word	0x20073358
   9985c:	200727ac 	.word	0x200727ac
   99860:	20072ea0 	.word	0x20072ea0
   99864:	20072e9c 	.word	0x20072e9c
   99868:	20073088 	.word	0x20073088
   9986c:	200727b1 	.word	0x200727b1
   99870:	00097ce5 	.word	0x00097ce5
   99874:	2007335b 	.word	0x2007335b

00099878 <Cl_Console_ConvertConsoleEvent_toMacEvent>:
   99878:	b480      	push	{r7}
   9987a:	b083      	sub	sp, #12
   9987c:	af00      	add	r7, sp, #0
   9987e:	4603      	mov	r3, r0
   99880:	6039      	str	r1, [r7, #0]
   99882:	71fb      	strb	r3, [r7, #7]
   99884:	79fb      	ldrb	r3, [r7, #7]
   99886:	3b03      	subs	r3, #3
   99888:	2b32      	cmp	r3, #50	; 0x32
   9988a:	f200 811d 	bhi.w	99ac8 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x250>
   9988e:	a201      	add	r2, pc, #4	; (adr r2, 99894 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1c>)
   99890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99894:	00099961 	.word	0x00099961
   99898:	00099971 	.word	0x00099971
   9989c:	00099979 	.word	0x00099979
   998a0:	00099ac9 	.word	0x00099ac9
   998a4:	00099a41 	.word	0x00099a41
   998a8:	00099a01 	.word	0x00099a01
   998ac:	000999b1 	.word	0x000999b1
   998b0:	000999b9 	.word	0x000999b9
   998b4:	00099991 	.word	0x00099991
   998b8:	00099999 	.word	0x00099999
   998bc:	000999a1 	.word	0x000999a1
   998c0:	000999c1 	.word	0x000999c1
   998c4:	000999d1 	.word	0x000999d1
   998c8:	000999e1 	.word	0x000999e1
   998cc:	00099a11 	.word	0x00099a11
   998d0:	00099a19 	.word	0x00099a19
   998d4:	00099a21 	.word	0x00099a21
   998d8:	00099a29 	.word	0x00099a29
   998dc:	00099969 	.word	0x00099969
   998e0:	00099ac9 	.word	0x00099ac9
   998e4:	00099ac9 	.word	0x00099ac9
   998e8:	000999a9 	.word	0x000999a9
   998ec:	000999c9 	.word	0x000999c9
   998f0:	00099a49 	.word	0x00099a49
   998f4:	00099a51 	.word	0x00099a51
   998f8:	00099a59 	.word	0x00099a59
   998fc:	00099a61 	.word	0x00099a61
   99900:	00099a09 	.word	0x00099a09
   99904:	00099a69 	.word	0x00099a69
   99908:	000999d9 	.word	0x000999d9
   9990c:	00099a71 	.word	0x00099a71
   99910:	00099a79 	.word	0x00099a79
   99914:	00099a81 	.word	0x00099a81
   99918:	00099a89 	.word	0x00099a89
   9991c:	00099a99 	.word	0x00099a99
   99920:	00099aa1 	.word	0x00099aa1
   99924:	00099a31 	.word	0x00099a31
   99928:	00099a39 	.word	0x00099a39
   9992c:	00099aa9 	.word	0x00099aa9
   99930:	00099ab1 	.word	0x00099ab1
   99934:	00099a91 	.word	0x00099a91
   99938:	00099981 	.word	0x00099981
   9993c:	00099ac9 	.word	0x00099ac9
   99940:	00099ac9 	.word	0x00099ac9
   99944:	00099989 	.word	0x00099989
   99948:	00099ac9 	.word	0x00099ac9
   9994c:	000999e9 	.word	0x000999e9
   99950:	000999f1 	.word	0x000999f1
   99954:	000999f9 	.word	0x000999f9
   99958:	00099ab9 	.word	0x00099ab9
   9995c:	00099ac1 	.word	0x00099ac1
   99960:	683b      	ldr	r3, [r7, #0]
   99962:	2201      	movs	r2, #1
   99964:	701a      	strb	r2, [r3, #0]
   99966:	e0b0      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99968:	683b      	ldr	r3, [r7, #0]
   9996a:	2229      	movs	r2, #41	; 0x29
   9996c:	701a      	strb	r2, [r3, #0]
   9996e:	e0ac      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99970:	683b      	ldr	r3, [r7, #0]
   99972:	2202      	movs	r2, #2
   99974:	701a      	strb	r2, [r3, #0]
   99976:	e0a8      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99978:	683b      	ldr	r3, [r7, #0]
   9997a:	2207      	movs	r2, #7
   9997c:	701a      	strb	r2, [r3, #0]
   9997e:	e0a4      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99980:	683b      	ldr	r3, [r7, #0]
   99982:	223f      	movs	r2, #63	; 0x3f
   99984:	701a      	strb	r2, [r3, #0]
   99986:	e0a0      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99988:	683b      	ldr	r3, [r7, #0]
   9998a:	2240      	movs	r2, #64	; 0x40
   9998c:	701a      	strb	r2, [r3, #0]
   9998e:	e09c      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99990:	683b      	ldr	r3, [r7, #0]
   99992:	220a      	movs	r2, #10
   99994:	701a      	strb	r2, [r3, #0]
   99996:	e098      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99998:	683b      	ldr	r3, [r7, #0]
   9999a:	220b      	movs	r2, #11
   9999c:	701a      	strb	r2, [r3, #0]
   9999e:	e094      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   999a0:	683b      	ldr	r3, [r7, #0]
   999a2:	220c      	movs	r2, #12
   999a4:	701a      	strb	r2, [r3, #0]
   999a6:	e090      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   999a8:	683b      	ldr	r3, [r7, #0]
   999aa:	2211      	movs	r2, #17
   999ac:	701a      	strb	r2, [r3, #0]
   999ae:	e08c      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   999b0:	683b      	ldr	r3, [r7, #0]
   999b2:	220d      	movs	r2, #13
   999b4:	701a      	strb	r2, [r3, #0]
   999b6:	e088      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   999b8:	683b      	ldr	r3, [r7, #0]
   999ba:	220e      	movs	r2, #14
   999bc:	701a      	strb	r2, [r3, #0]
   999be:	e084      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   999c0:	683b      	ldr	r3, [r7, #0]
   999c2:	220f      	movs	r2, #15
   999c4:	701a      	strb	r2, [r3, #0]
   999c6:	e080      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   999c8:	683b      	ldr	r3, [r7, #0]
   999ca:	2210      	movs	r2, #16
   999cc:	701a      	strb	r2, [r3, #0]
   999ce:	e07c      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   999d0:	683b      	ldr	r3, [r7, #0]
   999d2:	2213      	movs	r2, #19
   999d4:	701a      	strb	r2, [r3, #0]
   999d6:	e078      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   999d8:	683b      	ldr	r3, [r7, #0]
   999da:	2214      	movs	r2, #20
   999dc:	701a      	strb	r2, [r3, #0]
   999de:	e074      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   999e0:	683b      	ldr	r3, [r7, #0]
   999e2:	2215      	movs	r2, #21
   999e4:	701a      	strb	r2, [r3, #0]
   999e6:	e070      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   999e8:	683b      	ldr	r3, [r7, #0]
   999ea:	2226      	movs	r2, #38	; 0x26
   999ec:	701a      	strb	r2, [r3, #0]
   999ee:	e06c      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   999f0:	683b      	ldr	r3, [r7, #0]
   999f2:	2227      	movs	r2, #39	; 0x27
   999f4:	701a      	strb	r2, [r3, #0]
   999f6:	e068      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   999f8:	683b      	ldr	r3, [r7, #0]
   999fa:	2228      	movs	r2, #40	; 0x28
   999fc:	701a      	strb	r2, [r3, #0]
   999fe:	e064      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a00:	683b      	ldr	r3, [r7, #0]
   99a02:	2209      	movs	r2, #9
   99a04:	701a      	strb	r2, [r3, #0]
   99a06:	e060      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a08:	683b      	ldr	r3, [r7, #0]
   99a0a:	2212      	movs	r2, #18
   99a0c:	701a      	strb	r2, [r3, #0]
   99a0e:	e05c      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a10:	683b      	ldr	r3, [r7, #0]
   99a12:	2216      	movs	r2, #22
   99a14:	701a      	strb	r2, [r3, #0]
   99a16:	e058      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a18:	683b      	ldr	r3, [r7, #0]
   99a1a:	2217      	movs	r2, #23
   99a1c:	701a      	strb	r2, [r3, #0]
   99a1e:	e054      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a20:	683b      	ldr	r3, [r7, #0]
   99a22:	2218      	movs	r2, #24
   99a24:	701a      	strb	r2, [r3, #0]
   99a26:	e050      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a28:	683b      	ldr	r3, [r7, #0]
   99a2a:	2219      	movs	r2, #25
   99a2c:	701a      	strb	r2, [r3, #0]
   99a2e:	e04c      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a30:	683b      	ldr	r3, [r7, #0]
   99a32:	221a      	movs	r2, #26
   99a34:	701a      	strb	r2, [r3, #0]
   99a36:	e048      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a38:	683b      	ldr	r3, [r7, #0]
   99a3a:	221b      	movs	r2, #27
   99a3c:	701a      	strb	r2, [r3, #0]
   99a3e:	e044      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a40:	683b      	ldr	r3, [r7, #0]
   99a42:	2208      	movs	r2, #8
   99a44:	701a      	strb	r2, [r3, #0]
   99a46:	e040      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a48:	683b      	ldr	r3, [r7, #0]
   99a4a:	2203      	movs	r2, #3
   99a4c:	701a      	strb	r2, [r3, #0]
   99a4e:	e03c      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a50:	683b      	ldr	r3, [r7, #0]
   99a52:	2204      	movs	r2, #4
   99a54:	701a      	strb	r2, [r3, #0]
   99a56:	e038      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a58:	683b      	ldr	r3, [r7, #0]
   99a5a:	2205      	movs	r2, #5
   99a5c:	701a      	strb	r2, [r3, #0]
   99a5e:	e034      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a60:	683b      	ldr	r3, [r7, #0]
   99a62:	2206      	movs	r2, #6
   99a64:	701a      	strb	r2, [r3, #0]
   99a66:	e030      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a68:	683b      	ldr	r3, [r7, #0]
   99a6a:	221c      	movs	r2, #28
   99a6c:	701a      	strb	r2, [r3, #0]
   99a6e:	e02c      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a70:	683b      	ldr	r3, [r7, #0]
   99a72:	221d      	movs	r2, #29
   99a74:	701a      	strb	r2, [r3, #0]
   99a76:	e028      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a78:	683b      	ldr	r3, [r7, #0]
   99a7a:	221e      	movs	r2, #30
   99a7c:	701a      	strb	r2, [r3, #0]
   99a7e:	e024      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a80:	683b      	ldr	r3, [r7, #0]
   99a82:	221f      	movs	r2, #31
   99a84:	701a      	strb	r2, [r3, #0]
   99a86:	e020      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a88:	683b      	ldr	r3, [r7, #0]
   99a8a:	2220      	movs	r2, #32
   99a8c:	701a      	strb	r2, [r3, #0]
   99a8e:	e01c      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a90:	683b      	ldr	r3, [r7, #0]
   99a92:	2221      	movs	r2, #33	; 0x21
   99a94:	701a      	strb	r2, [r3, #0]
   99a96:	e018      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99a98:	683b      	ldr	r3, [r7, #0]
   99a9a:	2222      	movs	r2, #34	; 0x22
   99a9c:	701a      	strb	r2, [r3, #0]
   99a9e:	e014      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99aa0:	683b      	ldr	r3, [r7, #0]
   99aa2:	2223      	movs	r2, #35	; 0x23
   99aa4:	701a      	strb	r2, [r3, #0]
   99aa6:	e010      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99aa8:	683b      	ldr	r3, [r7, #0]
   99aaa:	2224      	movs	r2, #36	; 0x24
   99aac:	701a      	strb	r2, [r3, #0]
   99aae:	e00c      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99ab0:	683b      	ldr	r3, [r7, #0]
   99ab2:	2225      	movs	r2, #37	; 0x25
   99ab4:	701a      	strb	r2, [r3, #0]
   99ab6:	e008      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99ab8:	683b      	ldr	r3, [r7, #0]
   99aba:	2258      	movs	r2, #88	; 0x58
   99abc:	701a      	strb	r2, [r3, #0]
   99abe:	e004      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99ac0:	683b      	ldr	r3, [r7, #0]
   99ac2:	2259      	movs	r2, #89	; 0x59
   99ac4:	701a      	strb	r2, [r3, #0]
   99ac6:	e000      	b.n	99aca <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
   99ac8:	bf00      	nop
   99aca:	2300      	movs	r3, #0
   99acc:	4618      	mov	r0, r3
   99ace:	370c      	adds	r7, #12
   99ad0:	46bd      	mov	sp, r7
   99ad2:	bc80      	pop	{r7}
   99ad4:	4770      	bx	lr
   99ad6:	bf00      	nop

00099ad8 <Cl_Console_Console_Sync>:
   99ad8:	b580      	push	{r7, lr}
   99ada:	b082      	sub	sp, #8
   99adc:	af00      	add	r7, sp, #0
   99ade:	2304      	movs	r3, #4
   99ae0:	71fb      	strb	r3, [r7, #7]
   99ae2:	2300      	movs	r3, #0
   99ae4:	71bb      	strb	r3, [r7, #6]
   99ae6:	2300      	movs	r3, #0
   99ae8:	717b      	strb	r3, [r7, #5]
   99aea:	e07f      	b.n	99bec <Cl_Console_Console_Sync+0x114>
   99aec:	79bb      	ldrb	r3, [r7, #6]
   99aee:	2b03      	cmp	r3, #3
   99af0:	d87b      	bhi.n	99bea <Cl_Console_Console_Sync+0x112>
   99af2:	a201      	add	r2, pc, #4	; (adr r2, 99af8 <Cl_Console_Console_Sync+0x20>)
   99af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99af8:	00099b09 	.word	0x00099b09
   99afc:	00099b43 	.word	0x00099b43
   99b00:	00099b5f 	.word	0x00099b5f
   99b04:	00099bdf 	.word	0x00099bdf
   99b08:	4b3d      	ldr	r3, [pc, #244]	; (99c00 <Cl_Console_Console_Sync+0x128>)
   99b0a:	4798      	blx	r3
   99b0c:	4603      	mov	r3, r0
   99b0e:	71fb      	strb	r3, [r7, #7]
   99b10:	79fb      	ldrb	r3, [r7, #7]
   99b12:	2b00      	cmp	r3, #0
   99b14:	d112      	bne.n	99b3c <Cl_Console_Console_Sync+0x64>
   99b16:	4b3b      	ldr	r3, [pc, #236]	; (99c04 <Cl_Console_Console_Sync+0x12c>)
   99b18:	781a      	ldrb	r2, [r3, #0]
   99b1a:	4b3b      	ldr	r3, [pc, #236]	; (99c08 <Cl_Console_Console_Sync+0x130>)
   99b1c:	709a      	strb	r2, [r3, #2]
   99b1e:	4b3a      	ldr	r3, [pc, #232]	; (99c08 <Cl_Console_Console_Sync+0x130>)
   99b20:	789b      	ldrb	r3, [r3, #2]
   99b22:	2b03      	cmp	r3, #3
   99b24:	d10a      	bne.n	99b3c <Cl_Console_Console_Sync+0x64>
   99b26:	4b39      	ldr	r3, [pc, #228]	; (99c0c <Cl_Console_Console_Sync+0x134>)
   99b28:	4798      	blx	r3
   99b2a:	4b37      	ldr	r3, [pc, #220]	; (99c08 <Cl_Console_Console_Sync+0x130>)
   99b2c:	2201      	movs	r2, #1
   99b2e:	761a      	strb	r2, [r3, #24]
   99b30:	4b34      	ldr	r3, [pc, #208]	; (99c04 <Cl_Console_Console_Sync+0x12c>)
   99b32:	2200      	movs	r2, #0
   99b34:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   99b38:	2301      	movs	r3, #1
   99b3a:	71bb      	strb	r3, [r7, #6]
   99b3c:	2301      	movs	r3, #1
   99b3e:	71fb      	strb	r3, [r7, #7]
   99b40:	e054      	b.n	99bec <Cl_Console_Console_Sync+0x114>
   99b42:	200a      	movs	r0, #10
   99b44:	4b32      	ldr	r3, [pc, #200]	; (99c10 <Cl_Console_Console_Sync+0x138>)
   99b46:	4798      	blx	r3
   99b48:	1d7b      	adds	r3, r7, #5
   99b4a:	2200      	movs	r2, #0
   99b4c:	4619      	mov	r1, r3
   99b4e:	2003      	movs	r0, #3
   99b50:	4b30      	ldr	r3, [pc, #192]	; (99c14 <Cl_Console_Console_Sync+0x13c>)
   99b52:	4798      	blx	r3
   99b54:	2302      	movs	r3, #2
   99b56:	71bb      	strb	r3, [r7, #6]
   99b58:	2301      	movs	r3, #1
   99b5a:	71fb      	strb	r3, [r7, #7]
   99b5c:	e046      	b.n	99bec <Cl_Console_Console_Sync+0x114>
   99b5e:	4b28      	ldr	r3, [pc, #160]	; (99c00 <Cl_Console_Console_Sync+0x128>)
   99b60:	4798      	blx	r3
   99b62:	4603      	mov	r3, r0
   99b64:	71fb      	strb	r3, [r7, #7]
   99b66:	79fb      	ldrb	r3, [r7, #7]
   99b68:	2b00      	cmp	r3, #0
   99b6a:	d13f      	bne.n	99bec <Cl_Console_Console_Sync+0x114>
   99b6c:	4b25      	ldr	r3, [pc, #148]	; (99c04 <Cl_Console_Console_Sync+0x12c>)
   99b6e:	781a      	ldrb	r2, [r3, #0]
   99b70:	4b25      	ldr	r3, [pc, #148]	; (99c08 <Cl_Console_Console_Sync+0x130>)
   99b72:	709a      	strb	r2, [r3, #2]
   99b74:	4b23      	ldr	r3, [pc, #140]	; (99c04 <Cl_Console_Console_Sync+0x12c>)
   99b76:	785a      	ldrb	r2, [r3, #1]
   99b78:	4b23      	ldr	r3, [pc, #140]	; (99c08 <Cl_Console_Console_Sync+0x130>)
   99b7a:	70da      	strb	r2, [r3, #3]
   99b7c:	4b21      	ldr	r3, [pc, #132]	; (99c04 <Cl_Console_Console_Sync+0x12c>)
   99b7e:	789a      	ldrb	r2, [r3, #2]
   99b80:	4b21      	ldr	r3, [pc, #132]	; (99c08 <Cl_Console_Console_Sync+0x130>)
   99b82:	711a      	strb	r2, [r3, #4]
   99b84:	4b20      	ldr	r3, [pc, #128]	; (99c08 <Cl_Console_Console_Sync+0x130>)
   99b86:	789b      	ldrb	r3, [r3, #2]
   99b88:	2b04      	cmp	r3, #4
   99b8a:	d125      	bne.n	99bd8 <Cl_Console_Console_Sync+0x100>
   99b8c:	4b1e      	ldr	r3, [pc, #120]	; (99c08 <Cl_Console_Console_Sync+0x130>)
   99b8e:	791b      	ldrb	r3, [r3, #4]
   99b90:	2b03      	cmp	r3, #3
   99b92:	d12b      	bne.n	99bec <Cl_Console_Console_Sync+0x114>
   99b94:	2303      	movs	r3, #3
   99b96:	71bb      	strb	r3, [r7, #6]
   99b98:	4b1f      	ldr	r3, [pc, #124]	; (99c18 <Cl_Console_Console_Sync+0x140>)
   99b9a:	781b      	ldrb	r3, [r3, #0]
   99b9c:	2b0a      	cmp	r3, #10
   99b9e:	d80f      	bhi.n	99bc0 <Cl_Console_Console_Sync+0xe8>
   99ba0:	4b1d      	ldr	r3, [pc, #116]	; (99c18 <Cl_Console_Console_Sync+0x140>)
   99ba2:	781b      	ldrb	r3, [r3, #0]
   99ba4:	461a      	mov	r2, r3
   99ba6:	4b1c      	ldr	r3, [pc, #112]	; (99c18 <Cl_Console_Console_Sync+0x140>)
   99ba8:	4413      	add	r3, r2
   99baa:	222a      	movs	r2, #42	; 0x2a
   99bac:	709a      	strb	r2, [r3, #2]
   99bae:	4b1a      	ldr	r3, [pc, #104]	; (99c18 <Cl_Console_Console_Sync+0x140>)
   99bb0:	2201      	movs	r2, #1
   99bb2:	705a      	strb	r2, [r3, #1]
   99bb4:	4b18      	ldr	r3, [pc, #96]	; (99c18 <Cl_Console_Console_Sync+0x140>)
   99bb6:	781b      	ldrb	r3, [r3, #0]
   99bb8:	3301      	adds	r3, #1
   99bba:	b2da      	uxtb	r2, r3
   99bbc:	4b16      	ldr	r3, [pc, #88]	; (99c18 <Cl_Console_Console_Sync+0x140>)
   99bbe:	701a      	strb	r2, [r3, #0]
   99bc0:	4b16      	ldr	r3, [pc, #88]	; (99c1c <Cl_Console_Console_Sync+0x144>)
   99bc2:	2201      	movs	r2, #1
   99bc4:	701a      	strb	r2, [r3, #0]
   99bc6:	4b16      	ldr	r3, [pc, #88]	; (99c20 <Cl_Console_Console_Sync+0x148>)
   99bc8:	2202      	movs	r2, #2
   99bca:	701a      	strb	r2, [r3, #0]
   99bcc:	2300      	movs	r3, #0
   99bce:	71fb      	strb	r3, [r7, #7]
   99bd0:	4b14      	ldr	r3, [pc, #80]	; (99c24 <Cl_Console_Console_Sync+0x14c>)
   99bd2:	2200      	movs	r2, #0
   99bd4:	701a      	strb	r2, [r3, #0]
   99bd6:	e009      	b.n	99bec <Cl_Console_Console_Sync+0x114>
   99bd8:	2301      	movs	r3, #1
   99bda:	71fb      	strb	r3, [r7, #7]
   99bdc:	e006      	b.n	99bec <Cl_Console_Console_Sync+0x114>
   99bde:	4b10      	ldr	r3, [pc, #64]	; (99c20 <Cl_Console_Console_Sync+0x148>)
   99be0:	2202      	movs	r2, #2
   99be2:	701a      	strb	r2, [r3, #0]
   99be4:	2300      	movs	r3, #0
   99be6:	71fb      	strb	r3, [r7, #7]
   99be8:	e000      	b.n	99bec <Cl_Console_Console_Sync+0x114>
   99bea:	bf00      	nop
   99bec:	4b0c      	ldr	r3, [pc, #48]	; (99c20 <Cl_Console_Console_Sync+0x148>)
   99bee:	781b      	ldrb	r3, [r3, #0]
   99bf0:	2b01      	cmp	r3, #1
   99bf2:	f43f af7b 	beq.w	99aec <Cl_Console_Console_Sync+0x14>
   99bf6:	79fb      	ldrb	r3, [r7, #7]
   99bf8:	4618      	mov	r0, r3
   99bfa:	3708      	adds	r7, #8
   99bfc:	46bd      	mov	sp, r7
   99bfe:	bd80      	pop	{r7, pc}
   99c00:	00099c41 	.word	0x00099c41
   99c04:	20072df8 	.word	0x20072df8
   99c08:	20072f98 	.word	0x20072f98
   99c0c:	000996a1 	.word	0x000996a1
   99c10:	00091e2d 	.word	0x00091e2d
   99c14:	00099729 	.word	0x00099729
   99c18:	20072fd4 	.word	0x20072fd4
   99c1c:	200727ac 	.word	0x200727ac
   99c20:	20070a64 	.word	0x20070a64
   99c24:	200727b0 	.word	0x200727b0

00099c28 <Cl_Console_init>:
   99c28:	b480      	push	{r7}
   99c2a:	af00      	add	r7, sp, #0
   99c2c:	4b03      	ldr	r3, [pc, #12]	; (99c3c <Cl_Console_init+0x14>)
   99c2e:	2201      	movs	r2, #1
   99c30:	701a      	strb	r2, [r3, #0]
   99c32:	2300      	movs	r3, #0
   99c34:	4618      	mov	r0, r3
   99c36:	46bd      	mov	sp, r7
   99c38:	bc80      	pop	{r7}
   99c3a:	4770      	bx	lr
   99c3c:	20070a64 	.word	0x20070a64

00099c40 <Cl_Console_SyncGetMessage>:
   99c40:	b580      	push	{r7, lr}
   99c42:	b082      	sub	sp, #8
   99c44:	af00      	add	r7, sp, #0
   99c46:	2301      	movs	r3, #1
   99c48:	71fb      	strb	r3, [r7, #7]
   99c4a:	4b0b      	ldr	r3, [pc, #44]	; (99c78 <Cl_Console_SyncGetMessage+0x38>)
   99c4c:	4798      	blx	r3
   99c4e:	4603      	mov	r3, r0
   99c50:	71fb      	strb	r3, [r7, #7]
   99c52:	79fb      	ldrb	r3, [r7, #7]
   99c54:	2b00      	cmp	r3, #0
   99c56:	d10a      	bne.n	99c6e <Cl_Console_SyncGetMessage+0x2e>
   99c58:	4b08      	ldr	r3, [pc, #32]	; (99c7c <Cl_Console_SyncGetMessage+0x3c>)
   99c5a:	4798      	blx	r3
   99c5c:	4603      	mov	r3, r0
   99c5e:	71fb      	strb	r3, [r7, #7]
   99c60:	79fb      	ldrb	r3, [r7, #7]
   99c62:	2b00      	cmp	r3, #0
   99c64:	d103      	bne.n	99c6e <Cl_Console_SyncGetMessage+0x2e>
   99c66:	4b06      	ldr	r3, [pc, #24]	; (99c80 <Cl_Console_SyncGetMessage+0x40>)
   99c68:	4798      	blx	r3
   99c6a:	4603      	mov	r3, r0
   99c6c:	71fb      	strb	r3, [r7, #7]
   99c6e:	79fb      	ldrb	r3, [r7, #7]
   99c70:	4618      	mov	r0, r3
   99c72:	3708      	adds	r7, #8
   99c74:	46bd      	mov	sp, r7
   99c76:	bd80      	pop	{r7, pc}
   99c78:	0009937d 	.word	0x0009937d
   99c7c:	000993dd 	.word	0x000993dd
   99c80:	000993bd 	.word	0x000993bd

00099c84 <cl_console_receivedbyte>:
   99c84:	b480      	push	{r7}
   99c86:	b083      	sub	sp, #12
   99c88:	af00      	add	r7, sp, #0
   99c8a:	4603      	mov	r3, r0
   99c8c:	71fb      	strb	r3, [r7, #7]
   99c8e:	4b61      	ldr	r3, [pc, #388]	; (99e14 <cl_console_receivedbyte+0x190>)
   99c90:	7f1b      	ldrb	r3, [r3, #28]
   99c92:	2b00      	cmp	r3, #0
   99c94:	d009      	beq.n	99caa <cl_console_receivedbyte+0x26>
   99c96:	4b60      	ldr	r3, [pc, #384]	; (99e18 <cl_console_receivedbyte+0x194>)
   99c98:	7f1b      	ldrb	r3, [r3, #28]
   99c9a:	2b00      	cmp	r3, #0
   99c9c:	d005      	beq.n	99caa <cl_console_receivedbyte+0x26>
   99c9e:	4b5d      	ldr	r3, [pc, #372]	; (99e14 <cl_console_receivedbyte+0x190>)
   99ca0:	2201      	movs	r2, #1
   99ca2:	769a      	strb	r2, [r3, #26]
   99ca4:	4b5c      	ldr	r3, [pc, #368]	; (99e18 <cl_console_receivedbyte+0x194>)
   99ca6:	2200      	movs	r2, #0
   99ca8:	769a      	strb	r2, [r3, #26]
   99caa:	4b5a      	ldr	r3, [pc, #360]	; (99e14 <cl_console_receivedbyte+0x190>)
   99cac:	7e9b      	ldrb	r3, [r3, #26]
   99cae:	2b00      	cmp	r3, #0
   99cb0:	d04e      	beq.n	99d50 <cl_console_receivedbyte+0xcc>
   99cb2:	4b58      	ldr	r3, [pc, #352]	; (99e14 <cl_console_receivedbyte+0x190>)
   99cb4:	7edb      	ldrb	r3, [r3, #27]
   99cb6:	f083 0301 	eor.w	r3, r3, #1
   99cba:	b2db      	uxtb	r3, r3
   99cbc:	2b00      	cmp	r3, #0
   99cbe:	d00a      	beq.n	99cd6 <cl_console_receivedbyte+0x52>
   99cc0:	4b56      	ldr	r3, [pc, #344]	; (99e1c <cl_console_receivedbyte+0x198>)
   99cc2:	781b      	ldrb	r3, [r3, #0]
   99cc4:	2bcc      	cmp	r3, #204	; 0xcc
   99cc6:	d12e      	bne.n	99d26 <cl_console_receivedbyte+0xa2>
   99cc8:	79fb      	ldrb	r3, [r7, #7]
   99cca:	2bdd      	cmp	r3, #221	; 0xdd
   99ccc:	d12b      	bne.n	99d26 <cl_console_receivedbyte+0xa2>
   99cce:	4b51      	ldr	r3, [pc, #324]	; (99e14 <cl_console_receivedbyte+0x190>)
   99cd0:	2201      	movs	r2, #1
   99cd2:	76da      	strb	r2, [r3, #27]
   99cd4:	e027      	b.n	99d26 <cl_console_receivedbyte+0xa2>
   99cd6:	4b4f      	ldr	r3, [pc, #316]	; (99e14 <cl_console_receivedbyte+0x190>)
   99cd8:	7d1b      	ldrb	r3, [r3, #20]
   99cda:	4619      	mov	r1, r3
   99cdc:	4a4d      	ldr	r2, [pc, #308]	; (99e14 <cl_console_receivedbyte+0x190>)
   99cde:	79fb      	ldrb	r3, [r7, #7]
   99ce0:	5453      	strb	r3, [r2, r1]
   99ce2:	4b4c      	ldr	r3, [pc, #304]	; (99e14 <cl_console_receivedbyte+0x190>)
   99ce4:	2201      	movs	r2, #1
   99ce6:	75da      	strb	r2, [r3, #23]
   99ce8:	4b4a      	ldr	r3, [pc, #296]	; (99e14 <cl_console_receivedbyte+0x190>)
   99cea:	2200      	movs	r2, #0
   99cec:	771a      	strb	r2, [r3, #28]
   99cee:	4b4b      	ldr	r3, [pc, #300]	; (99e1c <cl_console_receivedbyte+0x198>)
   99cf0:	781b      	ldrb	r3, [r3, #0]
   99cf2:	2bee      	cmp	r3, #238	; 0xee
   99cf4:	d111      	bne.n	99d1a <cl_console_receivedbyte+0x96>
   99cf6:	79fb      	ldrb	r3, [r7, #7]
   99cf8:	2bbb      	cmp	r3, #187	; 0xbb
   99cfa:	d10e      	bne.n	99d1a <cl_console_receivedbyte+0x96>
   99cfc:	4b45      	ldr	r3, [pc, #276]	; (99e14 <cl_console_receivedbyte+0x190>)
   99cfe:	2201      	movs	r2, #1
   99d00:	761a      	strb	r2, [r3, #24]
   99d02:	4b44      	ldr	r3, [pc, #272]	; (99e14 <cl_console_receivedbyte+0x190>)
   99d04:	2200      	movs	r2, #0
   99d06:	765a      	strb	r2, [r3, #25]
   99d08:	4b42      	ldr	r3, [pc, #264]	; (99e14 <cl_console_receivedbyte+0x190>)
   99d0a:	2200      	movs	r2, #0
   99d0c:	775a      	strb	r2, [r3, #29]
   99d0e:	4b41      	ldr	r3, [pc, #260]	; (99e14 <cl_console_receivedbyte+0x190>)
   99d10:	2200      	movs	r2, #0
   99d12:	769a      	strb	r2, [r3, #26]
   99d14:	4b40      	ldr	r3, [pc, #256]	; (99e18 <cl_console_receivedbyte+0x194>)
   99d16:	2201      	movs	r2, #1
   99d18:	769a      	strb	r2, [r3, #26]
   99d1a:	4b3e      	ldr	r3, [pc, #248]	; (99e14 <cl_console_receivedbyte+0x190>)
   99d1c:	7d1b      	ldrb	r3, [r3, #20]
   99d1e:	3301      	adds	r3, #1
   99d20:	b2da      	uxtb	r2, r3
   99d22:	4b3c      	ldr	r3, [pc, #240]	; (99e14 <cl_console_receivedbyte+0x190>)
   99d24:	751a      	strb	r2, [r3, #20]
   99d26:	4b3b      	ldr	r3, [pc, #236]	; (99e14 <cl_console_receivedbyte+0x190>)
   99d28:	7d1b      	ldrb	r3, [r3, #20]
   99d2a:	2b13      	cmp	r3, #19
   99d2c:	d90b      	bls.n	99d46 <cl_console_receivedbyte+0xc2>
   99d2e:	4b39      	ldr	r3, [pc, #228]	; (99e14 <cl_console_receivedbyte+0x190>)
   99d30:	2201      	movs	r2, #1
   99d32:	761a      	strb	r2, [r3, #24]
   99d34:	4b37      	ldr	r3, [pc, #220]	; (99e14 <cl_console_receivedbyte+0x190>)
   99d36:	2200      	movs	r2, #0
   99d38:	765a      	strb	r2, [r3, #25]
   99d3a:	4b36      	ldr	r3, [pc, #216]	; (99e14 <cl_console_receivedbyte+0x190>)
   99d3c:	2200      	movs	r2, #0
   99d3e:	769a      	strb	r2, [r3, #26]
   99d40:	4b34      	ldr	r3, [pc, #208]	; (99e14 <cl_console_receivedbyte+0x190>)
   99d42:	2201      	movs	r2, #1
   99d44:	775a      	strb	r2, [r3, #29]
   99d46:	4a35      	ldr	r2, [pc, #212]	; (99e1c <cl_console_receivedbyte+0x198>)
   99d48:	79fb      	ldrb	r3, [r7, #7]
   99d4a:	7013      	strb	r3, [r2, #0]
   99d4c:	2302      	movs	r3, #2
   99d4e:	e05b      	b.n	99e08 <cl_console_receivedbyte+0x184>
   99d50:	4b31      	ldr	r3, [pc, #196]	; (99e18 <cl_console_receivedbyte+0x194>)
   99d52:	7e9b      	ldrb	r3, [r3, #26]
   99d54:	2b00      	cmp	r3, #0
   99d56:	d056      	beq.n	99e06 <cl_console_receivedbyte+0x182>
   99d58:	4b2e      	ldr	r3, [pc, #184]	; (99e14 <cl_console_receivedbyte+0x190>)
   99d5a:	7f5b      	ldrb	r3, [r3, #29]
   99d5c:	2b00      	cmp	r3, #0
   99d5e:	d002      	beq.n	99d66 <cl_console_receivedbyte+0xe2>
   99d60:	4b2d      	ldr	r3, [pc, #180]	; (99e18 <cl_console_receivedbyte+0x194>)
   99d62:	2201      	movs	r2, #1
   99d64:	76da      	strb	r2, [r3, #27]
   99d66:	4b2c      	ldr	r3, [pc, #176]	; (99e18 <cl_console_receivedbyte+0x194>)
   99d68:	7edb      	ldrb	r3, [r3, #27]
   99d6a:	f083 0301 	eor.w	r3, r3, #1
   99d6e:	b2db      	uxtb	r3, r3
   99d70:	2b00      	cmp	r3, #0
   99d72:	d00d      	beq.n	99d90 <cl_console_receivedbyte+0x10c>
   99d74:	4b29      	ldr	r3, [pc, #164]	; (99e1c <cl_console_receivedbyte+0x198>)
   99d76:	781b      	ldrb	r3, [r3, #0]
   99d78:	2bcc      	cmp	r3, #204	; 0xcc
   99d7a:	d12e      	bne.n	99dda <cl_console_receivedbyte+0x156>
   99d7c:	79fb      	ldrb	r3, [r7, #7]
   99d7e:	2bdd      	cmp	r3, #221	; 0xdd
   99d80:	d12b      	bne.n	99dda <cl_console_receivedbyte+0x156>
   99d82:	4b25      	ldr	r3, [pc, #148]	; (99e18 <cl_console_receivedbyte+0x194>)
   99d84:	2201      	movs	r2, #1
   99d86:	76da      	strb	r2, [r3, #27]
   99d88:	4b23      	ldr	r3, [pc, #140]	; (99e18 <cl_console_receivedbyte+0x194>)
   99d8a:	2200      	movs	r2, #0
   99d8c:	751a      	strb	r2, [r3, #20]
   99d8e:	e024      	b.n	99dda <cl_console_receivedbyte+0x156>
   99d90:	4b21      	ldr	r3, [pc, #132]	; (99e18 <cl_console_receivedbyte+0x194>)
   99d92:	7d1b      	ldrb	r3, [r3, #20]
   99d94:	4619      	mov	r1, r3
   99d96:	4a20      	ldr	r2, [pc, #128]	; (99e18 <cl_console_receivedbyte+0x194>)
   99d98:	79fb      	ldrb	r3, [r7, #7]
   99d9a:	5453      	strb	r3, [r2, r1]
   99d9c:	4b1e      	ldr	r3, [pc, #120]	; (99e18 <cl_console_receivedbyte+0x194>)
   99d9e:	2201      	movs	r2, #1
   99da0:	75da      	strb	r2, [r3, #23]
   99da2:	4b1d      	ldr	r3, [pc, #116]	; (99e18 <cl_console_receivedbyte+0x194>)
   99da4:	2200      	movs	r2, #0
   99da6:	771a      	strb	r2, [r3, #28]
   99da8:	4b1c      	ldr	r3, [pc, #112]	; (99e1c <cl_console_receivedbyte+0x198>)
   99daa:	781b      	ldrb	r3, [r3, #0]
   99dac:	2bee      	cmp	r3, #238	; 0xee
   99dae:	d10e      	bne.n	99dce <cl_console_receivedbyte+0x14a>
   99db0:	79fb      	ldrb	r3, [r7, #7]
   99db2:	2bbb      	cmp	r3, #187	; 0xbb
   99db4:	d10b      	bne.n	99dce <cl_console_receivedbyte+0x14a>
   99db6:	4b18      	ldr	r3, [pc, #96]	; (99e18 <cl_console_receivedbyte+0x194>)
   99db8:	2201      	movs	r2, #1
   99dba:	761a      	strb	r2, [r3, #24]
   99dbc:	4b16      	ldr	r3, [pc, #88]	; (99e18 <cl_console_receivedbyte+0x194>)
   99dbe:	2200      	movs	r2, #0
   99dc0:	765a      	strb	r2, [r3, #25]
   99dc2:	4b14      	ldr	r3, [pc, #80]	; (99e14 <cl_console_receivedbyte+0x190>)
   99dc4:	2201      	movs	r2, #1
   99dc6:	769a      	strb	r2, [r3, #26]
   99dc8:	4b13      	ldr	r3, [pc, #76]	; (99e18 <cl_console_receivedbyte+0x194>)
   99dca:	2200      	movs	r2, #0
   99dcc:	769a      	strb	r2, [r3, #26]
   99dce:	4b12      	ldr	r3, [pc, #72]	; (99e18 <cl_console_receivedbyte+0x194>)
   99dd0:	7d1b      	ldrb	r3, [r3, #20]
   99dd2:	3301      	adds	r3, #1
   99dd4:	b2da      	uxtb	r2, r3
   99dd6:	4b10      	ldr	r3, [pc, #64]	; (99e18 <cl_console_receivedbyte+0x194>)
   99dd8:	751a      	strb	r2, [r3, #20]
   99dda:	4b0f      	ldr	r3, [pc, #60]	; (99e18 <cl_console_receivedbyte+0x194>)
   99ddc:	7d1b      	ldrb	r3, [r3, #20]
   99dde:	2b14      	cmp	r3, #20
   99de0:	d90b      	bls.n	99dfa <cl_console_receivedbyte+0x176>
   99de2:	4b0d      	ldr	r3, [pc, #52]	; (99e18 <cl_console_receivedbyte+0x194>)
   99de4:	2201      	movs	r2, #1
   99de6:	761a      	strb	r2, [r3, #24]
   99de8:	4b0b      	ldr	r3, [pc, #44]	; (99e18 <cl_console_receivedbyte+0x194>)
   99dea:	2200      	movs	r2, #0
   99dec:	769a      	strb	r2, [r3, #26]
   99dee:	4b0a      	ldr	r3, [pc, #40]	; (99e18 <cl_console_receivedbyte+0x194>)
   99df0:	2201      	movs	r2, #1
   99df2:	775a      	strb	r2, [r3, #29]
   99df4:	4b07      	ldr	r3, [pc, #28]	; (99e14 <cl_console_receivedbyte+0x190>)
   99df6:	2200      	movs	r2, #0
   99df8:	775a      	strb	r2, [r3, #29]
   99dfa:	4b07      	ldr	r3, [pc, #28]	; (99e18 <cl_console_receivedbyte+0x194>)
   99dfc:	7f5b      	ldrb	r3, [r3, #29]
   99dfe:	2b00      	cmp	r3, #0
   99e00:	4a06      	ldr	r2, [pc, #24]	; (99e1c <cl_console_receivedbyte+0x198>)
   99e02:	79fb      	ldrb	r3, [r7, #7]
   99e04:	7013      	strb	r3, [r2, #0]
   99e06:	2302      	movs	r3, #2
   99e08:	4618      	mov	r0, r3
   99e0a:	370c      	adds	r7, #12
   99e0c:	46bd      	mov	sp, r7
   99e0e:	bc80      	pop	{r7}
   99e10:	4770      	bx	lr
   99e12:	bf00      	nop
   99e14:	20072fb4 	.word	0x20072fb4
   99e18:	20072e7c 	.word	0x20072e7c
   99e1c:	200727b8 	.word	0x200727b8

00099e20 <ioport_toggle_pin_level>:
   99e20:	b480      	push	{r7}
   99e22:	b08b      	sub	sp, #44	; 0x2c
   99e24:	af00      	add	r7, sp, #0
   99e26:	6078      	str	r0, [r7, #4]
   99e28:	687b      	ldr	r3, [r7, #4]
   99e2a:	627b      	str	r3, [r7, #36]	; 0x24
   99e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   99e2e:	623b      	str	r3, [r7, #32]
   99e30:	6a3b      	ldr	r3, [r7, #32]
   99e32:	61fb      	str	r3, [r7, #28]
   99e34:	69fb      	ldr	r3, [r7, #28]
   99e36:	095b      	lsrs	r3, r3, #5
   99e38:	61bb      	str	r3, [r7, #24]
   99e3a:	69bb      	ldr	r3, [r7, #24]
   99e3c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   99e40:	f203 7307 	addw	r3, r3, #1799	; 0x707
   99e44:	025b      	lsls	r3, r3, #9
   99e46:	617b      	str	r3, [r7, #20]
   99e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   99e4a:	613b      	str	r3, [r7, #16]
   99e4c:	693b      	ldr	r3, [r7, #16]
   99e4e:	f003 031f 	and.w	r3, r3, #31
   99e52:	2201      	movs	r2, #1
   99e54:	fa02 f303 	lsl.w	r3, r2, r3
   99e58:	60fb      	str	r3, [r7, #12]
   99e5a:	697b      	ldr	r3, [r7, #20]
   99e5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   99e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   99e60:	60bb      	str	r3, [r7, #8]
   99e62:	68bb      	ldr	r3, [r7, #8]
   99e64:	f003 031f 	and.w	r3, r3, #31
   99e68:	2101      	movs	r1, #1
   99e6a:	fa01 f303 	lsl.w	r3, r1, r3
   99e6e:	4013      	ands	r3, r2
   99e70:	2b00      	cmp	r3, #0
   99e72:	d003      	beq.n	99e7c <ioport_toggle_pin_level+0x5c>
   99e74:	697b      	ldr	r3, [r7, #20]
   99e76:	68fa      	ldr	r2, [r7, #12]
   99e78:	635a      	str	r2, [r3, #52]	; 0x34
   99e7a:	e002      	b.n	99e82 <ioport_toggle_pin_level+0x62>
   99e7c:	697b      	ldr	r3, [r7, #20]
   99e7e:	68fa      	ldr	r2, [r7, #12]
   99e80:	631a      	str	r2, [r3, #48]	; 0x30
   99e82:	bf00      	nop
   99e84:	372c      	adds	r7, #44	; 0x2c
   99e86:	46bd      	mov	sp, r7
   99e88:	bc80      	pop	{r7}
   99e8a:	4770      	bx	lr

00099e8c <TC1_Handler>:
   99e8c:	b580      	push	{r7, lr}
   99e8e:	af00      	add	r7, sp, #0
   99e90:	4b04      	ldr	r3, [pc, #16]	; (99ea4 <TC1_Handler+0x18>)
   99e92:	781b      	ldrb	r3, [r3, #0]
   99e94:	b2db      	uxtb	r3, r3
   99e96:	2b00      	cmp	r3, #0
   99e98:	d002      	beq.n	99ea0 <TC1_Handler+0x14>
   99e9a:	203b      	movs	r0, #59	; 0x3b
   99e9c:	4b02      	ldr	r3, [pc, #8]	; (99ea8 <TC1_Handler+0x1c>)
   99e9e:	4798      	blx	r3
   99ea0:	bf00      	nop
   99ea2:	bd80      	pop	{r7, pc}
   99ea4:	20070a65 	.word	0x20070a65
   99ea8:	00099e21 	.word	0x00099e21

00099eac <Cl_disinf_init>:
   99eac:	b480      	push	{r7}
   99eae:	af00      	add	r7, sp, #0
   99eb0:	2300      	movs	r3, #0
   99eb2:	4618      	mov	r0, r3
   99eb4:	46bd      	mov	sp, r7
   99eb6:	bc80      	pop	{r7}
   99eb8:	4770      	bx	lr
   99eba:	bf00      	nop

00099ebc <Cl_disinf_controller>:
   99ebc:	b590      	push	{r4, r7, lr}
   99ebe:	b08d      	sub	sp, #52	; 0x34
   99ec0:	af02      	add	r7, sp, #8
   99ec2:	4603      	mov	r3, r0
   99ec4:	71fb      	strb	r3, [r7, #7]
   99ec6:	2300      	movs	r3, #0
   99ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   99ecc:	2300      	movs	r3, #0
   99ece:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
   99ed2:	234d      	movs	r3, #77	; 0x4d
   99ed4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   99ed8:	2300      	movs	r3, #0
   99eda:	61fb      	str	r3, [r7, #28]
   99edc:	2300      	movs	r3, #0
   99ede:	76fb      	strb	r3, [r7, #27]
   99ee0:	2300      	movs	r3, #0
   99ee2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   99ee6:	2300      	movs	r3, #0
   99ee8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   99eec:	2300      	movs	r3, #0
   99eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   99ef2:	2300      	movs	r3, #0
   99ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   99ef8:	f107 0221 	add.w	r2, r7, #33	; 0x21
   99efc:	79fb      	ldrb	r3, [r7, #7]
   99efe:	4611      	mov	r1, r2
   99f00:	4618      	mov	r0, r3
   99f02:	4bad      	ldr	r3, [pc, #692]	; (9a1b8 <Cl_disinf_controller+0x2fc>)
   99f04:	4798      	blx	r3
   99f06:	4603      	mov	r3, r0
   99f08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   99f0c:	4bab      	ldr	r3, [pc, #684]	; (9a1bc <Cl_disinf_controller+0x300>)
   99f0e:	781b      	ldrb	r3, [r3, #0]
   99f10:	2b11      	cmp	r3, #17
   99f12:	f200 86db 	bhi.w	9accc <Cl_disinf_controller+0xe10>
   99f16:	a201      	add	r2, pc, #4	; (adr r2, 99f1c <Cl_disinf_controller+0x60>)
   99f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99f1c:	00099f65 	.word	0x00099f65
   99f20:	0009accd 	.word	0x0009accd
   99f24:	0009accd 	.word	0x0009accd
   99f28:	0009a05d 	.word	0x0009a05d
   99f2c:	0009a0e9 	.word	0x0009a0e9
   99f30:	0009a2fb 	.word	0x0009a2fb
   99f34:	0009a3bb 	.word	0x0009a3bb
   99f38:	0009a595 	.word	0x0009a595
   99f3c:	0009a785 	.word	0x0009a785
   99f40:	0009a965 	.word	0x0009a965
   99f44:	0009a9a5 	.word	0x0009a9a5
   99f48:	0009accd 	.word	0x0009accd
   99f4c:	0009aa7f 	.word	0x0009aa7f
   99f50:	0009accd 	.word	0x0009accd
   99f54:	0009accd 	.word	0x0009accd
   99f58:	0009aa05 	.word	0x0009aa05
   99f5c:	0009a169 	.word	0x0009a169
   99f60:	0009a653 	.word	0x0009a653
   99f64:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   99f68:	2b01      	cmp	r3, #1
   99f6a:	d044      	beq.n	99ff6 <Cl_disinf_controller+0x13a>
   99f6c:	2b14      	cmp	r3, #20
   99f6e:	d000      	beq.n	99f72 <Cl_disinf_controller+0xb6>
   99f70:	e072      	b.n	9a058 <Cl_disinf_controller+0x19c>
   99f72:	4b93      	ldr	r3, [pc, #588]	; (9a1c0 <Cl_disinf_controller+0x304>)
   99f74:	7e1b      	ldrb	r3, [r3, #24]
   99f76:	2b00      	cmp	r3, #0
   99f78:	d06d      	beq.n	9a056 <Cl_disinf_controller+0x19a>
   99f7a:	4b91      	ldr	r3, [pc, #580]	; (9a1c0 <Cl_disinf_controller+0x304>)
   99f7c:	791b      	ldrb	r3, [r3, #4]
   99f7e:	2b02      	cmp	r3, #2
   99f80:	d01d      	beq.n	99fbe <Cl_disinf_controller+0x102>
   99f82:	2b21      	cmp	r3, #33	; 0x21
   99f84:	d000      	beq.n	99f88 <Cl_disinf_controller+0xcc>
   99f86:	e034      	b.n	99ff2 <Cl_disinf_controller+0x136>
   99f88:	2316      	movs	r3, #22
   99f8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   99f8e:	2323      	movs	r3, #35	; 0x23
   99f90:	773b      	strb	r3, [r7, #28]
   99f92:	f107 031c 	add.w	r3, r7, #28
   99f96:	3301      	adds	r3, #1
   99f98:	4619      	mov	r1, r3
   99f9a:	2028      	movs	r0, #40	; 0x28
   99f9c:	4b89      	ldr	r3, [pc, #548]	; (9a1c4 <Cl_disinf_controller+0x308>)
   99f9e:	4798      	blx	r3
   99fa0:	4603      	mov	r3, r0
   99fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   99fa6:	f107 011c 	add.w	r1, r7, #28
   99faa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   99fae:	2202      	movs	r2, #2
   99fb0:	4618      	mov	r0, r3
   99fb2:	4b85      	ldr	r3, [pc, #532]	; (9a1c8 <Cl_disinf_controller+0x30c>)
   99fb4:	4798      	blx	r3
   99fb6:	4603      	mov	r3, r0
   99fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   99fbc:	e01a      	b.n	99ff4 <Cl_disinf_controller+0x138>
   99fbe:	2316      	movs	r3, #22
   99fc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   99fc4:	2302      	movs	r3, #2
   99fc6:	773b      	strb	r3, [r7, #28]
   99fc8:	f107 031c 	add.w	r3, r7, #28
   99fcc:	3301      	adds	r3, #1
   99fce:	4619      	mov	r1, r3
   99fd0:	2002      	movs	r0, #2
   99fd2:	4b7c      	ldr	r3, [pc, #496]	; (9a1c4 <Cl_disinf_controller+0x308>)
   99fd4:	4798      	blx	r3
   99fd6:	4603      	mov	r3, r0
   99fd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   99fdc:	f107 011c 	add.w	r1, r7, #28
   99fe0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   99fe4:	2202      	movs	r2, #2
   99fe6:	4618      	mov	r0, r3
   99fe8:	4b77      	ldr	r3, [pc, #476]	; (9a1c8 <Cl_disinf_controller+0x30c>)
   99fea:	4798      	blx	r3
   99fec:	4603      	mov	r3, r0
   99fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   99ff2:	bf00      	nop
   99ff4:	e02f      	b.n	9a056 <Cl_disinf_controller+0x19a>
   99ff6:	2044      	movs	r0, #68	; 0x44
   99ff8:	4b74      	ldr	r3, [pc, #464]	; (9a1cc <Cl_disinf_controller+0x310>)
   99ffa:	4798      	blx	r3
   99ffc:	4603      	mov	r3, r0
   99ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a002:	4b6f      	ldr	r3, [pc, #444]	; (9a1c0 <Cl_disinf_controller+0x304>)
   9a004:	7e1b      	ldrb	r3, [r3, #24]
   9a006:	2b00      	cmp	r3, #0
   9a008:	d00f      	beq.n	9a02a <Cl_disinf_controller+0x16e>
   9a00a:	4b6d      	ldr	r3, [pc, #436]	; (9a1c0 <Cl_disinf_controller+0x304>)
   9a00c:	791b      	ldrb	r3, [r3, #4]
   9a00e:	753b      	strb	r3, [r7, #20]
   9a010:	7d3b      	ldrb	r3, [r7, #20]
   9a012:	2b04      	cmp	r3, #4
   9a014:	d103      	bne.n	9a01e <Cl_disinf_controller+0x162>
   9a016:	4b6e      	ldr	r3, [pc, #440]	; (9a1d0 <Cl_disinf_controller+0x314>)
   9a018:	2201      	movs	r2, #1
   9a01a:	701a      	strb	r2, [r3, #0]
   9a01c:	e005      	b.n	9a02a <Cl_disinf_controller+0x16e>
   9a01e:	7d3b      	ldrb	r3, [r7, #20]
   9a020:	2b03      	cmp	r3, #3
   9a022:	d102      	bne.n	9a02a <Cl_disinf_controller+0x16e>
   9a024:	4b6b      	ldr	r3, [pc, #428]	; (9a1d4 <Cl_disinf_controller+0x318>)
   9a026:	2201      	movs	r2, #1
   9a028:	701a      	strb	r2, [r3, #0]
   9a02a:	233c      	movs	r3, #60	; 0x3c
   9a02c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9a030:	2301      	movs	r3, #1
   9a032:	76fb      	strb	r3, [r7, #27]
   9a034:	f107 011b 	add.w	r1, r7, #27
   9a038:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a03c:	2201      	movs	r2, #1
   9a03e:	4618      	mov	r0, r3
   9a040:	4b61      	ldr	r3, [pc, #388]	; (9a1c8 <Cl_disinf_controller+0x30c>)
   9a042:	4798      	blx	r3
   9a044:	4603      	mov	r3, r0
   9a046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a04a:	4b63      	ldr	r3, [pc, #396]	; (9a1d8 <Cl_disinf_controller+0x31c>)
   9a04c:	4798      	blx	r3
   9a04e:	4b5b      	ldr	r3, [pc, #364]	; (9a1bc <Cl_disinf_controller+0x300>)
   9a050:	2203      	movs	r2, #3
   9a052:	701a      	strb	r2, [r3, #0]
   9a054:	e000      	b.n	9a058 <Cl_disinf_controller+0x19c>
   9a056:	bf00      	nop
   9a058:	f000 be3b 	b.w	9acd2 <Cl_disinf_controller+0xe16>
   9a05c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9a060:	2b13      	cmp	r3, #19
   9a062:	d004      	beq.n	9a06e <Cl_disinf_controller+0x1b2>
   9a064:	2b22      	cmp	r3, #34	; 0x22
   9a066:	d008      	beq.n	9a07a <Cl_disinf_controller+0x1be>
   9a068:	2b0f      	cmp	r3, #15
   9a06a:	d02d      	beq.n	9a0c8 <Cl_disinf_controller+0x20c>
   9a06c:	e03a      	b.n	9a0e4 <Cl_disinf_controller+0x228>
   9a06e:	4b5b      	ldr	r3, [pc, #364]	; (9a1dc <Cl_disinf_controller+0x320>)
   9a070:	4798      	blx	r3
   9a072:	4603      	mov	r3, r0
   9a074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a078:	e034      	b.n	9a0e4 <Cl_disinf_controller+0x228>
   9a07a:	4b50      	ldr	r3, [pc, #320]	; (9a1bc <Cl_disinf_controller+0x300>)
   9a07c:	2204      	movs	r2, #4
   9a07e:	701a      	strb	r2, [r3, #0]
   9a080:	2339      	movs	r3, #57	; 0x39
   9a082:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9a086:	2301      	movs	r3, #1
   9a088:	76fb      	strb	r3, [r7, #27]
   9a08a:	f107 011b 	add.w	r1, r7, #27
   9a08e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a092:	2201      	movs	r2, #1
   9a094:	4618      	mov	r0, r3
   9a096:	4b4c      	ldr	r3, [pc, #304]	; (9a1c8 <Cl_disinf_controller+0x30c>)
   9a098:	4798      	blx	r3
   9a09a:	4603      	mov	r3, r0
   9a09c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a0a0:	2005      	movs	r0, #5
   9a0a2:	4b4f      	ldr	r3, [pc, #316]	; (9a1e0 <Cl_disinf_controller+0x324>)
   9a0a4:	4798      	blx	r3
   9a0a6:	2338      	movs	r3, #56	; 0x38
   9a0a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9a0ac:	2300      	movs	r3, #0
   9a0ae:	76fb      	strb	r3, [r7, #27]
   9a0b0:	f107 011b 	add.w	r1, r7, #27
   9a0b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a0b8:	2200      	movs	r2, #0
   9a0ba:	4618      	mov	r0, r3
   9a0bc:	4b42      	ldr	r3, [pc, #264]	; (9a1c8 <Cl_disinf_controller+0x30c>)
   9a0be:	4798      	blx	r3
   9a0c0:	4603      	mov	r3, r0
   9a0c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a0c6:	e00d      	b.n	9a0e4 <Cl_disinf_controller+0x228>
   9a0c8:	4b46      	ldr	r3, [pc, #280]	; (9a1e4 <Cl_disinf_controller+0x328>)
   9a0ca:	681b      	ldr	r3, [r3, #0]
   9a0cc:	3301      	adds	r3, #1
   9a0ce:	4a45      	ldr	r2, [pc, #276]	; (9a1e4 <Cl_disinf_controller+0x328>)
   9a0d0:	6013      	str	r3, [r2, #0]
   9a0d2:	4b45      	ldr	r3, [pc, #276]	; (9a1e8 <Cl_disinf_controller+0x32c>)
   9a0d4:	4798      	blx	r3
   9a0d6:	4b43      	ldr	r3, [pc, #268]	; (9a1e4 <Cl_disinf_controller+0x328>)
   9a0d8:	681b      	ldr	r3, [r3, #0]
   9a0da:	2b3c      	cmp	r3, #60	; 0x3c
   9a0dc:	d101      	bne.n	9a0e2 <Cl_disinf_controller+0x226>
   9a0de:	4b43      	ldr	r3, [pc, #268]	; (9a1ec <Cl_disinf_controller+0x330>)
   9a0e0:	4798      	blx	r3
   9a0e2:	bf00      	nop
   9a0e4:	f000 bdf5 	b.w	9acd2 <Cl_disinf_controller+0xe16>
   9a0e8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9a0ec:	2b02      	cmp	r3, #2
   9a0ee:	d000      	beq.n	9a0f2 <Cl_disinf_controller+0x236>
   9a0f0:	e038      	b.n	9a164 <Cl_disinf_controller+0x2a8>
   9a0f2:	4b3f      	ldr	r3, [pc, #252]	; (9a1f0 <Cl_disinf_controller+0x334>)
   9a0f4:	4798      	blx	r3
   9a0f6:	4b36      	ldr	r3, [pc, #216]	; (9a1d0 <Cl_disinf_controller+0x314>)
   9a0f8:	781b      	ldrb	r3, [r3, #0]
   9a0fa:	2b01      	cmp	r3, #1
   9a0fc:	d10d      	bne.n	9a11a <Cl_disinf_controller+0x25e>
   9a0fe:	2300      	movs	r3, #0
   9a100:	9300      	str	r3, [sp, #0]
   9a102:	f04f 0300 	mov.w	r3, #0
   9a106:	f04f 0200 	mov.w	r2, #0
   9a10a:	2101      	movs	r1, #1
   9a10c:	202b      	movs	r0, #43	; 0x2b
   9a10e:	4c39      	ldr	r4, [pc, #228]	; (9a1f4 <Cl_disinf_controller+0x338>)
   9a110:	47a0      	blx	r4
   9a112:	4603      	mov	r3, r0
   9a114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a118:	e010      	b.n	9a13c <Cl_disinf_controller+0x280>
   9a11a:	4b2e      	ldr	r3, [pc, #184]	; (9a1d4 <Cl_disinf_controller+0x318>)
   9a11c:	781b      	ldrb	r3, [r3, #0]
   9a11e:	2b01      	cmp	r3, #1
   9a120:	d10c      	bne.n	9a13c <Cl_disinf_controller+0x280>
   9a122:	2300      	movs	r3, #0
   9a124:	9300      	str	r3, [sp, #0]
   9a126:	f04f 0300 	mov.w	r3, #0
   9a12a:	f04f 0200 	mov.w	r2, #0
   9a12e:	2101      	movs	r1, #1
   9a130:	2029      	movs	r0, #41	; 0x29
   9a132:	4c30      	ldr	r4, [pc, #192]	; (9a1f4 <Cl_disinf_controller+0x338>)
   9a134:	47a0      	blx	r4
   9a136:	4603      	mov	r3, r0
   9a138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a13c:	4b1f      	ldr	r3, [pc, #124]	; (9a1bc <Cl_disinf_controller+0x300>)
   9a13e:	2210      	movs	r2, #16
   9a140:	701a      	strb	r2, [r3, #0]
   9a142:	2338      	movs	r3, #56	; 0x38
   9a144:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9a148:	2300      	movs	r3, #0
   9a14a:	76fb      	strb	r3, [r7, #27]
   9a14c:	f107 011b 	add.w	r1, r7, #27
   9a150:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a154:	2200      	movs	r2, #0
   9a156:	4618      	mov	r0, r3
   9a158:	4b1b      	ldr	r3, [pc, #108]	; (9a1c8 <Cl_disinf_controller+0x30c>)
   9a15a:	4798      	blx	r3
   9a15c:	4603      	mov	r3, r0
   9a15e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a162:	bf00      	nop
   9a164:	f000 bdb5 	b.w	9acd2 <Cl_disinf_controller+0xe16>
   9a168:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9a16c:	2b13      	cmp	r3, #19
   9a16e:	d005      	beq.n	9a17c <Cl_disinf_controller+0x2c0>
   9a170:	2b25      	cmp	r3, #37	; 0x25
   9a172:	d009      	beq.n	9a188 <Cl_disinf_controller+0x2cc>
   9a174:	2b0f      	cmp	r3, #15
   9a176:	d01a      	beq.n	9a1ae <Cl_disinf_controller+0x2f2>
   9a178:	f000 bdab 	b.w	9acd2 <Cl_disinf_controller+0xe16>
   9a17c:	4b17      	ldr	r3, [pc, #92]	; (9a1dc <Cl_disinf_controller+0x320>)
   9a17e:	4798      	blx	r3
   9a180:	4603      	mov	r3, r0
   9a182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a186:	e0b6      	b.n	9a2f6 <Cl_disinf_controller+0x43a>
   9a188:	4b1b      	ldr	r3, [pc, #108]	; (9a1f8 <Cl_disinf_controller+0x33c>)
   9a18a:	4798      	blx	r3
   9a18c:	4b1b      	ldr	r3, [pc, #108]	; (9a1fc <Cl_disinf_controller+0x340>)
   9a18e:	4798      	blx	r3
   9a190:	4b1b      	ldr	r3, [pc, #108]	; (9a200 <Cl_disinf_controller+0x344>)
   9a192:	4798      	blx	r3
   9a194:	4b1b      	ldr	r3, [pc, #108]	; (9a204 <Cl_disinf_controller+0x348>)
   9a196:	781b      	ldrb	r3, [r3, #0]
   9a198:	b2db      	uxtb	r3, r3
   9a19a:	2b01      	cmp	r3, #1
   9a19c:	f040 80aa 	bne.w	9a2f4 <Cl_disinf_controller+0x438>
   9a1a0:	4b06      	ldr	r3, [pc, #24]	; (9a1bc <Cl_disinf_controller+0x300>)
   9a1a2:	2205      	movs	r2, #5
   9a1a4:	701a      	strb	r2, [r3, #0]
   9a1a6:	4b17      	ldr	r3, [pc, #92]	; (9a204 <Cl_disinf_controller+0x348>)
   9a1a8:	2200      	movs	r2, #0
   9a1aa:	701a      	strb	r2, [r3, #0]
   9a1ac:	e0a2      	b.n	9a2f4 <Cl_disinf_controller+0x438>
   9a1ae:	4b16      	ldr	r3, [pc, #88]	; (9a208 <Cl_disinf_controller+0x34c>)
   9a1b0:	2200      	movs	r2, #0
   9a1b2:	801a      	strh	r2, [r3, #0]
   9a1b4:	e099      	b.n	9a2ea <Cl_disinf_controller+0x42e>
   9a1b6:	bf00      	nop
   9a1b8:	0009ad25 	.word	0x0009ad25
   9a1bc:	200727bb 	.word	0x200727bb
   9a1c0:	20072f98 	.word	0x20072f98
   9a1c4:	00098239 	.word	0x00098239
   9a1c8:	00099729 	.word	0x00099729
   9a1cc:	0008a611 	.word	0x0008a611
   9a1d0:	20072637 	.word	0x20072637
   9a1d4:	20072639 	.word	0x20072639
   9a1d8:	0009b1dd 	.word	0x0009b1dd
   9a1dc:	0009b331 	.word	0x0009b331
   9a1e0:	00091e2d 	.word	0x00091e2d
   9a1e4:	200727bc 	.word	0x200727bc
   9a1e8:	0009b661 	.word	0x0009b661
   9a1ec:	0009ba39 	.word	0x0009ba39
   9a1f0:	0009af59 	.word	0x0009af59
   9a1f4:	00082ea1 	.word	0x00082ea1
   9a1f8:	00097c55 	.word	0x00097c55
   9a1fc:	00097c91 	.word	0x00097c91
   9a200:	0009b13d 	.word	0x0009b13d
   9a204:	200727b9 	.word	0x200727b9
   9a208:	2007335c 	.word	0x2007335c
   9a20c:	4ba1      	ldr	r3, [pc, #644]	; (9a494 <Cl_disinf_controller+0x5d8>)
   9a20e:	881b      	ldrh	r3, [r3, #0]
   9a210:	4619      	mov	r1, r3
   9a212:	4aa1      	ldr	r2, [pc, #644]	; (9a498 <Cl_disinf_controller+0x5dc>)
   9a214:	460b      	mov	r3, r1
   9a216:	00db      	lsls	r3, r3, #3
   9a218:	1a5b      	subs	r3, r3, r1
   9a21a:	4413      	add	r3, r2
   9a21c:	7818      	ldrb	r0, [r3, #0]
   9a21e:	4b9d      	ldr	r3, [pc, #628]	; (9a494 <Cl_disinf_controller+0x5d8>)
   9a220:	881b      	ldrh	r3, [r3, #0]
   9a222:	461a      	mov	r2, r3
   9a224:	4613      	mov	r3, r2
   9a226:	00db      	lsls	r3, r3, #3
   9a228:	1a9b      	subs	r3, r3, r2
   9a22a:	4a9b      	ldr	r2, [pc, #620]	; (9a498 <Cl_disinf_controller+0x5dc>)
   9a22c:	4413      	add	r3, r2
   9a22e:	3302      	adds	r3, #2
   9a230:	4619      	mov	r1, r3
   9a232:	4b9a      	ldr	r3, [pc, #616]	; (9a49c <Cl_disinf_controller+0x5e0>)
   9a234:	4798      	blx	r3
   9a236:	4b97      	ldr	r3, [pc, #604]	; (9a494 <Cl_disinf_controller+0x5d8>)
   9a238:	881b      	ldrh	r3, [r3, #0]
   9a23a:	4619      	mov	r1, r3
   9a23c:	4a96      	ldr	r2, [pc, #600]	; (9a498 <Cl_disinf_controller+0x5dc>)
   9a23e:	460b      	mov	r3, r1
   9a240:	00db      	lsls	r3, r3, #3
   9a242:	1a5b      	subs	r3, r3, r1
   9a244:	4413      	add	r3, r2
   9a246:	3302      	adds	r3, #2
   9a248:	781b      	ldrb	r3, [r3, #0]
   9a24a:	2b00      	cmp	r3, #0
   9a24c:	d015      	beq.n	9a27a <Cl_disinf_controller+0x3be>
   9a24e:	4b94      	ldr	r3, [pc, #592]	; (9a4a0 <Cl_disinf_controller+0x5e4>)
   9a250:	4798      	blx	r3
   9a252:	4b94      	ldr	r3, [pc, #592]	; (9a4a4 <Cl_disinf_controller+0x5e8>)
   9a254:	4798      	blx	r3
   9a256:	2208      	movs	r2, #8
   9a258:	4993      	ldr	r1, [pc, #588]	; (9a4a8 <Cl_disinf_controller+0x5ec>)
   9a25a:	2018      	movs	r0, #24
   9a25c:	4b93      	ldr	r3, [pc, #588]	; (9a4ac <Cl_disinf_controller+0x5f0>)
   9a25e:	4798      	blx	r3
   9a260:	4b93      	ldr	r3, [pc, #588]	; (9a4b0 <Cl_disinf_controller+0x5f4>)
   9a262:	4798      	blx	r3
   9a264:	4b93      	ldr	r3, [pc, #588]	; (9a4b4 <Cl_disinf_controller+0x5f8>)
   9a266:	2210      	movs	r2, #16
   9a268:	701a      	strb	r2, [r3, #0]
   9a26a:	4b93      	ldr	r3, [pc, #588]	; (9a4b8 <Cl_disinf_controller+0x5fc>)
   9a26c:	2201      	movs	r2, #1
   9a26e:	701a      	strb	r2, [r3, #0]
   9a270:	4b88      	ldr	r3, [pc, #544]	; (9a494 <Cl_disinf_controller+0x5d8>)
   9a272:	2200      	movs	r2, #0
   9a274:	801a      	strh	r2, [r3, #0]
   9a276:	bf00      	nop
   9a278:	e03d      	b.n	9a2f6 <Cl_disinf_controller+0x43a>
   9a27a:	4b86      	ldr	r3, [pc, #536]	; (9a494 <Cl_disinf_controller+0x5d8>)
   9a27c:	881b      	ldrh	r3, [r3, #0]
   9a27e:	2b0b      	cmp	r3, #11
   9a280:	d12d      	bne.n	9a2de <Cl_disinf_controller+0x422>
   9a282:	4b84      	ldr	r3, [pc, #528]	; (9a494 <Cl_disinf_controller+0x5d8>)
   9a284:	881b      	ldrh	r3, [r3, #0]
   9a286:	4619      	mov	r1, r3
   9a288:	4a83      	ldr	r2, [pc, #524]	; (9a498 <Cl_disinf_controller+0x5dc>)
   9a28a:	460b      	mov	r3, r1
   9a28c:	00db      	lsls	r3, r3, #3
   9a28e:	1a5b      	subs	r3, r3, r1
   9a290:	4413      	add	r3, r2
   9a292:	3302      	adds	r3, #2
   9a294:	781b      	ldrb	r3, [r3, #0]
   9a296:	f083 0301 	eor.w	r3, r3, #1
   9a29a:	b2db      	uxtb	r3, r3
   9a29c:	2b00      	cmp	r3, #0
   9a29e:	d01e      	beq.n	9a2de <Cl_disinf_controller+0x422>
   9a2a0:	4b86      	ldr	r3, [pc, #536]	; (9a4bc <Cl_disinf_controller+0x600>)
   9a2a2:	4798      	blx	r3
   9a2a4:	4b86      	ldr	r3, [pc, #536]	; (9a4c0 <Cl_disinf_controller+0x604>)
   9a2a6:	4798      	blx	r3
   9a2a8:	4b86      	ldr	r3, [pc, #536]	; (9a4c4 <Cl_disinf_controller+0x608>)
   9a2aa:	2201      	movs	r2, #1
   9a2ac:	701a      	strb	r2, [r3, #0]
   9a2ae:	4b82      	ldr	r3, [pc, #520]	; (9a4b8 <Cl_disinf_controller+0x5fc>)
   9a2b0:	781b      	ldrb	r3, [r3, #0]
   9a2b2:	b2db      	uxtb	r3, r3
   9a2b4:	2b00      	cmp	r3, #0
   9a2b6:	d112      	bne.n	9a2de <Cl_disinf_controller+0x422>
   9a2b8:	233b      	movs	r3, #59	; 0x3b
   9a2ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9a2be:	2300      	movs	r3, #0
   9a2c0:	76fb      	strb	r3, [r7, #27]
   9a2c2:	f107 011b 	add.w	r1, r7, #27
   9a2c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a2ca:	2200      	movs	r2, #0
   9a2cc:	4618      	mov	r0, r3
   9a2ce:	4b77      	ldr	r3, [pc, #476]	; (9a4ac <Cl_disinf_controller+0x5f0>)
   9a2d0:	4798      	blx	r3
   9a2d2:	4603      	mov	r3, r0
   9a2d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a2d8:	4b76      	ldr	r3, [pc, #472]	; (9a4b4 <Cl_disinf_controller+0x5f8>)
   9a2da:	2205      	movs	r2, #5
   9a2dc:	701a      	strb	r2, [r3, #0]
   9a2de:	4b6d      	ldr	r3, [pc, #436]	; (9a494 <Cl_disinf_controller+0x5d8>)
   9a2e0:	881b      	ldrh	r3, [r3, #0]
   9a2e2:	3301      	adds	r3, #1
   9a2e4:	b29a      	uxth	r2, r3
   9a2e6:	4b6b      	ldr	r3, [pc, #428]	; (9a494 <Cl_disinf_controller+0x5d8>)
   9a2e8:	801a      	strh	r2, [r3, #0]
   9a2ea:	4b6a      	ldr	r3, [pc, #424]	; (9a494 <Cl_disinf_controller+0x5d8>)
   9a2ec:	881b      	ldrh	r3, [r3, #0]
   9a2ee:	2b0b      	cmp	r3, #11
   9a2f0:	d98c      	bls.n	9a20c <Cl_disinf_controller+0x350>
   9a2f2:	e000      	b.n	9a2f6 <Cl_disinf_controller+0x43a>
   9a2f4:	bf00      	nop
   9a2f6:	f000 bcec 	b.w	9acd2 <Cl_disinf_controller+0xe16>
   9a2fa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9a2fe:	3b0c      	subs	r3, #12
   9a300:	2b03      	cmp	r3, #3
   9a302:	d854      	bhi.n	9a3ae <Cl_disinf_controller+0x4f2>
   9a304:	a201      	add	r2, pc, #4	; (adr r2, 9a30c <Cl_disinf_controller+0x450>)
   9a306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9a30a:	bf00      	nop
   9a30c:	0009a3af 	.word	0x0009a3af
   9a310:	0009a3af 	.word	0x0009a3af
   9a314:	0009a3af 	.word	0x0009a3af
   9a318:	0009a31d 	.word	0x0009a31d
   9a31c:	4b6a      	ldr	r3, [pc, #424]	; (9a4c8 <Cl_disinf_controller+0x60c>)
   9a31e:	881b      	ldrh	r3, [r3, #0]
   9a320:	3301      	adds	r3, #1
   9a322:	b29a      	uxth	r2, r3
   9a324:	4b68      	ldr	r3, [pc, #416]	; (9a4c8 <Cl_disinf_controller+0x60c>)
   9a326:	801a      	strh	r2, [r3, #0]
   9a328:	4b67      	ldr	r3, [pc, #412]	; (9a4c8 <Cl_disinf_controller+0x60c>)
   9a32a:	881b      	ldrh	r3, [r3, #0]
   9a32c:	2b03      	cmp	r3, #3
   9a32e:	d902      	bls.n	9a336 <Cl_disinf_controller+0x47a>
   9a330:	4b66      	ldr	r3, [pc, #408]	; (9a4cc <Cl_disinf_controller+0x610>)
   9a332:	2201      	movs	r2, #1
   9a334:	701a      	strb	r2, [r3, #0]
   9a336:	4b65      	ldr	r3, [pc, #404]	; (9a4cc <Cl_disinf_controller+0x610>)
   9a338:	781b      	ldrb	r3, [r3, #0]
   9a33a:	2b00      	cmp	r3, #0
   9a33c:	d03a      	beq.n	9a3b4 <Cl_disinf_controller+0x4f8>
   9a33e:	4b64      	ldr	r3, [pc, #400]	; (9a4d0 <Cl_disinf_controller+0x614>)
   9a340:	781b      	ldrb	r3, [r3, #0]
   9a342:	2b01      	cmp	r3, #1
   9a344:	d119      	bne.n	9a37a <Cl_disinf_controller+0x4be>
   9a346:	2001      	movs	r0, #1
   9a348:	4b62      	ldr	r3, [pc, #392]	; (9a4d4 <Cl_disinf_controller+0x618>)
   9a34a:	4798      	blx	r3
   9a34c:	4603      	mov	r3, r0
   9a34e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a352:	2002      	movs	r0, #2
   9a354:	4b5f      	ldr	r3, [pc, #380]	; (9a4d4 <Cl_disinf_controller+0x618>)
   9a356:	4798      	blx	r3
   9a358:	4603      	mov	r3, r0
   9a35a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a35e:	2203      	movs	r2, #3
   9a360:	495d      	ldr	r1, [pc, #372]	; (9a4d8 <Cl_disinf_controller+0x61c>)
   9a362:	2018      	movs	r0, #24
   9a364:	4b51      	ldr	r3, [pc, #324]	; (9a4ac <Cl_disinf_controller+0x5f0>)
   9a366:	4798      	blx	r3
   9a368:	4b5c      	ldr	r3, [pc, #368]	; (9a4dc <Cl_disinf_controller+0x620>)
   9a36a:	4798      	blx	r3
   9a36c:	4b51      	ldr	r3, [pc, #324]	; (9a4b4 <Cl_disinf_controller+0x5f8>)
   9a36e:	2206      	movs	r2, #6
   9a370:	701a      	strb	r2, [r3, #0]
   9a372:	4b55      	ldr	r3, [pc, #340]	; (9a4c8 <Cl_disinf_controller+0x60c>)
   9a374:	2200      	movs	r2, #0
   9a376:	801a      	strh	r2, [r3, #0]
   9a378:	e01c      	b.n	9a3b4 <Cl_disinf_controller+0x4f8>
   9a37a:	2001      	movs	r0, #1
   9a37c:	4b55      	ldr	r3, [pc, #340]	; (9a4d4 <Cl_disinf_controller+0x618>)
   9a37e:	4798      	blx	r3
   9a380:	4603      	mov	r3, r0
   9a382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a386:	2002      	movs	r0, #2
   9a388:	4b52      	ldr	r3, [pc, #328]	; (9a4d4 <Cl_disinf_controller+0x618>)
   9a38a:	4798      	blx	r3
   9a38c:	4603      	mov	r3, r0
   9a38e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a392:	2203      	movs	r2, #3
   9a394:	4950      	ldr	r1, [pc, #320]	; (9a4d8 <Cl_disinf_controller+0x61c>)
   9a396:	2018      	movs	r0, #24
   9a398:	4b44      	ldr	r3, [pc, #272]	; (9a4ac <Cl_disinf_controller+0x5f0>)
   9a39a:	4798      	blx	r3
   9a39c:	4b50      	ldr	r3, [pc, #320]	; (9a4e0 <Cl_disinf_controller+0x624>)
   9a39e:	4798      	blx	r3
   9a3a0:	4b44      	ldr	r3, [pc, #272]	; (9a4b4 <Cl_disinf_controller+0x5f8>)
   9a3a2:	2206      	movs	r2, #6
   9a3a4:	701a      	strb	r2, [r3, #0]
   9a3a6:	4b48      	ldr	r3, [pc, #288]	; (9a4c8 <Cl_disinf_controller+0x60c>)
   9a3a8:	2200      	movs	r2, #0
   9a3aa:	801a      	strh	r2, [r3, #0]
   9a3ac:	e002      	b.n	9a3b4 <Cl_disinf_controller+0x4f8>
   9a3ae:	bf00      	nop
   9a3b0:	f000 bc8f 	b.w	9acd2 <Cl_disinf_controller+0xe16>
   9a3b4:	bf00      	nop
   9a3b6:	f000 bc8c 	b.w	9acd2 <Cl_disinf_controller+0xe16>
   9a3ba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9a3be:	3b0c      	subs	r3, #12
   9a3c0:	2b03      	cmp	r3, #3
   9a3c2:	f200 80e3 	bhi.w	9a58c <Cl_disinf_controller+0x6d0>
   9a3c6:	a201      	add	r2, pc, #4	; (adr r2, 9a3cc <Cl_disinf_controller+0x510>)
   9a3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9a3cc:	0009a58d 	.word	0x0009a58d
   9a3d0:	0009a58d 	.word	0x0009a58d
   9a3d4:	0009a58d 	.word	0x0009a58d
   9a3d8:	0009a3dd 	.word	0x0009a3dd
   9a3dc:	4b41      	ldr	r3, [pc, #260]	; (9a4e4 <Cl_disinf_controller+0x628>)
   9a3de:	681b      	ldr	r3, [r3, #0]
   9a3e0:	3301      	adds	r3, #1
   9a3e2:	4a40      	ldr	r2, [pc, #256]	; (9a4e4 <Cl_disinf_controller+0x628>)
   9a3e4:	6013      	str	r3, [r2, #0]
   9a3e6:	4b40      	ldr	r3, [pc, #256]	; (9a4e8 <Cl_disinf_controller+0x62c>)
   9a3e8:	4798      	blx	r3
   9a3ea:	4b3e      	ldr	r3, [pc, #248]	; (9a4e4 <Cl_disinf_controller+0x628>)
   9a3ec:	681b      	ldr	r3, [r3, #0]
   9a3ee:	2b3c      	cmp	r3, #60	; 0x3c
   9a3f0:	d101      	bne.n	9a3f6 <Cl_disinf_controller+0x53a>
   9a3f2:	4b3e      	ldr	r3, [pc, #248]	; (9a4ec <Cl_disinf_controller+0x630>)
   9a3f4:	4798      	blx	r3
   9a3f6:	4b34      	ldr	r3, [pc, #208]	; (9a4c8 <Cl_disinf_controller+0x60c>)
   9a3f8:	881b      	ldrh	r3, [r3, #0]
   9a3fa:	3301      	adds	r3, #1
   9a3fc:	b29a      	uxth	r2, r3
   9a3fe:	4b32      	ldr	r3, [pc, #200]	; (9a4c8 <Cl_disinf_controller+0x60c>)
   9a400:	801a      	strh	r2, [r3, #0]
   9a402:	4b33      	ldr	r3, [pc, #204]	; (9a4d0 <Cl_disinf_controller+0x614>)
   9a404:	781b      	ldrb	r3, [r3, #0]
   9a406:	2b01      	cmp	r3, #1
   9a408:	d17a      	bne.n	9a500 <Cl_disinf_controller+0x644>
   9a40a:	4b2f      	ldr	r3, [pc, #188]	; (9a4c8 <Cl_disinf_controller+0x60c>)
   9a40c:	881b      	ldrh	r3, [r3, #0]
   9a40e:	2b23      	cmp	r3, #35	; 0x23
   9a410:	f240 80be 	bls.w	9a590 <Cl_disinf_controller+0x6d4>
   9a414:	2203      	movs	r2, #3
   9a416:	4936      	ldr	r1, [pc, #216]	; (9a4f0 <Cl_disinf_controller+0x634>)
   9a418:	2018      	movs	r0, #24
   9a41a:	4b24      	ldr	r3, [pc, #144]	; (9a4ac <Cl_disinf_controller+0x5f0>)
   9a41c:	4798      	blx	r3
   9a41e:	4b35      	ldr	r3, [pc, #212]	; (9a4f4 <Cl_disinf_controller+0x638>)
   9a420:	4798      	blx	r3
   9a422:	2002      	movs	r0, #2
   9a424:	4b2b      	ldr	r3, [pc, #172]	; (9a4d4 <Cl_disinf_controller+0x618>)
   9a426:	4798      	blx	r3
   9a428:	4603      	mov	r3, r0
   9a42a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a42e:	2001      	movs	r0, #1
   9a430:	4b28      	ldr	r3, [pc, #160]	; (9a4d4 <Cl_disinf_controller+0x618>)
   9a432:	4798      	blx	r3
   9a434:	4603      	mov	r3, r0
   9a436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a43a:	2005      	movs	r0, #5
   9a43c:	4b2e      	ldr	r3, [pc, #184]	; (9a4f8 <Cl_disinf_controller+0x63c>)
   9a43e:	4798      	blx	r3
   9a440:	2339      	movs	r3, #57	; 0x39
   9a442:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9a446:	2302      	movs	r3, #2
   9a448:	76fb      	strb	r3, [r7, #27]
   9a44a:	f107 011b 	add.w	r1, r7, #27
   9a44e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a452:	2201      	movs	r2, #1
   9a454:	4618      	mov	r0, r3
   9a456:	4b15      	ldr	r3, [pc, #84]	; (9a4ac <Cl_disinf_controller+0x5f0>)
   9a458:	4798      	blx	r3
   9a45a:	4603      	mov	r3, r0
   9a45c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a460:	2005      	movs	r0, #5
   9a462:	4b26      	ldr	r3, [pc, #152]	; (9a4fc <Cl_disinf_controller+0x640>)
   9a464:	4798      	blx	r3
   9a466:	2338      	movs	r3, #56	; 0x38
   9a468:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9a46c:	2300      	movs	r3, #0
   9a46e:	76fb      	strb	r3, [r7, #27]
   9a470:	4b10      	ldr	r3, [pc, #64]	; (9a4b4 <Cl_disinf_controller+0x5f8>)
   9a472:	2207      	movs	r2, #7
   9a474:	701a      	strb	r2, [r3, #0]
   9a476:	f107 011b 	add.w	r1, r7, #27
   9a47a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a47e:	2200      	movs	r2, #0
   9a480:	4618      	mov	r0, r3
   9a482:	4b0a      	ldr	r3, [pc, #40]	; (9a4ac <Cl_disinf_controller+0x5f0>)
   9a484:	4798      	blx	r3
   9a486:	4603      	mov	r3, r0
   9a488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a48c:	4b09      	ldr	r3, [pc, #36]	; (9a4b4 <Cl_disinf_controller+0x5f8>)
   9a48e:	2207      	movs	r2, #7
   9a490:	701a      	strb	r2, [r3, #0]
   9a492:	e07d      	b.n	9a590 <Cl_disinf_controller+0x6d4>
   9a494:	2007335c 	.word	0x2007335c
   9a498:	20070a68 	.word	0x20070a68
   9a49c:	00083035 	.word	0x00083035
   9a4a0:	00097c05 	.word	0x00097c05
   9a4a4:	00097c41 	.word	0x00097c41
   9a4a8:	000a629c 	.word	0x000a629c
   9a4ac:	00099729 	.word	0x00099729
   9a4b0:	0009b0a9 	.word	0x0009b0a9
   9a4b4:	200727bb 	.word	0x200727bb
   9a4b8:	200727ba 	.word	0x200727ba
   9a4bc:	00097c55 	.word	0x00097c55
   9a4c0:	00097c91 	.word	0x00097c91
   9a4c4:	200727b9 	.word	0x200727b9
   9a4c8:	200727e4 	.word	0x200727e4
   9a4cc:	20070a66 	.word	0x20070a66
   9a4d0:	20072637 	.word	0x20072637
   9a4d4:	00097949 	.word	0x00097949
   9a4d8:	000a62a4 	.word	0x000a62a4
   9a4dc:	00097ddd 	.word	0x00097ddd
   9a4e0:	00097db5 	.word	0x00097db5
   9a4e4:	200727bc 	.word	0x200727bc
   9a4e8:	0009b661 	.word	0x0009b661
   9a4ec:	0009ba39 	.word	0x0009ba39
   9a4f0:	000a62a8 	.word	0x000a62a8
   9a4f4:	00097df1 	.word	0x00097df1
   9a4f8:	00083319 	.word	0x00083319
   9a4fc:	00091e2d 	.word	0x00091e2d
   9a500:	4bad      	ldr	r3, [pc, #692]	; (9a7b8 <Cl_disinf_controller+0x8fc>)
   9a502:	881b      	ldrh	r3, [r3, #0]
   9a504:	2b50      	cmp	r3, #80	; 0x50
   9a506:	d943      	bls.n	9a590 <Cl_disinf_controller+0x6d4>
   9a508:	2203      	movs	r2, #3
   9a50a:	49ac      	ldr	r1, [pc, #688]	; (9a7bc <Cl_disinf_controller+0x900>)
   9a50c:	2018      	movs	r0, #24
   9a50e:	4bac      	ldr	r3, [pc, #688]	; (9a7c0 <Cl_disinf_controller+0x904>)
   9a510:	4798      	blx	r3
   9a512:	4bac      	ldr	r3, [pc, #688]	; (9a7c4 <Cl_disinf_controller+0x908>)
   9a514:	4798      	blx	r3
   9a516:	4bac      	ldr	r3, [pc, #688]	; (9a7c8 <Cl_disinf_controller+0x90c>)
   9a518:	4798      	blx	r3
   9a51a:	2002      	movs	r0, #2
   9a51c:	4bab      	ldr	r3, [pc, #684]	; (9a7cc <Cl_disinf_controller+0x910>)
   9a51e:	4798      	blx	r3
   9a520:	4603      	mov	r3, r0
   9a522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a526:	2001      	movs	r0, #1
   9a528:	4ba8      	ldr	r3, [pc, #672]	; (9a7cc <Cl_disinf_controller+0x910>)
   9a52a:	4798      	blx	r3
   9a52c:	4603      	mov	r3, r0
   9a52e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a532:	2005      	movs	r0, #5
   9a534:	4ba6      	ldr	r3, [pc, #664]	; (9a7d0 <Cl_disinf_controller+0x914>)
   9a536:	4798      	blx	r3
   9a538:	2339      	movs	r3, #57	; 0x39
   9a53a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9a53e:	2302      	movs	r3, #2
   9a540:	76fb      	strb	r3, [r7, #27]
   9a542:	f107 011b 	add.w	r1, r7, #27
   9a546:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a54a:	2201      	movs	r2, #1
   9a54c:	4618      	mov	r0, r3
   9a54e:	4b9c      	ldr	r3, [pc, #624]	; (9a7c0 <Cl_disinf_controller+0x904>)
   9a550:	4798      	blx	r3
   9a552:	4603      	mov	r3, r0
   9a554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a558:	2005      	movs	r0, #5
   9a55a:	4b9e      	ldr	r3, [pc, #632]	; (9a7d4 <Cl_disinf_controller+0x918>)
   9a55c:	4798      	blx	r3
   9a55e:	2338      	movs	r3, #56	; 0x38
   9a560:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9a564:	2300      	movs	r3, #0
   9a566:	76fb      	strb	r3, [r7, #27]
   9a568:	4b9b      	ldr	r3, [pc, #620]	; (9a7d8 <Cl_disinf_controller+0x91c>)
   9a56a:	2207      	movs	r2, #7
   9a56c:	701a      	strb	r2, [r3, #0]
   9a56e:	f107 011b 	add.w	r1, r7, #27
   9a572:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a576:	2200      	movs	r2, #0
   9a578:	4618      	mov	r0, r3
   9a57a:	4b91      	ldr	r3, [pc, #580]	; (9a7c0 <Cl_disinf_controller+0x904>)
   9a57c:	4798      	blx	r3
   9a57e:	4603      	mov	r3, r0
   9a580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a584:	4b94      	ldr	r3, [pc, #592]	; (9a7d8 <Cl_disinf_controller+0x91c>)
   9a586:	2207      	movs	r2, #7
   9a588:	701a      	strb	r2, [r3, #0]
   9a58a:	e001      	b.n	9a590 <Cl_disinf_controller+0x6d4>
   9a58c:	bf00      	nop
   9a58e:	e3a0      	b.n	9acd2 <Cl_disinf_controller+0xe16>
   9a590:	bf00      	nop
   9a592:	e39e      	b.n	9acd2 <Cl_disinf_controller+0xe16>
   9a594:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9a598:	2b02      	cmp	r3, #2
   9a59a:	d000      	beq.n	9a59e <Cl_disinf_controller+0x6e2>
   9a59c:	e058      	b.n	9a650 <Cl_disinf_controller+0x794>
   9a59e:	2002      	movs	r0, #2
   9a5a0:	4b8e      	ldr	r3, [pc, #568]	; (9a7dc <Cl_disinf_controller+0x920>)
   9a5a2:	4798      	blx	r3
   9a5a4:	4603      	mov	r3, r0
   9a5a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a5aa:	2001      	movs	r0, #1
   9a5ac:	4b8b      	ldr	r3, [pc, #556]	; (9a7dc <Cl_disinf_controller+0x920>)
   9a5ae:	4798      	blx	r3
   9a5b0:	4603      	mov	r3, r0
   9a5b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a5b6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   9a5ba:	2002      	movs	r0, #2
   9a5bc:	4b88      	ldr	r3, [pc, #544]	; (9a7e0 <Cl_disinf_controller+0x924>)
   9a5be:	4798      	blx	r3
   9a5c0:	4603      	mov	r3, r0
   9a5c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a5c6:	f44f 71c8 	mov.w	r1, #400	; 0x190
   9a5ca:	2001      	movs	r0, #1
   9a5cc:	4b84      	ldr	r3, [pc, #528]	; (9a7e0 <Cl_disinf_controller+0x924>)
   9a5ce:	4798      	blx	r3
   9a5d0:	4603      	mov	r3, r0
   9a5d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a5d6:	4b83      	ldr	r3, [pc, #524]	; (9a7e4 <Cl_disinf_controller+0x928>)
   9a5d8:	2201      	movs	r2, #1
   9a5da:	701a      	strb	r2, [r3, #0]
   9a5dc:	2004      	movs	r0, #4
   9a5de:	4b7c      	ldr	r3, [pc, #496]	; (9a7d0 <Cl_disinf_controller+0x914>)
   9a5e0:	4798      	blx	r3
   9a5e2:	4b81      	ldr	r3, [pc, #516]	; (9a7e8 <Cl_disinf_controller+0x92c>)
   9a5e4:	4798      	blx	r3
   9a5e6:	4b81      	ldr	r3, [pc, #516]	; (9a7ec <Cl_disinf_controller+0x930>)
   9a5e8:	4798      	blx	r3
   9a5ea:	4b81      	ldr	r3, [pc, #516]	; (9a7f0 <Cl_disinf_controller+0x934>)
   9a5ec:	781b      	ldrb	r3, [r3, #0]
   9a5ee:	2b01      	cmp	r3, #1
   9a5f0:	d105      	bne.n	9a5fe <Cl_disinf_controller+0x742>
   9a5f2:	4b80      	ldr	r3, [pc, #512]	; (9a7f4 <Cl_disinf_controller+0x938>)
   9a5f4:	4798      	blx	r3
   9a5f6:	f640 50ac 	movw	r0, #3500	; 0xdac
   9a5fa:	4b7f      	ldr	r3, [pc, #508]	; (9a7f8 <Cl_disinf_controller+0x93c>)
   9a5fc:	4798      	blx	r3
   9a5fe:	2002      	movs	r0, #2
   9a600:	4b7e      	ldr	r3, [pc, #504]	; (9a7fc <Cl_disinf_controller+0x940>)
   9a602:	4798      	blx	r3
   9a604:	2003      	movs	r0, #3
   9a606:	4b7d      	ldr	r3, [pc, #500]	; (9a7fc <Cl_disinf_controller+0x940>)
   9a608:	4798      	blx	r3
   9a60a:	4b7d      	ldr	r3, [pc, #500]	; (9a800 <Cl_disinf_controller+0x944>)
   9a60c:	4798      	blx	r3
   9a60e:	4b6a      	ldr	r3, [pc, #424]	; (9a7b8 <Cl_disinf_controller+0x8fc>)
   9a610:	2200      	movs	r2, #0
   9a612:	801a      	strh	r2, [r3, #0]
   9a614:	4b70      	ldr	r3, [pc, #448]	; (9a7d8 <Cl_disinf_controller+0x91c>)
   9a616:	2211      	movs	r2, #17
   9a618:	701a      	strb	r2, [r3, #0]
   9a61a:	2300      	movs	r3, #0
   9a61c:	9300      	str	r3, [sp, #0]
   9a61e:	f04f 0300 	mov.w	r3, #0
   9a622:	f04f 0200 	mov.w	r2, #0
   9a626:	2100      	movs	r1, #0
   9a628:	2029      	movs	r0, #41	; 0x29
   9a62a:	4c76      	ldr	r4, [pc, #472]	; (9a804 <Cl_disinf_controller+0x948>)
   9a62c:	47a0      	blx	r4
   9a62e:	4603      	mov	r3, r0
   9a630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a634:	2300      	movs	r3, #0
   9a636:	9300      	str	r3, [sp, #0]
   9a638:	f04f 0300 	mov.w	r3, #0
   9a63c:	f04f 0200 	mov.w	r2, #0
   9a640:	2100      	movs	r1, #0
   9a642:	202b      	movs	r0, #43	; 0x2b
   9a644:	4c6f      	ldr	r4, [pc, #444]	; (9a804 <Cl_disinf_controller+0x948>)
   9a646:	47a0      	blx	r4
   9a648:	4603      	mov	r3, r0
   9a64a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a64e:	bf00      	nop
   9a650:	e33f      	b.n	9acd2 <Cl_disinf_controller+0xe16>
   9a652:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9a656:	2b13      	cmp	r3, #19
   9a658:	d004      	beq.n	9a664 <Cl_disinf_controller+0x7a8>
   9a65a:	2b25      	cmp	r3, #37	; 0x25
   9a65c:	d008      	beq.n	9a670 <Cl_disinf_controller+0x7b4>
   9a65e:	2b0f      	cmp	r3, #15
   9a660:	d018      	beq.n	9a694 <Cl_disinf_controller+0x7d8>
   9a662:	e336      	b.n	9acd2 <Cl_disinf_controller+0xe16>
   9a664:	4b68      	ldr	r3, [pc, #416]	; (9a808 <Cl_disinf_controller+0x94c>)
   9a666:	4798      	blx	r3
   9a668:	4603      	mov	r3, r0
   9a66a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a66e:	e088      	b.n	9a782 <Cl_disinf_controller+0x8c6>
   9a670:	4b66      	ldr	r3, [pc, #408]	; (9a80c <Cl_disinf_controller+0x950>)
   9a672:	4798      	blx	r3
   9a674:	4b66      	ldr	r3, [pc, #408]	; (9a810 <Cl_disinf_controller+0x954>)
   9a676:	4798      	blx	r3
   9a678:	4b66      	ldr	r3, [pc, #408]	; (9a814 <Cl_disinf_controller+0x958>)
   9a67a:	4798      	blx	r3
   9a67c:	4b66      	ldr	r3, [pc, #408]	; (9a818 <Cl_disinf_controller+0x95c>)
   9a67e:	781b      	ldrb	r3, [r3, #0]
   9a680:	b2db      	uxtb	r3, r3
   9a682:	2b01      	cmp	r3, #1
   9a684:	d17c      	bne.n	9a780 <Cl_disinf_controller+0x8c4>
   9a686:	4b54      	ldr	r3, [pc, #336]	; (9a7d8 <Cl_disinf_controller+0x91c>)
   9a688:	2208      	movs	r2, #8
   9a68a:	701a      	strb	r2, [r3, #0]
   9a68c:	4b62      	ldr	r3, [pc, #392]	; (9a818 <Cl_disinf_controller+0x95c>)
   9a68e:	2200      	movs	r2, #0
   9a690:	701a      	strb	r2, [r3, #0]
   9a692:	e075      	b.n	9a780 <Cl_disinf_controller+0x8c4>
   9a694:	4b61      	ldr	r3, [pc, #388]	; (9a81c <Cl_disinf_controller+0x960>)
   9a696:	2200      	movs	r2, #0
   9a698:	801a      	strh	r2, [r3, #0]
   9a69a:	e06c      	b.n	9a776 <Cl_disinf_controller+0x8ba>
   9a69c:	4b5f      	ldr	r3, [pc, #380]	; (9a81c <Cl_disinf_controller+0x960>)
   9a69e:	881b      	ldrh	r3, [r3, #0]
   9a6a0:	4619      	mov	r1, r3
   9a6a2:	4a5f      	ldr	r2, [pc, #380]	; (9a820 <Cl_disinf_controller+0x964>)
   9a6a4:	460b      	mov	r3, r1
   9a6a6:	00db      	lsls	r3, r3, #3
   9a6a8:	1a5b      	subs	r3, r3, r1
   9a6aa:	4413      	add	r3, r2
   9a6ac:	7818      	ldrb	r0, [r3, #0]
   9a6ae:	4b5b      	ldr	r3, [pc, #364]	; (9a81c <Cl_disinf_controller+0x960>)
   9a6b0:	881b      	ldrh	r3, [r3, #0]
   9a6b2:	461a      	mov	r2, r3
   9a6b4:	4613      	mov	r3, r2
   9a6b6:	00db      	lsls	r3, r3, #3
   9a6b8:	1a9b      	subs	r3, r3, r2
   9a6ba:	4a59      	ldr	r2, [pc, #356]	; (9a820 <Cl_disinf_controller+0x964>)
   9a6bc:	4413      	add	r3, r2
   9a6be:	3302      	adds	r3, #2
   9a6c0:	4619      	mov	r1, r3
   9a6c2:	4b58      	ldr	r3, [pc, #352]	; (9a824 <Cl_disinf_controller+0x968>)
   9a6c4:	4798      	blx	r3
   9a6c6:	4b55      	ldr	r3, [pc, #340]	; (9a81c <Cl_disinf_controller+0x960>)
   9a6c8:	881b      	ldrh	r3, [r3, #0]
   9a6ca:	4619      	mov	r1, r3
   9a6cc:	4a54      	ldr	r2, [pc, #336]	; (9a820 <Cl_disinf_controller+0x964>)
   9a6ce:	460b      	mov	r3, r1
   9a6d0:	00db      	lsls	r3, r3, #3
   9a6d2:	1a5b      	subs	r3, r3, r1
   9a6d4:	4413      	add	r3, r2
   9a6d6:	3302      	adds	r3, #2
   9a6d8:	781b      	ldrb	r3, [r3, #0]
   9a6da:	2b00      	cmp	r3, #0
   9a6dc:	d015      	beq.n	9a70a <Cl_disinf_controller+0x84e>
   9a6de:	4b52      	ldr	r3, [pc, #328]	; (9a828 <Cl_disinf_controller+0x96c>)
   9a6e0:	4798      	blx	r3
   9a6e2:	4b52      	ldr	r3, [pc, #328]	; (9a82c <Cl_disinf_controller+0x970>)
   9a6e4:	4798      	blx	r3
   9a6e6:	2208      	movs	r2, #8
   9a6e8:	4951      	ldr	r1, [pc, #324]	; (9a830 <Cl_disinf_controller+0x974>)
   9a6ea:	2018      	movs	r0, #24
   9a6ec:	4b34      	ldr	r3, [pc, #208]	; (9a7c0 <Cl_disinf_controller+0x904>)
   9a6ee:	4798      	blx	r3
   9a6f0:	4b50      	ldr	r3, [pc, #320]	; (9a834 <Cl_disinf_controller+0x978>)
   9a6f2:	4798      	blx	r3
   9a6f4:	4b38      	ldr	r3, [pc, #224]	; (9a7d8 <Cl_disinf_controller+0x91c>)
   9a6f6:	2211      	movs	r2, #17
   9a6f8:	701a      	strb	r2, [r3, #0]
   9a6fa:	4b4f      	ldr	r3, [pc, #316]	; (9a838 <Cl_disinf_controller+0x97c>)
   9a6fc:	2201      	movs	r2, #1
   9a6fe:	701a      	strb	r2, [r3, #0]
   9a700:	4b46      	ldr	r3, [pc, #280]	; (9a81c <Cl_disinf_controller+0x960>)
   9a702:	2200      	movs	r2, #0
   9a704:	801a      	strh	r2, [r3, #0]
   9a706:	bf00      	nop
   9a708:	e03b      	b.n	9a782 <Cl_disinf_controller+0x8c6>
   9a70a:	4b44      	ldr	r3, [pc, #272]	; (9a81c <Cl_disinf_controller+0x960>)
   9a70c:	881b      	ldrh	r3, [r3, #0]
   9a70e:	2b0b      	cmp	r3, #11
   9a710:	d12b      	bne.n	9a76a <Cl_disinf_controller+0x8ae>
   9a712:	4b42      	ldr	r3, [pc, #264]	; (9a81c <Cl_disinf_controller+0x960>)
   9a714:	881b      	ldrh	r3, [r3, #0]
   9a716:	4619      	mov	r1, r3
   9a718:	4a41      	ldr	r2, [pc, #260]	; (9a820 <Cl_disinf_controller+0x964>)
   9a71a:	460b      	mov	r3, r1
   9a71c:	00db      	lsls	r3, r3, #3
   9a71e:	1a5b      	subs	r3, r3, r1
   9a720:	4413      	add	r3, r2
   9a722:	3302      	adds	r3, #2
   9a724:	781b      	ldrb	r3, [r3, #0]
   9a726:	f083 0301 	eor.w	r3, r3, #1
   9a72a:	b2db      	uxtb	r3, r3
   9a72c:	2b00      	cmp	r3, #0
   9a72e:	d01c      	beq.n	9a76a <Cl_disinf_controller+0x8ae>
   9a730:	4b36      	ldr	r3, [pc, #216]	; (9a80c <Cl_disinf_controller+0x950>)
   9a732:	4798      	blx	r3
   9a734:	4b36      	ldr	r3, [pc, #216]	; (9a810 <Cl_disinf_controller+0x954>)
   9a736:	4798      	blx	r3
   9a738:	4b37      	ldr	r3, [pc, #220]	; (9a818 <Cl_disinf_controller+0x95c>)
   9a73a:	2201      	movs	r2, #1
   9a73c:	701a      	strb	r2, [r3, #0]
   9a73e:	4b3e      	ldr	r3, [pc, #248]	; (9a838 <Cl_disinf_controller+0x97c>)
   9a740:	781b      	ldrb	r3, [r3, #0]
   9a742:	b2db      	uxtb	r3, r3
   9a744:	2b00      	cmp	r3, #0
   9a746:	d110      	bne.n	9a76a <Cl_disinf_controller+0x8ae>
   9a748:	233b      	movs	r3, #59	; 0x3b
   9a74a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9a74e:	f107 011b 	add.w	r1, r7, #27
   9a752:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a756:	2200      	movs	r2, #0
   9a758:	4618      	mov	r0, r3
   9a75a:	4b19      	ldr	r3, [pc, #100]	; (9a7c0 <Cl_disinf_controller+0x904>)
   9a75c:	4798      	blx	r3
   9a75e:	4603      	mov	r3, r0
   9a760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a764:	4b1c      	ldr	r3, [pc, #112]	; (9a7d8 <Cl_disinf_controller+0x91c>)
   9a766:	2208      	movs	r2, #8
   9a768:	701a      	strb	r2, [r3, #0]
   9a76a:	4b2c      	ldr	r3, [pc, #176]	; (9a81c <Cl_disinf_controller+0x960>)
   9a76c:	881b      	ldrh	r3, [r3, #0]
   9a76e:	3301      	adds	r3, #1
   9a770:	b29a      	uxth	r2, r3
   9a772:	4b2a      	ldr	r3, [pc, #168]	; (9a81c <Cl_disinf_controller+0x960>)
   9a774:	801a      	strh	r2, [r3, #0]
   9a776:	4b29      	ldr	r3, [pc, #164]	; (9a81c <Cl_disinf_controller+0x960>)
   9a778:	881b      	ldrh	r3, [r3, #0]
   9a77a:	2b0b      	cmp	r3, #11
   9a77c:	d98e      	bls.n	9a69c <Cl_disinf_controller+0x7e0>
   9a77e:	e000      	b.n	9a782 <Cl_disinf_controller+0x8c6>
   9a780:	bf00      	nop
   9a782:	e2a6      	b.n	9acd2 <Cl_disinf_controller+0xe16>
   9a784:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9a788:	3b0c      	subs	r3, #12
   9a78a:	2b07      	cmp	r3, #7
   9a78c:	f200 80e6 	bhi.w	9a95c <Cl_disinf_controller+0xaa0>
   9a790:	a201      	add	r2, pc, #4	; (adr r2, 9a798 <Cl_disinf_controller+0x8dc>)
   9a792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9a796:	bf00      	nop
   9a798:	0009a95d 	.word	0x0009a95d
   9a79c:	0009a95d 	.word	0x0009a95d
   9a7a0:	0009a83d 	.word	0x0009a83d
   9a7a4:	0009a857 	.word	0x0009a857
   9a7a8:	0009a95d 	.word	0x0009a95d
   9a7ac:	0009a95d 	.word	0x0009a95d
   9a7b0:	0009a95d 	.word	0x0009a95d
   9a7b4:	0009a931 	.word	0x0009a931
   9a7b8:	200727e4 	.word	0x200727e4
   9a7bc:	000a62a8 	.word	0x000a62a8
   9a7c0:	00099729 	.word	0x00099729
   9a7c4:	00097dc9 	.word	0x00097dc9
   9a7c8:	00097df1 	.word	0x00097df1
   9a7cc:	00097949 	.word	0x00097949
   9a7d0:	00083319 	.word	0x00083319
   9a7d4:	00091e2d 	.word	0x00091e2d
   9a7d8:	200727bb 	.word	0x200727bb
   9a7dc:	0009790d 	.word	0x0009790d
   9a7e0:	00097a25 	.word	0x00097a25
   9a7e4:	200727e6 	.word	0x200727e6
   9a7e8:	00097b21 	.word	0x00097b21
   9a7ec:	00097b59 	.word	0x00097b59
   9a7f0:	20072637 	.word	0x20072637
   9a7f4:	00097985 	.word	0x00097985
   9a7f8:	00097a8d 	.word	0x00097a8d
   9a7fc:	000979ad 	.word	0x000979ad
   9a800:	00097d55 	.word	0x00097d55
   9a804:	00082ea1 	.word	0x00082ea1
   9a808:	0009b331 	.word	0x0009b331
   9a80c:	00097c55 	.word	0x00097c55
   9a810:	00097c91 	.word	0x00097c91
   9a814:	0009b13d 	.word	0x0009b13d
   9a818:	200727b9 	.word	0x200727b9
   9a81c:	2007335c 	.word	0x2007335c
   9a820:	20070a68 	.word	0x20070a68
   9a824:	00083035 	.word	0x00083035
   9a828:	00097c05 	.word	0x00097c05
   9a82c:	00097c41 	.word	0x00097c41
   9a830:	000a629c 	.word	0x000a629c
   9a834:	0009b0a9 	.word	0x0009b0a9
   9a838:	200727ba 	.word	0x200727ba
   9a83c:	4bb9      	ldr	r3, [pc, #740]	; (9ab24 <Cl_disinf_controller+0xc68>)
   9a83e:	681a      	ldr	r2, [r3, #0]
   9a840:	4bb9      	ldr	r3, [pc, #740]	; (9ab28 <Cl_disinf_controller+0xc6c>)
   9a842:	49ba      	ldr	r1, [pc, #744]	; (9ab2c <Cl_disinf_controller+0xc70>)
   9a844:	4610      	mov	r0, r2
   9a846:	4798      	blx	r3
   9a848:	4603      	mov	r3, r0
   9a84a:	2b00      	cmp	r3, #0
   9a84c:	d100      	bne.n	9a850 <Cl_disinf_controller+0x994>
   9a84e:	e088      	b.n	9a962 <Cl_disinf_controller+0xaa6>
   9a850:	4bb7      	ldr	r3, [pc, #732]	; (9ab30 <Cl_disinf_controller+0xc74>)
   9a852:	4798      	blx	r3
   9a854:	e085      	b.n	9a962 <Cl_disinf_controller+0xaa6>
   9a856:	4bb7      	ldr	r3, [pc, #732]	; (9ab34 <Cl_disinf_controller+0xc78>)
   9a858:	4798      	blx	r3
   9a85a:	4bb7      	ldr	r3, [pc, #732]	; (9ab38 <Cl_disinf_controller+0xc7c>)
   9a85c:	681b      	ldr	r3, [r3, #0]
   9a85e:	3301      	adds	r3, #1
   9a860:	4ab5      	ldr	r2, [pc, #724]	; (9ab38 <Cl_disinf_controller+0xc7c>)
   9a862:	6013      	str	r3, [r2, #0]
   9a864:	4bb5      	ldr	r3, [pc, #724]	; (9ab3c <Cl_disinf_controller+0xc80>)
   9a866:	4798      	blx	r3
   9a868:	4bb3      	ldr	r3, [pc, #716]	; (9ab38 <Cl_disinf_controller+0xc7c>)
   9a86a:	681b      	ldr	r3, [r3, #0]
   9a86c:	2b3c      	cmp	r3, #60	; 0x3c
   9a86e:	d101      	bne.n	9a874 <Cl_disinf_controller+0x9b8>
   9a870:	4bb3      	ldr	r3, [pc, #716]	; (9ab40 <Cl_disinf_controller+0xc84>)
   9a872:	4798      	blx	r3
   9a874:	4bb3      	ldr	r3, [pc, #716]	; (9ab44 <Cl_disinf_controller+0xc88>)
   9a876:	681b      	ldr	r3, [r3, #0]
   9a878:	2b0f      	cmp	r3, #15
   9a87a:	dd71      	ble.n	9a960 <Cl_disinf_controller+0xaa4>
   9a87c:	4bb2      	ldr	r3, [pc, #712]	; (9ab48 <Cl_disinf_controller+0xc8c>)
   9a87e:	4798      	blx	r3
   9a880:	2002      	movs	r0, #2
   9a882:	4bb2      	ldr	r3, [pc, #712]	; (9ab4c <Cl_disinf_controller+0xc90>)
   9a884:	4798      	blx	r3
   9a886:	2003      	movs	r0, #3
   9a888:	4bb0      	ldr	r3, [pc, #704]	; (9ab4c <Cl_disinf_controller+0xc90>)
   9a88a:	4798      	blx	r3
   9a88c:	4ba8      	ldr	r3, [pc, #672]	; (9ab30 <Cl_disinf_controller+0xc74>)
   9a88e:	4798      	blx	r3
   9a890:	4baf      	ldr	r3, [pc, #700]	; (9ab50 <Cl_disinf_controller+0xc94>)
   9a892:	4798      	blx	r3
   9a894:	4baf      	ldr	r3, [pc, #700]	; (9ab54 <Cl_disinf_controller+0xc98>)
   9a896:	2200      	movs	r2, #0
   9a898:	701a      	strb	r2, [r3, #0]
   9a89a:	2002      	movs	r0, #2
   9a89c:	4bae      	ldr	r3, [pc, #696]	; (9ab58 <Cl_disinf_controller+0xc9c>)
   9a89e:	4798      	blx	r3
   9a8a0:	4603      	mov	r3, r0
   9a8a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a8a6:	2001      	movs	r0, #1
   9a8a8:	4bab      	ldr	r3, [pc, #684]	; (9ab58 <Cl_disinf_controller+0xc9c>)
   9a8aa:	4798      	blx	r3
   9a8ac:	4603      	mov	r3, r0
   9a8ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a8b2:	2005      	movs	r0, #5
   9a8b4:	4ba9      	ldr	r3, [pc, #676]	; (9ab5c <Cl_disinf_controller+0xca0>)
   9a8b6:	4798      	blx	r3
   9a8b8:	4ba9      	ldr	r3, [pc, #676]	; (9ab60 <Cl_disinf_controller+0xca4>)
   9a8ba:	781b      	ldrb	r3, [r3, #0]
   9a8bc:	2b01      	cmp	r3, #1
   9a8be:	d110      	bne.n	9a8e2 <Cl_disinf_controller+0xa26>
   9a8c0:	2339      	movs	r3, #57	; 0x39
   9a8c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9a8c6:	2304      	movs	r3, #4
   9a8c8:	76fb      	strb	r3, [r7, #27]
   9a8ca:	f107 011b 	add.w	r1, r7, #27
   9a8ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a8d2:	2201      	movs	r2, #1
   9a8d4:	4618      	mov	r0, r3
   9a8d6:	4ba3      	ldr	r3, [pc, #652]	; (9ab64 <Cl_disinf_controller+0xca8>)
   9a8d8:	4798      	blx	r3
   9a8da:	4603      	mov	r3, r0
   9a8dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a8e0:	e013      	b.n	9a90a <Cl_disinf_controller+0xa4e>
   9a8e2:	4ba1      	ldr	r3, [pc, #644]	; (9ab68 <Cl_disinf_controller+0xcac>)
   9a8e4:	781b      	ldrb	r3, [r3, #0]
   9a8e6:	2b01      	cmp	r3, #1
   9a8e8:	d10f      	bne.n	9a90a <Cl_disinf_controller+0xa4e>
   9a8ea:	2339      	movs	r3, #57	; 0x39
   9a8ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9a8f0:	2303      	movs	r3, #3
   9a8f2:	76fb      	strb	r3, [r7, #27]
   9a8f4:	f107 011b 	add.w	r1, r7, #27
   9a8f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a8fc:	2201      	movs	r2, #1
   9a8fe:	4618      	mov	r0, r3
   9a900:	4b98      	ldr	r3, [pc, #608]	; (9ab64 <Cl_disinf_controller+0xca8>)
   9a902:	4798      	blx	r3
   9a904:	4603      	mov	r3, r0
   9a906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a90a:	4b95      	ldr	r3, [pc, #596]	; (9ab60 <Cl_disinf_controller+0xca4>)
   9a90c:	2200      	movs	r2, #0
   9a90e:	701a      	strb	r2, [r3, #0]
   9a910:	4b95      	ldr	r3, [pc, #596]	; (9ab68 <Cl_disinf_controller+0xcac>)
   9a912:	2200      	movs	r2, #0
   9a914:	701a      	strb	r2, [r3, #0]
   9a916:	4b95      	ldr	r3, [pc, #596]	; (9ab6c <Cl_disinf_controller+0xcb0>)
   9a918:	2200      	movs	r2, #0
   9a91a:	701a      	strb	r2, [r3, #0]
   9a91c:	2045      	movs	r0, #69	; 0x45
   9a91e:	4b94      	ldr	r3, [pc, #592]	; (9ab70 <Cl_disinf_controller+0xcb4>)
   9a920:	4798      	blx	r3
   9a922:	4603      	mov	r3, r0
   9a924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a928:	4b92      	ldr	r3, [pc, #584]	; (9ab74 <Cl_disinf_controller+0xcb8>)
   9a92a:	220a      	movs	r2, #10
   9a92c:	701a      	strb	r2, [r3, #0]
   9a92e:	e017      	b.n	9a960 <Cl_disinf_controller+0xaa4>
   9a930:	4b91      	ldr	r3, [pc, #580]	; (9ab78 <Cl_disinf_controller+0xcbc>)
   9a932:	4798      	blx	r3
   9a934:	4603      	mov	r3, r0
   9a936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a93a:	2338      	movs	r3, #56	; 0x38
   9a93c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9a940:	2300      	movs	r3, #0
   9a942:	76fb      	strb	r3, [r7, #27]
   9a944:	f107 011b 	add.w	r1, r7, #27
   9a948:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a94c:	2200      	movs	r2, #0
   9a94e:	4618      	mov	r0, r3
   9a950:	4b84      	ldr	r3, [pc, #528]	; (9ab64 <Cl_disinf_controller+0xca8>)
   9a952:	4798      	blx	r3
   9a954:	4603      	mov	r3, r0
   9a956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a95a:	e002      	b.n	9a962 <Cl_disinf_controller+0xaa6>
   9a95c:	bf00      	nop
   9a95e:	e1b8      	b.n	9acd2 <Cl_disinf_controller+0xe16>
   9a960:	bf00      	nop
   9a962:	e1b6      	b.n	9acd2 <Cl_disinf_controller+0xe16>
   9a964:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9a968:	2b02      	cmp	r3, #2
   9a96a:	d000      	beq.n	9a96e <Cl_disinf_controller+0xab2>
   9a96c:	e019      	b.n	9a9a2 <Cl_disinf_controller+0xae6>
   9a96e:	2045      	movs	r0, #69	; 0x45
   9a970:	4b7f      	ldr	r3, [pc, #508]	; (9ab70 <Cl_disinf_controller+0xcb4>)
   9a972:	4798      	blx	r3
   9a974:	4603      	mov	r3, r0
   9a976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a97a:	233b      	movs	r3, #59	; 0x3b
   9a97c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9a980:	2300      	movs	r3, #0
   9a982:	76fb      	strb	r3, [r7, #27]
   9a984:	f107 011b 	add.w	r1, r7, #27
   9a988:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a98c:	2200      	movs	r2, #0
   9a98e:	4618      	mov	r0, r3
   9a990:	4b74      	ldr	r3, [pc, #464]	; (9ab64 <Cl_disinf_controller+0xca8>)
   9a992:	4798      	blx	r3
   9a994:	4603      	mov	r3, r0
   9a996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a99a:	4b76      	ldr	r3, [pc, #472]	; (9ab74 <Cl_disinf_controller+0xcb8>)
   9a99c:	220a      	movs	r2, #10
   9a99e:	701a      	strb	r2, [r3, #0]
   9a9a0:	bf00      	nop
   9a9a2:	e196      	b.n	9acd2 <Cl_disinf_controller+0xe16>
   9a9a4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9a9a8:	2b0f      	cmp	r3, #15
   9a9aa:	d01c      	beq.n	9a9e6 <Cl_disinf_controller+0xb2a>
   9a9ac:	2b23      	cmp	r3, #35	; 0x23
   9a9ae:	d000      	beq.n	9a9b2 <Cl_disinf_controller+0xaf6>
   9a9b0:	e027      	b.n	9aa02 <Cl_disinf_controller+0xb46>
   9a9b2:	233a      	movs	r3, #58	; 0x3a
   9a9b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9a9b8:	2300      	movs	r3, #0
   9a9ba:	76fb      	strb	r3, [r7, #27]
   9a9bc:	f107 011b 	add.w	r1, r7, #27
   9a9c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a9c4:	2200      	movs	r2, #0
   9a9c6:	4618      	mov	r0, r3
   9a9c8:	4b66      	ldr	r3, [pc, #408]	; (9ab64 <Cl_disinf_controller+0xca8>)
   9a9ca:	4798      	blx	r3
   9a9cc:	4603      	mov	r3, r0
   9a9ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a9d2:	2054      	movs	r0, #84	; 0x54
   9a9d4:	4b66      	ldr	r3, [pc, #408]	; (9ab70 <Cl_disinf_controller+0xcb4>)
   9a9d6:	4798      	blx	r3
   9a9d8:	4603      	mov	r3, r0
   9a9da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a9de:	4b65      	ldr	r3, [pc, #404]	; (9ab74 <Cl_disinf_controller+0xcb8>)
   9a9e0:	220f      	movs	r2, #15
   9a9e2:	701a      	strb	r2, [r3, #0]
   9a9e4:	e00d      	b.n	9aa02 <Cl_disinf_controller+0xb46>
   9a9e6:	4b54      	ldr	r3, [pc, #336]	; (9ab38 <Cl_disinf_controller+0xc7c>)
   9a9e8:	681b      	ldr	r3, [r3, #0]
   9a9ea:	3301      	adds	r3, #1
   9a9ec:	4a52      	ldr	r2, [pc, #328]	; (9ab38 <Cl_disinf_controller+0xc7c>)
   9a9ee:	6013      	str	r3, [r2, #0]
   9a9f0:	4b52      	ldr	r3, [pc, #328]	; (9ab3c <Cl_disinf_controller+0xc80>)
   9a9f2:	4798      	blx	r3
   9a9f4:	4b50      	ldr	r3, [pc, #320]	; (9ab38 <Cl_disinf_controller+0xc7c>)
   9a9f6:	681b      	ldr	r3, [r3, #0]
   9a9f8:	2b3c      	cmp	r3, #60	; 0x3c
   9a9fa:	d101      	bne.n	9aa00 <Cl_disinf_controller+0xb44>
   9a9fc:	4b50      	ldr	r3, [pc, #320]	; (9ab40 <Cl_disinf_controller+0xc84>)
   9a9fe:	4798      	blx	r3
   9aa00:	bf00      	nop
   9aa02:	e166      	b.n	9acd2 <Cl_disinf_controller+0xe16>
   9aa04:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9aa08:	2b01      	cmp	r3, #1
   9aa0a:	d009      	beq.n	9aa20 <Cl_disinf_controller+0xb64>
   9aa0c:	2b24      	cmp	r3, #36	; 0x24
   9aa0e:	d000      	beq.n	9aa12 <Cl_disinf_controller+0xb56>
   9aa10:	e15f      	b.n	9acd2 <Cl_disinf_controller+0xe16>
   9aa12:	2045      	movs	r0, #69	; 0x45
   9aa14:	4b56      	ldr	r3, [pc, #344]	; (9ab70 <Cl_disinf_controller+0xcb4>)
   9aa16:	4798      	blx	r3
   9aa18:	4603      	mov	r3, r0
   9aa1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9aa1e:	e02d      	b.n	9aa7c <Cl_disinf_controller+0xbc0>
   9aa20:	2044      	movs	r0, #68	; 0x44
   9aa22:	4b53      	ldr	r3, [pc, #332]	; (9ab70 <Cl_disinf_controller+0xcb4>)
   9aa24:	4798      	blx	r3
   9aa26:	4603      	mov	r3, r0
   9aa28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9aa2c:	4b53      	ldr	r3, [pc, #332]	; (9ab7c <Cl_disinf_controller+0xcc0>)
   9aa2e:	7e1b      	ldrb	r3, [r3, #24]
   9aa30:	2b00      	cmp	r3, #0
   9aa32:	d00f      	beq.n	9aa54 <Cl_disinf_controller+0xb98>
   9aa34:	4b51      	ldr	r3, [pc, #324]	; (9ab7c <Cl_disinf_controller+0xcc0>)
   9aa36:	791b      	ldrb	r3, [r3, #4]
   9aa38:	743b      	strb	r3, [r7, #16]
   9aa3a:	7c3b      	ldrb	r3, [r7, #16]
   9aa3c:	2b04      	cmp	r3, #4
   9aa3e:	d103      	bne.n	9aa48 <Cl_disinf_controller+0xb8c>
   9aa40:	4b47      	ldr	r3, [pc, #284]	; (9ab60 <Cl_disinf_controller+0xca4>)
   9aa42:	2201      	movs	r2, #1
   9aa44:	701a      	strb	r2, [r3, #0]
   9aa46:	e005      	b.n	9aa54 <Cl_disinf_controller+0xb98>
   9aa48:	7c3b      	ldrb	r3, [r7, #16]
   9aa4a:	2b03      	cmp	r3, #3
   9aa4c:	d102      	bne.n	9aa54 <Cl_disinf_controller+0xb98>
   9aa4e:	4b46      	ldr	r3, [pc, #280]	; (9ab68 <Cl_disinf_controller+0xcac>)
   9aa50:	2201      	movs	r2, #1
   9aa52:	701a      	strb	r2, [r3, #0]
   9aa54:	233c      	movs	r3, #60	; 0x3c
   9aa56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9aa5a:	2301      	movs	r3, #1
   9aa5c:	76fb      	strb	r3, [r7, #27]
   9aa5e:	f107 011b 	add.w	r1, r7, #27
   9aa62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9aa66:	2201      	movs	r2, #1
   9aa68:	4618      	mov	r0, r3
   9aa6a:	4b3e      	ldr	r3, [pc, #248]	; (9ab64 <Cl_disinf_controller+0xca8>)
   9aa6c:	4798      	blx	r3
   9aa6e:	4603      	mov	r3, r0
   9aa70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9aa74:	4b3f      	ldr	r3, [pc, #252]	; (9ab74 <Cl_disinf_controller+0xcb8>)
   9aa76:	2203      	movs	r2, #3
   9aa78:	701a      	strb	r2, [r3, #0]
   9aa7a:	bf00      	nop
   9aa7c:	e129      	b.n	9acd2 <Cl_disinf_controller+0xe16>
   9aa7e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9aa82:	3b01      	subs	r3, #1
   9aa84:	2b24      	cmp	r3, #36	; 0x24
   9aa86:	f200 8123 	bhi.w	9acd0 <Cl_disinf_controller+0xe14>
   9aa8a:	a201      	add	r2, pc, #4	; (adr r2, 9aa90 <Cl_disinf_controller+0xbd4>)
   9aa8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9aa90:	0009ab81 	.word	0x0009ab81
   9aa94:	0009acd1 	.word	0x0009acd1
   9aa98:	0009acd1 	.word	0x0009acd1
   9aa9c:	0009acd1 	.word	0x0009acd1
   9aaa0:	0009acd1 	.word	0x0009acd1
   9aaa4:	0009acd1 	.word	0x0009acd1
   9aaa8:	0009acd1 	.word	0x0009acd1
   9aaac:	0009acd1 	.word	0x0009acd1
   9aab0:	0009acd1 	.word	0x0009acd1
   9aab4:	0009acd1 	.word	0x0009acd1
   9aab8:	0009acd1 	.word	0x0009acd1
   9aabc:	0009acd1 	.word	0x0009acd1
   9aac0:	0009acd1 	.word	0x0009acd1
   9aac4:	0009acd1 	.word	0x0009acd1
   9aac8:	0009abe9 	.word	0x0009abe9
   9aacc:	0009acbf 	.word	0x0009acbf
   9aad0:	0009acd1 	.word	0x0009acd1
   9aad4:	0009acd1 	.word	0x0009acd1
   9aad8:	0009abdd 	.word	0x0009abdd
   9aadc:	0009acd1 	.word	0x0009acd1
   9aae0:	0009acd1 	.word	0x0009acd1
   9aae4:	0009acd1 	.word	0x0009acd1
   9aae8:	0009acd1 	.word	0x0009acd1
   9aaec:	0009acd1 	.word	0x0009acd1
   9aaf0:	0009acd1 	.word	0x0009acd1
   9aaf4:	0009acd1 	.word	0x0009acd1
   9aaf8:	0009acd1 	.word	0x0009acd1
   9aafc:	0009acd1 	.word	0x0009acd1
   9ab00:	0009acd1 	.word	0x0009acd1
   9ab04:	0009acd1 	.word	0x0009acd1
   9ab08:	0009acd1 	.word	0x0009acd1
   9ab0c:	0009acd1 	.word	0x0009acd1
   9ab10:	0009acd1 	.word	0x0009acd1
   9ab14:	0009acd1 	.word	0x0009acd1
   9ab18:	0009acd1 	.word	0x0009acd1
   9ab1c:	0009acd1 	.word	0x0009acd1
   9ab20:	0009aca7 	.word	0x0009aca7
   9ab24:	20072604 	.word	0x20072604
   9ab28:	000a418d 	.word	0x000a418d
   9ab2c:	42960000 	.word	0x42960000
   9ab30:	00097999 	.word	0x00097999
   9ab34:	0009b591 	.word	0x0009b591
   9ab38:	200727bc 	.word	0x200727bc
   9ab3c:	0009b661 	.word	0x0009b661
   9ab40:	0009ba39 	.word	0x0009ba39
   9ab44:	200727c0 	.word	0x200727c0
   9ab48:	0009b0a9 	.word	0x0009b0a9
   9ab4c:	000979cd 	.word	0x000979cd
   9ab50:	00097da1 	.word	0x00097da1
   9ab54:	20072638 	.word	0x20072638
   9ab58:	00097949 	.word	0x00097949
   9ab5c:	00083319 	.word	0x00083319
   9ab60:	20072637 	.word	0x20072637
   9ab64:	00099729 	.word	0x00099729
   9ab68:	20072639 	.word	0x20072639
   9ab6c:	200727e6 	.word	0x200727e6
   9ab70:	0008a611 	.word	0x0008a611
   9ab74:	200727bb 	.word	0x200727bb
   9ab78:	0009b331 	.word	0x0009b331
   9ab7c:	20072f98 	.word	0x20072f98
   9ab80:	2044      	movs	r0, #68	; 0x44
   9ab82:	4b56      	ldr	r3, [pc, #344]	; (9acdc <Cl_disinf_controller+0xe20>)
   9ab84:	4798      	blx	r3
   9ab86:	4603      	mov	r3, r0
   9ab88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9ab8c:	4b54      	ldr	r3, [pc, #336]	; (9ace0 <Cl_disinf_controller+0xe24>)
   9ab8e:	7e1b      	ldrb	r3, [r3, #24]
   9ab90:	2b00      	cmp	r3, #0
   9ab92:	d00f      	beq.n	9abb4 <Cl_disinf_controller+0xcf8>
   9ab94:	4b52      	ldr	r3, [pc, #328]	; (9ace0 <Cl_disinf_controller+0xe24>)
   9ab96:	791b      	ldrb	r3, [r3, #4]
   9ab98:	733b      	strb	r3, [r7, #12]
   9ab9a:	7b3b      	ldrb	r3, [r7, #12]
   9ab9c:	2b04      	cmp	r3, #4
   9ab9e:	d103      	bne.n	9aba8 <Cl_disinf_controller+0xcec>
   9aba0:	4b50      	ldr	r3, [pc, #320]	; (9ace4 <Cl_disinf_controller+0xe28>)
   9aba2:	2201      	movs	r2, #1
   9aba4:	701a      	strb	r2, [r3, #0]
   9aba6:	e005      	b.n	9abb4 <Cl_disinf_controller+0xcf8>
   9aba8:	7b3b      	ldrb	r3, [r7, #12]
   9abaa:	2b03      	cmp	r3, #3
   9abac:	d102      	bne.n	9abb4 <Cl_disinf_controller+0xcf8>
   9abae:	4b4e      	ldr	r3, [pc, #312]	; (9ace8 <Cl_disinf_controller+0xe2c>)
   9abb0:	2201      	movs	r2, #1
   9abb2:	701a      	strb	r2, [r3, #0]
   9abb4:	233c      	movs	r3, #60	; 0x3c
   9abb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9abba:	2301      	movs	r3, #1
   9abbc:	76fb      	strb	r3, [r7, #27]
   9abbe:	f107 011b 	add.w	r1, r7, #27
   9abc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9abc6:	2201      	movs	r2, #1
   9abc8:	4618      	mov	r0, r3
   9abca:	4b48      	ldr	r3, [pc, #288]	; (9acec <Cl_disinf_controller+0xe30>)
   9abcc:	4798      	blx	r3
   9abce:	4603      	mov	r3, r0
   9abd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9abd4:	4b46      	ldr	r3, [pc, #280]	; (9acf0 <Cl_disinf_controller+0xe34>)
   9abd6:	2203      	movs	r2, #3
   9abd8:	701a      	strb	r2, [r3, #0]
   9abda:	e076      	b.n	9acca <Cl_disinf_controller+0xe0e>
   9abdc:	4b45      	ldr	r3, [pc, #276]	; (9acf4 <Cl_disinf_controller+0xe38>)
   9abde:	4798      	blx	r3
   9abe0:	4603      	mov	r3, r0
   9abe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9abe6:	e070      	b.n	9acca <Cl_disinf_controller+0xe0e>
   9abe8:	4b43      	ldr	r3, [pc, #268]	; (9acf8 <Cl_disinf_controller+0xe3c>)
   9abea:	2200      	movs	r2, #0
   9abec:	801a      	strh	r2, [r3, #0]
   9abee:	e055      	b.n	9ac9c <Cl_disinf_controller+0xde0>
   9abf0:	4b41      	ldr	r3, [pc, #260]	; (9acf8 <Cl_disinf_controller+0xe3c>)
   9abf2:	881b      	ldrh	r3, [r3, #0]
   9abf4:	4619      	mov	r1, r3
   9abf6:	4a41      	ldr	r2, [pc, #260]	; (9acfc <Cl_disinf_controller+0xe40>)
   9abf8:	460b      	mov	r3, r1
   9abfa:	00db      	lsls	r3, r3, #3
   9abfc:	1a5b      	subs	r3, r3, r1
   9abfe:	4413      	add	r3, r2
   9ac00:	7818      	ldrb	r0, [r3, #0]
   9ac02:	4b3d      	ldr	r3, [pc, #244]	; (9acf8 <Cl_disinf_controller+0xe3c>)
   9ac04:	881b      	ldrh	r3, [r3, #0]
   9ac06:	461a      	mov	r2, r3
   9ac08:	4613      	mov	r3, r2
   9ac0a:	00db      	lsls	r3, r3, #3
   9ac0c:	1a9b      	subs	r3, r3, r2
   9ac0e:	4a3b      	ldr	r2, [pc, #236]	; (9acfc <Cl_disinf_controller+0xe40>)
   9ac10:	4413      	add	r3, r2
   9ac12:	3302      	adds	r3, #2
   9ac14:	4619      	mov	r1, r3
   9ac16:	4b3a      	ldr	r3, [pc, #232]	; (9ad00 <Cl_disinf_controller+0xe44>)
   9ac18:	4798      	blx	r3
   9ac1a:	4b37      	ldr	r3, [pc, #220]	; (9acf8 <Cl_disinf_controller+0xe3c>)
   9ac1c:	881b      	ldrh	r3, [r3, #0]
   9ac1e:	4619      	mov	r1, r3
   9ac20:	4a36      	ldr	r2, [pc, #216]	; (9acfc <Cl_disinf_controller+0xe40>)
   9ac22:	460b      	mov	r3, r1
   9ac24:	00db      	lsls	r3, r3, #3
   9ac26:	1a5b      	subs	r3, r3, r1
   9ac28:	4413      	add	r3, r2
   9ac2a:	3302      	adds	r3, #2
   9ac2c:	781b      	ldrb	r3, [r3, #0]
   9ac2e:	2b00      	cmp	r3, #0
   9ac30:	d00e      	beq.n	9ac50 <Cl_disinf_controller+0xd94>
   9ac32:	2208      	movs	r2, #8
   9ac34:	4933      	ldr	r1, [pc, #204]	; (9ad04 <Cl_disinf_controller+0xe48>)
   9ac36:	2018      	movs	r0, #24
   9ac38:	4b2c      	ldr	r3, [pc, #176]	; (9acec <Cl_disinf_controller+0xe30>)
   9ac3a:	4798      	blx	r3
   9ac3c:	4b32      	ldr	r3, [pc, #200]	; (9ad08 <Cl_disinf_controller+0xe4c>)
   9ac3e:	4798      	blx	r3
   9ac40:	4b2b      	ldr	r3, [pc, #172]	; (9acf0 <Cl_disinf_controller+0xe34>)
   9ac42:	220c      	movs	r2, #12
   9ac44:	701a      	strb	r2, [r3, #0]
   9ac46:	4b2c      	ldr	r3, [pc, #176]	; (9acf8 <Cl_disinf_controller+0xe3c>)
   9ac48:	2200      	movs	r2, #0
   9ac4a:	801a      	strh	r2, [r3, #0]
   9ac4c:	bf00      	nop
   9ac4e:	e03c      	b.n	9acca <Cl_disinf_controller+0xe0e>
   9ac50:	4b29      	ldr	r3, [pc, #164]	; (9acf8 <Cl_disinf_controller+0xe3c>)
   9ac52:	881b      	ldrh	r3, [r3, #0]
   9ac54:	2b0b      	cmp	r3, #11
   9ac56:	d11b      	bne.n	9ac90 <Cl_disinf_controller+0xdd4>
   9ac58:	4b27      	ldr	r3, [pc, #156]	; (9acf8 <Cl_disinf_controller+0xe3c>)
   9ac5a:	881b      	ldrh	r3, [r3, #0]
   9ac5c:	4619      	mov	r1, r3
   9ac5e:	4a27      	ldr	r2, [pc, #156]	; (9acfc <Cl_disinf_controller+0xe40>)
   9ac60:	460b      	mov	r3, r1
   9ac62:	00db      	lsls	r3, r3, #3
   9ac64:	1a5b      	subs	r3, r3, r1
   9ac66:	4413      	add	r3, r2
   9ac68:	3302      	adds	r3, #2
   9ac6a:	781b      	ldrb	r3, [r3, #0]
   9ac6c:	f083 0301 	eor.w	r3, r3, #1
   9ac70:	b2db      	uxtb	r3, r3
   9ac72:	2b00      	cmp	r3, #0
   9ac74:	d00c      	beq.n	9ac90 <Cl_disinf_controller+0xdd4>
   9ac76:	4b25      	ldr	r3, [pc, #148]	; (9ad0c <Cl_disinf_controller+0xe50>)
   9ac78:	4798      	blx	r3
   9ac7a:	4b25      	ldr	r3, [pc, #148]	; (9ad10 <Cl_disinf_controller+0xe54>)
   9ac7c:	4798      	blx	r3
   9ac7e:	4b25      	ldr	r3, [pc, #148]	; (9ad14 <Cl_disinf_controller+0xe58>)
   9ac80:	4798      	blx	r3
   9ac82:	2208      	movs	r2, #8
   9ac84:	4924      	ldr	r1, [pc, #144]	; (9ad18 <Cl_disinf_controller+0xe5c>)
   9ac86:	2018      	movs	r0, #24
   9ac88:	4b18      	ldr	r3, [pc, #96]	; (9acec <Cl_disinf_controller+0xe30>)
   9ac8a:	4798      	blx	r3
   9ac8c:	4b23      	ldr	r3, [pc, #140]	; (9ad1c <Cl_disinf_controller+0xe60>)
   9ac8e:	4798      	blx	r3
   9ac90:	4b19      	ldr	r3, [pc, #100]	; (9acf8 <Cl_disinf_controller+0xe3c>)
   9ac92:	881b      	ldrh	r3, [r3, #0]
   9ac94:	3301      	adds	r3, #1
   9ac96:	b29a      	uxth	r2, r3
   9ac98:	4b17      	ldr	r3, [pc, #92]	; (9acf8 <Cl_disinf_controller+0xe3c>)
   9ac9a:	801a      	strh	r2, [r3, #0]
   9ac9c:	4b16      	ldr	r3, [pc, #88]	; (9acf8 <Cl_disinf_controller+0xe3c>)
   9ac9e:	881b      	ldrh	r3, [r3, #0]
   9aca0:	2b0b      	cmp	r3, #11
   9aca2:	d9a5      	bls.n	9abf0 <Cl_disinf_controller+0xd34>
   9aca4:	e011      	b.n	9acca <Cl_disinf_controller+0xe0e>
   9aca6:	4b19      	ldr	r3, [pc, #100]	; (9ad0c <Cl_disinf_controller+0xe50>)
   9aca8:	4798      	blx	r3
   9acaa:	4b19      	ldr	r3, [pc, #100]	; (9ad10 <Cl_disinf_controller+0xe54>)
   9acac:	4798      	blx	r3
   9acae:	4b19      	ldr	r3, [pc, #100]	; (9ad14 <Cl_disinf_controller+0xe58>)
   9acb0:	4798      	blx	r3
   9acb2:	4b1b      	ldr	r3, [pc, #108]	; (9ad20 <Cl_disinf_controller+0xe64>)
   9acb4:	4798      	blx	r3
   9acb6:	4b0e      	ldr	r3, [pc, #56]	; (9acf0 <Cl_disinf_controller+0xe34>)
   9acb8:	2208      	movs	r2, #8
   9acba:	701a      	strb	r2, [r3, #0]
   9acbc:	e005      	b.n	9acca <Cl_disinf_controller+0xe0e>
   9acbe:	4b17      	ldr	r3, [pc, #92]	; (9ad1c <Cl_disinf_controller+0xe60>)
   9acc0:	4798      	blx	r3
   9acc2:	4603      	mov	r3, r0
   9acc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9acc8:	bf00      	nop
   9acca:	e001      	b.n	9acd0 <Cl_disinf_controller+0xe14>
   9accc:	bf00      	nop
   9acce:	e000      	b.n	9acd2 <Cl_disinf_controller+0xe16>
   9acd0:	bf00      	nop
   9acd2:	2300      	movs	r3, #0
   9acd4:	4618      	mov	r0, r3
   9acd6:	372c      	adds	r7, #44	; 0x2c
   9acd8:	46bd      	mov	sp, r7
   9acda:	bd90      	pop	{r4, r7, pc}
   9acdc:	0008a611 	.word	0x0008a611
   9ace0:	20072f98 	.word	0x20072f98
   9ace4:	20072637 	.word	0x20072637
   9ace8:	20072639 	.word	0x20072639
   9acec:	00099729 	.word	0x00099729
   9acf0:	200727bb 	.word	0x200727bb
   9acf4:	0009b331 	.word	0x0009b331
   9acf8:	2007335c 	.word	0x2007335c
   9acfc:	20070a68 	.word	0x20070a68
   9ad00:	00083035 	.word	0x00083035
   9ad04:	000a629c 	.word	0x000a629c
   9ad08:	0009b0a9 	.word	0x0009b0a9
   9ad0c:	00097c55 	.word	0x00097c55
   9ad10:	00097c69 	.word	0x00097c69
   9ad14:	00097c91 	.word	0x00097c91
   9ad18:	000a62ac 	.word	0x000a62ac
   9ad1c:	0009b591 	.word	0x0009b591
   9ad20:	0009b13d 	.word	0x0009b13d

0009ad24 <cl_disinf_translatemacevent>:
   9ad24:	b480      	push	{r7}
   9ad26:	b083      	sub	sp, #12
   9ad28:	af00      	add	r7, sp, #0
   9ad2a:	4603      	mov	r3, r0
   9ad2c:	6039      	str	r1, [r7, #0]
   9ad2e:	71fb      	strb	r3, [r7, #7]
   9ad30:	79fb      	ldrb	r3, [r7, #7]
   9ad32:	3b07      	subs	r3, #7
   9ad34:	2b4d      	cmp	r3, #77	; 0x4d
   9ad36:	f200 8107 	bhi.w	9af48 <cl_disinf_translatemacevent+0x224>
   9ad3a:	a201      	add	r2, pc, #4	; (adr r2, 9ad40 <cl_disinf_translatemacevent+0x1c>)
   9ad3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9ad40:	0009af01 	.word	0x0009af01
   9ad44:	0009af49 	.word	0x0009af49
   9ad48:	0009af49 	.word	0x0009af49
   9ad4c:	0009af31 	.word	0x0009af31
   9ad50:	0009af39 	.word	0x0009af39
   9ad54:	0009af41 	.word	0x0009af41
   9ad58:	0009aef9 	.word	0x0009aef9
   9ad5c:	0009af09 	.word	0x0009af09
   9ad60:	0009af11 	.word	0x0009af11
   9ad64:	0009af19 	.word	0x0009af19
   9ad68:	0009af49 	.word	0x0009af49
   9ad6c:	0009af49 	.word	0x0009af49
   9ad70:	0009af49 	.word	0x0009af49
   9ad74:	0009af49 	.word	0x0009af49
   9ad78:	0009af49 	.word	0x0009af49
   9ad7c:	0009af49 	.word	0x0009af49
   9ad80:	0009af49 	.word	0x0009af49
   9ad84:	0009af49 	.word	0x0009af49
   9ad88:	0009af49 	.word	0x0009af49
   9ad8c:	0009af49 	.word	0x0009af49
   9ad90:	0009af49 	.word	0x0009af49
   9ad94:	0009af49 	.word	0x0009af49
   9ad98:	0009af49 	.word	0x0009af49
   9ad9c:	0009af49 	.word	0x0009af49
   9ada0:	0009af21 	.word	0x0009af21
   9ada4:	0009af29 	.word	0x0009af29
   9ada8:	0009af49 	.word	0x0009af49
   9adac:	0009af49 	.word	0x0009af49
   9adb0:	0009af49 	.word	0x0009af49
   9adb4:	0009af49 	.word	0x0009af49
   9adb8:	0009af49 	.word	0x0009af49
   9adbc:	0009af49 	.word	0x0009af49
   9adc0:	0009af49 	.word	0x0009af49
   9adc4:	0009af49 	.word	0x0009af49
   9adc8:	0009ae81 	.word	0x0009ae81
   9adcc:	0009af49 	.word	0x0009af49
   9add0:	0009af49 	.word	0x0009af49
   9add4:	0009af49 	.word	0x0009af49
   9add8:	0009aef1 	.word	0x0009aef1
   9addc:	0009aee9 	.word	0x0009aee9
   9ade0:	0009af49 	.word	0x0009af49
   9ade4:	0009af49 	.word	0x0009af49
   9ade8:	0009af49 	.word	0x0009af49
   9adec:	0009af49 	.word	0x0009af49
   9adf0:	0009af49 	.word	0x0009af49
   9adf4:	0009af49 	.word	0x0009af49
   9adf8:	0009af49 	.word	0x0009af49
   9adfc:	0009af49 	.word	0x0009af49
   9ae00:	0009af49 	.word	0x0009af49
   9ae04:	0009aeb9 	.word	0x0009aeb9
   9ae08:	0009aec1 	.word	0x0009aec1
   9ae0c:	0009aec9 	.word	0x0009aec9
   9ae10:	0009aed1 	.word	0x0009aed1
   9ae14:	0009aed9 	.word	0x0009aed9
   9ae18:	0009aee1 	.word	0x0009aee1
   9ae1c:	0009af49 	.word	0x0009af49
   9ae20:	0009ae79 	.word	0x0009ae79
   9ae24:	0009ae89 	.word	0x0009ae89
   9ae28:	0009ae91 	.word	0x0009ae91
   9ae2c:	0009af49 	.word	0x0009af49
   9ae30:	0009af49 	.word	0x0009af49
   9ae34:	0009af49 	.word	0x0009af49
   9ae38:	0009af49 	.word	0x0009af49
   9ae3c:	0009af49 	.word	0x0009af49
   9ae40:	0009af49 	.word	0x0009af49
   9ae44:	0009af49 	.word	0x0009af49
   9ae48:	0009af49 	.word	0x0009af49
   9ae4c:	0009af49 	.word	0x0009af49
   9ae50:	0009af49 	.word	0x0009af49
   9ae54:	0009af49 	.word	0x0009af49
   9ae58:	0009af49 	.word	0x0009af49
   9ae5c:	0009af49 	.word	0x0009af49
   9ae60:	0009af49 	.word	0x0009af49
   9ae64:	0009af49 	.word	0x0009af49
   9ae68:	0009aeb1 	.word	0x0009aeb1
   9ae6c:	0009ae99 	.word	0x0009ae99
   9ae70:	0009aea1 	.word	0x0009aea1
   9ae74:	0009aea9 	.word	0x0009aea9
   9ae78:	683b      	ldr	r3, [r7, #0]
   9ae7a:	2201      	movs	r2, #1
   9ae7c:	701a      	strb	r2, [r3, #0]
   9ae7e:	e064      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9ae80:	683b      	ldr	r3, [r7, #0]
   9ae82:	2225      	movs	r2, #37	; 0x25
   9ae84:	701a      	strb	r2, [r3, #0]
   9ae86:	e060      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9ae88:	683b      	ldr	r3, [r7, #0]
   9ae8a:	2202      	movs	r2, #2
   9ae8c:	701a      	strb	r2, [r3, #0]
   9ae8e:	e05c      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9ae90:	683b      	ldr	r3, [r7, #0]
   9ae92:	2203      	movs	r2, #3
   9ae94:	701a      	strb	r2, [r3, #0]
   9ae96:	e058      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9ae98:	683b      	ldr	r3, [r7, #0]
   9ae9a:	2222      	movs	r2, #34	; 0x22
   9ae9c:	701a      	strb	r2, [r3, #0]
   9ae9e:	e054      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9aea0:	683b      	ldr	r3, [r7, #0]
   9aea2:	2223      	movs	r2, #35	; 0x23
   9aea4:	701a      	strb	r2, [r3, #0]
   9aea6:	e050      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9aea8:	683b      	ldr	r3, [r7, #0]
   9aeaa:	2216      	movs	r2, #22
   9aeac:	701a      	strb	r2, [r3, #0]
   9aeae:	e04c      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9aeb0:	683b      	ldr	r3, [r7, #0]
   9aeb2:	2221      	movs	r2, #33	; 0x21
   9aeb4:	701a      	strb	r2, [r3, #0]
   9aeb6:	e048      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9aeb8:	683b      	ldr	r3, [r7, #0]
   9aeba:	220c      	movs	r2, #12
   9aebc:	701a      	strb	r2, [r3, #0]
   9aebe:	e044      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9aec0:	683b      	ldr	r3, [r7, #0]
   9aec2:	220d      	movs	r2, #13
   9aec4:	701a      	strb	r2, [r3, #0]
   9aec6:	e040      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9aec8:	683b      	ldr	r3, [r7, #0]
   9aeca:	220e      	movs	r2, #14
   9aecc:	701a      	strb	r2, [r3, #0]
   9aece:	e03c      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9aed0:	683b      	ldr	r3, [r7, #0]
   9aed2:	220f      	movs	r2, #15
   9aed4:	701a      	strb	r2, [r3, #0]
   9aed6:	e038      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9aed8:	683b      	ldr	r3, [r7, #0]
   9aeda:	2210      	movs	r2, #16
   9aedc:	701a      	strb	r2, [r3, #0]
   9aede:	e034      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9aee0:	683b      	ldr	r3, [r7, #0]
   9aee2:	2211      	movs	r2, #17
   9aee4:	701a      	strb	r2, [r3, #0]
   9aee6:	e030      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9aee8:	683b      	ldr	r3, [r7, #0]
   9aeea:	2213      	movs	r2, #19
   9aeec:	701a      	strb	r2, [r3, #0]
   9aeee:	e02c      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9aef0:	683b      	ldr	r3, [r7, #0]
   9aef2:	2212      	movs	r2, #18
   9aef4:	701a      	strb	r2, [r3, #0]
   9aef6:	e028      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9aef8:	683b      	ldr	r3, [r7, #0]
   9aefa:	2215      	movs	r2, #21
   9aefc:	701a      	strb	r2, [r3, #0]
   9aefe:	e024      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9af00:	683b      	ldr	r3, [r7, #0]
   9af02:	2224      	movs	r2, #36	; 0x24
   9af04:	701a      	strb	r2, [r3, #0]
   9af06:	e020      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9af08:	683b      	ldr	r3, [r7, #0]
   9af0a:	2214      	movs	r2, #20
   9af0c:	701a      	strb	r2, [r3, #0]
   9af0e:	e01c      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9af10:	683b      	ldr	r3, [r7, #0]
   9af12:	2217      	movs	r2, #23
   9af14:	701a      	strb	r2, [r3, #0]
   9af16:	e018      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9af18:	683b      	ldr	r3, [r7, #0]
   9af1a:	2218      	movs	r2, #24
   9af1c:	701a      	strb	r2, [r3, #0]
   9af1e:	e014      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9af20:	683b      	ldr	r3, [r7, #0]
   9af22:	221c      	movs	r2, #28
   9af24:	701a      	strb	r2, [r3, #0]
   9af26:	e010      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9af28:	683b      	ldr	r3, [r7, #0]
   9af2a:	221d      	movs	r2, #29
   9af2c:	701a      	strb	r2, [r3, #0]
   9af2e:	e00c      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9af30:	683b      	ldr	r3, [r7, #0]
   9af32:	221e      	movs	r2, #30
   9af34:	701a      	strb	r2, [r3, #0]
   9af36:	e008      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9af38:	683b      	ldr	r3, [r7, #0]
   9af3a:	221f      	movs	r2, #31
   9af3c:	701a      	strb	r2, [r3, #0]
   9af3e:	e004      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9af40:	683b      	ldr	r3, [r7, #0]
   9af42:	2220      	movs	r2, #32
   9af44:	701a      	strb	r2, [r3, #0]
   9af46:	e000      	b.n	9af4a <cl_disinf_translatemacevent+0x226>
   9af48:	bf00      	nop
   9af4a:	2300      	movs	r3, #0
   9af4c:	4618      	mov	r0, r3
   9af4e:	370c      	adds	r7, #12
   9af50:	46bd      	mov	sp, r7
   9af52:	bc80      	pop	{r7}
   9af54:	4770      	bx	lr
   9af56:	bf00      	nop

0009af58 <Cl_Disinf_StartDisinf>:
   9af58:	b590      	push	{r4, r7, lr}
   9af5a:	b085      	sub	sp, #20
   9af5c:	af02      	add	r7, sp, #8
   9af5e:	2300      	movs	r3, #0
   9af60:	71fb      	strb	r3, [r7, #7]
   9af62:	234d      	movs	r3, #77	; 0x4d
   9af64:	71bb      	strb	r3, [r7, #6]
   9af66:	2300      	movs	r3, #0
   9af68:	603b      	str	r3, [r7, #0]
   9af6a:	2300      	movs	r3, #0
   9af6c:	717b      	strb	r3, [r7, #5]
   9af6e:	2001      	movs	r0, #1
   9af70:	4b42      	ldr	r3, [pc, #264]	; (9b07c <Cl_Disinf_StartDisinf+0x124>)
   9af72:	4798      	blx	r3
   9af74:	f44f 7016 	mov.w	r0, #600	; 0x258
   9af78:	4b41      	ldr	r3, [pc, #260]	; (9b080 <Cl_Disinf_StartDisinf+0x128>)
   9af7a:	4798      	blx	r3
   9af7c:	2001      	movs	r0, #1
   9af7e:	4b41      	ldr	r3, [pc, #260]	; (9b084 <Cl_Disinf_StartDisinf+0x12c>)
   9af80:	4798      	blx	r3
   9af82:	4603      	mov	r3, r0
   9af84:	71fb      	strb	r3, [r7, #7]
   9af86:	f44f 7116 	mov.w	r1, #600	; 0x258
   9af8a:	2001      	movs	r0, #1
   9af8c:	4b3e      	ldr	r3, [pc, #248]	; (9b088 <Cl_Disinf_StartDisinf+0x130>)
   9af8e:	4798      	blx	r3
   9af90:	4603      	mov	r3, r0
   9af92:	71fb      	strb	r3, [r7, #7]
   9af94:	2004      	movs	r0, #4
   9af96:	4b3d      	ldr	r3, [pc, #244]	; (9b08c <Cl_Disinf_StartDisinf+0x134>)
   9af98:	4798      	blx	r3
   9af9a:	4603      	mov	r3, r0
   9af9c:	71fb      	strb	r3, [r7, #7]
   9af9e:	79fb      	ldrb	r3, [r7, #7]
   9afa0:	2b00      	cmp	r3, #0
   9afa2:	d165      	bne.n	9b070 <Cl_Disinf_StartDisinf+0x118>
   9afa4:	4b3a      	ldr	r3, [pc, #232]	; (9b090 <Cl_Disinf_StartDisinf+0x138>)
   9afa6:	2200      	movs	r2, #0
   9afa8:	701a      	strb	r2, [r3, #0]
   9afaa:	4b3a      	ldr	r3, [pc, #232]	; (9b094 <Cl_Disinf_StartDisinf+0x13c>)
   9afac:	4798      	blx	r3
   9afae:	4603      	mov	r3, r0
   9afb0:	71fb      	strb	r3, [r7, #7]
   9afb2:	2001      	movs	r0, #1
   9afb4:	4b38      	ldr	r3, [pc, #224]	; (9b098 <Cl_Disinf_StartDisinf+0x140>)
   9afb6:	4798      	blx	r3
   9afb8:	4603      	mov	r3, r0
   9afba:	71fb      	strb	r3, [r7, #7]
   9afbc:	4b37      	ldr	r3, [pc, #220]	; (9b09c <Cl_Disinf_StartDisinf+0x144>)
   9afbe:	4798      	blx	r3
   9afc0:	2300      	movs	r3, #0
   9afc2:	9300      	str	r3, [sp, #0]
   9afc4:	f04f 0300 	mov.w	r3, #0
   9afc8:	f04f 0200 	mov.w	r2, #0
   9afcc:	2100      	movs	r1, #0
   9afce:	2029      	movs	r0, #41	; 0x29
   9afd0:	4c33      	ldr	r4, [pc, #204]	; (9b0a0 <Cl_Disinf_StartDisinf+0x148>)
   9afd2:	47a0      	blx	r4
   9afd4:	4603      	mov	r3, r0
   9afd6:	71fb      	strb	r3, [r7, #7]
   9afd8:	2300      	movs	r3, #0
   9afda:	9300      	str	r3, [sp, #0]
   9afdc:	f04f 0300 	mov.w	r3, #0
   9afe0:	f04f 0200 	mov.w	r2, #0
   9afe4:	2100      	movs	r1, #0
   9afe6:	202b      	movs	r0, #43	; 0x2b
   9afe8:	4c2d      	ldr	r4, [pc, #180]	; (9b0a0 <Cl_Disinf_StartDisinf+0x148>)
   9afea:	47a0      	blx	r4
   9afec:	4603      	mov	r3, r0
   9afee:	71fb      	strb	r3, [r7, #7]
   9aff0:	2300      	movs	r3, #0
   9aff2:	9300      	str	r3, [sp, #0]
   9aff4:	f04f 0300 	mov.w	r3, #0
   9aff8:	f04f 0200 	mov.w	r2, #0
   9affc:	2101      	movs	r1, #1
   9affe:	2003      	movs	r0, #3
   9b000:	4c27      	ldr	r4, [pc, #156]	; (9b0a0 <Cl_Disinf_StartDisinf+0x148>)
   9b002:	47a0      	blx	r4
   9b004:	4603      	mov	r3, r0
   9b006:	71fb      	strb	r3, [r7, #7]
   9b008:	2300      	movs	r3, #0
   9b00a:	9300      	str	r3, [sp, #0]
   9b00c:	f04f 0300 	mov.w	r3, #0
   9b010:	f04f 0200 	mov.w	r2, #0
   9b014:	2101      	movs	r1, #1
   9b016:	2004      	movs	r0, #4
   9b018:	4c21      	ldr	r4, [pc, #132]	; (9b0a0 <Cl_Disinf_StartDisinf+0x148>)
   9b01a:	47a0      	blx	r4
   9b01c:	4603      	mov	r3, r0
   9b01e:	71fb      	strb	r3, [r7, #7]
   9b020:	2300      	movs	r3, #0
   9b022:	9300      	str	r3, [sp, #0]
   9b024:	f04f 0300 	mov.w	r3, #0
   9b028:	f04f 0200 	mov.w	r2, #0
   9b02c:	2100      	movs	r1, #0
   9b02e:	203d      	movs	r0, #61	; 0x3d
   9b030:	4c1b      	ldr	r4, [pc, #108]	; (9b0a0 <Cl_Disinf_StartDisinf+0x148>)
   9b032:	47a0      	blx	r4
   9b034:	4603      	mov	r3, r0
   9b036:	71fb      	strb	r3, [r7, #7]
   9b038:	2300      	movs	r3, #0
   9b03a:	9300      	str	r3, [sp, #0]
   9b03c:	f04f 0300 	mov.w	r3, #0
   9b040:	f04f 0200 	mov.w	r2, #0
   9b044:	2101      	movs	r1, #1
   9b046:	203e      	movs	r0, #62	; 0x3e
   9b048:	4c15      	ldr	r4, [pc, #84]	; (9b0a0 <Cl_Disinf_StartDisinf+0x148>)
   9b04a:	47a0      	blx	r4
   9b04c:	4603      	mov	r3, r0
   9b04e:	71fb      	strb	r3, [r7, #7]
   9b050:	2101      	movs	r1, #1
   9b052:	203d      	movs	r0, #61	; 0x3d
   9b054:	4b13      	ldr	r3, [pc, #76]	; (9b0a4 <Cl_Disinf_StartDisinf+0x14c>)
   9b056:	4798      	blx	r3
   9b058:	4603      	mov	r3, r0
   9b05a:	71fb      	strb	r3, [r7, #7]
   9b05c:	2101      	movs	r1, #1
   9b05e:	203e      	movs	r0, #62	; 0x3e
   9b060:	4b10      	ldr	r3, [pc, #64]	; (9b0a4 <Cl_Disinf_StartDisinf+0x14c>)
   9b062:	4798      	blx	r3
   9b064:	4603      	mov	r3, r0
   9b066:	71fb      	strb	r3, [r7, #7]
   9b068:	4b0c      	ldr	r3, [pc, #48]	; (9b09c <Cl_Disinf_StartDisinf+0x144>)
   9b06a:	4798      	blx	r3
   9b06c:	4603      	mov	r3, r0
   9b06e:	71fb      	strb	r3, [r7, #7]
   9b070:	2300      	movs	r3, #0
   9b072:	4618      	mov	r0, r3
   9b074:	370c      	adds	r7, #12
   9b076:	46bd      	mov	sp, r7
   9b078:	bd90      	pop	{r4, r7, pc}
   9b07a:	bf00      	nop
   9b07c:	000979cd 	.word	0x000979cd
   9b080:	00097e55 	.word	0x00097e55
   9b084:	0009790d 	.word	0x0009790d
   9b088:	00097a25 	.word	0x00097a25
   9b08c:	00083319 	.word	0x00083319
   9b090:	20070a66 	.word	0x20070a66
   9b094:	0009b1dd 	.word	0x0009b1dd
   9b098:	000923ad 	.word	0x000923ad
   9b09c:	0009b591 	.word	0x0009b591
   9b0a0:	00082ea1 	.word	0x00082ea1
   9b0a4:	00082efd 	.word	0x00082efd

0009b0a8 <Cl_Disinf_StopDisinf>:
   9b0a8:	b580      	push	{r7, lr}
   9b0aa:	af00      	add	r7, sp, #0
   9b0ac:	4b16      	ldr	r3, [pc, #88]	; (9b108 <Cl_Disinf_StopDisinf+0x60>)
   9b0ae:	4798      	blx	r3
   9b0b0:	4b16      	ldr	r3, [pc, #88]	; (9b10c <Cl_Disinf_StopDisinf+0x64>)
   9b0b2:	4798      	blx	r3
   9b0b4:	4b16      	ldr	r3, [pc, #88]	; (9b110 <Cl_Disinf_StopDisinf+0x68>)
   9b0b6:	220c      	movs	r2, #12
   9b0b8:	701a      	strb	r2, [r3, #0]
   9b0ba:	4b16      	ldr	r3, [pc, #88]	; (9b114 <Cl_Disinf_StopDisinf+0x6c>)
   9b0bc:	681b      	ldr	r3, [r3, #0]
   9b0be:	4a16      	ldr	r2, [pc, #88]	; (9b118 <Cl_Disinf_StopDisinf+0x70>)
   9b0c0:	6013      	str	r3, [r2, #0]
   9b0c2:	4b16      	ldr	r3, [pc, #88]	; (9b11c <Cl_Disinf_StopDisinf+0x74>)
   9b0c4:	681b      	ldr	r3, [r3, #0]
   9b0c6:	4a16      	ldr	r2, [pc, #88]	; (9b120 <Cl_Disinf_StopDisinf+0x78>)
   9b0c8:	6013      	str	r3, [r2, #0]
   9b0ca:	4b16      	ldr	r3, [pc, #88]	; (9b124 <Cl_Disinf_StopDisinf+0x7c>)
   9b0cc:	681b      	ldr	r3, [r3, #0]
   9b0ce:	4a16      	ldr	r2, [pc, #88]	; (9b128 <Cl_Disinf_StopDisinf+0x80>)
   9b0d0:	6013      	str	r3, [r2, #0]
   9b0d2:	4b16      	ldr	r3, [pc, #88]	; (9b12c <Cl_Disinf_StopDisinf+0x84>)
   9b0d4:	681b      	ldr	r3, [r3, #0]
   9b0d6:	4a16      	ldr	r2, [pc, #88]	; (9b130 <Cl_Disinf_StopDisinf+0x88>)
   9b0d8:	6013      	str	r3, [r2, #0]
   9b0da:	4b16      	ldr	r3, [pc, #88]	; (9b134 <Cl_Disinf_StopDisinf+0x8c>)
   9b0dc:	681b      	ldr	r3, [r3, #0]
   9b0de:	4a16      	ldr	r2, [pc, #88]	; (9b138 <Cl_Disinf_StopDisinf+0x90>)
   9b0e0:	6013      	str	r3, [r2, #0]
   9b0e2:	4b0c      	ldr	r3, [pc, #48]	; (9b114 <Cl_Disinf_StopDisinf+0x6c>)
   9b0e4:	2200      	movs	r2, #0
   9b0e6:	601a      	str	r2, [r3, #0]
   9b0e8:	4b0c      	ldr	r3, [pc, #48]	; (9b11c <Cl_Disinf_StopDisinf+0x74>)
   9b0ea:	2200      	movs	r2, #0
   9b0ec:	601a      	str	r2, [r3, #0]
   9b0ee:	4b0d      	ldr	r3, [pc, #52]	; (9b124 <Cl_Disinf_StopDisinf+0x7c>)
   9b0f0:	2200      	movs	r2, #0
   9b0f2:	601a      	str	r2, [r3, #0]
   9b0f4:	4b0d      	ldr	r3, [pc, #52]	; (9b12c <Cl_Disinf_StopDisinf+0x84>)
   9b0f6:	2200      	movs	r2, #0
   9b0f8:	601a      	str	r2, [r3, #0]
   9b0fa:	4b0e      	ldr	r3, [pc, #56]	; (9b134 <Cl_Disinf_StopDisinf+0x8c>)
   9b0fc:	2200      	movs	r2, #0
   9b0fe:	601a      	str	r2, [r3, #0]
   9b100:	2300      	movs	r3, #0
   9b102:	4618      	mov	r0, r3
   9b104:	bd80      	pop	{r7, pc}
   9b106:	bf00      	nop
   9b108:	00097b3d 	.word	0x00097b3d
   9b10c:	00097999 	.word	0x00097999
   9b110:	200727bb 	.word	0x200727bb
   9b114:	200727bc 	.word	0x200727bc
   9b118:	200727c8 	.word	0x200727c8
   9b11c:	200727c4 	.word	0x200727c4
   9b120:	200727d0 	.word	0x200727d0
   9b124:	200727c0 	.word	0x200727c0
   9b128:	200727cc 	.word	0x200727cc
   9b12c:	200727d4 	.word	0x200727d4
   9b130:	200727dc 	.word	0x200727dc
   9b134:	200727d8 	.word	0x200727d8
   9b138:	200727e0 	.word	0x200727e0

0009b13c <Cl_Disinf_resumeDisinf>:
   9b13c:	b580      	push	{r7, lr}
   9b13e:	b082      	sub	sp, #8
   9b140:	af00      	add	r7, sp, #0
   9b142:	2300      	movs	r3, #0
   9b144:	71fb      	strb	r3, [r7, #7]
   9b146:	4b16      	ldr	r3, [pc, #88]	; (9b1a0 <Cl_Disinf_resumeDisinf+0x64>)
   9b148:	4798      	blx	r3
   9b14a:	4b16      	ldr	r3, [pc, #88]	; (9b1a4 <Cl_Disinf_resumeDisinf+0x68>)
   9b14c:	2208      	movs	r2, #8
   9b14e:	701a      	strb	r2, [r3, #0]
   9b150:	4b15      	ldr	r3, [pc, #84]	; (9b1a8 <Cl_Disinf_resumeDisinf+0x6c>)
   9b152:	781b      	ldrb	r3, [r3, #0]
   9b154:	2b01      	cmp	r3, #1
   9b156:	d101      	bne.n	9b15c <Cl_Disinf_resumeDisinf+0x20>
   9b158:	4b14      	ldr	r3, [pc, #80]	; (9b1ac <Cl_Disinf_resumeDisinf+0x70>)
   9b15a:	4798      	blx	r3
   9b15c:	1dbb      	adds	r3, r7, #6
   9b15e:	2200      	movs	r2, #0
   9b160:	4619      	mov	r1, r3
   9b162:	203b      	movs	r0, #59	; 0x3b
   9b164:	4b12      	ldr	r3, [pc, #72]	; (9b1b0 <Cl_Disinf_resumeDisinf+0x74>)
   9b166:	4798      	blx	r3
   9b168:	4603      	mov	r3, r0
   9b16a:	71fb      	strb	r3, [r7, #7]
   9b16c:	4b11      	ldr	r3, [pc, #68]	; (9b1b4 <Cl_Disinf_resumeDisinf+0x78>)
   9b16e:	681b      	ldr	r3, [r3, #0]
   9b170:	4a11      	ldr	r2, [pc, #68]	; (9b1b8 <Cl_Disinf_resumeDisinf+0x7c>)
   9b172:	6013      	str	r3, [r2, #0]
   9b174:	4b11      	ldr	r3, [pc, #68]	; (9b1bc <Cl_Disinf_resumeDisinf+0x80>)
   9b176:	681b      	ldr	r3, [r3, #0]
   9b178:	4a11      	ldr	r2, [pc, #68]	; (9b1c0 <Cl_Disinf_resumeDisinf+0x84>)
   9b17a:	6013      	str	r3, [r2, #0]
   9b17c:	4b11      	ldr	r3, [pc, #68]	; (9b1c4 <Cl_Disinf_resumeDisinf+0x88>)
   9b17e:	681b      	ldr	r3, [r3, #0]
   9b180:	4a11      	ldr	r2, [pc, #68]	; (9b1c8 <Cl_Disinf_resumeDisinf+0x8c>)
   9b182:	6013      	str	r3, [r2, #0]
   9b184:	4b11      	ldr	r3, [pc, #68]	; (9b1cc <Cl_Disinf_resumeDisinf+0x90>)
   9b186:	681b      	ldr	r3, [r3, #0]
   9b188:	4a11      	ldr	r2, [pc, #68]	; (9b1d0 <Cl_Disinf_resumeDisinf+0x94>)
   9b18a:	6013      	str	r3, [r2, #0]
   9b18c:	4b11      	ldr	r3, [pc, #68]	; (9b1d4 <Cl_Disinf_resumeDisinf+0x98>)
   9b18e:	681b      	ldr	r3, [r3, #0]
   9b190:	4a11      	ldr	r2, [pc, #68]	; (9b1d8 <Cl_Disinf_resumeDisinf+0x9c>)
   9b192:	6013      	str	r3, [r2, #0]
   9b194:	2300      	movs	r3, #0
   9b196:	4618      	mov	r0, r3
   9b198:	3708      	adds	r7, #8
   9b19a:	46bd      	mov	sp, r7
   9b19c:	bd80      	pop	{r7, pc}
   9b19e:	bf00      	nop
   9b1a0:	00097b21 	.word	0x00097b21
   9b1a4:	200727bb 	.word	0x200727bb
   9b1a8:	20072637 	.word	0x20072637
   9b1ac:	00097985 	.word	0x00097985
   9b1b0:	00099729 	.word	0x00099729
   9b1b4:	200727c8 	.word	0x200727c8
   9b1b8:	200727bc 	.word	0x200727bc
   9b1bc:	200727d0 	.word	0x200727d0
   9b1c0:	200727c4 	.word	0x200727c4
   9b1c4:	200727cc 	.word	0x200727cc
   9b1c8:	200727c0 	.word	0x200727c0
   9b1cc:	200727dc 	.word	0x200727dc
   9b1d0:	200727d4 	.word	0x200727d4
   9b1d4:	200727e0 	.word	0x200727e0
   9b1d8:	200727d8 	.word	0x200727d8

0009b1dc <Cl_Disinf_UpdateTimeInfo>:
   9b1dc:	b580      	push	{r7, lr}
   9b1de:	b084      	sub	sp, #16
   9b1e0:	af00      	add	r7, sp, #0
   9b1e2:	2304      	movs	r3, #4
   9b1e4:	73fb      	strb	r3, [r7, #15]
   9b1e6:	234d      	movs	r3, #77	; 0x4d
   9b1e8:	73bb      	strb	r3, [r7, #14]
   9b1ea:	1d3b      	adds	r3, r7, #4
   9b1ec:	2200      	movs	r2, #0
   9b1ee:	601a      	str	r2, [r3, #0]
   9b1f0:	f8c3 2003 	str.w	r2, [r3, #3]
   9b1f4:	230a      	movs	r3, #10
   9b1f6:	73bb      	strb	r3, [r7, #14]
   9b1f8:	230b      	movs	r3, #11
   9b1fa:	713b      	strb	r3, [r7, #4]
   9b1fc:	4b08      	ldr	r3, [pc, #32]	; (9b220 <Cl_Disinf_UpdateTimeInfo+0x44>)
   9b1fe:	681b      	ldr	r3, [r3, #0]
   9b200:	b2db      	uxtb	r3, r3
   9b202:	717b      	strb	r3, [r7, #5]
   9b204:	1d39      	adds	r1, r7, #4
   9b206:	7bbb      	ldrb	r3, [r7, #14]
   9b208:	2202      	movs	r2, #2
   9b20a:	4618      	mov	r0, r3
   9b20c:	4b05      	ldr	r3, [pc, #20]	; (9b224 <Cl_Disinf_UpdateTimeInfo+0x48>)
   9b20e:	4798      	blx	r3
   9b210:	4603      	mov	r3, r0
   9b212:	73fb      	strb	r3, [r7, #15]
   9b214:	2300      	movs	r3, #0
   9b216:	4618      	mov	r0, r3
   9b218:	3710      	adds	r7, #16
   9b21a:	46bd      	mov	sp, r7
   9b21c:	bd80      	pop	{r7, pc}
   9b21e:	bf00      	nop
   9b220:	200727d4 	.word	0x200727d4
   9b224:	00099729 	.word	0x00099729

0009b228 <Cl_Disinf_UpdateAlarmTable>:
   9b228:	b580      	push	{r7, lr}
   9b22a:	b086      	sub	sp, #24
   9b22c:	af00      	add	r7, sp, #0
   9b22e:	6078      	str	r0, [r7, #4]
   9b230:	2300      	movs	r3, #0
   9b232:	75fb      	strb	r3, [r7, #23]
   9b234:	2300      	movs	r3, #0
   9b236:	75bb      	strb	r3, [r7, #22]
   9b238:	f107 030c 	add.w	r3, r7, #12
   9b23c:	2100      	movs	r1, #0
   9b23e:	460a      	mov	r2, r1
   9b240:	801a      	strh	r2, [r3, #0]
   9b242:	460a      	mov	r2, r1
   9b244:	709a      	strb	r2, [r3, #2]
   9b246:	2300      	movs	r3, #0
   9b248:	613b      	str	r3, [r7, #16]
   9b24a:	234d      	movs	r3, #77	; 0x4d
   9b24c:	73fb      	strb	r3, [r7, #15]
   9b24e:	2300      	movs	r3, #0
   9b250:	75bb      	strb	r3, [r7, #22]
   9b252:	e05f      	b.n	9b314 <Cl_Disinf_UpdateAlarmTable+0xec>
   9b254:	7dba      	ldrb	r2, [r7, #22]
   9b256:	4933      	ldr	r1, [pc, #204]	; (9b324 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9b258:	4613      	mov	r3, r2
   9b25a:	00db      	lsls	r3, r3, #3
   9b25c:	1a9b      	subs	r3, r3, r2
   9b25e:	440b      	add	r3, r1
   9b260:	7818      	ldrb	r0, [r3, #0]
   9b262:	7dba      	ldrb	r2, [r7, #22]
   9b264:	4613      	mov	r3, r2
   9b266:	00db      	lsls	r3, r3, #3
   9b268:	1a9b      	subs	r3, r3, r2
   9b26a:	4a2e      	ldr	r2, [pc, #184]	; (9b324 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9b26c:	4413      	add	r3, r2
   9b26e:	3302      	adds	r3, #2
   9b270:	4619      	mov	r1, r3
   9b272:	4b2d      	ldr	r3, [pc, #180]	; (9b328 <Cl_Disinf_UpdateAlarmTable+0x100>)
   9b274:	4798      	blx	r3
   9b276:	7dba      	ldrb	r2, [r7, #22]
   9b278:	492a      	ldr	r1, [pc, #168]	; (9b324 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9b27a:	4613      	mov	r3, r2
   9b27c:	00db      	lsls	r3, r3, #3
   9b27e:	1a9b      	subs	r3, r3, r2
   9b280:	440b      	add	r3, r1
   9b282:	3302      	adds	r3, #2
   9b284:	781b      	ldrb	r3, [r3, #0]
   9b286:	2b00      	cmp	r3, #0
   9b288:	d022      	beq.n	9b2d0 <Cl_Disinf_UpdateAlarmTable+0xa8>
   9b28a:	7dba      	ldrb	r2, [r7, #22]
   9b28c:	4925      	ldr	r1, [pc, #148]	; (9b324 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9b28e:	4613      	mov	r3, r2
   9b290:	00db      	lsls	r3, r3, #3
   9b292:	1a9b      	subs	r3, r3, r2
   9b294:	440b      	add	r3, r1
   9b296:	3303      	adds	r3, #3
   9b298:	781b      	ldrb	r3, [r3, #0]
   9b29a:	f083 0301 	eor.w	r3, r3, #1
   9b29e:	b2db      	uxtb	r3, r3
   9b2a0:	2b00      	cmp	r3, #0
   9b2a2:	d034      	beq.n	9b30e <Cl_Disinf_UpdateAlarmTable+0xe6>
   9b2a4:	7dba      	ldrb	r2, [r7, #22]
   9b2a6:	491f      	ldr	r1, [pc, #124]	; (9b324 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9b2a8:	4613      	mov	r3, r2
   9b2aa:	00db      	lsls	r3, r3, #3
   9b2ac:	1a9b      	subs	r3, r3, r2
   9b2ae:	440b      	add	r3, r1
   9b2b0:	3303      	adds	r3, #3
   9b2b2:	2201      	movs	r2, #1
   9b2b4:	701a      	strb	r2, [r3, #0]
   9b2b6:	7dba      	ldrb	r2, [r7, #22]
   9b2b8:	491a      	ldr	r1, [pc, #104]	; (9b324 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9b2ba:	4613      	mov	r3, r2
   9b2bc:	00db      	lsls	r3, r3, #3
   9b2be:	1a9b      	subs	r3, r3, r2
   9b2c0:	440b      	add	r3, r1
   9b2c2:	781b      	ldrb	r3, [r3, #0]
   9b2c4:	4618      	mov	r0, r3
   9b2c6:	4b19      	ldr	r3, [pc, #100]	; (9b32c <Cl_Disinf_UpdateAlarmTable+0x104>)
   9b2c8:	4798      	blx	r3
   9b2ca:	4603      	mov	r3, r0
   9b2cc:	75fb      	strb	r3, [r7, #23]
   9b2ce:	e01e      	b.n	9b30e <Cl_Disinf_UpdateAlarmTable+0xe6>
   9b2d0:	7dba      	ldrb	r2, [r7, #22]
   9b2d2:	4914      	ldr	r1, [pc, #80]	; (9b324 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9b2d4:	4613      	mov	r3, r2
   9b2d6:	00db      	lsls	r3, r3, #3
   9b2d8:	1a9b      	subs	r3, r3, r2
   9b2da:	440b      	add	r3, r1
   9b2dc:	3303      	adds	r3, #3
   9b2de:	781b      	ldrb	r3, [r3, #0]
   9b2e0:	2b00      	cmp	r3, #0
   9b2e2:	d014      	beq.n	9b30e <Cl_Disinf_UpdateAlarmTable+0xe6>
   9b2e4:	7dba      	ldrb	r2, [r7, #22]
   9b2e6:	490f      	ldr	r1, [pc, #60]	; (9b324 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9b2e8:	4613      	mov	r3, r2
   9b2ea:	00db      	lsls	r3, r3, #3
   9b2ec:	1a9b      	subs	r3, r3, r2
   9b2ee:	440b      	add	r3, r1
   9b2f0:	3303      	adds	r3, #3
   9b2f2:	2200      	movs	r2, #0
   9b2f4:	701a      	strb	r2, [r3, #0]
   9b2f6:	2307      	movs	r3, #7
   9b2f8:	73fb      	strb	r3, [r7, #15]
   9b2fa:	7dba      	ldrb	r2, [r7, #22]
   9b2fc:	4909      	ldr	r1, [pc, #36]	; (9b324 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9b2fe:	4613      	mov	r3, r2
   9b300:	00db      	lsls	r3, r3, #3
   9b302:	1a9b      	subs	r3, r3, r2
   9b304:	440b      	add	r3, r1
   9b306:	781b      	ldrb	r3, [r3, #0]
   9b308:	733b      	strb	r3, [r7, #12]
   9b30a:	2300      	movs	r3, #0
   9b30c:	737b      	strb	r3, [r7, #13]
   9b30e:	7dbb      	ldrb	r3, [r7, #22]
   9b310:	3301      	adds	r3, #1
   9b312:	75bb      	strb	r3, [r7, #22]
   9b314:	7dbb      	ldrb	r3, [r7, #22]
   9b316:	2b0b      	cmp	r3, #11
   9b318:	d99c      	bls.n	9b254 <Cl_Disinf_UpdateAlarmTable+0x2c>
   9b31a:	7dfb      	ldrb	r3, [r7, #23]
   9b31c:	4618      	mov	r0, r3
   9b31e:	3718      	adds	r7, #24
   9b320:	46bd      	mov	sp, r7
   9b322:	bd80      	pop	{r7, pc}
   9b324:	20070a68 	.word	0x20070a68
   9b328:	00083035 	.word	0x00083035
   9b32c:	0009b359 	.word	0x0009b359

0009b330 <Cl_disinf_ProcessAlarms>:
   9b330:	b580      	push	{r7, lr}
   9b332:	b082      	sub	sp, #8
   9b334:	af00      	add	r7, sp, #0
   9b336:	2300      	movs	r3, #0
   9b338:	71fb      	strb	r3, [r7, #7]
   9b33a:	234d      	movs	r3, #77	; 0x4d
   9b33c:	71bb      	strb	r3, [r7, #6]
   9b33e:	1d7b      	adds	r3, r7, #5
   9b340:	4618      	mov	r0, r3
   9b342:	4b04      	ldr	r3, [pc, #16]	; (9b354 <Cl_disinf_ProcessAlarms+0x24>)
   9b344:	4798      	blx	r3
   9b346:	4603      	mov	r3, r0
   9b348:	71fb      	strb	r3, [r7, #7]
   9b34a:	79fb      	ldrb	r3, [r7, #7]
   9b34c:	4618      	mov	r0, r3
   9b34e:	3708      	adds	r7, #8
   9b350:	46bd      	mov	sp, r7
   9b352:	bd80      	pop	{r7, pc}
   9b354:	0009b229 	.word	0x0009b229

0009b358 <CL_DisinfAlarmActon>:
   9b358:	b580      	push	{r7, lr}
   9b35a:	b086      	sub	sp, #24
   9b35c:	af00      	add	r7, sp, #0
   9b35e:	4603      	mov	r3, r0
   9b360:	71fb      	strb	r3, [r7, #7]
   9b362:	2300      	movs	r3, #0
   9b364:	75fb      	strb	r3, [r7, #23]
   9b366:	f107 0308 	add.w	r3, r7, #8
   9b36a:	2100      	movs	r1, #0
   9b36c:	460a      	mov	r2, r1
   9b36e:	801a      	strh	r2, [r3, #0]
   9b370:	460a      	mov	r2, r1
   9b372:	709a      	strb	r2, [r3, #2]
   9b374:	2300      	movs	r3, #0
   9b376:	613b      	str	r3, [r7, #16]
   9b378:	234d      	movs	r3, #77	; 0x4d
   9b37a:	73fb      	strb	r3, [r7, #15]
   9b37c:	2300      	movs	r3, #0
   9b37e:	73bb      	strb	r3, [r7, #14]
   9b380:	79fb      	ldrb	r3, [r7, #7]
   9b382:	3b03      	subs	r3, #3
   9b384:	2b28      	cmp	r3, #40	; 0x28
   9b386:	f200 80d5 	bhi.w	9b534 <CL_DisinfAlarmActon+0x1dc>
   9b38a:	a201      	add	r2, pc, #4	; (adr r2, 9b390 <CL_DisinfAlarmActon+0x38>)
   9b38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9b390:	0009b495 	.word	0x0009b495
   9b394:	0009b4a9 	.word	0x0009b4a9
   9b398:	0009b535 	.word	0x0009b535
   9b39c:	0009b535 	.word	0x0009b535
   9b3a0:	0009b535 	.word	0x0009b535
   9b3a4:	0009b521 	.word	0x0009b521
   9b3a8:	0009b535 	.word	0x0009b535
   9b3ac:	0009b535 	.word	0x0009b535
   9b3b0:	0009b535 	.word	0x0009b535
   9b3b4:	0009b535 	.word	0x0009b535
   9b3b8:	0009b535 	.word	0x0009b535
   9b3bc:	0009b535 	.word	0x0009b535
   9b3c0:	0009b535 	.word	0x0009b535
   9b3c4:	0009b535 	.word	0x0009b535
   9b3c8:	0009b535 	.word	0x0009b535
   9b3cc:	0009b535 	.word	0x0009b535
   9b3d0:	0009b4bd 	.word	0x0009b4bd
   9b3d4:	0009b4d1 	.word	0x0009b4d1
   9b3d8:	0009b4e5 	.word	0x0009b4e5
   9b3dc:	0009b4e5 	.word	0x0009b4e5
   9b3e0:	0009b4f9 	.word	0x0009b4f9
   9b3e4:	0009b4f9 	.word	0x0009b4f9
   9b3e8:	0009b535 	.word	0x0009b535
   9b3ec:	0009b535 	.word	0x0009b535
   9b3f0:	0009b535 	.word	0x0009b535
   9b3f4:	0009b535 	.word	0x0009b535
   9b3f8:	0009b535 	.word	0x0009b535
   9b3fc:	0009b535 	.word	0x0009b535
   9b400:	0009b535 	.word	0x0009b535
   9b404:	0009b535 	.word	0x0009b535
   9b408:	0009b535 	.word	0x0009b535
   9b40c:	0009b535 	.word	0x0009b535
   9b410:	0009b535 	.word	0x0009b535
   9b414:	0009b535 	.word	0x0009b535
   9b418:	0009b535 	.word	0x0009b535
   9b41c:	0009b535 	.word	0x0009b535
   9b420:	0009b50d 	.word	0x0009b50d
   9b424:	0009b50d 	.word	0x0009b50d
   9b428:	0009b435 	.word	0x0009b435
   9b42c:	0009b535 	.word	0x0009b535
   9b430:	0009b481 	.word	0x0009b481
   9b434:	4b4f      	ldr	r3, [pc, #316]	; (9b574 <CL_DisinfAlarmActon+0x21c>)
   9b436:	781b      	ldrb	r3, [r3, #0]
   9b438:	2b10      	cmp	r3, #16
   9b43a:	d10b      	bne.n	9b454 <CL_DisinfAlarmActon+0xfc>
   9b43c:	4b4e      	ldr	r3, [pc, #312]	; (9b578 <CL_DisinfAlarmActon+0x220>)
   9b43e:	4798      	blx	r3
   9b440:	4b4e      	ldr	r3, [pc, #312]	; (9b57c <CL_DisinfAlarmActon+0x224>)
   9b442:	4798      	blx	r3
   9b444:	4b4b      	ldr	r3, [pc, #300]	; (9b574 <CL_DisinfAlarmActon+0x21c>)
   9b446:	781b      	ldrb	r3, [r3, #0]
   9b448:	2b10      	cmp	r3, #16
   9b44a:	d175      	bne.n	9b538 <CL_DisinfAlarmActon+0x1e0>
   9b44c:	4b49      	ldr	r3, [pc, #292]	; (9b574 <CL_DisinfAlarmActon+0x21c>)
   9b44e:	2210      	movs	r2, #16
   9b450:	701a      	strb	r2, [r3, #0]
   9b452:	e071      	b.n	9b538 <CL_DisinfAlarmActon+0x1e0>
   9b454:	4b47      	ldr	r3, [pc, #284]	; (9b574 <CL_DisinfAlarmActon+0x21c>)
   9b456:	781b      	ldrb	r3, [r3, #0]
   9b458:	2b11      	cmp	r3, #17
   9b45a:	d107      	bne.n	9b46c <CL_DisinfAlarmActon+0x114>
   9b45c:	4b46      	ldr	r3, [pc, #280]	; (9b578 <CL_DisinfAlarmActon+0x220>)
   9b45e:	4798      	blx	r3
   9b460:	4b46      	ldr	r3, [pc, #280]	; (9b57c <CL_DisinfAlarmActon+0x224>)
   9b462:	4798      	blx	r3
   9b464:	4b43      	ldr	r3, [pc, #268]	; (9b574 <CL_DisinfAlarmActon+0x21c>)
   9b466:	2211      	movs	r2, #17
   9b468:	701a      	strb	r2, [r3, #0]
   9b46a:	e065      	b.n	9b538 <CL_DisinfAlarmActon+0x1e0>
   9b46c:	4b42      	ldr	r3, [pc, #264]	; (9b578 <CL_DisinfAlarmActon+0x220>)
   9b46e:	4798      	blx	r3
   9b470:	4b42      	ldr	r3, [pc, #264]	; (9b57c <CL_DisinfAlarmActon+0x224>)
   9b472:	4798      	blx	r3
   9b474:	4b42      	ldr	r3, [pc, #264]	; (9b580 <CL_DisinfAlarmActon+0x228>)
   9b476:	4798      	blx	r3
   9b478:	4b3e      	ldr	r3, [pc, #248]	; (9b574 <CL_DisinfAlarmActon+0x21c>)
   9b47a:	220c      	movs	r2, #12
   9b47c:	701a      	strb	r2, [r3, #0]
   9b47e:	e05b      	b.n	9b538 <CL_DisinfAlarmActon+0x1e0>
   9b480:	4b3d      	ldr	r3, [pc, #244]	; (9b578 <CL_DisinfAlarmActon+0x220>)
   9b482:	4798      	blx	r3
   9b484:	4b3d      	ldr	r3, [pc, #244]	; (9b57c <CL_DisinfAlarmActon+0x224>)
   9b486:	4798      	blx	r3
   9b488:	4b3d      	ldr	r3, [pc, #244]	; (9b580 <CL_DisinfAlarmActon+0x228>)
   9b48a:	4798      	blx	r3
   9b48c:	4b39      	ldr	r3, [pc, #228]	; (9b574 <CL_DisinfAlarmActon+0x21c>)
   9b48e:	220c      	movs	r2, #12
   9b490:	701a      	strb	r2, [r3, #0]
   9b492:	e052      	b.n	9b53a <CL_DisinfAlarmActon+0x1e2>
   9b494:	4b38      	ldr	r3, [pc, #224]	; (9b578 <CL_DisinfAlarmActon+0x220>)
   9b496:	4798      	blx	r3
   9b498:	4b38      	ldr	r3, [pc, #224]	; (9b57c <CL_DisinfAlarmActon+0x224>)
   9b49a:	4798      	blx	r3
   9b49c:	4b38      	ldr	r3, [pc, #224]	; (9b580 <CL_DisinfAlarmActon+0x228>)
   9b49e:	4798      	blx	r3
   9b4a0:	4b34      	ldr	r3, [pc, #208]	; (9b574 <CL_DisinfAlarmActon+0x21c>)
   9b4a2:	220c      	movs	r2, #12
   9b4a4:	701a      	strb	r2, [r3, #0]
   9b4a6:	e048      	b.n	9b53a <CL_DisinfAlarmActon+0x1e2>
   9b4a8:	4b33      	ldr	r3, [pc, #204]	; (9b578 <CL_DisinfAlarmActon+0x220>)
   9b4aa:	4798      	blx	r3
   9b4ac:	4b33      	ldr	r3, [pc, #204]	; (9b57c <CL_DisinfAlarmActon+0x224>)
   9b4ae:	4798      	blx	r3
   9b4b0:	4b33      	ldr	r3, [pc, #204]	; (9b580 <CL_DisinfAlarmActon+0x228>)
   9b4b2:	4798      	blx	r3
   9b4b4:	4b2f      	ldr	r3, [pc, #188]	; (9b574 <CL_DisinfAlarmActon+0x21c>)
   9b4b6:	220c      	movs	r2, #12
   9b4b8:	701a      	strb	r2, [r3, #0]
   9b4ba:	e03e      	b.n	9b53a <CL_DisinfAlarmActon+0x1e2>
   9b4bc:	4b31      	ldr	r3, [pc, #196]	; (9b584 <CL_DisinfAlarmActon+0x22c>)
   9b4be:	4798      	blx	r3
   9b4c0:	4b2e      	ldr	r3, [pc, #184]	; (9b57c <CL_DisinfAlarmActon+0x224>)
   9b4c2:	4798      	blx	r3
   9b4c4:	4b2e      	ldr	r3, [pc, #184]	; (9b580 <CL_DisinfAlarmActon+0x228>)
   9b4c6:	4798      	blx	r3
   9b4c8:	4b2a      	ldr	r3, [pc, #168]	; (9b574 <CL_DisinfAlarmActon+0x21c>)
   9b4ca:	220c      	movs	r2, #12
   9b4cc:	701a      	strb	r2, [r3, #0]
   9b4ce:	e034      	b.n	9b53a <CL_DisinfAlarmActon+0x1e2>
   9b4d0:	4b2c      	ldr	r3, [pc, #176]	; (9b584 <CL_DisinfAlarmActon+0x22c>)
   9b4d2:	4798      	blx	r3
   9b4d4:	4b29      	ldr	r3, [pc, #164]	; (9b57c <CL_DisinfAlarmActon+0x224>)
   9b4d6:	4798      	blx	r3
   9b4d8:	4b29      	ldr	r3, [pc, #164]	; (9b580 <CL_DisinfAlarmActon+0x228>)
   9b4da:	4798      	blx	r3
   9b4dc:	4b25      	ldr	r3, [pc, #148]	; (9b574 <CL_DisinfAlarmActon+0x21c>)
   9b4de:	220c      	movs	r2, #12
   9b4e0:	701a      	strb	r2, [r3, #0]
   9b4e2:	e02a      	b.n	9b53a <CL_DisinfAlarmActon+0x1e2>
   9b4e4:	4b27      	ldr	r3, [pc, #156]	; (9b584 <CL_DisinfAlarmActon+0x22c>)
   9b4e6:	4798      	blx	r3
   9b4e8:	4b24      	ldr	r3, [pc, #144]	; (9b57c <CL_DisinfAlarmActon+0x224>)
   9b4ea:	4798      	blx	r3
   9b4ec:	4b24      	ldr	r3, [pc, #144]	; (9b580 <CL_DisinfAlarmActon+0x228>)
   9b4ee:	4798      	blx	r3
   9b4f0:	4b20      	ldr	r3, [pc, #128]	; (9b574 <CL_DisinfAlarmActon+0x21c>)
   9b4f2:	220c      	movs	r2, #12
   9b4f4:	701a      	strb	r2, [r3, #0]
   9b4f6:	e020      	b.n	9b53a <CL_DisinfAlarmActon+0x1e2>
   9b4f8:	4b22      	ldr	r3, [pc, #136]	; (9b584 <CL_DisinfAlarmActon+0x22c>)
   9b4fa:	4798      	blx	r3
   9b4fc:	4b1f      	ldr	r3, [pc, #124]	; (9b57c <CL_DisinfAlarmActon+0x224>)
   9b4fe:	4798      	blx	r3
   9b500:	4b1f      	ldr	r3, [pc, #124]	; (9b580 <CL_DisinfAlarmActon+0x228>)
   9b502:	4798      	blx	r3
   9b504:	4b1b      	ldr	r3, [pc, #108]	; (9b574 <CL_DisinfAlarmActon+0x21c>)
   9b506:	220c      	movs	r2, #12
   9b508:	701a      	strb	r2, [r3, #0]
   9b50a:	e016      	b.n	9b53a <CL_DisinfAlarmActon+0x1e2>
   9b50c:	4b1d      	ldr	r3, [pc, #116]	; (9b584 <CL_DisinfAlarmActon+0x22c>)
   9b50e:	4798      	blx	r3
   9b510:	4b1a      	ldr	r3, [pc, #104]	; (9b57c <CL_DisinfAlarmActon+0x224>)
   9b512:	4798      	blx	r3
   9b514:	4b1a      	ldr	r3, [pc, #104]	; (9b580 <CL_DisinfAlarmActon+0x228>)
   9b516:	4798      	blx	r3
   9b518:	4b16      	ldr	r3, [pc, #88]	; (9b574 <CL_DisinfAlarmActon+0x21c>)
   9b51a:	220c      	movs	r2, #12
   9b51c:	701a      	strb	r2, [r3, #0]
   9b51e:	e00c      	b.n	9b53a <CL_DisinfAlarmActon+0x1e2>
   9b520:	4b18      	ldr	r3, [pc, #96]	; (9b584 <CL_DisinfAlarmActon+0x22c>)
   9b522:	4798      	blx	r3
   9b524:	4b15      	ldr	r3, [pc, #84]	; (9b57c <CL_DisinfAlarmActon+0x224>)
   9b526:	4798      	blx	r3
   9b528:	4b15      	ldr	r3, [pc, #84]	; (9b580 <CL_DisinfAlarmActon+0x228>)
   9b52a:	4798      	blx	r3
   9b52c:	4b11      	ldr	r3, [pc, #68]	; (9b574 <CL_DisinfAlarmActon+0x21c>)
   9b52e:	220c      	movs	r2, #12
   9b530:	701a      	strb	r2, [r3, #0]
   9b532:	e002      	b.n	9b53a <CL_DisinfAlarmActon+0x1e2>
   9b534:	bf00      	nop
   9b536:	e000      	b.n	9b53a <CL_DisinfAlarmActon+0x1e2>
   9b538:	bf00      	nop
   9b53a:	79fb      	ldrb	r3, [r7, #7]
   9b53c:	2b00      	cmp	r3, #0
   9b53e:	d013      	beq.n	9b568 <CL_DisinfAlarmActon+0x210>
   9b540:	79fb      	ldrb	r3, [r7, #7]
   9b542:	723b      	strb	r3, [r7, #8]
   9b544:	2301      	movs	r3, #1
   9b546:	727b      	strb	r3, [r7, #9]
   9b548:	2302      	movs	r3, #2
   9b54a:	72bb      	strb	r3, [r7, #10]
   9b54c:	2307      	movs	r3, #7
   9b54e:	73fb      	strb	r3, [r7, #15]
   9b550:	f107 0108 	add.w	r1, r7, #8
   9b554:	7bfb      	ldrb	r3, [r7, #15]
   9b556:	2203      	movs	r2, #3
   9b558:	4618      	mov	r0, r3
   9b55a:	4b0b      	ldr	r3, [pc, #44]	; (9b588 <CL_DisinfAlarmActon+0x230>)
   9b55c:	4798      	blx	r3
   9b55e:	4603      	mov	r3, r0
   9b560:	75fb      	strb	r3, [r7, #23]
   9b562:	200a      	movs	r0, #10
   9b564:	4b09      	ldr	r3, [pc, #36]	; (9b58c <CL_DisinfAlarmActon+0x234>)
   9b566:	4798      	blx	r3
   9b568:	2300      	movs	r3, #0
   9b56a:	4618      	mov	r0, r3
   9b56c:	3718      	adds	r7, #24
   9b56e:	46bd      	mov	sp, r7
   9b570:	bd80      	pop	{r7, pc}
   9b572:	bf00      	nop
   9b574:	200727bb 	.word	0x200727bb
   9b578:	00097c05 	.word	0x00097c05
   9b57c:	00097c41 	.word	0x00097c41
   9b580:	0009b0a9 	.word	0x0009b0a9
   9b584:	00097c19 	.word	0x00097c19
   9b588:	00099729 	.word	0x00099729
   9b58c:	00091e2d 	.word	0x00091e2d

0009b590 <Cl_disinf_ResetAlertsforReassertion>:
   9b590:	b580      	push	{r7, lr}
   9b592:	b082      	sub	sp, #8
   9b594:	af00      	add	r7, sp, #0
   9b596:	2300      	movs	r3, #0
   9b598:	71fb      	strb	r3, [r7, #7]
   9b59a:	234d      	movs	r3, #77	; 0x4d
   9b59c:	71bb      	strb	r3, [r7, #6]
   9b59e:	4b2d      	ldr	r3, [pc, #180]	; (9b654 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b5a0:	2200      	movs	r2, #0
   9b5a2:	70da      	strb	r2, [r3, #3]
   9b5a4:	4b2b      	ldr	r3, [pc, #172]	; (9b654 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b5a6:	2200      	movs	r2, #0
   9b5a8:	729a      	strb	r2, [r3, #10]
   9b5aa:	2029      	movs	r0, #41	; 0x29
   9b5ac:	4b2a      	ldr	r3, [pc, #168]	; (9b658 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b5ae:	4798      	blx	r3
   9b5b0:	202b      	movs	r0, #43	; 0x2b
   9b5b2:	4b29      	ldr	r3, [pc, #164]	; (9b658 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b5b4:	4798      	blx	r3
   9b5b6:	4b27      	ldr	r3, [pc, #156]	; (9b654 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b5b8:	2200      	movs	r2, #0
   9b5ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   9b5be:	2008      	movs	r0, #8
   9b5c0:	4b25      	ldr	r3, [pc, #148]	; (9b658 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b5c2:	4798      	blx	r3
   9b5c4:	4b23      	ldr	r3, [pc, #140]	; (9b654 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b5c6:	2200      	movs	r2, #0
   9b5c8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   9b5cc:	4b21      	ldr	r3, [pc, #132]	; (9b654 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b5ce:	2200      	movs	r2, #0
   9b5d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   9b5d4:	2015      	movs	r0, #21
   9b5d6:	4b20      	ldr	r3, [pc, #128]	; (9b658 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b5d8:	4798      	blx	r3
   9b5da:	2016      	movs	r0, #22
   9b5dc:	4b1e      	ldr	r3, [pc, #120]	; (9b658 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b5de:	4798      	blx	r3
   9b5e0:	4b1c      	ldr	r3, [pc, #112]	; (9b654 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b5e2:	2200      	movs	r2, #0
   9b5e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   9b5e8:	4b1a      	ldr	r3, [pc, #104]	; (9b654 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b5ea:	2200      	movs	r2, #0
   9b5ec:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   9b5f0:	2017      	movs	r0, #23
   9b5f2:	4b19      	ldr	r3, [pc, #100]	; (9b658 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b5f4:	4798      	blx	r3
   9b5f6:	2018      	movs	r0, #24
   9b5f8:	4b17      	ldr	r3, [pc, #92]	; (9b658 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b5fa:	4798      	blx	r3
   9b5fc:	4b15      	ldr	r3, [pc, #84]	; (9b654 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b5fe:	2200      	movs	r2, #0
   9b600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
   9b604:	4b13      	ldr	r3, [pc, #76]	; (9b654 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b606:	2200      	movs	r2, #0
   9b608:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   9b60c:	2028      	movs	r0, #40	; 0x28
   9b60e:	4b12      	ldr	r3, [pc, #72]	; (9b658 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b610:	4798      	blx	r3
   9b612:	2027      	movs	r0, #39	; 0x27
   9b614:	4b10      	ldr	r3, [pc, #64]	; (9b658 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b616:	4798      	blx	r3
   9b618:	4b0e      	ldr	r3, [pc, #56]	; (9b654 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b61a:	2200      	movs	r2, #0
   9b61c:	77da      	strb	r2, [r3, #31]
   9b61e:	2011      	movs	r0, #17
   9b620:	4b0d      	ldr	r3, [pc, #52]	; (9b658 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b622:	4798      	blx	r3
   9b624:	4b0b      	ldr	r3, [pc, #44]	; (9b654 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b626:	2200      	movs	r2, #0
   9b628:	745a      	strb	r2, [r3, #17]
   9b62a:	2003      	movs	r0, #3
   9b62c:	4b0a      	ldr	r3, [pc, #40]	; (9b658 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b62e:	4798      	blx	r3
   9b630:	2005      	movs	r0, #5
   9b632:	4b09      	ldr	r3, [pc, #36]	; (9b658 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b634:	4798      	blx	r3
   9b636:	4b07      	ldr	r3, [pc, #28]	; (9b654 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b638:	2200      	movs	r2, #0
   9b63a:	761a      	strb	r2, [r3, #24]
   9b63c:	2004      	movs	r0, #4
   9b63e:	4b06      	ldr	r3, [pc, #24]	; (9b658 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b640:	4798      	blx	r3
   9b642:	2006      	movs	r0, #6
   9b644:	4b04      	ldr	r3, [pc, #16]	; (9b658 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b646:	4798      	blx	r3
   9b648:	79fb      	ldrb	r3, [r7, #7]
   9b64a:	4618      	mov	r0, r3
   9b64c:	3708      	adds	r7, #8
   9b64e:	46bd      	mov	sp, r7
   9b650:	bd80      	pop	{r7, pc}
   9b652:	bf00      	nop
   9b654:	20070a68 	.word	0x20070a68
   9b658:	00082ff1 	.word	0x00082ff1
   9b65c:	00000000 	.word	0x00000000

0009b660 <Cl_Disinf_SendDisinfStateData>:
   9b660:	b5f0      	push	{r4, r5, r6, r7, lr}
   9b662:	b08b      	sub	sp, #44	; 0x2c
   9b664:	af00      	add	r7, sp, #0
   9b666:	2300      	movs	r3, #0
   9b668:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9b66c:	2300      	movs	r3, #0
   9b66e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9b672:	463b      	mov	r3, r7
   9b674:	2200      	movs	r2, #0
   9b676:	601a      	str	r2, [r3, #0]
   9b678:	605a      	str	r2, [r3, #4]
   9b67a:	609a      	str	r2, [r3, #8]
   9b67c:	4b92      	ldr	r3, [pc, #584]	; (9b8c8 <Cl_Disinf_SendDisinfStateData+0x268>)
   9b67e:	681b      	ldr	r3, [r3, #0]
   9b680:	3301      	adds	r3, #1
   9b682:	4a91      	ldr	r2, [pc, #580]	; (9b8c8 <Cl_Disinf_SendDisinfStateData+0x268>)
   9b684:	6013      	str	r3, [r2, #0]
   9b686:	4b90      	ldr	r3, [pc, #576]	; (9b8c8 <Cl_Disinf_SendDisinfStateData+0x268>)
   9b688:	681b      	ldr	r3, [r3, #0]
   9b68a:	2b04      	cmp	r3, #4
   9b68c:	f240 81c5 	bls.w	9ba1a <Cl_Disinf_SendDisinfStateData+0x3ba>
   9b690:	4b8d      	ldr	r3, [pc, #564]	; (9b8c8 <Cl_Disinf_SendDisinfStateData+0x268>)
   9b692:	2200      	movs	r2, #0
   9b694:	601a      	str	r2, [r3, #0]
   9b696:	230b      	movs	r3, #11
   9b698:	703b      	strb	r3, [r7, #0]
   9b69a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b69e:	3301      	adds	r3, #1
   9b6a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9b6a4:	f107 030e 	add.w	r3, r7, #14
   9b6a8:	4619      	mov	r1, r3
   9b6aa:	2014      	movs	r0, #20
   9b6ac:	4b87      	ldr	r3, [pc, #540]	; (9b8cc <Cl_Disinf_SendDisinfStateData+0x26c>)
   9b6ae:	4798      	blx	r3
   9b6b0:	2300      	movs	r3, #0
   9b6b2:	613b      	str	r3, [r7, #16]
   9b6b4:	89fb      	ldrh	r3, [r7, #14]
   9b6b6:	461a      	mov	r2, r3
   9b6b8:	f649 5308 	movw	r3, #40200	; 0x9d08
   9b6bc:	fb03 f302 	mul.w	r3, r3, r2
   9b6c0:	2b00      	cmp	r3, #0
   9b6c2:	da02      	bge.n	9b6ca <Cl_Disinf_SendDisinfStateData+0x6a>
   9b6c4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   9b6c8:	33ff      	adds	r3, #255	; 0xff
   9b6ca:	141b      	asrs	r3, r3, #16
   9b6cc:	4618      	mov	r0, r3
   9b6ce:	4b80      	ldr	r3, [pc, #512]	; (9b8d0 <Cl_Disinf_SendDisinfStateData+0x270>)
   9b6d0:	4798      	blx	r3
   9b6d2:	4b80      	ldr	r3, [pc, #512]	; (9b8d4 <Cl_Disinf_SendDisinfStateData+0x274>)
   9b6d4:	681a      	ldr	r2, [r3, #0]
   9b6d6:	4b80      	ldr	r3, [pc, #512]	; (9b8d8 <Cl_Disinf_SendDisinfStateData+0x278>)
   9b6d8:	4980      	ldr	r1, [pc, #512]	; (9b8dc <Cl_Disinf_SendDisinfStateData+0x27c>)
   9b6da:	4610      	mov	r0, r2
   9b6dc:	4798      	blx	r3
   9b6de:	4603      	mov	r3, r0
   9b6e0:	623b      	str	r3, [r7, #32]
   9b6e2:	4b7f      	ldr	r3, [pc, #508]	; (9b8e0 <Cl_Disinf_SendDisinfStateData+0x280>)
   9b6e4:	6a38      	ldr	r0, [r7, #32]
   9b6e6:	4798      	blx	r3
   9b6e8:	4c7e      	ldr	r4, [pc, #504]	; (9b8e4 <Cl_Disinf_SendDisinfStateData+0x284>)
   9b6ea:	a36f      	add	r3, pc, #444	; (adr r3, 9b8a8 <Cl_Disinf_SendDisinfStateData+0x248>)
   9b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   9b6f0:	47a0      	blx	r4
   9b6f2:	4603      	mov	r3, r0
   9b6f4:	460c      	mov	r4, r1
   9b6f6:	4618      	mov	r0, r3
   9b6f8:	4621      	mov	r1, r4
   9b6fa:	4c7b      	ldr	r4, [pc, #492]	; (9b8e8 <Cl_Disinf_SendDisinfStateData+0x288>)
   9b6fc:	a36c      	add	r3, pc, #432	; (adr r3, 9b8b0 <Cl_Disinf_SendDisinfStateData+0x250>)
   9b6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   9b702:	47a0      	blx	r4
   9b704:	4603      	mov	r3, r0
   9b706:	460c      	mov	r4, r1
   9b708:	4619      	mov	r1, r3
   9b70a:	4622      	mov	r2, r4
   9b70c:	4b77      	ldr	r3, [pc, #476]	; (9b8ec <Cl_Disinf_SendDisinfStateData+0x28c>)
   9b70e:	4608      	mov	r0, r1
   9b710:	4611      	mov	r1, r2
   9b712:	4798      	blx	r3
   9b714:	4603      	mov	r3, r0
   9b716:	623b      	str	r3, [r7, #32]
   9b718:	4b75      	ldr	r3, [pc, #468]	; (9b8f0 <Cl_Disinf_SendDisinfStateData+0x290>)
   9b71a:	681a      	ldr	r2, [r3, #0]
   9b71c:	4b75      	ldr	r3, [pc, #468]	; (9b8f4 <Cl_Disinf_SendDisinfStateData+0x294>)
   9b71e:	4976      	ldr	r1, [pc, #472]	; (9b8f8 <Cl_Disinf_SendDisinfStateData+0x298>)
   9b720:	4610      	mov	r0, r2
   9b722:	4798      	blx	r3
   9b724:	4603      	mov	r3, r0
   9b726:	461a      	mov	r2, r3
   9b728:	4b74      	ldr	r3, [pc, #464]	; (9b8fc <Cl_Disinf_SendDisinfStateData+0x29c>)
   9b72a:	6a39      	ldr	r1, [r7, #32]
   9b72c:	4610      	mov	r0, r2
   9b72e:	4798      	blx	r3
   9b730:	4603      	mov	r3, r0
   9b732:	461a      	mov	r2, r3
   9b734:	4b68      	ldr	r3, [pc, #416]	; (9b8d8 <Cl_Disinf_SendDisinfStateData+0x278>)
   9b736:	4972      	ldr	r1, [pc, #456]	; (9b900 <Cl_Disinf_SendDisinfStateData+0x2a0>)
   9b738:	4610      	mov	r0, r2
   9b73a:	4798      	blx	r3
   9b73c:	4603      	mov	r3, r0
   9b73e:	461a      	mov	r2, r3
   9b740:	4b6b      	ldr	r3, [pc, #428]	; (9b8f0 <Cl_Disinf_SendDisinfStateData+0x290>)
   9b742:	601a      	str	r2, [r3, #0]
   9b744:	f107 030e 	add.w	r3, r7, #14
   9b748:	4619      	mov	r1, r3
   9b74a:	2007      	movs	r0, #7
   9b74c:	4b5f      	ldr	r3, [pc, #380]	; (9b8cc <Cl_Disinf_SendDisinfStateData+0x26c>)
   9b74e:	4798      	blx	r3
   9b750:	f04f 0300 	mov.w	r3, #0
   9b754:	61fb      	str	r3, [r7, #28]
   9b756:	f04f 0300 	mov.w	r3, #0
   9b75a:	61bb      	str	r3, [r7, #24]
   9b75c:	89fb      	ldrh	r3, [r7, #14]
   9b75e:	461a      	mov	r2, r3
   9b760:	4b68      	ldr	r3, [pc, #416]	; (9b904 <Cl_Disinf_SendDisinfStateData+0x2a4>)
   9b762:	4610      	mov	r0, r2
   9b764:	4798      	blx	r3
   9b766:	4c68      	ldr	r4, [pc, #416]	; (9b908 <Cl_Disinf_SendDisinfStateData+0x2a8>)
   9b768:	a353      	add	r3, pc, #332	; (adr r3, 9b8b8 <Cl_Disinf_SendDisinfStateData+0x258>)
   9b76a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9b76e:	47a0      	blx	r4
   9b770:	4603      	mov	r3, r0
   9b772:	460c      	mov	r4, r1
   9b774:	4619      	mov	r1, r3
   9b776:	4622      	mov	r2, r4
   9b778:	4b5c      	ldr	r3, [pc, #368]	; (9b8ec <Cl_Disinf_SendDisinfStateData+0x28c>)
   9b77a:	4608      	mov	r0, r1
   9b77c:	4611      	mov	r1, r2
   9b77e:	4798      	blx	r3
   9b780:	4603      	mov	r3, r0
   9b782:	61bb      	str	r3, [r7, #24]
   9b784:	4b61      	ldr	r3, [pc, #388]	; (9b90c <Cl_Disinf_SendDisinfStateData+0x2ac>)
   9b786:	4962      	ldr	r1, [pc, #392]	; (9b910 <Cl_Disinf_SendDisinfStateData+0x2b0>)
   9b788:	69b8      	ldr	r0, [r7, #24]
   9b78a:	4798      	blx	r3
   9b78c:	4603      	mov	r3, r0
   9b78e:	2b00      	cmp	r3, #0
   9b790:	f000 80d0 	beq.w	9b934 <Cl_Disinf_SendDisinfStateData+0x2d4>
   9b794:	69b8      	ldr	r0, [r7, #24]
   9b796:	4b5f      	ldr	r3, [pc, #380]	; (9b914 <Cl_Disinf_SendDisinfStateData+0x2b4>)
   9b798:	4798      	blx	r3
   9b79a:	4b5f      	ldr	r3, [pc, #380]	; (9b918 <Cl_Disinf_SendDisinfStateData+0x2b8>)
   9b79c:	681a      	ldr	r2, [r3, #0]
   9b79e:	4b55      	ldr	r3, [pc, #340]	; (9b8f4 <Cl_Disinf_SendDisinfStateData+0x294>)
   9b7a0:	4955      	ldr	r1, [pc, #340]	; (9b8f8 <Cl_Disinf_SendDisinfStateData+0x298>)
   9b7a2:	4610      	mov	r0, r2
   9b7a4:	4798      	blx	r3
   9b7a6:	4603      	mov	r3, r0
   9b7a8:	4618      	mov	r0, r3
   9b7aa:	4b5c      	ldr	r3, [pc, #368]	; (9b91c <Cl_Disinf_SendDisinfStateData+0x2bc>)
   9b7ac:	681a      	ldr	r2, [r3, #0]
   9b7ae:	4b53      	ldr	r3, [pc, #332]	; (9b8fc <Cl_Disinf_SendDisinfStateData+0x29c>)
   9b7b0:	4611      	mov	r1, r2
   9b7b2:	4798      	blx	r3
   9b7b4:	4603      	mov	r3, r0
   9b7b6:	461a      	mov	r2, r3
   9b7b8:	4b47      	ldr	r3, [pc, #284]	; (9b8d8 <Cl_Disinf_SendDisinfStateData+0x278>)
   9b7ba:	4951      	ldr	r1, [pc, #324]	; (9b900 <Cl_Disinf_SendDisinfStateData+0x2a0>)
   9b7bc:	4610      	mov	r0, r2
   9b7be:	4798      	blx	r3
   9b7c0:	4603      	mov	r3, r0
   9b7c2:	461a      	mov	r2, r3
   9b7c4:	4b54      	ldr	r3, [pc, #336]	; (9b918 <Cl_Disinf_SendDisinfStateData+0x2b8>)
   9b7c6:	601a      	str	r2, [r3, #0]
   9b7c8:	4b53      	ldr	r3, [pc, #332]	; (9b918 <Cl_Disinf_SendDisinfStateData+0x2b8>)
   9b7ca:	681a      	ldr	r2, [r3, #0]
   9b7cc:	4b44      	ldr	r3, [pc, #272]	; (9b8e0 <Cl_Disinf_SendDisinfStateData+0x280>)
   9b7ce:	4610      	mov	r0, r2
   9b7d0:	4798      	blx	r3
   9b7d2:	4605      	mov	r5, r0
   9b7d4:	460e      	mov	r6, r1
   9b7d6:	4b46      	ldr	r3, [pc, #280]	; (9b8f0 <Cl_Disinf_SendDisinfStateData+0x290>)
   9b7d8:	681a      	ldr	r2, [r3, #0]
   9b7da:	4b41      	ldr	r3, [pc, #260]	; (9b8e0 <Cl_Disinf_SendDisinfStateData+0x280>)
   9b7dc:	4610      	mov	r0, r2
   9b7de:	4798      	blx	r3
   9b7e0:	4c40      	ldr	r4, [pc, #256]	; (9b8e4 <Cl_Disinf_SendDisinfStateData+0x284>)
   9b7e2:	f04f 0200 	mov.w	r2, #0
   9b7e6:	4b4e      	ldr	r3, [pc, #312]	; (9b920 <Cl_Disinf_SendDisinfStateData+0x2c0>)
   9b7e8:	47a0      	blx	r4
   9b7ea:	4603      	mov	r3, r0
   9b7ec:	460c      	mov	r4, r1
   9b7ee:	4618      	mov	r0, r3
   9b7f0:	4621      	mov	r1, r4
   9b7f2:	4c45      	ldr	r4, [pc, #276]	; (9b908 <Cl_Disinf_SendDisinfStateData+0x2a8>)
   9b7f4:	a332      	add	r3, pc, #200	; (adr r3, 9b8c0 <Cl_Disinf_SendDisinfStateData+0x260>)
   9b7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   9b7fa:	47a0      	blx	r4
   9b7fc:	4603      	mov	r3, r0
   9b7fe:	460c      	mov	r4, r1
   9b800:	4618      	mov	r0, r3
   9b802:	4621      	mov	r1, r4
   9b804:	4c38      	ldr	r4, [pc, #224]	; (9b8e8 <Cl_Disinf_SendDisinfStateData+0x288>)
   9b806:	f04f 0200 	mov.w	r2, #0
   9b80a:	4b46      	ldr	r3, [pc, #280]	; (9b924 <Cl_Disinf_SendDisinfStateData+0x2c4>)
   9b80c:	47a0      	blx	r4
   9b80e:	4603      	mov	r3, r0
   9b810:	460c      	mov	r4, r1
   9b812:	461a      	mov	r2, r3
   9b814:	4623      	mov	r3, r4
   9b816:	4c44      	ldr	r4, [pc, #272]	; (9b928 <Cl_Disinf_SendDisinfStateData+0x2c8>)
   9b818:	4628      	mov	r0, r5
   9b81a:	4631      	mov	r1, r6
   9b81c:	47a0      	blx	r4
   9b81e:	4603      	mov	r3, r0
   9b820:	460c      	mov	r4, r1
   9b822:	4619      	mov	r1, r3
   9b824:	4622      	mov	r2, r4
   9b826:	4b31      	ldr	r3, [pc, #196]	; (9b8ec <Cl_Disinf_SendDisinfStateData+0x28c>)
   9b828:	4608      	mov	r0, r1
   9b82a:	4611      	mov	r1, r2
   9b82c:	4798      	blx	r3
   9b82e:	4603      	mov	r3, r0
   9b830:	61fb      	str	r3, [r7, #28]
   9b832:	4b29      	ldr	r3, [pc, #164]	; (9b8d8 <Cl_Disinf_SendDisinfStateData+0x278>)
   9b834:	493d      	ldr	r1, [pc, #244]	; (9b92c <Cl_Disinf_SendDisinfStateData+0x2cc>)
   9b836:	69f8      	ldr	r0, [r7, #28]
   9b838:	4798      	blx	r3
   9b83a:	4603      	mov	r3, r0
   9b83c:	461a      	mov	r2, r3
   9b83e:	4b3c      	ldr	r3, [pc, #240]	; (9b930 <Cl_Disinf_SendDisinfStateData+0x2d0>)
   9b840:	4610      	mov	r0, r2
   9b842:	4798      	blx	r3
   9b844:	4603      	mov	r3, r0
   9b846:	b29b      	uxth	r3, r3
   9b848:	823b      	strh	r3, [r7, #16]
   9b84a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b84e:	1c5a      	adds	r2, r3, #1
   9b850:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b854:	7c3a      	ldrb	r2, [r7, #16]
   9b856:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b85a:	440b      	add	r3, r1
   9b85c:	f803 2c28 	strb.w	r2, [r3, #-40]
   9b860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b864:	1c5a      	adds	r2, r3, #1
   9b866:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b86a:	7c7a      	ldrb	r2, [r7, #17]
   9b86c:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b870:	440b      	add	r3, r1
   9b872:	f803 2c28 	strb.w	r2, [r3, #-40]
   9b876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b87a:	1c5a      	adds	r2, r3, #1
   9b87c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b880:	7cba      	ldrb	r2, [r7, #18]
   9b882:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b886:	440b      	add	r3, r1
   9b888:	f803 2c28 	strb.w	r2, [r3, #-40]
   9b88c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b890:	1c5a      	adds	r2, r3, #1
   9b892:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b896:	7cfa      	ldrb	r2, [r7, #19]
   9b898:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b89c:	440b      	add	r3, r1
   9b89e:	f803 2c28 	strb.w	r2, [r3, #-40]
   9b8a2:	e075      	b.n	9b990 <Cl_Disinf_SendDisinfStateData+0x330>
   9b8a4:	f3af 8000 	nop.w
   9b8a8:	cccccccd 	.word	0xcccccccd
   9b8ac:	4008cccc 	.word	0x4008cccc
   9b8b0:	66666666 	.word	0x66666666
   9b8b4:	3ff66666 	.word	0x3ff66666
   9b8b8:	58e21965 	.word	0x58e21965
   9b8bc:	3fe9b717 	.word	0x3fe9b717
   9b8c0:	47ae147b 	.word	0x47ae147b
   9b8c4:	3f947ae1 	.word	0x3f947ae1
   9b8c8:	200727e8 	.word	0x200727e8
   9b8cc:	0008d6b1 	.word	0x0008d6b1
   9b8d0:	0008e8e1 	.word	0x0008e8e1
   9b8d4:	20072630 	.word	0x20072630
   9b8d8:	000a3f7d 	.word	0x000a3f7d
   9b8dc:	42c80000 	.word	0x42c80000
   9b8e0:	000a34ed 	.word	0x000a34ed
   9b8e4:	000a322d 	.word	0x000a322d
   9b8e8:	000a3231 	.word	0x000a3231
   9b8ec:	000a3b59 	.word	0x000a3b59
   9b8f0:	200727ec 	.word	0x200727ec
   9b8f4:	000a3e15 	.word	0x000a3e15
   9b8f8:	40a00000 	.word	0x40a00000
   9b8fc:	000a3c05 	.word	0x000a3c05
   9b900:	40c00000 	.word	0x40c00000
   9b904:	000a34c9 	.word	0x000a34c9
   9b908:	000a3595 	.word	0x000a3595
   9b90c:	000a418d 	.word	0x000a418d
   9b910:	44160000 	.word	0x44160000
   9b914:	000846a5 	.word	0x000846a5
   9b918:	200727f0 	.word	0x200727f0
   9b91c:	20071674 	.word	0x20071674
   9b920:	40390000 	.word	0x40390000
   9b924:	3ff00000 	.word	0x3ff00000
   9b928:	000a37e9 	.word	0x000a37e9
   9b92c:	41200000 	.word	0x41200000
   9b930:	000a41ed 	.word	0x000a41ed
   9b934:	2300      	movs	r3, #0
   9b936:	823b      	strh	r3, [r7, #16]
   9b938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b93c:	1c5a      	adds	r2, r3, #1
   9b93e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b942:	7c3a      	ldrb	r2, [r7, #16]
   9b944:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b948:	440b      	add	r3, r1
   9b94a:	f803 2c28 	strb.w	r2, [r3, #-40]
   9b94e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b952:	1c5a      	adds	r2, r3, #1
   9b954:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b958:	7c7a      	ldrb	r2, [r7, #17]
   9b95a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b95e:	440b      	add	r3, r1
   9b960:	f803 2c28 	strb.w	r2, [r3, #-40]
   9b964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b968:	1c5a      	adds	r2, r3, #1
   9b96a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b96e:	7cba      	ldrb	r2, [r7, #18]
   9b970:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b974:	440b      	add	r3, r1
   9b976:	f803 2c28 	strb.w	r2, [r3, #-40]
   9b97a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b97e:	1c5a      	adds	r2, r3, #1
   9b980:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b984:	7cfa      	ldrb	r2, [r7, #19]
   9b986:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b98a:	440b      	add	r3, r1
   9b98c:	f803 2c28 	strb.w	r2, [r3, #-40]
   9b990:	4b24      	ldr	r3, [pc, #144]	; (9ba24 <Cl_Disinf_SendDisinfStateData+0x3c4>)
   9b992:	681a      	ldr	r2, [r3, #0]
   9b994:	4b24      	ldr	r3, [pc, #144]	; (9ba28 <Cl_Disinf_SendDisinfStateData+0x3c8>)
   9b996:	4925      	ldr	r1, [pc, #148]	; (9ba2c <Cl_Disinf_SendDisinfStateData+0x3cc>)
   9b998:	4610      	mov	r0, r2
   9b99a:	4798      	blx	r3
   9b99c:	4603      	mov	r3, r0
   9b99e:	461a      	mov	r2, r3
   9b9a0:	4b23      	ldr	r3, [pc, #140]	; (9ba30 <Cl_Disinf_SendDisinfStateData+0x3d0>)
   9b9a2:	4610      	mov	r0, r2
   9b9a4:	4798      	blx	r3
   9b9a6:	4603      	mov	r3, r0
   9b9a8:	b29b      	uxth	r3, r3
   9b9aa:	823b      	strh	r3, [r7, #16]
   9b9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b9b0:	1c5a      	adds	r2, r3, #1
   9b9b2:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b9b6:	7c3a      	ldrb	r2, [r7, #16]
   9b9b8:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b9bc:	440b      	add	r3, r1
   9b9be:	f803 2c28 	strb.w	r2, [r3, #-40]
   9b9c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b9c6:	1c5a      	adds	r2, r3, #1
   9b9c8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b9cc:	7c7a      	ldrb	r2, [r7, #17]
   9b9ce:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b9d2:	440b      	add	r3, r1
   9b9d4:	f803 2c28 	strb.w	r2, [r3, #-40]
   9b9d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b9dc:	1c5a      	adds	r2, r3, #1
   9b9de:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b9e2:	7cba      	ldrb	r2, [r7, #18]
   9b9e4:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b9e8:	440b      	add	r3, r1
   9b9ea:	f803 2c28 	strb.w	r2, [r3, #-40]
   9b9ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b9f2:	1c5a      	adds	r2, r3, #1
   9b9f4:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b9f8:	7cfa      	ldrb	r2, [r7, #19]
   9b9fa:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b9fe:	440b      	add	r3, r1
   9ba00:	f803 2c28 	strb.w	r2, [r3, #-40]
   9ba04:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   9ba08:	463b      	mov	r3, r7
   9ba0a:	4619      	mov	r1, r3
   9ba0c:	202a      	movs	r0, #42	; 0x2a
   9ba0e:	4b09      	ldr	r3, [pc, #36]	; (9ba34 <Cl_Disinf_SendDisinfStateData+0x3d4>)
   9ba10:	4798      	blx	r3
   9ba12:	4603      	mov	r3, r0
   9ba14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9ba18:	e000      	b.n	9ba1c <Cl_Disinf_SendDisinfStateData+0x3bc>
   9ba1a:	bf00      	nop
   9ba1c:	4618      	mov	r0, r3
   9ba1e:	372c      	adds	r7, #44	; 0x2c
   9ba20:	46bd      	mov	sp, r7
   9ba22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9ba24:	200727ec 	.word	0x200727ec
   9ba28:	000a3e15 	.word	0x000a3e15
   9ba2c:	41200000 	.word	0x41200000
   9ba30:	000a41ed 	.word	0x000a41ed
   9ba34:	00099729 	.word	0x00099729

0009ba38 <UpdateDisinfMinuteTick>:
   9ba38:	b580      	push	{r7, lr}
   9ba3a:	b082      	sub	sp, #8
   9ba3c:	af00      	add	r7, sp, #0
   9ba3e:	2300      	movs	r3, #0
   9ba40:	71fb      	strb	r3, [r7, #7]
   9ba42:	4b0b      	ldr	r3, [pc, #44]	; (9ba70 <UpdateDisinfMinuteTick+0x38>)
   9ba44:	2200      	movs	r2, #0
   9ba46:	601a      	str	r2, [r3, #0]
   9ba48:	4b0a      	ldr	r3, [pc, #40]	; (9ba74 <UpdateDisinfMinuteTick+0x3c>)
   9ba4a:	681b      	ldr	r3, [r3, #0]
   9ba4c:	3301      	adds	r3, #1
   9ba4e:	4a09      	ldr	r2, [pc, #36]	; (9ba74 <UpdateDisinfMinuteTick+0x3c>)
   9ba50:	6013      	str	r3, [r2, #0]
   9ba52:	4b09      	ldr	r3, [pc, #36]	; (9ba78 <UpdateDisinfMinuteTick+0x40>)
   9ba54:	681b      	ldr	r3, [r3, #0]
   9ba56:	3301      	adds	r3, #1
   9ba58:	4a07      	ldr	r2, [pc, #28]	; (9ba78 <UpdateDisinfMinuteTick+0x40>)
   9ba5a:	6013      	str	r3, [r2, #0]
   9ba5c:	4b07      	ldr	r3, [pc, #28]	; (9ba7c <UpdateDisinfMinuteTick+0x44>)
   9ba5e:	4798      	blx	r3
   9ba60:	4603      	mov	r3, r0
   9ba62:	71fb      	strb	r3, [r7, #7]
   9ba64:	79fb      	ldrb	r3, [r7, #7]
   9ba66:	4618      	mov	r0, r3
   9ba68:	3708      	adds	r7, #8
   9ba6a:	46bd      	mov	sp, r7
   9ba6c:	bd80      	pop	{r7, pc}
   9ba6e:	bf00      	nop
   9ba70:	200727bc 	.word	0x200727bc
   9ba74:	200727c0 	.word	0x200727c0
   9ba78:	200727d4 	.word	0x200727d4
   9ba7c:	0009b1dd 	.word	0x0009b1dd

0009ba80 <Cl_dprep_init>:

 int Cl_dprepsecondscounter =0 ,Cl_dprepMinutescounter=0, Cl_dprephourscounter=0;
 int Cl_dprepTotalMinutescounter=0, Cl_dprepTotalhourscounter=0;

 Cl_ReturnCodeType Cl_dprep_init(void)
 {
   9ba80:	b580      	push	{r7, lr}
   9ba82:	af00      	add	r7, sp, #0
	 

 	Cl_Dprepsecondscounter = 0;
   9ba84:	4b2f      	ldr	r3, [pc, #188]	; (9bb44 <Cl_dprep_init+0xc4>)
   9ba86:	2200      	movs	r2, #0
   9ba88:	601a      	str	r2, [r3, #0]
 	Cl_DprepMinutescounter= 0;
   9ba8a:	4b2f      	ldr	r3, [pc, #188]	; (9bb48 <Cl_dprep_init+0xc8>)
   9ba8c:	2200      	movs	r2, #0
   9ba8e:	601a      	str	r2, [r3, #0]
 	Cl_Dprephourscounter= 0;
   9ba90:	4b2e      	ldr	r3, [pc, #184]	; (9bb4c <Cl_dprep_init+0xcc>)
   9ba92:	2200      	movs	r2, #0
   9ba94:	601a      	str	r2, [r3, #0]
 	Cl_DprepTotalMinutescounter= 0;
   9ba96:	4b2e      	ldr	r3, [pc, #184]	; (9bb50 <Cl_dprep_init+0xd0>)
   9ba98:	2200      	movs	r2, #0
   9ba9a:	601a      	str	r2, [r3, #0]
 	Cl_DprepTotalhourscounter=0;
   9ba9c:	4b2d      	ldr	r3, [pc, #180]	; (9bb54 <Cl_dprep_init+0xd4>)
   9ba9e:	2200      	movs	r2, #0
   9baa0:	601a      	str	r2, [r3, #0]
	Cl_Dprep_hepbolus_secondscounter=0;
   9baa2:	4b2d      	ldr	r3, [pc, #180]	; (9bb58 <Cl_dprep_init+0xd8>)
   9baa4:	2200      	movs	r2, #0
   9baa6:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_secondscounter = 0;
   9baa8:	4b2c      	ldr	r3, [pc, #176]	; (9bb5c <Cl_dprep_init+0xdc>)
   9baaa:	2200      	movs	r2, #0
   9baac:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_Minutescounter = 0;
   9baae:	4b2c      	ldr	r3, [pc, #176]	; (9bb60 <Cl_dprep_init+0xe0>)
   9bab0:	2200      	movs	r2, #0
   9bab2:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_TotalMinutescounter = 0;
   9bab4:	4b2b      	ldr	r3, [pc, #172]	; (9bb64 <Cl_dprep_init+0xe4>)
   9bab6:	2200      	movs	r2, #0
   9bab8:	801a      	strh	r2, [r3, #0]

	Cl_Dprep_Prime_secondscounter = 0;
   9baba:	4b2b      	ldr	r3, [pc, #172]	; (9bb68 <Cl_dprep_init+0xe8>)
   9babc:	2200      	movs	r2, #0
   9babe:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_Prime_Minutescounter = 0;
   9bac0:	4b2a      	ldr	r3, [pc, #168]	; (9bb6c <Cl_dprep_init+0xec>)
   9bac2:	2200      	movs	r2, #0
   9bac4:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_Prime_TotalMinutescounter = 0;
   9bac6:	4b2a      	ldr	r3, [pc, #168]	; (9bb70 <Cl_dprep_init+0xf0>)
   9bac8:	2200      	movs	r2, #0
   9baca:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_secondscounter = 0;
   9bacc:	4b29      	ldr	r3, [pc, #164]	; (9bb74 <Cl_dprep_init+0xf4>)
   9bace:	2200      	movs	r2, #0
   9bad0:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_Minutescounter = 0;
   9bad2:	4b29      	ldr	r3, [pc, #164]	; (9bb78 <Cl_dprep_init+0xf8>)
   9bad4:	2200      	movs	r2, #0
   9bad6:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_TotalMinutescounter = 0;
   9bad8:	4b28      	ldr	r3, [pc, #160]	; (9bb7c <Cl_dprep_init+0xfc>)
   9bada:	2200      	movs	r2, #0
   9badc:	801a      	strh	r2, [r3, #0]
	hep_bolus_flag = 0;
   9bade:	4b28      	ldr	r3, [pc, #160]	; (9bb80 <Cl_dprep_init+0x100>)
   9bae0:	2200      	movs	r2, #0
   9bae2:	801a      	strh	r2, [r3, #0]
	dprep_count=0;
   9bae4:	4b27      	ldr	r3, [pc, #156]	; (9bb84 <Cl_dprep_init+0x104>)
   9bae6:	2200      	movs	r2, #0
   9bae8:	801a      	strh	r2, [r3, #0]
	temp3_cel_backup=0;
   9baea:	4b27      	ldr	r3, [pc, #156]	; (9bb88 <Cl_dprep_init+0x108>)
   9baec:	f04f 0200 	mov.w	r2, #0
   9baf0:	601a      	str	r2, [r3, #0]
	cl_temp3_stable_confirm = false;
   9baf2:	4b26      	ldr	r3, [pc, #152]	; (9bb8c <Cl_dprep_init+0x10c>)
   9baf4:	2200      	movs	r2, #0
   9baf6:	701a      	strb	r2, [r3, #0]
	cl_temp3_stable= false;
   9baf8:	4b25      	ldr	r3, [pc, #148]	; (9bb90 <Cl_dprep_init+0x110>)
   9bafa:	2200      	movs	r2, #0
   9bafc:	701a      	strb	r2, [r3, #0]
	cl_temp3_range_stable= false;
   9bafe:	4b25      	ldr	r3, [pc, #148]	; (9bb94 <Cl_dprep_init+0x114>)
   9bb00:	2200      	movs	r2, #0
   9bb02:	701a      	strb	r2, [r3, #0]
	 cl_temp3_37stable = false;
   9bb04:	4b24      	ldr	r3, [pc, #144]	; (9bb98 <Cl_dprep_init+0x118>)
   9bb06:	2200      	movs	r2, #0
   9bb08:	701a      	strb	r2, [r3, #0]
	Cl_Prime_state ;
	 cl_50ms_timer = 0;
   9bb0a:	4b24      	ldr	r3, [pc, #144]	; (9bb9c <Cl_dprep_init+0x11c>)
   9bb0c:	2200      	movs	r2, #0
   9bb0e:	801a      	strh	r2, [r3, #0]
	 Cl_PatientState = CL_DPREP_PATIENT_STATE_NOT_CONNECTED;
   9bb10:	4b23      	ldr	r3, [pc, #140]	; (9bba0 <Cl_dprep_init+0x120>)
   9bb12:	2200      	movs	r2, #0
   9bb14:	701a      	strb	r2, [r3, #0]
	 cl_dprepstate = CL_DPREP_STATE_IDLE;
   9bb16:	4b23      	ldr	r3, [pc, #140]	; (9bba4 <Cl_dprep_init+0x124>)
   9bb18:	2200      	movs	r2, #0
   9bb1a:	701a      	strb	r2, [r3, #0]
	 cl_dprepfillingState = CL_DPREP_FILLING_IDLE;
   9bb1c:	4b22      	ldr	r3, [pc, #136]	; (9bba8 <Cl_dprep_init+0x128>)
   9bb1e:	2200      	movs	r2, #0
   9bb20:	701a      	strb	r2, [r3, #0]
	dprep_heater_stable_status = false;
   9bb22:	4b22      	ldr	r3, [pc, #136]	; (9bbac <Cl_dprep_init+0x12c>)
   9bb24:	2200      	movs	r2, #0
   9bb26:	701a      	strb	r2, [r3, #0]
	 stability_counter = 0;
   9bb28:	4b21      	ldr	r3, [pc, #132]	; (9bbb0 <Cl_dprep_init+0x130>)
   9bb2a:	2200      	movs	r2, #0
   9bb2c:	601a      	str	r2, [r3, #0]
	  wait_timeout_counter = 0;
   9bb2e:	4b21      	ldr	r3, [pc, #132]	; (9bbb4 <Cl_dprep_init+0x134>)
   9bb30:	2200      	movs	r2, #0
   9bb32:	601a      	str	r2, [r3, #0]
	  state_counter = 0;
   9bb34:	4b20      	ldr	r3, [pc, #128]	; (9bbb8 <Cl_dprep_init+0x138>)
   9bb36:	2200      	movs	r2, #0
   9bb38:	601a      	str	r2, [r3, #0]
	cl_dprep_primeInit();
   9bb3a:	4b20      	ldr	r3, [pc, #128]	; (9bbbc <Cl_dprep_init+0x13c>)
   9bb3c:	4798      	blx	r3

	 return CL_OK;
   9bb3e:	2300      	movs	r3, #0
 }
   9bb40:	4618      	mov	r0, r3
   9bb42:	bd80      	pop	{r7, pc}
   9bb44:	20072804 	.word	0x20072804
   9bb48:	20072808 	.word	0x20072808
   9bb4c:	2007280c 	.word	0x2007280c
   9bb50:	20072810 	.word	0x20072810
   9bb54:	20072814 	.word	0x20072814
   9bb58:	20072818 	.word	0x20072818
   9bb5c:	2007281a 	.word	0x2007281a
   9bb60:	2007281c 	.word	0x2007281c
   9bb64:	2007281e 	.word	0x2007281e
   9bb68:	20072820 	.word	0x20072820
   9bb6c:	20072822 	.word	0x20072822
   9bb70:	20072824 	.word	0x20072824
   9bb74:	20072826 	.word	0x20072826
   9bb78:	20072828 	.word	0x20072828
   9bb7c:	2007282a 	.word	0x2007282a
   9bb80:	2007282c 	.word	0x2007282c
   9bb84:	2007282e 	.word	0x2007282e
   9bb88:	20072830 	.word	0x20072830
   9bb8c:	20072834 	.word	0x20072834
   9bb90:	20072835 	.word	0x20072835
   9bb94:	20072836 	.word	0x20072836
   9bb98:	20072837 	.word	0x20072837
   9bb9c:	20072838 	.word	0x20072838
   9bba0:	2007283a 	.word	0x2007283a
   9bba4:	2007283b 	.word	0x2007283b
   9bba8:	2007283d 	.word	0x2007283d
   9bbac:	200727f5 	.word	0x200727f5
   9bbb0:	200727f8 	.word	0x200727f8
   9bbb4:	200727fc 	.word	0x200727fc
   9bbb8:	20072800 	.word	0x20072800
   9bbbc:	00087c61 	.word	0x00087c61

0009bbc0 <Cl_dprep_controller>:
 

 
Cl_ReturnCodeType Cl_dprep_controller(Cl_Mac_EventsType Cl_MacDprepEvent)
{
   9bbc0:	b590      	push	{r4, r7, lr}
   9bbc2:	b0a9      	sub	sp, #164	; 0xa4
   9bbc4:	af00      	add	r7, sp, #0
   9bbc6:	4603      	mov	r3, r0
   9bbc8:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_dprepretcode = CL_OK;
   9bbca:	2300      	movs	r3, #0
   9bbcc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	Cl_Dprep_Events cl_dprepevent = EVENT_DPREP_EVENT_NULL;
   9bbd0:	2300      	movs	r3, #0
   9bbd2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9bbd6:	234d      	movs	r3, #77	; 0x4d
   9bbd8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	Cl_Uint8Type data = 0;
   9bbdc:	2300      	movs	r3, #0
   9bbde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	Cl_Uint8Type datasize = 0;
   9bbe2:	2300      	movs	r3, #0
   9bbe4:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	Cl_Uint8Type dataarray[4] =  {0,0,0,0};
   9bbe8:	2300      	movs	r3, #0
   9bbea:	663b      	str	r3, [r7, #96]	; 0x60
	Cl_Uint8Type systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   9bbec:	f107 0338 	add.w	r3, r7, #56	; 0x38
   9bbf0:	2228      	movs	r2, #40	; 0x28
   9bbf2:	2100      	movs	r1, #0
   9bbf4:	4618      	mov	r0, r3
   9bbf6:	4bb8      	ldr	r3, [pc, #736]	; (9bed8 <Cl_dprep_controller+0x318>)
   9bbf8:	4798      	blx	r3
	cl_PrepDatatype tempdata;
	Cl_BoolType cl_status;
	cl_PrepDatatype cl_PrepData;															
	Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false,flowstatus = false;
   9bbfa:	2300      	movs	r3, #0
   9bbfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9bc00:	2300      	movs	r3, #0
   9bc02:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
   9bc06:	2300      	movs	r3, #0
   9bc08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9bc0c:	2300      	movs	r3, #0
   9bc0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Cl_Uint16Type static cl_temp3;
	Cl_Uint16Type temp_temp3;
	float temp3_cel=0;
   9bc12:	f04f 0300 	mov.w	r3, #0
   9bc16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	Cl_Uint16Type temp = 0;
   9bc1a:	2300      	movs	r3, #0
   9bc1c:	843b      	strh	r3, [r7, #32]
	Cl_Uint16Type tempcount;
	cl_dprep_translatemacevent( Cl_MacDprepEvent, &cl_dprepevent);
   9bc1e:	f107 0268 	add.w	r2, r7, #104	; 0x68
   9bc22:	79fb      	ldrb	r3, [r7, #7]
   9bc24:	4611      	mov	r1, r2
   9bc26:	4618      	mov	r0, r3
   9bc28:	4bac      	ldr	r3, [pc, #688]	; (9bedc <Cl_dprep_controller+0x31c>)
   9bc2a:	4798      	blx	r3
	
	switch(cl_dprepevent)
   9bc2c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9bc30:	3b05      	subs	r3, #5
   9bc32:	2b1e      	cmp	r3, #30
   9bc34:	f200 80ae 	bhi.w	9bd94 <Cl_dprep_controller+0x1d4>
   9bc38:	a201      	add	r2, pc, #4	; (adr r2, 9bc40 <Cl_dprep_controller+0x80>)
   9bc3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9bc3e:	bf00      	nop
   9bc40:	0009bcc7 	.word	0x0009bcc7
   9bc44:	0009bcdf 	.word	0x0009bcdf
   9bc48:	0009bcf7 	.word	0x0009bcf7
   9bc4c:	0009bd95 	.word	0x0009bd95
   9bc50:	0009bd95 	.word	0x0009bd95
   9bc54:	0009bd95 	.word	0x0009bd95
   9bc58:	0009bd95 	.word	0x0009bd95
   9bc5c:	0009bd95 	.word	0x0009bd95
   9bc60:	0009bd95 	.word	0x0009bd95
   9bc64:	0009bd95 	.word	0x0009bd95
   9bc68:	0009bd95 	.word	0x0009bd95
   9bc6c:	0009bd95 	.word	0x0009bd95
   9bc70:	0009bd95 	.word	0x0009bd95
   9bc74:	0009bd95 	.word	0x0009bd95
   9bc78:	0009bd95 	.word	0x0009bd95
   9bc7c:	0009bd95 	.word	0x0009bd95
   9bc80:	0009bd95 	.word	0x0009bd95
   9bc84:	0009bcbd 	.word	0x0009bcbd
   9bc88:	0009bd95 	.word	0x0009bd95
   9bc8c:	0009bd95 	.word	0x0009bd95
   9bc90:	0009bd95 	.word	0x0009bd95
   9bc94:	0009bd95 	.word	0x0009bd95
   9bc98:	0009bd95 	.word	0x0009bd95
   9bc9c:	0009bd95 	.word	0x0009bd95
   9bca0:	0009bd95 	.word	0x0009bd95
   9bca4:	0009bd95 	.word	0x0009bd95
   9bca8:	0009bd95 	.word	0x0009bd95
   9bcac:	0009bd95 	.word	0x0009bd95
   9bcb0:	0009bd8b 	.word	0x0009bd8b
   9bcb4:	0009bd2b 	.word	0x0009bd2b
   9bcb8:	0009bd81 	.word	0x0009bd81
	{
		case EVENT_DPREP_TICK_SECOND:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_SECOND);
		//Cl_dprepretcode = cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_TICK_SEC,0);
		cl_dprepstatedummy = cl_dprepstate;
   9bcbc:	4b88      	ldr	r3, [pc, #544]	; (9bee0 <Cl_dprep_controller+0x320>)
   9bcbe:	781a      	ldrb	r2, [r3, #0]
   9bcc0:	4b88      	ldr	r3, [pc, #544]	; (9bee4 <Cl_dprep_controller+0x324>)
   9bcc2:	701a      	strb	r2, [r3, #0]
		break;
   9bcc4:	e06b      	b.n	9bd9e <Cl_dprep_controller+0x1de>
		case EVENT_DPREP_TICK_50MS:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
		case EVENT_DPREP_COMMAND_SET_BLDPMP_ON:
		Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   9bcc6:	2101      	movs	r1, #1
   9bcc8:	2001      	movs	r0, #1
   9bcca:	4b87      	ldr	r3, [pc, #540]	; (9bee8 <Cl_dprep_controller+0x328>)
   9bccc:	4798      	blx	r3
   9bcce:	4603      	mov	r3, r0
   9bcd0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		cl_bp_controller(CL_BP_EVENT_START,1);
   9bcd4:	2101      	movs	r1, #1
   9bcd6:	2002      	movs	r0, #2
   9bcd8:	4b84      	ldr	r3, [pc, #528]	; (9beec <Cl_dprep_controller+0x32c>)
   9bcda:	4798      	blx	r3
		break;
   9bcdc:	e05f      	b.n	9bd9e <Cl_dprep_controller+0x1de>
		case EVENT_DPREP_COMMAND_SET_BLDPMP_OFF:
		Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   9bcde:	2100      	movs	r1, #0
   9bce0:	2001      	movs	r0, #1
   9bce2:	4b81      	ldr	r3, [pc, #516]	; (9bee8 <Cl_dprep_controller+0x328>)
   9bce4:	4798      	blx	r3
   9bce6:	4603      	mov	r3, r0
   9bce8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		cl_bp_controller(CL_BP_EVENT_STOP,1);
   9bcec:	2101      	movs	r1, #1
   9bcee:	2004      	movs	r0, #4
   9bcf0:	4b7e      	ldr	r3, [pc, #504]	; (9beec <Cl_dprep_controller+0x32c>)
   9bcf2:	4798      	blx	r3
		break;
   9bcf4:	e053      	b.n	9bd9e <Cl_dprep_controller+0x1de>
		case  EVENT_DPREP_COMMAND_SET_BLDPUMPRATE:
			if(Cl_ConsoleRxMsg.msgready == true)
   9bcf6:	4b7e      	ldr	r3, [pc, #504]	; (9bef0 <Cl_dprep_controller+0x330>)
   9bcf8:	7e1b      	ldrb	r3, [r3, #24]
   9bcfa:	2b00      	cmp	r3, #0
   9bcfc:	d04c      	beq.n	9bd98 <Cl_dprep_controller+0x1d8>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9bcfe:	4b7c      	ldr	r3, [pc, #496]	; (9bef0 <Cl_dprep_controller+0x330>)
   9bd00:	791b      	ldrb	r3, [r3, #4]
   9bd02:	773b      	strb	r3, [r7, #28]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   9bd04:	4b7a      	ldr	r3, [pc, #488]	; (9bef0 <Cl_dprep_controller+0x330>)
   9bd06:	795b      	ldrb	r3, [r3, #5]
   9bd08:	777b      	strb	r3, [r7, #29]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   9bd0a:	4b79      	ldr	r3, [pc, #484]	; (9bef0 <Cl_dprep_controller+0x330>)
   9bd0c:	799b      	ldrb	r3, [r3, #6]
   9bd0e:	77bb      	strb	r3, [r7, #30]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   9bd10:	4b77      	ldr	r3, [pc, #476]	; (9bef0 <Cl_dprep_controller+0x330>)
   9bd12:	79db      	ldrb	r3, [r3, #7]
   9bd14:	77fb      	strb	r3, [r7, #31]
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   9bd16:	8bbb      	ldrh	r3, [r7, #28]
   9bd18:	4619      	mov	r1, r3
   9bd1a:	2001      	movs	r0, #1
   9bd1c:	4b73      	ldr	r3, [pc, #460]	; (9beec <Cl_dprep_controller+0x32c>)
   9bd1e:	4798      	blx	r3
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   9bd20:	8bbb      	ldrh	r3, [r7, #28]
   9bd22:	461a      	mov	r2, r3
   9bd24:	4b73      	ldr	r3, [pc, #460]	; (9bef4 <Cl_dprep_controller+0x334>)
   9bd26:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		
		break;
   9bd28:	e036      	b.n	9bd98 <Cl_dprep_controller+0x1d8>
			case EVENT_DPREP_HEP_PMP_START:
			if(Cl_ConsoleRxMsg.msgready == true)
   9bd2a:	4b71      	ldr	r3, [pc, #452]	; (9bef0 <Cl_dprep_controller+0x330>)
   9bd2c:	7e1b      	ldrb	r3, [r3, #24]
   9bd2e:	2b00      	cmp	r3, #0
   9bd30:	d034      	beq.n	9bd9c <Cl_dprep_controller+0x1dc>
			
			{
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9bd32:	4b6f      	ldr	r3, [pc, #444]	; (9bef0 <Cl_dprep_controller+0x330>)
   9bd34:	795b      	ldrb	r3, [r3, #5]
   9bd36:	763b      	strb	r3, [r7, #24]
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9bd38:	4b6d      	ldr	r3, [pc, #436]	; (9bef0 <Cl_dprep_controller+0x330>)
   9bd3a:	799b      	ldrb	r3, [r3, #6]
   9bd3c:	767b      	strb	r3, [r7, #25]
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9bd3e:	4b6c      	ldr	r3, [pc, #432]	; (9bef0 <Cl_dprep_controller+0x330>)
   9bd40:	79db      	ldrb	r3, [r3, #7]
   9bd42:	76bb      	strb	r3, [r7, #26]
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9bd44:	4b6a      	ldr	r3, [pc, #424]	; (9bef0 <Cl_dprep_controller+0x330>)
   9bd46:	7a1b      	ldrb	r3, [r3, #8]
   9bd48:	76fb      	strb	r3, [r7, #27]
				
				if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   9bd4a:	4b69      	ldr	r3, [pc, #420]	; (9bef0 <Cl_dprep_controller+0x330>)
   9bd4c:	791b      	ldrb	r3, [r3, #4]
   9bd4e:	2b01      	cmp	r3, #1
   9bd50:	d104      	bne.n	9bd5c <Cl_dprep_controller+0x19c>
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   9bd52:	2100      	movs	r1, #0
   9bd54:	2001      	movs	r0, #1
   9bd56:	4b68      	ldr	r3, [pc, #416]	; (9bef8 <Cl_dprep_controller+0x338>)
   9bd58:	4798      	blx	r3
				}
				
			}
			
			
			break;
   9bd5a:	e01f      	b.n	9bd9c <Cl_dprep_controller+0x1dc>
				if(Cl_ConsoleRxMsg.data.byte[0] == 1)
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
					
				}
				else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   9bd5c:	4b64      	ldr	r3, [pc, #400]	; (9bef0 <Cl_dprep_controller+0x330>)
   9bd5e:	791b      	ldrb	r3, [r3, #4]
   9bd60:	2b02      	cmp	r3, #2
   9bd62:	d104      	bne.n	9bd6e <Cl_dprep_controller+0x1ae>
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   9bd64:	2100      	movs	r1, #0
   9bd66:	2004      	movs	r0, #4
   9bd68:	4b63      	ldr	r3, [pc, #396]	; (9bef8 <Cl_dprep_controller+0x338>)
   9bd6a:	4798      	blx	r3
				}
				
			}
			
			
			break;
   9bd6c:	e016      	b.n	9bd9c <Cl_dprep_controller+0x1dc>
				}
				else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
				}
				else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   9bd6e:	4b60      	ldr	r3, [pc, #384]	; (9bef0 <Cl_dprep_controller+0x330>)
   9bd70:	791b      	ldrb	r3, [r3, #4]
   9bd72:	2b00      	cmp	r3, #0
   9bd74:	d112      	bne.n	9bd9c <Cl_dprep_controller+0x1dc>
				{
					cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   9bd76:	2100      	movs	r1, #0
   9bd78:	200a      	movs	r0, #10
   9bd7a:	4b5f      	ldr	r3, [pc, #380]	; (9bef8 <Cl_dprep_controller+0x338>)
   9bd7c:	4798      	blx	r3
				}
				
			}
			
			
			break;
   9bd7e:	e00d      	b.n	9bd9c <Cl_dprep_controller+0x1dc>
			case EVENT_DPREP_HEP_PMP_STOP:
			cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   9bd80:	2100      	movs	r1, #0
   9bd82:	200c      	movs	r0, #12
   9bd84:	4b5c      	ldr	r3, [pc, #368]	; (9bef8 <Cl_dprep_controller+0x338>)
   9bd86:	4798      	blx	r3
			break;
   9bd88:	e009      	b.n	9bd9e <Cl_dprep_controller+0x1de>
			case EVENT_HEAPARIN_BOLUS:
			cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   9bd8a:	2100      	movs	r1, #0
   9bd8c:	2007      	movs	r0, #7
   9bd8e:	4b5a      	ldr	r3, [pc, #360]	; (9bef8 <Cl_dprep_controller+0x338>)
   9bd90:	4798      	blx	r3
			break;
   9bd92:	e004      	b.n	9bd9e <Cl_dprep_controller+0x1de>
		case EVENT_HEAPARIN_BOLUS:
		break;
		case EVENT_DPREP_HEP_PMP_RATE:
		break;
#endif
		default:break;
   9bd94:	bf00      	nop
   9bd96:	e002      	b.n	9bd9e <Cl_dprep_controller+0x1de>
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
		}
		
		break;
   9bd98:	bf00      	nop
   9bd9a:	e000      	b.n	9bd9e <Cl_dprep_controller+0x1de>
				}
				
			}
			
			
			break;
   9bd9c:	bf00      	nop
		break;
#endif
		default:break;
		
	}
	if(cl_dprepevent == EVENT_DPREP_TICK_SECOND)
   9bd9e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9bda2:	2b16      	cmp	r3, #22
   9bda4:	d105      	bne.n	9bdb2 <Cl_dprep_controller+0x1f2>
	{

		//Cl_dprepretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP3STATUS );
		//Cl_dprepretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP2STATUS );
		Cl_dprepretcode =  Cl_AlarmResetAlarm( FLOW_NO_FLOW );
   9bda6:	200c      	movs	r0, #12
   9bda8:	4b54      	ldr	r3, [pc, #336]	; (9befc <Cl_dprep_controller+0x33c>)
   9bdaa:	4798      	blx	r3
   9bdac:	4603      	mov	r3, r0
   9bdae:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		//	Cl_rinseretcode =  Cl_AlarmResetAlarm( FLOWSTATUS_FLOWOFF );
	}


 	switch(cl_dprepstate)
   9bdb2:	4b4b      	ldr	r3, [pc, #300]	; (9bee0 <Cl_dprep_controller+0x320>)
   9bdb4:	781b      	ldrb	r3, [r3, #0]
   9bdb6:	2b0e      	cmp	r3, #14
   9bdb8:	f201 838a 	bhi.w	9d4d0 <Cl_dprep_controller+0x1910>
   9bdbc:	a201      	add	r2, pc, #4	; (adr r2, 9bdc4 <Cl_dprep_controller+0x204>)
   9bdbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9bdc2:	bf00      	nop
   9bdc4:	0009be01 	.word	0x0009be01
   9bdc8:	0009d4d1 	.word	0x0009d4d1
   9bdcc:	0009c179 	.word	0x0009c179
   9bdd0:	0009c881 	.word	0x0009c881
   9bdd4:	0009d4d1 	.word	0x0009d4d1
   9bdd8:	0009cbf5 	.word	0x0009cbf5
   9bddc:	0009ce8b 	.word	0x0009ce8b
   9bde0:	0009d11f 	.word	0x0009d11f
   9bde4:	0009d139 	.word	0x0009d139
   9bde8:	0009d327 	.word	0x0009d327
   9bdec:	0009d4d1 	.word	0x0009d4d1
   9bdf0:	0009be01 	.word	0x0009be01
   9bdf4:	0009c731 	.word	0x0009c731
   9bdf8:	0009c6f3 	.word	0x0009c6f3
   9bdfc:	0009ca49 	.word	0x0009ca49

		case CL_DPREP_STATE_INIT:
		break;
		case CL_DPREP_STATE_IDLE:
		case CL_DPREP_STATE_STOPPED:
		switch (cl_dprepevent)
   9be00:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9be04:	3b02      	subs	r3, #2
   9be06:	2b1d      	cmp	r3, #29
   9be08:	f200 81a1 	bhi.w	9c14e <Cl_dprep_controller+0x58e>
   9be0c:	a201      	add	r2, pc, #4	; (adr r2, 9be14 <Cl_dprep_controller+0x254>)
   9be0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9be12:	bf00      	nop
   9be14:	0009c0e9 	.word	0x0009c0e9
   9be18:	0009bf87 	.word	0x0009bf87
   9be1c:	0009bec1 	.word	0x0009bec1
   9be20:	0009c14f 	.word	0x0009c14f
   9be24:	0009c14f 	.word	0x0009c14f
   9be28:	0009c14f 	.word	0x0009c14f
   9be2c:	0009c14f 	.word	0x0009c14f
   9be30:	0009c14f 	.word	0x0009c14f
   9be34:	0009c129 	.word	0x0009c129
   9be38:	0009c14f 	.word	0x0009c14f
   9be3c:	0009c14f 	.word	0x0009c14f
   9be40:	0009c14f 	.word	0x0009c14f
   9be44:	0009c14f 	.word	0x0009c14f
   9be48:	0009c14f 	.word	0x0009c14f
   9be4c:	0009c14f 	.word	0x0009c14f
   9be50:	0009c14f 	.word	0x0009c14f
   9be54:	0009c14f 	.word	0x0009c14f
   9be58:	0009c14f 	.word	0x0009c14f
   9be5c:	0009c14f 	.word	0x0009c14f
   9be60:	0009c14f 	.word	0x0009c14f
   9be64:	0009c14f 	.word	0x0009c14f
   9be68:	0009c14f 	.word	0x0009c14f
   9be6c:	0009c14f 	.word	0x0009c14f
   9be70:	0009c11d 	.word	0x0009c11d
   9be74:	0009c14f 	.word	0x0009c14f
   9be78:	0009c14f 	.word	0x0009c14f
   9be7c:	0009c14f 	.word	0x0009c14f
   9be80:	0009c103 	.word	0x0009c103
   9be84:	0009c14f 	.word	0x0009c14f
   9be88:	0009be8d 	.word	0x0009be8d
		{
			case EVENT_DPREP_START_RECIRC:
						if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   9be8c:	4b1c      	ldr	r3, [pc, #112]	; (9bf00 <Cl_dprep_controller+0x340>)
   9be8e:	781b      	ldrb	r3, [r3, #0]
   9be90:	2b01      	cmp	r3, #1
   9be92:	d108      	bne.n	9bea6 <Cl_dprep_controller+0x2e6>
   9be94:	4b1a      	ldr	r3, [pc, #104]	; (9bf00 <Cl_dprep_controller+0x340>)
   9be96:	781b      	ldrb	r3, [r3, #0]
   9be98:	2b05      	cmp	r3, #5
   9be9a:	d104      	bne.n	9bea6 <Cl_dprep_controller+0x2e6>
   9be9c:	4b18      	ldr	r3, [pc, #96]	; (9bf00 <Cl_dprep_controller+0x340>)
   9be9e:	781b      	ldrb	r3, [r3, #0]
   9bea0:	2b09      	cmp	r3, #9
   9bea2:	f000 8157 	beq.w	9c154 <Cl_dprep_controller+0x594>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9bea6:	2206      	movs	r2, #6
   9bea8:	4916      	ldr	r1, [pc, #88]	; (9bf04 <Cl_dprep_controller+0x344>)
   9beaa:	2018      	movs	r0, #24
   9beac:	4b16      	ldr	r3, [pc, #88]	; (9bf08 <Cl_dprep_controller+0x348>)
   9beae:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9beb0:	2100      	movs	r1, #0
   9beb2:	2005      	movs	r0, #5
   9beb4:	4b15      	ldr	r3, [pc, #84]	; (9bf0c <Cl_dprep_controller+0x34c>)
   9beb6:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9beb8:	4b15      	ldr	r3, [pc, #84]	; (9bf10 <Cl_dprep_controller+0x350>)
   9beba:	2200      	movs	r2, #0
   9bebc:	70da      	strb	r2, [r3, #3]
						}
				break;
   9bebe:	e149      	b.n	9c154 <Cl_dprep_controller+0x594>
			case EVENT_DPREP_COMMAND_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   9bec0:	4b0b      	ldr	r3, [pc, #44]	; (9bef0 <Cl_dprep_controller+0x330>)
   9bec2:	7e1b      	ldrb	r3, [r3, #24]
   9bec4:	2b00      	cmp	r3, #0
   9bec6:	f000 8148 	beq.w	9c15a <Cl_dprep_controller+0x59a>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9beca:	4b09      	ldr	r3, [pc, #36]	; (9bef0 <Cl_dprep_controller+0x330>)
   9becc:	791b      	ldrb	r3, [r3, #4]
   9bece:	2b02      	cmp	r3, #2
   9bed0:	d020      	beq.n	9bf14 <Cl_dprep_controller+0x354>
   9bed2:	2b04      	cmp	r3, #4
   9bed4:	d03a      	beq.n	9bf4c <Cl_dprep_controller+0x38c>
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;
						default:
						break;
   9bed6:	e055      	b.n	9bf84 <Cl_dprep_controller+0x3c4>
   9bed8:	000a4369 	.word	0x000a4369
   9bedc:	0009d529 	.word	0x0009d529
   9bee0:	2007283b 	.word	0x2007283b
   9bee4:	2007319f 	.word	0x2007319f
   9bee8:	00082efd 	.word	0x00082efd
   9beec:	00091eb5 	.word	0x00091eb5
   9bef0:	20072f98 	.word	0x20072f98
   9bef4:	200731a4 	.word	0x200731a4
   9bef8:	000925a9 	.word	0x000925a9
   9befc:	00082ff1 	.word	0x00082ff1
   9bf00:	2007212c 	.word	0x2007212c
   9bf04:	000a62b4 	.word	0x000a62b4
   9bf08:	00099729 	.word	0x00099729
   9bf0c:	00087cad 	.word	0x00087cad
   9bf10:	20070abc 	.word	0x20070abc
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9bf14:	2316      	movs	r3, #22
   9bf16:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9bf1a:	2302      	movs	r3, #2
   9bf1c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9bf20:	f107 0360 	add.w	r3, r7, #96	; 0x60
   9bf24:	3301      	adds	r3, #1
   9bf26:	4619      	mov	r1, r3
   9bf28:	2002      	movs	r0, #2
   9bf2a:	4bb9      	ldr	r3, [pc, #740]	; (9c210 <Cl_dprep_controller+0x650>)
   9bf2c:	4798      	blx	r3
   9bf2e:	4603      	mov	r3, r0
   9bf30:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9bf34:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9bf38:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9bf3c:	2202      	movs	r2, #2
   9bf3e:	4618      	mov	r0, r3
   9bf40:	4bb4      	ldr	r3, [pc, #720]	; (9c214 <Cl_dprep_controller+0x654>)
   9bf42:	4798      	blx	r3
   9bf44:	4603      	mov	r3, r0
   9bf46:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9bf4a:	e01b      	b.n	9bf84 <Cl_dprep_controller+0x3c4>
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9bf4c:	2316      	movs	r3, #22
   9bf4e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9bf52:	2304      	movs	r3, #4
   9bf54:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9bf58:	f107 0360 	add.w	r3, r7, #96	; 0x60
   9bf5c:	3301      	adds	r3, #1
   9bf5e:	4619      	mov	r1, r3
   9bf60:	2004      	movs	r0, #4
   9bf62:	4bab      	ldr	r3, [pc, #684]	; (9c210 <Cl_dprep_controller+0x650>)
   9bf64:	4798      	blx	r3
   9bf66:	4603      	mov	r3, r0
   9bf68:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9bf6c:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9bf70:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9bf74:	2202      	movs	r2, #2
   9bf76:	4618      	mov	r0, r3
   9bf78:	4ba6      	ldr	r3, [pc, #664]	; (9c214 <Cl_dprep_controller+0x654>)
   9bf7a:	4798      	blx	r3
   9bf7c:	4603      	mov	r3, r0
   9bf7e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9bf82:	bf00      	nop
						default:
						break;
					}
				}
			break;
   9bf84:	e0e9      	b.n	9c15a <Cl_dprep_controller+0x59a>
			case EVENT_DPREP_COMMAND_SET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   9bf86:	4ba4      	ldr	r3, [pc, #656]	; (9c218 <Cl_dprep_controller+0x658>)
   9bf88:	7e1b      	ldrb	r3, [r3, #24]
   9bf8a:	2b00      	cmp	r3, #0
   9bf8c:	f000 80e8 	beq.w	9c160 <Cl_dprep_controller+0x5a0>
							{
										cl_Datastreamtype cl_temp  ;	
										cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9bf90:	4ba1      	ldr	r3, [pc, #644]	; (9c218 <Cl_dprep_controller+0x658>)
   9bf92:	795b      	ldrb	r3, [r3, #5]
   9bf94:	753b      	strb	r3, [r7, #20]
										cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9bf96:	4ba0      	ldr	r3, [pc, #640]	; (9c218 <Cl_dprep_controller+0x658>)
   9bf98:	799b      	ldrb	r3, [r3, #6]
   9bf9a:	757b      	strb	r3, [r7, #21]
										cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9bf9c:	4b9e      	ldr	r3, [pc, #632]	; (9c218 <Cl_dprep_controller+0x658>)
   9bf9e:	79db      	ldrb	r3, [r3, #7]
   9bfa0:	75bb      	strb	r3, [r7, #22]
										cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9bfa2:	4b9d      	ldr	r3, [pc, #628]	; (9c218 <Cl_dprep_controller+0x658>)
   9bfa4:	7a1b      	ldrb	r3, [r3, #8]
   9bfa6:	75fb      	strb	r3, [r7, #23]
											
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9bfa8:	4b9b      	ldr	r3, [pc, #620]	; (9c218 <Cl_dprep_controller+0x658>)
   9bfaa:	791b      	ldrb	r3, [r3, #4]
   9bfac:	3b05      	subs	r3, #5
   9bfae:	2b20      	cmp	r3, #32
   9bfb0:	f200 8098 	bhi.w	9c0e4 <Cl_dprep_controller+0x524>
   9bfb4:	a201      	add	r2, pc, #4	; (adr r2, 9bfbc <Cl_dprep_controller+0x3fc>)
   9bfb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9bfba:	bf00      	nop
   9bfbc:	0009c0e5 	.word	0x0009c0e5
   9bfc0:	0009c0e5 	.word	0x0009c0e5
   9bfc4:	0009c0e5 	.word	0x0009c0e5
   9bfc8:	0009c0e5 	.word	0x0009c0e5
   9bfcc:	0009c0e5 	.word	0x0009c0e5
   9bfd0:	0009c0e5 	.word	0x0009c0e5
   9bfd4:	0009c0e5 	.word	0x0009c0e5
   9bfd8:	0009c0e5 	.word	0x0009c0e5
   9bfdc:	0009c0e5 	.word	0x0009c0e5
   9bfe0:	0009c0e5 	.word	0x0009c0e5
   9bfe4:	0009c0e5 	.word	0x0009c0e5
   9bfe8:	0009c0e5 	.word	0x0009c0e5
   9bfec:	0009c0e5 	.word	0x0009c0e5
   9bff0:	0009c0e5 	.word	0x0009c0e5
   9bff4:	0009c0e5 	.word	0x0009c0e5
   9bff8:	0009c0e5 	.word	0x0009c0e5
   9bffc:	0009c0e5 	.word	0x0009c0e5
   9c000:	0009c0e5 	.word	0x0009c0e5
   9c004:	0009c0e5 	.word	0x0009c0e5
   9c008:	0009c041 	.word	0x0009c041
   9c00c:	0009c059 	.word	0x0009c059
   9c010:	0009c071 	.word	0x0009c071
   9c014:	0009c081 	.word	0x0009c081
   9c018:	0009c091 	.word	0x0009c091
   9c01c:	0009c0a1 	.word	0x0009c0a1
   9c020:	0009c0e5 	.word	0x0009c0e5
   9c024:	0009c0e5 	.word	0x0009c0e5
   9c028:	0009c0e5 	.word	0x0009c0e5
   9c02c:	0009c0e5 	.word	0x0009c0e5
   9c030:	0009c0b1 	.word	0x0009c0b1
   9c034:	0009c0bb 	.word	0x0009c0bb
   9c038:	0009c0c5 	.word	0x0009c0c5
   9c03c:	0009c0d5 	.word	0x0009c0d5
										case ID_bloodratereturn:
										break;
										case ID_bloodratetreat:
										break;
										case ID_tempulimit:
											Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   9c040:	697b      	ldr	r3, [r7, #20]
   9c042:	4a76      	ldr	r2, [pc, #472]	; (9c21c <Cl_dprep_controller+0x65c>)
   9c044:	fba2 2303 	umull	r2, r3, r2, r3
   9c048:	08da      	lsrs	r2, r3, #3
   9c04a:	4b75      	ldr	r3, [pc, #468]	; (9c220 <Cl_dprep_controller+0x660>)
   9c04c:	4610      	mov	r0, r2
   9c04e:	4798      	blx	r3
   9c050:	4602      	mov	r2, r0
   9c052:	4b74      	ldr	r3, [pc, #464]	; (9c224 <Cl_dprep_controller+0x664>)
   9c054:	649a      	str	r2, [r3, #72]	; 0x48
										break;
   9c056:	e046      	b.n	9c0e6 <Cl_dprep_controller+0x526>
										case ID_templlimit:
											Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   9c058:	697b      	ldr	r3, [r7, #20]
   9c05a:	4a70      	ldr	r2, [pc, #448]	; (9c21c <Cl_dprep_controller+0x65c>)
   9c05c:	fba2 2303 	umull	r2, r3, r2, r3
   9c060:	08da      	lsrs	r2, r3, #3
   9c062:	4b6f      	ldr	r3, [pc, #444]	; (9c220 <Cl_dprep_controller+0x660>)
   9c064:	4610      	mov	r0, r2
   9c066:	4798      	blx	r3
   9c068:	4602      	mov	r2, r0
   9c06a:	4b6e      	ldr	r3, [pc, #440]	; (9c224 <Cl_dprep_controller+0x664>)
   9c06c:	64da      	str	r2, [r3, #76]	; 0x4c
										break;
   9c06e:	e03a      	b.n	9c0e6 <Cl_dprep_controller+0x526>
										case ID_tmpllimit:
										Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   9c070:	697a      	ldr	r2, [r7, #20]
   9c072:	4b6b      	ldr	r3, [pc, #428]	; (9c220 <Cl_dprep_controller+0x660>)
   9c074:	4610      	mov	r0, r2
   9c076:	4798      	blx	r3
   9c078:	4602      	mov	r2, r0
   9c07a:	4b6a      	ldr	r3, [pc, #424]	; (9c224 <Cl_dprep_controller+0x664>)
   9c07c:	635a      	str	r2, [r3, #52]	; 0x34
										break;
   9c07e:	e032      	b.n	9c0e6 <Cl_dprep_controller+0x526>
										case ID_tmpulimit:
										Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   9c080:	697a      	ldr	r2, [r7, #20]
   9c082:	4b67      	ldr	r3, [pc, #412]	; (9c220 <Cl_dprep_controller+0x660>)
   9c084:	4610      	mov	r0, r2
   9c086:	4798      	blx	r3
   9c088:	4602      	mov	r2, r0
   9c08a:	4b66      	ldr	r3, [pc, #408]	; (9c224 <Cl_dprep_controller+0x664>)
   9c08c:	631a      	str	r2, [r3, #48]	; 0x30
										break;
   9c08e:	e02a      	b.n	9c0e6 <Cl_dprep_controller+0x526>
										case ID_vptllimit:
											Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   9c090:	697a      	ldr	r2, [r7, #20]
   9c092:	4b63      	ldr	r3, [pc, #396]	; (9c220 <Cl_dprep_controller+0x660>)
   9c094:	4610      	mov	r0, r2
   9c096:	4798      	blx	r3
   9c098:	4602      	mov	r2, r0
   9c09a:	4b62      	ldr	r3, [pc, #392]	; (9c224 <Cl_dprep_controller+0x664>)
   9c09c:	615a      	str	r2, [r3, #20]
										break;
   9c09e:	e022      	b.n	9c0e6 <Cl_dprep_controller+0x526>
										case ID_vptulimit:
											Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   9c0a0:	697a      	ldr	r2, [r7, #20]
   9c0a2:	4b5f      	ldr	r3, [pc, #380]	; (9c220 <Cl_dprep_controller+0x660>)
   9c0a4:	4610      	mov	r0, r2
   9c0a6:	4798      	blx	r3
   9c0a8:	4602      	mov	r2, r0
   9c0aa:	4b5e      	ldr	r3, [pc, #376]	; (9c224 <Cl_dprep_controller+0x664>)
   9c0ac:	611a      	str	r2, [r3, #16]
										break;
   9c0ae:	e01a      	b.n	9c0e6 <Cl_dprep_controller+0x526>
										case ID_dflowllimit:
										break;
										case ID_dflowulimit:
										break;
										case ID_condllimit:
										Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   9c0b0:	697b      	ldr	r3, [r7, #20]
   9c0b2:	b21a      	sxth	r2, r3
   9c0b4:	4b5b      	ldr	r3, [pc, #364]	; (9c224 <Cl_dprep_controller+0x664>)
   9c0b6:	801a      	strh	r2, [r3, #0]
										break;
   9c0b8:	e015      	b.n	9c0e6 <Cl_dprep_controller+0x526>
										case ID_condulimit:
										Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   9c0ba:	697b      	ldr	r3, [r7, #20]
   9c0bc:	b21a      	sxth	r2, r3
   9c0be:	4b59      	ldr	r3, [pc, #356]	; (9c224 <Cl_dprep_controller+0x664>)
   9c0c0:	805a      	strh	r2, [r3, #2]
										break;
   9c0c2:	e010      	b.n	9c0e6 <Cl_dprep_controller+0x526>
										case ID_aptllimit:
											Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   9c0c4:	697a      	ldr	r2, [r7, #20]
   9c0c6:	4b56      	ldr	r3, [pc, #344]	; (9c220 <Cl_dprep_controller+0x660>)
   9c0c8:	4610      	mov	r0, r2
   9c0ca:	4798      	blx	r3
   9c0cc:	4602      	mov	r2, r0
   9c0ce:	4b55      	ldr	r3, [pc, #340]	; (9c224 <Cl_dprep_controller+0x664>)
   9c0d0:	60da      	str	r2, [r3, #12]
										break;
   9c0d2:	e008      	b.n	9c0e6 <Cl_dprep_controller+0x526>
										case ID_aptulimit:
										Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   9c0d4:	697a      	ldr	r2, [r7, #20]
   9c0d6:	4b52      	ldr	r3, [pc, #328]	; (9c220 <Cl_dprep_controller+0x660>)
   9c0d8:	4610      	mov	r0, r2
   9c0da:	4798      	blx	r3
   9c0dc:	4602      	mov	r2, r0
   9c0de:	4b51      	ldr	r3, [pc, #324]	; (9c224 <Cl_dprep_controller+0x664>)
   9c0e0:	609a      	str	r2, [r3, #8]
										break;
   9c0e2:	e000      	b.n	9c0e6 <Cl_dprep_controller+0x526>

									default:break;
   9c0e4:	bf00      	nop
								}
							}
						
	
			break;
   9c0e6:	e03b      	b.n	9c160 <Cl_dprep_controller+0x5a0>
			case EVENT_DPREP_DIALYSIS_PREP:
			
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
   9c0e8:	4b4f      	ldr	r3, [pc, #316]	; (9c228 <Cl_dprep_controller+0x668>)
   9c0ea:	4798      	blx	r3
   9c0ec:	4603      	mov	r3, r0
   9c0ee:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			if(Cl_dprepretcode == CL_REJECTED)
   9c0f2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9c0f6:	2b03      	cmp	r3, #3
   9c0f8:	d135      	bne.n	9c166 <Cl_dprep_controller+0x5a6>
			{
				return Cl_dprepretcode;
   9c0fa:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9c0fe:	f001 b9e9 	b.w	9d4d4 <Cl_dprep_controller+0x1914>
			}
			break;
			case EVENT_DPREP_MIXING_PREP_START:
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
   9c102:	4b49      	ldr	r3, [pc, #292]	; (9c228 <Cl_dprep_controller+0x668>)
   9c104:	4798      	blx	r3
   9c106:	4603      	mov	r3, r0
   9c108:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			if(Cl_dprepretcode == CL_REJECTED)
   9c10c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9c110:	2b03      	cmp	r3, #3
   9c112:	d12b      	bne.n	9c16c <Cl_dprep_controller+0x5ac>
			{
				return Cl_dprepretcode;
   9c114:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9c118:	f001 b9dc 	b.w	9d4d4 <Cl_dprep_controller+0x1914>
			}
			break;
			case EVENT_DPREP_ALARM:
			Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9c11c:	4b43      	ldr	r3, [pc, #268]	; (9c22c <Cl_dprep_controller+0x66c>)
   9c11e:	4798      	blx	r3
   9c120:	4603      	mov	r3, r0
   9c122:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			break;
   9c126:	e025      	b.n	9c174 <Cl_dprep_controller+0x5b4>
			case EVENT_DPREP_START_PRIME:
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9c128:	4b41      	ldr	r3, [pc, #260]	; (9c230 <Cl_dprep_controller+0x670>)
   9c12a:	781b      	ldrb	r3, [r3, #0]
   9c12c:	2b01      	cmp	r3, #1
   9c12e:	d020      	beq.n	9c172 <Cl_dprep_controller+0x5b2>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   9c130:	2206      	movs	r2, #6
   9c132:	4940      	ldr	r1, [pc, #256]	; (9c234 <Cl_dprep_controller+0x674>)
   9c134:	2018      	movs	r0, #24
   9c136:	4b37      	ldr	r3, [pc, #220]	; (9c214 <Cl_dprep_controller+0x654>)
   9c138:	4798      	blx	r3
				cl_dprep_activate_prime_related_alarms();
   9c13a:	4b3f      	ldr	r3, [pc, #252]	; (9c238 <Cl_dprep_controller+0x678>)
   9c13c:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9c13e:	2100      	movs	r1, #0
   9c140:	2001      	movs	r0, #1
   9c142:	4b3e      	ldr	r3, [pc, #248]	; (9c23c <Cl_dprep_controller+0x67c>)
   9c144:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9c146:	4b3e      	ldr	r3, [pc, #248]	; (9c240 <Cl_dprep_controller+0x680>)
   9c148:	2200      	movs	r2, #0
   9c14a:	70da      	strb	r2, [r3, #3]
			}
			
			break;
   9c14c:	e011      	b.n	9c172 <Cl_dprep_controller+0x5b2>
			default:
			break;
   9c14e:	bf00      	nop
   9c150:	f001 b9be 	b.w	9d4d0 <Cl_dprep_controller+0x1910>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
				break;
   9c154:	bf00      	nop
   9c156:	f001 b9bb 	b.w	9d4d0 <Cl_dprep_controller+0x1910>
						break;
						default:
						break;
					}
				}
			break;
   9c15a:	bf00      	nop
   9c15c:	f001 b9b8 	b.w	9d4d0 <Cl_dprep_controller+0x1910>
									default:break;
								}
							}
						
	
			break;
   9c160:	bf00      	nop
   9c162:	f001 b9b5 	b.w	9d4d0 <Cl_dprep_controller+0x1910>
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
			if(Cl_dprepretcode == CL_REJECTED)
			{
				return Cl_dprepretcode;
			}
			break;
   9c166:	bf00      	nop
   9c168:	f001 b9b2 	b.w	9d4d0 <Cl_dprep_controller+0x1910>
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
			if(Cl_dprepretcode == CL_REJECTED)
			{
				return Cl_dprepretcode;
			}
			break;
   9c16c:	bf00      	nop
   9c16e:	f001 b9af 	b.w	9d4d0 <Cl_dprep_controller+0x1910>
				cl_dprep_activate_prime_related_alarms();
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
			}
			
			break;
   9c172:	bf00      	nop
			default:
			break;
		}
		break;
   9c174:	f001 b9ac 	b.w	9d4d0 <Cl_dprep_controller+0x1910>
		case CL_DPREP_STATE_DPREP_FILLING:
		switch (cl_dprepevent)
   9c178:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9c17c:	3b03      	subs	r3, #3
   9c17e:	2b20      	cmp	r3, #32
   9c180:	f201 819f 	bhi.w	9d4c2 <Cl_dprep_controller+0x1902>
   9c184:	a201      	add	r2, pc, #4	; (adr r2, 9c18c <Cl_dprep_controller+0x5cc>)
   9c186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c18a:	bf00      	nop
   9c18c:	0009c371 	.word	0x0009c371
   9c190:	0009c2e7 	.word	0x0009c2e7
   9c194:	0009d4c3 	.word	0x0009d4c3
   9c198:	0009d4c3 	.word	0x0009d4c3
   9c19c:	0009d4c3 	.word	0x0009d4c3
   9c1a0:	0009d4c3 	.word	0x0009d4c3
   9c1a4:	0009c655 	.word	0x0009c655
   9c1a8:	0009c6a1 	.word	0x0009c6a1
   9c1ac:	0009d4c3 	.word	0x0009d4c3
   9c1b0:	0009d4c3 	.word	0x0009d4c3
   9c1b4:	0009d4c3 	.word	0x0009d4c3
   9c1b8:	0009d4c3 	.word	0x0009d4c3
   9c1bc:	0009d4c3 	.word	0x0009d4c3
   9c1c0:	0009d4c3 	.word	0x0009d4c3
   9c1c4:	0009d4c3 	.word	0x0009d4c3
   9c1c8:	0009d4c3 	.word	0x0009d4c3
   9c1cc:	0009c3cf 	.word	0x0009c3cf
   9c1d0:	0009d4c3 	.word	0x0009d4c3
   9c1d4:	0009c6c3 	.word	0x0009c6c3
   9c1d8:	0009c57d 	.word	0x0009c57d
   9c1dc:	0009c3ed 	.word	0x0009c3ed
   9c1e0:	0009d4c3 	.word	0x0009d4c3
   9c1e4:	0009c661 	.word	0x0009c661
   9c1e8:	0009c66d 	.word	0x0009c66d
   9c1ec:	0009d4c3 	.word	0x0009d4c3
   9c1f0:	0009d4c3 	.word	0x0009d4c3
   9c1f4:	0009d4c3 	.word	0x0009d4c3
   9c1f8:	0009c655 	.word	0x0009c655
   9c1fc:	0009c2b3 	.word	0x0009c2b3
   9c200:	0009d4c3 	.word	0x0009d4c3
   9c204:	0009c2a9 	.word	0x0009c2a9
   9c208:	0009c245 	.word	0x0009c245
   9c20c:	0009c29f 	.word	0x0009c29f
   9c210:	00098239 	.word	0x00098239
   9c214:	00099729 	.word	0x00099729
   9c218:	20072f98 	.word	0x20072f98
   9c21c:	cccccccd 	.word	0xcccccccd
   9c220:	000a3d65 	.word	0x000a3d65
   9c224:	20072d08 	.word	0x20072d08
   9c228:	0009f365 	.word	0x0009f365
   9c22c:	0009d7f1 	.word	0x0009d7f1
   9c230:	2007212c 	.word	0x2007212c
   9c234:	000a62bc 	.word	0x000a62bc
   9c238:	0008870d 	.word	0x0008870d
   9c23c:	00087cad 	.word	0x00087cad
   9c240:	20070abc 	.word	0x20070abc
		{
			
			case EVENT_DPREP_HEP_PMP_START:
				if(Cl_ConsoleRxMsg.msgready == true)
   9c244:	4bb2      	ldr	r3, [pc, #712]	; (9c510 <Cl_dprep_controller+0x950>)
   9c246:	7e1b      	ldrb	r3, [r3, #24]
   9c248:	2b00      	cmp	r3, #0
   9c24a:	f000 823d 	beq.w	9c6c8 <Cl_dprep_controller+0xb08>
							
						{
							cl_Datastreamtype cl_temp  ;	
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9c24e:	4bb0      	ldr	r3, [pc, #704]	; (9c510 <Cl_dprep_controller+0x950>)
   9c250:	795b      	ldrb	r3, [r3, #5]
   9c252:	743b      	strb	r3, [r7, #16]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9c254:	4bae      	ldr	r3, [pc, #696]	; (9c510 <Cl_dprep_controller+0x950>)
   9c256:	799b      	ldrb	r3, [r3, #6]
   9c258:	747b      	strb	r3, [r7, #17]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9c25a:	4bad      	ldr	r3, [pc, #692]	; (9c510 <Cl_dprep_controller+0x950>)
   9c25c:	79db      	ldrb	r3, [r3, #7]
   9c25e:	74bb      	strb	r3, [r7, #18]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9c260:	4bab      	ldr	r3, [pc, #684]	; (9c510 <Cl_dprep_controller+0x950>)
   9c262:	7a1b      	ldrb	r3, [r3, #8]
   9c264:	74fb      	strb	r3, [r7, #19]
											
							if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   9c266:	4baa      	ldr	r3, [pc, #680]	; (9c510 <Cl_dprep_controller+0x950>)
   9c268:	791b      	ldrb	r3, [r3, #4]
   9c26a:	2b01      	cmp	r3, #1
   9c26c:	d104      	bne.n	9c278 <Cl_dprep_controller+0x6b8>
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   9c26e:	2100      	movs	r1, #0
   9c270:	2001      	movs	r0, #1
   9c272:	4ba8      	ldr	r3, [pc, #672]	; (9c514 <Cl_dprep_controller+0x954>)
   9c274:	4798      	blx	r3
							}
								
						}
				
			
			break;
   9c276:	e227      	b.n	9c6c8 <Cl_dprep_controller+0xb08>
							if(Cl_ConsoleRxMsg.data.byte[0] == 1)
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
											
							}
							else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   9c278:	4ba5      	ldr	r3, [pc, #660]	; (9c510 <Cl_dprep_controller+0x950>)
   9c27a:	791b      	ldrb	r3, [r3, #4]
   9c27c:	2b02      	cmp	r3, #2
   9c27e:	d104      	bne.n	9c28a <Cl_dprep_controller+0x6ca>
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);			
   9c280:	2100      	movs	r1, #0
   9c282:	2004      	movs	r0, #4
   9c284:	4ba3      	ldr	r3, [pc, #652]	; (9c514 <Cl_dprep_controller+0x954>)
   9c286:	4798      	blx	r3
							}
								
						}
				
			
			break;
   9c288:	e21e      	b.n	9c6c8 <Cl_dprep_controller+0xb08>
							}
							else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);			
							}
							else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   9c28a:	4ba1      	ldr	r3, [pc, #644]	; (9c510 <Cl_dprep_controller+0x950>)
   9c28c:	791b      	ldrb	r3, [r3, #4]
   9c28e:	2b00      	cmp	r3, #0
   9c290:	f040 821a 	bne.w	9c6c8 <Cl_dprep_controller+0xb08>
							{
								cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);					
   9c294:	2100      	movs	r1, #0
   9c296:	200a      	movs	r0, #10
   9c298:	4b9e      	ldr	r3, [pc, #632]	; (9c514 <Cl_dprep_controller+0x954>)
   9c29a:	4798      	blx	r3
							}
								
						}
				
			
			break;
   9c29c:	e214      	b.n	9c6c8 <Cl_dprep_controller+0xb08>
			case EVENT_DPREP_HEP_PMP_STOP:
			cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   9c29e:	2100      	movs	r1, #0
   9c2a0:	200c      	movs	r0, #12
   9c2a2:	4b9c      	ldr	r3, [pc, #624]	; (9c514 <Cl_dprep_controller+0x954>)
   9c2a4:	4798      	blx	r3
			break;
   9c2a6:	e222      	b.n	9c6ee <Cl_dprep_controller+0xb2e>
			case EVENT_HEAPARIN_BOLUS:		
			cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   9c2a8:	2100      	movs	r1, #0
   9c2aa:	2007      	movs	r0, #7
   9c2ac:	4b99      	ldr	r3, [pc, #612]	; (9c514 <Cl_dprep_controller+0x954>)
   9c2ae:	4798      	blx	r3
			break;
   9c2b0:	e21d      	b.n	9c6ee <Cl_dprep_controller+0xb2e>

			case EVENT_DPREP_START_RECIRC:
						if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   9c2b2:	4b99      	ldr	r3, [pc, #612]	; (9c518 <Cl_dprep_controller+0x958>)
   9c2b4:	781b      	ldrb	r3, [r3, #0]
   9c2b6:	2b01      	cmp	r3, #1
   9c2b8:	d108      	bne.n	9c2cc <Cl_dprep_controller+0x70c>
   9c2ba:	4b97      	ldr	r3, [pc, #604]	; (9c518 <Cl_dprep_controller+0x958>)
   9c2bc:	781b      	ldrb	r3, [r3, #0]
   9c2be:	2b05      	cmp	r3, #5
   9c2c0:	d104      	bne.n	9c2cc <Cl_dprep_controller+0x70c>
   9c2c2:	4b95      	ldr	r3, [pc, #596]	; (9c518 <Cl_dprep_controller+0x958>)
   9c2c4:	781b      	ldrb	r3, [r3, #0]
   9c2c6:	2b09      	cmp	r3, #9
   9c2c8:	f000 8201 	beq.w	9c6ce <Cl_dprep_controller+0xb0e>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9c2cc:	2206      	movs	r2, #6
   9c2ce:	4993      	ldr	r1, [pc, #588]	; (9c51c <Cl_dprep_controller+0x95c>)
   9c2d0:	2018      	movs	r0, #24
   9c2d2:	4b93      	ldr	r3, [pc, #588]	; (9c520 <Cl_dprep_controller+0x960>)
   9c2d4:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9c2d6:	2100      	movs	r1, #0
   9c2d8:	2005      	movs	r0, #5
   9c2da:	4b92      	ldr	r3, [pc, #584]	; (9c524 <Cl_dprep_controller+0x964>)
   9c2dc:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9c2de:	4b92      	ldr	r3, [pc, #584]	; (9c528 <Cl_dprep_controller+0x968>)
   9c2e0:	2200      	movs	r2, #0
   9c2e2:	70da      	strb	r2, [r3, #3]
						}
			break;
   9c2e4:	e1f3      	b.n	9c6ce <Cl_dprep_controller+0xb0e>
			case EVENT_DPREP_COMMAND_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   9c2e6:	4b8a      	ldr	r3, [pc, #552]	; (9c510 <Cl_dprep_controller+0x950>)
   9c2e8:	7e1b      	ldrb	r3, [r3, #24]
   9c2ea:	2b00      	cmp	r3, #0
   9c2ec:	f000 81f2 	beq.w	9c6d4 <Cl_dprep_controller+0xb14>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9c2f0:	4b87      	ldr	r3, [pc, #540]	; (9c510 <Cl_dprep_controller+0x950>)
   9c2f2:	791b      	ldrb	r3, [r3, #4]
   9c2f4:	2b02      	cmp	r3, #2
   9c2f6:	d002      	beq.n	9c2fe <Cl_dprep_controller+0x73e>
   9c2f8:	2b04      	cmp	r3, #4
   9c2fa:	d01c      	beq.n	9c336 <Cl_dprep_controller+0x776>
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;
						default:
						break;
   9c2fc:	e037      	b.n	9c36e <Cl_dprep_controller+0x7ae>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9c2fe:	2316      	movs	r3, #22
   9c300:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9c304:	2302      	movs	r3, #2
   9c306:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9c30a:	f107 0360 	add.w	r3, r7, #96	; 0x60
   9c30e:	3301      	adds	r3, #1
   9c310:	4619      	mov	r1, r3
   9c312:	2002      	movs	r0, #2
   9c314:	4b85      	ldr	r3, [pc, #532]	; (9c52c <Cl_dprep_controller+0x96c>)
   9c316:	4798      	blx	r3
   9c318:	4603      	mov	r3, r0
   9c31a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c31e:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9c322:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9c326:	2202      	movs	r2, #2
   9c328:	4618      	mov	r0, r3
   9c32a:	4b7d      	ldr	r3, [pc, #500]	; (9c520 <Cl_dprep_controller+0x960>)
   9c32c:	4798      	blx	r3
   9c32e:	4603      	mov	r3, r0
   9c330:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9c334:	e01b      	b.n	9c36e <Cl_dprep_controller+0x7ae>
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9c336:	2316      	movs	r3, #22
   9c338:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9c33c:	2304      	movs	r3, #4
   9c33e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9c342:	f107 0360 	add.w	r3, r7, #96	; 0x60
   9c346:	3301      	adds	r3, #1
   9c348:	4619      	mov	r1, r3
   9c34a:	2004      	movs	r0, #4
   9c34c:	4b77      	ldr	r3, [pc, #476]	; (9c52c <Cl_dprep_controller+0x96c>)
   9c34e:	4798      	blx	r3
   9c350:	4603      	mov	r3, r0
   9c352:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c356:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9c35a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9c35e:	2202      	movs	r2, #2
   9c360:	4618      	mov	r0, r3
   9c362:	4b6f      	ldr	r3, [pc, #444]	; (9c520 <Cl_dprep_controller+0x960>)
   9c364:	4798      	blx	r3
   9c366:	4603      	mov	r3, r0
   9c368:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9c36c:	bf00      	nop
						default:
						break;
					}
				}
			break;
   9c36e:	e1b1      	b.n	9c6d4 <Cl_dprep_controller+0xb14>
			case EVENT_DPREP_COMMAND_SET_DATA:
					 if(Cl_ConsoleRxMsg.msgready == true)
   9c370:	4b67      	ldr	r3, [pc, #412]	; (9c510 <Cl_dprep_controller+0x950>)
   9c372:	7e1b      	ldrb	r3, [r3, #24]
   9c374:	2b00      	cmp	r3, #0
   9c376:	f000 81b0 	beq.w	9c6da <Cl_dprep_controller+0xb1a>
					 {
						 
						 
						 Cl_ConsoleRxDataType dataId;
						 Cl_Uint8Type count;
						 dataId = Cl_ConsoleRxMsg.data.byte[0];
   9c37a:	4b65      	ldr	r3, [pc, #404]	; (9c510 <Cl_dprep_controller+0x950>)
   9c37c:	791b      	ldrb	r3, [r3, #4]
   9c37e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
						 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9c382:	2300      	movs	r3, #0
   9c384:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
   9c388:	e011      	b.n	9c3ae <Cl_dprep_controller+0x7ee>
						 {
							 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   9c38a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
   9c38e:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
   9c392:	3201      	adds	r2, #1
   9c394:	495e      	ldr	r1, [pc, #376]	; (9c510 <Cl_dprep_controller+0x950>)
   9c396:	440a      	add	r2, r1
   9c398:	7912      	ldrb	r2, [r2, #4]
   9c39a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
   9c39e:	440b      	add	r3, r1
   9c3a0:	f803 2c78 	strb.w	r2, [r3, #-120]
						 
						 
						 Cl_ConsoleRxDataType dataId;
						 Cl_Uint8Type count;
						 dataId = Cl_ConsoleRxMsg.data.byte[0];
						 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9c3a4:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
   9c3a8:	3301      	adds	r3, #1
   9c3aa:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
   9c3ae:	4b58      	ldr	r3, [pc, #352]	; (9c510 <Cl_dprep_controller+0x950>)
   9c3b0:	78db      	ldrb	r3, [r3, #3]
   9c3b2:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
   9c3b6:	429a      	cmp	r2, r3
   9c3b8:	d3e7      	bcc.n	9c38a <Cl_dprep_controller+0x7ca>
						 {
							 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
						 }
						 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   9c3ba:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
   9c3be:	f897 0093 	ldrb.w	r0, [r7, #147]	; 0x93
   9c3c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   9c3c6:	ca06      	ldmia	r2, {r1, r2}
   9c3c8:	4c59      	ldr	r4, [pc, #356]	; (9c530 <Cl_dprep_controller+0x970>)
   9c3ca:	47a0      	blx	r4
						 
						 
						 
					 }
	
			break;
   9c3cc:	e185      	b.n	9c6da <Cl_dprep_controller+0xb1a>
			case EVENT_DPREP_TICK_50MS:
			
			cl_50ms_timer++;
   9c3ce:	4b59      	ldr	r3, [pc, #356]	; (9c534 <Cl_dprep_controller+0x974>)
   9c3d0:	881b      	ldrh	r3, [r3, #0]
   9c3d2:	3301      	adds	r3, #1
   9c3d4:	b29a      	uxth	r2, r3
   9c3d6:	4b57      	ldr	r3, [pc, #348]	; (9c534 <Cl_dprep_controller+0x974>)
   9c3d8:	801a      	strh	r2, [r3, #0]
			if(cl_50ms_timer == 2)
   9c3da:	4b56      	ldr	r3, [pc, #344]	; (9c534 <Cl_dprep_controller+0x974>)
   9c3dc:	881b      	ldrh	r3, [r3, #0]
   9c3de:	2b02      	cmp	r3, #2
   9c3e0:	f040 817e 	bne.w	9c6e0 <Cl_dprep_controller+0xb20>
			{
				cl_50ms_timer =0;
   9c3e4:	4b53      	ldr	r3, [pc, #332]	; (9c534 <Cl_dprep_controller+0x974>)
   9c3e6:	2200      	movs	r2, #0
   9c3e8:	801a      	strh	r2, [r3, #0]
			//	sv_cntrl_deactivate_valve(VALVE_ID19);
			}
			
			break;
   9c3ea:	e179      	b.n	9c6e0 <Cl_dprep_controller+0xb20>
			case EVENT_DPREP_TICK_500MS:
				//UpdateHeaterControls();
	
			break;
			case EVENT_DPREP_TICK_MINUTE:
				Cl_Dprep_ResetAlertsforReassertion();
   9c3ec:	4b52      	ldr	r3, [pc, #328]	; (9c538 <Cl_dprep_controller+0x978>)
   9c3ee:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   9c3f0:	f107 0322 	add.w	r3, r7, #34	; 0x22
   9c3f4:	4619      	mov	r1, r3
   9c3f6:	2014      	movs	r0, #20
   9c3f8:	4b50      	ldr	r3, [pc, #320]	; (9c53c <Cl_dprep_controller+0x97c>)
   9c3fa:	4798      	blx	r3
				int16_t sensordata;
				uint16_t cal_data  = (402 *100* sensordata)/(2*32768);			// resistance of PT100
   9c3fc:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   9c400:	f649 5208 	movw	r2, #40200	; 0x9d08
   9c404:	fb02 f303 	mul.w	r3, r2, r3
   9c408:	2b00      	cmp	r3, #0
   9c40a:	da02      	bge.n	9c412 <Cl_dprep_controller+0x852>
   9c40c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   9c410:	33ff      	adds	r3, #255	; 0xff
   9c412:	141b      	asrs	r3, r3, #16
   9c414:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
				res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
   9c418:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
   9c41c:	4618      	mov	r0, r3
   9c41e:	4b48      	ldr	r3, [pc, #288]	; (9c540 <Cl_dprep_controller+0x980>)
   9c420:	4798      	blx	r3
				temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
   9c422:	4b48      	ldr	r3, [pc, #288]	; (9c544 <Cl_dprep_controller+0x984>)
   9c424:	681a      	ldr	r2, [r3, #0]
   9c426:	4b48      	ldr	r3, [pc, #288]	; (9c548 <Cl_dprep_controller+0x988>)
   9c428:	4948      	ldr	r1, [pc, #288]	; (9c54c <Cl_dprep_controller+0x98c>)
   9c42a:	4610      	mov	r0, r2
   9c42c:	4798      	blx	r3
   9c42e:	4603      	mov	r3, r0
   9c430:	461a      	mov	r2, r3
   9c432:	4b47      	ldr	r3, [pc, #284]	; (9c550 <Cl_dprep_controller+0x990>)
   9c434:	4610      	mov	r0, r2
   9c436:	4798      	blx	r3
   9c438:	4603      	mov	r3, r0
   9c43a:	b29b      	uxth	r3, r3
   9c43c:	847b      	strh	r3, [r7, #34]	; 0x22
				temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
   9c43e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   9c440:	461a      	mov	r2, r3
   9c442:	4b44      	ldr	r3, [pc, #272]	; (9c554 <Cl_dprep_controller+0x994>)
   9c444:	4610      	mov	r0, r2
   9c446:	4798      	blx	r3
   9c448:	4c43      	ldr	r4, [pc, #268]	; (9c558 <Cl_dprep_controller+0x998>)
   9c44a:	a329      	add	r3, pc, #164	; (adr r3, 9c4f0 <Cl_dprep_controller+0x930>)
   9c44c:	e9d3 2300 	ldrd	r2, r3, [r3]
   9c450:	47a0      	blx	r4
   9c452:	4603      	mov	r3, r0
   9c454:	460c      	mov	r4, r1
   9c456:	4618      	mov	r0, r3
   9c458:	4621      	mov	r1, r4
   9c45a:	4c40      	ldr	r4, [pc, #256]	; (9c55c <Cl_dprep_controller+0x99c>)
   9c45c:	a326      	add	r3, pc, #152	; (adr r3, 9c4f8 <Cl_dprep_controller+0x938>)
   9c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
   9c462:	47a0      	blx	r4
   9c464:	4603      	mov	r3, r0
   9c466:	460c      	mov	r4, r1
   9c468:	4619      	mov	r1, r3
   9c46a:	4622      	mov	r2, r4
   9c46c:	4b3c      	ldr	r3, [pc, #240]	; (9c560 <Cl_dprep_controller+0x9a0>)
   9c46e:	4608      	mov	r0, r1
   9c470:	4611      	mov	r1, r2
   9c472:	4798      	blx	r3
   9c474:	4603      	mov	r3, r0
   9c476:	b29b      	uxth	r3, r3
   9c478:	847b      	strh	r3, [r7, #34]	; 0x22
				
//					temp_temp3 = temp_temp3 * 0.803;
					{
						float temp1=0;
   9c47a:	f04f 0300 	mov.w	r3, #0
   9c47e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
//						calibration_tmp(temp_temp3,TS3);
//						Cl_get_Temperature_Value(TS3_SPI, temprature_final_value_3 , &temp1);
						temp3_cel = temp_temp3;
   9c482:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   9c484:	4b37      	ldr	r3, [pc, #220]	; (9c564 <Cl_dprep_controller+0x9a4>)
   9c486:	4610      	mov	r0, r2
   9c488:	4798      	blx	r3
   9c48a:	4603      	mov	r3, r0
   9c48c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					}
					//calibration_tmp(temp_temp3,TS3);
					//temp3_cel = temprature_final_value_3;
					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
   9c490:	4b35      	ldr	r3, [pc, #212]	; (9c568 <Cl_dprep_controller+0x9a8>)
   9c492:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
   9c496:	4798      	blx	r3
   9c498:	4c34      	ldr	r4, [pc, #208]	; (9c56c <Cl_dprep_controller+0x9ac>)
   9c49a:	a319      	add	r3, pc, #100	; (adr r3, 9c500 <Cl_dprep_controller+0x940>)
   9c49c:	e9d3 2300 	ldrd	r2, r3, [r3]
   9c4a0:	47a0      	blx	r4
   9c4a2:	4603      	mov	r3, r0
   9c4a4:	2b00      	cmp	r3, #0
   9c4a6:	d01a      	beq.n	9c4de <Cl_dprep_controller+0x91e>
   9c4a8:	4b2f      	ldr	r3, [pc, #188]	; (9c568 <Cl_dprep_controller+0x9a8>)
   9c4aa:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
   9c4ae:	4798      	blx	r3
   9c4b0:	4c2f      	ldr	r4, [pc, #188]	; (9c570 <Cl_dprep_controller+0x9b0>)
   9c4b2:	a315      	add	r3, pc, #84	; (adr r3, 9c508 <Cl_dprep_controller+0x948>)
   9c4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   9c4b8:	47a0      	blx	r4
   9c4ba:	4603      	mov	r3, r0
   9c4bc:	2b00      	cmp	r3, #0
   9c4be:	d00e      	beq.n	9c4de <Cl_dprep_controller+0x91e>
				{
					if( cl_temp3_37stable == true) 
   9c4c0:	4b2c      	ldr	r3, [pc, #176]	; (9c574 <Cl_dprep_controller+0x9b4>)
   9c4c2:	781b      	ldrb	r3, [r3, #0]
   9c4c4:	2b00      	cmp	r3, #0
   9c4c6:	d003      	beq.n	9c4d0 <Cl_dprep_controller+0x910>
					{
					 cl_temp3_stable_confirm = true;	
   9c4c8:	4b2b      	ldr	r3, [pc, #172]	; (9c578 <Cl_dprep_controller+0x9b8>)
   9c4ca:	2201      	movs	r2, #1
   9c4cc:	701a      	strb	r2, [r3, #0]
					//calibration_tmp(temp_temp3,TS3);
					//temp3_cel = temprature_final_value_3;
					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
				{
					if( cl_temp3_37stable == true) 
   9c4ce:	e00d      	b.n	9c4ec <Cl_dprep_controller+0x92c>
					{
					 cl_temp3_stable_confirm = true;	
					}
					else
					{
					 cl_temp3_37stable = true;
   9c4d0:	4b28      	ldr	r3, [pc, #160]	; (9c574 <Cl_dprep_controller+0x9b4>)
   9c4d2:	2201      	movs	r2, #1
   9c4d4:	701a      	strb	r2, [r3, #0]
					 cl_temp3_stable_confirm = false;
   9c4d6:	4b28      	ldr	r3, [pc, #160]	; (9c578 <Cl_dprep_controller+0x9b8>)
   9c4d8:	2200      	movs	r2, #0
   9c4da:	701a      	strb	r2, [r3, #0]
					//calibration_tmp(temp_temp3,TS3);
					//temp3_cel = temprature_final_value_3;
					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
				{
					if( cl_temp3_37stable == true) 
   9c4dc:	e006      	b.n	9c4ec <Cl_dprep_controller+0x92c>
					 cl_temp3_stable_confirm = false;
					}
				}
				else
				{
					cl_temp3_37stable = false;
   9c4de:	4b25      	ldr	r3, [pc, #148]	; (9c574 <Cl_dprep_controller+0x9b4>)
   9c4e0:	2200      	movs	r2, #0
   9c4e2:	701a      	strb	r2, [r3, #0]
					cl_temp3_stable_confirm = false;
   9c4e4:	4b24      	ldr	r3, [pc, #144]	; (9c578 <Cl_dprep_controller+0x9b8>)
   9c4e6:	2200      	movs	r2, #0
   9c4e8:	701a      	strb	r2, [r3, #0]
					
				}
			


			break;
   9c4ea:	e100      	b.n	9c6ee <Cl_dprep_controller+0xb2e>
   9c4ec:	e0ff      	b.n	9c6ee <Cl_dprep_controller+0xb2e>
   9c4ee:	bf00      	nop
   9c4f0:	cccccccd 	.word	0xcccccccd
   9c4f4:	4008cccc 	.word	0x4008cccc
   9c4f8:	66666666 	.word	0x66666666
   9c4fc:	3ff66666 	.word	0x3ff66666
   9c500:	66666666 	.word	0x66666666
   9c504:	40426666 	.word	0x40426666
   9c508:	9999999a 	.word	0x9999999a
   9c50c:	40429999 	.word	0x40429999
   9c510:	20072f98 	.word	0x20072f98
   9c514:	000925a9 	.word	0x000925a9
   9c518:	2007212c 	.word	0x2007212c
   9c51c:	000a62b4 	.word	0x000a62b4
   9c520:	00099729 	.word	0x00099729
   9c524:	00087cad 	.word	0x00087cad
   9c528:	20070abc 	.word	0x20070abc
   9c52c:	00098239 	.word	0x00098239
   9c530:	0009e945 	.word	0x0009e945
   9c534:	20072838 	.word	0x20072838
   9c538:	0009e7b1 	.word	0x0009e7b1
   9c53c:	0008d6b1 	.word	0x0008d6b1
   9c540:	0008e8e1 	.word	0x0008e8e1
   9c544:	20072630 	.word	0x20072630
   9c548:	000a3f7d 	.word	0x000a3f7d
   9c54c:	42c80000 	.word	0x42c80000
   9c550:	000a41ed 	.word	0x000a41ed
   9c554:	000a34c9 	.word	0x000a34c9
   9c558:	000a322d 	.word	0x000a322d
   9c55c:	000a3231 	.word	0x000a3231
   9c560:	000a3b19 	.word	0x000a3b19
   9c564:	000a3d65 	.word	0x000a3d65
   9c568:	000a34ed 	.word	0x000a34ed
   9c56c:	000a3ab5 	.word	0x000a3ab5
   9c570:	000a3a79 	.word	0x000a3a79
   9c574:	20072837 	.word	0x20072837
   9c578:	20072834 	.word	0x20072834
										}
										
										temp3_cel_backup = temp3_cel;
					}
					#endif
					Cl_Dprep_filling_secondscounter++;
   9c57c:	4ba5      	ldr	r3, [pc, #660]	; (9c814 <Cl_dprep_controller+0xc54>)
   9c57e:	f9b3 3000 	ldrsh.w	r3, [r3]
   9c582:	b29b      	uxth	r3, r3
   9c584:	3301      	adds	r3, #1
   9c586:	b29b      	uxth	r3, r3
   9c588:	b21a      	sxth	r2, r3
   9c58a:	4ba2      	ldr	r3, [pc, #648]	; (9c814 <Cl_dprep_controller+0xc54>)
   9c58c:	801a      	strh	r2, [r3, #0]
					if(Cl_Dprep_filling_secondscounter == 60)
   9c58e:	4ba1      	ldr	r3, [pc, #644]	; (9c814 <Cl_dprep_controller+0xc54>)
   9c590:	f9b3 3000 	ldrsh.w	r3, [r3]
   9c594:	2b3c      	cmp	r3, #60	; 0x3c
   9c596:	d101      	bne.n	9c59c <Cl_dprep_controller+0x9dc>
					{
						UpdateDprepFillingMinuteTick();
   9c598:	4b9f      	ldr	r3, [pc, #636]	; (9c818 <Cl_dprep_controller+0xc58>)
   9c59a:	4798      	blx	r3
					}
					
					if(Cl_Dprep_filling_secondscounter == 30){ // activate flow alarms only after 30 seconds into rinse
   9c59c:	4b9d      	ldr	r3, [pc, #628]	; (9c814 <Cl_dprep_controller+0xc54>)
   9c59e:	f9b3 3000 	ldrsh.w	r3, [r3]
   9c5a2:	2b1e      	cmp	r3, #30
   9c5a4:	d114      	bne.n	9c5d0 <Cl_dprep_controller+0xa10>
						
						
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   9c5a6:	2101      	movs	r1, #1
   9c5a8:	200c      	movs	r0, #12
   9c5aa:	4b9c      	ldr	r3, [pc, #624]	; (9c81c <Cl_dprep_controller+0xc5c>)
   9c5ac:	4798      	blx	r3
   9c5ae:	4603      	mov	r3, r0
   9c5b0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   9c5b4:	2101      	movs	r1, #1
   9c5b6:	200d      	movs	r0, #13
   9c5b8:	4b98      	ldr	r3, [pc, #608]	; (9c81c <Cl_dprep_controller+0xc5c>)
   9c5ba:	4798      	blx	r3
   9c5bc:	4603      	mov	r3, r0
   9c5be:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   9c5c2:	2101      	movs	r1, #1
   9c5c4:	200e      	movs	r0, #14
   9c5c6:	4b95      	ldr	r3, [pc, #596]	; (9c81c <Cl_dprep_controller+0xc5c>)
   9c5c8:	4798      	blx	r3
   9c5ca:	4603      	mov	r3, r0
   9c5cc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						
						
					}
					
					
					Cl_Dprep_SendPrepStateData(DIALYSIS_PREP_DATA);
   9c5d0:	2004      	movs	r0, #4
   9c5d2:	4b93      	ldr	r3, [pc, #588]	; (9c820 <Cl_dprep_controller+0xc60>)
   9c5d4:	4798      	blx	r3
				//	Cl_Dprep_ResetAlertsforReassertion();
				//	Cl_dprepretcode = Cl_Dprep_ProcessAlarms();

					if(Cl_Dprep_CheckforfillingCompletion() == CL_OK )
   9c5d6:	4b93      	ldr	r3, [pc, #588]	; (9c824 <Cl_dprep_controller+0xc64>)
   9c5d8:	4798      	blx	r3
   9c5da:	4603      	mov	r3, r0
   9c5dc:	2b00      	cmp	r3, #0
   9c5de:	f040 8082 	bne.w	9c6e6 <Cl_dprep_controller+0xb26>
					{
						Cl_Uint32Type temp = Treatdata[ID_dflow];
   9c5e2:	4b91      	ldr	r3, [pc, #580]	; (9c828 <Cl_dprep_controller+0xc68>)
   9c5e4:	695b      	ldr	r3, [r3, #20]
   9c5e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						Cl_Uint16Type potvalue = 0;
   9c5ea:	2300      	movs	r3, #0
   9c5ec:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
						//if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_COMPLETED)
						if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED)
   9c5f0:	4b8e      	ldr	r3, [pc, #568]	; (9c82c <Cl_dprep_controller+0xc6c>)
   9c5f2:	781b      	ldrb	r3, [r3, #0]
   9c5f4:	2b08      	cmp	r3, #8
   9c5f6:	d108      	bne.n	9c60a <Cl_dprep_controller+0xa4a>
// 								break;
// 								
// 								default:
// 								break;
// 							}
							 sv_cntrl_enable_bypass();
   9c5f8:	4b8d      	ldr	r3, [pc, #564]	; (9c830 <Cl_dprep_controller+0xc70>)
   9c5fa:	4798      	blx	r3
							 cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9c5fc:	4b8d      	ldr	r3, [pc, #564]	; (9c834 <Cl_dprep_controller+0xc74>)
   9c5fe:	2201      	movs	r2, #1
   9c600:	701a      	strb	r2, [r3, #0]
							 
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
   9c602:	4b8d      	ldr	r3, [pc, #564]	; (9c838 <Cl_dprep_controller+0xc78>)
   9c604:	2205      	movs	r2, #5
   9c606:	701a      	strb	r2, [r3, #0]
   9c608:	e007      	b.n	9c61a <Cl_dprep_controller+0xa5a>
// 								break;
// 								
// 								default:
// 								break;
// 							}
							sv_cntrl_enable_bypass();
   9c60a:	4b89      	ldr	r3, [pc, #548]	; (9c830 <Cl_dprep_controller+0xc70>)
   9c60c:	4798      	blx	r3
							cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9c60e:	4b89      	ldr	r3, [pc, #548]	; (9c834 <Cl_dprep_controller+0xc74>)
   9c610:	2201      	movs	r2, #1
   9c612:	701a      	strb	r2, [r3, #0]

							cl_dprepstate = CL_DPREP_STATE_DPREP_FILLING_DONE;
   9c614:	4b88      	ldr	r3, [pc, #544]	; (9c838 <Cl_dprep_controller+0xc78>)
   9c616:	2203      	movs	r2, #3
   9c618:	701a      	strb	r2, [r3, #0]
						
						//	Cl_rinseretcode = (Cl_ReturnCodeType)sv_setflowpath(Default path ?);//set appropirate flow path configuration
					//	Cl_dprepretcode = sv_cntrl_poweroffheater();							
					//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
					//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
						command = CON_TX_COMMAND_DIALYSATE_FILLING_COMPLETED;
   9c61a:	231f      	movs	r3, #31
   9c61c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9c620:	2301      	movs	r3, #1
   9c622:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Cl_Dprep_filling_secondscounter = 0;
   9c626:	4b7b      	ldr	r3, [pc, #492]	; (9c814 <Cl_dprep_controller+0xc54>)
   9c628:	2200      	movs	r2, #0
   9c62a:	801a      	strh	r2, [r3, #0]
						Cl_Dprep_filling_Minutescounter = 0;
   9c62c:	4b83      	ldr	r3, [pc, #524]	; (9c83c <Cl_dprep_controller+0xc7c>)
   9c62e:	2200      	movs	r2, #0
   9c630:	801a      	strh	r2, [r3, #0]
						Cl_Dprep_filling_TotalMinutescounter = 0;
   9c632:	4b83      	ldr	r3, [pc, #524]	; (9c840 <Cl_dprep_controller+0xc80>)
   9c634:	2200      	movs	r2, #0
   9c636:	801a      	strh	r2, [r3, #0]

						Cl_deactivate_prep_alarms();
   9c638:	4b82      	ldr	r3, [pc, #520]	; (9c844 <Cl_dprep_controller+0xc84>)
   9c63a:	4798      	blx	r3

					//	Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_LOW,BELOW,13.0,0,0);
						// Appy treatment cond alarm and temerature alarm  limits here
						// Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
							
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,1);
   9c63c:	f107 0167 	add.w	r1, r7, #103	; 0x67
   9c640:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9c644:	2201      	movs	r2, #1
   9c646:	4618      	mov	r0, r3
   9c648:	4b7f      	ldr	r3, [pc, #508]	; (9c848 <Cl_dprep_controller+0xc88>)
   9c64a:	4798      	blx	r3
   9c64c:	4603      	mov	r3, r0
   9c64e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					}
					
			break;
   9c652:	e048      	b.n	9c6e6 <Cl_dprep_controller+0xb26>
			case EVENT_DPREP_MIXING_PREP_STOP:
			case EVENT_DPREP_STOP_DIALYSATE_FILL:
					Cl_dprep_StopMixing();
   9c654:	4b7d      	ldr	r3, [pc, #500]	; (9c84c <Cl_dprep_controller+0xc8c>)
   9c656:	4798      	blx	r3
					cl_dprepstate = CL_DPREP_STATE_STOPPED;
   9c658:	4b77      	ldr	r3, [pc, #476]	; (9c838 <Cl_dprep_controller+0xc78>)
   9c65a:	220b      	movs	r2, #11
   9c65c:	701a      	strb	r2, [r3, #0]
			break;
   9c65e:	e046      	b.n	9c6ee <Cl_dprep_controller+0xb2e>
			break;
			case EVENT_DPREP_ALARM:
					Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9c660:	4b7b      	ldr	r3, [pc, #492]	; (9c850 <Cl_dprep_controller+0xc90>)
   9c662:	4798      	blx	r3
   9c664:	4603      	mov	r3, r0
   9c666:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			break;
   9c66a:	e040      	b.n	9c6ee <Cl_dprep_controller+0xb2e>
			case EVENT_DPREP_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9c66c:	f107 0327 	add.w	r3, r7, #39	; 0x27
   9c670:	4619      	mov	r1, r3
   9c672:	203c      	movs	r0, #60	; 0x3c
   9c674:	4b77      	ldr	r3, [pc, #476]	; (9c854 <Cl_dprep_controller+0xc94>)
   9c676:	4798      	blx	r3
					if(alarmstatus1)
   9c678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9c67c:	2b00      	cmp	r3, #0
   9c67e:	d002      	beq.n	9c686 <Cl_dprep_controller+0xac6>
					{
						//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
					//	sv_cntrl_activate_valve(VALVE_ID19);
						cl_50ms_timer  = 1;
   9c680:	4b75      	ldr	r3, [pc, #468]	; (9c858 <Cl_dprep_controller+0xc98>)
   9c682:	2201      	movs	r2, #1
   9c684:	801a      	strh	r2, [r3, #0]
					
					}
					Cl_Alarm_GetAlarmStatus(TEMP2_HIGH_THRESHOLD,&alarmstatus3);
   9c686:	f107 0326 	add.w	r3, r7, #38	; 0x26
   9c68a:	4619      	mov	r1, r3
   9c68c:	2011      	movs	r0, #17
   9c68e:	4b71      	ldr	r3, [pc, #452]	; (9c854 <Cl_dprep_controller+0xc94>)
   9c690:	4798      	blx	r3
					if(alarmstatus3)
					{
						//	UpdateHeaterControls();
					}
			
					Cl_Alarm_GetAlarmStatus(FLOW_NO_FLOW,&flowstatus);
   9c692:	f107 0325 	add.w	r3, r7, #37	; 0x25
   9c696:	4619      	mov	r1, r3
   9c698:	200c      	movs	r0, #12
   9c69a:	4b6e      	ldr	r3, [pc, #440]	; (9c854 <Cl_dprep_controller+0xc94>)
   9c69c:	4798      	blx	r3
					//	if(flowstatus)
					//	{
					//		Cl_rinseretcode = sv_cntrl_poweroffheater();
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					//	}
			break;
   9c69e:	e026      	b.n	9c6ee <Cl_dprep_controller+0xb2e>
			case EVENT_DPREP_START_PRIME:
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9c6a0:	4b62      	ldr	r3, [pc, #392]	; (9c82c <Cl_dprep_controller+0xc6c>)
   9c6a2:	781b      	ldrb	r3, [r3, #0]
   9c6a4:	2b01      	cmp	r3, #1
   9c6a6:	d021      	beq.n	9c6ec <Cl_dprep_controller+0xb2c>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   9c6a8:	2206      	movs	r2, #6
   9c6aa:	496c      	ldr	r1, [pc, #432]	; (9c85c <Cl_dprep_controller+0xc9c>)
   9c6ac:	2018      	movs	r0, #24
   9c6ae:	4b66      	ldr	r3, [pc, #408]	; (9c848 <Cl_dprep_controller+0xc88>)
   9c6b0:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9c6b2:	2100      	movs	r1, #0
   9c6b4:	2001      	movs	r0, #1
   9c6b6:	4b6a      	ldr	r3, [pc, #424]	; (9c860 <Cl_dprep_controller+0xca0>)
   9c6b8:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9c6ba:	4b6a      	ldr	r3, [pc, #424]	; (9c864 <Cl_dprep_controller+0xca4>)
   9c6bc:	2200      	movs	r2, #0
   9c6be:	70da      	strb	r2, [r3, #3]
			}
			
			break;
   9c6c0:	e014      	b.n	9c6ec <Cl_dprep_controller+0xb2c>
			
			break;
			case EVENT_DPREP_TICK_500MS:
				//UpdateHeaterControls();
	
			break;
   9c6c2:	bf00      	nop
   9c6c4:	f000 befd 	b.w	9d4c2 <Cl_dprep_controller+0x1902>
							}
								
						}
				
			
			break;
   9c6c8:	bf00      	nop
   9c6ca:	f000 befa 	b.w	9d4c2 <Cl_dprep_controller+0x1902>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
			break;
   9c6ce:	bf00      	nop
   9c6d0:	f000 bef7 	b.w	9d4c2 <Cl_dprep_controller+0x1902>
						break;
						default:
						break;
					}
				}
			break;
   9c6d4:	bf00      	nop
   9c6d6:	f000 bef4 	b.w	9d4c2 <Cl_dprep_controller+0x1902>
						 
						 
						 
					 }
	
			break;
   9c6da:	bf00      	nop
   9c6dc:	f000 bef1 	b.w	9d4c2 <Cl_dprep_controller+0x1902>
			{
				cl_50ms_timer =0;
			//	sv_cntrl_deactivate_valve(VALVE_ID19);
			}
			
			break;
   9c6e0:	bf00      	nop
   9c6e2:	f000 beee 	b.w	9d4c2 <Cl_dprep_controller+0x1902>
						// Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
							
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,1);
					}
					
			break;
   9c6e6:	bf00      	nop
   9c6e8:	f000 beeb 	b.w	9d4c2 <Cl_dprep_controller+0x1902>
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
			}
			
			break;
   9c6ec:	bf00      	nop

		}
		break;
   9c6ee:	f000 bee8 	b.w	9d4c2 <Cl_dprep_controller+0x1902>
		case CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS:
					switch (cl_dprepevent)
   9c6f2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9c6f6:	2b17      	cmp	r3, #23
   9c6f8:	d00c      	beq.n	9c714 <Cl_dprep_controller+0xb54>
   9c6fa:	2b19      	cmp	r3, #25
   9c6fc:	d010      	beq.n	9c720 <Cl_dprep_controller+0xb60>
   9c6fe:	2b0d      	cmp	r3, #13
   9c700:	d000      	beq.n	9c704 <Cl_dprep_controller+0xb44>
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
						break;
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
						break;
						default:break;
   9c702:	e013      	b.n	9c72c <Cl_dprep_controller+0xb6c>
					{
						case EVENT_DPREP_START_DIALISER_PRIME:
					
							//	if(cl_dprepbypassstate == CL_DPREP_BYPASS_ON)
								
								sv_cntrl_disable_loopback();
   9c704:	4b58      	ldr	r3, [pc, #352]	; (9c868 <Cl_dprep_controller+0xca8>)
   9c706:	4798      	blx	r3
								sv_cntrl_disable_bypass();
   9c708:	4b58      	ldr	r3, [pc, #352]	; (9c86c <Cl_dprep_controller+0xcac>)
   9c70a:	4798      	blx	r3
								cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   9c70c:	4b4a      	ldr	r3, [pc, #296]	; (9c838 <Cl_dprep_controller+0xc78>)
   9c70e:	2206      	movs	r2, #6
   9c710:	701a      	strb	r2, [r3, #0]
								 
						break;
   9c712:	e00b      	b.n	9c72c <Cl_dprep_controller+0xb6c>
						case EVENT_DPREP_TICK_MINUTE:
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
   9c714:	4b56      	ldr	r3, [pc, #344]	; (9c870 <Cl_dprep_controller+0xcb0>)
   9c716:	4798      	blx	r3
   9c718:	4603      	mov	r3, r0
   9c71a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9c71e:	e005      	b.n	9c72c <Cl_dprep_controller+0xb6c>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9c720:	4b4b      	ldr	r3, [pc, #300]	; (9c850 <Cl_dprep_controller+0xc90>)
   9c722:	4798      	blx	r3
   9c724:	4603      	mov	r3, r0
   9c726:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9c72a:	bf00      	nop
						default:break;
					}
		break;
   9c72c:	f000 bed0 	b.w	9d4d0 <Cl_dprep_controller+0x1910>
		
		case CL_DPREP_STATE_CRITICAL_ALARM:
					switch (cl_dprepevent)
   9c730:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9c734:	3b02      	subs	r3, #2
   9c736:	2b1b      	cmp	r3, #27
   9c738:	d862      	bhi.n	9c800 <Cl_dprep_controller+0xc40>
   9c73a:	a201      	add	r2, pc, #4	; (adr r2, 9c740 <Cl_dprep_controller+0xb80>)
   9c73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c740:	0009c7b1 	.word	0x0009c7b1
   9c744:	0009c801 	.word	0x0009c801
   9c748:	0009c801 	.word	0x0009c801
   9c74c:	0009c801 	.word	0x0009c801
   9c750:	0009c801 	.word	0x0009c801
   9c754:	0009c801 	.word	0x0009c801
   9c758:	0009c801 	.word	0x0009c801
   9c75c:	0009c801 	.word	0x0009c801
   9c760:	0009c801 	.word	0x0009c801
   9c764:	0009c801 	.word	0x0009c801
   9c768:	0009c801 	.word	0x0009c801
   9c76c:	0009c7c1 	.word	0x0009c7c1
   9c770:	0009c801 	.word	0x0009c801
   9c774:	0009c801 	.word	0x0009c801
   9c778:	0009c801 	.word	0x0009c801
   9c77c:	0009c801 	.word	0x0009c801
   9c780:	0009c801 	.word	0x0009c801
   9c784:	0009c801 	.word	0x0009c801
   9c788:	0009c801 	.word	0x0009c801
   9c78c:	0009c801 	.word	0x0009c801
   9c790:	0009c801 	.word	0x0009c801
   9c794:	0009c7e9 	.word	0x0009c7e9
   9c798:	0009c801 	.word	0x0009c801
   9c79c:	0009c7f5 	.word	0x0009c7f5
   9c7a0:	0009c801 	.word	0x0009c801
   9c7a4:	0009c801 	.word	0x0009c801
   9c7a8:	0009c801 	.word	0x0009c801
   9c7ac:	0009c7cf 	.word	0x0009c7cf
					{
						case EVENT_DPREP_DIALYSIS_PREP:
						//Cl_dprepretcode = Cl_Dprep_StartPreparation();
						if(Cl_dprepretcode == CL_REJECTED)
   9c7b0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9c7b4:	2b03      	cmp	r3, #3
   9c7b6:	d126      	bne.n	9c806 <Cl_dprep_controller+0xc46>
							{
								return Cl_dprepretcode;
   9c7b8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9c7bc:	f000 be8a 	b.w	9d4d4 <Cl_dprep_controller+0x1914>
							}
						break;
						case EVENT_DPREP_START_DIALISER_PRIME:
							//	if(cl_dprepbypassstate == CL_DPREP_BYPASS_ON)
								Cl_Dprep_StartDialyserPrime();
   9c7c0:	4b2c      	ldr	r3, [pc, #176]	; (9c874 <Cl_dprep_controller+0xcb4>)
   9c7c2:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9c7c4:	4b28      	ldr	r3, [pc, #160]	; (9c868 <Cl_dprep_controller+0xca8>)
   9c7c6:	4798      	blx	r3
								 sv_prop_startmixing();
   9c7c8:	4b2b      	ldr	r3, [pc, #172]	; (9c878 <Cl_dprep_controller+0xcb8>)
   9c7ca:	4798      	blx	r3
						break;
   9c7cc:	e01f      	b.n	9c80e <Cl_dprep_controller+0xc4e>
						case EVENT_DPREP_MIXING_PREP_START:
						Cl_dprepretcode = Cl_Dprep_StartPreparation();
   9c7ce:	4b2b      	ldr	r3, [pc, #172]	; (9c87c <Cl_dprep_controller+0xcbc>)
   9c7d0:	4798      	blx	r3
   9c7d2:	4603      	mov	r3, r0
   9c7d4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						if(Cl_dprepretcode == CL_REJECTED)
   9c7d8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9c7dc:	2b03      	cmp	r3, #3
   9c7de:	d115      	bne.n	9c80c <Cl_dprep_controller+0xc4c>
							{
								return Cl_dprepretcode;
   9c7e0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9c7e4:	f000 be76 	b.w	9d4d4 <Cl_dprep_controller+0x1914>
							}
						break;
						case EVENT_DPREP_TICK_MINUTE:
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
   9c7e8:	4b21      	ldr	r3, [pc, #132]	; (9c870 <Cl_dprep_controller+0xcb0>)
   9c7ea:	4798      	blx	r3
   9c7ec:	4603      	mov	r3, r0
   9c7ee:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9c7f2:	e00c      	b.n	9c80e <Cl_dprep_controller+0xc4e>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9c7f4:	4b16      	ldr	r3, [pc, #88]	; (9c850 <Cl_dprep_controller+0xc90>)
   9c7f6:	4798      	blx	r3
   9c7f8:	4603      	mov	r3, r0
   9c7fa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9c7fe:	e006      	b.n	9c80e <Cl_dprep_controller+0xc4e>
// 
// 								}
// 							}
// 						}
						break;
						default:break;
   9c800:	bf00      	nop
   9c802:	f000 be65 	b.w	9d4d0 <Cl_dprep_controller+0x1910>
						//Cl_dprepretcode = Cl_Dprep_StartPreparation();
						if(Cl_dprepretcode == CL_REJECTED)
							{
								return Cl_dprepretcode;
							}
						break;
   9c806:	bf00      	nop
   9c808:	f000 be62 	b.w	9d4d0 <Cl_dprep_controller+0x1910>
						Cl_dprepretcode = Cl_Dprep_StartPreparation();
						if(Cl_dprepretcode == CL_REJECTED)
							{
								return Cl_dprepretcode;
							}
						break;
   9c80c:	bf00      	nop
// 							}
// 						}
						break;
						default:break;
					}
		break;
   9c80e:	f000 be5f 	b.w	9d4d0 <Cl_dprep_controller+0x1910>
   9c812:	bf00      	nop
   9c814:	2007281a 	.word	0x2007281a
   9c818:	0009dec1 	.word	0x0009dec1
   9c81c:	00082efd 	.word	0x00082efd
   9c820:	0009df69 	.word	0x0009df69
   9c824:	0009dc09 	.word	0x0009dc09
   9c828:	200731a4 	.word	0x200731a4
   9c82c:	2007212c 	.word	0x2007212c
   9c830:	00097b59 	.word	0x00097b59
   9c834:	2007283c 	.word	0x2007283c
   9c838:	2007283b 	.word	0x2007283b
   9c83c:	2007281c 	.word	0x2007281c
   9c840:	2007281e 	.word	0x2007281e
   9c844:	0009fabd 	.word	0x0009fabd
   9c848:	00099729 	.word	0x00099729
   9c84c:	0009fa1d 	.word	0x0009fa1d
   9c850:	0009d7f1 	.word	0x0009d7f1
   9c854:	00083035 	.word	0x00083035
   9c858:	20072838 	.word	0x20072838
   9c85c:	000a62bc 	.word	0x000a62bc
   9c860:	00087cad 	.word	0x00087cad
   9c864:	20070abc 	.word	0x20070abc
   9c868:	00097b3d 	.word	0x00097b3d
   9c86c:	00097b81 	.word	0x00097b81
   9c870:	0009e7b1 	.word	0x0009e7b1
   9c874:	0009f689 	.word	0x0009f689
   9c878:	00097d55 	.word	0x00097d55
   9c87c:	0009f365 	.word	0x0009f365
		case CL_DPREP_STATE_DPREP_FILLING_DONE:
					switch (cl_dprepevent)
   9c880:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9c884:	3b04      	subs	r3, #4
   9c886:	2b1b      	cmp	r3, #27
   9c888:	f200 80cf 	bhi.w	9ca2a <Cl_dprep_controller+0xe6a>
   9c88c:	a201      	add	r2, pc, #4	; (adr r2, 9c894 <Cl_dprep_controller+0xcd4>)
   9c88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c892:	bf00      	nop
   9c894:	0009c9a3 	.word	0x0009c9a3
   9c898:	0009ca2b 	.word	0x0009ca2b
   9c89c:	0009ca2b 	.word	0x0009ca2b
   9c8a0:	0009ca2b 	.word	0x0009ca2b
   9c8a4:	0009ca2b 	.word	0x0009ca2b
   9c8a8:	0009ca2b 	.word	0x0009ca2b
   9c8ac:	0009c949 	.word	0x0009c949
   9c8b0:	0009ca2b 	.word	0x0009ca2b
   9c8b4:	0009c98d 	.word	0x0009c98d
   9c8b8:	0009c905 	.word	0x0009c905
   9c8bc:	0009ca2b 	.word	0x0009ca2b
   9c8c0:	0009ca2b 	.word	0x0009ca2b
   9c8c4:	0009ca2b 	.word	0x0009ca2b
   9c8c8:	0009ca2b 	.word	0x0009ca2b
   9c8cc:	0009ca2b 	.word	0x0009ca2b
   9c8d0:	0009ca2b 	.word	0x0009ca2b
   9c8d4:	0009ca2b 	.word	0x0009ca2b
   9c8d8:	0009ca2b 	.word	0x0009ca2b
   9c8dc:	0009c971 	.word	0x0009c971
   9c8e0:	0009c96b 	.word	0x0009c96b
   9c8e4:	0009ca2b 	.word	0x0009ca2b
   9c8e8:	0009c981 	.word	0x0009c981
   9c8ec:	0009ca2b 	.word	0x0009ca2b
   9c8f0:	0009ca2b 	.word	0x0009ca2b
   9c8f4:	0009ca2b 	.word	0x0009ca2b
   9c8f8:	0009ca2b 	.word	0x0009ca2b
   9c8fc:	0009ca2b 	.word	0x0009ca2b
   9c900:	0009c915 	.word	0x0009c915
					{
						case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
   9c904:	4ba2      	ldr	r3, [pc, #648]	; (9cb90 <Cl_dprep_controller+0xfd0>)
   9c906:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9c908:	4ba2      	ldr	r3, [pc, #648]	; (9cb94 <Cl_dprep_controller+0xfd4>)
   9c90a:	4798      	blx	r3
								cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   9c90c:	4ba2      	ldr	r3, [pc, #648]	; (9cb98 <Cl_dprep_controller+0xfd8>)
   9c90e:	2206      	movs	r2, #6
   9c910:	701a      	strb	r2, [r3, #0]
						break;
   9c912:	e097      	b.n	9ca44 <Cl_dprep_controller+0xe84>
						case EVENT_DPREP_START_RECIRC:
									if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   9c914:	4ba1      	ldr	r3, [pc, #644]	; (9cb9c <Cl_dprep_controller+0xfdc>)
   9c916:	781b      	ldrb	r3, [r3, #0]
   9c918:	2b01      	cmp	r3, #1
   9c91a:	d108      	bne.n	9c92e <Cl_dprep_controller+0xd6e>
   9c91c:	4b9f      	ldr	r3, [pc, #636]	; (9cb9c <Cl_dprep_controller+0xfdc>)
   9c91e:	781b      	ldrb	r3, [r3, #0]
   9c920:	2b05      	cmp	r3, #5
   9c922:	d104      	bne.n	9c92e <Cl_dprep_controller+0xd6e>
   9c924:	4b9d      	ldr	r3, [pc, #628]	; (9cb9c <Cl_dprep_controller+0xfdc>)
   9c926:	781b      	ldrb	r3, [r3, #0]
   9c928:	2b09      	cmp	r3, #9
   9c92a:	f000 8081 	beq.w	9ca30 <Cl_dprep_controller+0xe70>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9c92e:	2206      	movs	r2, #6
   9c930:	499b      	ldr	r1, [pc, #620]	; (9cba0 <Cl_dprep_controller+0xfe0>)
   9c932:	2018      	movs	r0, #24
   9c934:	4b9b      	ldr	r3, [pc, #620]	; (9cba4 <Cl_dprep_controller+0xfe4>)
   9c936:	4798      	blx	r3
										cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9c938:	2100      	movs	r1, #0
   9c93a:	2005      	movs	r0, #5
   9c93c:	4b9a      	ldr	r3, [pc, #616]	; (9cba8 <Cl_dprep_controller+0xfe8>)
   9c93e:	4798      	blx	r3
										Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9c940:	4b9a      	ldr	r3, [pc, #616]	; (9cbac <Cl_dprep_controller+0xfec>)
   9c942:	2200      	movs	r2, #0
   9c944:	70da      	strb	r2, [r3, #3]
									}
						break;
   9c946:	e073      	b.n	9ca30 <Cl_dprep_controller+0xe70>
						case EVENT_DPREP_START_PRIME:
						if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9c948:	4b94      	ldr	r3, [pc, #592]	; (9cb9c <Cl_dprep_controller+0xfdc>)
   9c94a:	781b      	ldrb	r3, [r3, #0]
   9c94c:	2b01      	cmp	r3, #1
   9c94e:	d072      	beq.n	9ca36 <Cl_dprep_controller+0xe76>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   9c950:	2206      	movs	r2, #6
   9c952:	4997      	ldr	r1, [pc, #604]	; (9cbb0 <Cl_dprep_controller+0xff0>)
   9c954:	2018      	movs	r0, #24
   9c956:	4b93      	ldr	r3, [pc, #588]	; (9cba4 <Cl_dprep_controller+0xfe4>)
   9c958:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9c95a:	2100      	movs	r1, #0
   9c95c:	2001      	movs	r0, #1
   9c95e:	4b92      	ldr	r3, [pc, #584]	; (9cba8 <Cl_dprep_controller+0xfe8>)
   9c960:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9c962:	4b92      	ldr	r3, [pc, #584]	; (9cbac <Cl_dprep_controller+0xfec>)
   9c964:	2200      	movs	r2, #0
   9c966:	70da      	strb	r2, [r3, #3]
						}
						
						break;
   9c968:	e065      	b.n	9ca36 <Cl_dprep_controller+0xe76>
						case EVENT_DPREP_MAC_PRIME_COMPLETED:
					//	cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
						break;

						case EVENT_DPREP_TICK_MINUTE:
							Cl_Dprep_ResetAlertsforReassertion();
   9c96a:	4b92      	ldr	r3, [pc, #584]	; (9cbb4 <Cl_dprep_controller+0xff4>)
   9c96c:	4798      	blx	r3
											
											temp3_cel_backup = temp3_cel
											
											#endif
										
						break;
   9c96e:	e069      	b.n	9ca44 <Cl_dprep_controller+0xe84>
						
						case EVENT_DPREP_TICK_SECOND:
					//	if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_COMPLETED)
						if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED)
   9c970:	4b8a      	ldr	r3, [pc, #552]	; (9cb9c <Cl_dprep_controller+0xfdc>)
   9c972:	781b      	ldrb	r3, [r3, #0]
   9c974:	2b08      	cmp	r3, #8
   9c976:	d161      	bne.n	9ca3c <Cl_dprep_controller+0xe7c>
					
						{
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
   9c978:	4b87      	ldr	r3, [pc, #540]	; (9cb98 <Cl_dprep_controller+0xfd8>)
   9c97a:	2205      	movs	r2, #5
   9c97c:	701a      	strb	r2, [r3, #0]
									 
						}
						break;
   9c97e:	e05d      	b.n	9ca3c <Cl_dprep_controller+0xe7c>


						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9c980:	4b8d      	ldr	r3, [pc, #564]	; (9cbb8 <Cl_dprep_controller+0xff8>)
   9c982:	4798      	blx	r3
   9c984:	4603      	mov	r3, r0
   9c986:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9c98a:	e05b      	b.n	9ca44 <Cl_dprep_controller+0xe84>
						case EVENT_DPREP_DILYSER_CONNECTED:
		
						// check for micro switches
						Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_CONNECTED_CONFIRMED,&data,0);
   9c98c:	f107 0367 	add.w	r3, r7, #103	; 0x67
   9c990:	2200      	movs	r2, #0
   9c992:	4619      	mov	r1, r3
   9c994:	2025      	movs	r0, #37	; 0x25
   9c996:	4b83      	ldr	r3, [pc, #524]	; (9cba4 <Cl_dprep_controller+0xfe4>)
   9c998:	4798      	blx	r3
   9c99a:	4603      	mov	r3, r0
   9c99c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		
						break;
   9c9a0:	e050      	b.n	9ca44 <Cl_dprep_controller+0xe84>
						case EVENT_DPREP_COMMAND_GET_DATA:

							if(Cl_ConsoleRxMsg.msgready == true)
   9c9a2:	4b86      	ldr	r3, [pc, #536]	; (9cbbc <Cl_dprep_controller+0xffc>)
   9c9a4:	7e1b      	ldrb	r3, [r3, #24]
   9c9a6:	2b00      	cmp	r3, #0
   9c9a8:	d04b      	beq.n	9ca42 <Cl_dprep_controller+0xe82>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9c9aa:	4b84      	ldr	r3, [pc, #528]	; (9cbbc <Cl_dprep_controller+0xffc>)
   9c9ac:	791b      	ldrb	r3, [r3, #4]
   9c9ae:	2b02      	cmp	r3, #2
   9c9b0:	d002      	beq.n	9c9b8 <Cl_dprep_controller+0xdf8>
   9c9b2:	2b04      	cmp	r3, #4
   9c9b4:	d01c      	beq.n	9c9f0 <Cl_dprep_controller+0xe30>
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:
									break;
   9c9b6:	e037      	b.n	9ca28 <Cl_dprep_controller+0xe68>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case	CON_RX_PARAM_DATA_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9c9b8:	2316      	movs	r3, #22
   9c9ba:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9c9be:	2302      	movs	r3, #2
   9c9c0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9c9c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
   9c9c8:	3301      	adds	r3, #1
   9c9ca:	4619      	mov	r1, r3
   9c9cc:	2002      	movs	r0, #2
   9c9ce:	4b7c      	ldr	r3, [pc, #496]	; (9cbc0 <Cl_dprep_controller+0x1000>)
   9c9d0:	4798      	blx	r3
   9c9d2:	4603      	mov	r3, r0
   9c9d4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c9d8:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9c9dc:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9c9e0:	2202      	movs	r2, #2
   9c9e2:	4618      	mov	r0, r3
   9c9e4:	4b6f      	ldr	r3, [pc, #444]	; (9cba4 <Cl_dprep_controller+0xfe4>)
   9c9e6:	4798      	blx	r3
   9c9e8:	4603      	mov	r3, r0
   9c9ea:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   9c9ee:	e01b      	b.n	9ca28 <Cl_dprep_controller+0xe68>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9c9f0:	2316      	movs	r3, #22
   9c9f2:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9c9f6:	2304      	movs	r3, #4
   9c9f8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9c9fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
   9ca00:	3301      	adds	r3, #1
   9ca02:	4619      	mov	r1, r3
   9ca04:	2004      	movs	r0, #4
   9ca06:	4b6e      	ldr	r3, [pc, #440]	; (9cbc0 <Cl_dprep_controller+0x1000>)
   9ca08:	4798      	blx	r3
   9ca0a:	4603      	mov	r3, r0
   9ca0c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9ca10:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9ca14:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9ca18:	2202      	movs	r2, #2
   9ca1a:	4618      	mov	r0, r3
   9ca1c:	4b61      	ldr	r3, [pc, #388]	; (9cba4 <Cl_dprep_controller+0xfe4>)
   9ca1e:	4798      	blx	r3
   9ca20:	4603      	mov	r3, r0
   9ca22:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   9ca26:	bf00      	nop
									default:
									break;
								}
							}
						break;
   9ca28:	e00b      	b.n	9ca42 <Cl_dprep_controller+0xe82>
						default:break;
   9ca2a:	bf00      	nop
   9ca2c:	f000 bd50 	b.w	9d4d0 <Cl_dprep_controller+0x1910>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
										cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
										Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
									}
						break;
   9ca30:	bf00      	nop
   9ca32:	f000 bd4d 	b.w	9d4d0 <Cl_dprep_controller+0x1910>
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
						
						break;
   9ca36:	bf00      	nop
   9ca38:	f000 bd4a 	b.w	9d4d0 <Cl_dprep_controller+0x1910>
					
						{
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
									 
						}
						break;
   9ca3c:	bf00      	nop
   9ca3e:	f000 bd47 	b.w	9d4d0 <Cl_dprep_controller+0x1910>
									break;
									default:
									break;
								}
							}
						break;
   9ca42:	bf00      	nop
						default:break;
					}

		break;
   9ca44:	f000 bd44 	b.w	9d4d0 <Cl_dprep_controller+0x1910>
		
		case CL_DPREP_STATE_DPRIME_WAIT_STABILITY:
		
		 
		 wait_timeout_counter = 0;
   9ca48:	4b5e      	ldr	r3, [pc, #376]	; (9cbc4 <Cl_dprep_controller+0x1004>)
   9ca4a:	2200      	movs	r2, #0
   9ca4c:	601a      	str	r2, [r3, #0]
		 
		 if(state_counter > 3){
   9ca4e:	4b5e      	ldr	r3, [pc, #376]	; (9cbc8 <Cl_dprep_controller+0x1008>)
   9ca50:	681b      	ldr	r3, [r3, #0]
   9ca52:	2b03      	cmp	r3, #3
   9ca54:	dd0c      	ble.n	9ca70 <Cl_dprep_controller+0xeb0>
// 			 sv_cntrl_enable_bypass();
// 			 cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
// 			 cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
// 			 Cl_dprep_StopMixing();
// 			 cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
			Cl_Dprep_Priming_Stop();
   9ca56:	4b5d      	ldr	r3, [pc, #372]	; (9cbcc <Cl_dprep_controller+0x100c>)
   9ca58:	4798      	blx	r3
			 state_counter = 0;
   9ca5a:	4b5b      	ldr	r3, [pc, #364]	; (9cbc8 <Cl_dprep_controller+0x1008>)
   9ca5c:	2200      	movs	r2, #0
   9ca5e:	601a      	str	r2, [r3, #0]
			 stability_counter = 0;
   9ca60:	4b5b      	ldr	r3, [pc, #364]	; (9cbd0 <Cl_dprep_controller+0x1010>)
   9ca62:	2200      	movs	r2, #0
   9ca64:	601a      	str	r2, [r3, #0]
			 wait_timeout_counter = 0;
   9ca66:	4b57      	ldr	r3, [pc, #348]	; (9cbc4 <Cl_dprep_controller+0x1004>)
   9ca68:	2200      	movs	r2, #0
   9ca6a:	601a      	str	r2, [r3, #0]
			
		
		}
		}
		
		break;
   9ca6c:	f000 bd2b 	b.w	9d4c6 <Cl_dprep_controller+0x1906>
			 wait_timeout_counter = 0;
		 }
		 else{
			 
		 
		switch(cl_dprepevent){
   9ca70:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9ca74:	3b01      	subs	r3, #1
   9ca76:	2b18      	cmp	r3, #24
   9ca78:	f200 8525 	bhi.w	9d4c6 <Cl_dprep_controller+0x1906>
   9ca7c:	a201      	add	r2, pc, #4	; (adr r2, 9ca84 <Cl_dprep_controller+0xec4>)
   9ca7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9ca82:	bf00      	nop
   9ca84:	0009cb77 	.word	0x0009cb77
   9ca88:	0009d4c7 	.word	0x0009d4c7
   9ca8c:	0009d4c7 	.word	0x0009d4c7
   9ca90:	0009d4c7 	.word	0x0009d4c7
   9ca94:	0009d4c7 	.word	0x0009d4c7
   9ca98:	0009d4c7 	.word	0x0009d4c7
   9ca9c:	0009d4c7 	.word	0x0009d4c7
   9caa0:	0009d4c7 	.word	0x0009d4c7
   9caa4:	0009d4c7 	.word	0x0009d4c7
   9caa8:	0009d4c7 	.word	0x0009d4c7
   9caac:	0009d4c7 	.word	0x0009d4c7
   9cab0:	0009d4c7 	.word	0x0009d4c7
   9cab4:	0009d4c7 	.word	0x0009d4c7
   9cab8:	0009cb71 	.word	0x0009cb71
   9cabc:	0009d4c7 	.word	0x0009d4c7
   9cac0:	0009d4c7 	.word	0x0009d4c7
   9cac4:	0009d4c7 	.word	0x0009d4c7
   9cac8:	0009d4c7 	.word	0x0009d4c7
   9cacc:	0009d4c7 	.word	0x0009d4c7
   9cad0:	0009d4c7 	.word	0x0009d4c7
   9cad4:	0009d4c7 	.word	0x0009d4c7
   9cad8:	0009cae9 	.word	0x0009cae9
   9cadc:	0009d4c7 	.word	0x0009d4c7
   9cae0:	0009d4c7 	.word	0x0009d4c7
   9cae4:	0009cb65 	.word	0x0009cb65
		
		case EVENT_DPREP_TICK_SECOND:
		
		wait_timeout_counter++;
   9cae8:	4b36      	ldr	r3, [pc, #216]	; (9cbc4 <Cl_dprep_controller+0x1004>)
   9caea:	681b      	ldr	r3, [r3, #0]
   9caec:	3301      	adds	r3, #1
   9caee:	4a35      	ldr	r2, [pc, #212]	; (9cbc4 <Cl_dprep_controller+0x1004>)
   9caf0:	6013      	str	r3, [r2, #0]
		// disable cond and temp alarm
		// if 3 times it comes then stop the dialyzer priming
		// send data to console to wait for stability
		
		
		Cl_Dprep_SendPrepStateData(DIALYSER_PRIME_DATA);
   9caf2:	2003      	movs	r0, #3
   9caf4:	4b37      	ldr	r3, [pc, #220]	; (9cbd4 <Cl_dprep_controller+0x1014>)
   9caf6:	4798      	blx	r3
		if(Cl_Check_Temp_Cond_Stability() == CL_OK){
   9caf8:	4b37      	ldr	r3, [pc, #220]	; (9cbd8 <Cl_dprep_controller+0x1018>)
   9cafa:	4798      	blx	r3
   9cafc:	4603      	mov	r3, r0
   9cafe:	2b00      	cmp	r3, #0
   9cb00:	d104      	bne.n	9cb0c <Cl_dprep_controller+0xf4c>
			
			stability_counter++ ;
   9cb02:	4b33      	ldr	r3, [pc, #204]	; (9cbd0 <Cl_dprep_controller+0x1010>)
   9cb04:	681b      	ldr	r3, [r3, #0]
   9cb06:	3301      	adds	r3, #1
   9cb08:	4a31      	ldr	r2, [pc, #196]	; (9cbd0 <Cl_dprep_controller+0x1010>)
   9cb0a:	6013      	str	r3, [r2, #0]
		}
		
		if(stability_counter == 10){
   9cb0c:	4b30      	ldr	r3, [pc, #192]	; (9cbd0 <Cl_dprep_controller+0x1010>)
   9cb0e:	681b      	ldr	r3, [r3, #0]
   9cb10:	2b0a      	cmp	r3, #10
   9cb12:	d120      	bne.n	9cb56 <Cl_dprep_controller+0xf96>
		
		Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false ); // true
   9cb14:	2100      	movs	r1, #0
   9cb16:	2008      	movs	r0, #8
   9cb18:	4b30      	ldr	r3, [pc, #192]	; (9cbdc <Cl_dprep_controller+0x101c>)
   9cb1a:	4798      	blx	r3
		Cl_AlarmActivateAlarms(COND_STATUS_LOW,false ); // true
   9cb1c:	2100      	movs	r1, #0
   9cb1e:	2007      	movs	r0, #7
   9cb20:	4b2e      	ldr	r3, [pc, #184]	; (9cbdc <Cl_dprep_controller+0x101c>)
   9cb22:	4798      	blx	r3
		Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false ); // true
   9cb24:	2100      	movs	r1, #0
   9cb26:	2013      	movs	r0, #19
   9cb28:	4b2c      	ldr	r3, [pc, #176]	; (9cbdc <Cl_dprep_controller+0x101c>)
   9cb2a:	4798      	blx	r3
		Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false ); //true
   9cb2c:	2100      	movs	r1, #0
   9cb2e:	2014      	movs	r0, #20
   9cb30:	4b2a      	ldr	r3, [pc, #168]	; (9cbdc <Cl_dprep_controller+0x101c>)
   9cb32:	4798      	blx	r3
		
		stability_counter = 0;	
   9cb34:	4b26      	ldr	r3, [pc, #152]	; (9cbd0 <Cl_dprep_controller+0x1010>)
   9cb36:	2200      	movs	r2, #0
   9cb38:	601a      	str	r2, [r3, #0]
		wait_timeout_counter = 0;
   9cb3a:	4b22      	ldr	r3, [pc, #136]	; (9cbc4 <Cl_dprep_controller+0x1004>)
   9cb3c:	2200      	movs	r2, #0
   9cb3e:	601a      	str	r2, [r3, #0]
				Cl_dprepretcode =  sv_cntrl_disable_bypass();
   9cb40:	4b27      	ldr	r3, [pc, #156]	; (9cbe0 <Cl_dprep_controller+0x1020>)
   9cb42:	4798      	blx	r3
   9cb44:	4603      	mov	r3, r0
   9cb46:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;
   9cb4a:	4b26      	ldr	r3, [pc, #152]	; (9cbe4 <Cl_dprep_controller+0x1024>)
   9cb4c:	2202      	movs	r2, #2
   9cb4e:	701a      	strb	r2, [r3, #0]
				cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   9cb50:	4b11      	ldr	r3, [pc, #68]	; (9cb98 <Cl_dprep_controller+0xfd8>)
   9cb52:	2206      	movs	r2, #6
   9cb54:	701a      	strb	r2, [r3, #0]
						
			}
		
		if(wait_timeout_counter > 15){
   9cb56:	4b1b      	ldr	r3, [pc, #108]	; (9cbc4 <Cl_dprep_controller+0x1004>)
   9cb58:	681b      	ldr	r3, [r3, #0]
   9cb5a:	2b0f      	cmp	r3, #15
   9cb5c:	dd14      	ble.n	9cb88 <Cl_dprep_controller+0xfc8>
			
			// stop preparation
			Cl_Dprep_Priming_Stop();
   9cb5e:	4b1b      	ldr	r3, [pc, #108]	; (9cbcc <Cl_dprep_controller+0x100c>)
   9cb60:	4798      	blx	r3
// 				//cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
		}
		
		 
		
		break;
   9cb62:	e011      	b.n	9cb88 <Cl_dprep_controller+0xfc8>
		
		case EVENT_DPREP_ALARM:
		Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9cb64:	4b14      	ldr	r3, [pc, #80]	; (9cbb8 <Cl_dprep_controller+0xff8>)
   9cb66:	4798      	blx	r3
   9cb68:	4603      	mov	r3, r0
   9cb6a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		break;
   9cb6e:	e00c      	b.n	9cb8a <Cl_dprep_controller+0xfca>
		
		case EVENT_DPREP_STOP_DIALYSER_PRIME:
		
		Cl_Dprep_Priming_Stop();
   9cb70:	4b16      	ldr	r3, [pc, #88]	; (9cbcc <Cl_dprep_controller+0x100c>)
   9cb72:	4798      	blx	r3
// 		Cl_dprep_StopMixing();
// 		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
// 		cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
		break;
   9cb74:	e009      	b.n	9cb8a <Cl_dprep_controller+0xfca>
		
		case EVENT_DPREP_CLR_ALARM:
		sv_cntrl_resetyellowalarm();
   9cb76:	4b1c      	ldr	r3, [pc, #112]	; (9cbe8 <Cl_dprep_controller+0x1028>)
   9cb78:	4798      	blx	r3
		sv_cntrl_resetredalarm();
   9cb7a:	4b1c      	ldr	r3, [pc, #112]	; (9cbec <Cl_dprep_controller+0x102c>)
   9cb7c:	4798      	blx	r3
		sv_cntrl_nobuzzer();
   9cb7e:	4b1c      	ldr	r3, [pc, #112]	; (9cbf0 <Cl_dprep_controller+0x1030>)
   9cb80:	4798      	blx	r3
		Cl_Dprep_ResetAlertsforReassertion();
   9cb82:	4b0c      	ldr	r3, [pc, #48]	; (9cbb4 <Cl_dprep_controller+0xff4>)
   9cb84:	4798      	blx	r3
		//sv_cntrl_disable_bypass();
		break;
   9cb86:	e000      	b.n	9cb8a <Cl_dprep_controller+0xfca>
// 				//cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
		}
		
		 
		
		break;
   9cb88:	bf00      	nop
			
		
		}
		}
		
		break;
   9cb8a:	f000 bc9c 	b.w	9d4c6 <Cl_dprep_controller+0x1906>
   9cb8e:	bf00      	nop
   9cb90:	0009f689 	.word	0x0009f689
   9cb94:	00097b3d 	.word	0x00097b3d
   9cb98:	2007283b 	.word	0x2007283b
   9cb9c:	2007212c 	.word	0x2007212c
   9cba0:	000a62b4 	.word	0x000a62b4
   9cba4:	00099729 	.word	0x00099729
   9cba8:	00087cad 	.word	0x00087cad
   9cbac:	20070abc 	.word	0x20070abc
   9cbb0:	000a62bc 	.word	0x000a62bc
   9cbb4:	0009e7b1 	.word	0x0009e7b1
   9cbb8:	0009d7f1 	.word	0x0009d7f1
   9cbbc:	20072f98 	.word	0x20072f98
   9cbc0:	00098239 	.word	0x00098239
   9cbc4:	200727fc 	.word	0x200727fc
   9cbc8:	20072800 	.word	0x20072800
   9cbcc:	0009f9d9 	.word	0x0009f9d9
   9cbd0:	200727f8 	.word	0x200727f8
   9cbd4:	0009df69 	.word	0x0009df69
   9cbd8:	0009f9ed 	.word	0x0009f9ed
   9cbdc:	00082efd 	.word	0x00082efd
   9cbe0:	00097b81 	.word	0x00097b81
   9cbe4:	2007283c 	.word	0x2007283c
   9cbe8:	00097c69 	.word	0x00097c69
   9cbec:	00097c55 	.word	0x00097c55
   9cbf0:	00097c91 	.word	0x00097c91
		case CL_DPREP_STATE_POST_PRIME_STANDBY:
		switch(cl_dprepevent)
   9cbf4:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9cbf8:	3b01      	subs	r3, #1
   9cbfa:	2b19      	cmp	r3, #25
   9cbfc:	f200 813d 	bhi.w	9ce7a <Cl_dprep_controller+0x12ba>
   9cc00:	a201      	add	r2, pc, #4	; (adr r2, 9cc08 <Cl_dprep_controller+0x1048>)
   9cc02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9cc06:	bf00      	nop
   9cc08:	0009cdb7 	.word	0x0009cdb7
   9cc0c:	0009ce7b 	.word	0x0009ce7b
   9cc10:	0009cced 	.word	0x0009cced
   9cc14:	0009cc71 	.word	0x0009cc71
   9cc18:	0009ce7b 	.word	0x0009ce7b
   9cc1c:	0009ce7b 	.word	0x0009ce7b
   9cc20:	0009cd89 	.word	0x0009cd89
   9cc24:	0009ce7b 	.word	0x0009ce7b
   9cc28:	0009ce7b 	.word	0x0009ce7b
   9cc2c:	0009ce7b 	.word	0x0009ce7b
   9cc30:	0009ce7b 	.word	0x0009ce7b
   9cc34:	0009cd4b 	.word	0x0009cd4b
   9cc38:	0009cd61 	.word	0x0009cd61
   9cc3c:	0009ce7b 	.word	0x0009ce7b
   9cc40:	0009ce7b 	.word	0x0009ce7b
   9cc44:	0009ce7b 	.word	0x0009ce7b
   9cc48:	0009ce7b 	.word	0x0009ce7b
   9cc4c:	0009ce7b 	.word	0x0009ce7b
   9cc50:	0009ce7b 	.word	0x0009ce7b
   9cc54:	0009ce7b 	.word	0x0009ce7b
   9cc58:	0009ce7b 	.word	0x0009ce7b
   9cc5c:	0009ce7b 	.word	0x0009ce7b
   9cc60:	0009cdc9 	.word	0x0009cdc9
   9cc64:	0009ce7b 	.word	0x0009ce7b
   9cc68:	0009cd7d 	.word	0x0009cd7d
   9cc6c:	0009cd6f 	.word	0x0009cd6f
					{
						case EVENT_DPREP_COMMAND_GET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   9cc70:	4bab      	ldr	r3, [pc, #684]	; (9cf20 <Cl_dprep_controller+0x1360>)
   9cc72:	7e1b      	ldrb	r3, [r3, #24]
   9cc74:	2b00      	cmp	r3, #0
   9cc76:	f000 8102 	beq.w	9ce7e <Cl_dprep_controller+0x12be>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9cc7a:	4ba9      	ldr	r3, [pc, #676]	; (9cf20 <Cl_dprep_controller+0x1360>)
   9cc7c:	791b      	ldrb	r3, [r3, #4]
   9cc7e:	2b03      	cmp	r3, #3
   9cc80:	d002      	beq.n	9cc88 <Cl_dprep_controller+0x10c8>
   9cc82:	2b04      	cmp	r3, #4
   9cc84:	d015      	beq.n	9ccb2 <Cl_dprep_controller+0x10f2>
									command = CON_TX_COMMAND_SYSDATA;
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
   9cc86:	e030      	b.n	9ccea <Cl_dprep_controller+0x112a>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9cc88:	2316      	movs	r3, #22
   9cc8a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   9cc8e:	2303      	movs	r3, #3
   9cc90:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
									dataarray[1] = 0;									
   9cc94:	2300      	movs	r3, #0
   9cc96:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9cc9a:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9cc9e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9cca2:	2202      	movs	r2, #2
   9cca4:	4618      	mov	r0, r3
   9cca6:	4b9f      	ldr	r3, [pc, #636]	; (9cf24 <Cl_dprep_controller+0x1364>)
   9cca8:	4798      	blx	r3
   9ccaa:	4603      	mov	r3, r0
   9ccac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   9ccb0:	e01b      	b.n	9ccea <Cl_dprep_controller+0x112a>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9ccb2:	2316      	movs	r3, #22
   9ccb4:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9ccb8:	2304      	movs	r3, #4
   9ccba:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9ccbe:	f107 0360 	add.w	r3, r7, #96	; 0x60
   9ccc2:	3301      	adds	r3, #1
   9ccc4:	4619      	mov	r1, r3
   9ccc6:	2004      	movs	r0, #4
   9ccc8:	4b97      	ldr	r3, [pc, #604]	; (9cf28 <Cl_dprep_controller+0x1368>)
   9ccca:	4798      	blx	r3
   9cccc:	4603      	mov	r3, r0
   9ccce:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9ccd2:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9ccd6:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9ccda:	2202      	movs	r2, #2
   9ccdc:	4618      	mov	r0, r3
   9ccde:	4b91      	ldr	r3, [pc, #580]	; (9cf24 <Cl_dprep_controller+0x1364>)
   9cce0:	4798      	blx	r3
   9cce2:	4603      	mov	r3, r0
   9cce4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   9cce8:	bf00      	nop
									default:break;
								}
							}
						break;
   9ccea:	e0c8      	b.n	9ce7e <Cl_dprep_controller+0x12be>
						case EVENT_DPREP_COMMAND_SET_DATA:
								 if(Cl_ConsoleRxMsg.msgready == true)
   9ccec:	4b8c      	ldr	r3, [pc, #560]	; (9cf20 <Cl_dprep_controller+0x1360>)
   9ccee:	7e1b      	ldrb	r3, [r3, #24]
   9ccf0:	2b00      	cmp	r3, #0
   9ccf2:	f000 80c6 	beq.w	9ce82 <Cl_dprep_controller+0x12c2>
								 {
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
   9ccf6:	4b8a      	ldr	r3, [pc, #552]	; (9cf20 <Cl_dprep_controller+0x1360>)
   9ccf8:	791b      	ldrb	r3, [r3, #4]
   9ccfa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9ccfe:	2300      	movs	r3, #0
   9cd00:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
   9cd04:	e011      	b.n	9cd2a <Cl_dprep_controller+0x116a>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   9cd06:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
   9cd0a:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
   9cd0e:	3201      	adds	r2, #1
   9cd10:	4983      	ldr	r1, [pc, #524]	; (9cf20 <Cl_dprep_controller+0x1360>)
   9cd12:	440a      	add	r2, r1
   9cd14:	7912      	ldrb	r2, [r2, #4]
   9cd16:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
   9cd1a:	440b      	add	r3, r1
   9cd1c:	f803 2c78 	strb.w	r2, [r3, #-120]
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9cd20:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
   9cd24:	3301      	adds	r3, #1
   9cd26:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
   9cd2a:	4b7d      	ldr	r3, [pc, #500]	; (9cf20 <Cl_dprep_controller+0x1360>)
   9cd2c:	78db      	ldrb	r3, [r3, #3]
   9cd2e:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
   9cd32:	429a      	cmp	r2, r3
   9cd34:	d3e7      	bcc.n	9cd06 <Cl_dprep_controller+0x1146>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
									 }
									 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   9cd36:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
   9cd3a:	f897 0081 	ldrb.w	r0, [r7, #129]	; 0x81
   9cd3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
   9cd42:	ca06      	ldmia	r2, {r1, r2}
   9cd44:	4c79      	ldr	r4, [pc, #484]	; (9cf2c <Cl_dprep_controller+0x136c>)
   9cd46:	47a0      	blx	r4
						 
						 
						 
								 }
	
						break;
   9cd48:	e09b      	b.n	9ce82 <Cl_dprep_controller+0x12c2>
						case EVENT_DPREP_DILYSER_CONNECTED:
		
						// check for micro switches
						Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_CONNECTED_CONFIRMED,&data,0);
   9cd4a:	f107 0367 	add.w	r3, r7, #103	; 0x67
   9cd4e:	2200      	movs	r2, #0
   9cd50:	4619      	mov	r1, r3
   9cd52:	2025      	movs	r0, #37	; 0x25
   9cd54:	4b73      	ldr	r3, [pc, #460]	; (9cf24 <Cl_dprep_controller+0x1364>)
   9cd56:	4798      	blx	r3
   9cd58:	4603      	mov	r3, r0
   9cd5a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		
						break;
   9cd5e:	e093      	b.n	9ce88 <Cl_dprep_controller+0x12c8>
						case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
   9cd60:	4b73      	ldr	r3, [pc, #460]	; (9cf30 <Cl_dprep_controller+0x1370>)
   9cd62:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9cd64:	4b73      	ldr	r3, [pc, #460]	; (9cf34 <Cl_dprep_controller+0x1374>)
   9cd66:	4798      	blx	r3
								 sv_prop_startmixing();
   9cd68:	4b73      	ldr	r3, [pc, #460]	; (9cf38 <Cl_dprep_controller+0x1378>)
   9cd6a:	4798      	blx	r3
						break;
   9cd6c:	e08c      	b.n	9ce88 <Cl_dprep_controller+0x12c8>
						case EVENT_DPREP_ALERT:
						Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9cd6e:	f107 0327 	add.w	r3, r7, #39	; 0x27
   9cd72:	4619      	mov	r1, r3
   9cd74:	203c      	movs	r0, #60	; 0x3c
   9cd76:	4b71      	ldr	r3, [pc, #452]	; (9cf3c <Cl_dprep_controller+0x137c>)
   9cd78:	4798      	blx	r3
						{
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);		
				
						}

						break;
   9cd7a:	e085      	b.n	9ce88 <Cl_dprep_controller+0x12c8>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9cd7c:	4b70      	ldr	r3, [pc, #448]	; (9cf40 <Cl_dprep_controller+0x1380>)
   9cd7e:	4798      	blx	r3
   9cd80:	4603      	mov	r3, r0
   9cd82:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9cd86:	e07f      	b.n	9ce88 <Cl_dprep_controller+0x12c8>
						case EVENT_DPREP_COMMAND_SET_BLDPUMPRATE:
											if(Cl_ConsoleRxMsg.msgready == true)
   9cd88:	4b65      	ldr	r3, [pc, #404]	; (9cf20 <Cl_dprep_controller+0x1360>)
   9cd8a:	7e1b      	ldrb	r3, [r3, #24]
   9cd8c:	2b00      	cmp	r3, #0
   9cd8e:	d07a      	beq.n	9ce86 <Cl_dprep_controller+0x12c6>
											{
												
												cl_Datastreamtype cl_temp  ;
												cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9cd90:	4b63      	ldr	r3, [pc, #396]	; (9cf20 <Cl_dprep_controller+0x1360>)
   9cd92:	791b      	ldrb	r3, [r3, #4]
   9cd94:	733b      	strb	r3, [r7, #12]
												cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   9cd96:	4b62      	ldr	r3, [pc, #392]	; (9cf20 <Cl_dprep_controller+0x1360>)
   9cd98:	791b      	ldrb	r3, [r3, #4]
   9cd9a:	737b      	strb	r3, [r7, #13]
												cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   9cd9c:	4b60      	ldr	r3, [pc, #384]	; (9cf20 <Cl_dprep_controller+0x1360>)
   9cd9e:	791b      	ldrb	r3, [r3, #4]
   9cda0:	73bb      	strb	r3, [r7, #14]
												cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   9cda2:	4b5f      	ldr	r3, [pc, #380]	; (9cf20 <Cl_dprep_controller+0x1360>)
   9cda4:	791b      	ldrb	r3, [r3, #4]
   9cda6:	73fb      	strb	r3, [r7, #15]
												cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   9cda8:	89bb      	ldrh	r3, [r7, #12]
   9cdaa:	b21b      	sxth	r3, r3
   9cdac:	4619      	mov	r1, r3
   9cdae:	200e      	movs	r0, #14
   9cdb0:	4b64      	ldr	r3, [pc, #400]	; (9cf44 <Cl_dprep_controller+0x1384>)
   9cdb2:	4798      	blx	r3
											}
						break;
   9cdb4:	e067      	b.n	9ce86 <Cl_dprep_controller+0x12c6>
						
						case EVENT_DPREP_CLR_ALARM:
						sv_cntrl_resetyellowalarm();
   9cdb6:	4b64      	ldr	r3, [pc, #400]	; (9cf48 <Cl_dprep_controller+0x1388>)
   9cdb8:	4798      	blx	r3
						sv_cntrl_resetredalarm();
   9cdba:	4b64      	ldr	r3, [pc, #400]	; (9cf4c <Cl_dprep_controller+0x138c>)
   9cdbc:	4798      	blx	r3
						sv_cntrl_nobuzzer();
   9cdbe:	4b64      	ldr	r3, [pc, #400]	; (9cf50 <Cl_dprep_controller+0x1390>)
   9cdc0:	4798      	blx	r3
						Cl_Dprep_ResetAlertsforReassertion();
   9cdc2:	4b64      	ldr	r3, [pc, #400]	; (9cf54 <Cl_dprep_controller+0x1394>)
   9cdc4:	4798      	blx	r3
						//sv_cntrl_disable_bypass();
						break;
   9cdc6:	e05f      	b.n	9ce88 <Cl_dprep_controller+0x12c8>
						case EVENT_DPREP_TICK_500MS:
						//UpdateHeaterControls();
						break;
						case  EVENT_DPREP_TICK_MINUTE:
						{
							float temp1=0;
   9cdc8:	f04f 0300 	mov.w	r3, #0
   9cdcc:	67fb      	str	r3, [r7, #124]	; 0x7c
							Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   9cdce:	f107 0322 	add.w	r3, r7, #34	; 0x22
   9cdd2:	4619      	mov	r1, r3
   9cdd4:	2014      	movs	r0, #20
   9cdd6:	4b60      	ldr	r3, [pc, #384]	; (9cf58 <Cl_dprep_controller+0x1398>)
   9cdd8:	4798      	blx	r3

							uint16_t cal_data  = (402 *100* temp_temp3)/(2*32768);			// resistance of PT100
   9cdda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   9cddc:	461a      	mov	r2, r3
   9cdde:	f649 5308 	movw	r3, #40200	; 0x9d08
   9cde2:	fb03 f302 	mul.w	r3, r3, r2
   9cde6:	2b00      	cmp	r3, #0
   9cde8:	da02      	bge.n	9cdf0 <Cl_dprep_controller+0x1230>
   9cdea:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   9cdee:	33ff      	adds	r3, #255	; 0xff
   9cdf0:	141b      	asrs	r3, r3, #16
   9cdf2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
							res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
   9cdf6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
   9cdfa:	4618      	mov	r0, r3
   9cdfc:	4b57      	ldr	r3, [pc, #348]	; (9cf5c <Cl_dprep_controller+0x139c>)
   9cdfe:	4798      	blx	r3
							temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
   9ce00:	4b57      	ldr	r3, [pc, #348]	; (9cf60 <Cl_dprep_controller+0x13a0>)
   9ce02:	681a      	ldr	r2, [r3, #0]
   9ce04:	4b57      	ldr	r3, [pc, #348]	; (9cf64 <Cl_dprep_controller+0x13a4>)
   9ce06:	4958      	ldr	r1, [pc, #352]	; (9cf68 <Cl_dprep_controller+0x13a8>)
   9ce08:	4610      	mov	r0, r2
   9ce0a:	4798      	blx	r3
   9ce0c:	4603      	mov	r3, r0
   9ce0e:	461a      	mov	r2, r3
   9ce10:	4b56      	ldr	r3, [pc, #344]	; (9cf6c <Cl_dprep_controller+0x13ac>)
   9ce12:	4610      	mov	r0, r2
   9ce14:	4798      	blx	r3
   9ce16:	4603      	mov	r3, r0
   9ce18:	b29b      	uxth	r3, r3
   9ce1a:	847b      	strh	r3, [r7, #34]	; 0x22
							temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
   9ce1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   9ce1e:	461a      	mov	r2, r3
   9ce20:	4b53      	ldr	r3, [pc, #332]	; (9cf70 <Cl_dprep_controller+0x13b0>)
   9ce22:	4610      	mov	r0, r2
   9ce24:	4798      	blx	r3
   9ce26:	4c53      	ldr	r4, [pc, #332]	; (9cf74 <Cl_dprep_controller+0x13b4>)
   9ce28:	a339      	add	r3, pc, #228	; (adr r3, 9cf10 <Cl_dprep_controller+0x1350>)
   9ce2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9ce2e:	47a0      	blx	r4
   9ce30:	4603      	mov	r3, r0
   9ce32:	460c      	mov	r4, r1
   9ce34:	4618      	mov	r0, r3
   9ce36:	4621      	mov	r1, r4
   9ce38:	4c4f      	ldr	r4, [pc, #316]	; (9cf78 <Cl_dprep_controller+0x13b8>)
   9ce3a:	a337      	add	r3, pc, #220	; (adr r3, 9cf18 <Cl_dprep_controller+0x1358>)
   9ce3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   9ce40:	47a0      	blx	r4
   9ce42:	4603      	mov	r3, r0
   9ce44:	460c      	mov	r4, r1
   9ce46:	4619      	mov	r1, r3
   9ce48:	4622      	mov	r2, r4
   9ce4a:	4b4c      	ldr	r3, [pc, #304]	; (9cf7c <Cl_dprep_controller+0x13bc>)
   9ce4c:	4608      	mov	r0, r1
   9ce4e:	4611      	mov	r1, r2
   9ce50:	4798      	blx	r3
   9ce52:	4603      	mov	r3, r0
   9ce54:	b29b      	uxth	r3, r3
   9ce56:	847b      	strh	r3, [r7, #34]	; 0x22
							temp3_cel = temp_temp3;
   9ce58:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   9ce5a:	4b49      	ldr	r3, [pc, #292]	; (9cf80 <Cl_dprep_controller+0x13c0>)
   9ce5c:	4610      	mov	r0, r2
   9ce5e:	4798      	blx	r3
   9ce60:	4603      	mov	r3, r0
   9ce62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
							Cl_Dprep_filling_secondscounter++;
   9ce66:	4b47      	ldr	r3, [pc, #284]	; (9cf84 <Cl_dprep_controller+0x13c4>)
   9ce68:	f9b3 3000 	ldrsh.w	r3, [r3]
   9ce6c:	b29b      	uxth	r3, r3
   9ce6e:	3301      	adds	r3, #1
   9ce70:	b29b      	uxth	r3, r3
   9ce72:	b21a      	sxth	r2, r3
   9ce74:	4b43      	ldr	r3, [pc, #268]	; (9cf84 <Cl_dprep_controller+0x13c4>)
   9ce76:	801a      	strh	r2, [r3, #0]
													}
										
													temp3_cel_backup = temp3_cel;
								}
					#endif
						break;
   9ce78:	e006      	b.n	9ce88 <Cl_dprep_controller+0x12c8>
						default:
						break;
   9ce7a:	bf00      	nop
   9ce7c:	e328      	b.n	9d4d0 <Cl_dprep_controller+0x1910>
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
								}
							}
						break;
   9ce7e:	bf00      	nop
   9ce80:	e326      	b.n	9d4d0 <Cl_dprep_controller+0x1910>
						 
						 
						 
								 }
	
						break;
   9ce82:	bf00      	nop
   9ce84:	e324      	b.n	9d4d0 <Cl_dprep_controller+0x1910>
												cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
												cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
												cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
												cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
											}
						break;
   9ce86:	bf00      	nop
					#endif
						break;
						default:
						break;
					}
		break;
   9ce88:	e322      	b.n	9d4d0 <Cl_dprep_controller+0x1910>

		case CL_DPREP_STATE_DIALISER_PRIME:
					switch(cl_dprepevent)
   9ce8a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9ce8e:	3b01      	subs	r3, #1
   9ce90:	2b19      	cmp	r3, #25
   9ce92:	f200 831a 	bhi.w	9d4ca <Cl_dprep_controller+0x190a>
   9ce96:	a201      	add	r2, pc, #4	; (adr r2, 9ce9c <Cl_dprep_controller+0x12dc>)
   9ce98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9ce9c:	0009d101 	.word	0x0009d101
   9cea0:	0009d4cb 	.word	0x0009d4cb
   9cea4:	0009d4cb 	.word	0x0009d4cb
   9cea8:	0009d4cb 	.word	0x0009d4cb
   9ceac:	0009d4cb 	.word	0x0009d4cb
   9ceb0:	0009d4cb 	.word	0x0009d4cb
   9ceb4:	0009d4cb 	.word	0x0009d4cb
   9ceb8:	0009d4cb 	.word	0x0009d4cb
   9cebc:	0009d4cb 	.word	0x0009d4cb
   9cec0:	0009d4cb 	.word	0x0009d4cb
   9cec4:	0009d4cb 	.word	0x0009d4cb
   9cec8:	0009d4cb 	.word	0x0009d4cb
   9cecc:	0009d4cb 	.word	0x0009d4cb
   9ced0:	0009d0d3 	.word	0x0009d0d3
   9ced4:	0009d4cb 	.word	0x0009d4cb
   9ced8:	0009d4cb 	.word	0x0009d4cb
   9cedc:	0009d4cb 	.word	0x0009d4cb
   9cee0:	0009d4cb 	.word	0x0009d4cb
   9cee4:	0009d117 	.word	0x0009d117
   9cee8:	0009d4cb 	.word	0x0009d4cb
   9ceec:	0009d117 	.word	0x0009d117
   9cef0:	0009cf89 	.word	0x0009cf89
   9cef4:	0009cf05 	.word	0x0009cf05
   9cef8:	0009d4cb 	.word	0x0009d4cb
   9cefc:	0009d0e7 	.word	0x0009d0e7
   9cf00:	0009d0f3 	.word	0x0009d0f3
						break;
						case EVENT_DPREP_TICK_500MS:
					//	UpdateHeaterControls();
						break;
						case EVENT_DPREP_TICK_MINUTE:
							Cl_Dprep_ResetAlertsforReassertion();
   9cf04:	4b13      	ldr	r3, [pc, #76]	; (9cf54 <Cl_dprep_controller+0x1394>)
   9cf06:	4798      	blx	r3
						break;
   9cf08:	e108      	b.n	9d11c <Cl_dprep_controller+0x155c>
   9cf0a:	bf00      	nop
   9cf0c:	f3af 8000 	nop.w
   9cf10:	cccccccd 	.word	0xcccccccd
   9cf14:	4008cccc 	.word	0x4008cccc
   9cf18:	66666666 	.word	0x66666666
   9cf1c:	3ff66666 	.word	0x3ff66666
   9cf20:	20072f98 	.word	0x20072f98
   9cf24:	00099729 	.word	0x00099729
   9cf28:	00098239 	.word	0x00098239
   9cf2c:	0009e945 	.word	0x0009e945
   9cf30:	0009f689 	.word	0x0009f689
   9cf34:	00097b3d 	.word	0x00097b3d
   9cf38:	00097d55 	.word	0x00097d55
   9cf3c:	00083035 	.word	0x00083035
   9cf40:	0009d7f1 	.word	0x0009d7f1
   9cf44:	00087cad 	.word	0x00087cad
   9cf48:	00097c69 	.word	0x00097c69
   9cf4c:	00097c55 	.word	0x00097c55
   9cf50:	00097c91 	.word	0x00097c91
   9cf54:	0009e7b1 	.word	0x0009e7b1
   9cf58:	0008d6b1 	.word	0x0008d6b1
   9cf5c:	0008e8e1 	.word	0x0008e8e1
   9cf60:	20072630 	.word	0x20072630
   9cf64:	000a3f7d 	.word	0x000a3f7d
   9cf68:	42c80000 	.word	0x42c80000
   9cf6c:	000a41ed 	.word	0x000a41ed
   9cf70:	000a34c9 	.word	0x000a34c9
   9cf74:	000a322d 	.word	0x000a322d
   9cf78:	000a3231 	.word	0x000a3231
   9cf7c:	000a3b19 	.word	0x000a3b19
   9cf80:	000a3d65 	.word	0x000a3d65
   9cf84:	2007281a 	.word	0x2007281a
						case EVENT_DPREP_TICK_SECOND:
						//	UpdateHeaterControls();
						{
							float temp1=0;
   9cf88:	f04f 0300 	mov.w	r3, #0
   9cf8c:	677b      	str	r3, [r7, #116]	; 0x74
							Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   9cf8e:	f107 0322 	add.w	r3, r7, #34	; 0x22
   9cf92:	4619      	mov	r1, r3
   9cf94:	2014      	movs	r0, #20
   9cf96:	4b8c      	ldr	r3, [pc, #560]	; (9d1c8 <Cl_dprep_controller+0x1608>)
   9cf98:	4798      	blx	r3
					
						uint16_t cal_data  = (402 *100* temp_temp3)/(2*32768);			// resistance of PT100
   9cf9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   9cf9c:	461a      	mov	r2, r3
   9cf9e:	f649 5308 	movw	r3, #40200	; 0x9d08
   9cfa2:	fb03 f302 	mul.w	r3, r3, r2
   9cfa6:	2b00      	cmp	r3, #0
   9cfa8:	da02      	bge.n	9cfb0 <Cl_dprep_controller+0x13f0>
   9cfaa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   9cfae:	33ff      	adds	r3, #255	; 0xff
   9cfb0:	141b      	asrs	r3, r3, #16
   9cfb2:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
						res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
   9cfb6:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
   9cfba:	4618      	mov	r0, r3
   9cfbc:	4b83      	ldr	r3, [pc, #524]	; (9d1cc <Cl_dprep_controller+0x160c>)
   9cfbe:	4798      	blx	r3
						temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
   9cfc0:	4b83      	ldr	r3, [pc, #524]	; (9d1d0 <Cl_dprep_controller+0x1610>)
   9cfc2:	681a      	ldr	r2, [r3, #0]
   9cfc4:	4b83      	ldr	r3, [pc, #524]	; (9d1d4 <Cl_dprep_controller+0x1614>)
   9cfc6:	4984      	ldr	r1, [pc, #528]	; (9d1d8 <Cl_dprep_controller+0x1618>)
   9cfc8:	4610      	mov	r0, r2
   9cfca:	4798      	blx	r3
   9cfcc:	4603      	mov	r3, r0
   9cfce:	461a      	mov	r2, r3
   9cfd0:	4b82      	ldr	r3, [pc, #520]	; (9d1dc <Cl_dprep_controller+0x161c>)
   9cfd2:	4610      	mov	r0, r2
   9cfd4:	4798      	blx	r3
   9cfd6:	4603      	mov	r3, r0
   9cfd8:	b29b      	uxth	r3, r3
   9cfda:	847b      	strh	r3, [r7, #34]	; 0x22
						temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
   9cfdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   9cfde:	461a      	mov	r2, r3
   9cfe0:	4b7f      	ldr	r3, [pc, #508]	; (9d1e0 <Cl_dprep_controller+0x1620>)
   9cfe2:	4610      	mov	r0, r2
   9cfe4:	4798      	blx	r3
   9cfe6:	4c7f      	ldr	r4, [pc, #508]	; (9d1e4 <Cl_dprep_controller+0x1624>)
   9cfe8:	a373      	add	r3, pc, #460	; (adr r3, 9d1b8 <Cl_dprep_controller+0x15f8>)
   9cfea:	e9d3 2300 	ldrd	r2, r3, [r3]
   9cfee:	47a0      	blx	r4
   9cff0:	4603      	mov	r3, r0
   9cff2:	460c      	mov	r4, r1
   9cff4:	4618      	mov	r0, r3
   9cff6:	4621      	mov	r1, r4
   9cff8:	4c7b      	ldr	r4, [pc, #492]	; (9d1e8 <Cl_dprep_controller+0x1628>)
   9cffa:	a371      	add	r3, pc, #452	; (adr r3, 9d1c0 <Cl_dprep_controller+0x1600>)
   9cffc:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d000:	47a0      	blx	r4
   9d002:	4603      	mov	r3, r0
   9d004:	460c      	mov	r4, r1
   9d006:	4619      	mov	r1, r3
   9d008:	4622      	mov	r2, r4
   9d00a:	4b78      	ldr	r3, [pc, #480]	; (9d1ec <Cl_dprep_controller+0x162c>)
   9d00c:	4608      	mov	r0, r1
   9d00e:	4611      	mov	r1, r2
   9d010:	4798      	blx	r3
   9d012:	4603      	mov	r3, r0
   9d014:	b29b      	uxth	r3, r3
   9d016:	847b      	strh	r3, [r7, #34]	; 0x22
						temp3_cel = temp_temp3;
   9d018:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   9d01a:	4b75      	ldr	r3, [pc, #468]	; (9d1f0 <Cl_dprep_controller+0x1630>)
   9d01c:	4610      	mov	r0, r2
   9d01e:	4798      	blx	r3
   9d020:	4603      	mov	r3, r0
   9d022:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
						
							Cl_Dprep_filling_secondscounter++;
   9d026:	4b73      	ldr	r3, [pc, #460]	; (9d1f4 <Cl_dprep_controller+0x1634>)
   9d028:	f9b3 3000 	ldrsh.w	r3, [r3]
   9d02c:	b29b      	uxth	r3, r3
   9d02e:	3301      	adds	r3, #1
   9d030:	b29b      	uxth	r3, r3
   9d032:	b21a      	sxth	r2, r3
   9d034:	4b6f      	ldr	r3, [pc, #444]	; (9d1f4 <Cl_dprep_controller+0x1634>)
   9d036:	801a      	strh	r2, [r3, #0]
										temp3_cel_backup = temp3_cel;
					}
					
					#endif

							Cl_Dprep_DialyserPrime_secondscounter++;
   9d038:	4b6f      	ldr	r3, [pc, #444]	; (9d1f8 <Cl_dprep_controller+0x1638>)
   9d03a:	f9b3 3000 	ldrsh.w	r3, [r3]
   9d03e:	b29b      	uxth	r3, r3
   9d040:	3301      	adds	r3, #1
   9d042:	b29b      	uxth	r3, r3
   9d044:	b21a      	sxth	r2, r3
   9d046:	4b6c      	ldr	r3, [pc, #432]	; (9d1f8 <Cl_dprep_controller+0x1638>)
   9d048:	801a      	strh	r2, [r3, #0]
							
							
							if(Cl_Dprep_DialyserPrime_secondscounter == 30){ // activate flow alarms only after 30 seconds into rinse
   9d04a:	4b6b      	ldr	r3, [pc, #428]	; (9d1f8 <Cl_dprep_controller+0x1638>)
   9d04c:	f9b3 3000 	ldrsh.w	r3, [r3]
   9d050:	2b1e      	cmp	r3, #30
   9d052:	d114      	bne.n	9d07e <Cl_dprep_controller+0x14be>
								
								
								Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   9d054:	2101      	movs	r1, #1
   9d056:	200c      	movs	r0, #12
   9d058:	4b68      	ldr	r3, [pc, #416]	; (9d1fc <Cl_dprep_controller+0x163c>)
   9d05a:	4798      	blx	r3
   9d05c:	4603      	mov	r3, r0
   9d05e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
								Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   9d062:	2101      	movs	r1, #1
   9d064:	200d      	movs	r0, #13
   9d066:	4b65      	ldr	r3, [pc, #404]	; (9d1fc <Cl_dprep_controller+0x163c>)
   9d068:	4798      	blx	r3
   9d06a:	4603      	mov	r3, r0
   9d06c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
								Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   9d070:	2101      	movs	r1, #1
   9d072:	200e      	movs	r0, #14
   9d074:	4b61      	ldr	r3, [pc, #388]	; (9d1fc <Cl_dprep_controller+0x163c>)
   9d076:	4798      	blx	r3
   9d078:	4603      	mov	r3, r0
   9d07a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
								
								
							}
							
							if(Cl_Dprep_DialyserPrime_secondscounter == 60)
   9d07e:	4b5e      	ldr	r3, [pc, #376]	; (9d1f8 <Cl_dprep_controller+0x1638>)
   9d080:	f9b3 3000 	ldrsh.w	r3, [r3]
   9d084:	2b3c      	cmp	r3, #60	; 0x3c
   9d086:	d101      	bne.n	9d08c <Cl_dprep_controller+0x14cc>
							{
								UpdateDprepDialyserPrimeMinuteTick();
   9d088:	4b5d      	ldr	r3, [pc, #372]	; (9d200 <Cl_dprep_controller+0x1640>)
   9d08a:	4798      	blx	r3
							
							}
							Cl_Dprep_SendPrepStateData(DIALYSER_PRIME_DATA);
   9d08c:	2003      	movs	r0, #3
   9d08e:	4b5d      	ldr	r3, [pc, #372]	; (9d204 <Cl_dprep_controller+0x1644>)
   9d090:	4798      	blx	r3
						//	Cl_dprepretcode = Cl_Dprep_ProcessAlarms();

					// check for sub state time out and transition
					

							if( Cl_Dprep_DialyserPrime_Minutescounter >= CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN)
   9d092:	4b5d      	ldr	r3, [pc, #372]	; (9d208 <Cl_dprep_controller+0x1648>)
   9d094:	f9b3 3000 	ldrsh.w	r3, [r3]
   9d098:	2b00      	cmp	r3, #0
   9d09a:	dd3e      	ble.n	9d11a <Cl_dprep_controller+0x155a>
							{
								Cl_Dprep_DialyserPrime_Minutescounter = 0;
   9d09c:	4b5a      	ldr	r3, [pc, #360]	; (9d208 <Cl_dprep_controller+0x1648>)
   9d09e:	2200      	movs	r2, #0
   9d0a0:	801a      	strh	r2, [r3, #0]
							//	sv_cntrl_deactivatepump(BLOODPUMP);
							//	cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_STOP,0);
								cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING, 1); //1 == STOPPED BECAUSE COMPLTED
   9d0a2:	2101      	movs	r1, #1
   9d0a4:	2009      	movs	r0, #9
   9d0a6:	4b59      	ldr	r3, [pc, #356]	; (9d20c <Cl_dprep_controller+0x164c>)
   9d0a8:	4798      	blx	r3
							//	Cl_dprepretcode = sv_cntrl_poweroffheater();
							//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
							//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
								//sv_cntrl_enable_loopback();
								 //sv_prop_stopmixing();
								 Cl_Uint32Type temp = Treatdata[ID_dflow];
   9d0aa:	4b59      	ldr	r3, [pc, #356]	; (9d210 <Cl_dprep_controller+0x1650>)
   9d0ac:	695b      	ldr	r3, [r3, #20]
   9d0ae:	66fb      	str	r3, [r7, #108]	; 0x6c
								 Cl_Uint16Type potvalue=0;
   9d0b0:	2300      	movs	r3, #0
   9d0b2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
// 									 break;
// 									 
// 									 default:
// 									 break;
// 								 }
								sv_cntrl_enable_bypass();
   9d0b6:	4b57      	ldr	r3, [pc, #348]	; (9d214 <Cl_dprep_controller+0x1654>)
   9d0b8:	4798      	blx	r3
								Cl_dprepretcode =  	cl_dprep_notifydacandgotodpreptandby();	
   9d0ba:	4b57      	ldr	r3, [pc, #348]	; (9d218 <Cl_dprep_controller+0x1658>)
   9d0bc:	4798      	blx	r3
   9d0be:	4603      	mov	r3, r0
   9d0c0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
								cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9d0c4:	4b55      	ldr	r3, [pc, #340]	; (9d21c <Cl_dprep_controller+0x165c>)
   9d0c6:	2201      	movs	r2, #1
   9d0c8:	701a      	strb	r2, [r3, #0]
								cl_dprepstate = CL_DPREP_STATE_POST_DPREP_STANDBY;	
   9d0ca:	4b55      	ldr	r3, [pc, #340]	; (9d220 <Cl_dprep_controller+0x1660>)
   9d0cc:	2208      	movs	r2, #8
   9d0ce:	701a      	strb	r2, [r3, #0]
							}
						break;
   9d0d0:	e023      	b.n	9d11a <Cl_dprep_controller+0x155a>
						case EVENT_DPREP_STOP_DIALYSER_PRIME:
						//Cl_Stop_Dialyzer_Prime();
						Cl_dprep_StopMixing();
   9d0d2:	4b54      	ldr	r3, [pc, #336]	; (9d224 <Cl_dprep_controller+0x1664>)
   9d0d4:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
   9d0d6:	2100      	movs	r1, #0
   9d0d8:	2009      	movs	r0, #9
   9d0da:	4b4c      	ldr	r3, [pc, #304]	; (9d20c <Cl_dprep_controller+0x164c>)
   9d0dc:	4798      	blx	r3
						cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
   9d0de:	4b50      	ldr	r3, [pc, #320]	; (9d220 <Cl_dprep_controller+0x1660>)
   9d0e0:	2207      	movs	r2, #7
   9d0e2:	701a      	strb	r2, [r3, #0]
						break;
   9d0e4:	e01a      	b.n	9d11c <Cl_dprep_controller+0x155c>
						break;
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9d0e6:	4b50      	ldr	r3, [pc, #320]	; (9d228 <Cl_dprep_controller+0x1668>)
   9d0e8:	4798      	blx	r3
   9d0ea:	4603      	mov	r3, r0
   9d0ec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9d0f0:	e014      	b.n	9d11c <Cl_dprep_controller+0x155c>
						case EVENT_DPREP_ALERT:
						Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9d0f2:	f107 0327 	add.w	r3, r7, #39	; 0x27
   9d0f6:	4619      	mov	r1, r3
   9d0f8:	203c      	movs	r0, #60	; 0x3c
   9d0fa:	4b4c      	ldr	r3, [pc, #304]	; (9d22c <Cl_dprep_controller+0x166c>)
   9d0fc:	4798      	blx	r3
						if(alarmstatus1)
						{
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
						}

						break;
   9d0fe:	e00d      	b.n	9d11c <Cl_dprep_controller+0x155c>
						
						case EVENT_DPREP_CLR_ALARM:
						sv_cntrl_resetyellowalarm();
   9d100:	4b4b      	ldr	r3, [pc, #300]	; (9d230 <Cl_dprep_controller+0x1670>)
   9d102:	4798      	blx	r3
						sv_cntrl_resetredalarm();
   9d104:	4b4b      	ldr	r3, [pc, #300]	; (9d234 <Cl_dprep_controller+0x1674>)
   9d106:	4798      	blx	r3
						sv_cntrl_nobuzzer();
   9d108:	4b4b      	ldr	r3, [pc, #300]	; (9d238 <Cl_dprep_controller+0x1678>)
   9d10a:	4798      	blx	r3
						Cl_Dprep_ResetAlertsforReassertion();
   9d10c:	4b4b      	ldr	r3, [pc, #300]	; (9d23c <Cl_dprep_controller+0x167c>)
   9d10e:	4798      	blx	r3
						sv_cntrl_disable_bypass();
   9d110:	4b4b      	ldr	r3, [pc, #300]	; (9d240 <Cl_dprep_controller+0x1680>)
   9d112:	4798      	blx	r3
						break;
   9d114:	e002      	b.n	9d11c <Cl_dprep_controller+0x155c>
					switch(cl_dprepevent)
					{
						
						case EVENT_DPREP_TICK_50MS:
									
						break;
   9d116:	bf00      	nop
   9d118:	e1d7      	b.n	9d4ca <Cl_dprep_controller+0x190a>
								sv_cntrl_enable_bypass();
								Cl_dprepretcode =  	cl_dprep_notifydacandgotodpreptandby();	
								cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
								cl_dprepstate = CL_DPREP_STATE_POST_DPREP_STANDBY;	
							}
						break;
   9d11a:	bf00      	nop
						Cl_Dprep_ResetAlertsforReassertion();
						sv_cntrl_disable_bypass();
						break;
						
					}
		break;
   9d11c:	e1d5      	b.n	9d4ca <Cl_dprep_controller+0x190a>
		case CL_DPREP_STATE_DIALISER_PRIME_STOPPED:
						switch(cl_dprepevent)
   9d11e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9d122:	2b0d      	cmp	r3, #13
   9d124:	d000      	beq.n	9d128 <Cl_dprep_controller+0x1568>
								case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
								sv_cntrl_disable_loopback();
								sv_prop_startmixing();
								 break;
								 default:break;
   9d126:	e006      	b.n	9d136 <Cl_dprep_controller+0x1576>
		case CL_DPREP_STATE_DIALISER_PRIME_STOPPED:
						switch(cl_dprepevent)
							{
		
								case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
   9d128:	4b46      	ldr	r3, [pc, #280]	; (9d244 <Cl_dprep_controller+0x1684>)
   9d12a:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9d12c:	4b46      	ldr	r3, [pc, #280]	; (9d248 <Cl_dprep_controller+0x1688>)
   9d12e:	4798      	blx	r3
								sv_prop_startmixing();
   9d130:	4b46      	ldr	r3, [pc, #280]	; (9d24c <Cl_dprep_controller+0x168c>)
   9d132:	4798      	blx	r3
								 break;
   9d134:	bf00      	nop
								 default:break;
							}
		break;
   9d136:	e1cb      	b.n	9d4d0 <Cl_dprep_controller+0x1910>
		case CL_DPREP_STATE_POST_DPREP_STANDBY:
		
			switch(cl_dprepevent)
   9d138:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9d13c:	3b16      	subs	r3, #22
   9d13e:	2b06      	cmp	r3, #6
   9d140:	f200 81c5 	bhi.w	9d4ce <Cl_dprep_controller+0x190e>
   9d144:	a201      	add	r2, pc, #4	; (adr r2, 9d14c <Cl_dprep_controller+0x158c>)
   9d146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9d14a:	bf00      	nop
   9d14c:	0009d25d 	.word	0x0009d25d
   9d150:	0009d1b1 	.word	0x0009d1b1
   9d154:	0009d4cf 	.word	0x0009d4cf
   9d158:	0009d177 	.word	0x0009d177
   9d15c:	0009d169 	.word	0x0009d169
   9d160:	0009d193 	.word	0x0009d193
   9d164:	0009d183 	.word	0x0009d183
			{
				case EVENT_DPREP_ALERT:
				Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9d168:	f107 0327 	add.w	r3, r7, #39	; 0x27
   9d16c:	4619      	mov	r1, r3
   9d16e:	203c      	movs	r0, #60	; 0x3c
   9d170:	4b2e      	ldr	r3, [pc, #184]	; (9d22c <Cl_dprep_controller+0x166c>)
   9d172:	4798      	blx	r3
				if(alarmstatus1)
				{
				//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
				}

				break;
   9d174:	e0d6      	b.n	9d324 <Cl_dprep_controller+0x1764>
				case EVENT_DPREP_ALARM:
				Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9d176:	4b2c      	ldr	r3, [pc, #176]	; (9d228 <Cl_dprep_controller+0x1668>)
   9d178:	4798      	blx	r3
   9d17a:	4603      	mov	r3, r0
   9d17c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				break;
   9d180:	e0d0      	b.n	9d324 <Cl_dprep_controller+0x1764>
				case EVENT_DPREP_PATIENT_READY:
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   9d182:	2100      	movs	r1, #0
   9d184:	2004      	movs	r0, #4
   9d186:	4b32      	ldr	r3, [pc, #200]	; (9d250 <Cl_dprep_controller+0x1690>)
   9d188:	4798      	blx	r3
				Cl_PatientState = CL_DPREP_PATIENT_STATE_WAITING_FOR_BD;
   9d18a:	4b32      	ldr	r3, [pc, #200]	; (9d254 <Cl_dprep_controller+0x1694>)
   9d18c:	2201      	movs	r2, #1
   9d18e:	701a      	strb	r2, [r3, #0]
				break;
   9d190:	e0c8      	b.n	9d324 <Cl_dprep_controller+0x1764>
				case EVENT_DPREP_PATIENT_CONNECTED:
				if(Cl_PatientState == CL_DPREP_PATIENT_STATE_BLOOD_DETECTED )
   9d192:	4b30      	ldr	r3, [pc, #192]	; (9d254 <Cl_dprep_controller+0x1694>)
   9d194:	781b      	ldrb	r3, [r3, #0]
   9d196:	2b02      	cmp	r3, #2
   9d198:	f040 80c1 	bne.w	9d31e <Cl_dprep_controller+0x175e>
				{
					Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
   9d19c:	204c      	movs	r0, #76	; 0x4c
   9d19e:	4b2e      	ldr	r3, [pc, #184]	; (9d258 <Cl_dprep_controller+0x1698>)
   9d1a0:	4798      	blx	r3
   9d1a2:	4603      	mov	r3, r0
   9d1a4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
   9d1a8:	4b1d      	ldr	r3, [pc, #116]	; (9d220 <Cl_dprep_controller+0x1660>)
   9d1aa:	2209      	movs	r2, #9
   9d1ac:	701a      	strb	r2, [r3, #0]
				}
				
				break;
   9d1ae:	e0b6      	b.n	9d31e <Cl_dprep_controller+0x175e>

				case EVENT_DPREP_TICK_MINUTE:
					Cl_Dprep_ResetAlertsforReassertion();
   9d1b0:	4b22      	ldr	r3, [pc, #136]	; (9d23c <Cl_dprep_controller+0x167c>)
   9d1b2:	4798      	blx	r3
				break;
   9d1b4:	e0b6      	b.n	9d324 <Cl_dprep_controller+0x1764>
   9d1b6:	bf00      	nop
   9d1b8:	cccccccd 	.word	0xcccccccd
   9d1bc:	4008cccc 	.word	0x4008cccc
   9d1c0:	66666666 	.word	0x66666666
   9d1c4:	3ff66666 	.word	0x3ff66666
   9d1c8:	0008d6b1 	.word	0x0008d6b1
   9d1cc:	0008e8e1 	.word	0x0008e8e1
   9d1d0:	20072630 	.word	0x20072630
   9d1d4:	000a3f7d 	.word	0x000a3f7d
   9d1d8:	42c80000 	.word	0x42c80000
   9d1dc:	000a41ed 	.word	0x000a41ed
   9d1e0:	000a34c9 	.word	0x000a34c9
   9d1e4:	000a322d 	.word	0x000a322d
   9d1e8:	000a3231 	.word	0x000a3231
   9d1ec:	000a3b19 	.word	0x000a3b19
   9d1f0:	000a3d65 	.word	0x000a3d65
   9d1f4:	2007281a 	.word	0x2007281a
   9d1f8:	20072826 	.word	0x20072826
   9d1fc:	00082efd 	.word	0x00082efd
   9d200:	0009df0d 	.word	0x0009df0d
   9d204:	0009df69 	.word	0x0009df69
   9d208:	20072828 	.word	0x20072828
   9d20c:	00087cad 	.word	0x00087cad
   9d210:	200731a4 	.word	0x200731a4
   9d214:	00097b59 	.word	0x00097b59
   9d218:	0009d76d 	.word	0x0009d76d
   9d21c:	2007283c 	.word	0x2007283c
   9d220:	2007283b 	.word	0x2007283b
   9d224:	0009fa1d 	.word	0x0009fa1d
   9d228:	0009d7f1 	.word	0x0009d7f1
   9d22c:	00083035 	.word	0x00083035
   9d230:	00097c69 	.word	0x00097c69
   9d234:	00097c55 	.word	0x00097c55
   9d238:	00097c91 	.word	0x00097c91
   9d23c:	0009e7b1 	.word	0x0009e7b1
   9d240:	00097b81 	.word	0x00097b81
   9d244:	0009f689 	.word	0x0009f689
   9d248:	00097b3d 	.word	0x00097b3d
   9d24c:	00097d55 	.word	0x00097d55
   9d250:	00091eb5 	.word	0x00091eb5
   9d254:	2007283a 	.word	0x2007283a
   9d258:	0008a611 	.word	0x0008a611
				case EVENT_DPREP_TICK_SECOND:
				
				
					if(Cl_PatientState == CL_DPREP_PATIENT_STATE_WAITING_FOR_BD )
   9d25c:	4b9f      	ldr	r3, [pc, #636]	; (9d4dc <Cl_dprep_controller+0x191c>)
   9d25e:	781b      	ldrb	r3, [r3, #0]
   9d260:	2b01      	cmp	r3, #1
   9d262:	d13d      	bne.n	9d2e0 <Cl_dprep_controller+0x1720>
					{
						Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   9d264:	f107 0320 	add.w	r3, r7, #32
   9d268:	4619      	mov	r1, r3
   9d26a:	200a      	movs	r0, #10
   9d26c:	4b9c      	ldr	r3, [pc, #624]	; (9d4e0 <Cl_dprep_controller+0x1920>)
   9d26e:	4798      	blx	r3
				
					if(temp == 1)
   9d270:	8c3b      	ldrh	r3, [r7, #32]
   9d272:	2b01      	cmp	r3, #1
   9d274:	d134      	bne.n	9d2e0 <Cl_dprep_controller+0x1720>
					{
					Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
   9d276:	2205      	movs	r2, #5
   9d278:	499a      	ldr	r1, [pc, #616]	; (9d4e4 <Cl_dprep_controller+0x1924>)
   9d27a:	2018      	movs	r0, #24
   9d27c:	4b9a      	ldr	r3, [pc, #616]	; (9d4e8 <Cl_dprep_controller+0x1928>)
   9d27e:	4798      	blx	r3
					//	Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_READY_FOR_DIALYSIS,NULL,0);
					//	cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
									Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_BLOOD_DETECTED,NULL,0);
   9d280:	2200      	movs	r2, #0
   9d282:	2100      	movs	r1, #0
   9d284:	2027      	movs	r0, #39	; 0x27
   9d286:	4b98      	ldr	r3, [pc, #608]	; (9d4e8 <Cl_dprep_controller+0x1928>)
   9d288:	4798      	blx	r3
   9d28a:	4603      	mov	r3, r0
   9d28c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_PatientState = CL_DPREP_PATIENT_STATE_BLOOD_DETECTED;
   9d290:	4b92      	ldr	r3, [pc, #584]	; (9d4dc <Cl_dprep_controller+0x191c>)
   9d292:	2202      	movs	r2, #2
   9d294:	701a      	strb	r2, [r3, #0]
									
							
										Cl_Uint32Type temp = Treatdata[ID_bolusvol];
   9d296:	4b95      	ldr	r3, [pc, #596]	; (9d4ec <Cl_dprep_controller+0x192c>)
   9d298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   9d29a:	60bb      	str	r3, [r7, #8]
										hep_calibration(temp);
   9d29c:	68bb      	ldr	r3, [r7, #8]
   9d29e:	4618      	mov	r0, r3
   9d2a0:	4b93      	ldr	r3, [pc, #588]	; (9d4f0 <Cl_dprep_controller+0x1930>)
   9d2a2:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9d2a4:	f107 0308 	add.w	r3, r7, #8
   9d2a8:	2202      	movs	r2, #2
   9d2aa:	4619      	mov	r1, r3
   9d2ac:	2019      	movs	r0, #25
   9d2ae:	4b8e      	ldr	r3, [pc, #568]	; (9d4e8 <Cl_dprep_controller+0x1928>)
   9d2b0:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_speed,2);
   9d2b2:	2202      	movs	r2, #2
   9d2b4:	498f      	ldr	r1, [pc, #572]	; (9d4f4 <Cl_dprep_controller+0x1934>)
   9d2b6:	2019      	movs	r0, #25
   9d2b8:	4b8b      	ldr	r3, [pc, #556]	; (9d4e8 <Cl_dprep_controller+0x1928>)
   9d2ba:	4798      	blx	r3
										cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   9d2bc:	4b8d      	ldr	r3, [pc, #564]	; (9d4f4 <Cl_dprep_controller+0x1934>)
   9d2be:	681b      	ldr	r3, [r3, #0]
   9d2c0:	4619      	mov	r1, r3
   9d2c2:	2006      	movs	r0, #6
   9d2c4:	4b8c      	ldr	r3, [pc, #560]	; (9d4f8 <Cl_dprep_controller+0x1938>)
   9d2c6:	4798      	blx	r3
										cl_wait(100);
   9d2c8:	2064      	movs	r0, #100	; 0x64
   9d2ca:	4b8c      	ldr	r3, [pc, #560]	; (9d4fc <Cl_dprep_controller+0x193c>)
   9d2cc:	4798      	blx	r3
										cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   9d2ce:	2100      	movs	r1, #0
   9d2d0:	200a      	movs	r0, #10
   9d2d2:	4b89      	ldr	r3, [pc, #548]	; (9d4f8 <Cl_dprep_controller+0x1938>)
   9d2d4:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HEPARIN",7);
   9d2d6:	2207      	movs	r2, #7
   9d2d8:	4989      	ldr	r1, [pc, #548]	; (9d500 <Cl_dprep_controller+0x1940>)
   9d2da:	2018      	movs	r0, #24
   9d2dc:	4b82      	ldr	r3, [pc, #520]	; (9d4e8 <Cl_dprep_controller+0x1928>)
   9d2de:	4798      	blx	r3
										
									
					}
				
					}
					if(Cl_PatientState == CL_DPREP_PATIENT_STATE_BLOOD_DETECTED )
   9d2e0:	4b7e      	ldr	r3, [pc, #504]	; (9d4dc <Cl_dprep_controller+0x191c>)
   9d2e2:	781b      	ldrb	r3, [r3, #0]
   9d2e4:	2b02      	cmp	r3, #2
   9d2e6:	d11c      	bne.n	9d322 <Cl_dprep_controller+0x1762>
					{
					Cl_Dprep_hepbolus_secondscounter++;
   9d2e8:	4b86      	ldr	r3, [pc, #536]	; (9d504 <Cl_dprep_controller+0x1944>)
   9d2ea:	f9b3 3000 	ldrsh.w	r3, [r3]
   9d2ee:	b29b      	uxth	r3, r3
   9d2f0:	3301      	adds	r3, #1
   9d2f2:	b29b      	uxth	r3, r3
   9d2f4:	b21a      	sxth	r2, r3
   9d2f6:	4b83      	ldr	r3, [pc, #524]	; (9d504 <Cl_dprep_controller+0x1944>)
   9d2f8:	801a      	strh	r2, [r3, #0]
					if (Cl_Dprep_hepbolus_secondscounter == 60)
   9d2fa:	4b82      	ldr	r3, [pc, #520]	; (9d504 <Cl_dprep_controller+0x1944>)
   9d2fc:	f9b3 3000 	ldrsh.w	r3, [r3]
   9d300:	2b3c      	cmp	r3, #60	; 0x3c
   9d302:	d10e      	bne.n	9d322 <Cl_dprep_controller+0x1762>
					{
						Cl_Dprep_hepbolus_secondscounter = 0;
   9d304:	4b7f      	ldr	r3, [pc, #508]	; (9d504 <Cl_dprep_controller+0x1944>)
   9d306:	2200      	movs	r2, #0
   9d308:	801a      	strh	r2, [r3, #0]
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DONE_HP",7);
   9d30a:	2207      	movs	r2, #7
   9d30c:	497e      	ldr	r1, [pc, #504]	; (9d508 <Cl_dprep_controller+0x1948>)
   9d30e:	2018      	movs	r0, #24
   9d310:	4b75      	ldr	r3, [pc, #468]	; (9d4e8 <Cl_dprep_controller+0x1928>)
   9d312:	4798      	blx	r3
						cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   9d314:	2100      	movs	r1, #0
   9d316:	2009      	movs	r0, #9
   9d318:	4b77      	ldr	r3, [pc, #476]	; (9d4f8 <Cl_dprep_controller+0x1938>)
   9d31a:	4798      	blx	r3
					}
					}
				break;
   9d31c:	e001      	b.n	9d322 <Cl_dprep_controller+0x1762>
				{
					Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
					cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
				}
				
				break;
   9d31e:	bf00      	nop
   9d320:	e0d5      	b.n	9d4ce <Cl_dprep_controller+0x190e>
						Cl_Dprep_hepbolus_secondscounter = 0;
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DONE_HP",7);
						cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
					}
					}
				break;
   9d322:	bf00      	nop
			}
		
		break;
   9d324:	e0d3      	b.n	9d4ce <Cl_dprep_controller+0x190e>
		case CL_DPREP_STATE_READY_FOR_DALYSIS:
				switch(cl_dprepevent)
   9d326:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9d32a:	3b03      	subs	r3, #3
   9d32c:	2b17      	cmp	r3, #23
   9d32e:	f200 80c0 	bhi.w	9d4b2 <Cl_dprep_controller+0x18f2>
   9d332:	a201      	add	r2, pc, #4	; (adr r2, 9d338 <Cl_dprep_controller+0x1778>)
   9d334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9d338:	0009d44b 	.word	0x0009d44b
   9d33c:	0009d3d1 	.word	0x0009d3d1
   9d340:	0009d4b3 	.word	0x0009d4b3
   9d344:	0009d4b3 	.word	0x0009d4b3
   9d348:	0009d4b3 	.word	0x0009d4b3
   9d34c:	0009d4b3 	.word	0x0009d4b3
   9d350:	0009d4b3 	.word	0x0009d4b3
   9d354:	0009d4b3 	.word	0x0009d4b3
   9d358:	0009d4b3 	.word	0x0009d4b3
   9d35c:	0009d4b3 	.word	0x0009d4b3
   9d360:	0009d4b3 	.word	0x0009d4b3
   9d364:	0009d4b3 	.word	0x0009d4b3
   9d368:	0009d4b3 	.word	0x0009d4b3
   9d36c:	0009d4b3 	.word	0x0009d4b3
   9d370:	0009d4b3 	.word	0x0009d4b3
   9d374:	0009d4b3 	.word	0x0009d4b3
   9d378:	0009d4b3 	.word	0x0009d4b3
   9d37c:	0009d4b3 	.word	0x0009d4b3
   9d380:	0009d4b3 	.word	0x0009d4b3
   9d384:	0009d3ad 	.word	0x0009d3ad
   9d388:	0009d3a7 	.word	0x0009d3a7
   9d38c:	0009d4b3 	.word	0x0009d4b3
   9d390:	0009d4a7 	.word	0x0009d4a7
   9d394:	0009d399 	.word	0x0009d399
				{
					
					case EVENT_DPREP_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9d398:	f107 0327 	add.w	r3, r7, #39	; 0x27
   9d39c:	4619      	mov	r1, r3
   9d39e:	203c      	movs	r0, #60	; 0x3c
   9d3a0:	4b5a      	ldr	r3, [pc, #360]	; (9d50c <Cl_dprep_controller+0x194c>)
   9d3a2:	4798      	blx	r3
					if(alarmstatus1)
					{
					//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
					}

					break;
   9d3a4:	e08c      	b.n	9d4c0 <Cl_dprep_controller+0x1900>
					case EVENT_DPREP_TICK_MINUTE:
						Cl_Dprep_ResetAlertsforReassertion();
   9d3a6:	4b5a      	ldr	r3, [pc, #360]	; (9d510 <Cl_dprep_controller+0x1950>)
   9d3a8:	4798      	blx	r3
					break;
   9d3aa:	e089      	b.n	9d4c0 <Cl_dprep_controller+0x1900>
					case EVENT_DPREP_TICK_SECOND:
									
					Cl_Dprep_SendPrepStateData(DIALYSIS_PREP_DATA);
   9d3ac:	2004      	movs	r0, #4
   9d3ae:	4b59      	ldr	r3, [pc, #356]	; (9d514 <Cl_dprep_controller+0x1954>)
   9d3b0:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   9d3b2:	f107 0320 	add.w	r3, r7, #32
   9d3b6:	4619      	mov	r1, r3
   9d3b8:	200a      	movs	r0, #10
   9d3ba:	4b49      	ldr	r3, [pc, #292]	; (9d4e0 <Cl_dprep_controller+0x1920>)
   9d3bc:	4798      	blx	r3
					if( temp == 0)
   9d3be:	8c3b      	ldrh	r3, [r7, #32]
   9d3c0:	2b00      	cmp	r3, #0
   9d3c2:	d178      	bne.n	9d4b6 <Cl_dprep_controller+0x18f6>
					{
						
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
   9d3c4:	2205      	movs	r2, #5
   9d3c6:	4947      	ldr	r1, [pc, #284]	; (9d4e4 <Cl_dprep_controller+0x1924>)
   9d3c8:	2018      	movs	r0, #24
   9d3ca:	4b47      	ldr	r3, [pc, #284]	; (9d4e8 <Cl_dprep_controller+0x1928>)
   9d3cc:	4798      	blx	r3
					}
					break;
   9d3ce:	e072      	b.n	9d4b6 <Cl_dprep_controller+0x18f6>
					case 	EVENT_DPREP_COMMAND_GET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   9d3d0:	4b51      	ldr	r3, [pc, #324]	; (9d518 <Cl_dprep_controller+0x1958>)
   9d3d2:	7e1b      	ldrb	r3, [r3, #24]
   9d3d4:	2b00      	cmp	r3, #0
   9d3d6:	d070      	beq.n	9d4ba <Cl_dprep_controller+0x18fa>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9d3d8:	4b4f      	ldr	r3, [pc, #316]	; (9d518 <Cl_dprep_controller+0x1958>)
   9d3da:	791b      	ldrb	r3, [r3, #4]
   9d3dc:	2b03      	cmp	r3, #3
   9d3de:	d002      	beq.n	9d3e6 <Cl_dprep_controller+0x1826>
   9d3e0:	2b04      	cmp	r3, #4
   9d3e2:	d015      	beq.n	9d410 <Cl_dprep_controller+0x1850>
									command = CON_TX_COMMAND_SYSDATA;
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
   9d3e4:	e030      	b.n	9d448 <Cl_dprep_controller+0x1888>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9d3e6:	2316      	movs	r3, #22
   9d3e8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   9d3ec:	2303      	movs	r3, #3
   9d3ee:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
									dataarray[1] = 0;
   9d3f2:	2300      	movs	r3, #0
   9d3f4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9d3f8:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9d3fc:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9d400:	2202      	movs	r2, #2
   9d402:	4618      	mov	r0, r3
   9d404:	4b38      	ldr	r3, [pc, #224]	; (9d4e8 <Cl_dprep_controller+0x1928>)
   9d406:	4798      	blx	r3
   9d408:	4603      	mov	r3, r0
   9d40a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   9d40e:	e01b      	b.n	9d448 <Cl_dprep_controller+0x1888>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9d410:	2316      	movs	r3, #22
   9d412:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9d416:	2304      	movs	r3, #4
   9d418:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9d41c:	f107 0360 	add.w	r3, r7, #96	; 0x60
   9d420:	3301      	adds	r3, #1
   9d422:	4619      	mov	r1, r3
   9d424:	2004      	movs	r0, #4
   9d426:	4b3d      	ldr	r3, [pc, #244]	; (9d51c <Cl_dprep_controller+0x195c>)
   9d428:	4798      	blx	r3
   9d42a:	4603      	mov	r3, r0
   9d42c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9d430:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9d434:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9d438:	2202      	movs	r2, #2
   9d43a:	4618      	mov	r0, r3
   9d43c:	4b2a      	ldr	r3, [pc, #168]	; (9d4e8 <Cl_dprep_controller+0x1928>)
   9d43e:	4798      	blx	r3
   9d440:	4603      	mov	r3, r0
   9d442:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   9d446:	bf00      	nop
									default:break;
								}
							}
				
						break;
   9d448:	e037      	b.n	9d4ba <Cl_dprep_controller+0x18fa>
						case EVENT_DPREP_COMMAND_SET_DATA:
								 if(Cl_ConsoleRxMsg.msgready == true)
   9d44a:	4b33      	ldr	r3, [pc, #204]	; (9d518 <Cl_dprep_controller+0x1958>)
   9d44c:	7e1b      	ldrb	r3, [r3, #24]
   9d44e:	2b00      	cmp	r3, #0
   9d450:	d035      	beq.n	9d4be <Cl_dprep_controller+0x18fe>
								 {
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
   9d452:	4b31      	ldr	r3, [pc, #196]	; (9d518 <Cl_dprep_controller+0x1958>)
   9d454:	791b      	ldrb	r3, [r3, #4]
   9d456:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9d45a:	2300      	movs	r3, #0
   9d45c:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
   9d460:	e011      	b.n	9d486 <Cl_dprep_controller+0x18c6>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   9d462:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
   9d466:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
   9d46a:	3201      	adds	r2, #1
   9d46c:	492a      	ldr	r1, [pc, #168]	; (9d518 <Cl_dprep_controller+0x1958>)
   9d46e:	440a      	add	r2, r1
   9d470:	7912      	ldrb	r2, [r2, #4]
   9d472:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
   9d476:	440b      	add	r3, r1
   9d478:	f803 2c78 	strb.w	r2, [r3, #-120]
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9d47c:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
   9d480:	3301      	adds	r3, #1
   9d482:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
   9d486:	4b24      	ldr	r3, [pc, #144]	; (9d518 <Cl_dprep_controller+0x1958>)
   9d488:	78db      	ldrb	r3, [r3, #3]
   9d48a:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
   9d48e:	429a      	cmp	r2, r3
   9d490:	d3e7      	bcc.n	9d462 <Cl_dprep_controller+0x18a2>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
									 }
									 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   9d492:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
   9d496:	f897 0069 	ldrb.w	r0, [r7, #105]	; 0x69
   9d49a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   9d49e:	ca06      	ldmia	r2, {r1, r2}
   9d4a0:	4c1f      	ldr	r4, [pc, #124]	; (9d520 <Cl_dprep_controller+0x1960>)
   9d4a2:	47a0      	blx	r4
						 
						 
						 
								 }
	
						break;
   9d4a4:	e00b      	b.n	9d4be <Cl_dprep_controller+0x18fe>
			
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9d4a6:	4b1f      	ldr	r3, [pc, #124]	; (9d524 <Cl_dprep_controller+0x1964>)
   9d4a8:	4798      	blx	r3
   9d4aa:	4603      	mov	r3, r0
   9d4ac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9d4b0:	e006      	b.n	9d4c0 <Cl_dprep_controller+0x1900>
					default:
					break;
   9d4b2:	bf00      	nop
   9d4b4:	e00c      	b.n	9d4d0 <Cl_dprep_controller+0x1910>
					if( temp == 0)
					{
						
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
					}
					break;
   9d4b6:	bf00      	nop
   9d4b8:	e00a      	b.n	9d4d0 <Cl_dprep_controller+0x1910>
									break;
									default:break;
								}
							}
				
						break;
   9d4ba:	bf00      	nop
   9d4bc:	e008      	b.n	9d4d0 <Cl_dprep_controller+0x1910>
						 
						 
						 
								 }
	
						break;
   9d4be:	bf00      	nop
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
						break;
					default:
					break;
				}
		break;
   9d4c0:	e006      	b.n	9d4d0 <Cl_dprep_controller+0x1910>
			}
			
			break;

		}
		break;
   9d4c2:	bf00      	nop
   9d4c4:	e004      	b.n	9d4d0 <Cl_dprep_controller+0x1910>
			
		
		}
		}
		
		break;
   9d4c6:	bf00      	nop
   9d4c8:	e002      	b.n	9d4d0 <Cl_dprep_controller+0x1910>
						Cl_Dprep_ResetAlertsforReassertion();
						sv_cntrl_disable_bypass();
						break;
						
					}
		break;
   9d4ca:	bf00      	nop
   9d4cc:	e000      	b.n	9d4d0 <Cl_dprep_controller+0x1910>
					}
					}
				break;
			}
		
		break;
   9d4ce:	bf00      	nop
				}
		break;

		}

	return Cl_dprepretcode;
   9d4d0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
   9d4d4:	4618      	mov	r0, r3
   9d4d6:	37a4      	adds	r7, #164	; 0xa4
   9d4d8:	46bd      	mov	sp, r7
   9d4da:	bd90      	pop	{r4, r7, pc}
   9d4dc:	2007283a 	.word	0x2007283a
   9d4e0:	0008d6b1 	.word	0x0008d6b1
   9d4e4:	000a62c4 	.word	0x000a62c4
   9d4e8:	00099729 	.word	0x00099729
   9d4ec:	200731a4 	.word	0x200731a4
   9d4f0:	00083f89 	.word	0x00083f89
   9d4f4:	20072d78 	.word	0x20072d78
   9d4f8:	000925a9 	.word	0x000925a9
   9d4fc:	00091e2d 	.word	0x00091e2d
   9d500:	000a62cc 	.word	0x000a62cc
   9d504:	20072818 	.word	0x20072818
   9d508:	000a62d4 	.word	0x000a62d4
   9d50c:	00083035 	.word	0x00083035
   9d510:	0009e7b1 	.word	0x0009e7b1
   9d514:	0009df69 	.word	0x0009df69
   9d518:	20072f98 	.word	0x20072f98
   9d51c:	00098239 	.word	0x00098239
   9d520:	0009e945 	.word	0x0009e945
   9d524:	0009d7f1 	.word	0x0009d7f1

0009d528 <cl_dprep_translatemacevent>:
 
 
Cl_ReturnCodeType  cl_dprep_translatemacevent(Cl_Mac_EventsType Cl_MacDprepEvt,Cl_Dprep_Events* cl_dprepevent)
{
   9d528:	b480      	push	{r7}
   9d52a:	b083      	sub	sp, #12
   9d52c:	af00      	add	r7, sp, #0
   9d52e:	4603      	mov	r3, r0
   9d530:	6039      	str	r1, [r7, #0]
   9d532:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacDprepEvt)
   9d534:	79fb      	ldrb	r3, [r7, #7]
   9d536:	3b09      	subs	r3, #9
   9d538:	2b43      	cmp	r3, #67	; 0x43
   9d53a:	f200 810f 	bhi.w	9d75c <cl_dprep_translatemacevent+0x234>
   9d53e:	a201      	add	r2, pc, #4	; (adr r2, 9d544 <cl_dprep_translatemacevent+0x1c>)
   9d540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9d544:	0009d65d 	.word	0x0009d65d
   9d548:	0009d665 	.word	0x0009d665
   9d54c:	0009d66d 	.word	0x0009d66d
   9d550:	0009d675 	.word	0x0009d675
   9d554:	0009d67d 	.word	0x0009d67d
   9d558:	0009d685 	.word	0x0009d685
   9d55c:	0009d695 	.word	0x0009d695
   9d560:	0009d69d 	.word	0x0009d69d
   9d564:	0009d68d 	.word	0x0009d68d
   9d568:	0009d6a5 	.word	0x0009d6a5
   9d56c:	0009d6ad 	.word	0x0009d6ad
   9d570:	0009d6b5 	.word	0x0009d6b5
   9d574:	0009d755 	.word	0x0009d755
   9d578:	0009d6bd 	.word	0x0009d6bd
   9d57c:	0009d75d 	.word	0x0009d75d
   9d580:	0009d75d 	.word	0x0009d75d
   9d584:	0009d75d 	.word	0x0009d75d
   9d588:	0009d75d 	.word	0x0009d75d
   9d58c:	0009d75d 	.word	0x0009d75d
   9d590:	0009d715 	.word	0x0009d715
   9d594:	0009d725 	.word	0x0009d725
   9d598:	0009d72d 	.word	0x0009d72d
   9d59c:	0009d735 	.word	0x0009d735
   9d5a0:	0009d75d 	.word	0x0009d75d
   9d5a4:	0009d71d 	.word	0x0009d71d
   9d5a8:	0009d75d 	.word	0x0009d75d
   9d5ac:	0009d75d 	.word	0x0009d75d
   9d5b0:	0009d75d 	.word	0x0009d75d
   9d5b4:	0009d75d 	.word	0x0009d75d
   9d5b8:	0009d73d 	.word	0x0009d73d
   9d5bc:	0009d745 	.word	0x0009d745
   9d5c0:	0009d74d 	.word	0x0009d74d
   9d5c4:	0009d655 	.word	0x0009d655
   9d5c8:	0009d75d 	.word	0x0009d75d
   9d5cc:	0009d75d 	.word	0x0009d75d
   9d5d0:	0009d75d 	.word	0x0009d75d
   9d5d4:	0009d70d 	.word	0x0009d70d
   9d5d8:	0009d705 	.word	0x0009d705
   9d5dc:	0009d75d 	.word	0x0009d75d
   9d5e0:	0009d75d 	.word	0x0009d75d
   9d5e4:	0009d75d 	.word	0x0009d75d
   9d5e8:	0009d75d 	.word	0x0009d75d
   9d5ec:	0009d75d 	.word	0x0009d75d
   9d5f0:	0009d75d 	.word	0x0009d75d
   9d5f4:	0009d75d 	.word	0x0009d75d
   9d5f8:	0009d75d 	.word	0x0009d75d
   9d5fc:	0009d75d 	.word	0x0009d75d
   9d600:	0009d6c5 	.word	0x0009d6c5
   9d604:	0009d6cd 	.word	0x0009d6cd
   9d608:	0009d6d5 	.word	0x0009d6d5
   9d60c:	0009d6dd 	.word	0x0009d6dd
   9d610:	0009d6e5 	.word	0x0009d6e5
   9d614:	0009d6ed 	.word	0x0009d6ed
   9d618:	0009d75d 	.word	0x0009d75d
   9d61c:	0009d75d 	.word	0x0009d75d
   9d620:	0009d75d 	.word	0x0009d75d
   9d624:	0009d75d 	.word	0x0009d75d
   9d628:	0009d75d 	.word	0x0009d75d
   9d62c:	0009d75d 	.word	0x0009d75d
   9d630:	0009d75d 	.word	0x0009d75d
   9d634:	0009d75d 	.word	0x0009d75d
   9d638:	0009d75d 	.word	0x0009d75d
   9d63c:	0009d75d 	.word	0x0009d75d
   9d640:	0009d75d 	.word	0x0009d75d
   9d644:	0009d6f5 	.word	0x0009d6f5
   9d648:	0009d75d 	.word	0x0009d75d
   9d64c:	0009d75d 	.word	0x0009d75d
   9d650:	0009d6fd 	.word	0x0009d6fd
	{
	
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_dprepevent =EVENT_DPREP_CLR_ALARM;
   9d654:	683b      	ldr	r3, [r7, #0]
   9d656:	2201      	movs	r2, #1
   9d658:	701a      	strb	r2, [r3, #0]
		break;
   9d65a:	e080      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_dprepevent = EVENT_DPREP_DIALYSIS_PREP;
   9d65c:	683b      	ldr	r3, [r7, #0]
   9d65e:	2202      	movs	r2, #2
   9d660:	701a      	strb	r2, [r3, #0]
		break;
   9d662:	e07c      	b.n	9d75e <cl_dprep_translatemacevent+0x236>

		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPMP_ON;
   9d664:	683b      	ldr	r3, [r7, #0]
   9d666:	2205      	movs	r2, #5
   9d668:	701a      	strb	r2, [r3, #0]
		break;
   9d66a:	e078      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPMP_OFF;
   9d66c:	683b      	ldr	r3, [r7, #0]
   9d66e:	2206      	movs	r2, #6
   9d670:	701a      	strb	r2, [r3, #0]
		break;
   9d672:	e074      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPUMPRATE;
   9d674:	683b      	ldr	r3, [r7, #0]
   9d676:	2207      	movs	r2, #7
   9d678:	701a      	strb	r2, [r3, #0]
		break;
   9d67a:	e070      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_dprepevent =  EVENT_DPREP_COMMAND_SET_DATA;
   9d67c:	683b      	ldr	r3, [r7, #0]
   9d67e:	2203      	movs	r2, #3
   9d680:	701a      	strb	r2, [r3, #0]
		break;
   9d682:	e06c      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_dprepevent = EVENT_DPREP_COMMAND_GET_DATA;
   9d684:	683b      	ldr	r3, [r7, #0]
   9d686:	2204      	movs	r2, #4
   9d688:	701a      	strb	r2, [r3, #0]
		break;
   9d68a:	e068      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		
		case EVT_CONSOLE_COMMAND_START_DIALYSATE_FILLING:
				*cl_dprepevent = EVENT_DPREP_START_DIALYSATE_FILL;
   9d68c:	683b      	ldr	r3, [r7, #0]
   9d68e:	2208      	movs	r2, #8
   9d690:	701a      	strb	r2, [r3, #0]
				break;
   9d692:	e064      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_dprepevent = EVENT_DPREP_START_PRIME;
   9d694:	683b      	ldr	r3, [r7, #0]
   9d696:	220a      	movs	r2, #10
   9d698:	701a      	strb	r2, [r3, #0]
		break;
   9d69a:	e060      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_dprepevent = EVENT_DPREP_STOP_PRIME;
   9d69c:	683b      	ldr	r3, [r7, #0]
   9d69e:	220b      	movs	r2, #11
   9d6a0:	701a      	strb	r2, [r3, #0]
		break;
   9d6a2:	e05c      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_DILYSER_CONNECTED:
		*cl_dprepevent = EVENT_DPREP_DILYSER_CONNECTED;
   9d6a4:	683b      	ldr	r3, [r7, #0]
   9d6a6:	220c      	movs	r2, #12
   9d6a8:	701a      	strb	r2, [r3, #0]
		break;
   9d6aa:	e058      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_START_DIALISER_PRIME:
		*cl_dprepevent = EVENT_DPREP_START_DIALISER_PRIME;
   9d6ac:	683b      	ldr	r3, [r7, #0]
   9d6ae:	220d      	movs	r2, #13
   9d6b0:	701a      	strb	r2, [r3, #0]
		break;
   9d6b2:	e054      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME:
		*cl_dprepevent = EVENT_DPREP_STOP_DIALYSER_PRIME;
   9d6b4:	683b      	ldr	r3, [r7, #0]
   9d6b6:	220e      	movs	r2, #14
   9d6b8:	701a      	strb	r2, [r3, #0]
		break;	
   9d6ba:	e050      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		

		case EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED:
		*cl_dprepevent =   EVENT_DPREP_MAN_PREP_COMPLETED;
   9d6bc:	683b      	ldr	r3, [r7, #0]
   9d6be:	2212      	movs	r2, #18
   9d6c0:	701a      	strb	r2, [r3, #0]
		break;
   9d6c2:	e04c      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		
		case EVT_TICK_50M:
		*cl_dprepevent =   EVENT_DPREP_TICK_50MS;
   9d6c4:	683b      	ldr	r3, [r7, #0]
   9d6c6:	2213      	movs	r2, #19
   9d6c8:	701a      	strb	r2, [r3, #0]
		break;
   9d6ca:	e048      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case  EVT_TICK_100M:
		*cl_dprepevent =   EVENT_DPREP_TICK_100MS;
   9d6cc:	683b      	ldr	r3, [r7, #0]
   9d6ce:	2214      	movs	r2, #20
   9d6d0:	701a      	strb	r2, [r3, #0]
		break;
   9d6d2:	e044      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		
		case EVT_TICK_500M:
		*cl_dprepevent =   EVENT_DPREP_TICK_500MS;
   9d6d4:	683b      	ldr	r3, [r7, #0]
   9d6d6:	2215      	movs	r2, #21
   9d6d8:	701a      	strb	r2, [r3, #0]
		break;
   9d6da:	e040      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_TICK_SEC:
		*cl_dprepevent =   EVENT_DPREP_TICK_SECOND;
   9d6dc:	683b      	ldr	r3, [r7, #0]
   9d6de:	2216      	movs	r2, #22
   9d6e0:	701a      	strb	r2, [r3, #0]
		break;
   9d6e2:	e03c      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_TICK_MIN:
		*cl_dprepevent =   EVENT_DPREP_TICK_MINUTE;
   9d6e4:	683b      	ldr	r3, [r7, #0]
   9d6e6:	2217      	movs	r2, #23
   9d6e8:	701a      	strb	r2, [r3, #0]
		break;			 
   9d6ea:	e038      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_TICK_HOUR:
		*cl_dprepevent =   EVENT_DPREP_TICK_HOUR;
   9d6ec:	683b      	ldr	r3, [r7, #0]
   9d6ee:	2218      	movs	r2, #24
   9d6f0:	701a      	strb	r2, [r3, #0]
		break;
   9d6f2:	e034      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		
		case MACREQ_PRIME_COMPLETED:
		*cl_dprepevent = EVENT_DPREP_MAC_PRIME_COMPLETED;
   9d6f4:	683b      	ldr	r3, [r7, #0]
   9d6f6:	2210      	movs	r2, #16
   9d6f8:	701a      	strb	r2, [r3, #0]
		break;
   9d6fa:	e030      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case MACREQ_DIALYSER_PRIME_COMPLETED:
			*cl_dprepevent = EVENT_DPREP_MAC_DIALYSER_PRIME_COMPLETED;
   9d6fc:	683b      	ldr	r3, [r7, #0]
   9d6fe:	2211      	movs	r2, #17
   9d700:	701a      	strb	r2, [r3, #0]
		break;
   9d702:	e02c      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_ALARM_TRIGGERED:
		*cl_dprepevent =  EVENT_DPREP_ALARM;
   9d704:	683b      	ldr	r3, [r7, #0]
   9d706:	2219      	movs	r2, #25
   9d708:	701a      	strb	r2, [r3, #0]
		break;
   9d70a:	e028      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_ALERT_TRIGGERED:
		*cl_dprepevent =  EVENT_DPREP_ALERT;
   9d70c:	683b      	ldr	r3, [r7, #0]
   9d70e:	221a      	movs	r2, #26
   9d710:	701a      	strb	r2, [r3, #0]
		break;
   9d712:	e024      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_PATIENT_CONNECTED:
		*cl_dprepevent =  EVENT_DPREP_PATIENT_CONNECTED;
   9d714:	683b      	ldr	r3, [r7, #0]
   9d716:	221b      	movs	r2, #27
   9d718:	701a      	strb	r2, [r3, #0]
		break;
   9d71a:	e020      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_PATIENT_READY:
		*cl_dprepevent = EVENT_DPREP_PATIENT_READY;
   9d71c:	683b      	ldr	r3, [r7, #0]
   9d71e:	221c      	movs	r2, #28
   9d720:	701a      	strb	r2, [r3, #0]
		break;
   9d722:	e01c      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_SEND_MIXING_PREP_START:
		*cl_dprepevent =  EVENT_DPREP_MIXING_PREP_START;
   9d724:	683b      	ldr	r3, [r7, #0]
   9d726:	221d      	movs	r2, #29
   9d728:	701a      	strb	r2, [r3, #0]
		break;
   9d72a:	e018      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_SEND_MIXING_PREP_STOP:
		*cl_dprepevent = EVENT_DPREP_MIXING_PREP_STOP;
   9d72c:	683b      	ldr	r3, [r7, #0]
   9d72e:	221e      	movs	r2, #30
   9d730:	701a      	strb	r2, [r3, #0]
		break;
   9d732:	e014      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_dprepevent = EVENT_DPREP_START_RECIRC;
   9d734:	683b      	ldr	r3, [r7, #0]
   9d736:	221f      	movs	r2, #31
   9d738:	701a      	strb	r2, [r3, #0]
		break;
   9d73a:	e010      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case 	EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_dprepevent = EVENT_HEAPARIN_BOLUS;
   9d73c:	683b      	ldr	r3, [r7, #0]
   9d73e:	2221      	movs	r2, #33	; 0x21
   9d740:	701a      	strb	r2, [r3, #0]
		break;
   9d742:	e00c      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_START;
   9d744:	683b      	ldr	r3, [r7, #0]
   9d746:	2222      	movs	r2, #34	; 0x22
   9d748:	701a      	strb	r2, [r3, #0]
		break;
   9d74a:	e008      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_STOP;
   9d74c:	683b      	ldr	r3, [r7, #0]
   9d74e:	2223      	movs	r2, #35	; 0x23
   9d750:	701a      	strb	r2, [r3, #0]
		break;
   9d752:	e004      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_HEP_PMP_RATE:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_RATE;
   9d754:	683b      	ldr	r3, [r7, #0]
   9d756:	220f      	movs	r2, #15
   9d758:	701a      	strb	r2, [r3, #0]
		break;
   9d75a:	e000      	b.n	9d75e <cl_dprep_translatemacevent+0x236>
		default:
		break;
   9d75c:	bf00      	nop
	}
		 return CL_OK;
   9d75e:	2300      	movs	r3, #0
}
   9d760:	4618      	mov	r0, r3
   9d762:	370c      	adds	r7, #12
   9d764:	46bd      	mov	sp, r7
   9d766:	bc80      	pop	{r7}
   9d768:	4770      	bx	lr
   9d76a:	bf00      	nop

0009d76c <cl_dprep_notifydacandgotodpreptandby>:
		
		return Cl_dprepretcode;
		
	}
	Cl_ReturnCodeType cl_dprep_notifydacandgotodpreptandby(void)
	{
   9d76c:	b580      	push	{r7, lr}
   9d76e:	b082      	sub	sp, #8
   9d770:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   9d772:	2300      	movs	r3, #0
   9d774:	71fb      	strb	r3, [r7, #7]
		
		Cl_Uint8Type data =0;
   9d776:	2300      	movs	r3, #0
   9d778:	71bb      	strb	r3, [r7, #6]
		//inform DAC about rinse completed state.
		Cl_dprepsecondscounter = 0;
   9d77a:	4b15      	ldr	r3, [pc, #84]	; (9d7d0 <cl_dprep_notifydacandgotodpreptandby+0x64>)
   9d77c:	2200      	movs	r2, #0
   9d77e:	601a      	str	r2, [r3, #0]
		Cl_dprepMinutescounter= 0;
   9d780:	4b14      	ldr	r3, [pc, #80]	; (9d7d4 <cl_dprep_notifydacandgotodpreptandby+0x68>)
   9d782:	2200      	movs	r2, #0
   9d784:	601a      	str	r2, [r3, #0]
		Cl_dprephourscounter= 0;
   9d786:	4b14      	ldr	r3, [pc, #80]	; (9d7d8 <cl_dprep_notifydacandgotodpreptandby+0x6c>)
   9d788:	2200      	movs	r2, #0
   9d78a:	601a      	str	r2, [r3, #0]
		Cl_dprepTotalMinutescounter= 0;
   9d78c:	4b13      	ldr	r3, [pc, #76]	; (9d7dc <cl_dprep_notifydacandgotodpreptandby+0x70>)
   9d78e:	2200      	movs	r2, #0
   9d790:	601a      	str	r2, [r3, #0]
		Cl_dprepTotalhourscounter=0;
   9d792:	4b13      	ldr	r3, [pc, #76]	; (9d7e0 <cl_dprep_notifydacandgotodpreptandby+0x74>)
   9d794:	2200      	movs	r2, #0
   9d796:	601a      	str	r2, [r3, #0]
		data = 1;
   9d798:	2301      	movs	r3, #1
   9d79a:	71bb      	strb	r3, [r7, #6]
		Cl_dprepretcode = sv_nvmsetdata(NV_NVM_PRIME_STATUS,&data,1);
   9d79c:	1dbb      	adds	r3, r7, #6
   9d79e:	2201      	movs	r2, #1
   9d7a0:	4619      	mov	r1, r3
   9d7a2:	2002      	movs	r0, #2
   9d7a4:	4b0f      	ldr	r3, [pc, #60]	; (9d7e4 <cl_dprep_notifydacandgotodpreptandby+0x78>)
   9d7a6:	4798      	blx	r3
   9d7a8:	4603      	mov	r3, r0
   9d7aa:	71fb      	strb	r3, [r7, #7]
		
		Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
   9d7ac:	1dbb      	adds	r3, r7, #6
   9d7ae:	2200      	movs	r2, #0
   9d7b0:	4619      	mov	r1, r3
   9d7b2:	2010      	movs	r0, #16
   9d7b4:	4b0c      	ldr	r3, [pc, #48]	; (9d7e8 <cl_dprep_notifydacandgotodpreptandby+0x7c>)
   9d7b6:	4798      	blx	r3
   9d7b8:	4603      	mov	r3, r0
   9d7ba:	71fb      	strb	r3, [r7, #7]
		Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
   9d7bc:	204c      	movs	r0, #76	; 0x4c
   9d7be:	4b0b      	ldr	r3, [pc, #44]	; (9d7ec <cl_dprep_notifydacandgotodpreptandby+0x80>)
   9d7c0:	4798      	blx	r3
   9d7c2:	4603      	mov	r3, r0
   9d7c4:	71fb      	strb	r3, [r7, #7]
		
		
		return Cl_dprepretcode;
   9d7c6:	79fb      	ldrb	r3, [r7, #7]
	}
   9d7c8:	4618      	mov	r0, r3
   9d7ca:	3708      	adds	r7, #8
   9d7cc:	46bd      	mov	sp, r7
   9d7ce:	bd80      	pop	{r7, pc}
   9d7d0:	20072840 	.word	0x20072840
   9d7d4:	20072844 	.word	0x20072844
   9d7d8:	20072848 	.word	0x20072848
   9d7dc:	2007284c 	.word	0x2007284c
   9d7e0:	20072850 	.word	0x20072850
   9d7e4:	00098271 	.word	0x00098271
   9d7e8:	00099729 	.word	0x00099729
   9d7ec:	0008a611 	.word	0x0008a611

0009d7f0 <Cl_Dprep_ProcessAlarms>:
		return CL_OK;								
	}
	
	
	Cl_ReturnCodeType Cl_Dprep_ProcessAlarms(void )
	{
   9d7f0:	b580      	push	{r7, lr}
   9d7f2:	b082      	sub	sp, #8
   9d7f4:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   9d7f6:	2300      	movs	r3, #0
   9d7f8:	71fb      	strb	r3, [r7, #7]
		ClDprepAlarmIdType CldprepAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9d7fa:	234d      	movs	r3, #77	; 0x4d
   9d7fc:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_dprepalarmid;
		//	cl_wait(200);
		Cl_dprepretcode = Cl_Dprep_UpdateAlarmTable();
   9d7fe:	4b04      	ldr	r3, [pc, #16]	; (9d810 <Cl_Dprep_ProcessAlarms+0x20>)
   9d800:	4798      	blx	r3
   9d802:	4603      	mov	r3, r0
   9d804:	71fb      	strb	r3, [r7, #7]
		//   	data = (Cl_Uint8Type)cl_rinsealarmid;
		//   	command = CON_TX_COMMAND_ALARM;
		//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
		
		
		return (Cl_dprepretcode);
   9d806:	79fb      	ldrb	r3, [r7, #7]
	}
   9d808:	4618      	mov	r0, r3
   9d80a:	3708      	adds	r7, #8
   9d80c:	46bd      	mov	sp, r7
   9d80e:	bd80      	pop	{r7, pc}
   9d810:	0009d815 	.word	0x0009d815

0009d814 <Cl_Dprep_UpdateAlarmTable>:
	
	
	Cl_ReturnCodeType Cl_Dprep_UpdateAlarmTable( void)
	{
   9d814:	b580      	push	{r7, lr}
   9d816:	b084      	sub	sp, #16
   9d818:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   9d81a:	2300      	movs	r3, #0
   9d81c:	73fb      	strb	r3, [r7, #15]
		Cl_Uint8Type tempcount = 0;
   9d81e:	2300      	movs	r3, #0
   9d820:	73bb      	strb	r3, [r7, #14]
		Cl_Uint8Type data[2] ={0, 0} ,*data1 = NULL;
   9d822:	2300      	movs	r3, #0
   9d824:	713b      	strb	r3, [r7, #4]
   9d826:	2300      	movs	r3, #0
   9d828:	717b      	strb	r3, [r7, #5]
   9d82a:	2300      	movs	r3, #0
   9d82c:	60bb      	str	r3, [r7, #8]
		Cl_Uint8Type data3;
		Cl_NewAlarmIdType cl_alarmId;
		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9d82e:	234d      	movs	r3, #77	; 0x4d
   9d830:	71fb      	strb	r3, [r7, #7]
		
		
		for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   9d832:	2300      	movs	r3, #0
   9d834:	73bb      	strb	r3, [r7, #14]
   9d836:	e068      	b.n	9d90a <Cl_Dprep_UpdateAlarmTable+0xf6>
		{
			
			Cl_Alarm_GetAlarmStatus(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId,&Cl_DprepAlarmTable[tempcount].IsActive);
   9d838:	7bba      	ldrb	r2, [r7, #14]
   9d83a:	4938      	ldr	r1, [pc, #224]	; (9d91c <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d83c:	4613      	mov	r3, r2
   9d83e:	00db      	lsls	r3, r3, #3
   9d840:	1a9b      	subs	r3, r3, r2
   9d842:	440b      	add	r3, r1
   9d844:	7818      	ldrb	r0, [r3, #0]
   9d846:	7bba      	ldrb	r2, [r7, #14]
   9d848:	4613      	mov	r3, r2
   9d84a:	00db      	lsls	r3, r3, #3
   9d84c:	1a9b      	subs	r3, r3, r2
   9d84e:	4a33      	ldr	r2, [pc, #204]	; (9d91c <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d850:	4413      	add	r3, r2
   9d852:	3302      	adds	r3, #2
   9d854:	4619      	mov	r1, r3
   9d856:	4b32      	ldr	r3, [pc, #200]	; (9d920 <Cl_Dprep_UpdateAlarmTable+0x10c>)
   9d858:	4798      	blx	r3
			//	if(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmType == CL_ALARM_ALARM)
			//	{
			
			
			if (Cl_DprepAlarmTable[tempcount].IsActive)
   9d85a:	7bba      	ldrb	r2, [r7, #14]
   9d85c:	492f      	ldr	r1, [pc, #188]	; (9d91c <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d85e:	4613      	mov	r3, r2
   9d860:	00db      	lsls	r3, r3, #3
   9d862:	1a9b      	subs	r3, r3, r2
   9d864:	440b      	add	r3, r1
   9d866:	3302      	adds	r3, #2
   9d868:	781b      	ldrb	r3, [r3, #0]
   9d86a:	2b00      	cmp	r3, #0
   9d86c:	d022      	beq.n	9d8b4 <Cl_Dprep_UpdateAlarmTable+0xa0>
			{
				if(!Cl_DprepAlarmTable[tempcount].IsRaised)
   9d86e:	7bba      	ldrb	r2, [r7, #14]
   9d870:	492a      	ldr	r1, [pc, #168]	; (9d91c <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d872:	4613      	mov	r3, r2
   9d874:	00db      	lsls	r3, r3, #3
   9d876:	1a9b      	subs	r3, r3, r2
   9d878:	440b      	add	r3, r1
   9d87a:	3303      	adds	r3, #3
   9d87c:	781b      	ldrb	r3, [r3, #0]
   9d87e:	f083 0301 	eor.w	r3, r3, #1
   9d882:	b2db      	uxtb	r3, r3
   9d884:	2b00      	cmp	r3, #0
   9d886:	d03d      	beq.n	9d904 <Cl_Dprep_UpdateAlarmTable+0xf0>
					//	data1 = (Cl_Uint8Type) cl_alarmId;

				//	command = CON_TX_COMMAND_ALARM;

				//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,3);
					Cl_DprepAlarmTable[tempcount].IsRaised = true;
   9d888:	7bba      	ldrb	r2, [r7, #14]
   9d88a:	4924      	ldr	r1, [pc, #144]	; (9d91c <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d88c:	4613      	mov	r3, r2
   9d88e:	00db      	lsls	r3, r3, #3
   9d890:	1a9b      	subs	r3, r3, r2
   9d892:	440b      	add	r3, r1
   9d894:	3303      	adds	r3, #3
   9d896:	2201      	movs	r2, #1
   9d898:	701a      	strb	r2, [r3, #0]
					
					Cl_dprepretcode = CL_DrepAlarmActon(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId);
   9d89a:	7bba      	ldrb	r2, [r7, #14]
   9d89c:	491f      	ldr	r1, [pc, #124]	; (9d91c <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d89e:	4613      	mov	r3, r2
   9d8a0:	00db      	lsls	r3, r3, #3
   9d8a2:	1a9b      	subs	r3, r3, r2
   9d8a4:	440b      	add	r3, r1
   9d8a6:	781b      	ldrb	r3, [r3, #0]
   9d8a8:	4618      	mov	r0, r3
   9d8aa:	4b1e      	ldr	r3, [pc, #120]	; (9d924 <Cl_Dprep_UpdateAlarmTable+0x110>)
   9d8ac:	4798      	blx	r3
   9d8ae:	4603      	mov	r3, r0
   9d8b0:	73fb      	strb	r3, [r7, #15]
   9d8b2:	e027      	b.n	9d904 <Cl_Dprep_UpdateAlarmTable+0xf0>
				
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_DprepAlarmTable[tempcount].IsRaised == true)
   9d8b4:	7bba      	ldrb	r2, [r7, #14]
   9d8b6:	4919      	ldr	r1, [pc, #100]	; (9d91c <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d8b8:	4613      	mov	r3, r2
   9d8ba:	00db      	lsls	r3, r3, #3
   9d8bc:	1a9b      	subs	r3, r3, r2
   9d8be:	440b      	add	r3, r1
   9d8c0:	3303      	adds	r3, #3
   9d8c2:	781b      	ldrb	r3, [r3, #0]
   9d8c4:	2b00      	cmp	r3, #0
   9d8c6:	d014      	beq.n	9d8f2 <Cl_Dprep_UpdateAlarmTable+0xde>
				{
					Cl_DprepAlarmTable[tempcount].IsRaised = false;
   9d8c8:	7bba      	ldrb	r2, [r7, #14]
   9d8ca:	4914      	ldr	r1, [pc, #80]	; (9d91c <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d8cc:	4613      	mov	r3, r2
   9d8ce:	00db      	lsls	r3, r3, #3
   9d8d0:	1a9b      	subs	r3, r3, r2
   9d8d2:	440b      	add	r3, r1
   9d8d4:	3303      	adds	r3, #3
   9d8d6:	2200      	movs	r2, #0
   9d8d8:	701a      	strb	r2, [r3, #0]
					command = CON_TX_COMMAND_ALARM;
   9d8da:	2307      	movs	r3, #7
   9d8dc:	71fb      	strb	r3, [r7, #7]
					data[0] = (Cl_Uint8Type)(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId);
   9d8de:	7bba      	ldrb	r2, [r7, #14]
   9d8e0:	490e      	ldr	r1, [pc, #56]	; (9d91c <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d8e2:	4613      	mov	r3, r2
   9d8e4:	00db      	lsls	r3, r3, #3
   9d8e6:	1a9b      	subs	r3, r3, r2
   9d8e8:	440b      	add	r3, r1
   9d8ea:	781b      	ldrb	r3, [r3, #0]
   9d8ec:	713b      	strb	r3, [r7, #4]
					data[1] = (Cl_Uint8Type) 0;
   9d8ee:	2300      	movs	r3, #0
   9d8f0:	717b      	strb	r3, [r7, #5]
				//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,2);
				}
				Cl_DprepAlarmTable[tempcount].IsActive = true;
   9d8f2:	7bba      	ldrb	r2, [r7, #14]
   9d8f4:	4909      	ldr	r1, [pc, #36]	; (9d91c <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d8f6:	4613      	mov	r3, r2
   9d8f8:	00db      	lsls	r3, r3, #3
   9d8fa:	1a9b      	subs	r3, r3, r2
   9d8fc:	440b      	add	r3, r1
   9d8fe:	3302      	adds	r3, #2
   9d900:	2201      	movs	r2, #1
   9d902:	701a      	strb	r2, [r3, #0]
		Cl_NewAlarmIdType cl_alarmId;
		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
		
		
		for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   9d904:	7bbb      	ldrb	r3, [r7, #14]
   9d906:	3301      	adds	r3, #1
   9d908:	73bb      	strb	r3, [r7, #14]
   9d90a:	7bbb      	ldrb	r3, [r7, #14]
   9d90c:	2b21      	cmp	r3, #33	; 0x21
   9d90e:	d993      	bls.n	9d838 <Cl_Dprep_UpdateAlarmTable+0x24>
			}
			//}

		}

		return (Cl_dprepretcode );
   9d910:	7bfb      	ldrb	r3, [r7, #15]
	}
   9d912:	4618      	mov	r0, r3
   9d914:	3710      	adds	r7, #16
   9d916:	46bd      	mov	sp, r7
   9d918:	bd80      	pop	{r7, pc}
   9d91a:	bf00      	nop
   9d91c:	20070abc 	.word	0x20070abc
   9d920:	00083035 	.word	0x00083035
   9d924:	0009d929 	.word	0x0009d929

0009d928 <CL_DrepAlarmActon>:

Cl_ReturnCodeType  CL_DrepAlarmActon(Cl_NewAlarmIdType cl_dprepalarmid)
{
   9d928:	b580      	push	{r7, lr}
   9d92a:	b086      	sub	sp, #24
   9d92c:	af00      	add	r7, sp, #0
   9d92e:	4603      	mov	r3, r0
   9d930:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   9d932:	2300      	movs	r3, #0
   9d934:	75fb      	strb	r3, [r7, #23]
	Cl_Uint16Type levelswitchstatus = 0;
   9d936:	2300      	movs	r3, #0
   9d938:	82bb      	strh	r3, [r7, #20]
	Cl_Uint16Type wait_cnt = 0,TmpVal=0;
   9d93a:	2300      	movs	r3, #0
   9d93c:	827b      	strh	r3, [r7, #18]
   9d93e:	2300      	movs	r3, #0
   9d940:	823b      	strh	r3, [r7, #16]
	static Cl_Uint8Type fillseccounter=0;
	Cl_Uint8Type data[3] ={0, 0};
   9d942:	f107 0308 	add.w	r3, r7, #8
   9d946:	2100      	movs	r1, #0
   9d948:	460a      	mov	r2, r1
   9d94a:	801a      	strh	r2, [r3, #0]
   9d94c:	460a      	mov	r2, r1
   9d94e:	709a      	strb	r2, [r3, #2]
	Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   9d950:	2300      	movs	r3, #0
   9d952:	73fb      	strb	r3, [r7, #15]
				Cl_Uint8Type data3;
				Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9d954:	234d      	movs	r3, #77	; 0x4d
   9d956:	73bb      	strb	r3, [r7, #14]
	
	switch(cl_dprepalarmid)
   9d958:	79fb      	ldrb	r3, [r7, #7]
   9d95a:	3b01      	subs	r3, #1
   9d95c:	2b3d      	cmp	r3, #61	; 0x3d
   9d95e:	f200 810d 	bhi.w	9db7c <CL_DrepAlarmActon+0x254>
   9d962:	a201      	add	r2, pc, #4	; (adr r2, 9d968 <CL_DrepAlarmActon+0x40>)
   9d964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9d968:	0009da8b 	.word	0x0009da8b
   9d96c:	0009db7d 	.word	0x0009db7d
   9d970:	0009da9d 	.word	0x0009da9d
   9d974:	0009da9d 	.word	0x0009da9d
   9d978:	0009dadd 	.word	0x0009dadd
   9d97c:	0009dadd 	.word	0x0009dadd
   9d980:	0009db15 	.word	0x0009db15
   9d984:	0009db15 	.word	0x0009db15
   9d988:	0009db7d 	.word	0x0009db7d
   9d98c:	0009db7d 	.word	0x0009db7d
   9d990:	0009db7d 	.word	0x0009db7d
   9d994:	0009da61 	.word	0x0009da61
   9d998:	0009da61 	.word	0x0009da61
   9d99c:	0009da61 	.word	0x0009da61
   9d9a0:	0009da61 	.word	0x0009da61
   9d9a4:	0009da61 	.word	0x0009da61
   9d9a8:	0009da61 	.word	0x0009da61
   9d9ac:	0009da61 	.word	0x0009da61
   9d9b0:	0009db15 	.word	0x0009db15
   9d9b4:	0009db15 	.word	0x0009db15
   9d9b8:	0009da61 	.word	0x0009da61
   9d9bc:	0009da61 	.word	0x0009da61
   9d9c0:	0009da61 	.word	0x0009da61
   9d9c4:	0009da61 	.word	0x0009da61
   9d9c8:	0009db7d 	.word	0x0009db7d
   9d9cc:	0009da61 	.word	0x0009da61
   9d9d0:	0009db7d 	.word	0x0009db7d
   9d9d4:	0009db7d 	.word	0x0009db7d
   9d9d8:	0009db7d 	.word	0x0009db7d
   9d9dc:	0009db7d 	.word	0x0009db7d
   9d9e0:	0009db7d 	.word	0x0009db7d
   9d9e4:	0009db7d 	.word	0x0009db7d
   9d9e8:	0009db7d 	.word	0x0009db7d
   9d9ec:	0009db7d 	.word	0x0009db7d
   9d9f0:	0009db7d 	.word	0x0009db7d
   9d9f4:	0009db7d 	.word	0x0009db7d
   9d9f8:	0009db7d 	.word	0x0009db7d
   9d9fc:	0009db7d 	.word	0x0009db7d
   9da00:	0009da61 	.word	0x0009da61
   9da04:	0009da61 	.word	0x0009da61
   9da08:	0009db7d 	.word	0x0009db7d
   9da0c:	0009dadd 	.word	0x0009dadd
   9da10:	0009db7d 	.word	0x0009db7d
   9da14:	0009dadd 	.word	0x0009dadd
   9da18:	0009db7d 	.word	0x0009db7d
   9da1c:	0009db7d 	.word	0x0009db7d
   9da20:	0009db7d 	.word	0x0009db7d
   9da24:	0009db7d 	.word	0x0009db7d
   9da28:	0009db7d 	.word	0x0009db7d
   9da2c:	0009db7d 	.word	0x0009db7d
   9da30:	0009db7d 	.word	0x0009db7d
   9da34:	0009db7d 	.word	0x0009db7d
   9da38:	0009db7d 	.word	0x0009db7d
   9da3c:	0009db7d 	.word	0x0009db7d
   9da40:	0009db7d 	.word	0x0009db7d
   9da44:	0009db7d 	.word	0x0009db7d
   9da48:	0009db7d 	.word	0x0009db7d
   9da4c:	0009db7d 	.word	0x0009db7d
   9da50:	0009db7d 	.word	0x0009db7d
   9da54:	0009db7d 	.word	0x0009db7d
   9da58:	0009db83 	.word	0x0009db83
   9da5c:	0009db83 	.word	0x0009db83
			case    BC_ALARM:
			case 	PS2_HIGH_THRESHOLD:
			case	PS2_LOW_THRESHOLD:
			case 	PS3_HIGH_THRESHOLD:
			case	PS3_LOW_THRESHOLD:
				if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   9da60:	4b5c      	ldr	r3, [pc, #368]	; (9dbd4 <CL_DrepAlarmActon+0x2ac>)
   9da62:	781b      	ldrb	r3, [r3, #0]
   9da64:	2b06      	cmp	r3, #6
   9da66:	d007      	beq.n	9da78 <CL_DrepAlarmActon+0x150>
   9da68:	4b5a      	ldr	r3, [pc, #360]	; (9dbd4 <CL_DrepAlarmActon+0x2ac>)
   9da6a:	781b      	ldrb	r3, [r3, #0]
   9da6c:	2b0e      	cmp	r3, #14
   9da6e:	d003      	beq.n	9da78 <CL_DrepAlarmActon+0x150>
   9da70:	4b58      	ldr	r3, [pc, #352]	; (9dbd4 <CL_DrepAlarmActon+0x2ac>)
   9da72:	781b      	ldrb	r3, [r3, #0]
   9da74:	2b0d      	cmp	r3, #13
   9da76:	d102      	bne.n	9da7e <CL_DrepAlarmActon+0x156>
				{
					//Cl_Dprep_Stoppreparation();
					Cl_Dprep_Priming_Stop();
   9da78:	4b57      	ldr	r3, [pc, #348]	; (9dbd8 <CL_DrepAlarmActon+0x2b0>)
   9da7a:	4798      	blx	r3
					Cl_Dprep_Stoppreparation();
					cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
				}
				
			
			break;
   9da7c:	e082      	b.n	9db84 <CL_DrepAlarmActon+0x25c>
					//Cl_Dprep_Stoppreparation();
					Cl_Dprep_Priming_Stop();
				}
				else{
					
					Cl_Dprep_Stoppreparation();
   9da7e:	4b57      	ldr	r3, [pc, #348]	; (9dbdc <CL_DrepAlarmActon+0x2b4>)
   9da80:	4798      	blx	r3
					cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9da82:	4b54      	ldr	r3, [pc, #336]	; (9dbd4 <CL_DrepAlarmActon+0x2ac>)
   9da84:	220c      	movs	r2, #12
   9da86:	701a      	strb	r2, [r3, #0]
				}
				
			
			break;
   9da88:	e07c      	b.n	9db84 <CL_DrepAlarmActon+0x25c>
			
			case BLOODDOOR_STATUS_OPEN:
				sv_cntrl_setredalarm();
   9da8a:	4b55      	ldr	r3, [pc, #340]	; (9dbe0 <CL_DrepAlarmActon+0x2b8>)
   9da8c:	4798      	blx	r3
				sv_cntrl_buzzer();
   9da8e:	4b55      	ldr	r3, [pc, #340]	; (9dbe4 <CL_DrepAlarmActon+0x2bc>)
   9da90:	4798      	blx	r3
				//Cl_Dprep_Stoppreparation();
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   9da92:	2100      	movs	r1, #0
   9da94:	2004      	movs	r0, #4
   9da96:	4b54      	ldr	r3, [pc, #336]	; (9dbe8 <CL_DrepAlarmActon+0x2c0>)
   9da98:	4798      	blx	r3
// 				{	
// 				
// 					cl_dprepstate = CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS;
// 				}
				// 
			break;
   9da9a:	e073      	b.n	9db84 <CL_DrepAlarmActon+0x25c>

			case HOLDER1STATUS_OPEN:
			case HOLDER2STATUS_OPEN:
				sv_cntrl_setyellowalarm();
   9da9c:	4b53      	ldr	r3, [pc, #332]	; (9dbec <CL_DrepAlarmActon+0x2c4>)
   9da9e:	4798      	blx	r3
				sv_cntrl_buzzer();
   9daa0:	4b50      	ldr	r3, [pc, #320]	; (9dbe4 <CL_DrepAlarmActon+0x2bc>)
   9daa2:	4798      	blx	r3
				
				if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   9daa4:	4b4b      	ldr	r3, [pc, #300]	; (9dbd4 <CL_DrepAlarmActon+0x2ac>)
   9daa6:	781b      	ldrb	r3, [r3, #0]
   9daa8:	2b06      	cmp	r3, #6
   9daaa:	d007      	beq.n	9dabc <CL_DrepAlarmActon+0x194>
   9daac:	4b49      	ldr	r3, [pc, #292]	; (9dbd4 <CL_DrepAlarmActon+0x2ac>)
   9daae:	781b      	ldrb	r3, [r3, #0]
   9dab0:	2b0e      	cmp	r3, #14
   9dab2:	d003      	beq.n	9dabc <CL_DrepAlarmActon+0x194>
   9dab4:	4b47      	ldr	r3, [pc, #284]	; (9dbd4 <CL_DrepAlarmActon+0x2ac>)
   9dab6:	781b      	ldrb	r3, [r3, #0]
   9dab8:	2b0d      	cmp	r3, #13
   9daba:	d109      	bne.n	9dad0 <CL_DrepAlarmActon+0x1a8>
				{
				
				sv_cntrl_enable_bypass();
   9dabc:	4b4c      	ldr	r3, [pc, #304]	; (9dbf0 <CL_DrepAlarmActon+0x2c8>)
   9dabe:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   9dac0:	2100      	movs	r1, #0
   9dac2:	2002      	movs	r0, #2
   9dac4:	4b4b      	ldr	r3, [pc, #300]	; (9dbf4 <CL_DrepAlarmActon+0x2cc>)
   9dac6:	4798      	blx	r3
				cl_dprepbypassstate = CL_DPREP_BYPASS_ON;	
   9dac8:	4b4b      	ldr	r3, [pc, #300]	; (9dbf8 <CL_DrepAlarmActon+0x2d0>)
   9daca:	2201      	movs	r2, #1
   9dacc:	701a      	strb	r2, [r3, #0]
				
				Cl_Dprep_Stoppreparation();
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;	
				}
				
			break;
   9dace:	e059      	b.n	9db84 <CL_DrepAlarmActon+0x25c>
				//	cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
				}
				else{
					
				
				Cl_Dprep_Stoppreparation();
   9dad0:	4b42      	ldr	r3, [pc, #264]	; (9dbdc <CL_DrepAlarmActon+0x2b4>)
   9dad2:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;	
   9dad4:	4b3f      	ldr	r3, [pc, #252]	; (9dbd4 <CL_DrepAlarmActon+0x2ac>)
   9dad6:	220c      	movs	r2, #12
   9dad8:	701a      	strb	r2, [r3, #0]
				}
				
			break;
   9dada:	e053      	b.n	9db84 <CL_DrepAlarmActon+0x25c>
			case HOLDER1STATUS_CLOSED:
			case HOLDER2STATUS_CLOSED:
			case ACID_IN_CLOSED:
			case BICARB_IN_CLOSED:
				
			sv_cntrl_setyellowalarm();
   9dadc:	4b43      	ldr	r3, [pc, #268]	; (9dbec <CL_DrepAlarmActon+0x2c4>)
   9dade:	4798      	blx	r3
			sv_cntrl_buzzer();
   9dae0:	4b40      	ldr	r3, [pc, #256]	; (9dbe4 <CL_DrepAlarmActon+0x2bc>)
   9dae2:	4798      	blx	r3
			if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME)||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   9dae4:	4b3b      	ldr	r3, [pc, #236]	; (9dbd4 <CL_DrepAlarmActon+0x2ac>)
   9dae6:	781b      	ldrb	r3, [r3, #0]
   9dae8:	2b06      	cmp	r3, #6
   9daea:	d007      	beq.n	9dafc <CL_DrepAlarmActon+0x1d4>
   9daec:	4b39      	ldr	r3, [pc, #228]	; (9dbd4 <CL_DrepAlarmActon+0x2ac>)
   9daee:	781b      	ldrb	r3, [r3, #0]
   9daf0:	2b0e      	cmp	r3, #14
   9daf2:	d003      	beq.n	9dafc <CL_DrepAlarmActon+0x1d4>
   9daf4:	4b37      	ldr	r3, [pc, #220]	; (9dbd4 <CL_DrepAlarmActon+0x2ac>)
   9daf6:	781b      	ldrb	r3, [r3, #0]
   9daf8:	2b0d      	cmp	r3, #13
   9dafa:	d105      	bne.n	9db08 <CL_DrepAlarmActon+0x1e0>
			{
				sv_cntrl_enable_bypass();
   9dafc:	4b3c      	ldr	r3, [pc, #240]	; (9dbf0 <CL_DrepAlarmActon+0x2c8>)
   9dafe:	4798      	blx	r3
				cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9db00:	4b3d      	ldr	r3, [pc, #244]	; (9dbf8 <CL_DrepAlarmActon+0x2d0>)
   9db02:	2201      	movs	r2, #1
   9db04:	701a      	strb	r2, [r3, #0]
				
				Cl_Dprep_Stoppreparation();
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
			}
			
			break;
   9db06:	e03d      	b.n	9db84 <CL_DrepAlarmActon+0x25c>
			//	cl_dprepstate = CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS;
				
			}
			else{
				
				Cl_Dprep_Stoppreparation();
   9db08:	4b34      	ldr	r3, [pc, #208]	; (9dbdc <CL_DrepAlarmActon+0x2b4>)
   9db0a:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9db0c:	4b31      	ldr	r3, [pc, #196]	; (9dbd4 <CL_DrepAlarmActon+0x2ac>)
   9db0e:	220c      	movs	r2, #12
   9db10:	701a      	strb	r2, [r3, #0]
			}
			
			break;
   9db12:	e037      	b.n	9db84 <CL_DrepAlarmActon+0x25c>
			case TEMP3_HIGH_THRESHOLD:
			case TEMP3_LOW_THRESHOLD:
			case 	COND_STATUS_HIGH:
			case	COND_STATUS_LOW:
			
				sv_cntrl_setyellowalarm();
   9db14:	4b35      	ldr	r3, [pc, #212]	; (9dbec <CL_DrepAlarmActon+0x2c4>)
   9db16:	4798      	blx	r3
				sv_cntrl_buzzer();
   9db18:	4b32      	ldr	r3, [pc, #200]	; (9dbe4 <CL_DrepAlarmActon+0x2bc>)
   9db1a:	4798      	blx	r3
			
			if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   9db1c:	4b2d      	ldr	r3, [pc, #180]	; (9dbd4 <CL_DrepAlarmActon+0x2ac>)
   9db1e:	781b      	ldrb	r3, [r3, #0]
   9db20:	2b06      	cmp	r3, #6
   9db22:	d007      	beq.n	9db34 <CL_DrepAlarmActon+0x20c>
   9db24:	4b2b      	ldr	r3, [pc, #172]	; (9dbd4 <CL_DrepAlarmActon+0x2ac>)
   9db26:	781b      	ldrb	r3, [r3, #0]
   9db28:	2b0e      	cmp	r3, #14
   9db2a:	d003      	beq.n	9db34 <CL_DrepAlarmActon+0x20c>
   9db2c:	4b29      	ldr	r3, [pc, #164]	; (9dbd4 <CL_DrepAlarmActon+0x2ac>)
   9db2e:	781b      	ldrb	r3, [r3, #0]
   9db30:	2b0d      	cmp	r3, #13
   9db32:	d11d      	bne.n	9db70 <CL_DrepAlarmActon+0x248>
			{
				//Cl_Dprep_Stoppreparation();
				sv_cntrl_enable_bypass();
   9db34:	4b2e      	ldr	r3, [pc, #184]	; (9dbf0 <CL_DrepAlarmActon+0x2c8>)
   9db36:	4798      	blx	r3
				cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9db38:	4b2f      	ldr	r3, [pc, #188]	; (9dbf8 <CL_DrepAlarmActon+0x2d0>)
   9db3a:	2201      	movs	r2, #1
   9db3c:	701a      	strb	r2, [r3, #0]
				//cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
				state_counter++;
   9db3e:	4b2f      	ldr	r3, [pc, #188]	; (9dbfc <CL_DrepAlarmActon+0x2d4>)
   9db40:	681b      	ldr	r3, [r3, #0]
   9db42:	3301      	adds	r3, #1
   9db44:	4a2d      	ldr	r2, [pc, #180]	; (9dbfc <CL_DrepAlarmActon+0x2d4>)
   9db46:	6013      	str	r3, [r2, #0]
				Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   9db48:	2100      	movs	r1, #0
   9db4a:	2008      	movs	r0, #8
   9db4c:	4b2c      	ldr	r3, [pc, #176]	; (9dc00 <CL_DrepAlarmActon+0x2d8>)
   9db4e:	4798      	blx	r3
				Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   9db50:	2100      	movs	r1, #0
   9db52:	2007      	movs	r0, #7
   9db54:	4b2a      	ldr	r3, [pc, #168]	; (9dc00 <CL_DrepAlarmActon+0x2d8>)
   9db56:	4798      	blx	r3
				Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   9db58:	2100      	movs	r1, #0
   9db5a:	2013      	movs	r0, #19
   9db5c:	4b28      	ldr	r3, [pc, #160]	; (9dc00 <CL_DrepAlarmActon+0x2d8>)
   9db5e:	4798      	blx	r3
				Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   9db60:	2100      	movs	r1, #0
   9db62:	2014      	movs	r0, #20
   9db64:	4b26      	ldr	r3, [pc, #152]	; (9dc00 <CL_DrepAlarmActon+0x2d8>)
   9db66:	4798      	blx	r3
				
				cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
   9db68:	4b1a      	ldr	r3, [pc, #104]	; (9dbd4 <CL_DrepAlarmActon+0x2ac>)
   9db6a:	220e      	movs	r2, #14
   9db6c:	701a      	strb	r2, [r3, #0]
			else{
				
				Cl_Dprep_Stoppreparation();
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
			}
			break;
   9db6e:	e009      	b.n	9db84 <CL_DrepAlarmActon+0x25c>
				
				cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
			}
			else{
				
				Cl_Dprep_Stoppreparation();
   9db70:	4b1a      	ldr	r3, [pc, #104]	; (9dbdc <CL_DrepAlarmActon+0x2b4>)
   9db72:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9db74:	4b17      	ldr	r3, [pc, #92]	; (9dbd4 <CL_DrepAlarmActon+0x2ac>)
   9db76:	220c      	movs	r2, #12
   9db78:	701a      	strb	r2, [r3, #0]
			}
			break;
   9db7a:	e003      	b.n	9db84 <CL_DrepAlarmActon+0x25c>
			
		
			default:
			cl_dprepalarmid = _NO_ALARM;
   9db7c:	2300      	movs	r3, #0
   9db7e:	71fb      	strb	r3, [r7, #7]
			break;
   9db80:	e000      	b.n	9db84 <CL_DrepAlarmActon+0x25c>
			//		Cl_DprepFlowOff();
					//cl_gfillinprogress = false;		
					
				}
			}
			break;
   9db82:	bf00      	nop
		
			default:
			cl_dprepalarmid = _NO_ALARM;
			break;
	}
		 if(cl_dprepalarmid != _NO_ALARM)
   9db84:	79fb      	ldrb	r3, [r7, #7]
   9db86:	2b00      	cmp	r3, #0
   9db88:	d01f      	beq.n	9dbca <CL_DrepAlarmActon+0x2a2>
		 {
			data[0] = (Cl_Uint8Type)cl_dprepalarmid;
   9db8a:	79fb      	ldrb	r3, [r7, #7]
   9db8c:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   9db8e:	2301      	movs	r3, #1
   9db90:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   9db92:	2302      	movs	r3, #2
   9db94:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   9db96:	2307      	movs	r3, #7
   9db98:	73bb      	strb	r3, [r7, #14]

			Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,3);
   9db9a:	f107 0108 	add.w	r1, r7, #8
   9db9e:	7bbb      	ldrb	r3, [r7, #14]
   9dba0:	2203      	movs	r2, #3
   9dba2:	4618      	mov	r0, r3
   9dba4:	4b17      	ldr	r3, [pc, #92]	; (9dc04 <CL_DrepAlarmActon+0x2dc>)
   9dba6:	4798      	blx	r3
   9dba8:	4603      	mov	r3, r0
   9dbaa:	75fb      	strb	r3, [r7, #23]
			
					
			command = CON_TX_COMMAND_CL_SYS_STATE;
   9dbac:	232b      	movs	r3, #43	; 0x2b
   9dbae:	73bb      	strb	r3, [r7, #14]
			data[0] = (Cl_Uint8Type)POST_CLEAN_STANDBY;
   9dbb0:	2302      	movs	r3, #2
   9dbb2:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type)PRIME_IDLE;
   9dbb4:	2300      	movs	r3, #0
   9dbb6:	727b      	strb	r3, [r7, #9]
			Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,2);
   9dbb8:	f107 0108 	add.w	r1, r7, #8
   9dbbc:	7bbb      	ldrb	r3, [r7, #14]
   9dbbe:	2202      	movs	r2, #2
   9dbc0:	4618      	mov	r0, r3
   9dbc2:	4b10      	ldr	r3, [pc, #64]	; (9dc04 <CL_DrepAlarmActon+0x2dc>)
   9dbc4:	4798      	blx	r3
   9dbc6:	4603      	mov	r3, r0
   9dbc8:	75fb      	strb	r3, [r7, #23]
		 }
			
	return CL_OK;	
   9dbca:	2300      	movs	r3, #0
}
   9dbcc:	4618      	mov	r0, r3
   9dbce:	3718      	adds	r7, #24
   9dbd0:	46bd      	mov	sp, r7
   9dbd2:	bd80      	pop	{r7, pc}
   9dbd4:	2007283b 	.word	0x2007283b
   9dbd8:	0009f9d9 	.word	0x0009f9d9
   9dbdc:	0009e661 	.word	0x0009e661
   9dbe0:	00097c05 	.word	0x00097c05
   9dbe4:	00097c41 	.word	0x00097c41
   9dbe8:	00091eb5 	.word	0x00091eb5
   9dbec:	00097c19 	.word	0x00097c19
   9dbf0:	00097b59 	.word	0x00097b59
   9dbf4:	00087cad 	.word	0x00087cad
   9dbf8:	2007283c 	.word	0x2007283c
   9dbfc:	20072800 	.word	0x20072800
   9dc00:	00082efd 	.word	0x00082efd
   9dc04:	00099729 	.word	0x00099729

0009dc08 <Cl_Dprep_CheckforfillingCompletion>:
				cl_wait(10);

			 }
}	
	Cl_ReturnCodeType Cl_Dprep_CheckforfillingCompletion(void)
	{
   9dc08:	b5f0      	push	{r4, r5, r6, r7, lr}
   9dc0a:	b087      	sub	sp, #28
   9dc0c:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_dprepretcode = CL_ERROR;
   9dc0e:	2304      	movs	r3, #4
   9dc10:	75fb      	strb	r3, [r7, #23]
		Cl_Int16Type cl_cond,cl_temp3;
		float cond,cond_comp,temp;
		float cl_cond_ms,cl_temp3_cel;
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Cl_Dprep_filling_TotalMinutescounter,2);
   9dc12:	2202      	movs	r2, #2
   9dc14:	498a      	ldr	r1, [pc, #552]	; (9de40 <Cl_Dprep_CheckforfillingCompletion+0x238>)
   9dc16:	2019      	movs	r0, #25
   9dc18:	4b8a      	ldr	r3, [pc, #552]	; (9de44 <Cl_Dprep_CheckforfillingCompletion+0x23c>)
   9dc1a:	4798      	blx	r3
		if(Cl_Dprep_filling_TotalMinutescounter > CL_DPREP_FILLING_TIMEOUT_MIN )
   9dc1c:	4b88      	ldr	r3, [pc, #544]	; (9de40 <Cl_Dprep_CheckforfillingCompletion+0x238>)
   9dc1e:	f9b3 3000 	ldrsh.w	r3, [r3]
   9dc22:	2b0a      	cmp	r3, #10
   9dc24:	dd02      	ble.n	9dc2c <Cl_Dprep_CheckforfillingCompletion+0x24>
		{
			
			//Cl_dprepretcode = CL_REJECTED;
			// Rise alarm
			Cl_dprepretcode = CL_OK;
   9dc26:	2300      	movs	r3, #0
   9dc28:	75fb      	strb	r3, [r7, #23]
   9dc2a:	e0e4      	b.n	9ddf6 <Cl_Dprep_CheckforfillingCompletion+0x1ee>
		}
		else
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&cl_temp3);
   9dc2c:	463b      	mov	r3, r7
   9dc2e:	4619      	mov	r1, r3
   9dc30:	2014      	movs	r0, #20
   9dc32:	4b85      	ldr	r3, [pc, #532]	; (9de48 <Cl_Dprep_CheckforfillingCompletion+0x240>)
   9dc34:	4798      	blx	r3
			Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&cl_cond);
   9dc36:	1cbb      	adds	r3, r7, #2
   9dc38:	4619      	mov	r1, r3
   9dc3a:	2007      	movs	r0, #7
   9dc3c:	4b82      	ldr	r3, [pc, #520]	; (9de48 <Cl_Dprep_CheckforfillingCompletion+0x240>)
   9dc3e:	4798      	blx	r3
			
	
			
			uint16_t cal_data  = (402 *100* cl_temp3)/(2*32768);
   9dc40:	f9b7 3000 	ldrsh.w	r3, [r7]
   9dc44:	461a      	mov	r2, r3
   9dc46:	f649 5308 	movw	r3, #40200	; 0x9d08
   9dc4a:	fb03 f302 	mul.w	r3, r3, r2
   9dc4e:	2b00      	cmp	r3, #0
   9dc50:	da02      	bge.n	9dc58 <Cl_Dprep_CheckforfillingCompletion+0x50>
   9dc52:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   9dc56:	33ff      	adds	r3, #255	; 0xff
   9dc58:	141b      	asrs	r3, r3, #16
   9dc5a:	82bb      	strh	r3, [r7, #20]
			res_temp_lookuptable(cal_data);
   9dc5c:	8abb      	ldrh	r3, [r7, #20]
   9dc5e:	4618      	mov	r0, r3
   9dc60:	4b7a      	ldr	r3, [pc, #488]	; (9de4c <Cl_Dprep_CheckforfillingCompletion+0x244>)
   9dc62:	4798      	blx	r3
			float temp = res_temp_value/100;
   9dc64:	4b7a      	ldr	r3, [pc, #488]	; (9de50 <Cl_Dprep_CheckforfillingCompletion+0x248>)
   9dc66:	681a      	ldr	r2, [r3, #0]
   9dc68:	4b7a      	ldr	r3, [pc, #488]	; (9de54 <Cl_Dprep_CheckforfillingCompletion+0x24c>)
   9dc6a:	497b      	ldr	r1, [pc, #492]	; (9de58 <Cl_Dprep_CheckforfillingCompletion+0x250>)
   9dc6c:	4610      	mov	r0, r2
   9dc6e:	4798      	blx	r3
   9dc70:	4603      	mov	r3, r0
   9dc72:	613b      	str	r3, [r7, #16]
			cl_temp3_cel = temp - 3.1 + 1.4;										// sensor offset 
   9dc74:	4b79      	ldr	r3, [pc, #484]	; (9de5c <Cl_Dprep_CheckforfillingCompletion+0x254>)
   9dc76:	6938      	ldr	r0, [r7, #16]
   9dc78:	4798      	blx	r3
   9dc7a:	4c79      	ldr	r4, [pc, #484]	; (9de60 <Cl_Dprep_CheckforfillingCompletion+0x258>)
   9dc7c:	a360      	add	r3, pc, #384	; (adr r3, 9de00 <Cl_Dprep_CheckforfillingCompletion+0x1f8>)
   9dc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   9dc82:	47a0      	blx	r4
   9dc84:	4603      	mov	r3, r0
   9dc86:	460c      	mov	r4, r1
   9dc88:	4618      	mov	r0, r3
   9dc8a:	4621      	mov	r1, r4
   9dc8c:	4c75      	ldr	r4, [pc, #468]	; (9de64 <Cl_Dprep_CheckforfillingCompletion+0x25c>)
   9dc8e:	a35e      	add	r3, pc, #376	; (adr r3, 9de08 <Cl_Dprep_CheckforfillingCompletion+0x200>)
   9dc90:	e9d3 2300 	ldrd	r2, r3, [r3]
   9dc94:	47a0      	blx	r4
   9dc96:	4603      	mov	r3, r0
   9dc98:	460c      	mov	r4, r1
   9dc9a:	4619      	mov	r1, r3
   9dc9c:	4622      	mov	r2, r4
   9dc9e:	4b72      	ldr	r3, [pc, #456]	; (9de68 <Cl_Dprep_CheckforfillingCompletion+0x260>)
   9dca0:	4608      	mov	r0, r1
   9dca2:	4611      	mov	r1, r2
   9dca4:	4798      	blx	r3
   9dca6:	4603      	mov	r3, r0
   9dca8:	60fb      	str	r3, [r7, #12]
			
							
			//cl_temp3_cel = 0.0000116 * temp *temp + 0.0035 *temp + 11.157;
			
									//	cond =(cond*5 + cond_final_cs3)/6;
			cond =  -0.0001 * cl_cond* cl_cond  + 0.36 * cl_cond  - 38.39 ;
   9dcaa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
   9dcae:	4b6f      	ldr	r3, [pc, #444]	; (9de6c <Cl_Dprep_CheckforfillingCompletion+0x264>)
   9dcb0:	4610      	mov	r0, r2
   9dcb2:	4798      	blx	r3
   9dcb4:	4c6e      	ldr	r4, [pc, #440]	; (9de70 <Cl_Dprep_CheckforfillingCompletion+0x268>)
   9dcb6:	a356      	add	r3, pc, #344	; (adr r3, 9de10 <Cl_Dprep_CheckforfillingCompletion+0x208>)
   9dcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   9dcbc:	47a0      	blx	r4
   9dcbe:	4603      	mov	r3, r0
   9dcc0:	460c      	mov	r4, r1
   9dcc2:	461d      	mov	r5, r3
   9dcc4:	4626      	mov	r6, r4
   9dcc6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
   9dcca:	4b68      	ldr	r3, [pc, #416]	; (9de6c <Cl_Dprep_CheckforfillingCompletion+0x264>)
   9dccc:	4610      	mov	r0, r2
   9dcce:	4798      	blx	r3
   9dcd0:	4602      	mov	r2, r0
   9dcd2:	460b      	mov	r3, r1
   9dcd4:	4c66      	ldr	r4, [pc, #408]	; (9de70 <Cl_Dprep_CheckforfillingCompletion+0x268>)
   9dcd6:	4628      	mov	r0, r5
   9dcd8:	4631      	mov	r1, r6
   9dcda:	47a0      	blx	r4
   9dcdc:	4603      	mov	r3, r0
   9dcde:	460c      	mov	r4, r1
   9dce0:	461d      	mov	r5, r3
   9dce2:	4626      	mov	r6, r4
   9dce4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
   9dce8:	4b60      	ldr	r3, [pc, #384]	; (9de6c <Cl_Dprep_CheckforfillingCompletion+0x264>)
   9dcea:	4610      	mov	r0, r2
   9dcec:	4798      	blx	r3
   9dcee:	4c60      	ldr	r4, [pc, #384]	; (9de70 <Cl_Dprep_CheckforfillingCompletion+0x268>)
   9dcf0:	a349      	add	r3, pc, #292	; (adr r3, 9de18 <Cl_Dprep_CheckforfillingCompletion+0x210>)
   9dcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
   9dcf6:	47a0      	blx	r4
   9dcf8:	4603      	mov	r3, r0
   9dcfa:	460c      	mov	r4, r1
   9dcfc:	461a      	mov	r2, r3
   9dcfe:	4623      	mov	r3, r4
   9dd00:	4c58      	ldr	r4, [pc, #352]	; (9de64 <Cl_Dprep_CheckforfillingCompletion+0x25c>)
   9dd02:	4628      	mov	r0, r5
   9dd04:	4631      	mov	r1, r6
   9dd06:	47a0      	blx	r4
   9dd08:	4603      	mov	r3, r0
   9dd0a:	460c      	mov	r4, r1
   9dd0c:	4618      	mov	r0, r3
   9dd0e:	4621      	mov	r1, r4
   9dd10:	4c53      	ldr	r4, [pc, #332]	; (9de60 <Cl_Dprep_CheckforfillingCompletion+0x258>)
   9dd12:	a343      	add	r3, pc, #268	; (adr r3, 9de20 <Cl_Dprep_CheckforfillingCompletion+0x218>)
   9dd14:	e9d3 2300 	ldrd	r2, r3, [r3]
   9dd18:	47a0      	blx	r4
   9dd1a:	4603      	mov	r3, r0
   9dd1c:	460c      	mov	r4, r1
   9dd1e:	4619      	mov	r1, r3
   9dd20:	4622      	mov	r2, r4
   9dd22:	4b51      	ldr	r3, [pc, #324]	; (9de68 <Cl_Dprep_CheckforfillingCompletion+0x260>)
   9dd24:	4608      	mov	r0, r1
   9dd26:	4611      	mov	r1, r2
   9dd28:	4798      	blx	r3
   9dd2a:	4603      	mov	r3, r0
   9dd2c:	60bb      	str	r3, [r7, #8]
			cond_comp= (cond/(1+(cl_temp3_cel-25.0)*0.020))/10;
   9dd2e:	4b4b      	ldr	r3, [pc, #300]	; (9de5c <Cl_Dprep_CheckforfillingCompletion+0x254>)
   9dd30:	68b8      	ldr	r0, [r7, #8]
   9dd32:	4798      	blx	r3
   9dd34:	4605      	mov	r5, r0
   9dd36:	460e      	mov	r6, r1
   9dd38:	4b48      	ldr	r3, [pc, #288]	; (9de5c <Cl_Dprep_CheckforfillingCompletion+0x254>)
   9dd3a:	68f8      	ldr	r0, [r7, #12]
   9dd3c:	4798      	blx	r3
   9dd3e:	4c48      	ldr	r4, [pc, #288]	; (9de60 <Cl_Dprep_CheckforfillingCompletion+0x258>)
   9dd40:	f04f 0200 	mov.w	r2, #0
   9dd44:	4b4b      	ldr	r3, [pc, #300]	; (9de74 <Cl_Dprep_CheckforfillingCompletion+0x26c>)
   9dd46:	47a0      	blx	r4
   9dd48:	4603      	mov	r3, r0
   9dd4a:	460c      	mov	r4, r1
   9dd4c:	4618      	mov	r0, r3
   9dd4e:	4621      	mov	r1, r4
   9dd50:	4c47      	ldr	r4, [pc, #284]	; (9de70 <Cl_Dprep_CheckforfillingCompletion+0x268>)
   9dd52:	a335      	add	r3, pc, #212	; (adr r3, 9de28 <Cl_Dprep_CheckforfillingCompletion+0x220>)
   9dd54:	e9d3 2300 	ldrd	r2, r3, [r3]
   9dd58:	47a0      	blx	r4
   9dd5a:	4603      	mov	r3, r0
   9dd5c:	460c      	mov	r4, r1
   9dd5e:	4618      	mov	r0, r3
   9dd60:	4621      	mov	r1, r4
   9dd62:	4c40      	ldr	r4, [pc, #256]	; (9de64 <Cl_Dprep_CheckforfillingCompletion+0x25c>)
   9dd64:	f04f 0200 	mov.w	r2, #0
   9dd68:	4b43      	ldr	r3, [pc, #268]	; (9de78 <Cl_Dprep_CheckforfillingCompletion+0x270>)
   9dd6a:	47a0      	blx	r4
   9dd6c:	4603      	mov	r3, r0
   9dd6e:	460c      	mov	r4, r1
   9dd70:	461a      	mov	r2, r3
   9dd72:	4623      	mov	r3, r4
   9dd74:	4c41      	ldr	r4, [pc, #260]	; (9de7c <Cl_Dprep_CheckforfillingCompletion+0x274>)
   9dd76:	4628      	mov	r0, r5
   9dd78:	4631      	mov	r1, r6
   9dd7a:	47a0      	blx	r4
   9dd7c:	4603      	mov	r3, r0
   9dd7e:	460c      	mov	r4, r1
   9dd80:	4618      	mov	r0, r3
   9dd82:	4621      	mov	r1, r4
   9dd84:	4c3d      	ldr	r4, [pc, #244]	; (9de7c <Cl_Dprep_CheckforfillingCompletion+0x274>)
   9dd86:	f04f 0200 	mov.w	r2, #0
   9dd8a:	4b3d      	ldr	r3, [pc, #244]	; (9de80 <Cl_Dprep_CheckforfillingCompletion+0x278>)
   9dd8c:	47a0      	blx	r4
   9dd8e:	4603      	mov	r3, r0
   9dd90:	460c      	mov	r4, r1
   9dd92:	4619      	mov	r1, r3
   9dd94:	4622      	mov	r2, r4
   9dd96:	4b34      	ldr	r3, [pc, #208]	; (9de68 <Cl_Dprep_CheckforfillingCompletion+0x260>)
   9dd98:	4608      	mov	r0, r1
   9dd9a:	4611      	mov	r1, r2
   9dd9c:	4798      	blx	r3
   9dd9e:	4603      	mov	r3, r0
   9dda0:	607b      	str	r3, [r7, #4]
			//tempdata.word = (cond_comp);
			  
			if((cond_comp > 13.3) && (cond_comp < 13.8))
   9dda2:	4b2e      	ldr	r3, [pc, #184]	; (9de5c <Cl_Dprep_CheckforfillingCompletion+0x254>)
   9dda4:	6878      	ldr	r0, [r7, #4]
   9dda6:	4798      	blx	r3
   9dda8:	4c36      	ldr	r4, [pc, #216]	; (9de84 <Cl_Dprep_CheckforfillingCompletion+0x27c>)
   9ddaa:	a321      	add	r3, pc, #132	; (adr r3, 9de30 <Cl_Dprep_CheckforfillingCompletion+0x228>)
   9ddac:	e9d3 2300 	ldrd	r2, r3, [r3]
   9ddb0:	47a0      	blx	r4
   9ddb2:	4603      	mov	r3, r0
   9ddb4:	2b00      	cmp	r3, #0
   9ddb6:	d01e      	beq.n	9ddf6 <Cl_Dprep_CheckforfillingCompletion+0x1ee>
   9ddb8:	4b28      	ldr	r3, [pc, #160]	; (9de5c <Cl_Dprep_CheckforfillingCompletion+0x254>)
   9ddba:	6878      	ldr	r0, [r7, #4]
   9ddbc:	4798      	blx	r3
   9ddbe:	4c32      	ldr	r4, [pc, #200]	; (9de88 <Cl_Dprep_CheckforfillingCompletion+0x280>)
   9ddc0:	a31d      	add	r3, pc, #116	; (adr r3, 9de38 <Cl_Dprep_CheckforfillingCompletion+0x230>)
   9ddc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   9ddc6:	47a0      	blx	r4
   9ddc8:	4603      	mov	r3, r0
   9ddca:	2b00      	cmp	r3, #0
   9ddcc:	d013      	beq.n	9ddf6 <Cl_Dprep_CheckforfillingCompletion+0x1ee>
			{
				if ( cl_temp3_cel > 36.5 && cl_temp3_cel < 37.5)
   9ddce:	4b2f      	ldr	r3, [pc, #188]	; (9de8c <Cl_Dprep_CheckforfillingCompletion+0x284>)
   9ddd0:	492f      	ldr	r1, [pc, #188]	; (9de90 <Cl_Dprep_CheckforfillingCompletion+0x288>)
   9ddd2:	68f8      	ldr	r0, [r7, #12]
   9ddd4:	4798      	blx	r3
   9ddd6:	4603      	mov	r3, r0
   9ddd8:	2b00      	cmp	r3, #0
   9ddda:	d00c      	beq.n	9ddf6 <Cl_Dprep_CheckforfillingCompletion+0x1ee>
   9dddc:	4b2d      	ldr	r3, [pc, #180]	; (9de94 <Cl_Dprep_CheckforfillingCompletion+0x28c>)
   9ddde:	492e      	ldr	r1, [pc, #184]	; (9de98 <Cl_Dprep_CheckforfillingCompletion+0x290>)
   9dde0:	68f8      	ldr	r0, [r7, #12]
   9dde2:	4798      	blx	r3
   9dde4:	4603      	mov	r3, r0
   9dde6:	2b00      	cmp	r3, #0
   9dde8:	d005      	beq.n	9ddf6 <Cl_Dprep_CheckforfillingCompletion+0x1ee>
				{
					if(cl_temp3_stable_confirm == true)
   9ddea:	4b2c      	ldr	r3, [pc, #176]	; (9de9c <Cl_Dprep_CheckforfillingCompletion+0x294>)
   9ddec:	781b      	ldrb	r3, [r3, #0]
   9ddee:	2b00      	cmp	r3, #0
   9ddf0:	d001      	beq.n	9ddf6 <Cl_Dprep_CheckforfillingCompletion+0x1ee>
							Cl_dprepretcode = CL_OK;
   9ddf2:	2300      	movs	r3, #0
   9ddf4:	75fb      	strb	r3, [r7, #23]
			}

			
		}
		
		return Cl_dprepretcode;
   9ddf6:	7dfb      	ldrb	r3, [r7, #23]
		
	}
   9ddf8:	4618      	mov	r0, r3
   9ddfa:	371c      	adds	r7, #28
   9ddfc:	46bd      	mov	sp, r7
   9ddfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9de00:	cccccccd 	.word	0xcccccccd
   9de04:	4008cccc 	.word	0x4008cccc
   9de08:	66666666 	.word	0x66666666
   9de0c:	3ff66666 	.word	0x3ff66666
   9de10:	eb1c432d 	.word	0xeb1c432d
   9de14:	bf1a36e2 	.word	0xbf1a36e2
   9de18:	70a3d70a 	.word	0x70a3d70a
   9de1c:	3fd70a3d 	.word	0x3fd70a3d
   9de20:	851eb852 	.word	0x851eb852
   9de24:	404331eb 	.word	0x404331eb
   9de28:	47ae147b 	.word	0x47ae147b
   9de2c:	3f947ae1 	.word	0x3f947ae1
   9de30:	9999999a 	.word	0x9999999a
   9de34:	402a9999 	.word	0x402a9999
   9de38:	9999999a 	.word	0x9999999a
   9de3c:	402b9999 	.word	0x402b9999
   9de40:	2007281e 	.word	0x2007281e
   9de44:	00099729 	.word	0x00099729
   9de48:	0008d6b1 	.word	0x0008d6b1
   9de4c:	0008e8e1 	.word	0x0008e8e1
   9de50:	20072630 	.word	0x20072630
   9de54:	000a3f7d 	.word	0x000a3f7d
   9de58:	42c80000 	.word	0x42c80000
   9de5c:	000a34ed 	.word	0x000a34ed
   9de60:	000a322d 	.word	0x000a322d
   9de64:	000a3231 	.word	0x000a3231
   9de68:	000a3b59 	.word	0x000a3b59
   9de6c:	000a34c9 	.word	0x000a34c9
   9de70:	000a3595 	.word	0x000a3595
   9de74:	40390000 	.word	0x40390000
   9de78:	3ff00000 	.word	0x3ff00000
   9de7c:	000a37e9 	.word	0x000a37e9
   9de80:	40240000 	.word	0x40240000
   9de84:	000a3ab5 	.word	0x000a3ab5
   9de88:	000a3a79 	.word	0x000a3a79
   9de8c:	000a418d 	.word	0x000a418d
   9de90:	42120000 	.word	0x42120000
   9de94:	000a4151 	.word	0x000a4151
   9de98:	42160000 	.word	0x42160000
   9de9c:	20072834 	.word	0x20072834

0009dea0 <Cl_DprepSelectDialysateInlet>:
		
	}
	
	
	Cl_ReturnCodeType  Cl_DprepSelectDialysateInlet(void)
	{
   9dea0:	b580      	push	{r7, lr}
   9dea2:	b082      	sub	sp, #8
   9dea4:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_RetVal = CL_OK;
   9dea6:	2300      	movs	r3, #0
   9dea8:	71fb      	strb	r3, [r7, #7]
		//sv_cntrl_deactivate_valve(VALVE_ID18);
		//sv_cntrl_activate_valve(VALVE_ID19);
		sv_cntrl_activate_valve(VALVE_ID18);
   9deaa:	2012      	movs	r0, #18
   9deac:	4b03      	ldr	r3, [pc, #12]	; (9debc <Cl_DprepSelectDialysateInlet+0x1c>)
   9deae:	4798      	blx	r3
		return Cl_RetVal;
   9deb0:	79fb      	ldrb	r3, [r7, #7]
	}
   9deb2:	4618      	mov	r0, r3
   9deb4:	3708      	adds	r7, #8
   9deb6:	46bd      	mov	sp, r7
   9deb8:	bd80      	pop	{r7, pc}
   9deba:	bf00      	nop
   9debc:	000979ad 	.word	0x000979ad

0009dec0 <UpdateDprepFillingMinuteTick>:
					Cl_dpreptcode = Cl_Dprep_UpdateTimeInfo();
					return Cl_dpreptcode;
}

Cl_ReturnCodeType UpdateDprepFillingMinuteTick(void)
{
   9dec0:	b480      	push	{r7}
   9dec2:	b083      	sub	sp, #12
   9dec4:	af00      	add	r7, sp, #0
					Cl_ReturnCodeType Cl_dpreptcode = CL_OK;
   9dec6:	2300      	movs	r3, #0
   9dec8:	71fb      	strb	r3, [r7, #7]

					Cl_Dprep_filling_secondscounter = 0;
   9deca:	4b0d      	ldr	r3, [pc, #52]	; (9df00 <UpdateDprepFillingMinuteTick+0x40>)
   9decc:	2200      	movs	r2, #0
   9dece:	801a      	strh	r2, [r3, #0]
					Cl_Dprep_filling_Minutescounter++;
   9ded0:	4b0c      	ldr	r3, [pc, #48]	; (9df04 <UpdateDprepFillingMinuteTick+0x44>)
   9ded2:	f9b3 3000 	ldrsh.w	r3, [r3]
   9ded6:	b29b      	uxth	r3, r3
   9ded8:	3301      	adds	r3, #1
   9deda:	b29b      	uxth	r3, r3
   9dedc:	b21a      	sxth	r2, r3
   9dede:	4b09      	ldr	r3, [pc, #36]	; (9df04 <UpdateDprepFillingMinuteTick+0x44>)
   9dee0:	801a      	strh	r2, [r3, #0]
					Cl_Dprep_filling_TotalMinutescounter++;
   9dee2:	4b09      	ldr	r3, [pc, #36]	; (9df08 <UpdateDprepFillingMinuteTick+0x48>)
   9dee4:	f9b3 3000 	ldrsh.w	r3, [r3]
   9dee8:	b29b      	uxth	r3, r3
   9deea:	3301      	adds	r3, #1
   9deec:	b29b      	uxth	r3, r3
   9deee:	b21a      	sxth	r2, r3
   9def0:	4b05      	ldr	r3, [pc, #20]	; (9df08 <UpdateDprepFillingMinuteTick+0x48>)
   9def2:	801a      	strh	r2, [r3, #0]

			//		Cl_dpreptcode = Cl_Dprep_UpdateFillingTimeInfo();
					return Cl_dpreptcode;
   9def4:	79fb      	ldrb	r3, [r7, #7]
					

}
   9def6:	4618      	mov	r0, r3
   9def8:	370c      	adds	r7, #12
   9defa:	46bd      	mov	sp, r7
   9defc:	bc80      	pop	{r7}
   9defe:	4770      	bx	lr
   9df00:	2007281a 	.word	0x2007281a
   9df04:	2007281c 	.word	0x2007281c
   9df08:	2007281e 	.word	0x2007281e

0009df0c <UpdateDprepDialyserPrimeMinuteTick>:
	

}

Cl_ReturnCodeType UpdateDprepDialyserPrimeMinuteTick(void)
{
   9df0c:	b580      	push	{r7, lr}
   9df0e:	b082      	sub	sp, #8
   9df10:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_dpreptcode = CL_OK;
   9df12:	2300      	movs	r3, #0
   9df14:	71fb      	strb	r3, [r7, #7]

	Cl_Dprep_DialyserPrime_secondscounter = 0;
   9df16:	4b0f      	ldr	r3, [pc, #60]	; (9df54 <UpdateDprepDialyserPrimeMinuteTick+0x48>)
   9df18:	2200      	movs	r2, #0
   9df1a:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_Minutescounter++;
   9df1c:	4b0e      	ldr	r3, [pc, #56]	; (9df58 <UpdateDprepDialyserPrimeMinuteTick+0x4c>)
   9df1e:	f9b3 3000 	ldrsh.w	r3, [r3]
   9df22:	b29b      	uxth	r3, r3
   9df24:	3301      	adds	r3, #1
   9df26:	b29b      	uxth	r3, r3
   9df28:	b21a      	sxth	r2, r3
   9df2a:	4b0b      	ldr	r3, [pc, #44]	; (9df58 <UpdateDprepDialyserPrimeMinuteTick+0x4c>)
   9df2c:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_TotalMinutescounter++;
   9df2e:	4b0b      	ldr	r3, [pc, #44]	; (9df5c <UpdateDprepDialyserPrimeMinuteTick+0x50>)
   9df30:	f9b3 3000 	ldrsh.w	r3, [r3]
   9df34:	b29b      	uxth	r3, r3
   9df36:	3301      	adds	r3, #1
   9df38:	b29b      	uxth	r3, r3
   9df3a:	b21a      	sxth	r2, r3
   9df3c:	4b07      	ldr	r3, [pc, #28]	; (9df5c <UpdateDprepDialyserPrimeMinuteTick+0x50>)
   9df3e:	801a      	strh	r2, [r3, #0]

	Cl_dpreptcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   9df40:	4b07      	ldr	r3, [pc, #28]	; (9df60 <UpdateDprepDialyserPrimeMinuteTick+0x54>)
   9df42:	4798      	blx	r3
   9df44:	4603      	mov	r3, r0
   9df46:	71fb      	strb	r3, [r7, #7]
	return Cl_dpreptcode;
   9df48:	79fb      	ldrb	r3, [r7, #7]
	

}
   9df4a:	4618      	mov	r0, r3
   9df4c:	3708      	adds	r7, #8
   9df4e:	46bd      	mov	sp, r7
   9df50:	bd80      	pop	{r7, pc}
   9df52:	bf00      	nop
   9df54:	20072826 	.word	0x20072826
   9df58:	20072828 	.word	0x20072828
   9df5c:	2007282a 	.word	0x2007282a
   9df60:	00088691 	.word	0x00088691
   9df64:	00000000 	.word	0x00000000

0009df68 <Cl_Dprep_SendPrepStateData>:
//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
return CL_OK;	
	
}
Cl_ReturnCodeType Cl_Dprep_SendPrepStateData(Cl_Console_bulkdatatype datatype)
{
   9df68:	b5f0      	push	{r4, r5, r6, r7, lr}
   9df6a:	b09b      	sub	sp, #108	; 0x6c
   9df6c:	af00      	add	r7, sp, #0
   9df6e:	4603      	mov	r3, r0
   9df70:	71fb      	strb	r3, [r7, #7]
	static float cond = 0;
	Cl_Uint8Type systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   9df72:	f107 0318 	add.w	r3, r7, #24
   9df76:	2228      	movs	r2, #40	; 0x28
   9df78:	2100      	movs	r1, #0
   9df7a:	4618      	mov	r0, r3
   9df7c:	4bb0      	ldr	r3, [pc, #704]	; (9e240 <Cl_Dprep_SendPrepStateData+0x2d8>)
   9df7e:	4798      	blx	r3
	cl_PrepDatatype tempdata;
	Cl_Uint16Type temp=0, temp1=0, sensordata = 0;
   9df80:	2300      	movs	r3, #0
   9df82:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
   9df86:	2300      	movs	r3, #0
   9df88:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
   9df8c:	2300      	movs	r3, #0
   9df8e:	81fb      	strh	r3, [r7, #14]
	static Cl_Uint32Type timecount = 0;
	static float tmp3=0,apt=0,vpt=0,TMP =0;
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9df90:	2300      	movs	r3, #0
   9df92:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	Cl_Uint8Type count = 0;
   9df96:	2300      	movs	r3, #0
   9df98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9df9c:	234d      	movs	r3, #77	; 0x4d
   9df9e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	TMP,
	*/
	
	

					command = CON_TX_COMMAND_CL_SYS_STATE_DATA ;
   9dfa2:	232a      	movs	r3, #42	; 0x2a
   9dfa4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
					systemdataarray[0] = datatype;
   9dfa8:	79fb      	ldrb	r3, [r7, #7]
   9dfaa:	763b      	strb	r3, [r7, #24]
					count++;
   9dfac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9dfb0:	3301      	adds	r3, #1
   9dfb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					
						Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   9dfb6:	f107 030e 	add.w	r3, r7, #14
   9dfba:	4619      	mov	r1, r3
   9dfbc:	2014      	movs	r0, #20
   9dfbe:	4ba1      	ldr	r3, [pc, #644]	; (9e244 <Cl_Dprep_SendPrepStateData+0x2dc>)
   9dfc0:	4798      	blx	r3
						{
							
							float ftemp,ftemp1,temp1;

							uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
   9dfc2:	89fb      	ldrh	r3, [r7, #14]
   9dfc4:	461a      	mov	r2, r3
   9dfc6:	f649 5308 	movw	r3, #40200	; 0x9d08
   9dfca:	fb03 f302 	mul.w	r3, r3, r2
   9dfce:	2b00      	cmp	r3, #0
   9dfd0:	da02      	bge.n	9dfd8 <Cl_Dprep_SendPrepStateData+0x70>
   9dfd2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   9dfd6:	33ff      	adds	r3, #255	; 0xff
   9dfd8:	141b      	asrs	r3, r3, #16
   9dfda:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
							res_temp_lookuptable(cal_data);
   9dfde:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   9dfe2:	4618      	mov	r0, r3
   9dfe4:	4b98      	ldr	r3, [pc, #608]	; (9e248 <Cl_Dprep_SendPrepStateData+0x2e0>)
   9dfe6:	4798      	blx	r3
							uint16_t temp = res_temp_value/10;
   9dfe8:	4b98      	ldr	r3, [pc, #608]	; (9e24c <Cl_Dprep_SendPrepStateData+0x2e4>)
   9dfea:	681a      	ldr	r2, [r3, #0]
   9dfec:	4b98      	ldr	r3, [pc, #608]	; (9e250 <Cl_Dprep_SendPrepStateData+0x2e8>)
   9dfee:	4999      	ldr	r1, [pc, #612]	; (9e254 <Cl_Dprep_SendPrepStateData+0x2ec>)
   9dff0:	4610      	mov	r0, r2
   9dff2:	4798      	blx	r3
   9dff4:	4603      	mov	r3, r0
   9dff6:	461a      	mov	r2, r3
   9dff8:	4b97      	ldr	r3, [pc, #604]	; (9e258 <Cl_Dprep_SendPrepStateData+0x2f0>)
   9dffa:	4610      	mov	r0, r2
   9dffc:	4798      	blx	r3
   9dffe:	4603      	mov	r3, r0
   9e000:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
							temp = temp - 3.1 + 1.4;										// sensor offset 
   9e004:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
   9e008:	4b94      	ldr	r3, [pc, #592]	; (9e25c <Cl_Dprep_SendPrepStateData+0x2f4>)
   9e00a:	4610      	mov	r0, r2
   9e00c:	4798      	blx	r3
   9e00e:	4c94      	ldr	r4, [pc, #592]	; (9e260 <Cl_Dprep_SendPrepStateData+0x2f8>)
   9e010:	a37b      	add	r3, pc, #492	; (adr r3, 9e200 <Cl_Dprep_SendPrepStateData+0x298>)
   9e012:	e9d3 2300 	ldrd	r2, r3, [r3]
   9e016:	47a0      	blx	r4
   9e018:	4603      	mov	r3, r0
   9e01a:	460c      	mov	r4, r1
   9e01c:	4618      	mov	r0, r3
   9e01e:	4621      	mov	r1, r4
   9e020:	4c90      	ldr	r4, [pc, #576]	; (9e264 <Cl_Dprep_SendPrepStateData+0x2fc>)
   9e022:	a379      	add	r3, pc, #484	; (adr r3, 9e208 <Cl_Dprep_SendPrepStateData+0x2a0>)
   9e024:	e9d3 2300 	ldrd	r2, r3, [r3]
   9e028:	47a0      	blx	r4
   9e02a:	4603      	mov	r3, r0
   9e02c:	460c      	mov	r4, r1
   9e02e:	4619      	mov	r1, r3
   9e030:	4622      	mov	r2, r4
   9e032:	4b8d      	ldr	r3, [pc, #564]	; (9e268 <Cl_Dprep_SendPrepStateData+0x300>)
   9e034:	4608      	mov	r0, r1
   9e036:	4611      	mov	r1, r2
   9e038:	4798      	blx	r3
   9e03a:	4603      	mov	r3, r0
   9e03c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
							tmp3 =(tmp3*5 + temp)/6;
   9e040:	4b8a      	ldr	r3, [pc, #552]	; (9e26c <Cl_Dprep_SendPrepStateData+0x304>)
   9e042:	681a      	ldr	r2, [r3, #0]
   9e044:	4b8a      	ldr	r3, [pc, #552]	; (9e270 <Cl_Dprep_SendPrepStateData+0x308>)
   9e046:	498b      	ldr	r1, [pc, #556]	; (9e274 <Cl_Dprep_SendPrepStateData+0x30c>)
   9e048:	4610      	mov	r0, r2
   9e04a:	4798      	blx	r3
   9e04c:	4603      	mov	r3, r0
   9e04e:	461c      	mov	r4, r3
   9e050:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
   9e054:	4b88      	ldr	r3, [pc, #544]	; (9e278 <Cl_Dprep_SendPrepStateData+0x310>)
   9e056:	4610      	mov	r0, r2
   9e058:	4798      	blx	r3
   9e05a:	4602      	mov	r2, r0
   9e05c:	4b87      	ldr	r3, [pc, #540]	; (9e27c <Cl_Dprep_SendPrepStateData+0x314>)
   9e05e:	4611      	mov	r1, r2
   9e060:	4620      	mov	r0, r4
   9e062:	4798      	blx	r3
   9e064:	4603      	mov	r3, r0
   9e066:	461a      	mov	r2, r3
   9e068:	4b79      	ldr	r3, [pc, #484]	; (9e250 <Cl_Dprep_SendPrepStateData+0x2e8>)
   9e06a:	4985      	ldr	r1, [pc, #532]	; (9e280 <Cl_Dprep_SendPrepStateData+0x318>)
   9e06c:	4610      	mov	r0, r2
   9e06e:	4798      	blx	r3
   9e070:	4603      	mov	r3, r0
   9e072:	461a      	mov	r2, r3
   9e074:	4b7d      	ldr	r3, [pc, #500]	; (9e26c <Cl_Dprep_SendPrepStateData+0x304>)
   9e076:	601a      	str	r2, [r3, #0]

							
						}
						
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   9e078:	f107 030e 	add.w	r3, r7, #14
   9e07c:	4619      	mov	r1, r3
   9e07e:	2007      	movs	r0, #7
   9e080:	4b70      	ldr	r3, [pc, #448]	; (9e244 <Cl_Dprep_SendPrepStateData+0x2dc>)
   9e082:	4798      	blx	r3
					{
					
						float cond_comp=0;
   9e084:	f04f 0300 	mov.w	r3, #0
   9e088:	65bb      	str	r3, [r7, #88]	; 0x58
						float temp2=0;
   9e08a:	f04f 0300 	mov.w	r3, #0
   9e08e:	657b      	str	r3, [r7, #84]	; 0x54
						float	 cond1,	cond_final, cond1x100, cond_final_X10000;
					//	temp2 = temp * 0.8036;
					sensordata = sensordata/10;
   9e090:	89fb      	ldrh	r3, [r7, #14]
   9e092:	4a7c      	ldr	r2, [pc, #496]	; (9e284 <Cl_Dprep_SendPrepStateData+0x31c>)
   9e094:	fba2 2303 	umull	r2, r3, r2, r3
   9e098:	08db      	lsrs	r3, r3, #3
   9e09a:	b29b      	uxth	r3, r3
   9e09c:	81fb      	strh	r3, [r7, #14]
						if (sensordata > 50)
   9e09e:	89fb      	ldrh	r3, [r7, #14]
   9e0a0:	2b32      	cmp	r3, #50	; 0x32
   9e0a2:	f240 8130 	bls.w	9e306 <Cl_Dprep_SendPrepStateData+0x39e>
						//	cond =(cond*5 + cond_final_cs3)/6;
						
								
								//	sensordata  = 25600;
								
								cond1 = sensordata/100;
   9e0a6:	89fb      	ldrh	r3, [r7, #14]
   9e0a8:	4a77      	ldr	r2, [pc, #476]	; (9e288 <Cl_Dprep_SendPrepStateData+0x320>)
   9e0aa:	fba2 2303 	umull	r2, r3, r2, r3
   9e0ae:	095b      	lsrs	r3, r3, #5
   9e0b0:	b29b      	uxth	r3, r3
   9e0b2:	461a      	mov	r2, r3
   9e0b4:	4b70      	ldr	r3, [pc, #448]	; (9e278 <Cl_Dprep_SendPrepStateData+0x310>)
   9e0b6:	4610      	mov	r0, r2
   9e0b8:	4798      	blx	r3
   9e0ba:	4603      	mov	r3, r0
   9e0bc:	653b      	str	r3, [r7, #80]	; 0x50
								cond_final = 0.0001*cond1*cond1 + 0.032*cond1 +0.91 + 0.4;
   9e0be:	4b73      	ldr	r3, [pc, #460]	; (9e28c <Cl_Dprep_SendPrepStateData+0x324>)
   9e0c0:	6d38      	ldr	r0, [r7, #80]	; 0x50
   9e0c2:	4798      	blx	r3
   9e0c4:	4c72      	ldr	r4, [pc, #456]	; (9e290 <Cl_Dprep_SendPrepStateData+0x328>)
   9e0c6:	a352      	add	r3, pc, #328	; (adr r3, 9e210 <Cl_Dprep_SendPrepStateData+0x2a8>)
   9e0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   9e0cc:	47a0      	blx	r4
   9e0ce:	4603      	mov	r3, r0
   9e0d0:	460c      	mov	r4, r1
   9e0d2:	461d      	mov	r5, r3
   9e0d4:	4626      	mov	r6, r4
   9e0d6:	4b6d      	ldr	r3, [pc, #436]	; (9e28c <Cl_Dprep_SendPrepStateData+0x324>)
   9e0d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
   9e0da:	4798      	blx	r3
   9e0dc:	4602      	mov	r2, r0
   9e0de:	460b      	mov	r3, r1
   9e0e0:	4c6b      	ldr	r4, [pc, #428]	; (9e290 <Cl_Dprep_SendPrepStateData+0x328>)
   9e0e2:	4628      	mov	r0, r5
   9e0e4:	4631      	mov	r1, r6
   9e0e6:	47a0      	blx	r4
   9e0e8:	4603      	mov	r3, r0
   9e0ea:	460c      	mov	r4, r1
   9e0ec:	461d      	mov	r5, r3
   9e0ee:	4626      	mov	r6, r4
   9e0f0:	4b66      	ldr	r3, [pc, #408]	; (9e28c <Cl_Dprep_SendPrepStateData+0x324>)
   9e0f2:	6d38      	ldr	r0, [r7, #80]	; 0x50
   9e0f4:	4798      	blx	r3
   9e0f6:	4c66      	ldr	r4, [pc, #408]	; (9e290 <Cl_Dprep_SendPrepStateData+0x328>)
   9e0f8:	a347      	add	r3, pc, #284	; (adr r3, 9e218 <Cl_Dprep_SendPrepStateData+0x2b0>)
   9e0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   9e0fe:	47a0      	blx	r4
   9e100:	4603      	mov	r3, r0
   9e102:	460c      	mov	r4, r1
   9e104:	461a      	mov	r2, r3
   9e106:	4623      	mov	r3, r4
   9e108:	4c56      	ldr	r4, [pc, #344]	; (9e264 <Cl_Dprep_SendPrepStateData+0x2fc>)
   9e10a:	4628      	mov	r0, r5
   9e10c:	4631      	mov	r1, r6
   9e10e:	47a0      	blx	r4
   9e110:	4603      	mov	r3, r0
   9e112:	460c      	mov	r4, r1
   9e114:	4618      	mov	r0, r3
   9e116:	4621      	mov	r1, r4
   9e118:	4c52      	ldr	r4, [pc, #328]	; (9e264 <Cl_Dprep_SendPrepStateData+0x2fc>)
   9e11a:	a341      	add	r3, pc, #260	; (adr r3, 9e220 <Cl_Dprep_SendPrepStateData+0x2b8>)
   9e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
   9e120:	47a0      	blx	r4
   9e122:	4603      	mov	r3, r0
   9e124:	460c      	mov	r4, r1
   9e126:	4618      	mov	r0, r3
   9e128:	4621      	mov	r1, r4
   9e12a:	4c4e      	ldr	r4, [pc, #312]	; (9e264 <Cl_Dprep_SendPrepStateData+0x2fc>)
   9e12c:	a33e      	add	r3, pc, #248	; (adr r3, 9e228 <Cl_Dprep_SendPrepStateData+0x2c0>)
   9e12e:	e9d3 2300 	ldrd	r2, r3, [r3]
   9e132:	47a0      	blx	r4
   9e134:	4603      	mov	r3, r0
   9e136:	460c      	mov	r4, r1
   9e138:	4619      	mov	r1, r3
   9e13a:	4622      	mov	r2, r4
   9e13c:	4b55      	ldr	r3, [pc, #340]	; (9e294 <Cl_Dprep_SendPrepStateData+0x32c>)
   9e13e:	4608      	mov	r0, r1
   9e140:	4611      	mov	r1, r2
   9e142:	4798      	blx	r3
   9e144:	4603      	mov	r3, r0
   9e146:	64fb      	str	r3, [r7, #76]	; 0x4c
								cond1x100 = cond_final*100; ;
   9e148:	4b49      	ldr	r3, [pc, #292]	; (9e270 <Cl_Dprep_SendPrepStateData+0x308>)
   9e14a:	4953      	ldr	r1, [pc, #332]	; (9e298 <Cl_Dprep_SendPrepStateData+0x330>)
   9e14c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   9e14e:	4798      	blx	r3
   9e150:	4603      	mov	r3, r0
   9e152:	64bb      	str	r3, [r7, #72]	; 0x48
								cond_final_X10000= (cond1x100/(1+(tmp3/10  -25.0)*0.021));
   9e154:	4b4d      	ldr	r3, [pc, #308]	; (9e28c <Cl_Dprep_SendPrepStateData+0x324>)
   9e156:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   9e158:	4798      	blx	r3
   9e15a:	4605      	mov	r5, r0
   9e15c:	460e      	mov	r6, r1
   9e15e:	4b43      	ldr	r3, [pc, #268]	; (9e26c <Cl_Dprep_SendPrepStateData+0x304>)
   9e160:	681a      	ldr	r2, [r3, #0]
   9e162:	4b3b      	ldr	r3, [pc, #236]	; (9e250 <Cl_Dprep_SendPrepStateData+0x2e8>)
   9e164:	493b      	ldr	r1, [pc, #236]	; (9e254 <Cl_Dprep_SendPrepStateData+0x2ec>)
   9e166:	4610      	mov	r0, r2
   9e168:	4798      	blx	r3
   9e16a:	4603      	mov	r3, r0
   9e16c:	461a      	mov	r2, r3
   9e16e:	4b47      	ldr	r3, [pc, #284]	; (9e28c <Cl_Dprep_SendPrepStateData+0x324>)
   9e170:	4610      	mov	r0, r2
   9e172:	4798      	blx	r3
   9e174:	4c3a      	ldr	r4, [pc, #232]	; (9e260 <Cl_Dprep_SendPrepStateData+0x2f8>)
   9e176:	f04f 0200 	mov.w	r2, #0
   9e17a:	4b48      	ldr	r3, [pc, #288]	; (9e29c <Cl_Dprep_SendPrepStateData+0x334>)
   9e17c:	47a0      	blx	r4
   9e17e:	4603      	mov	r3, r0
   9e180:	460c      	mov	r4, r1
   9e182:	4618      	mov	r0, r3
   9e184:	4621      	mov	r1, r4
   9e186:	4c42      	ldr	r4, [pc, #264]	; (9e290 <Cl_Dprep_SendPrepStateData+0x328>)
   9e188:	a329      	add	r3, pc, #164	; (adr r3, 9e230 <Cl_Dprep_SendPrepStateData+0x2c8>)
   9e18a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9e18e:	47a0      	blx	r4
   9e190:	4603      	mov	r3, r0
   9e192:	460c      	mov	r4, r1
   9e194:	4618      	mov	r0, r3
   9e196:	4621      	mov	r1, r4
   9e198:	4c32      	ldr	r4, [pc, #200]	; (9e264 <Cl_Dprep_SendPrepStateData+0x2fc>)
   9e19a:	f04f 0200 	mov.w	r2, #0
   9e19e:	4b40      	ldr	r3, [pc, #256]	; (9e2a0 <Cl_Dprep_SendPrepStateData+0x338>)
   9e1a0:	47a0      	blx	r4
   9e1a2:	4603      	mov	r3, r0
   9e1a4:	460c      	mov	r4, r1
   9e1a6:	461a      	mov	r2, r3
   9e1a8:	4623      	mov	r3, r4
   9e1aa:	4c3e      	ldr	r4, [pc, #248]	; (9e2a4 <Cl_Dprep_SendPrepStateData+0x33c>)
   9e1ac:	4628      	mov	r0, r5
   9e1ae:	4631      	mov	r1, r6
   9e1b0:	47a0      	blx	r4
   9e1b2:	4603      	mov	r3, r0
   9e1b4:	460c      	mov	r4, r1
   9e1b6:	4619      	mov	r1, r3
   9e1b8:	4622      	mov	r2, r4
   9e1ba:	4b36      	ldr	r3, [pc, #216]	; (9e294 <Cl_Dprep_SendPrepStateData+0x32c>)
   9e1bc:	4608      	mov	r0, r1
   9e1be:	4611      	mov	r1, r2
   9e1c0:	4798      	blx	r3
   9e1c2:	4603      	mov	r3, r0
   9e1c4:	647b      	str	r3, [r7, #68]	; 0x44
								cond_final_X10000 =	cond_final_X10000 * 5.3 ;
   9e1c6:	4b31      	ldr	r3, [pc, #196]	; (9e28c <Cl_Dprep_SendPrepStateData+0x324>)
   9e1c8:	6c78      	ldr	r0, [r7, #68]	; 0x44
   9e1ca:	4798      	blx	r3
   9e1cc:	4c30      	ldr	r4, [pc, #192]	; (9e290 <Cl_Dprep_SendPrepStateData+0x328>)
   9e1ce:	a31a      	add	r3, pc, #104	; (adr r3, 9e238 <Cl_Dprep_SendPrepStateData+0x2d0>)
   9e1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   9e1d4:	47a0      	blx	r4
   9e1d6:	4603      	mov	r3, r0
   9e1d8:	460c      	mov	r4, r1
   9e1da:	4619      	mov	r1, r3
   9e1dc:	4622      	mov	r2, r4
   9e1de:	4b2d      	ldr	r3, [pc, #180]	; (9e294 <Cl_Dprep_SendPrepStateData+0x32c>)
   9e1e0:	4608      	mov	r0, r1
   9e1e2:	4611      	mov	r1, r2
   9e1e4:	4798      	blx	r3
   9e1e6:	4603      	mov	r3, r0
   9e1e8:	647b      	str	r3, [r7, #68]	; 0x44
								
								
							//	cond =  -0.0001 * temp* temp  + 0.36 * temp  - 38.39 ;
							//	cond_comp= cond/(1+(tmp3/100-25.0)*0.020);
								tempdata.word = (cond_final_X10000/10);
   9e1ea:	4b19      	ldr	r3, [pc, #100]	; (9e250 <Cl_Dprep_SendPrepStateData+0x2e8>)
   9e1ec:	4919      	ldr	r1, [pc, #100]	; (9e254 <Cl_Dprep_SendPrepStateData+0x2ec>)
   9e1ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
   9e1f0:	4798      	blx	r3
   9e1f2:	4603      	mov	r3, r0
   9e1f4:	461a      	mov	r2, r3
   9e1f6:	4b18      	ldr	r3, [pc, #96]	; (9e258 <Cl_Dprep_SendPrepStateData+0x2f0>)
   9e1f8:	4610      	mov	r0, r2
   9e1fa:	4798      	blx	r3
   9e1fc:	e054      	b.n	9e2a8 <Cl_Dprep_SendPrepStateData+0x340>
   9e1fe:	bf00      	nop
   9e200:	cccccccd 	.word	0xcccccccd
   9e204:	4008cccc 	.word	0x4008cccc
   9e208:	66666666 	.word	0x66666666
   9e20c:	3ff66666 	.word	0x3ff66666
   9e210:	eb1c432d 	.word	0xeb1c432d
   9e214:	3f1a36e2 	.word	0x3f1a36e2
   9e218:	d2f1a9fc 	.word	0xd2f1a9fc
   9e21c:	3fa0624d 	.word	0x3fa0624d
   9e220:	51eb851f 	.word	0x51eb851f
   9e224:	3fed1eb8 	.word	0x3fed1eb8
   9e228:	9999999a 	.word	0x9999999a
   9e22c:	3fd99999 	.word	0x3fd99999
   9e230:	24dd2f1b 	.word	0x24dd2f1b
   9e234:	3f958106 	.word	0x3f958106
   9e238:	33333333 	.word	0x33333333
   9e23c:	40153333 	.word	0x40153333
   9e240:	000a4369 	.word	0x000a4369
   9e244:	0008d6b1 	.word	0x0008d6b1
   9e248:	0008e8e1 	.word	0x0008e8e1
   9e24c:	20072630 	.word	0x20072630
   9e250:	000a3f7d 	.word	0x000a3f7d
   9e254:	41200000 	.word	0x41200000
   9e258:	000a41ed 	.word	0x000a41ed
   9e25c:	000a34c9 	.word	0x000a34c9
   9e260:	000a322d 	.word	0x000a322d
   9e264:	000a3231 	.word	0x000a3231
   9e268:	000a3b19 	.word	0x000a3b19
   9e26c:	20072854 	.word	0x20072854
   9e270:	000a3e15 	.word	0x000a3e15
   9e274:	40a00000 	.word	0x40a00000
   9e278:	000a3d6d 	.word	0x000a3d6d
   9e27c:	000a3c05 	.word	0x000a3c05
   9e280:	40c00000 	.word	0x40c00000
   9e284:	cccccccd 	.word	0xcccccccd
   9e288:	51eb851f 	.word	0x51eb851f
   9e28c:	000a34ed 	.word	0x000a34ed
   9e290:	000a3595 	.word	0x000a3595
   9e294:	000a3b59 	.word	0x000a3b59
   9e298:	42c80000 	.word	0x42c80000
   9e29c:	40390000 	.word	0x40390000
   9e2a0:	3ff00000 	.word	0x3ff00000
   9e2a4:	000a37e9 	.word	0x000a37e9
   9e2a8:	4603      	mov	r3, r0
   9e2aa:	613b      	str	r3, [r7, #16]
								
								systemdataarray[count++] = tempdata.bytearray[0];
   9e2ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e2b0:	1c5a      	adds	r2, r3, #1
   9e2b2:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e2b6:	7c3a      	ldrb	r2, [r7, #16]
   9e2b8:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e2bc:	440b      	add	r3, r1
   9e2be:	f803 2c50 	strb.w	r2, [r3, #-80]
								systemdataarray[count++] = tempdata.bytearray[1];
   9e2c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e2c6:	1c5a      	adds	r2, r3, #1
   9e2c8:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e2cc:	7c7a      	ldrb	r2, [r7, #17]
   9e2ce:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e2d2:	440b      	add	r3, r1
   9e2d4:	f803 2c50 	strb.w	r2, [r3, #-80]
								systemdataarray[count++] = tempdata.bytearray[2];
   9e2d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e2dc:	1c5a      	adds	r2, r3, #1
   9e2de:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e2e2:	7cba      	ldrb	r2, [r7, #18]
   9e2e4:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e2e8:	440b      	add	r3, r1
   9e2ea:	f803 2c50 	strb.w	r2, [r3, #-80]
								systemdataarray[count++] = tempdata.bytearray[3];
   9e2ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e2f2:	1c5a      	adds	r2, r3, #1
   9e2f4:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e2f8:	7cfa      	ldrb	r2, [r7, #19]
   9e2fa:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e2fe:	440b      	add	r3, r1
   9e300:	f803 2c50 	strb.w	r2, [r3, #-80]
   9e304:	e02d      	b.n	9e362 <Cl_Dprep_SendPrepStateData+0x3fa>
							}
							else
							{
								tempdata.word = 0;
   9e306:	2300      	movs	r3, #0
   9e308:	613b      	str	r3, [r7, #16]
							systemdataarray[count++] = tempdata.bytearray[0];
   9e30a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e30e:	1c5a      	adds	r2, r3, #1
   9e310:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e314:	7c3a      	ldrb	r2, [r7, #16]
   9e316:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e31a:	440b      	add	r3, r1
   9e31c:	f803 2c50 	strb.w	r2, [r3, #-80]
							systemdataarray[count++] = tempdata.bytearray[1];
   9e320:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e324:	1c5a      	adds	r2, r3, #1
   9e326:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e32a:	7c7a      	ldrb	r2, [r7, #17]
   9e32c:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e330:	440b      	add	r3, r1
   9e332:	f803 2c50 	strb.w	r2, [r3, #-80]
							systemdataarray[count++] = tempdata.bytearray[2];
   9e336:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e33a:	1c5a      	adds	r2, r3, #1
   9e33c:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e340:	7cba      	ldrb	r2, [r7, #18]
   9e342:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e346:	440b      	add	r3, r1
   9e348:	f803 2c50 	strb.w	r2, [r3, #-80]
							systemdataarray[count++] = tempdata.bytearray[3];
   9e34c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e350:	1c5a      	adds	r2, r3, #1
   9e352:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e356:	7cfa      	ldrb	r2, [r7, #19]
   9e358:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e35c:	440b      	add	r3, r1
   9e35e:	f803 2c50 	strb.w	r2, [r3, #-80]
		
					}
					// temperature is already calculated and now store into system data
					{

						tempdata.word = tmp3;
   9e362:	4bab      	ldr	r3, [pc, #684]	; (9e610 <Cl_Dprep_SendPrepStateData+0x6a8>)
   9e364:	681a      	ldr	r2, [r3, #0]
   9e366:	4bab      	ldr	r3, [pc, #684]	; (9e614 <Cl_Dprep_SendPrepStateData+0x6ac>)
   9e368:	4610      	mov	r0, r2
   9e36a:	4798      	blx	r3
   9e36c:	4603      	mov	r3, r0
   9e36e:	613b      	str	r3, [r7, #16]
				//		tempdata.word = (tmp3 * 10);
				//		tempdata.word = (tmp3/10 - 25 ); // sanjeer : 25 is offset work around for intergation testing
						systemdataarray[count++] = tempdata.bytearray[0];
   9e370:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e374:	1c5a      	adds	r2, r3, #1
   9e376:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e37a:	7c3a      	ldrb	r2, [r7, #16]
   9e37c:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e380:	440b      	add	r3, r1
   9e382:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[1];
   9e386:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e38a:	1c5a      	adds	r2, r3, #1
   9e38c:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e390:	7c7a      	ldrb	r2, [r7, #17]
   9e392:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e396:	440b      	add	r3, r1
   9e398:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[2];
   9e39c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e3a0:	1c5a      	adds	r2, r3, #1
   9e3a2:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e3a6:	7cba      	ldrb	r2, [r7, #18]
   9e3a8:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e3ac:	440b      	add	r3, r1
   9e3ae:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[3];
   9e3b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e3b6:	1c5a      	adds	r2, r3, #1
   9e3b8:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e3bc:	7cfa      	ldrb	r2, [r7, #19]
   9e3be:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e3c2:	440b      	add	r3, r1
   9e3c4:	f803 2c50 	strb.w	r2, [r3, #-80]
					}
					Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&tempdata.Twobyte);
   9e3c8:	f107 0310 	add.w	r3, r7, #16
   9e3cc:	4619      	mov	r1, r3
   9e3ce:	200b      	movs	r0, #11
   9e3d0:	4b91      	ldr	r3, [pc, #580]	; (9e618 <Cl_Dprep_SendPrepStateData+0x6b0>)
   9e3d2:	4798      	blx	r3
					{
						sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   9e3d4:	8a3b      	ldrh	r3, [r7, #16]
   9e3d6:	461a      	mov	r2, r3
   9e3d8:	4b90      	ldr	r3, [pc, #576]	; (9e61c <Cl_Dprep_SendPrepStateData+0x6b4>)
   9e3da:	4610      	mov	r0, r2
   9e3dc:	4798      	blx	r3
   9e3de:	4c90      	ldr	r4, [pc, #576]	; (9e620 <Cl_Dprep_SendPrepStateData+0x6b8>)
   9e3e0:	a389      	add	r3, pc, #548	; (adr r3, 9e608 <Cl_Dprep_SendPrepStateData+0x6a0>)
   9e3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   9e3e6:	47a0      	blx	r4
   9e3e8:	4603      	mov	r3, r0
   9e3ea:	460c      	mov	r4, r1
   9e3ec:	4619      	mov	r1, r3
   9e3ee:	4622      	mov	r2, r4
   9e3f0:	4b8c      	ldr	r3, [pc, #560]	; (9e624 <Cl_Dprep_SendPrepStateData+0x6bc>)
   9e3f2:	4608      	mov	r0, r1
   9e3f4:	4611      	mov	r1, r2
   9e3f6:	4798      	blx	r3
   9e3f8:	4603      	mov	r3, r0
   9e3fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
						calibration_apt(sensordatamillivolts);
   9e3fe:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
   9e402:	4618      	mov	r0, r3
   9e404:	4b88      	ldr	r3, [pc, #544]	; (9e628 <Cl_Dprep_SendPrepStateData+0x6c0>)
   9e406:	4798      	blx	r3
						apt =(apt*5 + pressure_final_apt)/6;
   9e408:	4b88      	ldr	r3, [pc, #544]	; (9e62c <Cl_Dprep_SendPrepStateData+0x6c4>)
   9e40a:	681a      	ldr	r2, [r3, #0]
   9e40c:	4b88      	ldr	r3, [pc, #544]	; (9e630 <Cl_Dprep_SendPrepStateData+0x6c8>)
   9e40e:	4989      	ldr	r1, [pc, #548]	; (9e634 <Cl_Dprep_SendPrepStateData+0x6cc>)
   9e410:	4610      	mov	r0, r2
   9e412:	4798      	blx	r3
   9e414:	4603      	mov	r3, r0
   9e416:	4618      	mov	r0, r3
   9e418:	4b87      	ldr	r3, [pc, #540]	; (9e638 <Cl_Dprep_SendPrepStateData+0x6d0>)
   9e41a:	681a      	ldr	r2, [r3, #0]
   9e41c:	4b87      	ldr	r3, [pc, #540]	; (9e63c <Cl_Dprep_SendPrepStateData+0x6d4>)
   9e41e:	4611      	mov	r1, r2
   9e420:	4798      	blx	r3
   9e422:	4603      	mov	r3, r0
   9e424:	461a      	mov	r2, r3
   9e426:	4b86      	ldr	r3, [pc, #536]	; (9e640 <Cl_Dprep_SendPrepStateData+0x6d8>)
   9e428:	4986      	ldr	r1, [pc, #536]	; (9e644 <Cl_Dprep_SendPrepStateData+0x6dc>)
   9e42a:	4610      	mov	r0, r2
   9e42c:	4798      	blx	r3
   9e42e:	4603      	mov	r3, r0
   9e430:	461a      	mov	r2, r3
   9e432:	4b7e      	ldr	r3, [pc, #504]	; (9e62c <Cl_Dprep_SendPrepStateData+0x6c4>)
   9e434:	601a      	str	r2, [r3, #0]
						tempdata.word	 = apt;
   9e436:	4b7d      	ldr	r3, [pc, #500]	; (9e62c <Cl_Dprep_SendPrepStateData+0x6c4>)
   9e438:	681a      	ldr	r2, [r3, #0]
   9e43a:	4b76      	ldr	r3, [pc, #472]	; (9e614 <Cl_Dprep_SendPrepStateData+0x6ac>)
   9e43c:	4610      	mov	r0, r2
   9e43e:	4798      	blx	r3
   9e440:	4603      	mov	r3, r0
   9e442:	613b      	str	r3, [r7, #16]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   9e444:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e448:	1c5a      	adds	r2, r3, #1
   9e44a:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e44e:	7c3a      	ldrb	r2, [r7, #16]
   9e450:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e454:	440b      	add	r3, r1
   9e456:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   9e45a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e45e:	1c5a      	adds	r2, r3, #1
   9e460:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e464:	7c7a      	ldrb	r2, [r7, #17]
   9e466:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e46a:	440b      	add	r3, r1
   9e46c:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   9e470:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e474:	1c5a      	adds	r2, r3, #1
   9e476:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e47a:	7cba      	ldrb	r2, [r7, #18]
   9e47c:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e480:	440b      	add	r3, r1
   9e482:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   9e486:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e48a:	1c5a      	adds	r2, r3, #1
   9e48c:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e490:	7cfa      	ldrb	r2, [r7, #19]
   9e492:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e496:	440b      	add	r3, r1
   9e498:	f803 2c50 	strb.w	r2, [r3, #-80]
					}
					Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&tempdata.Twobyte);
   9e49c:	f107 0310 	add.w	r3, r7, #16
   9e4a0:	4619      	mov	r1, r3
   9e4a2:	200c      	movs	r0, #12
   9e4a4:	4b5c      	ldr	r3, [pc, #368]	; (9e618 <Cl_Dprep_SendPrepStateData+0x6b0>)
   9e4a6:	4798      	blx	r3
					{
						sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   9e4a8:	8a3b      	ldrh	r3, [r7, #16]
   9e4aa:	461a      	mov	r2, r3
   9e4ac:	4b5b      	ldr	r3, [pc, #364]	; (9e61c <Cl_Dprep_SendPrepStateData+0x6b4>)
   9e4ae:	4610      	mov	r0, r2
   9e4b0:	4798      	blx	r3
   9e4b2:	4c5b      	ldr	r4, [pc, #364]	; (9e620 <Cl_Dprep_SendPrepStateData+0x6b8>)
   9e4b4:	a354      	add	r3, pc, #336	; (adr r3, 9e608 <Cl_Dprep_SendPrepStateData+0x6a0>)
   9e4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   9e4ba:	47a0      	blx	r4
   9e4bc:	4603      	mov	r3, r0
   9e4be:	460c      	mov	r4, r1
   9e4c0:	4619      	mov	r1, r3
   9e4c2:	4622      	mov	r2, r4
   9e4c4:	4b57      	ldr	r3, [pc, #348]	; (9e624 <Cl_Dprep_SendPrepStateData+0x6bc>)
   9e4c6:	4608      	mov	r0, r1
   9e4c8:	4611      	mov	r1, r2
   9e4ca:	4798      	blx	r3
   9e4cc:	4603      	mov	r3, r0
   9e4ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
						calibration_vpt(sensordatamillivolts);
   9e4d2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
   9e4d6:	4618      	mov	r0, r3
   9e4d8:	4b5b      	ldr	r3, [pc, #364]	; (9e648 <Cl_Dprep_SendPrepStateData+0x6e0>)
   9e4da:	4798      	blx	r3
						vpt =(vpt*5 + pressure_final_vpt)/6;
   9e4dc:	4b5b      	ldr	r3, [pc, #364]	; (9e64c <Cl_Dprep_SendPrepStateData+0x6e4>)
   9e4de:	681a      	ldr	r2, [r3, #0]
   9e4e0:	4b53      	ldr	r3, [pc, #332]	; (9e630 <Cl_Dprep_SendPrepStateData+0x6c8>)
   9e4e2:	4954      	ldr	r1, [pc, #336]	; (9e634 <Cl_Dprep_SendPrepStateData+0x6cc>)
   9e4e4:	4610      	mov	r0, r2
   9e4e6:	4798      	blx	r3
   9e4e8:	4603      	mov	r3, r0
   9e4ea:	4618      	mov	r0, r3
   9e4ec:	4b58      	ldr	r3, [pc, #352]	; (9e650 <Cl_Dprep_SendPrepStateData+0x6e8>)
   9e4ee:	681a      	ldr	r2, [r3, #0]
   9e4f0:	4b52      	ldr	r3, [pc, #328]	; (9e63c <Cl_Dprep_SendPrepStateData+0x6d4>)
   9e4f2:	4611      	mov	r1, r2
   9e4f4:	4798      	blx	r3
   9e4f6:	4603      	mov	r3, r0
   9e4f8:	461a      	mov	r2, r3
   9e4fa:	4b51      	ldr	r3, [pc, #324]	; (9e640 <Cl_Dprep_SendPrepStateData+0x6d8>)
   9e4fc:	4951      	ldr	r1, [pc, #324]	; (9e644 <Cl_Dprep_SendPrepStateData+0x6dc>)
   9e4fe:	4610      	mov	r0, r2
   9e500:	4798      	blx	r3
   9e502:	4603      	mov	r3, r0
   9e504:	461a      	mov	r2, r3
   9e506:	4b51      	ldr	r3, [pc, #324]	; (9e64c <Cl_Dprep_SendPrepStateData+0x6e4>)
   9e508:	601a      	str	r2, [r3, #0]
						tempdata.word	 = (vpt);
   9e50a:	4b50      	ldr	r3, [pc, #320]	; (9e64c <Cl_Dprep_SendPrepStateData+0x6e4>)
   9e50c:	681a      	ldr	r2, [r3, #0]
   9e50e:	4b41      	ldr	r3, [pc, #260]	; (9e614 <Cl_Dprep_SendPrepStateData+0x6ac>)
   9e510:	4610      	mov	r0, r2
   9e512:	4798      	blx	r3
   9e514:	4603      	mov	r3, r0
   9e516:	613b      	str	r3, [r7, #16]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   9e518:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e51c:	1c5a      	adds	r2, r3, #1
   9e51e:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e522:	7c3a      	ldrb	r2, [r7, #16]
   9e524:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e528:	440b      	add	r3, r1
   9e52a:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   9e52e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e532:	1c5a      	adds	r2, r3, #1
   9e534:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e538:	7c7a      	ldrb	r2, [r7, #17]
   9e53a:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e53e:	440b      	add	r3, r1
   9e540:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   9e544:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e548:	1c5a      	adds	r2, r3, #1
   9e54a:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e54e:	7cba      	ldrb	r2, [r7, #18]
   9e550:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e554:	440b      	add	r3, r1
   9e556:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   9e55a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e55e:	1c5a      	adds	r2, r3, #1
   9e560:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e564:	7cfa      	ldrb	r2, [r7, #19]
   9e566:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e56a:	440b      	add	r3, r1
   9e56c:	f803 2c50 	strb.w	r2, [r3, #-80]
					}


					if( datatype == DIALYSIS_PREP_DATA)
   9e570:	79fb      	ldrb	r3, [r7, #7]
   9e572:	2b04      	cmp	r3, #4
   9e574:	d135      	bne.n	9e5e2 <Cl_Dprep_SendPrepStateData+0x67a>
					{
						TMP = 5000;
   9e576:	4b37      	ldr	r3, [pc, #220]	; (9e654 <Cl_Dprep_SendPrepStateData+0x6ec>)
   9e578:	4a37      	ldr	r2, [pc, #220]	; (9e658 <Cl_Dprep_SendPrepStateData+0x6f0>)
   9e57a:	601a      	str	r2, [r3, #0]
						tempdata.word	 = (TMP);
   9e57c:	4b35      	ldr	r3, [pc, #212]	; (9e654 <Cl_Dprep_SendPrepStateData+0x6ec>)
   9e57e:	681a      	ldr	r2, [r3, #0]
   9e580:	4b24      	ldr	r3, [pc, #144]	; (9e614 <Cl_Dprep_SendPrepStateData+0x6ac>)
   9e582:	4610      	mov	r0, r2
   9e584:	4798      	blx	r3
   9e586:	4603      	mov	r3, r0
   9e588:	613b      	str	r3, [r7, #16]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   9e58a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e58e:	1c5a      	adds	r2, r3, #1
   9e590:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e594:	7c3a      	ldrb	r2, [r7, #16]
   9e596:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e59a:	440b      	add	r3, r1
   9e59c:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   9e5a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e5a4:	1c5a      	adds	r2, r3, #1
   9e5a6:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e5aa:	7c7a      	ldrb	r2, [r7, #17]
   9e5ac:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e5b0:	440b      	add	r3, r1
   9e5b2:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   9e5b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e5ba:	1c5a      	adds	r2, r3, #1
   9e5bc:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e5c0:	7cba      	ldrb	r2, [r7, #18]
   9e5c2:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e5c6:	440b      	add	r3, r1
   9e5c8:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   9e5cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9e5d0:	1c5a      	adds	r2, r3, #1
   9e5d2:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9e5d6:	7cfa      	ldrb	r2, [r7, #19]
   9e5d8:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9e5dc:	440b      	add	r3, r1
   9e5de:	f803 2c50 	strb.w	r2, [r3, #-80]
					}
		
					Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&systemdataarray,count);
   9e5e2:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
   9e5e6:	f107 0318 	add.w	r3, r7, #24
   9e5ea:	4619      	mov	r1, r3
   9e5ec:	202a      	movs	r0, #42	; 0x2a
   9e5ee:	4b1b      	ldr	r3, [pc, #108]	; (9e65c <Cl_Dprep_SendPrepStateData+0x6f4>)
   9e5f0:	4798      	blx	r3
   9e5f2:	4603      	mov	r3, r0
   9e5f4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
					//Cl_Dlsis_SenddlsisData();
	return CL_OK;
   9e5f8:	2300      	movs	r3, #0
}
   9e5fa:	4618      	mov	r0, r3
   9e5fc:	376c      	adds	r7, #108	; 0x6c
   9e5fe:	46bd      	mov	sp, r7
   9e600:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9e602:	bf00      	nop
   9e604:	f3af 8000 	nop.w
   9e608:	58e21965 	.word	0x58e21965
   9e60c:	3fe9b717 	.word	0x3fe9b717
   9e610:	20072854 	.word	0x20072854
   9e614:	000a41ed 	.word	0x000a41ed
   9e618:	0008d6b1 	.word	0x0008d6b1
   9e61c:	000a34c9 	.word	0x000a34c9
   9e620:	000a3595 	.word	0x000a3595
   9e624:	000a3b19 	.word	0x000a3b19
   9e628:	0008406d 	.word	0x0008406d
   9e62c:	20072858 	.word	0x20072858
   9e630:	000a3e15 	.word	0x000a3e15
   9e634:	40a00000 	.word	0x40a00000
   9e638:	20072d74 	.word	0x20072d74
   9e63c:	000a3c05 	.word	0x000a3c05
   9e640:	000a3f7d 	.word	0x000a3f7d
   9e644:	40c00000 	.word	0x40c00000
   9e648:	000841ed 	.word	0x000841ed
   9e64c:	2007285c 	.word	0x2007285c
   9e650:	2007165c 	.word	0x2007165c
   9e654:	20072860 	.word	0x20072860
   9e658:	459c4000 	.word	0x459c4000
   9e65c:	00099729 	.word	0x00099729

0009e660 <Cl_Dprep_Stoppreparation>:


Cl_ReturnCodeType Cl_Dprep_Stoppreparation(void)
{
   9e660:	b580      	push	{r7, lr}
   9e662:	b082      	sub	sp, #8
   9e664:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9e666:	2300      	movs	r3, #0
   9e668:	71fb      	strb	r3, [r7, #7]
	Cl_Uint8Type data;
	
	// deactivate all alarms
				if(!((cl_dprepstate == CL_DPREP_STATE_IDLE ) || (cl_dprepstate == CL_DPREP_STATE_STOPPED ) ||(cl_dprepstate == CL_DPREP_STATE_CRITICAL_ALARM )  ))
   9e66a:	4b38      	ldr	r3, [pc, #224]	; (9e74c <Cl_Dprep_Stoppreparation+0xec>)
   9e66c:	781b      	ldrb	r3, [r3, #0]
   9e66e:	2b00      	cmp	r3, #0
   9e670:	d066      	beq.n	9e740 <Cl_Dprep_Stoppreparation+0xe0>
   9e672:	4b36      	ldr	r3, [pc, #216]	; (9e74c <Cl_Dprep_Stoppreparation+0xec>)
   9e674:	781b      	ldrb	r3, [r3, #0]
   9e676:	2b0b      	cmp	r3, #11
   9e678:	d062      	beq.n	9e740 <Cl_Dprep_Stoppreparation+0xe0>
   9e67a:	4b34      	ldr	r3, [pc, #208]	; (9e74c <Cl_Dprep_Stoppreparation+0xec>)
   9e67c:	781b      	ldrb	r3, [r3, #0]
   9e67e:	2b0c      	cmp	r3, #12
   9e680:	d05e      	beq.n	9e740 <Cl_Dprep_Stoppreparation+0xe0>
				{
					
					stability_counter = 0;
   9e682:	4b33      	ldr	r3, [pc, #204]	; (9e750 <Cl_Dprep_Stoppreparation+0xf0>)
   9e684:	2200      	movs	r2, #0
   9e686:	601a      	str	r2, [r3, #0]
					wait_timeout_counter = 0;
   9e688:	4b32      	ldr	r3, [pc, #200]	; (9e754 <Cl_Dprep_Stoppreparation+0xf4>)
   9e68a:	2200      	movs	r2, #0
   9e68c:	601a      	str	r2, [r3, #0]
					state_counter = 0;
   9e68e:	4b32      	ldr	r3, [pc, #200]	; (9e758 <Cl_Dprep_Stoppreparation+0xf8>)
   9e690:	2200      	movs	r2, #0
   9e692:	601a      	str	r2, [r3, #0]
					 	Cl_Dprepsecondscounter = 0;
   9e694:	4b31      	ldr	r3, [pc, #196]	; (9e75c <Cl_Dprep_Stoppreparation+0xfc>)
   9e696:	2200      	movs	r2, #0
   9e698:	601a      	str	r2, [r3, #0]
					 	Cl_DprepMinutescounter= 0;
   9e69a:	4b31      	ldr	r3, [pc, #196]	; (9e760 <Cl_Dprep_Stoppreparation+0x100>)
   9e69c:	2200      	movs	r2, #0
   9e69e:	601a      	str	r2, [r3, #0]
					 	Cl_Dprephourscounter= 0;
   9e6a0:	4b30      	ldr	r3, [pc, #192]	; (9e764 <Cl_Dprep_Stoppreparation+0x104>)
   9e6a2:	2200      	movs	r2, #0
   9e6a4:	601a      	str	r2, [r3, #0]
					 	Cl_DprepTotalMinutescounter= 0;
   9e6a6:	4b30      	ldr	r3, [pc, #192]	; (9e768 <Cl_Dprep_Stoppreparation+0x108>)
   9e6a8:	2200      	movs	r2, #0
   9e6aa:	601a      	str	r2, [r3, #0]
					 	Cl_DprepTotalhourscounter=0;
   9e6ac:	4b2f      	ldr	r3, [pc, #188]	; (9e76c <Cl_Dprep_Stoppreparation+0x10c>)
   9e6ae:	2200      	movs	r2, #0
   9e6b0:	601a      	str	r2, [r3, #0]
							Cl_Dprep_filling_secondscounter = 0;
   9e6b2:	4b2f      	ldr	r3, [pc, #188]	; (9e770 <Cl_Dprep_Stoppreparation+0x110>)
   9e6b4:	2200      	movs	r2, #0
   9e6b6:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_filling_Minutescounter = 0;
   9e6b8:	4b2e      	ldr	r3, [pc, #184]	; (9e774 <Cl_Dprep_Stoppreparation+0x114>)
   9e6ba:	2200      	movs	r2, #0
   9e6bc:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_filling_TotalMinutescounter = 0;
   9e6be:	4b2e      	ldr	r3, [pc, #184]	; (9e778 <Cl_Dprep_Stoppreparation+0x118>)
   9e6c0:	2200      	movs	r2, #0
   9e6c2:	801a      	strh	r2, [r3, #0]
					
							Cl_Dprep_Prime_secondscounter = 0;
   9e6c4:	4b2d      	ldr	r3, [pc, #180]	; (9e77c <Cl_Dprep_Stoppreparation+0x11c>)
   9e6c6:	2200      	movs	r2, #0
   9e6c8:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_Prime_Minutescounter = 0;
   9e6ca:	4b2d      	ldr	r3, [pc, #180]	; (9e780 <Cl_Dprep_Stoppreparation+0x120>)
   9e6cc:	2200      	movs	r2, #0
   9e6ce:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_Prime_TotalMinutescounter = 0;
   9e6d0:	4b2c      	ldr	r3, [pc, #176]	; (9e784 <Cl_Dprep_Stoppreparation+0x124>)
   9e6d2:	2200      	movs	r2, #0
   9e6d4:	801a      	strh	r2, [r3, #0]
					
							Cl_Dprep_DialyserPrime_secondscounter = 0;
   9e6d6:	4b2c      	ldr	r3, [pc, #176]	; (9e788 <Cl_Dprep_Stoppreparation+0x128>)
   9e6d8:	2200      	movs	r2, #0
   9e6da:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_DialyserPrime_Minutescounter = 0;
   9e6dc:	4b2b      	ldr	r3, [pc, #172]	; (9e78c <Cl_Dprep_Stoppreparation+0x12c>)
   9e6de:	2200      	movs	r2, #0
   9e6e0:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_DialyserPrime_TotalMinutescounter = 0;
   9e6e2:	4b2b      	ldr	r3, [pc, #172]	; (9e790 <Cl_Dprep_Stoppreparation+0x130>)
   9e6e4:	2200      	movs	r2, #0
   9e6e6:	801a      	strh	r2, [r3, #0]
				Cl_dprepretcode =  sv_cntrl_deactivatevenousclamp();
   9e6e8:	4b2a      	ldr	r3, [pc, #168]	; (9e794 <Cl_Dprep_Stoppreparation+0x134>)
   9e6ea:	4798      	blx	r3
   9e6ec:	4603      	mov	r3, r0
   9e6ee:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   9e6f0:	2011      	movs	r0, #17
   9e6f2:	4b29      	ldr	r3, [pc, #164]	; (9e798 <Cl_Dprep_Stoppreparation+0x138>)
   9e6f4:	4798      	blx	r3
   9e6f6:	4603      	mov	r3, r0
   9e6f8:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = sv_cntrl_poweroffheater();
   9e6fa:	4b28      	ldr	r3, [pc, #160]	; (9e79c <Cl_Dprep_Stoppreparation+0x13c>)
   9e6fc:	4798      	blx	r3
   9e6fe:	4603      	mov	r3, r0
   9e700:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   9e702:	2004      	movs	r0, #4
   9e704:	4b26      	ldr	r3, [pc, #152]	; (9e7a0 <Cl_Dprep_Stoppreparation+0x140>)
   9e706:	4798      	blx	r3
   9e708:	4603      	mov	r3, r0
   9e70a:	71fb      	strb	r3, [r7, #7]
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   9e70c:	2100      	movs	r1, #0
   9e70e:	2002      	movs	r0, #2
   9e710:	4b24      	ldr	r3, [pc, #144]	; (9e7a4 <Cl_Dprep_Stoppreparation+0x144>)
   9e712:	4798      	blx	r3
//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_PAUSE);
	Cl_dprep_StopMixing();			
   9e714:	4b24      	ldr	r3, [pc, #144]	; (9e7a8 <Cl_Dprep_Stoppreparation+0x148>)
   9e716:	4798      	blx	r3
				if(cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME){
   9e718:	4b0c      	ldr	r3, [pc, #48]	; (9e74c <Cl_Dprep_Stoppreparation+0xec>)
   9e71a:	781b      	ldrb	r3, [r3, #0]
   9e71c:	2b06      	cmp	r3, #6
   9e71e:	d104      	bne.n	9e72a <Cl_Dprep_Stoppreparation+0xca>
					cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
   9e720:	2100      	movs	r1, #0
   9e722:	2009      	movs	r0, #9
   9e724:	4b1f      	ldr	r3, [pc, #124]	; (9e7a4 <Cl_Dprep_Stoppreparation+0x144>)
   9e726:	4798      	blx	r3
   9e728:	e007      	b.n	9e73a <Cl_Dprep_Stoppreparation+0xda>
				}
				else{
					Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
   9e72a:	1dbb      	adds	r3, r7, #6
   9e72c:	2200      	movs	r2, #0
   9e72e:	4619      	mov	r1, r3
   9e730:	202d      	movs	r0, #45	; 0x2d
   9e732:	4b1e      	ldr	r3, [pc, #120]	; (9e7ac <Cl_Dprep_Stoppreparation+0x14c>)
   9e734:	4798      	blx	r3
   9e736:	4603      	mov	r3, r0
   9e738:	71fb      	strb	r3, [r7, #7]
				}
			//	cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
				
			
				cl_dprepstate = CL_DPREP_STATE_IDLE;
   9e73a:	4b04      	ldr	r3, [pc, #16]	; (9e74c <Cl_Dprep_Stoppreparation+0xec>)
   9e73c:	2200      	movs	r2, #0
   9e73e:	701a      	strb	r2, [r3, #0]
				//Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
				
					
				}
		return CL_OK;
   9e740:	2300      	movs	r3, #0
}
   9e742:	4618      	mov	r0, r3
   9e744:	3708      	adds	r7, #8
   9e746:	46bd      	mov	sp, r7
   9e748:	bd80      	pop	{r7, pc}
   9e74a:	bf00      	nop
   9e74c:	2007283b 	.word	0x2007283b
   9e750:	200727f8 	.word	0x200727f8
   9e754:	200727fc 	.word	0x200727fc
   9e758:	20072800 	.word	0x20072800
   9e75c:	20072804 	.word	0x20072804
   9e760:	20072808 	.word	0x20072808
   9e764:	2007280c 	.word	0x2007280c
   9e768:	20072810 	.word	0x20072810
   9e76c:	20072814 	.word	0x20072814
   9e770:	2007281a 	.word	0x2007281a
   9e774:	2007281c 	.word	0x2007281c
   9e778:	2007281e 	.word	0x2007281e
   9e77c:	20072820 	.word	0x20072820
   9e780:	20072822 	.word	0x20072822
   9e784:	20072824 	.word	0x20072824
   9e788:	20072826 	.word	0x20072826
   9e78c:	20072828 	.word	0x20072828
   9e790:	2007282a 	.word	0x2007282a
   9e794:	00097b0d 	.word	0x00097b0d
   9e798:	00097b9d 	.word	0x00097b9d
   9e79c:	00097999 	.word	0x00097999
   9e7a0:	00088a91 	.word	0x00088a91
   9e7a4:	00087cad 	.word	0x00087cad
   9e7a8:	0009fa1d 	.word	0x0009fa1d
   9e7ac:	00099729 	.word	0x00099729

0009e7b0 <Cl_Dprep_ResetAlertsforReassertion>:


Cl_ReturnCodeType Cl_Dprep_ResetAlertsforReassertion(void )
{
   9e7b0:	b580      	push	{r7, lr}
   9e7b2:	b082      	sub	sp, #8
   9e7b4:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   9e7b6:	2300      	movs	r3, #0
   9e7b8:	71fb      	strb	r3, [r7, #7]
	ClDprepAlarmIdType CldprepAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9e7ba:	234d      	movs	r3, #77	; 0x4d
   9e7bc:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dprepalarmid;
	
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9e7be:	4b5f      	ldr	r3, [pc, #380]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e7c0:	2200      	movs	r2, #0
   9e7c2:	70da      	strb	r2, [r3, #3]
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   9e7c4:	2001      	movs	r0, #1
   9e7c6:	4b5e      	ldr	r3, [pc, #376]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e7c8:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER1STATUS_CLOSED].IsRaised = false;
   9e7ca:	4b5c      	ldr	r3, [pc, #368]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e7cc:	2200      	movs	r2, #0
   9e7ce:	729a      	strb	r2, [r3, #10]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER2STATUS_CLOSED].IsRaised = false;
   9e7d0:	4b5a      	ldr	r3, [pc, #360]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e7d2:	2200      	movs	r2, #0
   9e7d4:	745a      	strb	r2, [r3, #17]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   9e7d6:	2005      	movs	r0, #5
   9e7d8:	4b59      	ldr	r3, [pc, #356]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e7da:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   9e7dc:	2006      	movs	r0, #6
   9e7de:	4b58      	ldr	r3, [pc, #352]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e7e0:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   9e7e2:	4b56      	ldr	r3, [pc, #344]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e7e4:	2200      	movs	r2, #0
   9e7e6:	761a      	strb	r2, [r3, #24]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   9e7e8:	4b54      	ldr	r3, [pc, #336]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e7ea:	2200      	movs	r2, #0
   9e7ec:	77da      	strb	r2, [r3, #31]
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   9e7ee:	2003      	movs	r0, #3
   9e7f0:	4b53      	ldr	r3, [pc, #332]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e7f2:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   9e7f4:	2004      	movs	r0, #4
   9e7f6:	4b52      	ldr	r3, [pc, #328]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e7f8:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_ACID_IN].IsRaised = false;
   9e7fa:	4b50      	ldr	r3, [pc, #320]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e7fc:	2200      	movs	r2, #0
   9e7fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_AlarmResetAlarm(ACID_IN_CLOSED);
   9e802:	202a      	movs	r0, #42	; 0x2a
   9e804:	4b4e      	ldr	r3, [pc, #312]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e806:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BICAR_IN].IsRaised = false;
   9e808:	4b4c      	ldr	r3, [pc, #304]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e80a:	2200      	movs	r2, #0
   9e80c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Cl_AlarmResetAlarm(BICARB_IN_CLOSED);
   9e810:	202c      	movs	r0, #44	; 0x2c
   9e812:	4b4b      	ldr	r3, [pc, #300]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e814:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_STATUS_LOW].IsRaised = false;
   9e816:	4b49      	ldr	r3, [pc, #292]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e818:	2200      	movs	r2, #0
   9e81a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_STATUS_HIGH].IsRaised = false;
   9e81e:	4b47      	ldr	r3, [pc, #284]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e820:	2200      	movs	r2, #0
   9e822:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   9e826:	2008      	movs	r0, #8
   9e828:	4b45      	ldr	r3, [pc, #276]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e82a:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   9e82c:	2007      	movs	r0, #7
   9e82e:	4b44      	ldr	r3, [pc, #272]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e830:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_OPEN].IsRaised = false;
   9e832:	4b42      	ldr	r3, [pc, #264]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e834:	2200      	movs	r2, #0
   9e836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_RO].IsRaised = false;
   9e83a:	4b40      	ldr	r3, [pc, #256]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e83c:	2200      	movs	r2, #0
   9e83e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_HIGH].IsRaised = false;
   9e842:	4b3e      	ldr	r3, [pc, #248]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e844:	2200      	movs	r2, #0
   9e846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_NO_FLOW].IsRaised = false;
   9e84a:	4b3c      	ldr	r3, [pc, #240]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e84c:	2200      	movs	r2, #0
   9e84e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   9e852:	4b3a      	ldr	r3, [pc, #232]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e854:	2200      	movs	r2, #0
   9e856:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DprepAlarmTable[CL_DPREP_ALARM_ABD_EVENT].IsRaised = false;
   9e85a:	4b38      	ldr	r3, [pc, #224]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e85c:	2200      	movs	r2, #0
   9e85e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BD_EVENT].IsRaised = false;
   9e862:	4b36      	ldr	r3, [pc, #216]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e864:	2200      	movs	r2, #0
   9e866:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BLD_EVENT].IsRaised = false;
   9e86a:	4b34      	ldr	r3, [pc, #208]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e86c:	2200      	movs	r2, #0
   9e86e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_DprepAlarmTable[CL_DPREP_ALARM_APTSTATUS_HIGH].IsRaised = false;
   9e872:	4b32      	ldr	r3, [pc, #200]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e874:	2200      	movs	r2, #0
   9e876:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_DprepAlarmTable[CL_DPREP_ALARM_VPTSTATUS_HIGH].IsRaised = false;
   9e87a:	4b30      	ldr	r3, [pc, #192]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e87c:	2200      	movs	r2, #0
   9e87e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   9e882:	4b2e      	ldr	r3, [pc, #184]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e884:	2200      	movs	r2, #0
   9e886:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   9e88a:	4b2c      	ldr	r3, [pc, #176]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e88c:	2200      	movs	r2, #0
   9e88e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   9e892:	2015      	movs	r0, #21
   9e894:	4b2a      	ldr	r3, [pc, #168]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e896:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   9e898:	2016      	movs	r0, #22
   9e89a:	4b29      	ldr	r3, [pc, #164]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e89c:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   9e89e:	4b27      	ldr	r3, [pc, #156]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e8a0:	2200      	movs	r2, #0
   9e8a2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   9e8a6:	4b25      	ldr	r3, [pc, #148]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e8a8:	2200      	movs	r2, #0
   9e8aa:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   9e8ae:	2017      	movs	r0, #23
   9e8b0:	4b23      	ldr	r3, [pc, #140]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e8b2:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   9e8b4:	2018      	movs	r0, #24
   9e8b6:	4b22      	ldr	r3, [pc, #136]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e8b8:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   9e8ba:	4b20      	ldr	r3, [pc, #128]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e8bc:	2200      	movs	r2, #0
   9e8be:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   9e8c2:	4b1e      	ldr	r3, [pc, #120]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e8c4:	2200      	movs	r2, #0
   9e8c6:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   9e8ca:	2027      	movs	r0, #39	; 0x27
   9e8cc:	4b1c      	ldr	r3, [pc, #112]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e8ce:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   9e8d0:	2028      	movs	r0, #40	; 0x28
   9e8d2:	4b1b      	ldr	r3, [pc, #108]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e8d4:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   9e8d6:	4b19      	ldr	r3, [pc, #100]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e8d8:	2200      	movs	r2, #0
   9e8da:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   9e8de:	4b17      	ldr	r3, [pc, #92]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e8e0:	2200      	movs	r2, #0
   9e8e2:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   9e8e6:	4b15      	ldr	r3, [pc, #84]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e8e8:	2200      	movs	r2, #0
   9e8ea:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   9e8ee:	200f      	movs	r0, #15
   9e8f0:	4b13      	ldr	r3, [pc, #76]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e8f2:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   9e8f4:	2010      	movs	r0, #16
   9e8f6:	4b12      	ldr	r3, [pc, #72]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e8f8:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   9e8fa:	4b10      	ldr	r3, [pc, #64]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e8fc:	2200      	movs	r2, #0
   9e8fe:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   9e902:	4b0e      	ldr	r3, [pc, #56]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e904:	2200      	movs	r2, #0
   9e906:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   9e90a:	2011      	movs	r0, #17
   9e90c:	4b0c      	ldr	r3, [pc, #48]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e90e:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   9e910:	2012      	movs	r0, #18
   9e912:	4b0b      	ldr	r3, [pc, #44]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e914:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   9e916:	4b09      	ldr	r3, [pc, #36]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e918:	2200      	movs	r2, #0
   9e91a:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   9e91e:	4b07      	ldr	r3, [pc, #28]	; (9e93c <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e920:	2200      	movs	r2, #0
   9e922:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   9e926:	2013      	movs	r0, #19
   9e928:	4b05      	ldr	r3, [pc, #20]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e92a:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   9e92c:	2014      	movs	r0, #20
   9e92e:	4b04      	ldr	r3, [pc, #16]	; (9e940 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e930:	4798      	blx	r3

	return (Cl_dprepretcode);
   9e932:	79fb      	ldrb	r3, [r7, #7]
	
}
   9e934:	4618      	mov	r0, r3
   9e936:	3708      	adds	r7, #8
   9e938:	46bd      	mov	sp, r7
   9e93a:	bd80      	pop	{r7, pc}
   9e93c:	20070abc 	.word	0x20070abc
   9e940:	00082ff1 	.word	0x00082ff1

0009e944 <Cl_Dprep_setdata>:
		
	}
return CL_OK;
}
Cl_ReturnCodeType Cl_Dprep_setdata(Cl_ConsoleRxDataType DataId,cl_PrepDatatype cl_PrepData , Cl_Uint8Type size)
{
   9e944:	b590      	push	{r4, r7, lr}
   9e946:	b089      	sub	sp, #36	; 0x24
   9e948:	af00      	add	r7, sp, #0
   9e94a:	4604      	mov	r4, r0
   9e94c:	1d38      	adds	r0, r7, #4
   9e94e:	e880 0006 	stmia.w	r0, {r1, r2}
   9e952:	461a      	mov	r2, r3
   9e954:	4623      	mov	r3, r4
   9e956:	73fb      	strb	r3, [r7, #15]
   9e958:	4613      	mov	r3, r2
   9e95a:	73bb      	strb	r3, [r7, #14]
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9e95c:	2300      	movs	r3, #0
   9e95e:	77fb      	strb	r3, [r7, #31]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9e960:	234d      	movs	r3, #77	; 0x4d
   9e962:	77bb      	strb	r3, [r7, #30]
	Cl_Uint8Type dataarray[8] =  {0,0,0,0};
   9e964:	f107 0314 	add.w	r3, r7, #20
   9e968:	2200      	movs	r2, #0
   9e96a:	601a      	str	r2, [r3, #0]
   9e96c:	605a      	str	r2, [r3, #4]
	Cl_Uint8Type  databytecnt = 0;
   9e96e:	2300      	movs	r3, #0
   9e970:	777b      	strb	r3, [r7, #29]

				switch(DataId)
   9e972:	7bfb      	ldrb	r3, [r7, #15]
   9e974:	3b05      	subs	r3, #5
   9e976:	2b18      	cmp	r3, #24
   9e978:	f200 837c 	bhi.w	9f074 <Cl_Dprep_setdata+0x730>
   9e97c:	a201      	add	r2, pc, #4	; (adr r2, 9e984 <Cl_Dprep_setdata+0x40>)
   9e97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e982:	bf00      	nop
   9e984:	0009e9e9 	.word	0x0009e9e9
   9e988:	0009ea13 	.word	0x0009ea13
   9e98c:	0009ea3d 	.word	0x0009ea3d
   9e990:	0009ea91 	.word	0x0009ea91
   9e994:	0009eabb 	.word	0x0009eabb
   9e998:	0009f075 	.word	0x0009f075
   9e99c:	0009eae5 	.word	0x0009eae5
   9e9a0:	0009eb0f 	.word	0x0009eb0f
   9e9a4:	0009eb39 	.word	0x0009eb39
   9e9a8:	0009ea67 	.word	0x0009ea67
   9e9ac:	0009eb63 	.word	0x0009eb63
   9e9b0:	0009f075 	.word	0x0009f075
   9e9b4:	0009f075 	.word	0x0009f075
   9e9b8:	0009f075 	.word	0x0009f075
   9e9bc:	0009eb91 	.word	0x0009eb91
   9e9c0:	0009ec01 	.word	0x0009ec01
   9e9c4:	0009ec71 	.word	0x0009ec71
   9e9c8:	0009eced 	.word	0x0009eced
   9e9cc:	0009ed5d 	.word	0x0009ed5d
   9e9d0:	0009edcd 	.word	0x0009edcd
   9e9d4:	0009ee3b 	.word	0x0009ee3b
   9e9d8:	0009eeab 	.word	0x0009eeab
   9e9dc:	0009ef1b 	.word	0x0009ef1b
   9e9e0:	0009ef8b 	.word	0x0009ef8b
   9e9e4:	0009f005 	.word	0x0009f005
				{
	 
					 case	CON_RX_PARAM_DATA_DIALYSIS_FLOW:
					 Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_FLOW,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);					 
   9e9e8:	4bbd      	ldr	r3, [pc, #756]	; (9ece0 <Cl_Dprep_setdata+0x39c>)
   9e9ea:	78da      	ldrb	r2, [r3, #3]
   9e9ec:	1d3b      	adds	r3, r7, #4
   9e9ee:	4619      	mov	r1, r3
   9e9f0:	2005      	movs	r0, #5
   9e9f2:	4bbc      	ldr	r3, [pc, #752]	; (9ece4 <Cl_Dprep_setdata+0x3a0>)
   9e9f4:	4798      	blx	r3
   9e9f6:	4603      	mov	r3, r0
   9e9f8:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_FLOW;
   9e9fa:	2305      	movs	r3, #5
   9e9fc:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_FLOW, &dataarray[1]);
   9e9fe:	f107 0314 	add.w	r3, r7, #20
   9ea02:	3301      	adds	r3, #1
   9ea04:	4619      	mov	r1, r3
   9ea06:	2005      	movs	r0, #5
   9ea08:	4bb7      	ldr	r3, [pc, #732]	; (9ece8 <Cl_Dprep_setdata+0x3a4>)
   9ea0a:	4798      	blx	r3
   9ea0c:	4603      	mov	r3, r0
   9ea0e:	77fb      	strb	r3, [r7, #31]
					
					 break;
   9ea10:	e331      	b.n	9f076 <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_DIALYSIS_TEMP:
					 Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_TEMP,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9ea12:	4bb3      	ldr	r3, [pc, #716]	; (9ece0 <Cl_Dprep_setdata+0x39c>)
   9ea14:	78da      	ldrb	r2, [r3, #3]
   9ea16:	1d3b      	adds	r3, r7, #4
   9ea18:	4619      	mov	r1, r3
   9ea1a:	2006      	movs	r0, #6
   9ea1c:	4bb1      	ldr	r3, [pc, #708]	; (9ece4 <Cl_Dprep_setdata+0x3a0>)
   9ea1e:	4798      	blx	r3
   9ea20:	4603      	mov	r3, r0
   9ea22:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_TEMP; 
   9ea24:	2306      	movs	r3, #6
   9ea26:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_TEMP, &dataarray[1]);
   9ea28:	f107 0314 	add.w	r3, r7, #20
   9ea2c:	3301      	adds	r3, #1
   9ea2e:	4619      	mov	r1, r3
   9ea30:	2006      	movs	r0, #6
   9ea32:	4bad      	ldr	r3, [pc, #692]	; (9ece8 <Cl_Dprep_setdata+0x3a4>)
   9ea34:	4798      	blx	r3
   9ea36:	4603      	mov	r3, r0
   9ea38:	77fb      	strb	r3, [r7, #31]

					 break;
   9ea3a:	e31c      	b.n	9f076 <Cl_Dprep_setdata+0x732>
	 
					 case	CON_RX_PARAM_DATA_HEPARIN_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9ea3c:	4ba8      	ldr	r3, [pc, #672]	; (9ece0 <Cl_Dprep_setdata+0x39c>)
   9ea3e:	78da      	ldrb	r2, [r3, #3]
   9ea40:	1d3b      	adds	r3, r7, #4
   9ea42:	4619      	mov	r1, r3
   9ea44:	200e      	movs	r0, #14
   9ea46:	4ba7      	ldr	r3, [pc, #668]	; (9ece4 <Cl_Dprep_setdata+0x3a0>)
   9ea48:	4798      	blx	r3
   9ea4a:	4603      	mov	r3, r0
   9ea4c:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_HEPARIN_RATE;
   9ea4e:	2307      	movs	r3, #7
   9ea50:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_FLOW_RATE, &dataarray[1]);
   9ea52:	f107 0314 	add.w	r3, r7, #20
   9ea56:	3301      	adds	r3, #1
   9ea58:	4619      	mov	r1, r3
   9ea5a:	200e      	movs	r0, #14
   9ea5c:	4ba2      	ldr	r3, [pc, #648]	; (9ece8 <Cl_Dprep_setdata+0x3a4>)
   9ea5e:	4798      	blx	r3
   9ea60:	4603      	mov	r3, r0
   9ea62:	77fb      	strb	r3, [r7, #31]
					 break;
   9ea64:	e307      	b.n	9f076 <Cl_Dprep_setdata+0x732>
					 
					case CON_RX_PARAM_DATA_BOLUS_VOLUME:

					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_BOLUS,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9ea66:	4b9e      	ldr	r3, [pc, #632]	; (9ece0 <Cl_Dprep_setdata+0x39c>)
   9ea68:	78da      	ldrb	r2, [r3, #3]
   9ea6a:	1d3b      	adds	r3, r7, #4
   9ea6c:	4619      	mov	r1, r3
   9ea6e:	200f      	movs	r0, #15
   9ea70:	4b9c      	ldr	r3, [pc, #624]	; (9ece4 <Cl_Dprep_setdata+0x3a0>)
   9ea72:	4798      	blx	r3
   9ea74:	4603      	mov	r3, r0
   9ea76:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_BOLUS_VOLUME;
   9ea78:	230e      	movs	r3, #14
   9ea7a:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_BOLUS, &dataarray[1]);
   9ea7c:	f107 0314 	add.w	r3, r7, #20
   9ea80:	3301      	adds	r3, #1
   9ea82:	4619      	mov	r1, r3
   9ea84:	200f      	movs	r0, #15
   9ea86:	4b98      	ldr	r3, [pc, #608]	; (9ece8 <Cl_Dprep_setdata+0x3a4>)
   9ea88:	4798      	blx	r3
   9ea8a:	4603      	mov	r3, r0
   9ea8c:	77fb      	strb	r3, [r7, #31]

					break;
   9ea8e:	e2f2      	b.n	9f076 <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_APT_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9ea90:	4b93      	ldr	r3, [pc, #588]	; (9ece0 <Cl_Dprep_setdata+0x39c>)
   9ea92:	78da      	ldrb	r2, [r3, #3]
   9ea94:	1d3b      	adds	r3, r7, #4
   9ea96:	4619      	mov	r1, r3
   9ea98:	2007      	movs	r0, #7
   9ea9a:	4b92      	ldr	r3, [pc, #584]	; (9ece4 <Cl_Dprep_setdata+0x3a0>)
   9ea9c:	4798      	blx	r3
   9ea9e:	4603      	mov	r3, r0
   9eaa0:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_APT_VALUE;	 
   9eaa2:	2308      	movs	r3, #8
   9eaa4:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE, &dataarray[1]);
   9eaa6:	f107 0314 	add.w	r3, r7, #20
   9eaaa:	3301      	adds	r3, #1
   9eaac:	4619      	mov	r1, r3
   9eaae:	2007      	movs	r0, #7
   9eab0:	4b8d      	ldr	r3, [pc, #564]	; (9ece8 <Cl_Dprep_setdata+0x3a4>)
   9eab2:	4798      	blx	r3
   9eab4:	4603      	mov	r3, r0
   9eab6:	77fb      	strb	r3, [r7, #31]

					 break;
   9eab8:	e2dd      	b.n	9f076 <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_VPT_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9eaba:	4b89      	ldr	r3, [pc, #548]	; (9ece0 <Cl_Dprep_setdata+0x39c>)
   9eabc:	78da      	ldrb	r2, [r3, #3]
   9eabe:	1d3b      	adds	r3, r7, #4
   9eac0:	4619      	mov	r1, r3
   9eac2:	2008      	movs	r0, #8
   9eac4:	4b87      	ldr	r3, [pc, #540]	; (9ece4 <Cl_Dprep_setdata+0x3a0>)
   9eac6:	4798      	blx	r3
   9eac8:	4603      	mov	r3, r0
   9eaca:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_VPT_VALUE;	 
   9eacc:	2309      	movs	r3, #9
   9eace:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE, &dataarray[1]);
   9ead0:	f107 0314 	add.w	r3, r7, #20
   9ead4:	3301      	adds	r3, #1
   9ead6:	4619      	mov	r1, r3
   9ead8:	2008      	movs	r0, #8
   9eada:	4b83      	ldr	r3, [pc, #524]	; (9ece8 <Cl_Dprep_setdata+0x3a4>)
   9eadc:	4798      	blx	r3
   9eade:	4603      	mov	r3, r0
   9eae0:	77fb      	strb	r3, [r7, #31]

					 break;
   9eae2:	e2c8      	b.n	9f076 <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_TMP_VALUE:

					 break;
					 case	CON_RX_PARAM_DATA_COND_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_CONDUCTIVITY,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9eae4:	4b7e      	ldr	r3, [pc, #504]	; (9ece0 <Cl_Dprep_setdata+0x39c>)
   9eae6:	78da      	ldrb	r2, [r3, #3]
   9eae8:	1d3b      	adds	r3, r7, #4
   9eaea:	4619      	mov	r1, r3
   9eaec:	200a      	movs	r0, #10
   9eaee:	4b7d      	ldr	r3, [pc, #500]	; (9ece4 <Cl_Dprep_setdata+0x3a0>)
   9eaf0:	4798      	blx	r3
   9eaf2:	4603      	mov	r3, r0
   9eaf4:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_COND_VALUE;
   9eaf6:	230b      	movs	r3, #11
   9eaf8:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_CONDUCTIVITY, &dataarray[1]);
   9eafa:	f107 0314 	add.w	r3, r7, #20
   9eafe:	3301      	adds	r3, #1
   9eb00:	4619      	mov	r1, r3
   9eb02:	200a      	movs	r0, #10
   9eb04:	4b78      	ldr	r3, [pc, #480]	; (9ece8 <Cl_Dprep_setdata+0x3a4>)
   9eb06:	4798      	blx	r3
   9eb08:	4603      	mov	r3, r0
   9eb0a:	77fb      	strb	r3, [r7, #31]

					 break;
   9eb0c:	e2b3      	b.n	9f076 <Cl_Dprep_setdata+0x732>

					 case	CON_RX_PARAM_DATA_UF_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_UF_REMOVAL_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9eb0e:	4b74      	ldr	r3, [pc, #464]	; (9ece0 <Cl_Dprep_setdata+0x39c>)
   9eb10:	78da      	ldrb	r2, [r3, #3]
   9eb12:	1d3b      	adds	r3, r7, #4
   9eb14:	4619      	mov	r1, r3
   9eb16:	200b      	movs	r0, #11
   9eb18:	4b72      	ldr	r3, [pc, #456]	; (9ece4 <Cl_Dprep_setdata+0x3a0>)
   9eb1a:	4798      	blx	r3
   9eb1c:	4603      	mov	r3, r0
   9eb1e:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_UF_RATE;
   9eb20:	230c      	movs	r3, #12
   9eb22:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_REMOVAL_RATE, &dataarray[1]);
   9eb24:	f107 0314 	add.w	r3, r7, #20
   9eb28:	3301      	adds	r3, #1
   9eb2a:	4619      	mov	r1, r3
   9eb2c:	200b      	movs	r0, #11
   9eb2e:	4b6e      	ldr	r3, [pc, #440]	; (9ece8 <Cl_Dprep_setdata+0x3a4>)
   9eb30:	4798      	blx	r3
   9eb32:	4603      	mov	r3, r0
   9eb34:	77fb      	strb	r3, [r7, #31]

					 break;
   9eb36:	e29e      	b.n	9f076 <Cl_Dprep_setdata+0x732>
					 case CON_RX_PARAM_DATA_UF_GOAL:
					 Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9eb38:	4b69      	ldr	r3, [pc, #420]	; (9ece0 <Cl_Dprep_setdata+0x39c>)
   9eb3a:	78da      	ldrb	r2, [r3, #3]
   9eb3c:	1d3b      	adds	r3, r7, #4
   9eb3e:	4619      	mov	r1, r3
   9eb40:	200c      	movs	r0, #12
   9eb42:	4b68      	ldr	r3, [pc, #416]	; (9ece4 <Cl_Dprep_setdata+0x3a0>)
   9eb44:	4798      	blx	r3
   9eb46:	4603      	mov	r3, r0
   9eb48:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_UF_GOAL;
   9eb4a:	230d      	movs	r3, #13
   9eb4c:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL, &dataarray[1]);
   9eb4e:	f107 0314 	add.w	r3, r7, #20
   9eb52:	3301      	adds	r3, #1
   9eb54:	4619      	mov	r1, r3
   9eb56:	200c      	movs	r0, #12
   9eb58:	4b63      	ldr	r3, [pc, #396]	; (9ece8 <Cl_Dprep_setdata+0x3a4>)
   9eb5a:	4798      	blx	r3
   9eb5c:	4603      	mov	r3, r0
   9eb5e:	77fb      	strb	r3, [r7, #31]

					 break;
   9eb60:	e289      	b.n	9f076 <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_ABF_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);					 
   9eb62:	4b5f      	ldr	r3, [pc, #380]	; (9ece0 <Cl_Dprep_setdata+0x39c>)
   9eb64:	78da      	ldrb	r2, [r3, #3]
   9eb66:	1d3b      	adds	r3, r7, #4
   9eb68:	4619      	mov	r1, r3
   9eb6a:	200e      	movs	r0, #14
   9eb6c:	4b5d      	ldr	r3, [pc, #372]	; (9ece4 <Cl_Dprep_setdata+0x3a0>)
   9eb6e:	4798      	blx	r3
   9eb70:	4603      	mov	r3, r0
   9eb72:	77fb      	strb	r3, [r7, #31]
					 command = CON_TX_COMMAND_SYSDATA;					 
   9eb74:	2316      	movs	r3, #22
   9eb76:	77bb      	strb	r3, [r7, #30]
					 dataarray[0] = CON_TX_PARAM_DATA_ABF_RATE;
   9eb78:	230f      	movs	r3, #15
   9eb7a:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ARTERIAL_BLOODFLOW_RATE, &dataarray[1]);					 
   9eb7c:	f107 0314 	add.w	r3, r7, #20
   9eb80:	3301      	adds	r3, #1
   9eb82:	4619      	mov	r1, r3
   9eb84:	200d      	movs	r0, #13
   9eb86:	4b58      	ldr	r3, [pc, #352]	; (9ece8 <Cl_Dprep_setdata+0x3a4>)
   9eb88:	4798      	blx	r3
   9eb8a:	4603      	mov	r3, r0
   9eb8c:	77fb      	strb	r3, [r7, #31]
					 break;
   9eb8e:	e272      	b.n	9f076 <Cl_Dprep_setdata+0x732>
					#endif
					case CON_RX_PARAM_DATA_DIALYSIS_FLOW_CONFIG: //0x13
						
						
						
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_FLOW,&cl_PrepData.bytearray[0],2);
   9eb90:	1d3b      	adds	r3, r7, #4
   9eb92:	2202      	movs	r2, #2
   9eb94:	4619      	mov	r1, r3
   9eb96:	2005      	movs	r0, #5
   9eb98:	4b52      	ldr	r3, [pc, #328]	; (9ece4 <Cl_Dprep_setdata+0x3a0>)
   9eb9a:	4798      	blx	r3
   9eb9c:	4603      	mov	r3, r0
   9eb9e:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_FLOW_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9eba0:	1d3b      	adds	r3, r7, #4
   9eba2:	3302      	adds	r3, #2
   9eba4:	2202      	movs	r2, #2
   9eba6:	4619      	mov	r1, r3
   9eba8:	2012      	movs	r0, #18
   9ebaa:	4b4e      	ldr	r3, [pc, #312]	; (9ece4 <Cl_Dprep_setdata+0x3a0>)
   9ebac:	4798      	blx	r3
   9ebae:	4603      	mov	r3, r0
   9ebb0:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_FLOW_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9ebb2:	1d3b      	adds	r3, r7, #4
   9ebb4:	3304      	adds	r3, #4
   9ebb6:	2202      	movs	r2, #2
   9ebb8:	4619      	mov	r1, r3
   9ebba:	2013      	movs	r0, #19
   9ebbc:	4b49      	ldr	r3, [pc, #292]	; (9ece4 <Cl_Dprep_setdata+0x3a0>)
   9ebbe:	4798      	blx	r3
   9ebc0:	4603      	mov	r3, r0
   9ebc2:	77fb      	strb	r3, [r7, #31]
						
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_FLOW_CONFIG;
   9ebc4:	2313      	movs	r3, #19
   9ebc6:	753b      	strb	r3, [r7, #20]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_FLOW, &dataarray[1]);	
   9ebc8:	f107 0314 	add.w	r3, r7, #20
   9ebcc:	3301      	adds	r3, #1
   9ebce:	4619      	mov	r1, r3
   9ebd0:	2005      	movs	r0, #5
   9ebd2:	4b45      	ldr	r3, [pc, #276]	; (9ece8 <Cl_Dprep_setdata+0x3a4>)
   9ebd4:	4798      	blx	r3
   9ebd6:	4603      	mov	r3, r0
   9ebd8:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_FLOW_CONFIG_UPPER, &dataarray[3]);
   9ebda:	f107 0314 	add.w	r3, r7, #20
   9ebde:	3303      	adds	r3, #3
   9ebe0:	4619      	mov	r1, r3
   9ebe2:	2012      	movs	r0, #18
   9ebe4:	4b40      	ldr	r3, [pc, #256]	; (9ece8 <Cl_Dprep_setdata+0x3a4>)
   9ebe6:	4798      	blx	r3
   9ebe8:	4603      	mov	r3, r0
   9ebea:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_FLOW_CONFIG_LOWER, &dataarray[5]);		
   9ebec:	f107 0314 	add.w	r3, r7, #20
   9ebf0:	3305      	adds	r3, #5
   9ebf2:	4619      	mov	r1, r3
   9ebf4:	2013      	movs	r0, #19
   9ebf6:	4b3c      	ldr	r3, [pc, #240]	; (9ece8 <Cl_Dprep_setdata+0x3a4>)
   9ebf8:	4798      	blx	r3
   9ebfa:	4603      	mov	r3, r0
   9ebfc:	77fb      	strb	r3, [r7, #31]
							
					break;
   9ebfe:	e23a      	b.n	9f076 <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_DIALYSIS_TEMP_CONFIG://0x14
											
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_TEMP,&cl_PrepData.bytearray[0],2);
   9ec00:	1d3b      	adds	r3, r7, #4
   9ec02:	2202      	movs	r2, #2
   9ec04:	4619      	mov	r1, r3
   9ec06:	2006      	movs	r0, #6
   9ec08:	4b36      	ldr	r3, [pc, #216]	; (9ece4 <Cl_Dprep_setdata+0x3a0>)
   9ec0a:	4798      	blx	r3
   9ec0c:	4603      	mov	r3, r0
   9ec0e:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_TEMP_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9ec10:	1d3b      	adds	r3, r7, #4
   9ec12:	3302      	adds	r3, #2
   9ec14:	2202      	movs	r2, #2
   9ec16:	4619      	mov	r1, r3
   9ec18:	2014      	movs	r0, #20
   9ec1a:	4b32      	ldr	r3, [pc, #200]	; (9ece4 <Cl_Dprep_setdata+0x3a0>)
   9ec1c:	4798      	blx	r3
   9ec1e:	4603      	mov	r3, r0
   9ec20:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_TEMP_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9ec22:	1d3b      	adds	r3, r7, #4
   9ec24:	3304      	adds	r3, #4
   9ec26:	2202      	movs	r2, #2
   9ec28:	4619      	mov	r1, r3
   9ec2a:	2015      	movs	r0, #21
   9ec2c:	4b2d      	ldr	r3, [pc, #180]	; (9ece4 <Cl_Dprep_setdata+0x3a0>)
   9ec2e:	4798      	blx	r3
   9ec30:	4603      	mov	r3, r0
   9ec32:	77fb      	strb	r3, [r7, #31]
											
											dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_TEMP_CONFIG;
   9ec34:	2314      	movs	r3, #20
   9ec36:	753b      	strb	r3, [r7, #20]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_TEMP, &dataarray[1]);
   9ec38:	f107 0314 	add.w	r3, r7, #20
   9ec3c:	3301      	adds	r3, #1
   9ec3e:	4619      	mov	r1, r3
   9ec40:	2006      	movs	r0, #6
   9ec42:	4b29      	ldr	r3, [pc, #164]	; (9ece8 <Cl_Dprep_setdata+0x3a4>)
   9ec44:	4798      	blx	r3
   9ec46:	4603      	mov	r3, r0
   9ec48:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_TEMP_CONFIG_UPPER, &dataarray[3]);
   9ec4a:	f107 0314 	add.w	r3, r7, #20
   9ec4e:	3303      	adds	r3, #3
   9ec50:	4619      	mov	r1, r3
   9ec52:	2014      	movs	r0, #20
   9ec54:	4b24      	ldr	r3, [pc, #144]	; (9ece8 <Cl_Dprep_setdata+0x3a4>)
   9ec56:	4798      	blx	r3
   9ec58:	4603      	mov	r3, r0
   9ec5a:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_TEMP_CONFIG_LOWER, &dataarray[5]);
   9ec5c:	f107 0314 	add.w	r3, r7, #20
   9ec60:	3305      	adds	r3, #5
   9ec62:	4619      	mov	r1, r3
   9ec64:	2015      	movs	r0, #21
   9ec66:	4b20      	ldr	r3, [pc, #128]	; (9ece8 <Cl_Dprep_setdata+0x3a4>)
   9ec68:	4798      	blx	r3
   9ec6a:	4603      	mov	r3, r0
   9ec6c:	77fb      	strb	r3, [r7, #31]
					break;
   9ec6e:	e202      	b.n	9f076 <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_HEPARIN_RATE_CONFIG://0x15
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],2);
   9ec70:	1d3b      	adds	r3, r7, #4
   9ec72:	2202      	movs	r2, #2
   9ec74:	4619      	mov	r1, r3
   9ec76:	200e      	movs	r0, #14
   9ec78:	4b1a      	ldr	r3, [pc, #104]	; (9ece4 <Cl_Dprep_setdata+0x3a0>)
   9ec7a:	4798      	blx	r3
   9ec7c:	4603      	mov	r3, r0
   9ec7e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9ec80:	1d3b      	adds	r3, r7, #4
   9ec82:	3302      	adds	r3, #2
   9ec84:	2202      	movs	r2, #2
   9ec86:	4619      	mov	r1, r3
   9ec88:	2016      	movs	r0, #22
   9ec8a:	4b16      	ldr	r3, [pc, #88]	; (9ece4 <Cl_Dprep_setdata+0x3a0>)
   9ec8c:	4798      	blx	r3
   9ec8e:	4603      	mov	r3, r0
   9ec90:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9ec92:	1d3b      	adds	r3, r7, #4
   9ec94:	3304      	adds	r3, #4
   9ec96:	2202      	movs	r2, #2
   9ec98:	4619      	mov	r1, r3
   9ec9a:	2017      	movs	r0, #23
   9ec9c:	4b11      	ldr	r3, [pc, #68]	; (9ece4 <Cl_Dprep_setdata+0x3a0>)
   9ec9e:	4798      	blx	r3
   9eca0:	4603      	mov	r3, r0
   9eca2:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_HEPARIN_RATE_CONFIG;
   9eca4:	2315      	movs	r3, #21
   9eca6:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_FLOW_RATE, &dataarray[1]);
   9eca8:	f107 0314 	add.w	r3, r7, #20
   9ecac:	3301      	adds	r3, #1
   9ecae:	4619      	mov	r1, r3
   9ecb0:	200e      	movs	r0, #14
   9ecb2:	4b0d      	ldr	r3, [pc, #52]	; (9ece8 <Cl_Dprep_setdata+0x3a4>)
   9ecb4:	4798      	blx	r3
   9ecb6:	4603      	mov	r3, r0
   9ecb8:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_RATE_CONFIG_UPPER, &dataarray[3]);
   9ecba:	f107 0314 	add.w	r3, r7, #20
   9ecbe:	3303      	adds	r3, #3
   9ecc0:	4619      	mov	r1, r3
   9ecc2:	2016      	movs	r0, #22
   9ecc4:	4b08      	ldr	r3, [pc, #32]	; (9ece8 <Cl_Dprep_setdata+0x3a4>)
   9ecc6:	4798      	blx	r3
   9ecc8:	4603      	mov	r3, r0
   9ecca:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_RATE_CONFIG_LOWER, &dataarray[5]);
   9eccc:	f107 0314 	add.w	r3, r7, #20
   9ecd0:	3305      	adds	r3, #5
   9ecd2:	4619      	mov	r1, r3
   9ecd4:	2017      	movs	r0, #23
   9ecd6:	4b04      	ldr	r3, [pc, #16]	; (9ece8 <Cl_Dprep_setdata+0x3a4>)
   9ecd8:	4798      	blx	r3
   9ecda:	4603      	mov	r3, r0
   9ecdc:	77fb      	strb	r3, [r7, #31]
					break;
   9ecde:	e1ca      	b.n	9f076 <Cl_Dprep_setdata+0x732>
   9ece0:	20072f98 	.word	0x20072f98
   9ece4:	00098271 	.word	0x00098271
   9ece8:	00098239 	.word	0x00098239
					case CON_RX_PARAM_DATA_APT_VALUE_CONFIG://0x16
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE,&cl_PrepData.bytearray[0],2);
   9ecec:	1d3b      	adds	r3, r7, #4
   9ecee:	2202      	movs	r2, #2
   9ecf0:	4619      	mov	r1, r3
   9ecf2:	2007      	movs	r0, #7
   9ecf4:	4bc1      	ldr	r3, [pc, #772]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9ecf6:	4798      	blx	r3
   9ecf8:	4603      	mov	r3, r0
   9ecfa:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9ecfc:	1d3b      	adds	r3, r7, #4
   9ecfe:	3302      	adds	r3, #2
   9ed00:	2202      	movs	r2, #2
   9ed02:	4619      	mov	r1, r3
   9ed04:	2018      	movs	r0, #24
   9ed06:	4bbd      	ldr	r3, [pc, #756]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9ed08:	4798      	blx	r3
   9ed0a:	4603      	mov	r3, r0
   9ed0c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9ed0e:	1d3b      	adds	r3, r7, #4
   9ed10:	3304      	adds	r3, #4
   9ed12:	2202      	movs	r2, #2
   9ed14:	4619      	mov	r1, r3
   9ed16:	2019      	movs	r0, #25
   9ed18:	4bb8      	ldr	r3, [pc, #736]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9ed1a:	4798      	blx	r3
   9ed1c:	4603      	mov	r3, r0
   9ed1e:	77fb      	strb	r3, [r7, #31]
																
									dataarray[0] = CON_TX_PARAM_DATA_APT_VALUE_CONFIG;
   9ed20:	2316      	movs	r3, #22
   9ed22:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE, &dataarray[1]);
   9ed24:	f107 0314 	add.w	r3, r7, #20
   9ed28:	3301      	adds	r3, #1
   9ed2a:	4619      	mov	r1, r3
   9ed2c:	2007      	movs	r0, #7
   9ed2e:	4bb4      	ldr	r3, [pc, #720]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9ed30:	4798      	blx	r3
   9ed32:	4603      	mov	r3, r0
   9ed34:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE_CONFIG_UPPER, &dataarray[3]);
   9ed36:	f107 0314 	add.w	r3, r7, #20
   9ed3a:	3303      	adds	r3, #3
   9ed3c:	4619      	mov	r1, r3
   9ed3e:	2018      	movs	r0, #24
   9ed40:	4baf      	ldr	r3, [pc, #700]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9ed42:	4798      	blx	r3
   9ed44:	4603      	mov	r3, r0
   9ed46:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE_CONFIG_LOWER, &dataarray[5]);
   9ed48:	f107 0314 	add.w	r3, r7, #20
   9ed4c:	3305      	adds	r3, #5
   9ed4e:	4619      	mov	r1, r3
   9ed50:	2019      	movs	r0, #25
   9ed52:	4bab      	ldr	r3, [pc, #684]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9ed54:	4798      	blx	r3
   9ed56:	4603      	mov	r3, r0
   9ed58:	77fb      	strb	r3, [r7, #31]
					break;
   9ed5a:	e18c      	b.n	9f076 <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_VPT_VALUE_CONFIG://0x17
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE,&cl_PrepData.bytearray[0],2);
   9ed5c:	1d3b      	adds	r3, r7, #4
   9ed5e:	2202      	movs	r2, #2
   9ed60:	4619      	mov	r1, r3
   9ed62:	2008      	movs	r0, #8
   9ed64:	4ba5      	ldr	r3, [pc, #660]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9ed66:	4798      	blx	r3
   9ed68:	4603      	mov	r3, r0
   9ed6a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9ed6c:	1d3b      	adds	r3, r7, #4
   9ed6e:	3302      	adds	r3, #2
   9ed70:	2202      	movs	r2, #2
   9ed72:	4619      	mov	r1, r3
   9ed74:	201a      	movs	r0, #26
   9ed76:	4ba1      	ldr	r3, [pc, #644]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9ed78:	4798      	blx	r3
   9ed7a:	4603      	mov	r3, r0
   9ed7c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9ed7e:	1d3b      	adds	r3, r7, #4
   9ed80:	3304      	adds	r3, #4
   9ed82:	2202      	movs	r2, #2
   9ed84:	4619      	mov	r1, r3
   9ed86:	201b      	movs	r0, #27
   9ed88:	4b9c      	ldr	r3, [pc, #624]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9ed8a:	4798      	blx	r3
   9ed8c:	4603      	mov	r3, r0
   9ed8e:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_VPT_VALUE_CONFIG;
   9ed90:	2317      	movs	r3, #23
   9ed92:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE, &dataarray[1]);
   9ed94:	f107 0314 	add.w	r3, r7, #20
   9ed98:	3301      	adds	r3, #1
   9ed9a:	4619      	mov	r1, r3
   9ed9c:	2008      	movs	r0, #8
   9ed9e:	4b98      	ldr	r3, [pc, #608]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9eda0:	4798      	blx	r3
   9eda2:	4603      	mov	r3, r0
   9eda4:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE_CONFIG_UPPER, &dataarray[3]);
   9eda6:	f107 0314 	add.w	r3, r7, #20
   9edaa:	3303      	adds	r3, #3
   9edac:	4619      	mov	r1, r3
   9edae:	201a      	movs	r0, #26
   9edb0:	4b93      	ldr	r3, [pc, #588]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9edb2:	4798      	blx	r3
   9edb4:	4603      	mov	r3, r0
   9edb6:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE_CONFIG_LOWER, &dataarray[5]);
   9edb8:	f107 0314 	add.w	r3, r7, #20
   9edbc:	3305      	adds	r3, #5
   9edbe:	4619      	mov	r1, r3
   9edc0:	201b      	movs	r0, #27
   9edc2:	4b8f      	ldr	r3, [pc, #572]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9edc4:	4798      	blx	r3
   9edc6:	4603      	mov	r3, r0
   9edc8:	77fb      	strb	r3, [r7, #31]
					break;
   9edca:	e154      	b.n	9f076 <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_TMP_VALUE_CONFIG://0x18
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP,&cl_PrepData.bytearray[0],2);
   9edcc:	1d3b      	adds	r3, r7, #4
   9edce:	2202      	movs	r2, #2
   9edd0:	4619      	mov	r1, r3
   9edd2:	2009      	movs	r0, #9
   9edd4:	4b89      	ldr	r3, [pc, #548]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9edd6:	4798      	blx	r3
   9edd8:	4603      	mov	r3, r0
   9edda:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[0],2);
   9eddc:	1d3b      	adds	r3, r7, #4
   9edde:	2202      	movs	r2, #2
   9ede0:	4619      	mov	r1, r3
   9ede2:	201c      	movs	r0, #28
   9ede4:	4b85      	ldr	r3, [pc, #532]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9ede6:	4798      	blx	r3
   9ede8:	4603      	mov	r3, r0
   9edea:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9edec:	1d3b      	adds	r3, r7, #4
   9edee:	3304      	adds	r3, #4
   9edf0:	2202      	movs	r2, #2
   9edf2:	4619      	mov	r1, r3
   9edf4:	201d      	movs	r0, #29
   9edf6:	4b81      	ldr	r3, [pc, #516]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9edf8:	4798      	blx	r3
   9edfa:	4603      	mov	r3, r0
   9edfc:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_TMP_VALUE_CONFIG;
   9edfe:	2318      	movs	r3, #24
   9ee00:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP, &dataarray[1]);
   9ee02:	f107 0314 	add.w	r3, r7, #20
   9ee06:	3301      	adds	r3, #1
   9ee08:	4619      	mov	r1, r3
   9ee0a:	2009      	movs	r0, #9
   9ee0c:	4b7c      	ldr	r3, [pc, #496]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9ee0e:	4798      	blx	r3
   9ee10:	4603      	mov	r3, r0
   9ee12:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP_VALUE_CONFIG_UPPER, &dataarray[3]);
   9ee14:	f107 0314 	add.w	r3, r7, #20
   9ee18:	3303      	adds	r3, #3
   9ee1a:	4619      	mov	r1, r3
   9ee1c:	201c      	movs	r0, #28
   9ee1e:	4b78      	ldr	r3, [pc, #480]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9ee20:	4798      	blx	r3
   9ee22:	4603      	mov	r3, r0
   9ee24:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP_VALUE_CONFIG_LOWER, &dataarray[5]);
   9ee26:	f107 0314 	add.w	r3, r7, #20
   9ee2a:	3305      	adds	r3, #5
   9ee2c:	4619      	mov	r1, r3
   9ee2e:	201d      	movs	r0, #29
   9ee30:	4b73      	ldr	r3, [pc, #460]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9ee32:	4798      	blx	r3
   9ee34:	4603      	mov	r3, r0
   9ee36:	77fb      	strb	r3, [r7, #31]
					break;
   9ee38:	e11d      	b.n	9f076 <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_COND_VALUE_CONFIG://0x19
									Cl_dprepretcode =sv_nvmsetdata(NV_CONDUCTIVITY,&cl_PrepData.bytearray[0],2);
   9ee3a:	1d3b      	adds	r3, r7, #4
   9ee3c:	2202      	movs	r2, #2
   9ee3e:	4619      	mov	r1, r3
   9ee40:	200a      	movs	r0, #10
   9ee42:	4b6e      	ldr	r3, [pc, #440]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9ee44:	4798      	blx	r3
   9ee46:	4603      	mov	r3, r0
   9ee48:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_COND_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9ee4a:	1d3b      	adds	r3, r7, #4
   9ee4c:	3302      	adds	r3, #2
   9ee4e:	2202      	movs	r2, #2
   9ee50:	4619      	mov	r1, r3
   9ee52:	201e      	movs	r0, #30
   9ee54:	4b69      	ldr	r3, [pc, #420]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9ee56:	4798      	blx	r3
   9ee58:	4603      	mov	r3, r0
   9ee5a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_COND_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9ee5c:	1d3b      	adds	r3, r7, #4
   9ee5e:	3304      	adds	r3, #4
   9ee60:	2202      	movs	r2, #2
   9ee62:	4619      	mov	r1, r3
   9ee64:	201f      	movs	r0, #31
   9ee66:	4b65      	ldr	r3, [pc, #404]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9ee68:	4798      	blx	r3
   9ee6a:	4603      	mov	r3, r0
   9ee6c:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_COND_VALUE_CONFIG;
   9ee6e:	2319      	movs	r3, #25
   9ee70:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_CONDUCTIVITY, &dataarray[1]);
   9ee72:	f107 0314 	add.w	r3, r7, #20
   9ee76:	3301      	adds	r3, #1
   9ee78:	4619      	mov	r1, r3
   9ee7a:	200a      	movs	r0, #10
   9ee7c:	4b60      	ldr	r3, [pc, #384]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9ee7e:	4798      	blx	r3
   9ee80:	4603      	mov	r3, r0
   9ee82:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_COND_VALUE_CONFIG_UPPER, &dataarray[3]);
   9ee84:	f107 0314 	add.w	r3, r7, #20
   9ee88:	3303      	adds	r3, #3
   9ee8a:	4619      	mov	r1, r3
   9ee8c:	201e      	movs	r0, #30
   9ee8e:	4b5c      	ldr	r3, [pc, #368]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9ee90:	4798      	blx	r3
   9ee92:	4603      	mov	r3, r0
   9ee94:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_COND_VALUE_CONFIG_LOWER, &dataarray[5]);
   9ee96:	f107 0314 	add.w	r3, r7, #20
   9ee9a:	3305      	adds	r3, #5
   9ee9c:	4619      	mov	r1, r3
   9ee9e:	201f      	movs	r0, #31
   9eea0:	4b57      	ldr	r3, [pc, #348]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9eea2:	4798      	blx	r3
   9eea4:	4603      	mov	r3, r0
   9eea6:	77fb      	strb	r3, [r7, #31]
					break;
   9eea8:	e0e5      	b.n	9f076 <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_UF_RATE_CONFIG://0x1A
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_REMOVAL_RATE,&cl_PrepData.bytearray[0],2);
   9eeaa:	1d3b      	adds	r3, r7, #4
   9eeac:	2202      	movs	r2, #2
   9eeae:	4619      	mov	r1, r3
   9eeb0:	200b      	movs	r0, #11
   9eeb2:	4b52      	ldr	r3, [pc, #328]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9eeb4:	4798      	blx	r3
   9eeb6:	4603      	mov	r3, r0
   9eeb8:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9eeba:	1d3b      	adds	r3, r7, #4
   9eebc:	3302      	adds	r3, #2
   9eebe:	2202      	movs	r2, #2
   9eec0:	4619      	mov	r1, r3
   9eec2:	2020      	movs	r0, #32
   9eec4:	4b4d      	ldr	r3, [pc, #308]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9eec6:	4798      	blx	r3
   9eec8:	4603      	mov	r3, r0
   9eeca:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9eecc:	1d3b      	adds	r3, r7, #4
   9eece:	3304      	adds	r3, #4
   9eed0:	2202      	movs	r2, #2
   9eed2:	4619      	mov	r1, r3
   9eed4:	2021      	movs	r0, #33	; 0x21
   9eed6:	4b49      	ldr	r3, [pc, #292]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9eed8:	4798      	blx	r3
   9eeda:	4603      	mov	r3, r0
   9eedc:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_UF_RATE_CONFIG;
   9eede:	231a      	movs	r3, #26
   9eee0:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_REMOVAL_RATE, &dataarray[1]);
   9eee2:	f107 0314 	add.w	r3, r7, #20
   9eee6:	3301      	adds	r3, #1
   9eee8:	4619      	mov	r1, r3
   9eeea:	200b      	movs	r0, #11
   9eeec:	4b44      	ldr	r3, [pc, #272]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9eeee:	4798      	blx	r3
   9eef0:	4603      	mov	r3, r0
   9eef2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_RATE_CONFIG_UPPER, &dataarray[3]);
   9eef4:	f107 0314 	add.w	r3, r7, #20
   9eef8:	3303      	adds	r3, #3
   9eefa:	4619      	mov	r1, r3
   9eefc:	2020      	movs	r0, #32
   9eefe:	4b40      	ldr	r3, [pc, #256]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9ef00:	4798      	blx	r3
   9ef02:	4603      	mov	r3, r0
   9ef04:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_RATE_CONFIG_LOWER, &dataarray[5]);
   9ef06:	f107 0314 	add.w	r3, r7, #20
   9ef0a:	3305      	adds	r3, #5
   9ef0c:	4619      	mov	r1, r3
   9ef0e:	2021      	movs	r0, #33	; 0x21
   9ef10:	4b3b      	ldr	r3, [pc, #236]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9ef12:	4798      	blx	r3
   9ef14:	4603      	mov	r3, r0
   9ef16:	77fb      	strb	r3, [r7, #31]
					break;
   9ef18:	e0ad      	b.n	9f076 <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_UF_GOAL_CONFIG://0x1B,
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL,&cl_PrepData.bytearray[0],2);
   9ef1a:	1d3b      	adds	r3, r7, #4
   9ef1c:	2202      	movs	r2, #2
   9ef1e:	4619      	mov	r1, r3
   9ef20:	200c      	movs	r0, #12
   9ef22:	4b36      	ldr	r3, [pc, #216]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9ef24:	4798      	blx	r3
   9ef26:	4603      	mov	r3, r0
   9ef28:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9ef2a:	1d3b      	adds	r3, r7, #4
   9ef2c:	3302      	adds	r3, #2
   9ef2e:	2202      	movs	r2, #2
   9ef30:	4619      	mov	r1, r3
   9ef32:	2022      	movs	r0, #34	; 0x22
   9ef34:	4b31      	ldr	r3, [pc, #196]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9ef36:	4798      	blx	r3
   9ef38:	4603      	mov	r3, r0
   9ef3a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9ef3c:	1d3b      	adds	r3, r7, #4
   9ef3e:	3304      	adds	r3, #4
   9ef40:	2202      	movs	r2, #2
   9ef42:	4619      	mov	r1, r3
   9ef44:	2023      	movs	r0, #35	; 0x23
   9ef46:	4b2d      	ldr	r3, [pc, #180]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9ef48:	4798      	blx	r3
   9ef4a:	4603      	mov	r3, r0
   9ef4c:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_UF_GOAL_CONFIG;
   9ef4e:	231b      	movs	r3, #27
   9ef50:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL, &dataarray[1]);
   9ef52:	f107 0314 	add.w	r3, r7, #20
   9ef56:	3301      	adds	r3, #1
   9ef58:	4619      	mov	r1, r3
   9ef5a:	200c      	movs	r0, #12
   9ef5c:	4b28      	ldr	r3, [pc, #160]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9ef5e:	4798      	blx	r3
   9ef60:	4603      	mov	r3, r0
   9ef62:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL_CONFIG_UPPER, &dataarray[3]);
   9ef64:	f107 0314 	add.w	r3, r7, #20
   9ef68:	3303      	adds	r3, #3
   9ef6a:	4619      	mov	r1, r3
   9ef6c:	2022      	movs	r0, #34	; 0x22
   9ef6e:	4b24      	ldr	r3, [pc, #144]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9ef70:	4798      	blx	r3
   9ef72:	4603      	mov	r3, r0
   9ef74:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL_CONFIG_LOWER, &dataarray[5]);
   9ef76:	f107 0314 	add.w	r3, r7, #20
   9ef7a:	3305      	adds	r3, #5
   9ef7c:	4619      	mov	r1, r3
   9ef7e:	2023      	movs	r0, #35	; 0x23
   9ef80:	4b1f      	ldr	r3, [pc, #124]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9ef82:	4798      	blx	r3
   9ef84:	4603      	mov	r3, r0
   9ef86:	77fb      	strb	r3, [r7, #31]
					break;
   9ef88:	e075      	b.n	9f076 <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_BOLUS_VOLUME_CONFIG://1C
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_BOLUS,&cl_PrepData.bytearray[0],2);
   9ef8a:	1d3b      	adds	r3, r7, #4
   9ef8c:	2202      	movs	r2, #2
   9ef8e:	4619      	mov	r1, r3
   9ef90:	200f      	movs	r0, #15
   9ef92:	4b1a      	ldr	r3, [pc, #104]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9ef94:	4798      	blx	r3
   9ef96:	4603      	mov	r3, r0
   9ef98:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_BOLUS_VOLUME_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9ef9a:	1d3b      	adds	r3, r7, #4
   9ef9c:	3302      	adds	r3, #2
   9ef9e:	2202      	movs	r2, #2
   9efa0:	4619      	mov	r1, r3
   9efa2:	2024      	movs	r0, #36	; 0x24
   9efa4:	4b15      	ldr	r3, [pc, #84]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9efa6:	4798      	blx	r3
   9efa8:	4603      	mov	r3, r0
   9efaa:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_BOLUS_VOLUME_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9efac:	1d3b      	adds	r3, r7, #4
   9efae:	3304      	adds	r3, #4
   9efb0:	2202      	movs	r2, #2
   9efb2:	4619      	mov	r1, r3
   9efb4:	2025      	movs	r0, #37	; 0x25
   9efb6:	4b11      	ldr	r3, [pc, #68]	; (9effc <Cl_Dprep_setdata+0x6b8>)
   9efb8:	4798      	blx	r3
   9efba:	4603      	mov	r3, r0
   9efbc:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_BOLUS_VOLUME_CONFIG;
   9efbe:	231c      	movs	r3, #28
   9efc0:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_BOLUS, &dataarray[1]);
   9efc2:	f107 0314 	add.w	r3, r7, #20
   9efc6:	3301      	adds	r3, #1
   9efc8:	4619      	mov	r1, r3
   9efca:	200f      	movs	r0, #15
   9efcc:	4b0c      	ldr	r3, [pc, #48]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9efce:	4798      	blx	r3
   9efd0:	4603      	mov	r3, r0
   9efd2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_BOLUS_VOLUME_CONFIG_UPPER, &dataarray[3]);
   9efd4:	f107 0314 	add.w	r3, r7, #20
   9efd8:	3303      	adds	r3, #3
   9efda:	4619      	mov	r1, r3
   9efdc:	2024      	movs	r0, #36	; 0x24
   9efde:	4b08      	ldr	r3, [pc, #32]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9efe0:	4798      	blx	r3
   9efe2:	4603      	mov	r3, r0
   9efe4:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_BOLUS_VOLUME_CONFIG_LOWER, &dataarray[5]);
   9efe6:	f107 0314 	add.w	r3, r7, #20
   9efea:	3305      	adds	r3, #5
   9efec:	4619      	mov	r1, r3
   9efee:	2025      	movs	r0, #37	; 0x25
   9eff0:	4b03      	ldr	r3, [pc, #12]	; (9f000 <Cl_Dprep_setdata+0x6bc>)
   9eff2:	4798      	blx	r3
   9eff4:	4603      	mov	r3, r0
   9eff6:	77fb      	strb	r3, [r7, #31]
					break;
   9eff8:	e03d      	b.n	9f076 <Cl_Dprep_setdata+0x732>
   9effa:	bf00      	nop
   9effc:	00098271 	.word	0x00098271
   9f000:	00098239 	.word	0x00098239
					case CON_RX_PARAM_DATA_ABF_RATE_CONFIG://0X1D
									Cl_dprepretcode =sv_nvmsetdata(NV_ARTERIAL_BLOODFLOW_RATE,&cl_PrepData.bytearray[0],2);
   9f004:	1d3b      	adds	r3, r7, #4
   9f006:	2202      	movs	r2, #2
   9f008:	4619      	mov	r1, r3
   9f00a:	200d      	movs	r0, #13
   9f00c:	4b22      	ldr	r3, [pc, #136]	; (9f098 <Cl_Dprep_setdata+0x754>)
   9f00e:	4798      	blx	r3
   9f010:	4603      	mov	r3, r0
   9f012:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_ABF_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9f014:	1d3b      	adds	r3, r7, #4
   9f016:	3302      	adds	r3, #2
   9f018:	2202      	movs	r2, #2
   9f01a:	4619      	mov	r1, r3
   9f01c:	2026      	movs	r0, #38	; 0x26
   9f01e:	4b1e      	ldr	r3, [pc, #120]	; (9f098 <Cl_Dprep_setdata+0x754>)
   9f020:	4798      	blx	r3
   9f022:	4603      	mov	r3, r0
   9f024:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_ABF_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9f026:	1d3b      	adds	r3, r7, #4
   9f028:	3304      	adds	r3, #4
   9f02a:	2202      	movs	r2, #2
   9f02c:	4619      	mov	r1, r3
   9f02e:	2027      	movs	r0, #39	; 0x27
   9f030:	4b19      	ldr	r3, [pc, #100]	; (9f098 <Cl_Dprep_setdata+0x754>)
   9f032:	4798      	blx	r3
   9f034:	4603      	mov	r3, r0
   9f036:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_ABF_RATE_CONFIG;
   9f038:	231d      	movs	r3, #29
   9f03a:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ARTERIAL_BLOODFLOW_RATE, &dataarray[1]);
   9f03c:	f107 0314 	add.w	r3, r7, #20
   9f040:	3301      	adds	r3, #1
   9f042:	4619      	mov	r1, r3
   9f044:	200d      	movs	r0, #13
   9f046:	4b15      	ldr	r3, [pc, #84]	; (9f09c <Cl_Dprep_setdata+0x758>)
   9f048:	4798      	blx	r3
   9f04a:	4603      	mov	r3, r0
   9f04c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ABF_RATE_CONFIG_UPPER, &dataarray[3]);
   9f04e:	f107 0314 	add.w	r3, r7, #20
   9f052:	3303      	adds	r3, #3
   9f054:	4619      	mov	r1, r3
   9f056:	2026      	movs	r0, #38	; 0x26
   9f058:	4b10      	ldr	r3, [pc, #64]	; (9f09c <Cl_Dprep_setdata+0x758>)
   9f05a:	4798      	blx	r3
   9f05c:	4603      	mov	r3, r0
   9f05e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ABF_RATE_CONFIG_LOWER, &dataarray[5]);
   9f060:	f107 0314 	add.w	r3, r7, #20
   9f064:	3305      	adds	r3, #5
   9f066:	4619      	mov	r1, r3
   9f068:	2027      	movs	r0, #39	; 0x27
   9f06a:	4b0c      	ldr	r3, [pc, #48]	; (9f09c <Cl_Dprep_setdata+0x758>)
   9f06c:	4798      	blx	r3
   9f06e:	4603      	mov	r3, r0
   9f070:	77fb      	strb	r3, [r7, #31]
					break;
   9f072:	e000      	b.n	9f076 <Cl_Dprep_setdata+0x732>
					
					 default:
					 break;
   9f074:	bf00      	nop
				}
					command = CON_TX_COMMAND_SYSDATA;
   9f076:	2316      	movs	r3, #22
   9f078:	77bb      	strb	r3, [r7, #30]
					Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,size);
   9f07a:	7bba      	ldrb	r2, [r7, #14]
   9f07c:	f107 0114 	add.w	r1, r7, #20
   9f080:	7fbb      	ldrb	r3, [r7, #30]
   9f082:	4618      	mov	r0, r3
   9f084:	4b06      	ldr	r3, [pc, #24]	; (9f0a0 <Cl_Dprep_setdata+0x75c>)
   9f086:	4798      	blx	r3
   9f088:	4603      	mov	r3, r0
   9f08a:	77fb      	strb	r3, [r7, #31]
	return CL_OK;
   9f08c:	2300      	movs	r3, #0
}
   9f08e:	4618      	mov	r0, r3
   9f090:	3724      	adds	r7, #36	; 0x24
   9f092:	46bd      	mov	sp, r7
   9f094:	bd90      	pop	{r4, r7, pc}
   9f096:	bf00      	nop
   9f098:	00098271 	.word	0x00098271
   9f09c:	00098239 	.word	0x00098239
   9f0a0:	00099729 	.word	0x00099729

0009f0a4 <conf_activate_pressure_alarms>:

conf_activate_pressure_alarms(int dflow){
   9f0a4:	b590      	push	{r4, r7, lr}
   9f0a6:	b085      	sub	sp, #20
   9f0a8:	af02      	add	r7, sp, #8
   9f0aa:	6078      	str	r0, [r7, #4]
	
	switch(dflow){
   9f0ac:	687b      	ldr	r3, [r7, #4]
   9f0ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   9f0b2:	f000 80ab 	beq.w	9f20c <conf_activate_pressure_alarms+0x168>
   9f0b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   9f0ba:	dc04      	bgt.n	9f0c6 <conf_activate_pressure_alarms+0x22>
   9f0bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   9f0c0:	f000 80f2 	beq.w	9f2a8 <conf_activate_pressure_alarms+0x204>
   9f0c4:	e13e      	b.n	9f344 <conf_activate_pressure_alarms+0x2a0>
   9f0c6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
   9f0ca:	d051      	beq.n	9f170 <conf_activate_pressure_alarms+0xcc>
   9f0cc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   9f0d0:	f040 8138 	bne.w	9f344 <conf_activate_pressure_alarms+0x2a0>
		
		case 800 :
					Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,400,0,0);
   9f0d4:	2300      	movs	r3, #0
   9f0d6:	9300      	str	r3, [sp, #0]
   9f0d8:	f04f 0300 	mov.w	r3, #0
   9f0dc:	4a9c      	ldr	r2, [pc, #624]	; (9f350 <conf_activate_pressure_alarms+0x2ac>)
   9f0de:	2102      	movs	r1, #2
   9f0e0:	2015      	movs	r0, #21
   9f0e2:	4c9c      	ldr	r4, [pc, #624]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f0e4:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,400,0,0);
   9f0e6:	2300      	movs	r3, #0
   9f0e8:	9300      	str	r3, [sp, #0]
   9f0ea:	f04f 0300 	mov.w	r3, #0
   9f0ee:	4a98      	ldr	r2, [pc, #608]	; (9f350 <conf_activate_pressure_alarms+0x2ac>)
   9f0f0:	2102      	movs	r1, #2
   9f0f2:	2017      	movs	r0, #23
   9f0f4:	4c97      	ldr	r4, [pc, #604]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f0f6:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,2000,0,0);
   9f0f8:	2300      	movs	r3, #0
   9f0fa:	9300      	str	r3, [sp, #0]
   9f0fc:	f04f 0300 	mov.w	r3, #0
   9f100:	4a95      	ldr	r2, [pc, #596]	; (9f358 <conf_activate_pressure_alarms+0x2b4>)
   9f102:	2102      	movs	r1, #2
   9f104:	2027      	movs	r0, #39	; 0x27
   9f106:	4c93      	ldr	r4, [pc, #588]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f108:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,0,0);
   9f10a:	2300      	movs	r3, #0
   9f10c:	9300      	str	r3, [sp, #0]
   9f10e:	f04f 0300 	mov.w	r3, #0
   9f112:	f04f 0200 	mov.w	r2, #0
   9f116:	2103      	movs	r1, #3
   9f118:	2016      	movs	r0, #22
   9f11a:	4c8e      	ldr	r4, [pc, #568]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f11c:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,0,0);
   9f11e:	2300      	movs	r3, #0
   9f120:	9300      	str	r3, [sp, #0]
   9f122:	f04f 0300 	mov.w	r3, #0
   9f126:	f04f 0200 	mov.w	r2, #0
   9f12a:	2103      	movs	r1, #3
   9f12c:	2018      	movs	r0, #24
   9f12e:	4c89      	ldr	r4, [pc, #548]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f130:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,0,0);
   9f132:	2300      	movs	r3, #0
   9f134:	9300      	str	r3, [sp, #0]
   9f136:	f04f 0300 	mov.w	r3, #0
   9f13a:	f04f 0200 	mov.w	r2, #0
   9f13e:	2103      	movs	r1, #3
   9f140:	2028      	movs	r0, #40	; 0x28
   9f142:	4c84      	ldr	r4, [pc, #528]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f144:	47a0      	blx	r4
					
					Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   9f146:	2101      	movs	r1, #1
   9f148:	2015      	movs	r0, #21
   9f14a:	4b84      	ldr	r3, [pc, #528]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f14c:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   9f14e:	2101      	movs	r1, #1
   9f150:	2016      	movs	r0, #22
   9f152:	4b82      	ldr	r3, [pc, #520]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f154:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   9f156:	2101      	movs	r1, #1
   9f158:	2017      	movs	r0, #23
   9f15a:	4b80      	ldr	r3, [pc, #512]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f15c:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   9f15e:	2101      	movs	r1, #1
   9f160:	2018      	movs	r0, #24
   9f162:	4b7e      	ldr	r3, [pc, #504]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f164:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );	
   9f166:	2101      	movs	r1, #1
   9f168:	2027      	movs	r0, #39	; 0x27
   9f16a:	4b7c      	ldr	r3, [pc, #496]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f16c:	4798      	blx	r3
					
					break;
   9f16e:	e0e9      	b.n	9f344 <conf_activate_pressure_alarms+0x2a0>
		case 700 :
		Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,400,0,0);
   9f170:	2300      	movs	r3, #0
   9f172:	9300      	str	r3, [sp, #0]
   9f174:	f04f 0300 	mov.w	r3, #0
   9f178:	4a75      	ldr	r2, [pc, #468]	; (9f350 <conf_activate_pressure_alarms+0x2ac>)
   9f17a:	2102      	movs	r1, #2
   9f17c:	2015      	movs	r0, #21
   9f17e:	4c75      	ldr	r4, [pc, #468]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f180:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,400,0,0);
   9f182:	2300      	movs	r3, #0
   9f184:	9300      	str	r3, [sp, #0]
   9f186:	f04f 0300 	mov.w	r3, #0
   9f18a:	4a71      	ldr	r2, [pc, #452]	; (9f350 <conf_activate_pressure_alarms+0x2ac>)
   9f18c:	2102      	movs	r1, #2
   9f18e:	2017      	movs	r0, #23
   9f190:	4c70      	ldr	r4, [pc, #448]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f192:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,1000,0,0);
   9f194:	2300      	movs	r3, #0
   9f196:	9300      	str	r3, [sp, #0]
   9f198:	f04f 0300 	mov.w	r3, #0
   9f19c:	4a70      	ldr	r2, [pc, #448]	; (9f360 <conf_activate_pressure_alarms+0x2bc>)
   9f19e:	2102      	movs	r1, #2
   9f1a0:	2027      	movs	r0, #39	; 0x27
   9f1a2:	4c6c      	ldr	r4, [pc, #432]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f1a4:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,0,0);
   9f1a6:	2300      	movs	r3, #0
   9f1a8:	9300      	str	r3, [sp, #0]
   9f1aa:	f04f 0300 	mov.w	r3, #0
   9f1ae:	f04f 0200 	mov.w	r2, #0
   9f1b2:	2103      	movs	r1, #3
   9f1b4:	2016      	movs	r0, #22
   9f1b6:	4c67      	ldr	r4, [pc, #412]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f1b8:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,0,0);
   9f1ba:	2300      	movs	r3, #0
   9f1bc:	9300      	str	r3, [sp, #0]
   9f1be:	f04f 0300 	mov.w	r3, #0
   9f1c2:	f04f 0200 	mov.w	r2, #0
   9f1c6:	2103      	movs	r1, #3
   9f1c8:	2018      	movs	r0, #24
   9f1ca:	4c62      	ldr	r4, [pc, #392]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f1cc:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,0,0);
   9f1ce:	2300      	movs	r3, #0
   9f1d0:	9300      	str	r3, [sp, #0]
   9f1d2:	f04f 0300 	mov.w	r3, #0
   9f1d6:	f04f 0200 	mov.w	r2, #0
   9f1da:	2103      	movs	r1, #3
   9f1dc:	2028      	movs	r0, #40	; 0x28
   9f1de:	4c5d      	ldr	r4, [pc, #372]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f1e0:	47a0      	blx	r4
		
		Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   9f1e2:	2101      	movs	r1, #1
   9f1e4:	2015      	movs	r0, #21
   9f1e6:	4b5d      	ldr	r3, [pc, #372]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f1e8:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   9f1ea:	2101      	movs	r1, #1
   9f1ec:	2016      	movs	r0, #22
   9f1ee:	4b5b      	ldr	r3, [pc, #364]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f1f0:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   9f1f2:	2101      	movs	r1, #1
   9f1f4:	2017      	movs	r0, #23
   9f1f6:	4b59      	ldr	r3, [pc, #356]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f1f8:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   9f1fa:	2101      	movs	r1, #1
   9f1fc:	2018      	movs	r0, #24
   9f1fe:	4b57      	ldr	r3, [pc, #348]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f200:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   9f202:	2101      	movs	r1, #1
   9f204:	2027      	movs	r0, #39	; 0x27
   9f206:	4b55      	ldr	r3, [pc, #340]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f208:	4798      	blx	r3
		
		break;
   9f20a:	e09b      	b.n	9f344 <conf_activate_pressure_alarms+0x2a0>
		
		case 500 :
					Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,400,0,0);
   9f20c:	2300      	movs	r3, #0
   9f20e:	9300      	str	r3, [sp, #0]
   9f210:	f04f 0300 	mov.w	r3, #0
   9f214:	4a4e      	ldr	r2, [pc, #312]	; (9f350 <conf_activate_pressure_alarms+0x2ac>)
   9f216:	2102      	movs	r1, #2
   9f218:	2015      	movs	r0, #21
   9f21a:	4c4e      	ldr	r4, [pc, #312]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f21c:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,400,0,0);
   9f21e:	2300      	movs	r3, #0
   9f220:	9300      	str	r3, [sp, #0]
   9f222:	f04f 0300 	mov.w	r3, #0
   9f226:	4a4a      	ldr	r2, [pc, #296]	; (9f350 <conf_activate_pressure_alarms+0x2ac>)
   9f228:	2102      	movs	r1, #2
   9f22a:	2017      	movs	r0, #23
   9f22c:	4c49      	ldr	r4, [pc, #292]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f22e:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,1000,0,0);
   9f230:	2300      	movs	r3, #0
   9f232:	9300      	str	r3, [sp, #0]
   9f234:	f04f 0300 	mov.w	r3, #0
   9f238:	4a49      	ldr	r2, [pc, #292]	; (9f360 <conf_activate_pressure_alarms+0x2bc>)
   9f23a:	2102      	movs	r1, #2
   9f23c:	2027      	movs	r0, #39	; 0x27
   9f23e:	4c45      	ldr	r4, [pc, #276]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f240:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,0,0);
   9f242:	2300      	movs	r3, #0
   9f244:	9300      	str	r3, [sp, #0]
   9f246:	f04f 0300 	mov.w	r3, #0
   9f24a:	f04f 0200 	mov.w	r2, #0
   9f24e:	2103      	movs	r1, #3
   9f250:	2016      	movs	r0, #22
   9f252:	4c40      	ldr	r4, [pc, #256]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f254:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,0,0);
   9f256:	2300      	movs	r3, #0
   9f258:	9300      	str	r3, [sp, #0]
   9f25a:	f04f 0300 	mov.w	r3, #0
   9f25e:	f04f 0200 	mov.w	r2, #0
   9f262:	2103      	movs	r1, #3
   9f264:	2018      	movs	r0, #24
   9f266:	4c3b      	ldr	r4, [pc, #236]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f268:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,0,0);
   9f26a:	2300      	movs	r3, #0
   9f26c:	9300      	str	r3, [sp, #0]
   9f26e:	f04f 0300 	mov.w	r3, #0
   9f272:	f04f 0200 	mov.w	r2, #0
   9f276:	2103      	movs	r1, #3
   9f278:	2028      	movs	r0, #40	; 0x28
   9f27a:	4c36      	ldr	r4, [pc, #216]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f27c:	47a0      	blx	r4
					
					Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   9f27e:	2100      	movs	r1, #0
   9f280:	2015      	movs	r0, #21
   9f282:	4b36      	ldr	r3, [pc, #216]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f284:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   9f286:	2100      	movs	r1, #0
   9f288:	2016      	movs	r0, #22
   9f28a:	4b34      	ldr	r3, [pc, #208]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f28c:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   9f28e:	2100      	movs	r1, #0
   9f290:	2017      	movs	r0, #23
   9f292:	4b32      	ldr	r3, [pc, #200]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f294:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   9f296:	2100      	movs	r1, #0
   9f298:	2018      	movs	r0, #24
   9f29a:	4b30      	ldr	r3, [pc, #192]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f29c:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
   9f29e:	2100      	movs	r1, #0
   9f2a0:	2027      	movs	r0, #39	; 0x27
   9f2a2:	4b2e      	ldr	r3, [pc, #184]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f2a4:	4798      	blx	r3
					break;
   9f2a6:	e04d      	b.n	9f344 <conf_activate_pressure_alarms+0x2a0>
		case 300 :
					Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,400,0,0);
   9f2a8:	2300      	movs	r3, #0
   9f2aa:	9300      	str	r3, [sp, #0]
   9f2ac:	f04f 0300 	mov.w	r3, #0
   9f2b0:	4a27      	ldr	r2, [pc, #156]	; (9f350 <conf_activate_pressure_alarms+0x2ac>)
   9f2b2:	2102      	movs	r1, #2
   9f2b4:	2015      	movs	r0, #21
   9f2b6:	4c27      	ldr	r4, [pc, #156]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f2b8:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,400,0,0);
   9f2ba:	2300      	movs	r3, #0
   9f2bc:	9300      	str	r3, [sp, #0]
   9f2be:	f04f 0300 	mov.w	r3, #0
   9f2c2:	4a23      	ldr	r2, [pc, #140]	; (9f350 <conf_activate_pressure_alarms+0x2ac>)
   9f2c4:	2102      	movs	r1, #2
   9f2c6:	2017      	movs	r0, #23
   9f2c8:	4c22      	ldr	r4, [pc, #136]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f2ca:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,1000,0,0);
   9f2cc:	2300      	movs	r3, #0
   9f2ce:	9300      	str	r3, [sp, #0]
   9f2d0:	f04f 0300 	mov.w	r3, #0
   9f2d4:	4a22      	ldr	r2, [pc, #136]	; (9f360 <conf_activate_pressure_alarms+0x2bc>)
   9f2d6:	2102      	movs	r1, #2
   9f2d8:	2027      	movs	r0, #39	; 0x27
   9f2da:	4c1e      	ldr	r4, [pc, #120]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f2dc:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,0,0);
   9f2de:	2300      	movs	r3, #0
   9f2e0:	9300      	str	r3, [sp, #0]
   9f2e2:	f04f 0300 	mov.w	r3, #0
   9f2e6:	f04f 0200 	mov.w	r2, #0
   9f2ea:	2103      	movs	r1, #3
   9f2ec:	2016      	movs	r0, #22
   9f2ee:	4c19      	ldr	r4, [pc, #100]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f2f0:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,0,0);
   9f2f2:	2300      	movs	r3, #0
   9f2f4:	9300      	str	r3, [sp, #0]
   9f2f6:	f04f 0300 	mov.w	r3, #0
   9f2fa:	f04f 0200 	mov.w	r2, #0
   9f2fe:	2103      	movs	r1, #3
   9f300:	2018      	movs	r0, #24
   9f302:	4c14      	ldr	r4, [pc, #80]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f304:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,0,0);
   9f306:	2300      	movs	r3, #0
   9f308:	9300      	str	r3, [sp, #0]
   9f30a:	f04f 0300 	mov.w	r3, #0
   9f30e:	f04f 0200 	mov.w	r2, #0
   9f312:	2103      	movs	r1, #3
   9f314:	2028      	movs	r0, #40	; 0x28
   9f316:	4c0f      	ldr	r4, [pc, #60]	; (9f354 <conf_activate_pressure_alarms+0x2b0>)
   9f318:	47a0      	blx	r4
					
					Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   9f31a:	2101      	movs	r1, #1
   9f31c:	2015      	movs	r0, #21
   9f31e:	4b0f      	ldr	r3, [pc, #60]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f320:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   9f322:	2101      	movs	r1, #1
   9f324:	2016      	movs	r0, #22
   9f326:	4b0d      	ldr	r3, [pc, #52]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f328:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   9f32a:	2101      	movs	r1, #1
   9f32c:	2017      	movs	r0, #23
   9f32e:	4b0b      	ldr	r3, [pc, #44]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f330:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   9f332:	2101      	movs	r1, #1
   9f334:	2018      	movs	r0, #24
   9f336:	4b09      	ldr	r3, [pc, #36]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f338:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   9f33a:	2101      	movs	r1, #1
   9f33c:	2027      	movs	r0, #39	; 0x27
   9f33e:	4b07      	ldr	r3, [pc, #28]	; (9f35c <conf_activate_pressure_alarms+0x2b8>)
   9f340:	4798      	blx	r3
					break;
   9f342:	bf00      	nop
		
		
		
	}
	
}
   9f344:	bf00      	nop
   9f346:	4618      	mov	r0, r3
   9f348:	370c      	adds	r7, #12
   9f34a:	46bd      	mov	sp, r7
   9f34c:	bd90      	pop	{r4, r7, pc}
   9f34e:	bf00      	nop
   9f350:	43c80000 	.word	0x43c80000
   9f354:	00082ea1 	.word	0x00082ea1
   9f358:	44fa0000 	.word	0x44fa0000
   9f35c:	00082efd 	.word	0x00082efd
   9f360:	447a0000 	.word	0x447a0000

0009f364 <Cl_Dprep_StartPreparation>:



Cl_ReturnCodeType	Cl_Dprep_StartPreparation(void)
	{
   9f364:	b590      	push	{r4, r7, lr}
   9f366:	b089      	sub	sp, #36	; 0x24
   9f368:	af02      	add	r7, sp, #8
		
			Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9f36a:	2300      	movs	r3, #0
   9f36c:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data =0;
   9f36e:	2300      	movs	r3, #0
   9f370:	717b      	strb	r3, [r7, #5]
			Cl_Uint16Type cl_dprep_acidstatus = 0, cl_dprep_bicarbstatus =0 , cl_dprep_holder1status = 0 , cl_dprep_holder2status = 0;
   9f372:	2300      	movs	r3, #0
   9f374:	82bb      	strh	r3, [r7, #20]
   9f376:	2300      	movs	r3, #0
   9f378:	827b      	strh	r3, [r7, #18]
   9f37a:	2300      	movs	r3, #0
   9f37c:	823b      	strh	r3, [r7, #16]
   9f37e:	2300      	movs	r3, #0
   9f380:	81fb      	strh	r3, [r7, #14]
			Cl_BoolType Cl_dprepreaduinessflag = true;
   9f382:	2301      	movs	r3, #1
   9f384:	737b      	strb	r3, [r7, #13]
				 {
					 Cl_dprepSendAlarm(HOLDER2STATUS_OPEN);
					 Cl_dprepreaduinessflag = false;
				 }		
				 #endif		 
				 if(Cl_dprepreaduinessflag == false)
   9f386:	7b7b      	ldrb	r3, [r7, #13]
   9f388:	f083 0301 	eor.w	r3, r3, #1
   9f38c:	b2db      	uxtb	r3, r3
   9f38e:	2b00      	cmp	r3, #0
   9f390:	d001      	beq.n	9f396 <Cl_Dprep_StartPreparation+0x32>
				 {
					 return CL_REJECTED;
   9f392:	2303      	movs	r3, #3
   9f394:	e144      	b.n	9f620 <Cl_Dprep_StartPreparation+0x2bc>
				 }
				 	
							sv_cntrl_resetgreenalarm();					
   9f396:	4ba4      	ldr	r3, [pc, #656]	; (9f628 <Cl_Dprep_StartPreparation+0x2c4>)
   9f398:	4798      	blx	r3
							Cl_dprepretcode = Cl_DprepSelectDialysateInlet();
   9f39a:	4ba4      	ldr	r3, [pc, #656]	; (9f62c <Cl_Dprep_StartPreparation+0x2c8>)
   9f39c:	4798      	blx	r3
   9f39e:	4603      	mov	r3, r0
   9f3a0:	75fb      	strb	r3, [r7, #23]
							//Cl_DprepFlowOn();
							Cl_Dprep_ResetAlertsforReassertion();
   9f3a2:	4ba3      	ldr	r3, [pc, #652]	; (9f630 <Cl_Dprep_StartPreparation+0x2cc>)
   9f3a4:	4798      	blx	r3
							data = 1;
   9f3a6:	2301      	movs	r3, #1
   9f3a8:	717b      	strb	r3, [r7, #5]
							Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PREP_CNFRM,&data,0);	
   9f3aa:	1d7b      	adds	r3, r7, #5
   9f3ac:	2200      	movs	r2, #0
   9f3ae:	4619      	mov	r1, r3
   9f3b0:	200c      	movs	r0, #12
   9f3b2:	4ba0      	ldr	r3, [pc, #640]	; (9f634 <Cl_Dprep_StartPreparation+0x2d0>)
   9f3b4:	4798      	blx	r3
   9f3b6:	4603      	mov	r3, r0
   9f3b8:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STARTED,&data,0);																			
   9f3ba:	1d7b      	adds	r3, r7, #5
   9f3bc:	2200      	movs	r2, #0
   9f3be:	4619      	mov	r1, r3
   9f3c0:	201e      	movs	r0, #30
   9f3c2:	4b9c      	ldr	r3, [pc, #624]	; (9f634 <Cl_Dprep_StartPreparation+0x2d0>)
   9f3c4:	4798      	blx	r3
   9f3c6:	4603      	mov	r3, r0
   9f3c8:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode = cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   9f3ca:	2001      	movs	r0, #1
   9f3cc:	4b9a      	ldr	r3, [pc, #616]	; (9f638 <Cl_Dprep_StartPreparation+0x2d4>)
   9f3ce:	4798      	blx	r3
   9f3d0:	4603      	mov	r3, r0
   9f3d2:	75fb      	strb	r3, [r7, #23]
				
				
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_CLOSED,LOGIC_HIGH,0,0,0);
   9f3d4:	2300      	movs	r3, #0
   9f3d6:	9300      	str	r3, [sp, #0]
   9f3d8:	f04f 0300 	mov.w	r3, #0
   9f3dc:	f04f 0200 	mov.w	r2, #0
   9f3e0:	2101      	movs	r1, #1
   9f3e2:	202a      	movs	r0, #42	; 0x2a
   9f3e4:	4c95      	ldr	r4, [pc, #596]	; (9f63c <Cl_Dprep_StartPreparation+0x2d8>)
   9f3e6:	47a0      	blx	r4
   9f3e8:	4603      	mov	r3, r0
   9f3ea:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_CLOSED,LOGIC_HIGH,0,0,0);
   9f3ec:	2300      	movs	r3, #0
   9f3ee:	9300      	str	r3, [sp, #0]
   9f3f0:	f04f 0300 	mov.w	r3, #0
   9f3f4:	f04f 0200 	mov.w	r2, #0
   9f3f8:	2101      	movs	r1, #1
   9f3fa:	202c      	movs	r0, #44	; 0x2c
   9f3fc:	4c8f      	ldr	r4, [pc, #572]	; (9f63c <Cl_Dprep_StartPreparation+0x2d8>)
   9f3fe:	47a0      	blx	r4
   9f400:	4603      	mov	r3, r0
   9f402:	75fb      	strb	r3, [r7, #23]
							//Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9f404:	2300      	movs	r3, #0
   9f406:	9300      	str	r3, [sp, #0]
   9f408:	f04f 0300 	mov.w	r3, #0
   9f40c:	f04f 0200 	mov.w	r2, #0
   9f410:	2101      	movs	r1, #1
   9f412:	2004      	movs	r0, #4
   9f414:	4c89      	ldr	r4, [pc, #548]	; (9f63c <Cl_Dprep_StartPreparation+0x2d8>)
   9f416:	47a0      	blx	r4
   9f418:	4603      	mov	r3, r0
   9f41a:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9f41c:	2300      	movs	r3, #0
   9f41e:	9300      	str	r3, [sp, #0]
   9f420:	f04f 0300 	mov.w	r3, #0
   9f424:	f04f 0200 	mov.w	r2, #0
   9f428:	2101      	movs	r1, #1
   9f42a:	2003      	movs	r0, #3
   9f42c:	4c83      	ldr	r4, [pc, #524]	; (9f63c <Cl_Dprep_StartPreparation+0x2d8>)
   9f42e:	47a0      	blx	r4
   9f430:	4603      	mov	r3, r0
   9f432:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_HIGH,ABOVE,14.0,0,0);
   9f434:	2300      	movs	r3, #0
   9f436:	9300      	str	r3, [sp, #0]
   9f438:	f04f 0300 	mov.w	r3, #0
   9f43c:	4a80      	ldr	r2, [pc, #512]	; (9f640 <Cl_Dprep_StartPreparation+0x2dc>)
   9f43e:	2102      	movs	r1, #2
   9f440:	2008      	movs	r0, #8
   9f442:	4c7e      	ldr	r4, [pc, #504]	; (9f63c <Cl_Dprep_StartPreparation+0x2d8>)
   9f444:	47a0      	blx	r4
   9f446:	4603      	mov	r3, r0
   9f448:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP1_HIGH_THRESHOLD,ABOVE,40,0,0);
   9f44a:	2300      	movs	r3, #0
   9f44c:	9300      	str	r3, [sp, #0]
   9f44e:	f04f 0300 	mov.w	r3, #0
   9f452:	4a7c      	ldr	r2, [pc, #496]	; (9f644 <Cl_Dprep_StartPreparation+0x2e0>)
   9f454:	2102      	movs	r1, #2
   9f456:	200f      	movs	r0, #15
   9f458:	4c78      	ldr	r4, [pc, #480]	; (9f63c <Cl_Dprep_StartPreparation+0x2d8>)
   9f45a:	47a0      	blx	r4
   9f45c:	4603      	mov	r3, r0
   9f45e:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP2_HIGH_THRESHOLD,ABOVE,40,0,0);
   9f460:	2300      	movs	r3, #0
   9f462:	9300      	str	r3, [sp, #0]
   9f464:	f04f 0300 	mov.w	r3, #0
   9f468:	4a76      	ldr	r2, [pc, #472]	; (9f644 <Cl_Dprep_StartPreparation+0x2e0>)
   9f46a:	2102      	movs	r1, #2
   9f46c:	2011      	movs	r0, #17
   9f46e:	4c73      	ldr	r4, [pc, #460]	; (9f63c <Cl_Dprep_StartPreparation+0x2d8>)
   9f470:	47a0      	blx	r4
   9f472:	4603      	mov	r3, r0
   9f474:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP3_HIGH_THRESHOLD,ABOVE,40,0,0);
   9f476:	2300      	movs	r3, #0
   9f478:	9300      	str	r3, [sp, #0]
   9f47a:	f04f 0300 	mov.w	r3, #0
   9f47e:	4a71      	ldr	r2, [pc, #452]	; (9f644 <Cl_Dprep_StartPreparation+0x2e0>)
   9f480:	2102      	movs	r1, #2
   9f482:	2013      	movs	r0, #19
   9f484:	4c6d      	ldr	r4, [pc, #436]	; (9f63c <Cl_Dprep_StartPreparation+0x2d8>)
   9f486:	47a0      	blx	r4
   9f488:	4603      	mov	r3, r0
   9f48a:	75fb      	strb	r3, [r7, #23]
							
						
							
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(FLOW_LOW_FLOWRATE,0,0,0,0);
   9f48c:	2300      	movs	r3, #0
   9f48e:	9300      	str	r3, [sp, #0]
   9f490:	f04f 0300 	mov.w	r3, #0
   9f494:	f04f 0200 	mov.w	r2, #0
   9f498:	2100      	movs	r1, #0
   9f49a:	200d      	movs	r0, #13
   9f49c:	4c67      	ldr	r4, [pc, #412]	; (9f63c <Cl_Dprep_StartPreparation+0x2d8>)
   9f49e:	47a0      	blx	r4
   9f4a0:	4603      	mov	r3, r0
   9f4a2:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(FLOW_NO_FLOW,0,0,0,0);
   9f4a4:	2300      	movs	r3, #0
   9f4a6:	9300      	str	r3, [sp, #0]
   9f4a8:	f04f 0300 	mov.w	r3, #0
   9f4ac:	f04f 0200 	mov.w	r2, #0
   9f4b0:	2100      	movs	r1, #0
   9f4b2:	200c      	movs	r0, #12
   9f4b4:	4c61      	ldr	r4, [pc, #388]	; (9f63c <Cl_Dprep_StartPreparation+0x2d8>)
   9f4b6:	47a0      	blx	r4
   9f4b8:	4603      	mov	r3, r0
   9f4ba:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(FLOW_HIGH_FLOWRATE,0,1500,0,0);
   9f4bc:	2300      	movs	r3, #0
   9f4be:	9300      	str	r3, [sp, #0]
   9f4c0:	f04f 0300 	mov.w	r3, #0
   9f4c4:	4a60      	ldr	r2, [pc, #384]	; (9f648 <Cl_Dprep_StartPreparation+0x2e4>)
   9f4c6:	2100      	movs	r1, #0
   9f4c8:	200e      	movs	r0, #14
   9f4ca:	4c5c      	ldr	r4, [pc, #368]	; (9f63c <Cl_Dprep_StartPreparation+0x2d8>)
   9f4cc:	47a0      	blx	r4
   9f4ce:	4603      	mov	r3, r0
   9f4d0:	75fb      	strb	r3, [r7, #23]
							
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );
							//Cl_dprepretcode =  sv_cntrl_activatevenousclamp(); // manav : ???
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true );
   9f4d2:	2101      	movs	r1, #1
   9f4d4:	202a      	movs	r0, #42	; 0x2a
   9f4d6:	4b5d      	ldr	r3, [pc, #372]	; (9f64c <Cl_Dprep_StartPreparation+0x2e8>)
   9f4d8:	4798      	blx	r3
   9f4da:	4603      	mov	r3, r0
   9f4dc:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   9f4de:	2101      	movs	r1, #1
   9f4e0:	202c      	movs	r0, #44	; 0x2c
   9f4e2:	4b5a      	ldr	r3, [pc, #360]	; (9f64c <Cl_Dprep_StartPreparation+0x2e8>)
   9f4e4:	4798      	blx	r3
   9f4e6:	4603      	mov	r3, r0
   9f4e8:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
   9f4ea:	2101      	movs	r1, #1
   9f4ec:	2003      	movs	r0, #3
   9f4ee:	4b57      	ldr	r3, [pc, #348]	; (9f64c <Cl_Dprep_StartPreparation+0x2e8>)
   9f4f0:	4798      	blx	r3
   9f4f2:	4603      	mov	r3, r0
   9f4f4:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
   9f4f6:	2101      	movs	r1, #1
   9f4f8:	2004      	movs	r0, #4
   9f4fa:	4b54      	ldr	r3, [pc, #336]	; (9f64c <Cl_Dprep_StartPreparation+0x2e8>)
   9f4fc:	4798      	blx	r3
   9f4fe:	4603      	mov	r3, r0
   9f500:	75fb      	strb	r3, [r7, #23]
// 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
// 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
// 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
// 							
						
							if(Current_sense_trigger)
   9f502:	4b53      	ldr	r3, [pc, #332]	; (9f650 <Cl_Dprep_StartPreparation+0x2ec>)
   9f504:	781b      	ldrb	r3, [r3, #0]
   9f506:	2b00      	cmp	r3, #0
   9f508:	d005      	beq.n	9f516 <Cl_Dprep_StartPreparation+0x1b2>
							{
									Cl_dprepretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   9f50a:	2101      	movs	r1, #1
   9f50c:	203c      	movs	r0, #60	; 0x3c
   9f50e:	4b4f      	ldr	r3, [pc, #316]	; (9f64c <Cl_Dprep_StartPreparation+0x2e8>)
   9f510:	4798      	blx	r3
   9f512:	4603      	mov	r3, r0
   9f514:	75fb      	strb	r3, [r7, #23]
							}
							else
							{
								//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
							}
							Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9f516:	2001      	movs	r0, #1
   9f518:	4b4e      	ldr	r3, [pc, #312]	; (9f654 <Cl_Dprep_StartPreparation+0x2f0>)
   9f51a:	4798      	blx	r3
   9f51c:	4603      	mov	r3, r0
   9f51e:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR2);
   9f520:	2002      	movs	r0, #2
   9f522:	4b4c      	ldr	r3, [pc, #304]	; (9f654 <Cl_Dprep_StartPreparation+0x2f0>)
   9f524:	4798      	blx	r3
   9f526:	4603      	mov	r3, r0
   9f528:	75fb      	strb	r3, [r7, #23]
							sv_cntrl_enable_bypass();
   9f52a:	4b4b      	ldr	r3, [pc, #300]	; (9f658 <Cl_Dprep_StartPreparation+0x2f4>)
   9f52c:	4798      	blx	r3
							cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9f52e:	4b4b      	ldr	r3, [pc, #300]	; (9f65c <Cl_Dprep_StartPreparation+0x2f8>)
   9f530:	2201      	movs	r2, #1
   9f532:	701a      	strb	r2, [r3, #0]
							Cl_dprepretcode = Cl_bc_controller(BC_EVENT_RESUME);
   9f534:	200b      	movs	r0, #11
   9f536:	4b4a      	ldr	r3, [pc, #296]	; (9f660 <Cl_Dprep_StartPreparation+0x2fc>)
   9f538:	4798      	blx	r3
   9f53a:	4603      	mov	r3, r0
   9f53c:	75fb      	strb	r3, [r7, #23]
							//sv_cntrl_enable_bypass();
							sv_prop_startmixing();
   9f53e:	4b49      	ldr	r3, [pc, #292]	; (9f664 <Cl_Dprep_StartPreparation+0x300>)
   9f540:	4798      	blx	r3
							Cl_Uint32Type temp = Treatdata[ID_dflow];
   9f542:	4b49      	ldr	r3, [pc, #292]	; (9f668 <Cl_Dprep_StartPreparation+0x304>)
   9f544:	695b      	ldr	r3, [r3, #20]
   9f546:	60bb      	str	r3, [r7, #8]
							Cl_Uint16Type potvalue = 0;
   9f548:	2300      	movs	r3, #0
   9f54a:	80fb      	strh	r3, [r7, #6]
							switch (temp)
   9f54c:	68bb      	ldr	r3, [r7, #8]
   9f54e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   9f552:	d01c      	beq.n	9f58e <Cl_Dprep_StartPreparation+0x22a>
   9f554:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   9f558:	d003      	beq.n	9f562 <Cl_Dprep_StartPreparation+0x1fe>
   9f55a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   9f55e:	d030      	beq.n	9f5c2 <Cl_Dprep_StartPreparation+0x25e>
   9f560:	e044      	b.n	9f5ec <Cl_Dprep_StartPreparation+0x288>
							{
								case 800:
								sv_cntrl_setpumpspeed(DCMOTOR2,900);
   9f562:	f44f 7161 	mov.w	r1, #900	; 0x384
   9f566:	2002      	movs	r0, #2
   9f568:	4b40      	ldr	r3, [pc, #256]	; (9f66c <Cl_Dprep_StartPreparation+0x308>)
   9f56a:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,800);   //960
   9f56c:	f44f 7148 	mov.w	r1, #800	; 0x320
   9f570:	2001      	movs	r0, #1
   9f572:	4b3e      	ldr	r3, [pc, #248]	; (9f66c <Cl_Dprep_StartPreparation+0x308>)
   9f574:	4798      	blx	r3
								potvalue = (2600 * 1024)/10000;
   9f576:	f44f 7385 	mov.w	r3, #266	; 0x10a
   9f57a:	80fb      	strh	r3, [r7, #6]
								sv_cs_setpotvalue(potvalue);
   9f57c:	88fb      	ldrh	r3, [r7, #6]
   9f57e:	4618      	mov	r0, r3
   9f580:	4b3b      	ldr	r3, [pc, #236]	; (9f670 <Cl_Dprep_StartPreparation+0x30c>)
   9f582:	4798      	blx	r3
								
								conf_activate_pressure_alarms(800);
   9f584:	f44f 7048 	mov.w	r0, #800	; 0x320
   9f588:	4b3a      	ldr	r3, [pc, #232]	; (9f674 <Cl_Dprep_StartPreparation+0x310>)
   9f58a:	4798      	blx	r3
								
							
								
								break;
   9f58c:	e03f      	b.n	9f60e <Cl_Dprep_StartPreparation+0x2aa>
								
								case 500:
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   9f58e:	2203      	movs	r2, #3
   9f590:	4939      	ldr	r1, [pc, #228]	; (9f678 <Cl_Dprep_StartPreparation+0x314>)
   9f592:	2018      	movs	r0, #24
   9f594:	4b27      	ldr	r3, [pc, #156]	; (9f634 <Cl_Dprep_StartPreparation+0x2d0>)
   9f596:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9f598:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9f59c:	2002      	movs	r0, #2
   9f59e:	4b33      	ldr	r3, [pc, #204]	; (9f66c <Cl_Dprep_StartPreparation+0x308>)
   9f5a0:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   9f5a2:	f240 414c 	movw	r1, #1100	; 0x44c
   9f5a6:	2001      	movs	r0, #1
   9f5a8:	4b30      	ldr	r3, [pc, #192]	; (9f66c <Cl_Dprep_StartPreparation+0x308>)
   9f5aa:	4798      	blx	r3
								potvalue = (670 * 1024)/10000;
   9f5ac:	2344      	movs	r3, #68	; 0x44
   9f5ae:	80fb      	strh	r3, [r7, #6]
								sv_cs_setpotvalue(potvalue);
   9f5b0:	88fb      	ldrh	r3, [r7, #6]
   9f5b2:	4618      	mov	r0, r3
   9f5b4:	4b2e      	ldr	r3, [pc, #184]	; (9f670 <Cl_Dprep_StartPreparation+0x30c>)
   9f5b6:	4798      	blx	r3
								conf_activate_pressure_alarms(500);
   9f5b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   9f5bc:	4b2d      	ldr	r3, [pc, #180]	; (9f674 <Cl_Dprep_StartPreparation+0x310>)
   9f5be:	4798      	blx	r3
								
								break;
   9f5c0:	e025      	b.n	9f60e <Cl_Dprep_StartPreparation+0x2aa>

								case 300:
								sv_cntrl_setpumpspeed(DCMOTOR2,1120);
   9f5c2:	f44f 618c 	mov.w	r1, #1120	; 0x460
   9f5c6:	2002      	movs	r0, #2
   9f5c8:	4b28      	ldr	r3, [pc, #160]	; (9f66c <Cl_Dprep_StartPreparation+0x308>)
   9f5ca:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,620);
   9f5cc:	f44f 711b 	mov.w	r1, #620	; 0x26c
   9f5d0:	2001      	movs	r0, #1
   9f5d2:	4b26      	ldr	r3, [pc, #152]	; (9f66c <Cl_Dprep_StartPreparation+0x308>)
   9f5d4:	4798      	blx	r3
								potvalue = (800 * 1024)/10000;
   9f5d6:	2351      	movs	r3, #81	; 0x51
   9f5d8:	80fb      	strh	r3, [r7, #6]
								sv_cs_setpotvalue(potvalue);
   9f5da:	88fb      	ldrh	r3, [r7, #6]
   9f5dc:	4618      	mov	r0, r3
   9f5de:	4b24      	ldr	r3, [pc, #144]	; (9f670 <Cl_Dprep_StartPreparation+0x30c>)
   9f5e0:	4798      	blx	r3
								conf_activate_pressure_alarms(300);
   9f5e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
   9f5e6:	4b23      	ldr	r3, [pc, #140]	; (9f674 <Cl_Dprep_StartPreparation+0x310>)
   9f5e8:	4798      	blx	r3
										
								break;
   9f5ea:	e010      	b.n	9f60e <Cl_Dprep_StartPreparation+0x2aa>
								
								
								default:
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9f5ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9f5f0:	2002      	movs	r0, #2
   9f5f2:	4b1e      	ldr	r3, [pc, #120]	; (9f66c <Cl_Dprep_StartPreparation+0x308>)
   9f5f4:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   9f5f6:	f240 414c 	movw	r1, #1100	; 0x44c
   9f5fa:	2001      	movs	r0, #1
   9f5fc:	4b1b      	ldr	r3, [pc, #108]	; (9f66c <Cl_Dprep_StartPreparation+0x308>)
   9f5fe:	4798      	blx	r3
								potvalue = (670 * 1024)/10000;
   9f600:	2344      	movs	r3, #68	; 0x44
   9f602:	80fb      	strh	r3, [r7, #6]
								sv_cs_setpotvalue(potvalue);
   9f604:	88fb      	ldrh	r3, [r7, #6]
   9f606:	4618      	mov	r0, r3
   9f608:	4b19      	ldr	r3, [pc, #100]	; (9f670 <Cl_Dprep_StartPreparation+0x30c>)
   9f60a:	4798      	blx	r3
								
								break;
   9f60c:	bf00      	nop
							}
						//	#if 0
							Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_ON);
   9f60e:	2001      	movs	r0, #1
   9f610:	4b1a      	ldr	r3, [pc, #104]	; (9f67c <Cl_Dprep_StartPreparation+0x318>)
   9f612:	4798      	blx	r3
   9f614:	4603      	mov	r3, r0
   9f616:	75fb      	strb	r3, [r7, #23]
						//	#endif
							cl_dprepstate = CL_DPREP_STATE_DPREP_FILLING;
   9f618:	4b19      	ldr	r3, [pc, #100]	; (9f680 <Cl_Dprep_StartPreparation+0x31c>)
   9f61a:	2202      	movs	r2, #2
   9f61c:	701a      	strb	r2, [r3, #0]
							
							return 0;
   9f61e:	2300      	movs	r3, #0
				
	}
   9f620:	4618      	mov	r0, r3
   9f622:	371c      	adds	r7, #28
   9f624:	46bd      	mov	sp, r7
   9f626:	bd90      	pop	{r4, r7, pc}
   9f628:	00097c7d 	.word	0x00097c7d
   9f62c:	0009dea1 	.word	0x0009dea1
   9f630:	0009e7b1 	.word	0x0009e7b1
   9f634:	00099729 	.word	0x00099729
   9f638:	000923ad 	.word	0x000923ad
   9f63c:	00082ea1 	.word	0x00082ea1
   9f640:	41600000 	.word	0x41600000
   9f644:	42200000 	.word	0x42200000
   9f648:	44bb8000 	.word	0x44bb8000
   9f64c:	00082efd 	.word	0x00082efd
   9f650:	200709ee 	.word	0x200709ee
   9f654:	0009790d 	.word	0x0009790d
   9f658:	00097b59 	.word	0x00097b59
   9f65c:	2007283c 	.word	0x2007283c
   9f660:	00083319 	.word	0x00083319
   9f664:	00097d55 	.word	0x00097d55
   9f668:	200731a4 	.word	0x200731a4
   9f66c:	00097a25 	.word	0x00097a25
   9f670:	00097e55 	.word	0x00097e55
   9f674:	0009f0a5 	.word	0x0009f0a5
   9f678:	000a62dc 	.word	0x000a62dc
   9f67c:	00088a91 	.word	0x00088a91
   9f680:	2007283b 	.word	0x2007283b
   9f684:	00000000 	.word	0x00000000

0009f688 <Cl_Dprep_StartDialyserPrime>:
	
	
	Cl_ReturnCodeType	Cl_Dprep_StartDialyserPrime(void)
	{
   9f688:	b590      	push	{r4, r7, lr}
   9f68a:	b087      	sub	sp, #28
   9f68c:	af02      	add	r7, sp, #8
			sv_cntrl_resetgreenalarm();
   9f68e:	4b98      	ldr	r3, [pc, #608]	; (9f8f0 <Cl_Dprep_StartDialyserPrime+0x268>)
   9f690:	4798      	blx	r3
			dialyzerprime_flag =1;
   9f692:	4b98      	ldr	r3, [pc, #608]	; (9f8f4 <Cl_Dprep_StartDialyserPrime+0x26c>)
   9f694:	2201      	movs	r2, #1
   9f696:	701a      	strb	r2, [r3, #0]
			Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9f698:	2300      	movs	r3, #0
   9f69a:	73fb      	strb	r3, [r7, #15]
			Cl_Uint8Type data =0;
   9f69c:	2300      	movs	r3, #0
   9f69e:	73bb      	strb	r3, [r7, #14]
				
			Cl_dprepMinutescounter = 0;
   9f6a0:	4b95      	ldr	r3, [pc, #596]	; (9f8f8 <Cl_Dprep_StartDialyserPrime+0x270>)
   9f6a2:	2200      	movs	r2, #0
   9f6a4:	601a      	str	r2, [r3, #0]
			Cl_dprepsecondscounter = 0;
   9f6a6:	4b95      	ldr	r3, [pc, #596]	; (9f8fc <Cl_Dprep_StartDialyserPrime+0x274>)
   9f6a8:	2200      	movs	r2, #0
   9f6aa:	601a      	str	r2, [r3, #0]
			Cl_Dprep_ResetAlertsforReassertion();
   9f6ac:	4b94      	ldr	r3, [pc, #592]	; (9f900 <Cl_Dprep_StartDialyserPrime+0x278>)
   9f6ae:	4798      	blx	r3
			//cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
			//Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
			
			//check bypass switches
		//	cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_START,0);
			Cl_dprepretcode = Cl_DprepSelectDialysateInlet();
   9f6b0:	4b94      	ldr	r3, [pc, #592]	; (9f904 <Cl_Dprep_StartDialyserPrime+0x27c>)
   9f6b2:	4798      	blx	r3
   9f6b4:	4603      	mov	r3, r0
   9f6b6:	73fb      	strb	r3, [r7, #15]
			//Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_CLOSED,LOGIC_LOW,0,0,0);
   9f6b8:	2300      	movs	r3, #0
   9f6ba:	9300      	str	r3, [sp, #0]
   9f6bc:	f04f 0300 	mov.w	r3, #0
   9f6c0:	f04f 0200 	mov.w	r2, #0
   9f6c4:	2100      	movs	r1, #0
   9f6c6:	2005      	movs	r0, #5
   9f6c8:	4c8f      	ldr	r4, [pc, #572]	; (9f908 <Cl_Dprep_StartDialyserPrime+0x280>)
   9f6ca:	47a0      	blx	r4
   9f6cc:	4603      	mov	r3, r0
   9f6ce:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_CLOSED,LOGIC_LOW,0,0,0);
   9f6d0:	2300      	movs	r3, #0
   9f6d2:	9300      	str	r3, [sp, #0]
   9f6d4:	f04f 0300 	mov.w	r3, #0
   9f6d8:	f04f 0200 	mov.w	r2, #0
   9f6dc:	2100      	movs	r1, #0
   9f6de:	2006      	movs	r0, #6
   9f6e0:	4c89      	ldr	r4, [pc, #548]	; (9f908 <Cl_Dprep_StartDialyserPrime+0x280>)
   9f6e2:	47a0      	blx	r4
   9f6e4:	4603      	mov	r3, r0
   9f6e6:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_CLOSED,LOGIC_HIGH,0,0,0);
   9f6e8:	2300      	movs	r3, #0
   9f6ea:	9300      	str	r3, [sp, #0]
   9f6ec:	f04f 0300 	mov.w	r3, #0
   9f6f0:	f04f 0200 	mov.w	r2, #0
   9f6f4:	2101      	movs	r1, #1
   9f6f6:	202a      	movs	r0, #42	; 0x2a
   9f6f8:	4c83      	ldr	r4, [pc, #524]	; (9f908 <Cl_Dprep_StartDialyserPrime+0x280>)
   9f6fa:	47a0      	blx	r4
   9f6fc:	4603      	mov	r3, r0
   9f6fe:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_CLOSED,LOGIC_HIGH,0,0,0);
   9f700:	2300      	movs	r3, #0
   9f702:	9300      	str	r3, [sp, #0]
   9f704:	f04f 0300 	mov.w	r3, #0
   9f708:	f04f 0200 	mov.w	r2, #0
   9f70c:	2101      	movs	r1, #1
   9f70e:	202c      	movs	r0, #44	; 0x2c
   9f710:	4c7d      	ldr	r4, [pc, #500]	; (9f908 <Cl_Dprep_StartDialyserPrime+0x280>)
   9f712:	47a0      	blx	r4
   9f714:	4603      	mov	r3, r0
   9f716:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_LOW,BELOW,(Treatdata[ID_setcond] - 0.2),0,0);
   9f718:	4b7c      	ldr	r3, [pc, #496]	; (9f90c <Cl_Dprep_StartDialyserPrime+0x284>)
   9f71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   9f71c:	4b7c      	ldr	r3, [pc, #496]	; (9f910 <Cl_Dprep_StartDialyserPrime+0x288>)
   9f71e:	4610      	mov	r0, r2
   9f720:	4798      	blx	r3
   9f722:	4c7c      	ldr	r4, [pc, #496]	; (9f914 <Cl_Dprep_StartDialyserPrime+0x28c>)
   9f724:	a370      	add	r3, pc, #448	; (adr r3, 9f8e8 <Cl_Dprep_StartDialyserPrime+0x260>)
   9f726:	e9d3 2300 	ldrd	r2, r3, [r3]
   9f72a:	47a0      	blx	r4
   9f72c:	4603      	mov	r3, r0
   9f72e:	460c      	mov	r4, r1
   9f730:	4619      	mov	r1, r3
   9f732:	4622      	mov	r2, r4
   9f734:	4b78      	ldr	r3, [pc, #480]	; (9f918 <Cl_Dprep_StartDialyserPrime+0x290>)
   9f736:	4608      	mov	r0, r1
   9f738:	4611      	mov	r1, r2
   9f73a:	4798      	blx	r3
   9f73c:	4602      	mov	r2, r0
   9f73e:	2300      	movs	r3, #0
   9f740:	9300      	str	r3, [sp, #0]
   9f742:	f04f 0300 	mov.w	r3, #0
   9f746:	2103      	movs	r1, #3
   9f748:	2007      	movs	r0, #7
   9f74a:	4c6f      	ldr	r4, [pc, #444]	; (9f908 <Cl_Dprep_StartDialyserPrime+0x280>)
   9f74c:	47a0      	blx	r4
   9f74e:	4603      	mov	r3, r0
   9f750:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_HIGH,BELOW,(Treatdata[ID_setcond] + 0.2),0,0);
   9f752:	4b6e      	ldr	r3, [pc, #440]	; (9f90c <Cl_Dprep_StartDialyserPrime+0x284>)
   9f754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   9f756:	4b6e      	ldr	r3, [pc, #440]	; (9f910 <Cl_Dprep_StartDialyserPrime+0x288>)
   9f758:	4610      	mov	r0, r2
   9f75a:	4798      	blx	r3
   9f75c:	4c6f      	ldr	r4, [pc, #444]	; (9f91c <Cl_Dprep_StartDialyserPrime+0x294>)
   9f75e:	a362      	add	r3, pc, #392	; (adr r3, 9f8e8 <Cl_Dprep_StartDialyserPrime+0x260>)
   9f760:	e9d3 2300 	ldrd	r2, r3, [r3]
   9f764:	47a0      	blx	r4
   9f766:	4603      	mov	r3, r0
   9f768:	460c      	mov	r4, r1
   9f76a:	4619      	mov	r1, r3
   9f76c:	4622      	mov	r2, r4
   9f76e:	4b6a      	ldr	r3, [pc, #424]	; (9f918 <Cl_Dprep_StartDialyserPrime+0x290>)
   9f770:	4608      	mov	r0, r1
   9f772:	4611      	mov	r1, r2
   9f774:	4798      	blx	r3
   9f776:	4602      	mov	r2, r0
   9f778:	2300      	movs	r3, #0
   9f77a:	9300      	str	r3, [sp, #0]
   9f77c:	f04f 0300 	mov.w	r3, #0
   9f780:	2103      	movs	r1, #3
   9f782:	2008      	movs	r0, #8
   9f784:	4c60      	ldr	r4, [pc, #384]	; (9f908 <Cl_Dprep_StartDialyserPrime+0x280>)
   9f786:	47a0      	blx	r4
   9f788:	4603      	mov	r3, r0
   9f78a:	73fb      	strb	r3, [r7, #15]
// 			Cl_dprepretcode = Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
// 			Cl_dprepretcode = Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
// 			Cl_dprepretcode = Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
// 	        Cl_dprepretcode = Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,false );
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   9f78c:	2100      	movs	r1, #0
   9f78e:	2029      	movs	r0, #41	; 0x29
   9f790:	4b63      	ldr	r3, [pc, #396]	; (9f920 <Cl_Dprep_StartDialyserPrime+0x298>)
   9f792:	4798      	blx	r3
   9f794:	4603      	mov	r3, r0
   9f796:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   9f798:	2100      	movs	r1, #0
   9f79a:	202b      	movs	r0, #43	; 0x2b
   9f79c:	4b60      	ldr	r3, [pc, #384]	; (9f920 <Cl_Dprep_StartDialyserPrime+0x298>)
   9f79e:	4798      	blx	r3
   9f7a0:	4603      	mov	r3, r0
   9f7a2:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   9f7a4:	2100      	movs	r1, #0
   9f7a6:	2003      	movs	r0, #3
   9f7a8:	4b5d      	ldr	r3, [pc, #372]	; (9f920 <Cl_Dprep_StartDialyserPrime+0x298>)
   9f7aa:	4798      	blx	r3
   9f7ac:	4603      	mov	r3, r0
   9f7ae:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   9f7b0:	2100      	movs	r1, #0
   9f7b2:	2004      	movs	r0, #4
   9f7b4:	4b5a      	ldr	r3, [pc, #360]	; (9f920 <Cl_Dprep_StartDialyserPrime+0x298>)
   9f7b6:	4798      	blx	r3
   9f7b8:	4603      	mov	r3, r0
   9f7ba:	73fb      	strb	r3, [r7, #15]
			
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true );
   9f7bc:	2101      	movs	r1, #1
   9f7be:	202a      	movs	r0, #42	; 0x2a
   9f7c0:	4b57      	ldr	r3, [pc, #348]	; (9f920 <Cl_Dprep_StartDialyserPrime+0x298>)
   9f7c2:	4798      	blx	r3
   9f7c4:	4603      	mov	r3, r0
   9f7c6:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   9f7c8:	2101      	movs	r1, #1
   9f7ca:	202c      	movs	r0, #44	; 0x2c
   9f7cc:	4b54      	ldr	r3, [pc, #336]	; (9f920 <Cl_Dprep_StartDialyserPrime+0x298>)
   9f7ce:	4798      	blx	r3
   9f7d0:	4603      	mov	r3, r0
   9f7d2:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_CLOSED,true );
   9f7d4:	2101      	movs	r1, #1
   9f7d6:	2005      	movs	r0, #5
   9f7d8:	4b51      	ldr	r3, [pc, #324]	; (9f920 <Cl_Dprep_StartDialyserPrime+0x298>)
   9f7da:	4798      	blx	r3
   9f7dc:	4603      	mov	r3, r0
   9f7de:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_CLOSED,true );
   9f7e0:	2101      	movs	r1, #1
   9f7e2:	2006      	movs	r0, #6
   9f7e4:	4b4e      	ldr	r3, [pc, #312]	; (9f920 <Cl_Dprep_StartDialyserPrime+0x298>)
   9f7e6:	4798      	blx	r3
   9f7e8:	4603      	mov	r3, r0
   9f7ea:	73fb      	strb	r3, [r7, #15]
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
// 		
			if(Current_sense_trigger)
   9f7ec:	4b4d      	ldr	r3, [pc, #308]	; (9f924 <Cl_Dprep_StartDialyserPrime+0x29c>)
   9f7ee:	781b      	ldrb	r3, [r3, #0]
   9f7f0:	2b00      	cmp	r3, #0
   9f7f2:	d005      	beq.n	9f800 <Cl_Dprep_StartDialyserPrime+0x178>
			{
				Cl_dprepretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   9f7f4:	2101      	movs	r1, #1
   9f7f6:	203c      	movs	r0, #60	; 0x3c
   9f7f8:	4b49      	ldr	r3, [pc, #292]	; (9f920 <Cl_Dprep_StartDialyserPrime+0x298>)
   9f7fa:	4798      	blx	r3
   9f7fc:	4603      	mov	r3, r0
   9f7fe:	73fb      	strb	r3, [r7, #15]
			else
			{
				//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
			}
			
			Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9f800:	2001      	movs	r0, #1
   9f802:	4b49      	ldr	r3, [pc, #292]	; (9f928 <Cl_Dprep_StartDialyserPrime+0x2a0>)
   9f804:	4798      	blx	r3
   9f806:	4603      	mov	r3, r0
   9f808:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR2);
   9f80a:	2002      	movs	r0, #2
   9f80c:	4b46      	ldr	r3, [pc, #280]	; (9f928 <Cl_Dprep_StartDialyserPrime+0x2a0>)
   9f80e:	4798      	blx	r3
   9f810:	4603      	mov	r3, r0
   9f812:	73fb      	strb	r3, [r7, #15]
			
			// wait for the cond and temperature to be stable then disable bypass and run it for 2 mins
		//	Cl_dprepretcode =  sv_cntrl_disable_bypass();
		//	cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;
			Cl_Uint32Type temp = Treatdata[ID_dflow];
   9f814:	4b3d      	ldr	r3, [pc, #244]	; (9f90c <Cl_Dprep_StartDialyserPrime+0x284>)
   9f816:	695b      	ldr	r3, [r3, #20]
   9f818:	60bb      	str	r3, [r7, #8]
				flow_rate = temp;
   9f81a:	4a44      	ldr	r2, [pc, #272]	; (9f92c <Cl_Dprep_StartDialyserPrime+0x2a4>)
   9f81c:	68bb      	ldr	r3, [r7, #8]
   9f81e:	6013      	str	r3, [r2, #0]
			Cl_Uint16Type potvalue = 0;
   9f820:	2300      	movs	r3, #0
   9f822:	80fb      	strh	r3, [r7, #6]
			switch (temp)
   9f824:	68bb      	ldr	r3, [r7, #8]
   9f826:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   9f82a:	d02f      	beq.n	9f88c <Cl_Dprep_StartDialyserPrime+0x204>
   9f82c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   9f830:	d803      	bhi.n	9f83a <Cl_Dprep_StartDialyserPrime+0x1b2>
   9f832:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   9f836:	d043      	beq.n	9f8c0 <Cl_Dprep_StartDialyserPrime+0x238>
   9f838:	e084      	b.n	9f944 <Cl_Dprep_StartDialyserPrime+0x2bc>
   9f83a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
   9f83e:	d013      	beq.n	9f868 <Cl_Dprep_StartDialyserPrime+0x1e0>
   9f840:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   9f844:	d17e      	bne.n	9f944 <Cl_Dprep_StartDialyserPrime+0x2bc>
			{
				case 800:
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9f846:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9f84a:	2002      	movs	r0, #2
   9f84c:	4b38      	ldr	r3, [pc, #224]	; (9f930 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   9f84e:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1395);
   9f850:	f240 5173 	movw	r1, #1395	; 0x573
   9f854:	2001      	movs	r0, #1
   9f856:	4b36      	ldr	r3, [pc, #216]	; (9f930 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   9f858:	4798      	blx	r3
				potvalue = (612 * 1024)/10000;
   9f85a:	233e      	movs	r3, #62	; 0x3e
   9f85c:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   9f85e:	88fb      	ldrh	r3, [r7, #6]
   9f860:	4618      	mov	r0, r3
   9f862:	4b34      	ldr	r3, [pc, #208]	; (9f934 <Cl_Dprep_StartDialyserPrime+0x2ac>)
   9f864:	4798      	blx	r3
				
			//	conf_activate_pressure_alarms(800);
				break;
   9f866:	e083      	b.n	9f970 <Cl_Dprep_StartDialyserPrime+0x2e8>
				
				case 700:
				sv_cntrl_setpumpspeed(DCMOTOR2,900);
   9f868:	f44f 7161 	mov.w	r1, #900	; 0x384
   9f86c:	2002      	movs	r0, #2
   9f86e:	4b30      	ldr	r3, [pc, #192]	; (9f930 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   9f870:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,960);
   9f872:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   9f876:	2001      	movs	r0, #1
   9f878:	4b2d      	ldr	r3, [pc, #180]	; (9f930 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   9f87a:	4798      	blx	r3
				potvalue = (2600 * 1024)/10000;
   9f87c:	f44f 7385 	mov.w	r3, #266	; 0x10a
   9f880:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   9f882:	88fb      	ldrh	r3, [r7, #6]
   9f884:	4618      	mov	r0, r3
   9f886:	4b2b      	ldr	r3, [pc, #172]	; (9f934 <Cl_Dprep_StartDialyserPrime+0x2ac>)
   9f888:	4798      	blx	r3
				
			//	conf_activate_pressure_alarms(700);
				break;
   9f88a:	e071      	b.n	9f970 <Cl_Dprep_StartDialyserPrime+0x2e8>
				
				
				case 500:
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   9f88c:	2203      	movs	r2, #3
   9f88e:	492a      	ldr	r1, [pc, #168]	; (9f938 <Cl_Dprep_StartDialyserPrime+0x2b0>)
   9f890:	2018      	movs	r0, #24
   9f892:	4b2a      	ldr	r3, [pc, #168]	; (9f93c <Cl_Dprep_StartDialyserPrime+0x2b4>)
   9f894:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9f896:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9f89a:	2002      	movs	r0, #2
   9f89c:	4b24      	ldr	r3, [pc, #144]	; (9f930 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   9f89e:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   9f8a0:	f240 414c 	movw	r1, #1100	; 0x44c
   9f8a4:	2001      	movs	r0, #1
   9f8a6:	4b22      	ldr	r3, [pc, #136]	; (9f930 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   9f8a8:	4798      	blx	r3
				potvalue = (670 * 1024)/10000;
   9f8aa:	2344      	movs	r3, #68	; 0x44
   9f8ac:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   9f8ae:	88fb      	ldrh	r3, [r7, #6]
   9f8b0:	4618      	mov	r0, r3
   9f8b2:	4b20      	ldr	r3, [pc, #128]	; (9f934 <Cl_Dprep_StartDialyserPrime+0x2ac>)
   9f8b4:	4798      	blx	r3
				
				conf_activate_pressure_alarms(500);
   9f8b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   9f8ba:	4b21      	ldr	r3, [pc, #132]	; (9f940 <Cl_Dprep_StartDialyserPrime+0x2b8>)
   9f8bc:	4798      	blx	r3
				break;
   9f8be:	e057      	b.n	9f970 <Cl_Dprep_StartDialyserPrime+0x2e8>

				case 300:
				sv_cntrl_setpumpspeed(DCMOTOR2,1120);
   9f8c0:	f44f 618c 	mov.w	r1, #1120	; 0x460
   9f8c4:	2002      	movs	r0, #2
   9f8c6:	4b1a      	ldr	r3, [pc, #104]	; (9f930 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   9f8c8:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,620);
   9f8ca:	f44f 711b 	mov.w	r1, #620	; 0x26c
   9f8ce:	2001      	movs	r0, #1
   9f8d0:	4b17      	ldr	r3, [pc, #92]	; (9f930 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   9f8d2:	4798      	blx	r3
				potvalue = (800 * 1024)/10000;
   9f8d4:	2351      	movs	r3, #81	; 0x51
   9f8d6:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   9f8d8:	88fb      	ldrh	r3, [r7, #6]
   9f8da:	4618      	mov	r0, r3
   9f8dc:	4b15      	ldr	r3, [pc, #84]	; (9f934 <Cl_Dprep_StartDialyserPrime+0x2ac>)
   9f8de:	4798      	blx	r3
				
			//	conf_activate_pressure_alarms(300);
				
				break;
   9f8e0:	e046      	b.n	9f970 <Cl_Dprep_StartDialyserPrime+0x2e8>
   9f8e2:	bf00      	nop
   9f8e4:	f3af 8000 	nop.w
   9f8e8:	9999999a 	.word	0x9999999a
   9f8ec:	3fc99999 	.word	0x3fc99999
   9f8f0:	00097c7d 	.word	0x00097c7d
   9f8f4:	200727f4 	.word	0x200727f4
   9f8f8:	20072844 	.word	0x20072844
   9f8fc:	20072840 	.word	0x20072840
   9f900:	0009e7b1 	.word	0x0009e7b1
   9f904:	0009dea1 	.word	0x0009dea1
   9f908:	00082ea1 	.word	0x00082ea1
   9f90c:	200731a4 	.word	0x200731a4
   9f910:	000a34a9 	.word	0x000a34a9
   9f914:	000a322d 	.word	0x000a322d
   9f918:	000a3b59 	.word	0x000a3b59
   9f91c:	000a3231 	.word	0x000a3231
   9f920:	00082efd 	.word	0x00082efd
   9f924:	200709ee 	.word	0x200709ee
   9f928:	0009790d 	.word	0x0009790d
   9f92c:	200720f0 	.word	0x200720f0
   9f930:	00097a25 	.word	0x00097a25
   9f934:	00097e55 	.word	0x00097e55
   9f938:	000a62dc 	.word	0x000a62dc
   9f93c:	00099729 	.word	0x00099729
   9f940:	0009f0a5 	.word	0x0009f0a5
				
				
				default:
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   9f944:	2203      	movs	r2, #3
   9f946:	4919      	ldr	r1, [pc, #100]	; (9f9ac <Cl_Dprep_StartDialyserPrime+0x324>)
   9f948:	2018      	movs	r0, #24
   9f94a:	4b19      	ldr	r3, [pc, #100]	; (9f9b0 <Cl_Dprep_StartDialyserPrime+0x328>)
   9f94c:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9f94e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9f952:	2002      	movs	r0, #2
   9f954:	4b17      	ldr	r3, [pc, #92]	; (9f9b4 <Cl_Dprep_StartDialyserPrime+0x32c>)
   9f956:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1100);                           // 420
   9f958:	f240 414c 	movw	r1, #1100	; 0x44c
   9f95c:	2001      	movs	r0, #1
   9f95e:	4b15      	ldr	r3, [pc, #84]	; (9f9b4 <Cl_Dprep_StartDialyserPrime+0x32c>)
   9f960:	4798      	blx	r3
				potvalue = (670 * 1024)/10000;
   9f962:	2344      	movs	r3, #68	; 0x44
   9f964:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   9f966:	88fb      	ldrh	r3, [r7, #6]
   9f968:	4618      	mov	r0, r3
   9f96a:	4b13      	ldr	r3, [pc, #76]	; (9f9b8 <Cl_Dprep_StartDialyserPrime+0x330>)
   9f96c:	4798      	blx	r3
				break;
   9f96e:	bf00      	nop
			}
			
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_DIALYSER_PRIMING)
   9f970:	4b12      	ldr	r3, [pc, #72]	; (9f9bc <Cl_Dprep_StartDialyserPrime+0x334>)
   9f972:	781b      	ldrb	r3, [r3, #0]
   9f974:	2b09      	cmp	r3, #9
   9f976:	d006      	beq.n	9f986 <Cl_Dprep_StartDialyserPrime+0x2fe>
			{
				
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING,0);
   9f978:	2100      	movs	r1, #0
   9f97a:	2008      	movs	r0, #8
   9f97c:	4b10      	ldr	r3, [pc, #64]	; (9f9c0 <Cl_Dprep_StartDialyserPrime+0x338>)
   9f97e:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9f980:	4b10      	ldr	r3, [pc, #64]	; (9f9c4 <Cl_Dprep_StartDialyserPrime+0x33c>)
   9f982:	2200      	movs	r2, #0
   9f984:	70da      	strb	r2, [r3, #3]
			}
			
			
			Cl_dprepretcode = sv_cntrl_disable_loopback(); 
   9f986:	4b10      	ldr	r3, [pc, #64]	; (9f9c8 <Cl_Dprep_StartDialyserPrime+0x340>)
   9f988:	4798      	blx	r3
   9f98a:	4603      	mov	r3, r0
   9f98c:	73fb      	strb	r3, [r7, #15]
		//	sv_prop_startmixing();
		//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_RESUME);
			Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_DIALYSER_PRIME_ON);
   9f98e:	2002      	movs	r0, #2
   9f990:	4b0e      	ldr	r3, [pc, #56]	; (9f9cc <Cl_Dprep_StartDialyserPrime+0x344>)
   9f992:	4798      	blx	r3
   9f994:	4603      	mov	r3, r0
   9f996:	73fb      	strb	r3, [r7, #15]
			
			UpdateDprepFillingMinuteTick();
   9f998:	4b0d      	ldr	r3, [pc, #52]	; (9f9d0 <Cl_Dprep_StartDialyserPrime+0x348>)
   9f99a:	4798      	blx	r3
	
			// change state to wait for stability to check for temp and cond stability if yes then change state to dializer prime and diable bypass
		//	Cl_Check_Temp_Cond_Stability();
			
			cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
   9f99c:	4b0d      	ldr	r3, [pc, #52]	; (9f9d4 <Cl_Dprep_StartDialyserPrime+0x34c>)
   9f99e:	220e      	movs	r2, #14
   9f9a0:	701a      	strb	r2, [r3, #0]
			
		//	cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
		//
	//	Cl_dprepretcode =  sv_cntrl_disable_bypass();
	//	cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;					
			return 0;
   9f9a2:	2300      	movs	r3, #0
	}
   9f9a4:	4618      	mov	r0, r3
   9f9a6:	3714      	adds	r7, #20
   9f9a8:	46bd      	mov	sp, r7
   9f9aa:	bd90      	pop	{r4, r7, pc}
   9f9ac:	000a62dc 	.word	0x000a62dc
   9f9b0:	00099729 	.word	0x00099729
   9f9b4:	00097a25 	.word	0x00097a25
   9f9b8:	00097e55 	.word	0x00097e55
   9f9bc:	2007212c 	.word	0x2007212c
   9f9c0:	00087cad 	.word	0x00087cad
   9f9c4:	20070abc 	.word	0x20070abc
   9f9c8:	00097b3d 	.word	0x00097b3d
   9f9cc:	00088a91 	.word	0x00088a91
   9f9d0:	0009dec1 	.word	0x0009dec1
   9f9d4:	2007283b 	.word	0x2007283b

0009f9d8 <Cl_Dprep_Priming_Stop>:

Cl_ReturnCodeType Cl_Dprep_Priming_Stop(){
   9f9d8:	b580      	push	{r7, lr}
   9f9da:	af00      	add	r7, sp, #0
	
	 Cl_mac_apprequesthandler(EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME);
   9f9dc:	2014      	movs	r0, #20
   9f9de:	4b02      	ldr	r3, [pc, #8]	; (9f9e8 <Cl_Dprep_Priming_Stop+0x10>)
   9f9e0:	4798      	blx	r3
// 		
// 		
// 		Cl_dprep_StopMixing();
// 		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
// 	
}
   9f9e2:	bf00      	nop
   9f9e4:	4618      	mov	r0, r3
   9f9e6:	bd80      	pop	{r7, pc}
   9f9e8:	0008a611 	.word	0x0008a611

0009f9ec <Cl_Check_Temp_Cond_Stability>:
	
	
	
Cl_ReturnCodeType Cl_Check_Temp_Cond_Stability(){
   9f9ec:	b580      	push	{r7, lr}
   9f9ee:	b082      	sub	sp, #8
   9f9f0:	af00      	add	r7, sp, #0
	
	
	
	Cl_Heater_GetHeaterStableStatus(&dprep_heater_stable_status);
   9f9f2:	4807      	ldr	r0, [pc, #28]	; (9fa10 <Cl_Check_Temp_Cond_Stability+0x24>)
   9f9f4:	4b07      	ldr	r3, [pc, #28]	; (9fa14 <Cl_Check_Temp_Cond_Stability+0x28>)
   9f9f6:	4798      	blx	r3
	Cl_Uint16Type temp = 0;
   9f9f8:	2300      	movs	r3, #0
   9f9fa:	80fb      	strh	r3, [r7, #6]
	Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS , &temp);
   9f9fc:	1dbb      	adds	r3, r7, #6
   9f9fe:	4619      	mov	r1, r3
   9fa00:	2007      	movs	r0, #7
   9fa02:	4b05      	ldr	r3, [pc, #20]	; (9fa18 <Cl_Check_Temp_Cond_Stability+0x2c>)
   9fa04:	4798      	blx	r3
// 		}
// 		else{
// 			return CL_REJECTED;
// 		}

return CL_OK;	
   9fa06:	2300      	movs	r3, #0
}
   9fa08:	4618      	mov	r0, r3
   9fa0a:	3708      	adds	r7, #8
   9fa0c:	46bd      	mov	sp, r7
   9fa0e:	bd80      	pop	{r7, pc}
   9fa10:	200727f5 	.word	0x200727f5
   9fa14:	00088959 	.word	0x00088959
   9fa18:	0008d6b1 	.word	0x0008d6b1

0009fa1c <Cl_dprep_StopMixing>:
	
	
	
Cl_ReturnCodeType Cl_dprep_StopMixing(void)
{
   9fa1c:	b580      	push	{r7, lr}
   9fa1e:	b082      	sub	sp, #8
   9fa20:	af00      	add	r7, sp, #0
				Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9fa22:	2300      	movs	r3, #0
   9fa24:	71fb      	strb	r3, [r7, #7]
				Cl_Uint8Type data;
				if(cl_dprepstate == CL_DPREP_STATE_DPREP_FILLING)
   9fa26:	4b1e      	ldr	r3, [pc, #120]	; (9faa0 <Cl_dprep_StopMixing+0x84>)
   9fa28:	781b      	ldrb	r3, [r3, #0]
   9fa2a:	2b02      	cmp	r3, #2
   9fa2c:	d11c      	bne.n	9fa68 <Cl_dprep_StopMixing+0x4c>
				{
					
				Cl_dprepMinutescounter = 0;
   9fa2e:	4b1d      	ldr	r3, [pc, #116]	; (9faa4 <Cl_dprep_StopMixing+0x88>)
   9fa30:	2200      	movs	r2, #0
   9fa32:	601a      	str	r2, [r3, #0]
				Cl_dprepsecondscounter = 0;
   9fa34:	4b1c      	ldr	r3, [pc, #112]	; (9faa8 <Cl_dprep_StopMixing+0x8c>)
   9fa36:	2200      	movs	r2, #0
   9fa38:	601a      	str	r2, [r3, #0]

				Cl_dprepretcode = sv_cntrl_poweroffheater();
   9fa3a:	4b1c      	ldr	r3, [pc, #112]	; (9faac <Cl_dprep_StopMixing+0x90>)
   9fa3c:	4798      	blx	r3
   9fa3e:	4603      	mov	r3, r0
   9fa40:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   9fa42:	2004      	movs	r0, #4
   9fa44:	4b1a      	ldr	r3, [pc, #104]	; (9fab0 <Cl_dprep_StopMixing+0x94>)
   9fa46:	4798      	blx	r3
   9fa48:	4603      	mov	r3, r0
   9fa4a:	71fb      	strb	r3, [r7, #7]
				Cl_bc_controller(BC_EVENT_STOP);
   9fa4c:	2005      	movs	r0, #5
   9fa4e:	4b19      	ldr	r3, [pc, #100]	; (9fab4 <Cl_dprep_StopMixing+0x98>)
   9fa50:	4798      	blx	r3
				//Cl_rinseretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
				cl_dprepstate = CL_DPREP_STATE_STOPPED;
   9fa52:	4b13      	ldr	r3, [pc, #76]	; (9faa0 <Cl_dprep_StopMixing+0x84>)
   9fa54:	220b      	movs	r2, #11
   9fa56:	701a      	strb	r2, [r3, #0]
				Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
   9fa58:	1dbb      	adds	r3, r7, #6
   9fa5a:	2200      	movs	r2, #0
   9fa5c:	4619      	mov	r1, r3
   9fa5e:	202d      	movs	r0, #45	; 0x2d
   9fa60:	4b15      	ldr	r3, [pc, #84]	; (9fab8 <Cl_dprep_StopMixing+0x9c>)
   9fa62:	4798      	blx	r3
   9fa64:	4603      	mov	r3, r0
   9fa66:	71fb      	strb	r3, [r7, #7]
				
					
				}
				if(cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME){
   9fa68:	4b0d      	ldr	r3, [pc, #52]	; (9faa0 <Cl_dprep_StopMixing+0x84>)
   9fa6a:	781b      	ldrb	r3, [r3, #0]
   9fa6c:	2b06      	cmp	r3, #6
   9fa6e:	d111      	bne.n	9fa94 <Cl_dprep_StopMixing+0x78>
					
					Cl_dprepMinutescounter = 0;
   9fa70:	4b0c      	ldr	r3, [pc, #48]	; (9faa4 <Cl_dprep_StopMixing+0x88>)
   9fa72:	2200      	movs	r2, #0
   9fa74:	601a      	str	r2, [r3, #0]
					Cl_dprepsecondscounter = 0;
   9fa76:	4b0c      	ldr	r3, [pc, #48]	; (9faa8 <Cl_dprep_StopMixing+0x8c>)
   9fa78:	2200      	movs	r2, #0
   9fa7a:	601a      	str	r2, [r3, #0]
					
					Cl_dprepretcode = sv_cntrl_poweroffheater();
   9fa7c:	4b0b      	ldr	r3, [pc, #44]	; (9faac <Cl_dprep_StopMixing+0x90>)
   9fa7e:	4798      	blx	r3
   9fa80:	4603      	mov	r3, r0
   9fa82:	71fb      	strb	r3, [r7, #7]
					Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   9fa84:	2004      	movs	r0, #4
   9fa86:	4b0a      	ldr	r3, [pc, #40]	; (9fab0 <Cl_dprep_StopMixing+0x94>)
   9fa88:	4798      	blx	r3
   9fa8a:	4603      	mov	r3, r0
   9fa8c:	71fb      	strb	r3, [r7, #7]
					Cl_bc_controller(BC_EVENT_STOP);
   9fa8e:	2005      	movs	r0, #5
   9fa90:	4b08      	ldr	r3, [pc, #32]	; (9fab4 <Cl_dprep_StopMixing+0x98>)
   9fa92:	4798      	blx	r3
					
					
				}

				return Cl_dprepretcode;
   9fa94:	79fb      	ldrb	r3, [r7, #7]
}
   9fa96:	4618      	mov	r0, r3
   9fa98:	3708      	adds	r7, #8
   9fa9a:	46bd      	mov	sp, r7
   9fa9c:	bd80      	pop	{r7, pc}
   9fa9e:	bf00      	nop
   9faa0:	2007283b 	.word	0x2007283b
   9faa4:	20072844 	.word	0x20072844
   9faa8:	20072840 	.word	0x20072840
   9faac:	00097999 	.word	0x00097999
   9fab0:	00088a91 	.word	0x00088a91
   9fab4:	00083319 	.word	0x00083319
   9fab8:	00099729 	.word	0x00099729

0009fabc <Cl_deactivate_prep_alarms>:

Cl_ReturnCodeType Cl_deactivate_prep_alarms(){
   9fabc:	b580      	push	{r7, lr}
   9fabe:	b082      	sub	sp, #8
   9fac0:	af00      	add	r7, sp, #0
	
	
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9fac2:	2300      	movs	r3, #0
   9fac4:	71fb      	strb	r3, [r7, #7]
		
		
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,false );
   9fac6:	2100      	movs	r1, #0
   9fac8:	202a      	movs	r0, #42	; 0x2a
   9faca:	4b43      	ldr	r3, [pc, #268]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9facc:	4798      	blx	r3
   9face:	4603      	mov	r3, r0
   9fad0:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,false );
   9fad2:	2100      	movs	r1, #0
   9fad4:	202c      	movs	r0, #44	; 0x2c
   9fad6:	4b40      	ldr	r3, [pc, #256]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fad8:	4798      	blx	r3
   9fada:	4603      	mov	r3, r0
   9fadc:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_CLOSED,false );
   9fade:	2100      	movs	r1, #0
   9fae0:	2005      	movs	r0, #5
   9fae2:	4b3d      	ldr	r3, [pc, #244]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fae4:	4798      	blx	r3
   9fae6:	4603      	mov	r3, r0
   9fae8:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_CLOSED,false );
   9faea:	2100      	movs	r1, #0
   9faec:	2006      	movs	r0, #6
   9faee:	4b3a      	ldr	r3, [pc, #232]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9faf0:	4798      	blx	r3
   9faf2:	4603      	mov	r3, r0
   9faf4:	71fb      	strb	r3, [r7, #7]
		
		
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   9faf6:	2100      	movs	r1, #0
   9faf8:	2029      	movs	r0, #41	; 0x29
   9fafa:	4b37      	ldr	r3, [pc, #220]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fafc:	4798      	blx	r3
   9fafe:	4603      	mov	r3, r0
   9fb00:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   9fb02:	2100      	movs	r1, #0
   9fb04:	202b      	movs	r0, #43	; 0x2b
   9fb06:	4b34      	ldr	r3, [pc, #208]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fb08:	4798      	blx	r3
   9fb0a:	4603      	mov	r3, r0
   9fb0c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   9fb0e:	2100      	movs	r1, #0
   9fb10:	2003      	movs	r0, #3
   9fb12:	4b31      	ldr	r3, [pc, #196]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fb14:	4798      	blx	r3
   9fb16:	4603      	mov	r3, r0
   9fb18:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   9fb1a:	2100      	movs	r1, #0
   9fb1c:	2004      	movs	r0, #4
   9fb1e:	4b2e      	ldr	r3, [pc, #184]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fb20:	4798      	blx	r3
   9fb22:	4603      	mov	r3, r0
   9fb24:	71fb      	strb	r3, [r7, #7]
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   9fb26:	2100      	movs	r1, #0
   9fb28:	2015      	movs	r0, #21
   9fb2a:	4b2b      	ldr	r3, [pc, #172]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fb2c:	4798      	blx	r3
   9fb2e:	4603      	mov	r3, r0
   9fb30:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   9fb32:	2100      	movs	r1, #0
   9fb34:	2016      	movs	r0, #22
   9fb36:	4b28      	ldr	r3, [pc, #160]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fb38:	4798      	blx	r3
   9fb3a:	4603      	mov	r3, r0
   9fb3c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   9fb3e:	2100      	movs	r1, #0
   9fb40:	2017      	movs	r0, #23
   9fb42:	4b25      	ldr	r3, [pc, #148]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fb44:	4798      	blx	r3
   9fb46:	4603      	mov	r3, r0
   9fb48:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   9fb4a:	2100      	movs	r1, #0
   9fb4c:	2018      	movs	r0, #24
   9fb4e:	4b22      	ldr	r3, [pc, #136]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fb50:	4798      	blx	r3
   9fb52:	4603      	mov	r3, r0
   9fb54:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
   9fb56:	2100      	movs	r1, #0
   9fb58:	2027      	movs	r0, #39	; 0x27
   9fb5a:	4b1f      	ldr	r3, [pc, #124]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fb5c:	4798      	blx	r3
   9fb5e:	4603      	mov	r3, r0
   9fb60:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,false );
   9fb62:	2100      	movs	r1, #0
   9fb64:	2028      	movs	r0, #40	; 0x28
   9fb66:	4b1c      	ldr	r3, [pc, #112]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fb68:	4798      	blx	r3
   9fb6a:	4603      	mov	r3, r0
   9fb6c:	71fb      	strb	r3, [r7, #7]
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   9fb6e:	2100      	movs	r1, #0
   9fb70:	200f      	movs	r0, #15
   9fb72:	4b19      	ldr	r3, [pc, #100]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fb74:	4798      	blx	r3
   9fb76:	4603      	mov	r3, r0
   9fb78:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );
   9fb7a:	2100      	movs	r1, #0
   9fb7c:	2010      	movs	r0, #16
   9fb7e:	4b16      	ldr	r3, [pc, #88]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fb80:	4798      	blx	r3
   9fb82:	4603      	mov	r3, r0
   9fb84:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,false );
   9fb86:	2100      	movs	r1, #0
   9fb88:	2011      	movs	r0, #17
   9fb8a:	4b13      	ldr	r3, [pc, #76]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fb8c:	4798      	blx	r3
   9fb8e:	4603      	mov	r3, r0
   9fb90:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,false );
   9fb92:	2100      	movs	r1, #0
   9fb94:	2012      	movs	r0, #18
   9fb96:	4b10      	ldr	r3, [pc, #64]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fb98:	4798      	blx	r3
   9fb9a:	4603      	mov	r3, r0
   9fb9c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   9fb9e:	2100      	movs	r1, #0
   9fba0:	2013      	movs	r0, #19
   9fba2:	4b0d      	ldr	r3, [pc, #52]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fba4:	4798      	blx	r3
   9fba6:	4603      	mov	r3, r0
   9fba8:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   9fbaa:	2100      	movs	r1, #0
   9fbac:	2014      	movs	r0, #20
   9fbae:	4b0a      	ldr	r3, [pc, #40]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fbb0:	4798      	blx	r3
   9fbb2:	4603      	mov	r3, r0
   9fbb4:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   9fbb6:	2100      	movs	r1, #0
   9fbb8:	2008      	movs	r0, #8
   9fbba:	4b07      	ldr	r3, [pc, #28]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fbbc:	4798      	blx	r3
   9fbbe:	4603      	mov	r3, r0
   9fbc0:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   9fbc2:	2100      	movs	r1, #0
   9fbc4:	2007      	movs	r0, #7
   9fbc6:	4b04      	ldr	r3, [pc, #16]	; (9fbd8 <Cl_deactivate_prep_alarms+0x11c>)
   9fbc8:	4798      	blx	r3
   9fbca:	4603      	mov	r3, r0
   9fbcc:	71fb      	strb	r3, [r7, #7]
	
	
	
}
   9fbce:	bf00      	nop
   9fbd0:	4618      	mov	r0, r3
   9fbd2:	3708      	adds	r7, #8
   9fbd4:	46bd      	mov	sp, r7
   9fbd6:	bd80      	pop	{r7, pc}
   9fbd8:	00082efd 	.word	0x00082efd

0009fbdc <Cl_Rinse_Controller>:
	{CONSOLE_SYNC_LOST,CL_ALARM_ALERT,false,false,false}                        // added on 18.03.17
			
};

Cl_ReturnCodeType Cl_Rinse_Controller(Cl_Mac_EventsType Cl_MacRinseEvent   )
{
   9fbdc:	b580      	push	{r7, lr}
   9fbde:	b092      	sub	sp, #72	; 0x48
   9fbe0:	af00      	add	r7, sp, #0
   9fbe2:	4603      	mov	r3, r0
   9fbe4:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_rinseretcode = CL_OK;
   9fbe6:	2300      	movs	r3, #0
   9fbe8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_Rinse_Eevents cl_rinseevent = EVENT_NULL;
   9fbec:	2300      	movs	r3, #0
   9fbee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	Cl_NewAlarmIdType cl_rinsealarmid;
	ClRinseAlarmIdType ClRinseAlarmId;

	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9fbf2:	234d      	movs	r3, #77	; 0x4d
   9fbf4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	Cl_Uint8Type dataarray[4] = {0,0,0,0};
   9fbf8:	2300      	movs	r3, #0
   9fbfa:	63bb      	str	r3, [r7, #56]	; 0x38
	Cl_Uint8Type data = 0;
   9fbfc:	2300      	movs	r3, #0
   9fbfe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   9fc02:	2300      	movs	r3, #0
   9fc04:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
   9fc08:	2300      	movs	r3, #0
   9fc0a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
   9fc0e:	2300      	movs	r3, #0
   9fc10:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
   9fc14:	2300      	movs	r3, #0
   9fc16:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34




cl_rinse_translatemacevent( Cl_MacRinseEvent, &cl_rinseevent);
   9fc1a:	f107 023f 	add.w	r2, r7, #63	; 0x3f
   9fc1e:	79fb      	ldrb	r3, [r7, #7]
   9fc20:	4611      	mov	r1, r2
   9fc22:	4618      	mov	r0, r3
   9fc24:	4ba9      	ldr	r3, [pc, #676]	; (9fecc <Cl_Rinse_Controller+0x2f0>)
   9fc26:	4798      	blx	r3

switch(cl_rinseevent)
   9fc28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   9fc2c:	3b21      	subs	r3, #33	; 0x21
   9fc2e:	2b05      	cmp	r3, #5
   9fc30:	d87d      	bhi.n	9fd2e <Cl_Rinse_Controller+0x152>
   9fc32:	a201      	add	r2, pc, #4	; (adr r2, 9fc38 <Cl_Rinse_Controller+0x5c>)
   9fc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9fc38:	0009fc51 	.word	0x0009fc51
   9fc3c:	0009fc69 	.word	0x0009fc69
   9fc40:	0009fc81 	.word	0x0009fc81
   9fc44:	0009fcbd 	.word	0x0009fcbd
   9fc48:	0009fd1b 	.word	0x0009fd1b
   9fc4c:	0009fd25 	.word	0x0009fd25
{
	
	case EVT_RINSE_COMMAND_SET_BLDPMP_ON:
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   9fc50:	2101      	movs	r1, #1
   9fc52:	2001      	movs	r0, #1
   9fc54:	4b9e      	ldr	r3, [pc, #632]	; (9fed0 <Cl_Rinse_Controller+0x2f4>)
   9fc56:	4798      	blx	r3
   9fc58:	4603      	mov	r3, r0
   9fc5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
	cl_bp_controller(CL_BP_EVENT_START,0);
   9fc5e:	2100      	movs	r1, #0
   9fc60:	2002      	movs	r0, #2
   9fc62:	4b9c      	ldr	r3, [pc, #624]	; (9fed4 <Cl_Rinse_Controller+0x2f8>)
   9fc64:	4798      	blx	r3
	break;
   9fc66:	e067      	b.n	9fd38 <Cl_Rinse_Controller+0x15c>
	case EVT_RINSE_COMMAND_SET_BLDPMP_OFF:
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   9fc68:	2100      	movs	r1, #0
   9fc6a:	2001      	movs	r0, #1
   9fc6c:	4b98      	ldr	r3, [pc, #608]	; (9fed0 <Cl_Rinse_Controller+0x2f4>)
   9fc6e:	4798      	blx	r3
   9fc70:	4603      	mov	r3, r0
   9fc72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	cl_bp_controller(CL_BP_EVENT_STOP,0);
   9fc76:	2100      	movs	r1, #0
   9fc78:	2004      	movs	r0, #4
   9fc7a:	4b96      	ldr	r3, [pc, #600]	; (9fed4 <Cl_Rinse_Controller+0x2f8>)
   9fc7c:	4798      	blx	r3
//	Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = false;
	break;
   9fc7e:	e05b      	b.n	9fd38 <Cl_Rinse_Controller+0x15c>
	case EVT_RINSE_COMMAND_SET_BLDPUMPRATE:
	if(Cl_ConsoleRxMsg.msgready == true)
   9fc80:	4b95      	ldr	r3, [pc, #596]	; (9fed8 <Cl_Rinse_Controller+0x2fc>)
   9fc82:	7e1b      	ldrb	r3, [r3, #24]
   9fc84:	2b00      	cmp	r3, #0
   9fc86:	d054      	beq.n	9fd32 <Cl_Rinse_Controller+0x156>
	{
		
		cl_Datastreamtype cl_temp  ;
		cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9fc88:	4b93      	ldr	r3, [pc, #588]	; (9fed8 <Cl_Rinse_Controller+0x2fc>)
   9fc8a:	791b      	ldrb	r3, [r3, #4]
   9fc8c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   9fc90:	4b91      	ldr	r3, [pc, #580]	; (9fed8 <Cl_Rinse_Controller+0x2fc>)
   9fc92:	795b      	ldrb	r3, [r3, #5]
   9fc94:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   9fc98:	4b8f      	ldr	r3, [pc, #572]	; (9fed8 <Cl_Rinse_Controller+0x2fc>)
   9fc9a:	799b      	ldrb	r3, [r3, #6]
   9fc9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   9fca0:	4b8d      	ldr	r3, [pc, #564]	; (9fed8 <Cl_Rinse_Controller+0x2fc>)
   9fca2:	79db      	ldrb	r3, [r3, #7]
   9fca4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   9fca8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   9fcaa:	4619      	mov	r1, r3
   9fcac:	2001      	movs	r0, #1
   9fcae:	4b89      	ldr	r3, [pc, #548]	; (9fed4 <Cl_Rinse_Controller+0x2f8>)
   9fcb0:	4798      	blx	r3
		Treatdata[ID_bloodrate] = cl_temp.Twobyte;
   9fcb2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   9fcb4:	461a      	mov	r2, r3
   9fcb6:	4b89      	ldr	r3, [pc, #548]	; (9fedc <Cl_Rinse_Controller+0x300>)
   9fcb8:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	break;
   9fcba:	e03a      	b.n	9fd32 <Cl_Rinse_Controller+0x156>
	
	case EVENT_RINSE_HEP_PMP_START:
	if(Cl_ConsoleRxMsg.msgready == true)
   9fcbc:	4b86      	ldr	r3, [pc, #536]	; (9fed8 <Cl_Rinse_Controller+0x2fc>)
   9fcbe:	7e1b      	ldrb	r3, [r3, #24]
   9fcc0:	2b00      	cmp	r3, #0
   9fcc2:	d038      	beq.n	9fd36 <Cl_Rinse_Controller+0x15a>
			
	{
		cl_Datastreamtype cl_temp  ;
		cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9fcc4:	4b84      	ldr	r3, [pc, #528]	; (9fed8 <Cl_Rinse_Controller+0x2fc>)
   9fcc6:	795b      	ldrb	r3, [r3, #5]
   9fcc8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9fccc:	4b82      	ldr	r3, [pc, #520]	; (9fed8 <Cl_Rinse_Controller+0x2fc>)
   9fcce:	799b      	ldrb	r3, [r3, #6]
   9fcd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9fcd4:	4b80      	ldr	r3, [pc, #512]	; (9fed8 <Cl_Rinse_Controller+0x2fc>)
   9fcd6:	79db      	ldrb	r3, [r3, #7]
   9fcd8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9fcdc:	4b7e      	ldr	r3, [pc, #504]	; (9fed8 <Cl_Rinse_Controller+0x2fc>)
   9fcde:	7a1b      	ldrb	r3, [r3, #8]
   9fce0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				
		if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   9fce4:	4b7c      	ldr	r3, [pc, #496]	; (9fed8 <Cl_Rinse_Controller+0x2fc>)
   9fce6:	791b      	ldrb	r3, [r3, #4]
   9fce8:	2b01      	cmp	r3, #1
   9fcea:	d104      	bne.n	9fcf6 <Cl_Rinse_Controller+0x11a>
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   9fcec:	2100      	movs	r1, #0
   9fcee:	2001      	movs	r0, #1
   9fcf0:	4b7b      	ldr	r3, [pc, #492]	; (9fee0 <Cl_Rinse_Controller+0x304>)
   9fcf2:	4798      	blx	r3
		}
				
	}
			
			
	break;
   9fcf4:	e01f      	b.n	9fd36 <Cl_Rinse_Controller+0x15a>
		if(Cl_ConsoleRxMsg.data.byte[0] == 1)
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
					
		}
		else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   9fcf6:	4b78      	ldr	r3, [pc, #480]	; (9fed8 <Cl_Rinse_Controller+0x2fc>)
   9fcf8:	791b      	ldrb	r3, [r3, #4]
   9fcfa:	2b02      	cmp	r3, #2
   9fcfc:	d104      	bne.n	9fd08 <Cl_Rinse_Controller+0x12c>
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   9fcfe:	2100      	movs	r1, #0
   9fd00:	2004      	movs	r0, #4
   9fd02:	4b77      	ldr	r3, [pc, #476]	; (9fee0 <Cl_Rinse_Controller+0x304>)
   9fd04:	4798      	blx	r3
		}
				
	}
			
			
	break;
   9fd06:	e016      	b.n	9fd36 <Cl_Rinse_Controller+0x15a>
		}
		else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
		}
		else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   9fd08:	4b73      	ldr	r3, [pc, #460]	; (9fed8 <Cl_Rinse_Controller+0x2fc>)
   9fd0a:	791b      	ldrb	r3, [r3, #4]
   9fd0c:	2b00      	cmp	r3, #0
   9fd0e:	d112      	bne.n	9fd36 <Cl_Rinse_Controller+0x15a>
		{
			cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   9fd10:	2100      	movs	r1, #0
   9fd12:	200a      	movs	r0, #10
   9fd14:	4b72      	ldr	r3, [pc, #456]	; (9fee0 <Cl_Rinse_Controller+0x304>)
   9fd16:	4798      	blx	r3
		}
				
	}
			
			
	break;
   9fd18:	e00d      	b.n	9fd36 <Cl_Rinse_Controller+0x15a>
	case EVENT_RINSE_HEP_PMP_STOP:
	cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   9fd1a:	2100      	movs	r1, #0
   9fd1c:	200c      	movs	r0, #12
   9fd1e:	4b70      	ldr	r3, [pc, #448]	; (9fee0 <Cl_Rinse_Controller+0x304>)
   9fd20:	4798      	blx	r3
	break;
   9fd22:	e009      	b.n	9fd38 <Cl_Rinse_Controller+0x15c>
	case EVENT_RINSE_HEP_PMP_BLOUS:
	cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   9fd24:	2100      	movs	r1, #0
   9fd26:	2007      	movs	r0, #7
   9fd28:	4b6d      	ldr	r3, [pc, #436]	; (9fee0 <Cl_Rinse_Controller+0x304>)
   9fd2a:	4798      	blx	r3
	break;
   9fd2c:	e004      	b.n	9fd38 <Cl_Rinse_Controller+0x15c>
	default:break;	
   9fd2e:	bf00      	nop
   9fd30:	e002      	b.n	9fd38 <Cl_Rinse_Controller+0x15c>
		cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
		cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
		cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
		Treatdata[ID_bloodrate] = cl_temp.Twobyte;
	}
	break;
   9fd32:	bf00      	nop
   9fd34:	e000      	b.n	9fd38 <Cl_Rinse_Controller+0x15c>
		}
				
	}
			
			
	break;
   9fd36:	bf00      	nop
	cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
	break;
	default:break;	
}

if(cl_rinseevent == EVENT_RINSE_TICK_SECOND)
   9fd38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   9fd3c:	2b12      	cmp	r3, #18
   9fd3e:	d10f      	bne.n	9fd60 <Cl_Rinse_Controller+0x184>
{
	Rinsestatedummy = cl_rinsestate;
   9fd40:	4b68      	ldr	r3, [pc, #416]	; (9fee4 <Cl_Rinse_Controller+0x308>)
   9fd42:	781a      	ldrb	r2, [r3, #0]
   9fd44:	4b68      	ldr	r3, [pc, #416]	; (9fee8 <Cl_Rinse_Controller+0x30c>)
   9fd46:	701a      	strb	r2, [r3, #0]
	//Cl_rinseretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP3STATUS );
	Cl_rinseretcode =  Cl_AlarmResetAlarm( LEVELSWITCH_OFF_TO_ON );
   9fd48:	203d      	movs	r0, #61	; 0x3d
   9fd4a:	4b68      	ldr	r3, [pc, #416]	; (9feec <Cl_Rinse_Controller+0x310>)
   9fd4c:	4798      	blx	r3
   9fd4e:	4603      	mov	r3, r0
   9fd50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_rinseretcode =  Cl_AlarmResetAlarm( LEVELSWITCH_ON_TO_OFF );
   9fd54:	203e      	movs	r0, #62	; 0x3e
   9fd56:	4b65      	ldr	r3, [pc, #404]	; (9feec <Cl_Rinse_Controller+0x310>)
   9fd58:	4798      	blx	r3
   9fd5a:	4603      	mov	r3, r0
   9fd5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47


}


switch(cl_rinsestate)
   9fd60:	4b60      	ldr	r3, [pc, #384]	; (9fee4 <Cl_Rinse_Controller+0x308>)
   9fd62:	781b      	ldrb	r3, [r3, #0]
   9fd64:	2b09      	cmp	r3, #9
   9fd66:	f201 816d 	bhi.w	a1044 <Cl_Rinse_Controller+0x1468>
   9fd6a:	a201      	add	r2, pc, #4	; (adr r2, 9fd70 <Cl_Rinse_Controller+0x194>)
   9fd6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9fd70:	0009fd99 	.word	0x0009fd99
   9fd74:	000a1155 	.word	0x000a1155
   9fd78:	000a1045 	.word	0x000a1045
   9fd7c:	0009ffc1 	.word	0x0009ffc1
   9fd80:	0009ffc1 	.word	0x0009ffc1
   9fd84:	0009ffc1 	.word	0x0009ffc1
   9fd88:	000a094d 	.word	0x000a094d
   9fd8c:	000a1045 	.word	0x000a1045
   9fd90:	000a1045 	.word	0x000a1045
   9fd94:	000a0c23 	.word	0x000a0c23
{

		case CL_RINSE_STATE_INIT:
		break;
		case CL_RINSE_STATE_IDLE:
		switch (cl_rinseevent)
   9fd98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   9fd9c:	3b02      	subs	r3, #2
   9fd9e:	2b15      	cmp	r3, #21
   9fda0:	f200 8108 	bhi.w	9ffb4 <Cl_Rinse_Controller+0x3d8>
   9fda4:	a201      	add	r2, pc, #4	; (adr r2, 9fdac <Cl_Rinse_Controller+0x1d0>)
   9fda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9fdaa:	bf00      	nop
   9fdac:	0009fef9 	.word	0x0009fef9
   9fdb0:	0009ffb5 	.word	0x0009ffb5
   9fdb4:	0009ff85 	.word	0x0009ff85
   9fdb8:	0009ff97 	.word	0x0009ff97
   9fdbc:	0009ffb5 	.word	0x0009ffb5
   9fdc0:	0009ffb5 	.word	0x0009ffb5
   9fdc4:	0009ffb5 	.word	0x0009ffb5
   9fdc8:	0009ffb5 	.word	0x0009ffb5
   9fdcc:	0009ffb5 	.word	0x0009ffb5
   9fdd0:	0009ffb5 	.word	0x0009ffb5
   9fdd4:	0009ffb5 	.word	0x0009ffb5
   9fdd8:	0009ffb5 	.word	0x0009ffb5
   9fddc:	0009ffb5 	.word	0x0009ffb5
   9fde0:	0009ffb5 	.word	0x0009ffb5
   9fde4:	0009ffb5 	.word	0x0009ffb5
   9fde8:	0009ffb5 	.word	0x0009ffb5
   9fdec:	0009ffb5 	.word	0x0009ffb5
   9fdf0:	0009ffb5 	.word	0x0009ffb5
   9fdf4:	0009ffb5 	.word	0x0009ffb5
   9fdf8:	0009ffb5 	.word	0x0009ffb5
   9fdfc:	0009ffa9 	.word	0x0009ffa9
   9fe00:	0009fe05 	.word	0x0009fe05
			{
				case EVT_RINSE_GET_DATA:
						if(Cl_ConsoleRxMsg.msgready == true)
   9fe04:	4b34      	ldr	r3, [pc, #208]	; (9fed8 <Cl_Rinse_Controller+0x2fc>)
   9fe06:	7e1b      	ldrb	r3, [r3, #24]
   9fe08:	2b00      	cmp	r3, #0
   9fe0a:	f000 80d6 	beq.w	9ffba <Cl_Rinse_Controller+0x3de>
						{
							
							switch(Cl_ConsoleRxMsg.data.byte[0])
   9fe0e:	4b32      	ldr	r3, [pc, #200]	; (9fed8 <Cl_Rinse_Controller+0x2fc>)
   9fe10:	791b      	ldrb	r3, [r3, #4]
   9fe12:	2b02      	cmp	r3, #2
   9fe14:	d020      	beq.n	9fe58 <Cl_Rinse_Controller+0x27c>
   9fe16:	2b21      	cmp	r3, #33	; 0x21
   9fe18:	d03a      	beq.n	9fe90 <Cl_Rinse_Controller+0x2b4>
   9fe1a:	2b01      	cmp	r3, #1
   9fe1c:	d000      	beq.n	9fe20 <Cl_Rinse_Controller+0x244>
								dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
								break;							
								default:
								break;
   9fe1e:	e053      	b.n	9fec8 <Cl_Rinse_Controller+0x2ec>
						{
							
							switch(Cl_ConsoleRxMsg.data.byte[0])
							{
								case CON_RX_PARAM_DATA_RINSE_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   9fe20:	2316      	movs	r3, #22
   9fe22:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
								dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9fe26:	2301      	movs	r3, #1
   9fe28:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9fe2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
   9fe30:	3301      	adds	r3, #1
   9fe32:	4619      	mov	r1, r3
   9fe34:	2001      	movs	r0, #1
   9fe36:	4b2e      	ldr	r3, [pc, #184]	; (9fef0 <Cl_Rinse_Controller+0x314>)
   9fe38:	4798      	blx	r3
   9fe3a:	4603      	mov	r3, r0
   9fe3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9fe40:	f107 0138 	add.w	r1, r7, #56	; 0x38
   9fe44:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9fe48:	2202      	movs	r2, #2
   9fe4a:	4618      	mov	r0, r3
   9fe4c:	4b29      	ldr	r3, [pc, #164]	; (9fef4 <Cl_Rinse_Controller+0x318>)
   9fe4e:	4798      	blx	r3
   9fe50:	4603      	mov	r3, r0
   9fe52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								
								break;
   9fe56:	e037      	b.n	9fec8 <Cl_Rinse_Controller+0x2ec>
								case CON_RX_PARAM_DATA_PRIME_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   9fe58:	2316      	movs	r3, #22
   9fe5a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
								dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9fe5e:	2302      	movs	r3, #2
   9fe60:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9fe64:	f107 0338 	add.w	r3, r7, #56	; 0x38
   9fe68:	3301      	adds	r3, #1
   9fe6a:	4619      	mov	r1, r3
   9fe6c:	2002      	movs	r0, #2
   9fe6e:	4b20      	ldr	r3, [pc, #128]	; (9fef0 <Cl_Rinse_Controller+0x314>)
   9fe70:	4798      	blx	r3
   9fe72:	4603      	mov	r3, r0
   9fe74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   9fe78:	f107 0138 	add.w	r1, r7, #56	; 0x38
   9fe7c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9fe80:	2202      	movs	r2, #2
   9fe82:	4618      	mov	r0, r3
   9fe84:	4b1b      	ldr	r3, [pc, #108]	; (9fef4 <Cl_Rinse_Controller+0x318>)
   9fe86:	4798      	blx	r3
   9fe88:	4603      	mov	r3, r0
   9fe8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								break;
   9fe8e:	e01b      	b.n	9fec8 <Cl_Rinse_Controller+0x2ec>
								case CON_RX_PARAM_DATA_DISINF_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   9fe90:	2316      	movs	r3, #22
   9fe92:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
								dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   9fe96:	2323      	movs	r3, #35	; 0x23
   9fe98:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   9fe9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
   9fea0:	3301      	adds	r3, #1
   9fea2:	4619      	mov	r1, r3
   9fea4:	2028      	movs	r0, #40	; 0x28
   9fea6:	4b12      	ldr	r3, [pc, #72]	; (9fef0 <Cl_Rinse_Controller+0x314>)
   9fea8:	4798      	blx	r3
   9feaa:	4603      	mov	r3, r0
   9feac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   9feb0:	f107 0138 	add.w	r1, r7, #56	; 0x38
   9feb4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9feb8:	2202      	movs	r2, #2
   9feba:	4618      	mov	r0, r3
   9febc:	4b0d      	ldr	r3, [pc, #52]	; (9fef4 <Cl_Rinse_Controller+0x318>)
   9febe:	4798      	blx	r3
   9fec0:	4603      	mov	r3, r0
   9fec2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								break;							
   9fec6:	bf00      	nop
								default:
								break;
							}
						}
				break;
   9fec8:	e077      	b.n	9ffba <Cl_Rinse_Controller+0x3de>
   9feca:	bf00      	nop
   9fecc:	000a1179 	.word	0x000a1179
   9fed0:	00082efd 	.word	0x00082efd
   9fed4:	00091eb5 	.word	0x00091eb5
   9fed8:	20072f98 	.word	0x20072f98
   9fedc:	200731a4 	.word	0x200731a4
   9fee0:	000925a9 	.word	0x000925a9
   9fee4:	2007286a 	.word	0x2007286a
   9fee8:	20073108 	.word	0x20073108
   9feec:	00082ff1 	.word	0x00082ff1
   9fef0:	00098239 	.word	0x00098239
   9fef4:	00099729 	.word	0x00099729
				case EVENT_START_RINSE:
					if(Cl_ConsoleRxMsg.msgready == true)
   9fef8:	4bb9      	ldr	r3, [pc, #740]	; (a01e0 <Cl_Rinse_Controller+0x604>)
   9fefa:	7e1b      	ldrb	r3, [r3, #24]
   9fefc:	2b00      	cmp	r3, #0
   9fefe:	d00e      	beq.n	9ff1e <Cl_Rinse_Controller+0x342>
					{
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9ff00:	4bb7      	ldr	r3, [pc, #732]	; (a01e0 <Cl_Rinse_Controller+0x604>)
   9ff02:	791b      	ldrb	r3, [r3, #4]
   9ff04:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
						if (cl_temp.bytearray[0] == 1)
   9ff08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   9ff0c:	2b01      	cmp	r3, #1
   9ff0e:	d006      	beq.n	9ff1e <Cl_Rinse_Controller+0x342>
						{
						
						}
						else if (cl_temp.bytearray[0] == 2)
   9ff10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   9ff14:	2b02      	cmp	r3, #2
   9ff16:	d102      	bne.n	9ff1e <Cl_Rinse_Controller+0x342>
						{
							hotrinse_flag = 1;
   9ff18:	4bb2      	ldr	r3, [pc, #712]	; (a01e4 <Cl_Rinse_Controller+0x608>)
   9ff1a:	2201      	movs	r2, #1
   9ff1c:	701a      	strb	r2, [r3, #0]
						}
					
					}
					if( CL_OK == Cl_Rinse_StartRinse())
   9ff1e:	4bb2      	ldr	r3, [pc, #712]	; (a01e8 <Cl_Rinse_Controller+0x60c>)
   9ff20:	4798      	blx	r3
   9ff22:	4603      	mov	r3, r0
   9ff24:	2b00      	cmp	r3, #0
   9ff26:	d12a      	bne.n	9ff7e <Cl_Rinse_Controller+0x3a2>
					{
											
						command = CON_TX_COMMAND_RINSE_CONFIRM;
   9ff28:	2308      	movs	r3, #8
   9ff2a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9ff2e:	2301      	movs	r3, #1
   9ff30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   9ff34:	f107 0137 	add.w	r1, r7, #55	; 0x37
   9ff38:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9ff3c:	2201      	movs	r2, #1
   9ff3e:	4618      	mov	r0, r3
   9ff40:	4baa      	ldr	r3, [pc, #680]	; (a01ec <Cl_Rinse_Controller+0x610>)
   9ff42:	4798      	blx	r3
   9ff44:	4603      	mov	r3, r0
   9ff46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						command = CON_TX_COMMAND_RINSE_STARTED;
   9ff4a:	2309      	movs	r3, #9
   9ff4c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   9ff50:	f107 0137 	add.w	r1, r7, #55	; 0x37
   9ff54:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9ff58:	2200      	movs	r2, #0
   9ff5a:	4618      	mov	r0, r3
   9ff5c:	4ba3      	ldr	r3, [pc, #652]	; (a01ec <Cl_Rinse_Controller+0x610>)
   9ff5e:	4798      	blx	r3
   9ff60:	4603      	mov	r3, r0
   9ff62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   9ff66:	4ba2      	ldr	r3, [pc, #648]	; (a01f0 <Cl_Rinse_Controller+0x614>)
   9ff68:	4798      	blx	r3
   9ff6a:	4603      	mov	r3, r0
   9ff6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   9ff70:	4ba0      	ldr	r3, [pc, #640]	; (a01f4 <Cl_Rinse_Controller+0x618>)
   9ff72:	2203      	movs	r2, #3
   9ff74:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9ff76:	4ba0      	ldr	r3, [pc, #640]	; (a01f8 <Cl_Rinse_Controller+0x61c>)
   9ff78:	2201      	movs	r2, #1
   9ff7a:	701a      	strb	r2, [r3, #0]
					}
					else
					{
						return CL_REJECTED;
					}
				break;
   9ff7c:	e01e      	b.n	9ffbc <Cl_Rinse_Controller+0x3e0>
						cl_rinsestate = CL_RINSE_STATE_RINSING;
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
					}
					else
					{
						return CL_REJECTED;
   9ff7e:	2303      	movs	r3, #3
   9ff80:	f001 b8ed 	b.w	a115e <Cl_Rinse_Controller+0x1582>
					}
				break;
				case EVENT_START_PRE_DISINF_RINSE:
					Cl_Rinse_StartRinse();
   9ff84:	4b98      	ldr	r3, [pc, #608]	; (a01e8 <Cl_Rinse_Controller+0x60c>)
   9ff86:	4798      	blx	r3
					
					cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   9ff88:	4b9a      	ldr	r3, [pc, #616]	; (a01f4 <Cl_Rinse_Controller+0x618>)
   9ff8a:	2204      	movs	r2, #4
   9ff8c:	701a      	strb	r2, [r3, #0]
					cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9ff8e:	4b9a      	ldr	r3, [pc, #616]	; (a01f8 <Cl_Rinse_Controller+0x61c>)
   9ff90:	2201      	movs	r2, #1
   9ff92:	701a      	strb	r2, [r3, #0]
				break;
   9ff94:	e012      	b.n	9ffbc <Cl_Rinse_Controller+0x3e0>
				case EVENT_START_POST_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   9ff96:	4b94      	ldr	r3, [pc, #592]	; (a01e8 <Cl_Rinse_Controller+0x60c>)
   9ff98:	4798      	blx	r3
						cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   9ff9a:	4b96      	ldr	r3, [pc, #600]	; (a01f4 <Cl_Rinse_Controller+0x618>)
   9ff9c:	2205      	movs	r2, #5
   9ff9e:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9ffa0:	4b95      	ldr	r3, [pc, #596]	; (a01f8 <Cl_Rinse_Controller+0x61c>)
   9ffa2:	2201      	movs	r2, #1
   9ffa4:	701a      	strb	r2, [r3, #0]
				break;
   9ffa6:	e009      	b.n	9ffbc <Cl_Rinse_Controller+0x3e0>
				case EVENT_RINSE_ALARM:
				// check for rinse alarms and update rinse alarm table
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   9ffa8:	4b94      	ldr	r3, [pc, #592]	; (a01fc <Cl_Rinse_Controller+0x620>)
   9ffaa:	4798      	blx	r3
   9ffac:	4603      	mov	r3, r0
   9ffae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   9ffb2:	e003      	b.n	9ffbc <Cl_Rinse_Controller+0x3e0>
				default:
				break;
   9ffb4:	bf00      	nop
   9ffb6:	f001 b8d0 	b.w	a115a <Cl_Rinse_Controller+0x157e>
								break;							
								default:
								break;
							}
						}
				break;
   9ffba:	bf00      	nop
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
				break;
				default:
				break;
			}                                 	
		break;
   9ffbc:	f001 b8cd 	b.w	a115a <Cl_Rinse_Controller+0x157e>
		
		case CL_RINSE_STATE_RINSING:
		case CL_RINSE_STATE_PRE_DISINFECT_RINSING:
		case CL_RINSE_STATE_POST_DISINFECT_RINSING:
				switch (cl_rinseevent)
   9ffc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   9ffc4:	3b06      	subs	r3, #6
   9ffc6:	2b21      	cmp	r3, #33	; 0x21
   9ffc8:	f201 80c6 	bhi.w	a1158 <Cl_Rinse_Controller+0x157c>
   9ffcc:	a201      	add	r2, pc, #4	; (adr r2, 9ffd4 <Cl_Rinse_Controller+0x3f8>)
   9ffce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9ffd2:	bf00      	nop
   9ffd4:	000a0731 	.word	0x000a0731
   9ffd8:	000a1159 	.word	0x000a1159
   9ffdc:	000a1159 	.word	0x000a1159
   9ffe0:	000a1159 	.word	0x000a1159
   9ffe4:	000a1159 	.word	0x000a1159
   9ffe8:	000a1159 	.word	0x000a1159
   9ffec:	000a1159 	.word	0x000a1159
   9fff0:	000a1159 	.word	0x000a1159
   9fff4:	000a1159 	.word	0x000a1159
   9fff8:	000a02a9 	.word	0x000a02a9
   9fffc:	000a1159 	.word	0x000a1159
   a0000:	000a02d1 	.word	0x000a02d1
   a0004:	000a0379 	.word	0x000a0379
   a0008:	000a0545 	.word	0x000a0545
   a000c:	000a071b 	.word	0x000a071b
   a0010:	000a0743 	.word	0x000a0743
   a0014:	000a0737 	.word	0x000a0737
   a0018:	000a01c5 	.word	0x000a01c5
   a001c:	000a005d 	.word	0x000a005d
   a0020:	000a07f9 	.word	0x000a07f9
   a0024:	000a0777 	.word	0x000a0777
   a0028:	000a0791 	.word	0x000a0791
   a002c:	000a086b 	.word	0x000a086b
   a0030:	000a0875 	.word	0x000a0875
   a0034:	000a087f 	.word	0x000a087f
   a0038:	000a07a1 	.word	0x000a07a1
   a003c:	000a07c5 	.word	0x000a07c5
   a0040:	000a07d9 	.word	0x000a07d9
   a0044:	000a07e9 	.word	0x000a07e9
   a0048:	000a1159 	.word	0x000a1159
   a004c:	000a1159 	.word	0x000a1159
   a0050:	000a1159 	.word	0x000a1159
   a0054:	000a1159 	.word	0x000a1159
   a0058:	000a08ad 	.word	0x000a08ad
				{
						case EVT_RINSE_SET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   a005c:	4b60      	ldr	r3, [pc, #384]	; (a01e0 <Cl_Rinse_Controller+0x604>)
   a005e:	7e1b      	ldrb	r3, [r3, #24]
   a0060:	2b00      	cmp	r3, #0
   a0062:	f000 8427 	beq.w	a08b4 <Cl_Rinse_Controller+0xcd8>
							{
										cl_Datastreamtype cl_temp  ;	
										cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   a0066:	4b5e      	ldr	r3, [pc, #376]	; (a01e0 <Cl_Rinse_Controller+0x604>)
   a0068:	795b      	ldrb	r3, [r3, #5]
   a006a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
										cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   a006e:	4b5c      	ldr	r3, [pc, #368]	; (a01e0 <Cl_Rinse_Controller+0x604>)
   a0070:	799b      	ldrb	r3, [r3, #6]
   a0072:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
										cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   a0076:	4b5a      	ldr	r3, [pc, #360]	; (a01e0 <Cl_Rinse_Controller+0x604>)
   a0078:	79db      	ldrb	r3, [r3, #7]
   a007a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   a007e:	4b58      	ldr	r3, [pc, #352]	; (a01e0 <Cl_Rinse_Controller+0x604>)
   a0080:	7a1b      	ldrb	r3, [r3, #8]
   a0082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
											
								switch(Cl_ConsoleRxMsg.data.byte[0])
   a0086:	4b56      	ldr	r3, [pc, #344]	; (a01e0 <Cl_Rinse_Controller+0x604>)
   a0088:	791b      	ldrb	r3, [r3, #4]
   a008a:	3b05      	subs	r3, #5
   a008c:	2b20      	cmp	r3, #32
   a008e:	f200 8097 	bhi.w	a01c0 <Cl_Rinse_Controller+0x5e4>
   a0092:	a201      	add	r2, pc, #4	; (adr r2, a0098 <Cl_Rinse_Controller+0x4bc>)
   a0094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a0098:	000a01c1 	.word	0x000a01c1
   a009c:	000a01c1 	.word	0x000a01c1
   a00a0:	000a01c1 	.word	0x000a01c1
   a00a4:	000a01c1 	.word	0x000a01c1
   a00a8:	000a01c1 	.word	0x000a01c1
   a00ac:	000a01c1 	.word	0x000a01c1
   a00b0:	000a01c1 	.word	0x000a01c1
   a00b4:	000a01c1 	.word	0x000a01c1
   a00b8:	000a01c1 	.word	0x000a01c1
   a00bc:	000a01c1 	.word	0x000a01c1
   a00c0:	000a01c1 	.word	0x000a01c1
   a00c4:	000a01c1 	.word	0x000a01c1
   a00c8:	000a01c1 	.word	0x000a01c1
   a00cc:	000a01c1 	.word	0x000a01c1
   a00d0:	000a01c1 	.word	0x000a01c1
   a00d4:	000a01c1 	.word	0x000a01c1
   a00d8:	000a01c1 	.word	0x000a01c1
   a00dc:	000a01c1 	.word	0x000a01c1
   a00e0:	000a01c1 	.word	0x000a01c1
   a00e4:	000a011d 	.word	0x000a011d
   a00e8:	000a0135 	.word	0x000a0135
   a00ec:	000a014d 	.word	0x000a014d
   a00f0:	000a015d 	.word	0x000a015d
   a00f4:	000a016d 	.word	0x000a016d
   a00f8:	000a017d 	.word	0x000a017d
   a00fc:	000a01c1 	.word	0x000a01c1
   a0100:	000a01c1 	.word	0x000a01c1
   a0104:	000a01c1 	.word	0x000a01c1
   a0108:	000a01c1 	.word	0x000a01c1
   a010c:	000a018d 	.word	0x000a018d
   a0110:	000a0197 	.word	0x000a0197
   a0114:	000a01a1 	.word	0x000a01a1
   a0118:	000a01b1 	.word	0x000a01b1
										case ID_bloodratereturn:
										break;
										case ID_bloodratetreat:
										break;
										case ID_tempulimit:
											Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   a011c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   a011e:	4a38      	ldr	r2, [pc, #224]	; (a0200 <Cl_Rinse_Controller+0x624>)
   a0120:	fba2 2303 	umull	r2, r3, r2, r3
   a0124:	08da      	lsrs	r2, r3, #3
   a0126:	4b37      	ldr	r3, [pc, #220]	; (a0204 <Cl_Rinse_Controller+0x628>)
   a0128:	4610      	mov	r0, r2
   a012a:	4798      	blx	r3
   a012c:	4602      	mov	r2, r0
   a012e:	4b36      	ldr	r3, [pc, #216]	; (a0208 <Cl_Rinse_Controller+0x62c>)
   a0130:	649a      	str	r2, [r3, #72]	; 0x48
										break;
   a0132:	e046      	b.n	a01c2 <Cl_Rinse_Controller+0x5e6>
										case ID_templlimit:
											Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   a0134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   a0136:	4a32      	ldr	r2, [pc, #200]	; (a0200 <Cl_Rinse_Controller+0x624>)
   a0138:	fba2 2303 	umull	r2, r3, r2, r3
   a013c:	08da      	lsrs	r2, r3, #3
   a013e:	4b31      	ldr	r3, [pc, #196]	; (a0204 <Cl_Rinse_Controller+0x628>)
   a0140:	4610      	mov	r0, r2
   a0142:	4798      	blx	r3
   a0144:	4602      	mov	r2, r0
   a0146:	4b30      	ldr	r3, [pc, #192]	; (a0208 <Cl_Rinse_Controller+0x62c>)
   a0148:	64da      	str	r2, [r3, #76]	; 0x4c
										break;
   a014a:	e03a      	b.n	a01c2 <Cl_Rinse_Controller+0x5e6>
										case ID_tmpllimit:
										Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   a014c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   a014e:	4b2d      	ldr	r3, [pc, #180]	; (a0204 <Cl_Rinse_Controller+0x628>)
   a0150:	4610      	mov	r0, r2
   a0152:	4798      	blx	r3
   a0154:	4602      	mov	r2, r0
   a0156:	4b2c      	ldr	r3, [pc, #176]	; (a0208 <Cl_Rinse_Controller+0x62c>)
   a0158:	635a      	str	r2, [r3, #52]	; 0x34
										break;
   a015a:	e032      	b.n	a01c2 <Cl_Rinse_Controller+0x5e6>
										case ID_tmpulimit:
										Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   a015c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   a015e:	4b29      	ldr	r3, [pc, #164]	; (a0204 <Cl_Rinse_Controller+0x628>)
   a0160:	4610      	mov	r0, r2
   a0162:	4798      	blx	r3
   a0164:	4602      	mov	r2, r0
   a0166:	4b28      	ldr	r3, [pc, #160]	; (a0208 <Cl_Rinse_Controller+0x62c>)
   a0168:	631a      	str	r2, [r3, #48]	; 0x30
										break;
   a016a:	e02a      	b.n	a01c2 <Cl_Rinse_Controller+0x5e6>
										case ID_vptllimit:
											Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   a016c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   a016e:	4b25      	ldr	r3, [pc, #148]	; (a0204 <Cl_Rinse_Controller+0x628>)
   a0170:	4610      	mov	r0, r2
   a0172:	4798      	blx	r3
   a0174:	4602      	mov	r2, r0
   a0176:	4b24      	ldr	r3, [pc, #144]	; (a0208 <Cl_Rinse_Controller+0x62c>)
   a0178:	615a      	str	r2, [r3, #20]
										break;
   a017a:	e022      	b.n	a01c2 <Cl_Rinse_Controller+0x5e6>
										case ID_vptulimit:
											Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   a017c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   a017e:	4b21      	ldr	r3, [pc, #132]	; (a0204 <Cl_Rinse_Controller+0x628>)
   a0180:	4610      	mov	r0, r2
   a0182:	4798      	blx	r3
   a0184:	4602      	mov	r2, r0
   a0186:	4b20      	ldr	r3, [pc, #128]	; (a0208 <Cl_Rinse_Controller+0x62c>)
   a0188:	611a      	str	r2, [r3, #16]
										break;
   a018a:	e01a      	b.n	a01c2 <Cl_Rinse_Controller+0x5e6>
										case ID_dflowllimit:
										break;
										case ID_dflowulimit:
										break;
										case ID_condllimit:
										Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   a018c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   a018e:	b21a      	sxth	r2, r3
   a0190:	4b1d      	ldr	r3, [pc, #116]	; (a0208 <Cl_Rinse_Controller+0x62c>)
   a0192:	801a      	strh	r2, [r3, #0]
										break;
   a0194:	e015      	b.n	a01c2 <Cl_Rinse_Controller+0x5e6>
										case ID_condulimit:
										Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   a0196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   a0198:	b21a      	sxth	r2, r3
   a019a:	4b1b      	ldr	r3, [pc, #108]	; (a0208 <Cl_Rinse_Controller+0x62c>)
   a019c:	805a      	strh	r2, [r3, #2]
										break;
   a019e:	e010      	b.n	a01c2 <Cl_Rinse_Controller+0x5e6>
										case ID_aptllimit:
											Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   a01a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   a01a2:	4b18      	ldr	r3, [pc, #96]	; (a0204 <Cl_Rinse_Controller+0x628>)
   a01a4:	4610      	mov	r0, r2
   a01a6:	4798      	blx	r3
   a01a8:	4602      	mov	r2, r0
   a01aa:	4b17      	ldr	r3, [pc, #92]	; (a0208 <Cl_Rinse_Controller+0x62c>)
   a01ac:	60da      	str	r2, [r3, #12]
										break;
   a01ae:	e008      	b.n	a01c2 <Cl_Rinse_Controller+0x5e6>
										case ID_aptulimit:
										Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   a01b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   a01b2:	4b14      	ldr	r3, [pc, #80]	; (a0204 <Cl_Rinse_Controller+0x628>)
   a01b4:	4610      	mov	r0, r2
   a01b6:	4798      	blx	r3
   a01b8:	4602      	mov	r2, r0
   a01ba:	4b13      	ldr	r3, [pc, #76]	; (a0208 <Cl_Rinse_Controller+0x62c>)
   a01bc:	609a      	str	r2, [r3, #8]
										break;
   a01be:	e000      	b.n	a01c2 <Cl_Rinse_Controller+0x5e6>

									default:break;
   a01c0:	bf00      	nop
								}
							}
						
						break;
   a01c2:	e377      	b.n	a08b4 <Cl_Rinse_Controller+0xcd8>
						case EVT_RINSE_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a01c4:	4b06      	ldr	r3, [pc, #24]	; (a01e0 <Cl_Rinse_Controller+0x604>)
   a01c6:	7e1b      	ldrb	r3, [r3, #24]
   a01c8:	2b00      	cmp	r3, #0
   a01ca:	f000 8376 	beq.w	a08ba <Cl_Rinse_Controller+0xcde>
								{
							
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a01ce:	4b04      	ldr	r3, [pc, #16]	; (a01e0 <Cl_Rinse_Controller+0x604>)
   a01d0:	791b      	ldrb	r3, [r3, #4]
   a01d2:	2b20      	cmp	r3, #32
   a01d4:	d036      	beq.n	a0244 <Cl_Rinse_Controller+0x668>
   a01d6:	2b21      	cmp	r3, #33	; 0x21
   a01d8:	d049      	beq.n	a026e <Cl_Rinse_Controller+0x692>
   a01da:	2b02      	cmp	r3, #2
   a01dc:	d016      	beq.n	a020c <Cl_Rinse_Controller+0x630>
										Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
										break;			
															
										default:
										break;
   a01de:	e062      	b.n	a02a6 <Cl_Rinse_Controller+0x6ca>
   a01e0:	20072f98 	.word	0x20072f98
   a01e4:	2007288d 	.word	0x2007288d
   a01e8:	000a2089 	.word	0x000a2089
   a01ec:	00099729 	.word	0x00099729
   a01f0:	000a14b1 	.word	0x000a14b1
   a01f4:	2007286a 	.word	0x2007286a
   a01f8:	2007286b 	.word	0x2007286b
   a01fc:	000a16fd 	.word	0x000a16fd
   a0200:	cccccccd 	.word	0xcccccccd
   a0204:	000a3d65 	.word	0x000a3d65
   a0208:	20072d08 	.word	0x20072d08
							
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{

										case CON_RX_PARAM_DATA_PRIME_STATUS:
										command = CON_TX_COMMAND_SYSDATA;
   a020c:	2316      	movs	r3, #22
   a020e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
										dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   a0212:	2302      	movs	r3, #2
   a0214:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
										Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   a0218:	f107 0338 	add.w	r3, r7, #56	; 0x38
   a021c:	3301      	adds	r3, #1
   a021e:	4619      	mov	r1, r3
   a0220:	2002      	movs	r0, #2
   a0222:	4b4a      	ldr	r3, [pc, #296]	; (a034c <Cl_Rinse_Controller+0x770>)
   a0224:	4798      	blx	r3
   a0226:	4603      	mov	r3, r0
   a0228:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a022c:	f107 0138 	add.w	r1, r7, #56	; 0x38
   a0230:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a0234:	2202      	movs	r2, #2
   a0236:	4618      	mov	r0, r3
   a0238:	4b45      	ldr	r3, [pc, #276]	; (a0350 <Cl_Rinse_Controller+0x774>)
   a023a:	4798      	blx	r3
   a023c:	4603      	mov	r3, r0
   a023e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
										break;
   a0242:	e030      	b.n	a02a6 <Cl_Rinse_Controller+0x6ca>

										case CON_RX_PARAM_DATA_RECIRC_STATUS:
										command = CON_TX_COMMAND_SYSDATA;
   a0244:	2316      	movs	r3, #22
   a0246:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
										dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   a024a:	2321      	movs	r3, #33	; 0x21
   a024c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
										//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
										dataarray[1] = 0;
   a0250:	2300      	movs	r3, #0
   a0252:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a0256:	f107 0138 	add.w	r1, r7, #56	; 0x38
   a025a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a025e:	2202      	movs	r2, #2
   a0260:	4618      	mov	r0, r3
   a0262:	4b3b      	ldr	r3, [pc, #236]	; (a0350 <Cl_Rinse_Controller+0x774>)
   a0264:	4798      	blx	r3
   a0266:	4603      	mov	r3, r0
   a0268:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
										break;		
   a026c:	e01b      	b.n	a02a6 <Cl_Rinse_Controller+0x6ca>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
										command = CON_TX_COMMAND_SYSDATA;
   a026e:	2316      	movs	r3, #22
   a0270:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
										dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   a0274:	2323      	movs	r3, #35	; 0x23
   a0276:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
										Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a027a:	f107 0338 	add.w	r3, r7, #56	; 0x38
   a027e:	3301      	adds	r3, #1
   a0280:	4619      	mov	r1, r3
   a0282:	2028      	movs	r0, #40	; 0x28
   a0284:	4b31      	ldr	r3, [pc, #196]	; (a034c <Cl_Rinse_Controller+0x770>)
   a0286:	4798      	blx	r3
   a0288:	4603      	mov	r3, r0
   a028a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   a028e:	f107 0138 	add.w	r1, r7, #56	; 0x38
   a0292:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a0296:	2202      	movs	r2, #2
   a0298:	4618      	mov	r0, r3
   a029a:	4b2d      	ldr	r3, [pc, #180]	; (a0350 <Cl_Rinse_Controller+0x774>)
   a029c:	4798      	blx	r3
   a029e:	4603      	mov	r3, r0
   a02a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
										break;			
   a02a4:	bf00      	nop
															
										default:
										break;
									}
								}
						break;
   a02a6:	e308      	b.n	a08ba <Cl_Rinse_Controller+0xcde>
						case EVENT_RINSE_TICK_50MS:
						if(cl_rinsing_substate == CL_RINSE_RINSING_BC_SWITCHING)
   a02a8:	4b2a      	ldr	r3, [pc, #168]	; (a0354 <Cl_Rinse_Controller+0x778>)
   a02aa:	781b      	ldrb	r3, [r3, #0]
   a02ac:	2b02      	cmp	r3, #2
   a02ae:	f040 8307 	bne.w	a08c0 <Cl_Rinse_Controller+0xce4>
						{
									cl_50ms_timer++;
   a02b2:	4b29      	ldr	r3, [pc, #164]	; (a0358 <Cl_Rinse_Controller+0x77c>)
   a02b4:	881b      	ldrh	r3, [r3, #0]
   a02b6:	3301      	adds	r3, #1
   a02b8:	b29a      	uxth	r2, r3
   a02ba:	4b27      	ldr	r3, [pc, #156]	; (a0358 <Cl_Rinse_Controller+0x77c>)
   a02bc:	801a      	strh	r2, [r3, #0]
									if(cl_50ms_timer == 2)
   a02be:	4b26      	ldr	r3, [pc, #152]	; (a0358 <Cl_Rinse_Controller+0x77c>)
   a02c0:	881b      	ldrh	r3, [r3, #0]
   a02c2:	2b02      	cmp	r3, #2
   a02c4:	f040 82fc 	bne.w	a08c0 <Cl_Rinse_Controller+0xce4>
									{
										cl_50ms_timer =0;
   a02c8:	4b23      	ldr	r3, [pc, #140]	; (a0358 <Cl_Rinse_Controller+0x77c>)
   a02ca:	2200      	movs	r2, #0
   a02cc:	801a      	strh	r2, [r3, #0]
									//	sv_cntrl_deactivate_valve(VALVE_ID19);
									}
						}
																	
						break;
   a02ce:	e2f7      	b.n	a08c0 <Cl_Rinse_Controller+0xce4>
						case EVENT_RINSE_TICK_500MS:
							if ((avgtemp2_dummy > 75) && (avgtemp2_dummy < 76))
   a02d0:	4b22      	ldr	r3, [pc, #136]	; (a035c <Cl_Rinse_Controller+0x780>)
   a02d2:	681a      	ldr	r2, [r3, #0]
   a02d4:	4b22      	ldr	r3, [pc, #136]	; (a0360 <Cl_Rinse_Controller+0x784>)
   a02d6:	4923      	ldr	r1, [pc, #140]	; (a0364 <Cl_Rinse_Controller+0x788>)
   a02d8:	4610      	mov	r0, r2
   a02da:	4798      	blx	r3
   a02dc:	4603      	mov	r3, r0
   a02de:	2b00      	cmp	r3, #0
   a02e0:	d00d      	beq.n	a02fe <Cl_Rinse_Controller+0x722>
   a02e2:	4b1e      	ldr	r3, [pc, #120]	; (a035c <Cl_Rinse_Controller+0x780>)
   a02e4:	681a      	ldr	r2, [r3, #0]
   a02e6:	4b20      	ldr	r3, [pc, #128]	; (a0368 <Cl_Rinse_Controller+0x78c>)
   a02e8:	4920      	ldr	r1, [pc, #128]	; (a036c <Cl_Rinse_Controller+0x790>)
   a02ea:	4610      	mov	r0, r2
   a02ec:	4798      	blx	r3
   a02ee:	4603      	mov	r3, r0
   a02f0:	2b00      	cmp	r3, #0
   a02f2:	d004      	beq.n	a02fe <Cl_Rinse_Controller+0x722>
							{
								sv_cntrl_decheater(2200);
   a02f4:	f640 0098 	movw	r0, #2200	; 0x898
   a02f8:	4b1d      	ldr	r3, [pc, #116]	; (a0370 <Cl_Rinse_Controller+0x794>)
   a02fa:	4798      	blx	r3
   a02fc:	e025      	b.n	a034a <Cl_Rinse_Controller+0x76e>
							}
							else if ((avgtemp2_dummy > 76) && (avgtemp2_dummy < 77))
   a02fe:	4b17      	ldr	r3, [pc, #92]	; (a035c <Cl_Rinse_Controller+0x780>)
   a0300:	681a      	ldr	r2, [r3, #0]
   a0302:	4b17      	ldr	r3, [pc, #92]	; (a0360 <Cl_Rinse_Controller+0x784>)
   a0304:	4919      	ldr	r1, [pc, #100]	; (a036c <Cl_Rinse_Controller+0x790>)
   a0306:	4610      	mov	r0, r2
   a0308:	4798      	blx	r3
   a030a:	4603      	mov	r3, r0
   a030c:	2b00      	cmp	r3, #0
   a030e:	d00d      	beq.n	a032c <Cl_Rinse_Controller+0x750>
   a0310:	4b12      	ldr	r3, [pc, #72]	; (a035c <Cl_Rinse_Controller+0x780>)
   a0312:	681a      	ldr	r2, [r3, #0]
   a0314:	4b14      	ldr	r3, [pc, #80]	; (a0368 <Cl_Rinse_Controller+0x78c>)
   a0316:	4917      	ldr	r1, [pc, #92]	; (a0374 <Cl_Rinse_Controller+0x798>)
   a0318:	4610      	mov	r0, r2
   a031a:	4798      	blx	r3
   a031c:	4603      	mov	r3, r0
   a031e:	2b00      	cmp	r3, #0
   a0320:	d004      	beq.n	a032c <Cl_Rinse_Controller+0x750>
							{
								sv_cntrl_decheater(2000);
   a0322:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   a0326:	4b12      	ldr	r3, [pc, #72]	; (a0370 <Cl_Rinse_Controller+0x794>)
   a0328:	4798      	blx	r3
   a032a:	e00e      	b.n	a034a <Cl_Rinse_Controller+0x76e>
							}
							else if (avgtemp2_dummy > 77)
   a032c:	4b0b      	ldr	r3, [pc, #44]	; (a035c <Cl_Rinse_Controller+0x780>)
   a032e:	681a      	ldr	r2, [r3, #0]
   a0330:	4b0b      	ldr	r3, [pc, #44]	; (a0360 <Cl_Rinse_Controller+0x784>)
   a0332:	4910      	ldr	r1, [pc, #64]	; (a0374 <Cl_Rinse_Controller+0x798>)
   a0334:	4610      	mov	r0, r2
   a0336:	4798      	blx	r3
   a0338:	4603      	mov	r3, r0
   a033a:	2b00      	cmp	r3, #0
   a033c:	d100      	bne.n	a0340 <Cl_Rinse_Controller+0x764>
							{
								sv_cntrl_decheater(1800);
							}
						//UpdateHeaterControls();
						break;
   a033e:	e2cf      	b.n	a08e0 <Cl_Rinse_Controller+0xd04>
							{
								sv_cntrl_decheater(2000);
							}
							else if (avgtemp2_dummy > 77)
							{
								sv_cntrl_decheater(1800);
   a0340:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   a0344:	4b0a      	ldr	r3, [pc, #40]	; (a0370 <Cl_Rinse_Controller+0x794>)
   a0346:	4798      	blx	r3
							}
						//UpdateHeaterControls();
						break;
   a0348:	e2ca      	b.n	a08e0 <Cl_Rinse_Controller+0xd04>
   a034a:	e2c9      	b.n	a08e0 <Cl_Rinse_Controller+0xd04>
   a034c:	00098239 	.word	0x00098239
   a0350:	00099729 	.word	0x00099729
   a0354:	2007286b 	.word	0x2007286b
   a0358:	2007288a 	.word	0x2007288a
   a035c:	20072604 	.word	0x20072604
   a0360:	000a418d 	.word	0x000a418d
   a0364:	42960000 	.word	0x42960000
   a0368:	000a4151 	.word	0x000a4151
   a036c:	42980000 	.word	0x42980000
   a0370:	00097ad5 	.word	0x00097ad5
   a0374:	429a0000 	.word	0x429a0000
						case EVENT_RINSE_TICK_SECOND:
						
						if(cl_rinsestate == CL_RINSE_STATE_RINSING)
   a0378:	4b8b      	ldr	r3, [pc, #556]	; (a05a8 <Cl_Rinse_Controller+0x9cc>)
   a037a:	781b      	ldrb	r3, [r3, #0]
   a037c:	2b03      	cmp	r3, #3
   a037e:	d101      	bne.n	a0384 <Cl_Rinse_Controller+0x7a8>
						{
							Cl_Rinse_SendRinseStateData();	
   a0380:	4b8a      	ldr	r3, [pc, #552]	; (a05ac <Cl_Rinse_Controller+0x9d0>)
   a0382:	4798      	blx	r3
						}
						
						

					//	UpdateHeaterControls();
						Cl_Rinsesecondscounter++;
   a0384:	4b8a      	ldr	r3, [pc, #552]	; (a05b0 <Cl_Rinse_Controller+0x9d4>)
   a0386:	681b      	ldr	r3, [r3, #0]
   a0388:	3301      	adds	r3, #1
   a038a:	4a89      	ldr	r2, [pc, #548]	; (a05b0 <Cl_Rinse_Controller+0x9d4>)
   a038c:	6013      	str	r3, [r2, #0]
						
						
						if(Cl_Rinsesecondscounter == 40){ // activate flow alarms only after 30 seconds into rinse
   a038e:	4b88      	ldr	r3, [pc, #544]	; (a05b0 <Cl_Rinse_Controller+0x9d4>)
   a0390:	681b      	ldr	r3, [r3, #0]
   a0392:	2b28      	cmp	r3, #40	; 0x28
   a0394:	d114      	bne.n	a03c0 <Cl_Rinse_Controller+0x7e4>
							
							
							Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   a0396:	2101      	movs	r1, #1
   a0398:	200c      	movs	r0, #12
   a039a:	4b86      	ldr	r3, [pc, #536]	; (a05b4 <Cl_Rinse_Controller+0x9d8>)
   a039c:	4798      	blx	r3
   a039e:	4603      	mov	r3, r0
   a03a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   a03a4:	2101      	movs	r1, #1
   a03a6:	200d      	movs	r0, #13
   a03a8:	4b82      	ldr	r3, [pc, #520]	; (a05b4 <Cl_Rinse_Controller+0x9d8>)
   a03aa:	4798      	blx	r3
   a03ac:	4603      	mov	r3, r0
   a03ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   a03b2:	2101      	movs	r1, #1
   a03b4:	200e      	movs	r0, #14
   a03b6:	4b7f      	ldr	r3, [pc, #508]	; (a05b4 <Cl_Rinse_Controller+0x9d8>)
   a03b8:	4798      	blx	r3
   a03ba:	4603      	mov	r3, r0
   a03bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							
							
						}
						
						if ((Cl_Rinsesecondscounter == 10) && (rinse1 == 1))
   a03c0:	4b7b      	ldr	r3, [pc, #492]	; (a05b0 <Cl_Rinse_Controller+0x9d4>)
   a03c2:	681b      	ldr	r3, [r3, #0]
   a03c4:	2b0a      	cmp	r3, #10
   a03c6:	d118      	bne.n	a03fa <Cl_Rinse_Controller+0x81e>
   a03c8:	4b7b      	ldr	r3, [pc, #492]	; (a05b8 <Cl_Rinse_Controller+0x9dc>)
   a03ca:	781b      	ldrb	r3, [r3, #0]
   a03cc:	b2db      	uxtb	r3, r3
   a03ce:	2b01      	cmp	r3, #1
   a03d0:	d113      	bne.n	a03fa <Cl_Rinse_Controller+0x81e>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE2",6);
   a03d2:	2206      	movs	r2, #6
   a03d4:	4979      	ldr	r1, [pc, #484]	; (a05bc <Cl_Rinse_Controller+0x9e0>)
   a03d6:	2018      	movs	r0, #24
   a03d8:	4b79      	ldr	r3, [pc, #484]	; (a05c0 <Cl_Rinse_Controller+0x9e4>)
   a03da:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID4);
   a03dc:	2004      	movs	r0, #4
   a03de:	4b79      	ldr	r3, [pc, #484]	; (a05c4 <Cl_Rinse_Controller+0x9e8>)
   a03e0:	4798      	blx	r3
							sv_cntrl_deactivatepump(DCMOTOR1);
   a03e2:	2001      	movs	r0, #1
   a03e4:	4b78      	ldr	r3, [pc, #480]	; (a05c8 <Cl_Rinse_Controller+0x9ec>)
   a03e6:	4798      	blx	r3
						//	sv_cntrl_deactivate_valve(VALVE_ID6);
						//	sv_cntrl_deactivate_valve(VALVE_ID8);
							sv_cntrl_activate_valve(VALVE_ID19);
   a03e8:	2013      	movs	r0, #19
   a03ea:	4b78      	ldr	r3, [pc, #480]	; (a05cc <Cl_Rinse_Controller+0x9f0>)
   a03ec:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID20);
   a03ee:	2014      	movs	r0, #20
   a03f0:	4b76      	ldr	r3, [pc, #472]	; (a05cc <Cl_Rinse_Controller+0x9f0>)
   a03f2:	4798      	blx	r3
							rinse2=1;
   a03f4:	4b76      	ldr	r3, [pc, #472]	; (a05d0 <Cl_Rinse_Controller+0x9f4>)
   a03f6:	2201      	movs	r2, #1
   a03f8:	701a      	strb	r2, [r3, #0]
						}
						if ((Cl_Rinsesecondscounter == 30) && (rinse1 == 1) && (rinse2== 1))
   a03fa:	4b6d      	ldr	r3, [pc, #436]	; (a05b0 <Cl_Rinse_Controller+0x9d4>)
   a03fc:	681b      	ldr	r3, [r3, #0]
   a03fe:	2b1e      	cmp	r3, #30
   a0400:	d129      	bne.n	a0456 <Cl_Rinse_Controller+0x87a>
   a0402:	4b6d      	ldr	r3, [pc, #436]	; (a05b8 <Cl_Rinse_Controller+0x9dc>)
   a0404:	781b      	ldrb	r3, [r3, #0]
   a0406:	b2db      	uxtb	r3, r3
   a0408:	2b01      	cmp	r3, #1
   a040a:	d124      	bne.n	a0456 <Cl_Rinse_Controller+0x87a>
   a040c:	4b70      	ldr	r3, [pc, #448]	; (a05d0 <Cl_Rinse_Controller+0x9f4>)
   a040e:	781b      	ldrb	r3, [r3, #0]
   a0410:	b2db      	uxtb	r3, r3
   a0412:	2b01      	cmp	r3, #1
   a0414:	d11f      	bne.n	a0456 <Cl_Rinse_Controller+0x87a>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE3",6);
   a0416:	2206      	movs	r2, #6
   a0418:	496e      	ldr	r1, [pc, #440]	; (a05d4 <Cl_Rinse_Controller+0x9f8>)
   a041a:	2018      	movs	r0, #24
   a041c:	4b68      	ldr	r3, [pc, #416]	; (a05c0 <Cl_Rinse_Controller+0x9e4>)
   a041e:	4798      	blx	r3
							sv_cntrl_deactivatepump(DCMOTOR2);
   a0420:	2002      	movs	r0, #2
   a0422:	4b69      	ldr	r3, [pc, #420]	; (a05c8 <Cl_Rinse_Controller+0x9ec>)
   a0424:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID19);
   a0426:	2013      	movs	r0, #19
   a0428:	4b66      	ldr	r3, [pc, #408]	; (a05c4 <Cl_Rinse_Controller+0x9e8>)
   a042a:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID20);
   a042c:	2014      	movs	r0, #20
   a042e:	4b65      	ldr	r3, [pc, #404]	; (a05c4 <Cl_Rinse_Controller+0x9e8>)
   a0430:	4798      	blx	r3
							sv_cntrl_activatepump(DCMOTOR1);
   a0432:	2001      	movs	r0, #1
   a0434:	4b68      	ldr	r3, [pc, #416]	; (a05d8 <Cl_Rinse_Controller+0x9fc>)
   a0436:	4798      	blx	r3
							sv_cntrl_activatepump(DCMOTOR2);
   a0438:	2002      	movs	r0, #2
   a043a:	4b67      	ldr	r3, [pc, #412]	; (a05d8 <Cl_Rinse_Controller+0x9fc>)
   a043c:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID6);
   a043e:	2006      	movs	r0, #6
   a0440:	4b62      	ldr	r3, [pc, #392]	; (a05cc <Cl_Rinse_Controller+0x9f0>)
   a0442:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID8);
   a0444:	2008      	movs	r0, #8
   a0446:	4b61      	ldr	r3, [pc, #388]	; (a05cc <Cl_Rinse_Controller+0x9f0>)
   a0448:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID17);
   a044a:	2011      	movs	r0, #17
   a044c:	4b5f      	ldr	r3, [pc, #380]	; (a05cc <Cl_Rinse_Controller+0x9f0>)
   a044e:	4798      	blx	r3
							rinse3=1;
   a0450:	4b62      	ldr	r3, [pc, #392]	; (a05dc <Cl_Rinse_Controller+0xa00>)
   a0452:	2201      	movs	r2, #1
   a0454:	701a      	strb	r2, [r3, #0]
						}
						if ((Cl_Rinsesecondscounter == 55) && (rinse1 == 1) && (rinse2 == 1)&& (rinse3 == 1))
   a0456:	4b56      	ldr	r3, [pc, #344]	; (a05b0 <Cl_Rinse_Controller+0x9d4>)
   a0458:	681b      	ldr	r3, [r3, #0]
   a045a:	2b37      	cmp	r3, #55	; 0x37
   a045c:	d11c      	bne.n	a0498 <Cl_Rinse_Controller+0x8bc>
   a045e:	4b56      	ldr	r3, [pc, #344]	; (a05b8 <Cl_Rinse_Controller+0x9dc>)
   a0460:	781b      	ldrb	r3, [r3, #0]
   a0462:	b2db      	uxtb	r3, r3
   a0464:	2b01      	cmp	r3, #1
   a0466:	d117      	bne.n	a0498 <Cl_Rinse_Controller+0x8bc>
   a0468:	4b59      	ldr	r3, [pc, #356]	; (a05d0 <Cl_Rinse_Controller+0x9f4>)
   a046a:	781b      	ldrb	r3, [r3, #0]
   a046c:	b2db      	uxtb	r3, r3
   a046e:	2b01      	cmp	r3, #1
   a0470:	d112      	bne.n	a0498 <Cl_Rinse_Controller+0x8bc>
   a0472:	4b5a      	ldr	r3, [pc, #360]	; (a05dc <Cl_Rinse_Controller+0xa00>)
   a0474:	781b      	ldrb	r3, [r3, #0]
   a0476:	b2db      	uxtb	r3, r3
   a0478:	2b01      	cmp	r3, #1
   a047a:	d10d      	bne.n	a0498 <Cl_Rinse_Controller+0x8bc>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE4",6);
   a047c:	2206      	movs	r2, #6
   a047e:	4958      	ldr	r1, [pc, #352]	; (a05e0 <Cl_Rinse_Controller+0xa04>)
   a0480:	2018      	movs	r0, #24
   a0482:	4b4f      	ldr	r3, [pc, #316]	; (a05c0 <Cl_Rinse_Controller+0x9e4>)
   a0484:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID4);
   a0486:	2004      	movs	r0, #4
   a0488:	4b50      	ldr	r3, [pc, #320]	; (a05cc <Cl_Rinse_Controller+0x9f0>)
   a048a:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID17);
   a048c:	2011      	movs	r0, #17
   a048e:	4b4d      	ldr	r3, [pc, #308]	; (a05c4 <Cl_Rinse_Controller+0x9e8>)
   a0490:	4798      	blx	r3
							rinse4=1;
   a0492:	4b54      	ldr	r3, [pc, #336]	; (a05e4 <Cl_Rinse_Controller+0xa08>)
   a0494:	2201      	movs	r2, #1
   a0496:	701a      	strb	r2, [r3, #0]
						}
						if(Cl_Rinsesecondscounter == 60)
   a0498:	4b45      	ldr	r3, [pc, #276]	; (a05b0 <Cl_Rinse_Controller+0x9d4>)
   a049a:	681b      	ldr	r3, [r3, #0]
   a049c:	2b3c      	cmp	r3, #60	; 0x3c
   a049e:	f040 8212 	bne.w	a08c6 <Cl_Rinse_Controller+0xcea>
						{
								cl_uf_controller(CL_UF_EVENT_STOP,0);
   a04a2:	2100      	movs	r1, #0
   a04a4:	2004      	movs	r0, #4
   a04a6:	4b50      	ldr	r3, [pc, #320]	; (a05e8 <Cl_Rinse_Controller+0xa0c>)
   a04a8:	4798      	blx	r3
											
							Cl_Rinsesecondscounter = 0;
   a04aa:	4b41      	ldr	r3, [pc, #260]	; (a05b0 <Cl_Rinse_Controller+0x9d4>)
   a04ac:	2200      	movs	r2, #0
   a04ae:	601a      	str	r2, [r3, #0]
							Cl_RinseMinutescounter++;
   a04b0:	4b4e      	ldr	r3, [pc, #312]	; (a05ec <Cl_Rinse_Controller+0xa10>)
   a04b2:	681b      	ldr	r3, [r3, #0]
   a04b4:	3301      	adds	r3, #1
   a04b6:	4a4d      	ldr	r2, [pc, #308]	; (a05ec <Cl_Rinse_Controller+0xa10>)
   a04b8:	6013      	str	r3, [r2, #0]
							if (Cl_RinseMinutescounter == 1)
   a04ba:	4b4c      	ldr	r3, [pc, #304]	; (a05ec <Cl_Rinse_Controller+0xa10>)
   a04bc:	681b      	ldr	r3, [r3, #0]
   a04be:	2b01      	cmp	r3, #1
   a04c0:	d10d      	bne.n	a04de <Cl_Rinse_Controller+0x902>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE1",6);
   a04c2:	2206      	movs	r2, #6
   a04c4:	494a      	ldr	r1, [pc, #296]	; (a05f0 <Cl_Rinse_Controller+0xa14>)
   a04c6:	2018      	movs	r0, #24
   a04c8:	4b3d      	ldr	r3, [pc, #244]	; (a05c0 <Cl_Rinse_Controller+0x9e4>)
   a04ca:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID4);
   a04cc:	2004      	movs	r0, #4
   a04ce:	4b3f      	ldr	r3, [pc, #252]	; (a05cc <Cl_Rinse_Controller+0x9f0>)
   a04d0:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID17);
   a04d2:	2011      	movs	r0, #17
   a04d4:	4b3b      	ldr	r3, [pc, #236]	; (a05c4 <Cl_Rinse_Controller+0x9e8>)
   a04d6:	4798      	blx	r3
								rinse1=1;
   a04d8:	4b37      	ldr	r3, [pc, #220]	; (a05b8 <Cl_Rinse_Controller+0x9dc>)
   a04da:	2201      	movs	r2, #1
   a04dc:	701a      	strb	r2, [r3, #0]
							}
							if (Cl_RinseMinutescounter == 2)
   a04de:	4b43      	ldr	r3, [pc, #268]	; (a05ec <Cl_Rinse_Controller+0xa10>)
   a04e0:	681b      	ldr	r3, [r3, #0]
   a04e2:	2b02      	cmp	r3, #2
   a04e4:	d11e      	bne.n	a0524 <Cl_Rinse_Controller+0x948>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DONE",6);
   a04e6:	2206      	movs	r2, #6
   a04e8:	4942      	ldr	r1, [pc, #264]	; (a05f4 <Cl_Rinse_Controller+0xa18>)
   a04ea:	2018      	movs	r0, #24
   a04ec:	4b34      	ldr	r3, [pc, #208]	; (a05c0 <Cl_Rinse_Controller+0x9e4>)
   a04ee:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID4);
   a04f0:	2004      	movs	r0, #4
   a04f2:	4b34      	ldr	r3, [pc, #208]	; (a05c4 <Cl_Rinse_Controller+0x9e8>)
   a04f4:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID17);
   a04f6:	2011      	movs	r0, #17
   a04f8:	4b34      	ldr	r3, [pc, #208]	; (a05cc <Cl_Rinse_Controller+0x9f0>)
   a04fa:	4798      	blx	r3
								sv_prop_stopopenfill();
   a04fc:	4b3e      	ldr	r3, [pc, #248]	; (a05f8 <Cl_Rinse_Controller+0xa1c>)
   a04fe:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID2);
   a0500:	2002      	movs	r0, #2
   a0502:	4b30      	ldr	r3, [pc, #192]	; (a05c4 <Cl_Rinse_Controller+0x9e8>)
   a0504:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID3);
   a0506:	2003      	movs	r0, #3
   a0508:	4b2e      	ldr	r3, [pc, #184]	; (a05c4 <Cl_Rinse_Controller+0x9e8>)
   a050a:	4798      	blx	r3
								
								rinse1=0;
   a050c:	4b2a      	ldr	r3, [pc, #168]	; (a05b8 <Cl_Rinse_Controller+0x9dc>)
   a050e:	2200      	movs	r2, #0
   a0510:	701a      	strb	r2, [r3, #0]
								rinse2=0;
   a0512:	4b2f      	ldr	r3, [pc, #188]	; (a05d0 <Cl_Rinse_Controller+0x9f4>)
   a0514:	2200      	movs	r2, #0
   a0516:	701a      	strb	r2, [r3, #0]
								rinse3=0;
   a0518:	4b30      	ldr	r3, [pc, #192]	; (a05dc <Cl_Rinse_Controller+0xa00>)
   a051a:	2200      	movs	r2, #0
   a051c:	701a      	strb	r2, [r3, #0]
								rinse4=0;
   a051e:	4b31      	ldr	r3, [pc, #196]	; (a05e4 <Cl_Rinse_Controller+0xa08>)
   a0520:	2200      	movs	r2, #0
   a0522:	701a      	strb	r2, [r3, #0]
							}
							
							Cl_RinseTotalMinutescounter++;
   a0524:	4b35      	ldr	r3, [pc, #212]	; (a05fc <Cl_Rinse_Controller+0xa20>)
   a0526:	681b      	ldr	r3, [r3, #0]
   a0528:	3301      	adds	r3, #1
   a052a:	4a34      	ldr	r2, [pc, #208]	; (a05fc <Cl_Rinse_Controller+0xa20>)
   a052c:	6013      	str	r3, [r2, #0]
							if(cl_rinsestate == CL_RINSE_STATE_RINSING)
   a052e:	4b1e      	ldr	r3, [pc, #120]	; (a05a8 <Cl_Rinse_Controller+0x9cc>)
   a0530:	781b      	ldrb	r3, [r3, #0]
   a0532:	2b03      	cmp	r3, #3
   a0534:	f040 81c7 	bne.w	a08c6 <Cl_Rinse_Controller+0xcea>
							{
								Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a0538:	4b31      	ldr	r3, [pc, #196]	; (a0600 <Cl_Rinse_Controller+0xa24>)
   a053a:	4798      	blx	r3
   a053c:	4603      	mov	r3, r0
   a053e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	
						}
						//	Cl_Rinse_ResetAlertsforReassertion();
							//Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					
						break;
   a0542:	e1c0      	b.n	a08c6 <Cl_Rinse_Controller+0xcea>
						case EVENT_RINSE_TICK_MINUTE:
						//	Cl_Rinsesecondscounter = 0;
							minute++;
   a0544:	4b2f      	ldr	r3, [pc, #188]	; (a0604 <Cl_Rinse_Controller+0xa28>)
   a0546:	781b      	ldrb	r3, [r3, #0]
   a0548:	b2db      	uxtb	r3, r3
   a054a:	3301      	adds	r3, #1
   a054c:	b2da      	uxtb	r2, r3
   a054e:	4b2d      	ldr	r3, [pc, #180]	; (a0604 <Cl_Rinse_Controller+0xa28>)
   a0550:	701a      	strb	r2, [r3, #0]
							if (minute > 30)
   a0552:	4b2c      	ldr	r3, [pc, #176]	; (a0604 <Cl_Rinse_Controller+0xa28>)
   a0554:	781b      	ldrb	r3, [r3, #0]
   a0556:	b2db      	uxtb	r3, r3
   a0558:	2b1e      	cmp	r3, #30
   a055a:	d905      	bls.n	a0568 <Cl_Rinse_Controller+0x98c>
							{
								sv_cntrl_poweroffheater();
   a055c:	4b2a      	ldr	r3, [pc, #168]	; (a0608 <Cl_Rinse_Controller+0xa2c>)
   a055e:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   a0560:	4b2a      	ldr	r3, [pc, #168]	; (a060c <Cl_Rinse_Controller+0xa30>)
   a0562:	4798      	blx	r3
								sv_cntrl_enable_bypass();
   a0564:	4b2a      	ldr	r3, [pc, #168]	; (a0610 <Cl_Rinse_Controller+0xa34>)
   a0566:	4798      	blx	r3
							}
						//	Cl_RinseTotalMinutescounter++;
							Cl_Rinse_ResetAlertsforReassertion();
   a0568:	4b2a      	ldr	r3, [pc, #168]	; (a0614 <Cl_Rinse_Controller+0xa38>)
   a056a:	4798      	blx	r3
														
							if(Cl_Rinse_CheckforRinseCompletion() == CL_OK)
   a056c:	4b2a      	ldr	r3, [pc, #168]	; (a0618 <Cl_Rinse_Controller+0xa3c>)
   a056e:	4798      	blx	r3
   a0570:	4603      	mov	r3, r0
   a0572:	2b00      	cmp	r3, #0
   a0574:	f040 81aa 	bne.w	a08cc <Cl_Rinse_Controller+0xcf0>
							{
								sv_cntrl_setgreenalarm();
   a0578:	4b28      	ldr	r3, [pc, #160]	; (a061c <Cl_Rinse_Controller+0xa40>)
   a057a:	4798      	blx	r3
								//Cl_rinseretcode = sv_cntrl_poweroffheater();
// 								sv_cntrl_activatepump(DCMOTOR1 );
// 								sv_cntrl_activatepump(DCMOTOR2 );
								sv_cntrl_deactivatepump(DCMOTOR1 );
   a057c:	2001      	movs	r0, #1
   a057e:	4b12      	ldr	r3, [pc, #72]	; (a05c8 <Cl_Rinse_Controller+0x9ec>)
   a0580:	4798      	blx	r3
								sv_cntrl_deactivatepump(DCMOTOR2 );
   a0582:	2002      	movs	r0, #2
   a0584:	4b10      	ldr	r3, [pc, #64]	; (a05c8 <Cl_Rinse_Controller+0x9ec>)
   a0586:	4798      	blx	r3
								Cl_rinseretcode = cl_rinse_notifydacandgotorinsestandby();
   a0588:	4b25      	ldr	r3, [pc, #148]	; (a0620 <Cl_Rinse_Controller+0xa44>)
   a058a:	4798      	blx	r3
   a058c:	4603      	mov	r3, r0
   a058e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

								if(cl_rinsestate == CL_RINSE_STATE_PRE_DISINFECT_RINSING)
   a0592:	4b05      	ldr	r3, [pc, #20]	; (a05a8 <Cl_Rinse_Controller+0x9cc>)
   a0594:	781b      	ldrb	r3, [r3, #0]
   a0596:	2b04      	cmp	r3, #4
   a0598:	d146      	bne.n	a0628 <Cl_Rinse_Controller+0xa4c>
								{
									Cl_rinseretcode = Cl_mac_apprequesthandler(MACREQ_PRE_DISINFECT_RINSE_COMPLETED);
   a059a:	2052      	movs	r0, #82	; 0x52
   a059c:	4b21      	ldr	r3, [pc, #132]	; (a0624 <Cl_Rinse_Controller+0xa48>)
   a059e:	4798      	blx	r3
   a05a0:	4603      	mov	r3, r0
   a05a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   a05a6:	e049      	b.n	a063c <Cl_Rinse_Controller+0xa60>
   a05a8:	2007286a 	.word	0x2007286a
   a05ac:	000a1c19 	.word	0x000a1c19
   a05b0:	2007286c 	.word	0x2007286c
   a05b4:	00082efd 	.word	0x00082efd
   a05b8:	20072866 	.word	0x20072866
   a05bc:	000a62e0 	.word	0x000a62e0
   a05c0:	00099729 	.word	0x00099729
   a05c4:	000979cd 	.word	0x000979cd
   a05c8:	00097949 	.word	0x00097949
   a05cc:	000979ad 	.word	0x000979ad
   a05d0:	20072867 	.word	0x20072867
   a05d4:	000a62e8 	.word	0x000a62e8
   a05d8:	0009790d 	.word	0x0009790d
   a05dc:	20072868 	.word	0x20072868
   a05e0:	000a62f0 	.word	0x000a62f0
   a05e4:	20072869 	.word	0x20072869
   a05e8:	00093cd9 	.word	0x00093cd9
   a05ec:	20072870 	.word	0x20072870
   a05f0:	000a62f8 	.word	0x000a62f8
   a05f4:	000a6300 	.word	0x000a6300
   a05f8:	00097e2d 	.word	0x00097e2d
   a05fc:	2007287c 	.word	0x2007287c
   a0600:	000a14b1 	.word	0x000a14b1
   a0604:	2007288e 	.word	0x2007288e
   a0608:	00097999 	.word	0x00097999
   a060c:	00097b3d 	.word	0x00097b3d
   a0610:	00097b59 	.word	0x00097b59
   a0614:	000a1725 	.word	0x000a1725
   a0618:	000a14fd 	.word	0x000a14fd
   a061c:	00097c2d 	.word	0x00097c2d
   a0620:	000a157d 	.word	0x000a157d
   a0624:	0008a611 	.word	0x0008a611
								}
								else if(cl_rinsestate == CL_RINSE_STATE_POST_DISINFECT_RINSING)
   a0628:	4bae      	ldr	r3, [pc, #696]	; (a08e4 <Cl_Rinse_Controller+0xd08>)
   a062a:	781b      	ldrb	r3, [r3, #0]
   a062c:	2b05      	cmp	r3, #5
   a062e:	d105      	bne.n	a063c <Cl_Rinse_Controller+0xa60>
								{
									Cl_rinseretcode = Cl_mac_apprequesthandler(MACREQ_POST_DISINFECT_RINSE_COMPLETED);
   a0630:	2053      	movs	r0, #83	; 0x53
   a0632:	4bad      	ldr	r3, [pc, #692]	; (a08e8 <Cl_Rinse_Controller+0xd0c>)
   a0634:	4798      	blx	r3
   a0636:	4603      	mov	r3, r0
   a0638:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								}
								
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a063c:	2100      	movs	r1, #0
   a063e:	200c      	movs	r0, #12
   a0640:	4baa      	ldr	r3, [pc, #680]	; (a08ec <Cl_Rinse_Controller+0xd10>)
   a0642:	4798      	blx	r3
   a0644:	4603      	mov	r3, r0
   a0646:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a064a:	2100      	movs	r1, #0
   a064c:	200d      	movs	r0, #13
   a064e:	4ba7      	ldr	r3, [pc, #668]	; (a08ec <Cl_Rinse_Controller+0xd10>)
   a0650:	4798      	blx	r3
   a0652:	4603      	mov	r3, r0
   a0654:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a0658:	2100      	movs	r1, #0
   a065a:	200e      	movs	r0, #14
   a065c:	4ba3      	ldr	r3, [pc, #652]	; (a08ec <Cl_Rinse_Controller+0xd10>)
   a065e:	4798      	blx	r3
   a0660:	4603      	mov	r3, r0
   a0662:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a0666:	2100      	movs	r1, #0
   a0668:	2029      	movs	r0, #41	; 0x29
   a066a:	4ba0      	ldr	r3, [pc, #640]	; (a08ec <Cl_Rinse_Controller+0xd10>)
   a066c:	4798      	blx	r3
   a066e:	4603      	mov	r3, r0
   a0670:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a0674:	2100      	movs	r1, #0
   a0676:	202b      	movs	r0, #43	; 0x2b
   a0678:	4b9c      	ldr	r3, [pc, #624]	; (a08ec <Cl_Rinse_Controller+0xd10>)
   a067a:	4798      	blx	r3
   a067c:	4603      	mov	r3, r0
   a067e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a0682:	2100      	movs	r1, #0
   a0684:	2003      	movs	r0, #3
   a0686:	4b99      	ldr	r3, [pc, #612]	; (a08ec <Cl_Rinse_Controller+0xd10>)
   a0688:	4798      	blx	r3
   a068a:	4603      	mov	r3, r0
   a068c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a0690:	2100      	movs	r1, #0
   a0692:	2004      	movs	r0, #4
   a0694:	4b95      	ldr	r3, [pc, #596]	; (a08ec <Cl_Rinse_Controller+0xd10>)
   a0696:	4798      	blx	r3
   a0698:	4603      	mov	r3, r0
   a069a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   a069e:	4b91      	ldr	r3, [pc, #580]	; (a08e4 <Cl_Rinse_Controller+0xd08>)
   a06a0:	2209      	movs	r2, #9
   a06a2:	701a      	strb	r2, [r3, #0]
								
								Cl_Uint16Type sensordata;
								Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &sensordata);
   a06a4:	f107 0322 	add.w	r3, r7, #34	; 0x22
   a06a8:	4619      	mov	r1, r3
   a06aa:	2012      	movs	r0, #18
   a06ac:	4b90      	ldr	r3, [pc, #576]	; (a08f0 <Cl_Rinse_Controller+0xd14>)
   a06ae:	4798      	blx	r3
												uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
   a06b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   a06b2:	461a      	mov	r2, r3
   a06b4:	f649 5308 	movw	r3, #40200	; 0x9d08
   a06b8:	fb03 f302 	mul.w	r3, r3, r2
   a06bc:	2b00      	cmp	r3, #0
   a06be:	da02      	bge.n	a06c6 <Cl_Rinse_Controller+0xaea>
   a06c0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   a06c4:	33ff      	adds	r3, #255	; 0xff
   a06c6:	141b      	asrs	r3, r3, #16
   a06c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
												res_temp_lookuptable(cal_data);
   a06cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   a06d0:	4618      	mov	r0, r3
   a06d2:	4b88      	ldr	r3, [pc, #544]	; (a08f4 <Cl_Rinse_Controller+0xd18>)
   a06d4:	4798      	blx	r3
												 uint16_t temp = res_temp_value /10;
   a06d6:	4b88      	ldr	r3, [pc, #544]	; (a08f8 <Cl_Rinse_Controller+0xd1c>)
   a06d8:	681a      	ldr	r2, [r3, #0]
   a06da:	4b88      	ldr	r3, [pc, #544]	; (a08fc <Cl_Rinse_Controller+0xd20>)
   a06dc:	4988      	ldr	r1, [pc, #544]	; (a0900 <Cl_Rinse_Controller+0xd24>)
   a06de:	4610      	mov	r0, r2
   a06e0:	4798      	blx	r3
   a06e2:	4603      	mov	r3, r0
   a06e4:	461a      	mov	r2, r3
   a06e6:	4b87      	ldr	r3, [pc, #540]	; (a0904 <Cl_Rinse_Controller+0xd28>)
   a06e8:	4610      	mov	r0, r2
   a06ea:	4798      	blx	r3
   a06ec:	4603      	mov	r3, r0
   a06ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
												
												temp = temp - 25 +12;
   a06f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
   a06f6:	3b0d      	subs	r3, #13
   a06f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
												
										cl_Datastreamtype  cl_tdata;
										cl_tdata.word = 0;
   a06fc:	2300      	movs	r3, #0
   a06fe:	61fb      	str	r3, [r7, #28]
										cl_tdata.Twobyte = temp;
   a0700:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
   a0704:	83bb      	strh	r3, [r7, #28]
										cl_tdata.bytearray[2] = 11;
   a0706:	230b      	movs	r3, #11
   a0708:	77bb      	strb	r3, [r7, #30]
										Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   a070a:	f107 031c 	add.w	r3, r7, #28
   a070e:	2204      	movs	r2, #4
   a0710:	4619      	mov	r1, r3
   a0712:	2037      	movs	r0, #55	; 0x37
   a0714:	4b7c      	ldr	r3, [pc, #496]	; (a0908 <Cl_Rinse_Controller+0xd2c>)
   a0716:	4798      	blx	r3
								//	Cl_rinseretcode = (Cl_ReturnCodeType)sv_setflowpath(Default path ?);//set appropirate flow path configuration
	
							}
						break;
   a0718:	e0d8      	b.n	a08cc <Cl_Rinse_Controller+0xcf0>
						case EVENT_RINSE_TICK_HOUR:
							Cl_Rinseshourscounter++;
   a071a:	4b7c      	ldr	r3, [pc, #496]	; (a090c <Cl_Rinse_Controller+0xd30>)
   a071c:	681b      	ldr	r3, [r3, #0]
   a071e:	3301      	adds	r3, #1
   a0720:	4a7a      	ldr	r2, [pc, #488]	; (a090c <Cl_Rinse_Controller+0xd30>)
   a0722:	6013      	str	r3, [r2, #0]
							Cl_RinsesTotalhourscounter++;
   a0724:	4b7a      	ldr	r3, [pc, #488]	; (a0910 <Cl_Rinse_Controller+0xd34>)
   a0726:	681b      	ldr	r3, [r3, #0]
   a0728:	3301      	adds	r3, #1
   a072a:	4a79      	ldr	r2, [pc, #484]	; (a0910 <Cl_Rinse_Controller+0xd34>)
   a072c:	6013      	str	r3, [r2, #0]
						break;
   a072e:	e0d7      	b.n	a08e0 <Cl_Rinse_Controller+0xd04>
						case EVENT_STOP_RINSE:
							Cl_Rinse_StopRinse();
   a0730:	4b78      	ldr	r3, [pc, #480]	; (a0914 <Cl_Rinse_Controller+0xd38>)
   a0732:	4798      	blx	r3
						break;
   a0734:	e0d4      	b.n	a08e0 <Cl_Rinse_Controller+0xd04>
						break;
						case EVENT_RINSE_ALARM:
							Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a0736:	4b78      	ldr	r3, [pc, #480]	; (a0918 <Cl_Rinse_Controller+0xd3c>)
   a0738:	4798      	blx	r3
   a073a:	4603      	mov	r3, r0
   a073c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   a0740:	e0ce      	b.n	a08e0 <Cl_Rinse_Controller+0xd04>
						case EVENT_RINSE_ALERT:
							Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   a0742:	f107 0336 	add.w	r3, r7, #54	; 0x36
   a0746:	4619      	mov	r1, r3
   a0748:	203c      	movs	r0, #60	; 0x3c
   a074a:	4b74      	ldr	r3, [pc, #464]	; (a091c <Cl_Rinse_Controller+0xd40>)
   a074c:	4798      	blx	r3
							if(alarmstatus1)
   a074e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
   a0752:	2b00      	cmp	r3, #0
   a0754:	d002      	beq.n	a075c <Cl_Rinse_Controller+0xb80>
							{
							//	Cl_rinseretcode = Cl_bc_controller(BC_EVENT_CS);
							//	sv_cntrl_activate_valve(VALVE_ID19);
								cl_50ms_timer  = 1;
   a0756:	4b72      	ldr	r3, [pc, #456]	; (a0920 <Cl_Rinse_Controller+0xd44>)
   a0758:	2201      	movs	r2, #1
   a075a:	801a      	strh	r2, [r3, #0]
							}
							Cl_Alarm_GetAlarmStatus(SENSOR_TEMP2STATUS,&alarmstatus3);
   a075c:	f107 0335 	add.w	r3, r7, #53	; 0x35
   a0760:	4619      	mov	r1, r3
   a0762:	2013      	movs	r0, #19
   a0764:	4b6d      	ldr	r3, [pc, #436]	; (a091c <Cl_Rinse_Controller+0xd40>)
   a0766:	4798      	blx	r3
							if(alarmstatus3)
							{
								//	UpdateHeaterControls();
							}
					
							Cl_Alarm_GetAlarmStatus(FLOW_NO_FLOW,&flowstatus);
   a0768:	f107 0334 	add.w	r3, r7, #52	; 0x34
   a076c:	4619      	mov	r1, r3
   a076e:	200c      	movs	r0, #12
   a0770:	4b6a      	ldr	r3, [pc, #424]	; (a091c <Cl_Rinse_Controller+0xd40>)
   a0772:	4798      	blx	r3
							//	if(flowstatus)
							//	{
							//		Cl_rinseretcode = sv_cntrl_poweroffheater();
							//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
							//	}
						break;
   a0774:	e0b4      	b.n	a08e0 <Cl_Rinse_Controller+0xd04>
						case EVT_RINSE_START_PRIME:
								blood_flag = 1;
   a0776:	4b6b      	ldr	r3, [pc, #428]	; (a0924 <Cl_Rinse_Controller+0xd48>)
   a0778:	2201      	movs	r2, #1
   a077a:	701a      	strb	r2, [r3, #0]
					//	if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
						{
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
							cl_dprep_activate_prime_related_alarms();
   a077c:	4b6a      	ldr	r3, [pc, #424]	; (a0928 <Cl_Rinse_Controller+0xd4c>)
   a077e:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a0780:	4b6a      	ldr	r3, [pc, #424]	; (a092c <Cl_Rinse_Controller+0xd50>)
   a0782:	2200      	movs	r2, #0
   a0784:	70da      	strb	r2, [r3, #3]
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   a0786:	2100      	movs	r1, #0
   a0788:	2001      	movs	r0, #1
   a078a:	4b69      	ldr	r3, [pc, #420]	; (a0930 <Cl_Rinse_Controller+0xd54>)
   a078c:	4798      	blx	r3
						}
						
						break;
   a078e:	e0a7      	b.n	a08e0 <Cl_Rinse_Controller+0xd04>
						case EVT_RINSE_STOP_PRIME:
							blood_flag = 0;
   a0790:	4b64      	ldr	r3, [pc, #400]	; (a0924 <Cl_Rinse_Controller+0xd48>)
   a0792:	2200      	movs	r2, #0
   a0794:	701a      	strb	r2, [r3, #0]
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a0796:	2100      	movs	r1, #0
   a0798:	2002      	movs	r0, #2
   a079a:	4b65      	ldr	r3, [pc, #404]	; (a0930 <Cl_Rinse_Controller+0xd54>)
   a079c:	4798      	blx	r3
						break;
   a079e:	e09f      	b.n	a08e0 <Cl_Rinse_Controller+0xd04>
						case EVT_RINSE_RCIRC_START:
						if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a07a0:	4b64      	ldr	r3, [pc, #400]	; (a0934 <Cl_Rinse_Controller+0xd58>)
   a07a2:	781b      	ldrb	r3, [r3, #0]
   a07a4:	2b01      	cmp	r3, #1
   a07a6:	f000 8094 	beq.w	a08d2 <Cl_Rinse_Controller+0xcf6>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   a07aa:	2206      	movs	r2, #6
   a07ac:	4962      	ldr	r1, [pc, #392]	; (a0938 <Cl_Rinse_Controller+0xd5c>)
   a07ae:	2018      	movs	r0, #24
   a07b0:	4b55      	ldr	r3, [pc, #340]	; (a0908 <Cl_Rinse_Controller+0xd2c>)
   a07b2:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   a07b4:	2100      	movs	r1, #0
   a07b6:	2005      	movs	r0, #5
   a07b8:	4b5d      	ldr	r3, [pc, #372]	; (a0930 <Cl_Rinse_Controller+0xd54>)
   a07ba:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a07bc:	4b5b      	ldr	r3, [pc, #364]	; (a092c <Cl_Rinse_Controller+0xd50>)
   a07be:	2200      	movs	r2, #0
   a07c0:	70da      	strb	r2, [r3, #3]
						}
						
						break;
   a07c2:	e086      	b.n	a08d2 <Cl_Rinse_Controller+0xcf6>
						case EVT_RINSE_RCIRC_STOP:

							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC_STOP",6);
   a07c4:	2206      	movs	r2, #6
   a07c6:	495d      	ldr	r1, [pc, #372]	; (a093c <Cl_Rinse_Controller+0xd60>)
   a07c8:	2018      	movs	r0, #24
   a07ca:	4b4f      	ldr	r3, [pc, #316]	; (a0908 <Cl_Rinse_Controller+0xd2c>)
   a07cc:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_STOP,0);
   a07ce:	2100      	movs	r1, #0
   a07d0:	2006      	movs	r0, #6
   a07d2:	4b57      	ldr	r3, [pc, #348]	; (a0930 <Cl_Rinse_Controller+0xd54>)
   a07d4:	4798      	blx	r3

						
						break;
   a07d6:	e083      	b.n	a08e0 <Cl_Rinse_Controller+0xd04>
						case EVT_RINSE_COMMAND_SET_BLDPMP_ON:
						cl_bp_controller(CL_BP_EVENT_START,0);
   a07d8:	2100      	movs	r1, #0
   a07da:	2002      	movs	r0, #2
   a07dc:	4b58      	ldr	r3, [pc, #352]	; (a0940 <Cl_Rinse_Controller+0xd64>)
   a07de:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = true;
   a07e0:	4b52      	ldr	r3, [pc, #328]	; (a092c <Cl_Rinse_Controller+0xd50>)
   a07e2:	2201      	movs	r2, #1
   a07e4:	709a      	strb	r2, [r3, #2]
						break;
   a07e6:	e07b      	b.n	a08e0 <Cl_Rinse_Controller+0xd04>
						case EVT_RINSE_COMMAND_SET_BLDPMP_OFF:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   a07e8:	2100      	movs	r1, #0
   a07ea:	2004      	movs	r0, #4
   a07ec:	4b54      	ldr	r3, [pc, #336]	; (a0940 <Cl_Rinse_Controller+0xd64>)
   a07ee:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = false;
   a07f0:	4b4e      	ldr	r3, [pc, #312]	; (a092c <Cl_Rinse_Controller+0xd50>)
   a07f2:	2200      	movs	r2, #0
   a07f4:	709a      	strb	r2, [r3, #2]
						break;
   a07f6:	e073      	b.n	a08e0 <Cl_Rinse_Controller+0xd04>
						case EVENT_MAC_RINSE_COMPLETED:
						if(cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY)
   a07f8:	4b3a      	ldr	r3, [pc, #232]	; (a08e4 <Cl_Rinse_Controller+0xd08>)
   a07fa:	781b      	ldrb	r3, [r3, #0]
   a07fc:	2b09      	cmp	r3, #9
   a07fe:	d06b      	beq.n	a08d8 <Cl_Rinse_Controller+0xcfc>
						{
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a0800:	2100      	movs	r1, #0
   a0802:	200c      	movs	r0, #12
   a0804:	4b39      	ldr	r3, [pc, #228]	; (a08ec <Cl_Rinse_Controller+0xd10>)
   a0806:	4798      	blx	r3
   a0808:	4603      	mov	r3, r0
   a080a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a080e:	2100      	movs	r1, #0
   a0810:	200d      	movs	r0, #13
   a0812:	4b36      	ldr	r3, [pc, #216]	; (a08ec <Cl_Rinse_Controller+0xd10>)
   a0814:	4798      	blx	r3
   a0816:	4603      	mov	r3, r0
   a0818:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a081c:	2100      	movs	r1, #0
   a081e:	200e      	movs	r0, #14
   a0820:	4b32      	ldr	r3, [pc, #200]	; (a08ec <Cl_Rinse_Controller+0xd10>)
   a0822:	4798      	blx	r3
   a0824:	4603      	mov	r3, r0
   a0826:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a082a:	2100      	movs	r1, #0
   a082c:	2029      	movs	r0, #41	; 0x29
   a082e:	4b2f      	ldr	r3, [pc, #188]	; (a08ec <Cl_Rinse_Controller+0xd10>)
   a0830:	4798      	blx	r3
   a0832:	4603      	mov	r3, r0
   a0834:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a0838:	2100      	movs	r1, #0
   a083a:	202b      	movs	r0, #43	; 0x2b
   a083c:	4b2b      	ldr	r3, [pc, #172]	; (a08ec <Cl_Rinse_Controller+0xd10>)
   a083e:	4798      	blx	r3
   a0840:	4603      	mov	r3, r0
   a0842:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a0846:	2100      	movs	r1, #0
   a0848:	2003      	movs	r0, #3
   a084a:	4b28      	ldr	r3, [pc, #160]	; (a08ec <Cl_Rinse_Controller+0xd10>)
   a084c:	4798      	blx	r3
   a084e:	4603      	mov	r3, r0
   a0850:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a0854:	2100      	movs	r1, #0
   a0856:	2004      	movs	r0, #4
   a0858:	4b24      	ldr	r3, [pc, #144]	; (a08ec <Cl_Rinse_Controller+0xd10>)
   a085a:	4798      	blx	r3
   a085c:	4603      	mov	r3, r0
   a085e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   a0862:	4b20      	ldr	r3, [pc, #128]	; (a08e4 <Cl_Rinse_Controller+0xd08>)
   a0864:	2209      	movs	r2, #9
   a0866:	701a      	strb	r2, [r3, #0]
						}
						break;
   a0868:	e036      	b.n	a08d8 <Cl_Rinse_Controller+0xcfc>
						case EVENT_RINSE_SET_BLDPMP_ON:
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_START,0);
   a086a:	2100      	movs	r1, #0
   a086c:	200c      	movs	r0, #12
   a086e:	4b30      	ldr	r3, [pc, #192]	; (a0930 <Cl_Rinse_Controller+0xd54>)
   a0870:	4798      	blx	r3
						break;
   a0872:	e035      	b.n	a08e0 <Cl_Rinse_Controller+0xd04>
						case EVENT_RINSE_SET_BLDPMP_OFF:
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_STOP,0);
   a0874:	2100      	movs	r1, #0
   a0876:	200d      	movs	r0, #13
   a0878:	4b2d      	ldr	r3, [pc, #180]	; (a0930 <Cl_Rinse_Controller+0xd54>)
   a087a:	4798      	blx	r3
						break;
   a087c:	e030      	b.n	a08e0 <Cl_Rinse_Controller+0xd04>
						case EVENT_RINSE_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   a087e:	4b31      	ldr	r3, [pc, #196]	; (a0944 <Cl_Rinse_Controller+0xd68>)
   a0880:	7e1b      	ldrb	r3, [r3, #24]
   a0882:	2b00      	cmp	r3, #0
   a0884:	d02b      	beq.n	a08de <Cl_Rinse_Controller+0xd02>
						{
							
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a0886:	4b2f      	ldr	r3, [pc, #188]	; (a0944 <Cl_Rinse_Controller+0xd68>)
   a0888:	791b      	ldrb	r3, [r3, #4]
   a088a:	763b      	strb	r3, [r7, #24]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   a088c:	4b2d      	ldr	r3, [pc, #180]	; (a0944 <Cl_Rinse_Controller+0xd68>)
   a088e:	791b      	ldrb	r3, [r3, #4]
   a0890:	767b      	strb	r3, [r7, #25]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   a0892:	4b2c      	ldr	r3, [pc, #176]	; (a0944 <Cl_Rinse_Controller+0xd68>)
   a0894:	791b      	ldrb	r3, [r3, #4]
   a0896:	76bb      	strb	r3, [r7, #26]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   a0898:	4b2a      	ldr	r3, [pc, #168]	; (a0944 <Cl_Rinse_Controller+0xd68>)
   a089a:	791b      	ldrb	r3, [r3, #4]
   a089c:	76fb      	strb	r3, [r7, #27]
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   a089e:	8b3b      	ldrh	r3, [r7, #24]
   a08a0:	b21b      	sxth	r3, r3
   a08a2:	4619      	mov	r1, r3
   a08a4:	200e      	movs	r0, #14
   a08a6:	4b22      	ldr	r3, [pc, #136]	; (a0930 <Cl_Rinse_Controller+0xd54>)
   a08a8:	4798      	blx	r3
						}
						break;
   a08aa:	e018      	b.n	a08de <Cl_Rinse_Controller+0xd02>
						
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						//sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
   a08ac:	4b26      	ldr	r3, [pc, #152]	; (a0948 <Cl_Rinse_Controller+0xd6c>)
   a08ae:	2202      	movs	r2, #2
   a08b0:	701a      	strb	r2, [r3, #0]
						break;
   a08b2:	e015      	b.n	a08e0 <Cl_Rinse_Controller+0xd04>

									default:break;
								}
							}
						
						break;
   a08b4:	bf00      	nop
   a08b6:	f000 bc4f 	b.w	a1158 <Cl_Rinse_Controller+0x157c>
															
										default:
										break;
									}
								}
						break;
   a08ba:	bf00      	nop
   a08bc:	f000 bc4c 	b.w	a1158 <Cl_Rinse_Controller+0x157c>
										cl_50ms_timer =0;
									//	sv_cntrl_deactivate_valve(VALVE_ID19);
									}
						}
																	
						break;
   a08c0:	bf00      	nop
   a08c2:	f000 bc49 	b.w	a1158 <Cl_Rinse_Controller+0x157c>
	
						}
						//	Cl_Rinse_ResetAlertsforReassertion();
							//Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					
						break;
   a08c6:	bf00      	nop
   a08c8:	f000 bc46 	b.w	a1158 <Cl_Rinse_Controller+0x157c>
										cl_tdata.bytearray[2] = 11;
										Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
								//	Cl_rinseretcode = (Cl_ReturnCodeType)sv_setflowpath(Default path ?);//set appropirate flow path configuration
	
							}
						break;
   a08cc:	bf00      	nop
   a08ce:	f000 bc43 	b.w	a1158 <Cl_Rinse_Controller+0x157c>
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
						
						break;
   a08d2:	bf00      	nop
   a08d4:	f000 bc40 	b.w	a1158 <Cl_Rinse_Controller+0x157c>
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
							cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
						}
						break;
   a08d8:	bf00      	nop
   a08da:	f000 bc3d 	b.w	a1158 <Cl_Rinse_Controller+0x157c>
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
						}
						break;
   a08de:	bf00      	nop
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						//sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
						break;
				}
		break;
   a08e0:	f000 bc3a 	b.w	a1158 <Cl_Rinse_Controller+0x157c>
   a08e4:	2007286a 	.word	0x2007286a
   a08e8:	0008a611 	.word	0x0008a611
   a08ec:	00082efd 	.word	0x00082efd
   a08f0:	0008d6b1 	.word	0x0008d6b1
   a08f4:	0008e8e1 	.word	0x0008e8e1
   a08f8:	20072630 	.word	0x20072630
   a08fc:	000a3f7d 	.word	0x000a3f7d
   a0900:	41200000 	.word	0x41200000
   a0904:	000a41ed 	.word	0x000a41ed
   a0908:	00099729 	.word	0x00099729
   a090c:	20072874 	.word	0x20072874
   a0910:	20072880 	.word	0x20072880
   a0914:	000a2415 	.word	0x000a2415
   a0918:	000a16fd 	.word	0x000a16fd
   a091c:	00083035 	.word	0x00083035
   a0920:	2007288a 	.word	0x2007288a
   a0924:	20072864 	.word	0x20072864
   a0928:	0008870d 	.word	0x0008870d
   a092c:	20070bac 	.word	0x20070bac
   a0930:	00087cad 	.word	0x00087cad
   a0934:	2007212c 	.word	0x2007212c
   a0938:	000a6308 	.word	0x000a6308
   a093c:	000a6310 	.word	0x000a6310
   a0940:	00091eb5 	.word	0x00091eb5
   a0944:	20072f98 	.word	0x20072f98
   a0948:	2007286b 	.word	0x2007286b
		case CL_RINSE_STATE_CRITICAL_ALARM:
				switch (cl_rinseevent)
   a094c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   a0950:	3b01      	subs	r3, #1
   a0952:	2b1d      	cmp	r3, #29
   a0954:	f200 815f 	bhi.w	a0c16 <Cl_Rinse_Controller+0x103a>
   a0958:	a201      	add	r2, pc, #4	; (adr r2, a0960 <Cl_Rinse_Controller+0xd84>)
   a095a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a095e:	bf00      	nop
   a0960:	000a0b7f 	.word	0x000a0b7f
   a0964:	000a09d9 	.word	0x000a09d9
   a0968:	000a0c17 	.word	0x000a0c17
   a096c:	000a0a29 	.word	0x000a0a29
   a0970:	000a0a3b 	.word	0x000a0a3b
   a0974:	000a0a4d 	.word	0x000a0a4d
   a0978:	000a0c17 	.word	0x000a0c17
   a097c:	000a0c17 	.word	0x000a0c17
   a0980:	000a0c17 	.word	0x000a0c17
   a0984:	000a0c17 	.word	0x000a0c17
   a0988:	000a0c17 	.word	0x000a0c17
   a098c:	000a0c17 	.word	0x000a0c17
   a0990:	000a0c17 	.word	0x000a0c17
   a0994:	000a0c17 	.word	0x000a0c17
   a0998:	000a0c17 	.word	0x000a0c17
   a099c:	000a0c17 	.word	0x000a0c17
   a09a0:	000a0c17 	.word	0x000a0c17
   a09a4:	000a0ae9 	.word	0x000a0ae9
   a09a8:	000a0c17 	.word	0x000a0c17
   a09ac:	000a0c17 	.word	0x000a0c17
   a09b0:	000a0c17 	.word	0x000a0c17
   a09b4:	000a0add 	.word	0x000a0add
   a09b8:	000a0a53 	.word	0x000a0a53
   a09bc:	000a0c17 	.word	0x000a0c17
   a09c0:	000a0c17 	.word	0x000a0c17
   a09c4:	000a0c17 	.word	0x000a0c17
   a09c8:	000a0c17 	.word	0x000a0c17
   a09cc:	000a0c17 	.word	0x000a0c17
   a09d0:	000a0c17 	.word	0x000a0c17
   a09d4:	000a0be9 	.word	0x000a0be9
				{
					case EVENT_START_RINSE:
					Cl_Rinse_StartRinse();
   a09d8:	4bb8      	ldr	r3, [pc, #736]	; (a0cbc <Cl_Rinse_Controller+0x10e0>)
   a09da:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   a09dc:	2308      	movs	r3, #8
   a09de:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a09e2:	2301      	movs	r3, #1
   a09e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   a09e8:	f107 0137 	add.w	r1, r7, #55	; 0x37
   a09ec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a09f0:	2201      	movs	r2, #1
   a09f2:	4618      	mov	r0, r3
   a09f4:	4bb2      	ldr	r3, [pc, #712]	; (a0cc0 <Cl_Rinse_Controller+0x10e4>)
   a09f6:	4798      	blx	r3
   a09f8:	4603      	mov	r3, r0
   a09fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					command = CON_TX_COMMAND_RINSE_STARTED;
   a09fe:	2309      	movs	r3, #9
   a0a00:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a0a04:	f107 0137 	add.w	r1, r7, #55	; 0x37
   a0a08:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a0a0c:	2200      	movs	r2, #0
   a0a0e:	4618      	mov	r0, r3
   a0a10:	4bab      	ldr	r3, [pc, #684]	; (a0cc0 <Cl_Rinse_Controller+0x10e4>)
   a0a12:	4798      	blx	r3
   a0a14:	4603      	mov	r3, r0
   a0a16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   a0a1a:	4baa      	ldr	r3, [pc, #680]	; (a0cc4 <Cl_Rinse_Controller+0x10e8>)
   a0a1c:	2203      	movs	r2, #3
   a0a1e:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a0a20:	4ba9      	ldr	r3, [pc, #676]	; (a0cc8 <Cl_Rinse_Controller+0x10ec>)
   a0a22:	2201      	movs	r2, #1
   a0a24:	701a      	strb	r2, [r3, #0]
					break;
   a0a26:	e0fb      	b.n	a0c20 <Cl_Rinse_Controller+0x1044>
					case EVENT_START_PRE_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   a0a28:	4ba4      	ldr	r3, [pc, #656]	; (a0cbc <Cl_Rinse_Controller+0x10e0>)
   a0a2a:	4798      	blx	r3
					
						cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   a0a2c:	4ba5      	ldr	r3, [pc, #660]	; (a0cc4 <Cl_Rinse_Controller+0x10e8>)
   a0a2e:	2204      	movs	r2, #4
   a0a30:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a0a32:	4ba5      	ldr	r3, [pc, #660]	; (a0cc8 <Cl_Rinse_Controller+0x10ec>)
   a0a34:	2201      	movs	r2, #1
   a0a36:	701a      	strb	r2, [r3, #0]
					break;
   a0a38:	e0f2      	b.n	a0c20 <Cl_Rinse_Controller+0x1044>
					case EVENT_START_POST_DISINF_RINSE:
							Cl_Rinse_StartRinse();
   a0a3a:	4ba0      	ldr	r3, [pc, #640]	; (a0cbc <Cl_Rinse_Controller+0x10e0>)
   a0a3c:	4798      	blx	r3
							cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   a0a3e:	4ba1      	ldr	r3, [pc, #644]	; (a0cc4 <Cl_Rinse_Controller+0x10e8>)
   a0a40:	2205      	movs	r2, #5
   a0a42:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a0a44:	4ba0      	ldr	r3, [pc, #640]	; (a0cc8 <Cl_Rinse_Controller+0x10ec>)
   a0a46:	2201      	movs	r2, #1
   a0a48:	701a      	strb	r2, [r3, #0]
					break;
   a0a4a:	e0e9      	b.n	a0c20 <Cl_Rinse_Controller+0x1044>
					case EVENT_STOP_RINSE:
					Cl_Rinse_StopRinse();
   a0a4c:	4b9f      	ldr	r3, [pc, #636]	; (a0ccc <Cl_Rinse_Controller+0x10f0>)
   a0a4e:	4798      	blx	r3
					break;
   a0a50:	e0e6      	b.n	a0c20 <Cl_Rinse_Controller+0x1044>
					case EVT_RINSE_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   a0a52:	4b9f      	ldr	r3, [pc, #636]	; (a0cd0 <Cl_Rinse_Controller+0x10f4>)
   a0a54:	7e1b      	ldrb	r3, [r3, #24]
   a0a56:	2b00      	cmp	r3, #0
   a0a58:	f000 80df 	beq.w	a0c1a <Cl_Rinse_Controller+0x103e>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
   a0a5c:	4b9c      	ldr	r3, [pc, #624]	; (a0cd0 <Cl_Rinse_Controller+0x10f4>)
   a0a5e:	791b      	ldrb	r3, [r3, #4]
   a0a60:	2b01      	cmp	r3, #1
   a0a62:	d002      	beq.n	a0a6a <Cl_Rinse_Controller+0xe8e>
   a0a64:	2b21      	cmp	r3, #33	; 0x21
   a0a66:	d01c      	beq.n	a0aa2 <Cl_Rinse_Controller+0xec6>
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
							break;
							default:
							break;
   a0a68:	e037      	b.n	a0ada <Cl_Rinse_Controller+0xefe>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a0a6a:	2316      	movs	r3, #22
   a0a6c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a0a70:	2301      	movs	r3, #1
   a0a72:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a0a76:	f107 0338 	add.w	r3, r7, #56	; 0x38
   a0a7a:	3301      	adds	r3, #1
   a0a7c:	4619      	mov	r1, r3
   a0a7e:	2001      	movs	r0, #1
   a0a80:	4b94      	ldr	r3, [pc, #592]	; (a0cd4 <Cl_Rinse_Controller+0x10f8>)
   a0a82:	4798      	blx	r3
   a0a84:	4603      	mov	r3, r0
   a0a86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a0a8a:	f107 0138 	add.w	r1, r7, #56	; 0x38
   a0a8e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a0a92:	2202      	movs	r2, #2
   a0a94:	4618      	mov	r0, r3
   a0a96:	4b8a      	ldr	r3, [pc, #552]	; (a0cc0 <Cl_Rinse_Controller+0x10e4>)
   a0a98:	4798      	blx	r3
   a0a9a:	4603      	mov	r3, r0
   a0a9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						
							break;
   a0aa0:	e01b      	b.n	a0ada <Cl_Rinse_Controller+0xefe>
							case CON_RX_PARAM_DATA_DISINF_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a0aa2:	2316      	movs	r3, #22
   a0aa4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   a0aa8:	2323      	movs	r3, #35	; 0x23
   a0aaa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a0aae:	f107 0338 	add.w	r3, r7, #56	; 0x38
   a0ab2:	3301      	adds	r3, #1
   a0ab4:	4619      	mov	r1, r3
   a0ab6:	2028      	movs	r0, #40	; 0x28
   a0ab8:	4b86      	ldr	r3, [pc, #536]	; (a0cd4 <Cl_Rinse_Controller+0x10f8>)
   a0aba:	4798      	blx	r3
   a0abc:	4603      	mov	r3, r0
   a0abe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   a0ac2:	f107 0138 	add.w	r1, r7, #56	; 0x38
   a0ac6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a0aca:	2202      	movs	r2, #2
   a0acc:	4618      	mov	r0, r3
   a0ace:	4b7c      	ldr	r3, [pc, #496]	; (a0cc0 <Cl_Rinse_Controller+0x10e4>)
   a0ad0:	4798      	blx	r3
   a0ad2:	4603      	mov	r3, r0
   a0ad4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a0ad8:	bf00      	nop
							default:
							break;
						}
					}
					break;
   a0ada:	e09e      	b.n	a0c1a <Cl_Rinse_Controller+0x103e>
					case EVENT_RINSE_ALARM:
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a0adc:	4b7e      	ldr	r3, [pc, #504]	; (a0cd8 <Cl_Rinse_Controller+0x10fc>)
   a0ade:	4798      	blx	r3
   a0ae0:	4603      	mov	r3, r0
   a0ae2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					break;
   a0ae6:	e09b      	b.n	a0c20 <Cl_Rinse_Controller+0x1044>
					
					case EVENT_RINSE_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a0ae8:	4b7c      	ldr	r3, [pc, #496]	; (a0cdc <Cl_Rinse_Controller+0x1100>)
   a0aea:	2200      	movs	r2, #0
   a0aec:	801a      	strh	r2, [r3, #0]
   a0aee:	e041      	b.n	a0b74 <Cl_Rinse_Controller+0xf98>
							{
								//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
								Cl_Alarm_GetAlarmStatus(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_RinseAlarmTable[tempcount].IsActive);
   a0af0:	4b7a      	ldr	r3, [pc, #488]	; (a0cdc <Cl_Rinse_Controller+0x1100>)
   a0af2:	881b      	ldrh	r3, [r3, #0]
   a0af4:	461a      	mov	r2, r3
   a0af6:	4b7a      	ldr	r3, [pc, #488]	; (a0ce0 <Cl_Rinse_Controller+0x1104>)
   a0af8:	f813 0032 	ldrb.w	r0, [r3, r2, lsl #3]
   a0afc:	4b77      	ldr	r3, [pc, #476]	; (a0cdc <Cl_Rinse_Controller+0x1100>)
   a0afe:	881b      	ldrh	r3, [r3, #0]
   a0b00:	00db      	lsls	r3, r3, #3
   a0b02:	4a77      	ldr	r2, [pc, #476]	; (a0ce0 <Cl_Rinse_Controller+0x1104>)
   a0b04:	4413      	add	r3, r2
   a0b06:	3302      	adds	r3, #2
   a0b08:	4619      	mov	r1, r3
   a0b0a:	4b76      	ldr	r3, [pc, #472]	; (a0ce4 <Cl_Rinse_Controller+0x1108>)
   a0b0c:	4798      	blx	r3
								if (Cl_RinseAlarmTable[tempcount].IsActive)
   a0b0e:	4b73      	ldr	r3, [pc, #460]	; (a0cdc <Cl_Rinse_Controller+0x1100>)
   a0b10:	881b      	ldrh	r3, [r3, #0]
   a0b12:	4a73      	ldr	r2, [pc, #460]	; (a0ce0 <Cl_Rinse_Controller+0x1104>)
   a0b14:	00db      	lsls	r3, r3, #3
   a0b16:	4413      	add	r3, r2
   a0b18:	789b      	ldrb	r3, [r3, #2]
   a0b1a:	2b00      	cmp	r3, #0
   a0b1c:	d00e      	beq.n	a0b3c <Cl_Rinse_Controller+0xf60>
								{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   a0b1e:	2208      	movs	r2, #8
   a0b20:	4971      	ldr	r1, [pc, #452]	; (a0ce8 <Cl_Rinse_Controller+0x110c>)
   a0b22:	2018      	movs	r0, #24
   a0b24:	4b66      	ldr	r3, [pc, #408]	; (a0cc0 <Cl_Rinse_Controller+0x10e4>)
   a0b26:	4798      	blx	r3
										Cl_Rinse_StopRinse();
   a0b28:	4b68      	ldr	r3, [pc, #416]	; (a0ccc <Cl_Rinse_Controller+0x10f0>)
   a0b2a:	4798      	blx	r3
										cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a0b2c:	4b65      	ldr	r3, [pc, #404]	; (a0cc4 <Cl_Rinse_Controller+0x10e8>)
   a0b2e:	2206      	movs	r2, #6
   a0b30:	701a      	strb	r2, [r3, #0]
										tempcount=0;
   a0b32:	4b6a      	ldr	r3, [pc, #424]	; (a0cdc <Cl_Rinse_Controller+0x1100>)
   a0b34:	2200      	movs	r2, #0
   a0b36:	801a      	strh	r2, [r3, #0]
										break;	
   a0b38:	bf00      	nop
										//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
									//	cl_rinsestate = CL_RINSE_STATE_RINSING;
									}
								}
							}
						break;
   a0b3a:	e071      	b.n	a0c20 <Cl_Rinse_Controller+0x1044>
										Cl_Rinse_StopRinse();
										cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
										tempcount=0;
										break;	
								}
								else if (tempcount == CL_RINSE_ALRM_MAX - 1)
   a0b3c:	4b67      	ldr	r3, [pc, #412]	; (a0cdc <Cl_Rinse_Controller+0x1100>)
   a0b3e:	881b      	ldrh	r3, [r3, #0]
   a0b40:	2b18      	cmp	r3, #24
   a0b42:	d111      	bne.n	a0b68 <Cl_Rinse_Controller+0xf8c>
								{
									if(!Cl_RinseAlarmTable[tempcount].IsActive)
   a0b44:	4b65      	ldr	r3, [pc, #404]	; (a0cdc <Cl_Rinse_Controller+0x1100>)
   a0b46:	881b      	ldrh	r3, [r3, #0]
   a0b48:	4a65      	ldr	r2, [pc, #404]	; (a0ce0 <Cl_Rinse_Controller+0x1104>)
   a0b4a:	00db      	lsls	r3, r3, #3
   a0b4c:	4413      	add	r3, r2
   a0b4e:	789b      	ldrb	r3, [r3, #2]
   a0b50:	f083 0301 	eor.w	r3, r3, #1
   a0b54:	b2db      	uxtb	r3, r3
   a0b56:	2b00      	cmp	r3, #0
   a0b58:	d006      	beq.n	a0b68 <Cl_Rinse_Controller+0xf8c>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
   a0b5a:	2208      	movs	r2, #8
   a0b5c:	4963      	ldr	r1, [pc, #396]	; (a0cec <Cl_Rinse_Controller+0x1110>)
   a0b5e:	2018      	movs	r0, #24
   a0b60:	4b57      	ldr	r3, [pc, #348]	; (a0cc0 <Cl_Rinse_Controller+0x10e4>)
   a0b62:	4798      	blx	r3
										
										//alarm_flag = 0;
										Cl_Rinse_ResetAlertsforReassertion();
   a0b64:	4b62      	ldr	r3, [pc, #392]	; (a0cf0 <Cl_Rinse_Controller+0x1114>)
   a0b66:	4798      	blx	r3
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					break;
					
					case EVENT_RINSE_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a0b68:	4b5c      	ldr	r3, [pc, #368]	; (a0cdc <Cl_Rinse_Controller+0x1100>)
   a0b6a:	881b      	ldrh	r3, [r3, #0]
   a0b6c:	3301      	adds	r3, #1
   a0b6e:	b29a      	uxth	r2, r3
   a0b70:	4b5a      	ldr	r3, [pc, #360]	; (a0cdc <Cl_Rinse_Controller+0x1100>)
   a0b72:	801a      	strh	r2, [r3, #0]
   a0b74:	4b59      	ldr	r3, [pc, #356]	; (a0cdc <Cl_Rinse_Controller+0x1100>)
   a0b76:	881b      	ldrh	r3, [r3, #0]
   a0b78:	2b18      	cmp	r3, #24
   a0b7a:	d9b9      	bls.n	a0af0 <Cl_Rinse_Controller+0xf14>
										//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
									//	cl_rinsestate = CL_RINSE_STATE_RINSING;
									}
								}
							}
						break;
   a0b7c:	e050      	b.n	a0c20 <Cl_Rinse_Controller+0x1044>
					case EVENT_RINSE_CLR_ALARM:
										sv_cntrl_resetyellowalarm();
   a0b7e:	4b5d      	ldr	r3, [pc, #372]	; (a0cf4 <Cl_Rinse_Controller+0x1118>)
   a0b80:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   a0b82:	4b5d      	ldr	r3, [pc, #372]	; (a0cf8 <Cl_Rinse_Controller+0x111c>)
   a0b84:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   a0b86:	4b5d      	ldr	r3, [pc, #372]	; (a0cfc <Cl_Rinse_Controller+0x1120>)
   a0b88:	4798      	blx	r3
										Cl_Rinse_ResetAlertsforReassertion();
   a0b8a:	4b59      	ldr	r3, [pc, #356]	; (a0cf0 <Cl_Rinse_Controller+0x1114>)
   a0b8c:	4798      	blx	r3
										Cl_Rinse_StartRinse();
   a0b8e:	4b4b      	ldr	r3, [pc, #300]	; (a0cbc <Cl_Rinse_Controller+0x10e0>)
   a0b90:	4798      	blx	r3
							command = CON_TX_COMMAND_RINSE_CONFIRM;
   a0b92:	2308      	movs	r3, #8
   a0b94:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a0b98:	2301      	movs	r3, #1
   a0b9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);
   a0b9e:	f107 0137 	add.w	r1, r7, #55	; 0x37
   a0ba2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a0ba6:	2201      	movs	r2, #1
   a0ba8:	4618      	mov	r0, r3
   a0baa:	4b45      	ldr	r3, [pc, #276]	; (a0cc0 <Cl_Rinse_Controller+0x10e4>)
   a0bac:	4798      	blx	r3
   a0bae:	4603      	mov	r3, r0
   a0bb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							command = CON_TX_COMMAND_RINSE_STARTED;
   a0bb4:	2309      	movs	r3, #9
   a0bb6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a0bba:	f107 0137 	add.w	r1, r7, #55	; 0x37
   a0bbe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a0bc2:	2200      	movs	r2, #0
   a0bc4:	4618      	mov	r0, r3
   a0bc6:	4b3e      	ldr	r3, [pc, #248]	; (a0cc0 <Cl_Rinse_Controller+0x10e4>)
   a0bc8:	4798      	blx	r3
   a0bca:	4603      	mov	r3, r0
   a0bcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a0bd0:	4b4b      	ldr	r3, [pc, #300]	; (a0d00 <Cl_Rinse_Controller+0x1124>)
   a0bd2:	4798      	blx	r3
   a0bd4:	4603      	mov	r3, r0
   a0bd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
										cl_rinsestate = CL_RINSE_STATE_RINSING;
   a0bda:	4b3a      	ldr	r3, [pc, #232]	; (a0cc4 <Cl_Rinse_Controller+0x10e8>)
   a0bdc:	2203      	movs	r2, #3
   a0bde:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a0be0:	4b39      	ldr	r3, [pc, #228]	; (a0cc8 <Cl_Rinse_Controller+0x10ec>)
   a0be2:	2201      	movs	r2, #1
   a0be4:	701a      	strb	r2, [r3, #0]
						
						
						//alarm_flag = 1;
						break;
   a0be6:	e01b      	b.n	a0c20 <Cl_Rinse_Controller+0x1044>
					case EVENT_RINSE_TICK_MINUTE:
					//Cl_rinseretcode = Cl_Rinse_ResetAlertsforReassertion();
					//Cl_rinseretcode = Cl_Rinse_repeatalrm();
					break;
					case EVENT_RINSE_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   a0be8:	4b39      	ldr	r3, [pc, #228]	; (a0cd0 <Cl_Rinse_Controller+0x10f4>)
   a0bea:	7e1b      	ldrb	r3, [r3, #24]
   a0bec:	2b00      	cmp	r3, #0
   a0bee:	d016      	beq.n	a0c1e <Cl_Rinse_Controller+0x1042>
						{
							
							cl_Datastreamtype cl_temp  ;
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a0bf0:	4b37      	ldr	r3, [pc, #220]	; (a0cd0 <Cl_Rinse_Controller+0x10f4>)
   a0bf2:	791b      	ldrb	r3, [r3, #4]
   a0bf4:	753b      	strb	r3, [r7, #20]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   a0bf6:	4b36      	ldr	r3, [pc, #216]	; (a0cd0 <Cl_Rinse_Controller+0x10f4>)
   a0bf8:	791b      	ldrb	r3, [r3, #4]
   a0bfa:	757b      	strb	r3, [r7, #21]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   a0bfc:	4b34      	ldr	r3, [pc, #208]	; (a0cd0 <Cl_Rinse_Controller+0x10f4>)
   a0bfe:	791b      	ldrb	r3, [r3, #4]
   a0c00:	75bb      	strb	r3, [r7, #22]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   a0c02:	4b33      	ldr	r3, [pc, #204]	; (a0cd0 <Cl_Rinse_Controller+0x10f4>)
   a0c04:	791b      	ldrb	r3, [r3, #4]
   a0c06:	75fb      	strb	r3, [r7, #23]
							cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   a0c08:	8abb      	ldrh	r3, [r7, #20]
   a0c0a:	b21b      	sxth	r3, r3
   a0c0c:	4619      	mov	r1, r3
   a0c0e:	200e      	movs	r0, #14
   a0c10:	4b3c      	ldr	r3, [pc, #240]	; (a0d04 <Cl_Rinse_Controller+0x1128>)
   a0c12:	4798      	blx	r3
						}
					break;
   a0c14:	e003      	b.n	a0c1e <Cl_Rinse_Controller+0x1042>
					default:break;
   a0c16:	bf00      	nop
   a0c18:	e29f      	b.n	a115a <Cl_Rinse_Controller+0x157e>
							break;
							default:
							break;
						}
					}
					break;
   a0c1a:	bf00      	nop
   a0c1c:	e29d      	b.n	a115a <Cl_Rinse_Controller+0x157e>
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
							cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
						}
					break;
   a0c1e:	bf00      	nop
					default:break;
				}
		break;
   a0c20:	e29b      	b.n	a115a <Cl_Rinse_Controller+0x157e>
		case CL_RINSE_STATE_POST_RINSE_STANDBY:
				switch (cl_rinseevent)
   a0c22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   a0c26:	3b02      	subs	r3, #2
   a0c28:	2b1e      	cmp	r3, #30
   a0c2a:	f200 81e3 	bhi.w	a0ff4 <Cl_Rinse_Controller+0x1418>
   a0c2e:	a201      	add	r2, pc, #4	; (adr r2, a0c34 <Cl_Rinse_Controller+0x1058>)
   a0c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a0c34:	000a0d09 	.word	0x000a0d09
   a0c38:	000a0ff5 	.word	0x000a0ff5
   a0c3c:	000a0d83 	.word	0x000a0d83
   a0c40:	000a0d9f 	.word	0x000a0d9f
   a0c44:	000a0ff5 	.word	0x000a0ff5
   a0c48:	000a0ff5 	.word	0x000a0ff5
   a0c4c:	000a0ff5 	.word	0x000a0ff5
   a0c50:	000a0ff5 	.word	0x000a0ff5
   a0c54:	000a0ff5 	.word	0x000a0ff5
   a0c58:	000a0ff5 	.word	0x000a0ff5
   a0c5c:	000a0ff5 	.word	0x000a0ff5
   a0c60:	000a0ff5 	.word	0x000a0ff5
   a0c64:	000a0ff5 	.word	0x000a0ff5
   a0c68:	000a0ff5 	.word	0x000a0ff5
   a0c6c:	000a0ff5 	.word	0x000a0ff5
   a0c70:	000a0ff5 	.word	0x000a0ff5
   a0c74:	000a0ff5 	.word	0x000a0ff5
   a0c78:	000a0ff5 	.word	0x000a0ff5
   a0c7c:	000a0ff5 	.word	0x000a0ff5
   a0c80:	000a0ff5 	.word	0x000a0ff5
   a0c84:	000a0cb1 	.word	0x000a0cb1
   a0c88:	000a0dbb 	.word	0x000a0dbb
   a0c8c:	000a0ff5 	.word	0x000a0ff5
   a0c90:	000a0fc3 	.word	0x000a0fc3
   a0c94:	000a0f5d 	.word	0x000a0f5d
   a0c98:	000a0f83 	.word	0x000a0f83
   a0c9c:	000a0ff5 	.word	0x000a0ff5
   a0ca0:	000a0ff5 	.word	0x000a0ff5
   a0ca4:	000a0fc7 	.word	0x000a0fc7
   a0ca8:	000a0f8d 	.word	0x000a0f8d
   a0cac:	000a0faf 	.word	0x000a0faf
				{
					case EVENT_RINSE_ALARM:
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a0cb0:	4b09      	ldr	r3, [pc, #36]	; (a0cd8 <Cl_Rinse_Controller+0x10fc>)
   a0cb2:	4798      	blx	r3
   a0cb4:	4603      	mov	r3, r0
   a0cb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					break;
   a0cba:	e1a4      	b.n	a1006 <Cl_Rinse_Controller+0x142a>
   a0cbc:	000a2089 	.word	0x000a2089
   a0cc0:	00099729 	.word	0x00099729
   a0cc4:	2007286a 	.word	0x2007286a
   a0cc8:	2007286b 	.word	0x2007286b
   a0ccc:	000a2415 	.word	0x000a2415
   a0cd0:	20072f98 	.word	0x20072f98
   a0cd4:	00098239 	.word	0x00098239
   a0cd8:	000a16fd 	.word	0x000a16fd
   a0cdc:	2007335c 	.word	0x2007335c
   a0ce0:	20070bac 	.word	0x20070bac
   a0ce4:	00083035 	.word	0x00083035
   a0ce8:	000a631c 	.word	0x000a631c
   a0cec:	000a6324 	.word	0x000a6324
   a0cf0:	000a1725 	.word	0x000a1725
   a0cf4:	00097c69 	.word	0x00097c69
   a0cf8:	00097c55 	.word	0x00097c55
   a0cfc:	00097c91 	.word	0x00097c91
   a0d00:	000a14b1 	.word	0x000a14b1
   a0d04:	00087cad 	.word	0x00087cad
					
					case EVENT_START_RINSE:
					if(Cl_ConsoleRxMsg.msgready == true)
   a0d08:	4bbf      	ldr	r3, [pc, #764]	; (a1008 <Cl_Rinse_Controller+0x142c>)
   a0d0a:	7e1b      	ldrb	r3, [r3, #24]
   a0d0c:	2b00      	cmp	r3, #0
   a0d0e:	d00b      	beq.n	a0d28 <Cl_Rinse_Controller+0x114c>
					{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a0d10:	4bbd      	ldr	r3, [pc, #756]	; (a1008 <Cl_Rinse_Controller+0x142c>)
   a0d12:	791b      	ldrb	r3, [r3, #4]
   a0d14:	743b      	strb	r3, [r7, #16]
					if (cl_temp.bytearray[0] == 1)
   a0d16:	7c3b      	ldrb	r3, [r7, #16]
   a0d18:	2b01      	cmp	r3, #1
   a0d1a:	d005      	beq.n	a0d28 <Cl_Rinse_Controller+0x114c>
					{
						
					}
					else if (cl_temp.bytearray[0] == 2)
   a0d1c:	7c3b      	ldrb	r3, [r7, #16]
   a0d1e:	2b02      	cmp	r3, #2
   a0d20:	d102      	bne.n	a0d28 <Cl_Rinse_Controller+0x114c>
					{
						hotrinse_flag = 1;
   a0d22:	4bba      	ldr	r3, [pc, #744]	; (a100c <Cl_Rinse_Controller+0x1430>)
   a0d24:	2201      	movs	r2, #1
   a0d26:	701a      	strb	r2, [r3, #0]
					}
					
					}
					Cl_Rinse_StartRinse();
   a0d28:	4bb9      	ldr	r3, [pc, #740]	; (a1010 <Cl_Rinse_Controller+0x1434>)
   a0d2a:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   a0d2c:	2308      	movs	r3, #8
   a0d2e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a0d32:	2301      	movs	r3, #1
   a0d34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   a0d38:	f107 0137 	add.w	r1, r7, #55	; 0x37
   a0d3c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a0d40:	2201      	movs	r2, #1
   a0d42:	4618      	mov	r0, r3
   a0d44:	4bb3      	ldr	r3, [pc, #716]	; (a1014 <Cl_Rinse_Controller+0x1438>)
   a0d46:	4798      	blx	r3
   a0d48:	4603      	mov	r3, r0
   a0d4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					command = CON_TX_COMMAND_RINSE_STARTED;
   a0d4e:	2309      	movs	r3, #9
   a0d50:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a0d54:	f107 0137 	add.w	r1, r7, #55	; 0x37
   a0d58:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a0d5c:	2200      	movs	r2, #0
   a0d5e:	4618      	mov	r0, r3
   a0d60:	4bac      	ldr	r3, [pc, #688]	; (a1014 <Cl_Rinse_Controller+0x1438>)
   a0d62:	4798      	blx	r3
   a0d64:	4603      	mov	r3, r0
   a0d66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a0d6a:	4bab      	ldr	r3, [pc, #684]	; (a1018 <Cl_Rinse_Controller+0x143c>)
   a0d6c:	4798      	blx	r3
   a0d6e:	4603      	mov	r3, r0
   a0d70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   a0d74:	4ba9      	ldr	r3, [pc, #676]	; (a101c <Cl_Rinse_Controller+0x1440>)
   a0d76:	2203      	movs	r2, #3
   a0d78:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a0d7a:	4ba9      	ldr	r3, [pc, #676]	; (a1020 <Cl_Rinse_Controller+0x1444>)
   a0d7c:	2201      	movs	r2, #1
   a0d7e:	701a      	strb	r2, [r3, #0]
					break;
   a0d80:	e141      	b.n	a1006 <Cl_Rinse_Controller+0x142a>
					case EVENT_START_PRE_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   a0d82:	4ba3      	ldr	r3, [pc, #652]	; (a1010 <Cl_Rinse_Controller+0x1434>)
   a0d84:	4798      	blx	r3
						Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a0d86:	4ba4      	ldr	r3, [pc, #656]	; (a1018 <Cl_Rinse_Controller+0x143c>)
   a0d88:	4798      	blx	r3
   a0d8a:	4603      	mov	r3, r0
   a0d8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   a0d90:	4ba2      	ldr	r3, [pc, #648]	; (a101c <Cl_Rinse_Controller+0x1440>)
   a0d92:	2204      	movs	r2, #4
   a0d94:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a0d96:	4ba2      	ldr	r3, [pc, #648]	; (a1020 <Cl_Rinse_Controller+0x1444>)
   a0d98:	2201      	movs	r2, #1
   a0d9a:	701a      	strb	r2, [r3, #0]
					break;
   a0d9c:	e133      	b.n	a1006 <Cl_Rinse_Controller+0x142a>
					case EVENT_START_POST_DISINF_RINSE:
							Cl_Rinse_StartRinse();
   a0d9e:	4b9c      	ldr	r3, [pc, #624]	; (a1010 <Cl_Rinse_Controller+0x1434>)
   a0da0:	4798      	blx	r3
							Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a0da2:	4b9d      	ldr	r3, [pc, #628]	; (a1018 <Cl_Rinse_Controller+0x143c>)
   a0da4:	4798      	blx	r3
   a0da6:	4603      	mov	r3, r0
   a0da8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   a0dac:	4b9b      	ldr	r3, [pc, #620]	; (a101c <Cl_Rinse_Controller+0x1440>)
   a0dae:	2205      	movs	r2, #5
   a0db0:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a0db2:	4b9b      	ldr	r3, [pc, #620]	; (a1020 <Cl_Rinse_Controller+0x1444>)
   a0db4:	2201      	movs	r2, #1
   a0db6:	701a      	strb	r2, [r3, #0]
					break;
   a0db8:	e125      	b.n	a1006 <Cl_Rinse_Controller+0x142a>
					case EVT_RINSE_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   a0dba:	4b93      	ldr	r3, [pc, #588]	; (a1008 <Cl_Rinse_Controller+0x142c>)
   a0dbc:	7e1b      	ldrb	r3, [r3, #24]
   a0dbe:	2b00      	cmp	r3, #0
   a0dc0:	f000 811a 	beq.w	a0ff8 <Cl_Rinse_Controller+0x141c>
					{
						switch(Cl_ConsoleRxMsg.data.byte[0])
   a0dc4:	4b90      	ldr	r3, [pc, #576]	; (a1008 <Cl_Rinse_Controller+0x142c>)
   a0dc6:	791b      	ldrb	r3, [r3, #4]
   a0dc8:	3b01      	subs	r3, #1
   a0dca:	2b20      	cmp	r3, #32
   a0dcc:	f200 80c4 	bhi.w	a0f58 <Cl_Rinse_Controller+0x137c>
   a0dd0:	a201      	add	r2, pc, #4	; (adr r2, a0dd8 <Cl_Rinse_Controller+0x11fc>)
   a0dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a0dd6:	bf00      	nop
   a0dd8:	000a0e5d 	.word	0x000a0e5d
   a0ddc:	000a0e95 	.word	0x000a0e95
   a0de0:	000a0f59 	.word	0x000a0f59
   a0de4:	000a0f59 	.word	0x000a0f59
   a0de8:	000a0f59 	.word	0x000a0f59
   a0dec:	000a0f59 	.word	0x000a0f59
   a0df0:	000a0f59 	.word	0x000a0f59
   a0df4:	000a0f59 	.word	0x000a0f59
   a0df8:	000a0f59 	.word	0x000a0f59
   a0dfc:	000a0f59 	.word	0x000a0f59
   a0e00:	000a0f59 	.word	0x000a0f59
   a0e04:	000a0f59 	.word	0x000a0f59
   a0e08:	000a0f59 	.word	0x000a0f59
   a0e0c:	000a0f59 	.word	0x000a0f59
   a0e10:	000a0f59 	.word	0x000a0f59
   a0e14:	000a0f59 	.word	0x000a0f59
   a0e18:	000a0f59 	.word	0x000a0f59
   a0e1c:	000a0f59 	.word	0x000a0f59
   a0e20:	000a0f59 	.word	0x000a0f59
   a0e24:	000a0f59 	.word	0x000a0f59
   a0e28:	000a0f59 	.word	0x000a0f59
   a0e2c:	000a0f59 	.word	0x000a0f59
   a0e30:	000a0f59 	.word	0x000a0f59
   a0e34:	000a0f59 	.word	0x000a0f59
   a0e38:	000a0f59 	.word	0x000a0f59
   a0e3c:	000a0f59 	.word	0x000a0f59
   a0e40:	000a0f59 	.word	0x000a0f59
   a0e44:	000a0f59 	.word	0x000a0f59
   a0e48:	000a0f59 	.word	0x000a0f59
   a0e4c:	000a0ecd 	.word	0x000a0ecd
   a0e50:	000a0f59 	.word	0x000a0f59
   a0e54:	000a0ef7 	.word	0x000a0ef7
   a0e58:	000a0f21 	.word	0x000a0f21
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a0e5c:	2316      	movs	r3, #22
   a0e5e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a0e62:	2301      	movs	r3, #1
   a0e64:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a0e68:	f107 0338 	add.w	r3, r7, #56	; 0x38
   a0e6c:	3301      	adds	r3, #1
   a0e6e:	4619      	mov	r1, r3
   a0e70:	2001      	movs	r0, #1
   a0e72:	4b6c      	ldr	r3, [pc, #432]	; (a1024 <Cl_Rinse_Controller+0x1448>)
   a0e74:	4798      	blx	r3
   a0e76:	4603      	mov	r3, r0
   a0e78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a0e7c:	f107 0138 	add.w	r1, r7, #56	; 0x38
   a0e80:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a0e84:	2202      	movs	r2, #2
   a0e86:	4618      	mov	r0, r3
   a0e88:	4b62      	ldr	r3, [pc, #392]	; (a1014 <Cl_Rinse_Controller+0x1438>)
   a0e8a:	4798      	blx	r3
   a0e8c:	4603      	mov	r3, r0
   a0e8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a0e92:	e062      	b.n	a0f5a <Cl_Rinse_Controller+0x137e>
							case CON_RX_PARAM_DATA_PRIME_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a0e94:	2316      	movs	r3, #22
   a0e96:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   a0e9a:	2302      	movs	r3, #2
   a0e9c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   a0ea0:	f107 0338 	add.w	r3, r7, #56	; 0x38
   a0ea4:	3301      	adds	r3, #1
   a0ea6:	4619      	mov	r1, r3
   a0ea8:	2002      	movs	r0, #2
   a0eaa:	4b5e      	ldr	r3, [pc, #376]	; (a1024 <Cl_Rinse_Controller+0x1448>)
   a0eac:	4798      	blx	r3
   a0eae:	4603      	mov	r3, r0
   a0eb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a0eb4:	f107 0138 	add.w	r1, r7, #56	; 0x38
   a0eb8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a0ebc:	2202      	movs	r2, #2
   a0ebe:	4618      	mov	r0, r3
   a0ec0:	4b54      	ldr	r3, [pc, #336]	; (a1014 <Cl_Rinse_Controller+0x1438>)
   a0ec2:	4798      	blx	r3
   a0ec4:	4603      	mov	r3, r0
   a0ec6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a0eca:	e046      	b.n	a0f5a <Cl_Rinse_Controller+0x137e>
							case CON_RX_PARAM_DATA_MIXING_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a0ecc:	2316      	movs	r3, #22
   a0ece:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_MIXING;
   a0ed2:	2320      	movs	r3, #32
   a0ed4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
							//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
							dataarray[1] = 0;
   a0ed8:	2300      	movs	r3, #0
   a0eda:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a0ede:	f107 0138 	add.w	r1, r7, #56	; 0x38
   a0ee2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a0ee6:	2202      	movs	r2, #2
   a0ee8:	4618      	mov	r0, r3
   a0eea:	4b4a      	ldr	r3, [pc, #296]	; (a1014 <Cl_Rinse_Controller+0x1438>)
   a0eec:	4798      	blx	r3
   a0eee:	4603      	mov	r3, r0
   a0ef0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a0ef4:	e031      	b.n	a0f5a <Cl_Rinse_Controller+0x137e>
							case CON_RX_PARAM_DATA_RECIRC_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a0ef6:	2316      	movs	r3, #22
   a0ef8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   a0efc:	2321      	movs	r3, #33	; 0x21
   a0efe:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
							//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
							dataarray[1] = 0;
   a0f02:	2300      	movs	r3, #0
   a0f04:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a0f08:	f107 0138 	add.w	r1, r7, #56	; 0x38
   a0f0c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a0f10:	2202      	movs	r2, #2
   a0f12:	4618      	mov	r0, r3
   a0f14:	4b3f      	ldr	r3, [pc, #252]	; (a1014 <Cl_Rinse_Controller+0x1438>)
   a0f16:	4798      	blx	r3
   a0f18:	4603      	mov	r3, r0
   a0f1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a0f1e:	e01c      	b.n	a0f5a <Cl_Rinse_Controller+0x137e>
							case CON_RX_PARAM_DATA_DISINF_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a0f20:	2316      	movs	r3, #22
   a0f22:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   a0f26:	2323      	movs	r3, #35	; 0x23
   a0f28:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a0f2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
   a0f30:	3301      	adds	r3, #1
   a0f32:	4619      	mov	r1, r3
   a0f34:	2028      	movs	r0, #40	; 0x28
   a0f36:	4b3b      	ldr	r3, [pc, #236]	; (a1024 <Cl_Rinse_Controller+0x1448>)
   a0f38:	4798      	blx	r3
   a0f3a:	4603      	mov	r3, r0
   a0f3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   a0f40:	f107 0138 	add.w	r1, r7, #56	; 0x38
   a0f44:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a0f48:	2202      	movs	r2, #2
   a0f4a:	4618      	mov	r0, r3
   a0f4c:	4b31      	ldr	r3, [pc, #196]	; (a1014 <Cl_Rinse_Controller+0x1438>)
   a0f4e:	4798      	blx	r3
   a0f50:	4603      	mov	r3, r0
   a0f52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a0f56:	e000      	b.n	a0f5a <Cl_Rinse_Controller+0x137e>
							
							default:
							break;
   a0f58:	bf00      	nop
						}
					}
					break;
   a0f5a:	e04d      	b.n	a0ff8 <Cl_Rinse_Controller+0x141c>
					case EVT_RINSE_START_PRIME:
						
					if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a0f5c:	4b32      	ldr	r3, [pc, #200]	; (a1028 <Cl_Rinse_Controller+0x144c>)
   a0f5e:	781b      	ldrb	r3, [r3, #0]
   a0f60:	2b01      	cmp	r3, #1
   a0f62:	d04b      	beq.n	a0ffc <Cl_Rinse_Controller+0x1420>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   a0f64:	2206      	movs	r2, #6
   a0f66:	4931      	ldr	r1, [pc, #196]	; (a102c <Cl_Rinse_Controller+0x1450>)
   a0f68:	2018      	movs	r0, #24
   a0f6a:	4b2a      	ldr	r3, [pc, #168]	; (a1014 <Cl_Rinse_Controller+0x1438>)
   a0f6c:	4798      	blx	r3
						cl_dprep_activate_prime_related_alarms();
   a0f6e:	4b30      	ldr	r3, [pc, #192]	; (a1030 <Cl_Rinse_Controller+0x1454>)
   a0f70:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a0f72:	4b30      	ldr	r3, [pc, #192]	; (a1034 <Cl_Rinse_Controller+0x1458>)
   a0f74:	2200      	movs	r2, #0
   a0f76:	70da      	strb	r2, [r3, #3]
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   a0f78:	2100      	movs	r1, #0
   a0f7a:	2001      	movs	r0, #1
   a0f7c:	4b2e      	ldr	r3, [pc, #184]	; (a1038 <Cl_Rinse_Controller+0x145c>)
   a0f7e:	4798      	blx	r3
					}
						
					break;
   a0f80:	e03c      	b.n	a0ffc <Cl_Rinse_Controller+0x1420>
					case EVT_RINSE_STOP_PRIME:
					cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a0f82:	2100      	movs	r1, #0
   a0f84:	2002      	movs	r0, #2
   a0f86:	4b2c      	ldr	r3, [pc, #176]	; (a1038 <Cl_Rinse_Controller+0x145c>)
   a0f88:	4798      	blx	r3
					break;
   a0f8a:	e03c      	b.n	a1006 <Cl_Rinse_Controller+0x142a>
					case EVT_RINSE_RCIRC_START:
					if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a0f8c:	4b26      	ldr	r3, [pc, #152]	; (a1028 <Cl_Rinse_Controller+0x144c>)
   a0f8e:	781b      	ldrb	r3, [r3, #0]
   a0f90:	2b01      	cmp	r3, #1
   a0f92:	d035      	beq.n	a1000 <Cl_Rinse_Controller+0x1424>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   a0f94:	2206      	movs	r2, #6
   a0f96:	4929      	ldr	r1, [pc, #164]	; (a103c <Cl_Rinse_Controller+0x1460>)
   a0f98:	2018      	movs	r0, #24
   a0f9a:	4b1e      	ldr	r3, [pc, #120]	; (a1014 <Cl_Rinse_Controller+0x1438>)
   a0f9c:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   a0f9e:	2100      	movs	r1, #0
   a0fa0:	2005      	movs	r0, #5
   a0fa2:	4b25      	ldr	r3, [pc, #148]	; (a1038 <Cl_Rinse_Controller+0x145c>)
   a0fa4:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a0fa6:	4b23      	ldr	r3, [pc, #140]	; (a1034 <Cl_Rinse_Controller+0x1458>)
   a0fa8:	2200      	movs	r2, #0
   a0faa:	70da      	strb	r2, [r3, #3]
					}
						
					break;
   a0fac:	e028      	b.n	a1000 <Cl_Rinse_Controller+0x1424>
					case EVT_RINSE_RCIRC_STOP:

						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC_STOP",6);
   a0fae:	2206      	movs	r2, #6
   a0fb0:	4923      	ldr	r1, [pc, #140]	; (a1040 <Cl_Rinse_Controller+0x1464>)
   a0fb2:	2018      	movs	r0, #24
   a0fb4:	4b17      	ldr	r3, [pc, #92]	; (a1014 <Cl_Rinse_Controller+0x1438>)
   a0fb6:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_STOP,0);
   a0fb8:	2100      	movs	r1, #0
   a0fba:	2006      	movs	r0, #6
   a0fbc:	4b1e      	ldr	r3, [pc, #120]	; (a1038 <Cl_Rinse_Controller+0x145c>)
   a0fbe:	4798      	blx	r3

						
					break;
   a0fc0:	e021      	b.n	a1006 <Cl_Rinse_Controller+0x142a>
					case EVENT_MAC_RINSE_COMPLETED:
					return(CL_OK);
   a0fc2:	2300      	movs	r3, #0
   a0fc4:	e0cb      	b.n	a115e <Cl_Rinse_Controller+0x1582>
					break;
					case EVENT_RINSE_SET_BLDPUMPRATE:
					if(Cl_ConsoleRxMsg.msgready == true)
   a0fc6:	4b10      	ldr	r3, [pc, #64]	; (a1008 <Cl_Rinse_Controller+0x142c>)
   a0fc8:	7e1b      	ldrb	r3, [r3, #24]
   a0fca:	2b00      	cmp	r3, #0
   a0fcc:	d01a      	beq.n	a1004 <Cl_Rinse_Controller+0x1428>
					{
						
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a0fce:	4b0e      	ldr	r3, [pc, #56]	; (a1008 <Cl_Rinse_Controller+0x142c>)
   a0fd0:	791b      	ldrb	r3, [r3, #4]
   a0fd2:	733b      	strb	r3, [r7, #12]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   a0fd4:	4b0c      	ldr	r3, [pc, #48]	; (a1008 <Cl_Rinse_Controller+0x142c>)
   a0fd6:	791b      	ldrb	r3, [r3, #4]
   a0fd8:	737b      	strb	r3, [r7, #13]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   a0fda:	4b0b      	ldr	r3, [pc, #44]	; (a1008 <Cl_Rinse_Controller+0x142c>)
   a0fdc:	791b      	ldrb	r3, [r3, #4]
   a0fde:	73bb      	strb	r3, [r7, #14]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   a0fe0:	4b09      	ldr	r3, [pc, #36]	; (a1008 <Cl_Rinse_Controller+0x142c>)
   a0fe2:	791b      	ldrb	r3, [r3, #4]
   a0fe4:	73fb      	strb	r3, [r7, #15]
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   a0fe6:	89bb      	ldrh	r3, [r7, #12]
   a0fe8:	b21b      	sxth	r3, r3
   a0fea:	4619      	mov	r1, r3
   a0fec:	200e      	movs	r0, #14
   a0fee:	4b12      	ldr	r3, [pc, #72]	; (a1038 <Cl_Rinse_Controller+0x145c>)
   a0ff0:	4798      	blx	r3
					}
					break;
   a0ff2:	e007      	b.n	a1004 <Cl_Rinse_Controller+0x1428>
					default: 
					
					return(CL_REJECTED);
   a0ff4:	2303      	movs	r3, #3
   a0ff6:	e0b2      	b.n	a115e <Cl_Rinse_Controller+0x1582>
							
							default:
							break;
						}
					}
					break;
   a0ff8:	bf00      	nop
   a0ffa:	e0ae      	b.n	a115a <Cl_Rinse_Controller+0x157e>
						cl_dprep_activate_prime_related_alarms();
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
					}
						
					break;
   a0ffc:	bf00      	nop
   a0ffe:	e0ac      	b.n	a115a <Cl_Rinse_Controller+0x157e>
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
					}
						
					break;
   a1000:	bf00      	nop
   a1002:	e0aa      	b.n	a115a <Cl_Rinse_Controller+0x157e>
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
					}
					break;
   a1004:	bf00      	nop
					
					return(CL_REJECTED);
					break;
				}
					
		break;
   a1006:	e0a8      	b.n	a115a <Cl_Rinse_Controller+0x157e>
   a1008:	20072f98 	.word	0x20072f98
   a100c:	2007288d 	.word	0x2007288d
   a1010:	000a2089 	.word	0x000a2089
   a1014:	00099729 	.word	0x00099729
   a1018:	000a14b1 	.word	0x000a14b1
   a101c:	2007286a 	.word	0x2007286a
   a1020:	2007286b 	.word	0x2007286b
   a1024:	00098239 	.word	0x00098239
   a1028:	2007212c 	.word	0x2007212c
   a102c:	000a632c 	.word	0x000a632c
   a1030:	0008870d 	.word	0x0008870d
   a1034:	20070bac 	.word	0x20070bac
   a1038:	00087cad 	.word	0x00087cad
   a103c:	000a6308 	.word	0x000a6308
   a1040:	000a6310 	.word	0x000a6310

	
	default:
			switch(cl_rinseevent)
   a1044:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   a1048:	3b02      	subs	r3, #2
   a104a:	2b17      	cmp	r3, #23
   a104c:	d87c      	bhi.n	a1148 <Cl_Rinse_Controller+0x156c>
   a104e:	a201      	add	r2, pc, #4	; (adr r2, a1054 <Cl_Rinse_Controller+0x1478>)
   a1050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a1054:	000a1149 	.word	0x000a1149
   a1058:	000a1149 	.word	0x000a1149
   a105c:	000a1149 	.word	0x000a1149
   a1060:	000a1149 	.word	0x000a1149
   a1064:	000a10b5 	.word	0x000a10b5
   a1068:	000a1149 	.word	0x000a1149
   a106c:	000a1149 	.word	0x000a1149
   a1070:	000a1149 	.word	0x000a1149
   a1074:	000a1149 	.word	0x000a1149
   a1078:	000a1149 	.word	0x000a1149
   a107c:	000a1149 	.word	0x000a1149
   a1080:	000a1149 	.word	0x000a1149
   a1084:	000a1139 	.word	0x000a1139
   a1088:	000a1149 	.word	0x000a1149
   a108c:	000a1149 	.word	0x000a1149
   a1090:	000a1149 	.word	0x000a1149
   a1094:	000a1149 	.word	0x000a1149
   a1098:	000a1149 	.word	0x000a1149
   a109c:	000a1149 	.word	0x000a1149
   a10a0:	000a1149 	.word	0x000a1149
   a10a4:	000a10bb 	.word	0x000a10bb
   a10a8:	000a1149 	.word	0x000a1149
   a10ac:	000a1149 	.word	0x000a1149
   a10b0:	000a10c7 	.word	0x000a10c7
			{
				case EVENT_START_RINSE:
				break;
				case EVENT_STOP_RINSE:
				Cl_Rinse_StopRinse();
   a10b4:	4b2c      	ldr	r3, [pc, #176]	; (a1168 <Cl_Rinse_Controller+0x158c>)
   a10b6:	4798      	blx	r3
				break;
   a10b8:	e04b      	b.n	a1152 <Cl_Rinse_Controller+0x1576>
				//printf("RTO\n");
				break;
				case EVENT_RINSE_ALARM:
				// update console 
				
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a10ba:	4b2c      	ldr	r3, [pc, #176]	; (a116c <Cl_Rinse_Controller+0x1590>)
   a10bc:	4798      	blx	r3
   a10be:	4603      	mov	r3, r0
   a10c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				
				break;
   a10c4:	e045      	b.n	a1152 <Cl_Rinse_Controller+0x1576>
				case EVENT_MAC_RINSE_COMPLETED:
				if(cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY)
   a10c6:	4b2a      	ldr	r3, [pc, #168]	; (a1170 <Cl_Rinse_Controller+0x1594>)
   a10c8:	781b      	ldrb	r3, [r3, #0]
   a10ca:	2b09      	cmp	r3, #9
   a10cc:	d03e      	beq.n	a114c <Cl_Rinse_Controller+0x1570>
				{
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a10ce:	2100      	movs	r1, #0
   a10d0:	200c      	movs	r0, #12
   a10d2:	4b28      	ldr	r3, [pc, #160]	; (a1174 <Cl_Rinse_Controller+0x1598>)
   a10d4:	4798      	blx	r3
   a10d6:	4603      	mov	r3, r0
   a10d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a10dc:	2100      	movs	r1, #0
   a10de:	200d      	movs	r0, #13
   a10e0:	4b24      	ldr	r3, [pc, #144]	; (a1174 <Cl_Rinse_Controller+0x1598>)
   a10e2:	4798      	blx	r3
   a10e4:	4603      	mov	r3, r0
   a10e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a10ea:	2100      	movs	r1, #0
   a10ec:	200e      	movs	r0, #14
   a10ee:	4b21      	ldr	r3, [pc, #132]	; (a1174 <Cl_Rinse_Controller+0x1598>)
   a10f0:	4798      	blx	r3
   a10f2:	4603      	mov	r3, r0
   a10f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a10f8:	2100      	movs	r1, #0
   a10fa:	2029      	movs	r0, #41	; 0x29
   a10fc:	4b1d      	ldr	r3, [pc, #116]	; (a1174 <Cl_Rinse_Controller+0x1598>)
   a10fe:	4798      	blx	r3
   a1100:	4603      	mov	r3, r0
   a1102:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a1106:	2100      	movs	r1, #0
   a1108:	202b      	movs	r0, #43	; 0x2b
   a110a:	4b1a      	ldr	r3, [pc, #104]	; (a1174 <Cl_Rinse_Controller+0x1598>)
   a110c:	4798      	blx	r3
   a110e:	4603      	mov	r3, r0
   a1110:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a1114:	2100      	movs	r1, #0
   a1116:	2003      	movs	r0, #3
   a1118:	4b16      	ldr	r3, [pc, #88]	; (a1174 <Cl_Rinse_Controller+0x1598>)
   a111a:	4798      	blx	r3
   a111c:	4603      	mov	r3, r0
   a111e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a1122:	2100      	movs	r1, #0
   a1124:	2004      	movs	r0, #4
   a1126:	4b13      	ldr	r3, [pc, #76]	; (a1174 <Cl_Rinse_Controller+0x1598>)
   a1128:	4798      	blx	r3
   a112a:	4603      	mov	r3, r0
   a112c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   a1130:	4b0f      	ldr	r3, [pc, #60]	; (a1170 <Cl_Rinse_Controller+0x1594>)
   a1132:	2209      	movs	r2, #9
   a1134:	701a      	strb	r2, [r3, #0]
				}
				break;
   a1136:	e009      	b.n	a114c <Cl_Rinse_Controller+0x1570>
				case EVENT_RINSE_DIALYSIS_PREP:
				if (cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY )
   a1138:	4b0d      	ldr	r3, [pc, #52]	; (a1170 <Cl_Rinse_Controller+0x1594>)
   a113a:	781b      	ldrb	r3, [r3, #0]
   a113c:	2b09      	cmp	r3, #9
   a113e:	d007      	beq.n	a1150 <Cl_Rinse_Controller+0x1574>
				{
					Cl_rinseretcode = CL_ERROR;
   a1140:	2304      	movs	r3, #4
   a1142:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
				break;
   a1146:	e003      	b.n	a1150 <Cl_Rinse_Controller+0x1574>
				default:
				break;
   a1148:	bf00      	nop
   a114a:	e006      	b.n	a115a <Cl_Rinse_Controller+0x157e>
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
					cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
				}
				break;
   a114c:	bf00      	nop
   a114e:	e004      	b.n	a115a <Cl_Rinse_Controller+0x157e>
				case EVENT_RINSE_DIALYSIS_PREP:
				if (cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY )
				{
					Cl_rinseretcode = CL_ERROR;
				}
				break;
   a1150:	bf00      	nop
				default:
				break;
			}
	break;
   a1152:	e002      	b.n	a115a <Cl_Rinse_Controller+0x157e>

switch(cl_rinsestate)
{

		case CL_RINSE_STATE_INIT:
		break;
   a1154:	bf00      	nop
   a1156:	e000      	b.n	a115a <Cl_Rinse_Controller+0x157e>
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						//sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
						break;
				}
		break;
   a1158:	bf00      	nop
			}
	break;
}


return Cl_rinseretcode;
   a115a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
   a115e:	4618      	mov	r0, r3
   a1160:	3748      	adds	r7, #72	; 0x48
   a1162:	46bd      	mov	sp, r7
   a1164:	bd80      	pop	{r7, pc}
   a1166:	bf00      	nop
   a1168:	000a2415 	.word	0x000a2415
   a116c:	000a16fd 	.word	0x000a16fd
   a1170:	2007286a 	.word	0x2007286a
   a1174:	00082efd 	.word	0x00082efd

000a1178 <cl_rinse_translatemacevent>:

Cl_ReturnCodeType  cl_rinse_translatemacevent(Cl_Mac_EventsType Cl_MacRinseEvt,Cl_Rinse_Eevents* cl_rinse_event)
{
   a1178:	b480      	push	{r7}
   a117a:	b083      	sub	sp, #12
   a117c:	af00      	add	r7, sp, #0
   a117e:	4603      	mov	r3, r0
   a1180:	6039      	str	r1, [r7, #0]
   a1182:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacRinseEvt)
   a1184:	79fb      	ldrb	r3, [r7, #7]
   a1186:	3b07      	subs	r3, #7
   a1188:	2b4a      	cmp	r3, #74	; 0x4a
   a118a:	f200 8109 	bhi.w	a13a0 <cl_rinse_translatemacevent+0x228>
   a118e:	a201      	add	r2, pc, #4	; (adr r2, a1194 <cl_rinse_translatemacevent+0x1c>)
   a1190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a1194:	000a12e1 	.word	0x000a12e1
   a1198:	000a12f9 	.word	0x000a12f9
   a119c:	000a1311 	.word	0x000a1311
   a11a0:	000a1389 	.word	0x000a1389
   a11a4:	000a1391 	.word	0x000a1391
   a11a8:	000a1399 	.word	0x000a1399
   a11ac:	000a1359 	.word	0x000a1359
   a11b0:	000a1361 	.word	0x000a1361
   a11b4:	000a1369 	.word	0x000a1369
   a11b8:	000a1371 	.word	0x000a1371
   a11bc:	000a13a1 	.word	0x000a13a1
   a11c0:	000a13a1 	.word	0x000a13a1
   a11c4:	000a13a1 	.word	0x000a13a1
   a11c8:	000a13a1 	.word	0x000a13a1
   a11cc:	000a13a1 	.word	0x000a13a1
   a11d0:	000a13a1 	.word	0x000a13a1
   a11d4:	000a13a1 	.word	0x000a13a1
   a11d8:	000a13a1 	.word	0x000a13a1
   a11dc:	000a13a1 	.word	0x000a13a1
   a11e0:	000a13a1 	.word	0x000a13a1
   a11e4:	000a13a1 	.word	0x000a13a1
   a11e8:	000a13a1 	.word	0x000a13a1
   a11ec:	000a13a1 	.word	0x000a13a1
   a11f0:	000a13a1 	.word	0x000a13a1
   a11f4:	000a1379 	.word	0x000a1379
   a11f8:	000a1381 	.word	0x000a1381
   a11fc:	000a13a1 	.word	0x000a13a1
   a1200:	000a13a1 	.word	0x000a13a1
   a1204:	000a13a1 	.word	0x000a13a1
   a1208:	000a13a1 	.word	0x000a13a1
   a120c:	000a13a1 	.word	0x000a13a1
   a1210:	000a12d1 	.word	0x000a12d1
   a1214:	000a12c1 	.word	0x000a12c1
   a1218:	000a12c9 	.word	0x000a12c9
   a121c:	000a12d9 	.word	0x000a12d9
   a1220:	000a13a1 	.word	0x000a13a1
   a1224:	000a13a1 	.word	0x000a13a1
   a1228:	000a13a1 	.word	0x000a13a1
   a122c:	000a1351 	.word	0x000a1351
   a1230:	000a1349 	.word	0x000a1349
   a1234:	000a13a1 	.word	0x000a13a1
   a1238:	000a13a1 	.word	0x000a13a1
   a123c:	000a13a1 	.word	0x000a13a1
   a1240:	000a13a1 	.word	0x000a13a1
   a1244:	000a13a1 	.word	0x000a13a1
   a1248:	000a13a1 	.word	0x000a13a1
   a124c:	000a13a1 	.word	0x000a13a1
   a1250:	000a13a1 	.word	0x000a13a1
   a1254:	000a13a1 	.word	0x000a13a1
   a1258:	000a1319 	.word	0x000a1319
   a125c:	000a1321 	.word	0x000a1321
   a1260:	000a1329 	.word	0x000a1329
   a1264:	000a1331 	.word	0x000a1331
   a1268:	000a1339 	.word	0x000a1339
   a126c:	000a1341 	.word	0x000a1341
   a1270:	000a13a1 	.word	0x000a13a1
   a1274:	000a13a1 	.word	0x000a13a1
   a1278:	000a13a1 	.word	0x000a13a1
   a127c:	000a13a1 	.word	0x000a13a1
   a1280:	000a13a1 	.word	0x000a13a1
   a1284:	000a13a1 	.word	0x000a13a1
   a1288:	000a12e9 	.word	0x000a12e9
   a128c:	000a12f1 	.word	0x000a12f1
   a1290:	000a13a1 	.word	0x000a13a1
   a1294:	000a13a1 	.word	0x000a13a1
   a1298:	000a1301 	.word	0x000a1301
   a129c:	000a13a1 	.word	0x000a13a1
   a12a0:	000a13a1 	.word	0x000a13a1
   a12a4:	000a13a1 	.word	0x000a13a1
   a12a8:	000a13a1 	.word	0x000a13a1
   a12ac:	000a13a1 	.word	0x000a13a1
   a12b0:	000a13a1 	.word	0x000a13a1
   a12b4:	000a13a1 	.word	0x000a13a1
   a12b8:	000a13a1 	.word	0x000a13a1
   a12bc:	000a1309 	.word	0x000a1309
	{
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_START;
   a12c0:	683b      	ldr	r3, [r7, #0]
   a12c2:	2224      	movs	r2, #36	; 0x24
   a12c4:	701a      	strb	r2, [r3, #0]
		break;
   a12c6:	e06c      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_STOP;
   a12c8:	683b      	ldr	r3, [r7, #0]
   a12ca:	2225      	movs	r2, #37	; 0x25
   a12cc:	701a      	strb	r2, [r3, #0]
		break;
   a12ce:	e068      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_BLOUS;
   a12d0:	683b      	ldr	r3, [r7, #0]
   a12d2:	2226      	movs	r2, #38	; 0x26
   a12d4:	701a      	strb	r2, [r3, #0]
		break;
   a12d6:	e064      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		

		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_rinse_event= EVENT_RINSE_CLR_ALARM;
   a12d8:	683b      	ldr	r3, [r7, #0]
   a12da:	2201      	movs	r2, #1
   a12dc:	701a      	strb	r2, [r3, #0]
		break;
   a12de:	e060      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_rinse_event= EVENT_START_RINSE;
   a12e0:	683b      	ldr	r3, [r7, #0]
   a12e2:	2202      	movs	r2, #2
   a12e4:	701a      	strb	r2, [r3, #0]
		break;
   a12e6:	e05c      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case  MACREQ_START_PRE_DISINF_RINSE:
		*cl_rinse_event= EVENT_START_PRE_DISINF_RINSE;
   a12e8:	683b      	ldr	r3, [r7, #0]
   a12ea:	2204      	movs	r2, #4
   a12ec:	701a      	strb	r2, [r3, #0]
		break;
   a12ee:	e058      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case  MACREQ_START_POST_DISINF_RINSE:
		*cl_rinse_event= EVENT_START_POST_DISINF_RINSE;
   a12f0:	683b      	ldr	r3, [r7, #0]
   a12f2:	2205      	movs	r2, #5
   a12f4:	701a      	strb	r2, [r3, #0]
		break;
   a12f6:	e054      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_STOP_RINSE:
		*cl_rinse_event= EVENT_STOP_RINSE;
   a12f8:	683b      	ldr	r3, [r7, #0]
   a12fa:	2206      	movs	r2, #6
   a12fc:	701a      	strb	r2, [r3, #0]
		break;
   a12fe:	e050      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
	
		case MACREQ_RINSE_COMPLETED:
		*cl_rinse_event = EVENT_MAC_RINSE_COMPLETED;
   a1300:	683b      	ldr	r3, [r7, #0]
   a1302:	2219      	movs	r2, #25
   a1304:	701a      	strb	r2, [r3, #0]
		break;
   a1306:	e04c      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case MACREQ_BC_OPENFILL_COMPLETED:
		*cl_rinse_event = EVENT_RINSE_BC_OPENFILL_COMPLETED;
   a1308:	683b      	ldr	r3, [r7, #0]
   a130a:	2227      	movs	r2, #39	; 0x27
   a130c:	701a      	strb	r2, [r3, #0]
		break;
   a130e:	e048      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_rinse_event = EVENT_RINSE_DIALYSIS_PREP;
   a1310:	683b      	ldr	r3, [r7, #0]
   a1312:	220e      	movs	r2, #14
   a1314:	701a      	strb	r2, [r3, #0]
		break; 
   a1316:	e044      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		
		case EVT_TICK_50M:
		*cl_rinse_event =   EVENT_RINSE_TICK_50MS;
   a1318:	683b      	ldr	r3, [r7, #0]
   a131a:	220f      	movs	r2, #15
   a131c:	701a      	strb	r2, [r3, #0]
		break;
   a131e:	e040      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
 		break;
		case EVT_TICK_100M:
		*cl_rinse_event =   EVENT_RINSE_TICK_100MS;
   a1320:	683b      	ldr	r3, [r7, #0]
   a1322:	2210      	movs	r2, #16
   a1324:	701a      	strb	r2, [r3, #0]
		break;
   a1326:	e03c      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case EVT_TICK_500M:
		  		*cl_rinse_event =   EVENT_RINSE_TICK_500MS;
   a1328:	683b      	ldr	r3, [r7, #0]
   a132a:	2211      	movs	r2, #17
   a132c:	701a      	strb	r2, [r3, #0]
		break;
   a132e:	e038      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case EVT_TICK_SEC:
		*cl_rinse_event =   EVENT_RINSE_TICK_SECOND;
   a1330:	683b      	ldr	r3, [r7, #0]
   a1332:	2212      	movs	r2, #18
   a1334:	701a      	strb	r2, [r3, #0]
		break;
   a1336:	e034      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case EVT_TICK_MIN:
		*cl_rinse_event =   EVENT_RINSE_TICK_MINUTE;
   a1338:	683b      	ldr	r3, [r7, #0]
   a133a:	2213      	movs	r2, #19
   a133c:	701a      	strb	r2, [r3, #0]
		break;			 
   a133e:	e030      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case EVT_TICK_HOUR:
		*cl_rinse_event =   EVENT_RINSE_TICK_HOUR;
   a1340:	683b      	ldr	r3, [r7, #0]
   a1342:	2214      	movs	r2, #20
   a1344:	701a      	strb	r2, [r3, #0]
		break;
   a1346:	e02c      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case EVT_ALARM_TRIGGERED:
		*cl_rinse_event =  EVENT_RINSE_ALARM;
   a1348:	683b      	ldr	r3, [r7, #0]
   a134a:	2216      	movs	r2, #22
   a134c:	701a      	strb	r2, [r3, #0]
		break;
   a134e:	e028      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case  EVT_ALERT_TRIGGERED:
		*cl_rinse_event =  EVENT_RINSE_ALERT;
   a1350:	683b      	ldr	r3, [r7, #0]
   a1352:	2215      	movs	r2, #21
   a1354:	701a      	strb	r2, [r3, #0]
		break;
   a1356:	e024      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_rinse_event = EVT_RINSE_SET_DATA;
   a1358:	683b      	ldr	r3, [r7, #0]
   a135a:	2218      	movs	r2, #24
   a135c:	701a      	strb	r2, [r3, #0]
		break;
   a135e:	e020      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_rinse_event =  EVT_RINSE_GET_DATA;
   a1360:	683b      	ldr	r3, [r7, #0]
   a1362:	2217      	movs	r2, #23
   a1364:	701a      	strb	r2, [r3, #0]
		break;
   a1366:	e01c      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_rinse_event =  EVT_RINSE_START_PRIME;
   a1368:	683b      	ldr	r3, [r7, #0]
   a136a:	221a      	movs	r2, #26
   a136c:	701a      	strb	r2, [r3, #0]
		break;
   a136e:	e018      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_rinse_event =  EVT_RINSE_STOP_PRIME;
   a1370:	683b      	ldr	r3, [r7, #0]
   a1372:	221b      	movs	r2, #27
   a1374:	701a      	strb	r2, [r3, #0]
		break;
   a1376:	e014      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_rinse_event = EVT_RINSE_RCIRC_START;
   a1378:	683b      	ldr	r3, [r7, #0]
   a137a:	221f      	movs	r2, #31
   a137c:	701a      	strb	r2, [r3, #0]
		break;
   a137e:	e010      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_RCIRC_STOP:
		*cl_rinse_event = EVT_RINSE_RCIRC_STOP;
   a1380:	683b      	ldr	r3, [r7, #0]
   a1382:	2220      	movs	r2, #32
   a1384:	701a      	strb	r2, [r3, #0]
		break;
   a1386:	e00c      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPMP_ON;
   a1388:	683b      	ldr	r3, [r7, #0]
   a138a:	2221      	movs	r2, #33	; 0x21
   a138c:	701a      	strb	r2, [r3, #0]
		break;
   a138e:	e008      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPMP_OFF;
   a1390:	683b      	ldr	r3, [r7, #0]
   a1392:	2222      	movs	r2, #34	; 0x22
   a1394:	701a      	strb	r2, [r3, #0]
		break;
   a1396:	e004      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		break;
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPUMPRATE;
   a1398:	683b      	ldr	r3, [r7, #0]
   a139a:	2223      	movs	r2, #35	; 0x23
   a139c:	701a      	strb	r2, [r3, #0]
		break;
   a139e:	e000      	b.n	a13a2 <cl_rinse_translatemacevent+0x22a>
		
		default:
		break;
   a13a0:	bf00      	nop
	}
		 return CL_OK;
   a13a2:	2300      	movs	r3, #0
}
   a13a4:	4618      	mov	r0, r3
   a13a6:	370c      	adds	r7, #12
   a13a8:	46bd      	mov	sp, r7
   a13aa:	bc80      	pop	{r7}
   a13ac:	4770      	bx	lr
   a13ae:	bf00      	nop

000a13b0 <Cl_rinse_init>:
 Cl_ReturnCodeType Cl_rinse_init(void)
 {
   a13b0:	b480      	push	{r7}
   a13b2:	af00      	add	r7, sp, #0
		tempcount = 0;
   a13b4:	4b26      	ldr	r3, [pc, #152]	; (a1450 <Cl_rinse_init+0xa0>)
   a13b6:	2200      	movs	r2, #0
   a13b8:	801a      	strh	r2, [r3, #0]
	   blood_flag=0;
   a13ba:	4b26      	ldr	r3, [pc, #152]	; (a1454 <Cl_rinse_init+0xa4>)
   a13bc:	2200      	movs	r2, #0
   a13be:	701a      	strb	r2, [r3, #0]
	   var1=0;
   a13c0:	4b25      	ldr	r3, [pc, #148]	; (a1458 <Cl_rinse_init+0xa8>)
   a13c2:	2200      	movs	r2, #0
   a13c4:	701a      	strb	r2, [r3, #0]
	   rinse1=0;
   a13c6:	4b25      	ldr	r3, [pc, #148]	; (a145c <Cl_rinse_init+0xac>)
   a13c8:	2200      	movs	r2, #0
   a13ca:	701a      	strb	r2, [r3, #0]
	   rinse2=0;
   a13cc:	4b24      	ldr	r3, [pc, #144]	; (a1460 <Cl_rinse_init+0xb0>)
   a13ce:	2200      	movs	r2, #0
   a13d0:	701a      	strb	r2, [r3, #0]
	   rinse3=0;
   a13d2:	4b24      	ldr	r3, [pc, #144]	; (a1464 <Cl_rinse_init+0xb4>)
   a13d4:	2200      	movs	r2, #0
   a13d6:	701a      	strb	r2, [r3, #0]
	   rinse4=0;
   a13d8:	4b23      	ldr	r3, [pc, #140]	; (a1468 <Cl_rinse_init+0xb8>)
   a13da:	2200      	movs	r2, #0
   a13dc:	701a      	strb	r2, [r3, #0]
	 
	  cl_rinsestate = CL_RINSE_STATE_IDLE;
   a13de:	4b23      	ldr	r3, [pc, #140]	; (a146c <Cl_rinse_init+0xbc>)
   a13e0:	2200      	movs	r2, #0
   a13e2:	701a      	strb	r2, [r3, #0]
	  cl_rinsing_substate = CL_RINSE_RINSING_IDLE;
   a13e4:	4b22      	ldr	r3, [pc, #136]	; (a1470 <Cl_rinse_init+0xc0>)
   a13e6:	2200      	movs	r2, #0
   a13e8:	701a      	strb	r2, [r3, #0]
	   Cl_Rinsesecondscounter =0 ;Cl_RinseMinutescounter=0; Cl_Rinseshourscounter=0;Cl_RinseOpenFillsecondscounter=0;
   a13ea:	4b22      	ldr	r3, [pc, #136]	; (a1474 <Cl_rinse_init+0xc4>)
   a13ec:	2200      	movs	r2, #0
   a13ee:	601a      	str	r2, [r3, #0]
   a13f0:	4b21      	ldr	r3, [pc, #132]	; (a1478 <Cl_rinse_init+0xc8>)
   a13f2:	2200      	movs	r2, #0
   a13f4:	601a      	str	r2, [r3, #0]
   a13f6:	4b21      	ldr	r3, [pc, #132]	; (a147c <Cl_rinse_init+0xcc>)
   a13f8:	2200      	movs	r2, #0
   a13fa:	601a      	str	r2, [r3, #0]
   a13fc:	4b20      	ldr	r3, [pc, #128]	; (a1480 <Cl_rinse_init+0xd0>)
   a13fe:	2200      	movs	r2, #0
   a1400:	601a      	str	r2, [r3, #0]
	   Cl_RinseTotalMinutescounter=0; Cl_RinsesTotalhourscounter=0;
   a1402:	4b20      	ldr	r3, [pc, #128]	; (a1484 <Cl_rinse_init+0xd4>)
   a1404:	2200      	movs	r2, #0
   a1406:	601a      	str	r2, [r3, #0]
   a1408:	4b1f      	ldr	r3, [pc, #124]	; (a1488 <Cl_rinse_init+0xd8>)
   a140a:	2200      	movs	r2, #0
   a140c:	601a      	str	r2, [r3, #0]
	   Cl_RinseOpenFillTimeOut = false;
   a140e:	4b1f      	ldr	r3, [pc, #124]	; (a148c <Cl_rinse_init+0xdc>)
   a1410:	2200      	movs	r2, #0
   a1412:	701a      	strb	r2, [r3, #0]
	   cl_gfillinprogress = false;
   a1414:	4b1e      	ldr	r3, [pc, #120]	; (a1490 <Cl_rinse_init+0xe0>)
   a1416:	2200      	movs	r2, #0
   a1418:	701a      	strb	r2, [r3, #0]
	   wait_cnt = 0;TmpVal=0;
   a141a:	4b1e      	ldr	r3, [pc, #120]	; (a1494 <Cl_rinse_init+0xe4>)
   a141c:	2200      	movs	r2, #0
   a141e:	801a      	strh	r2, [r3, #0]
   a1420:	4b1d      	ldr	r3, [pc, #116]	; (a1498 <Cl_rinse_init+0xe8>)
   a1422:	2200      	movs	r2, #0
   a1424:	801a      	strh	r2, [r3, #0]
	   temp1;temp2;
	    cl_50ms_timer = 0;
   a1426:	4b1d      	ldr	r3, [pc, #116]	; (a149c <Cl_rinse_init+0xec>)
   a1428:	2200      	movs	r2, #0
   a142a:	801a      	strh	r2, [r3, #0]
	   prevrinsealarm_id =_NO_ALARM;
   a142c:	4b1c      	ldr	r3, [pc, #112]	; (a14a0 <Cl_rinse_init+0xf0>)
   a142e:	2200      	movs	r2, #0
   a1430:	701a      	strb	r2, [r3, #0]
	   rinsealarm =0;
   a1432:	4b1c      	ldr	r3, [pc, #112]	; (a14a4 <Cl_rinse_init+0xf4>)
   a1434:	2200      	movs	r2, #0
   a1436:	701a      	strb	r2, [r3, #0]
	  
	    hotrinse_flag=0;minute=0;
   a1438:	4b1b      	ldr	r3, [pc, #108]	; (a14a8 <Cl_rinse_init+0xf8>)
   a143a:	2200      	movs	r2, #0
   a143c:	701a      	strb	r2, [r3, #0]
   a143e:	4b1b      	ldr	r3, [pc, #108]	; (a14ac <Cl_rinse_init+0xfc>)
   a1440:	2200      	movs	r2, #0
   a1442:	701a      	strb	r2, [r3, #0]
	
	 return CL_OK;
   a1444:	2300      	movs	r3, #0
 }
   a1446:	4618      	mov	r0, r3
   a1448:	46bd      	mov	sp, r7
   a144a:	bc80      	pop	{r7}
   a144c:	4770      	bx	lr
   a144e:	bf00      	nop
   a1450:	2007335c 	.word	0x2007335c
   a1454:	20072864 	.word	0x20072864
   a1458:	20072865 	.word	0x20072865
   a145c:	20072866 	.word	0x20072866
   a1460:	20072867 	.word	0x20072867
   a1464:	20072868 	.word	0x20072868
   a1468:	20072869 	.word	0x20072869
   a146c:	2007286a 	.word	0x2007286a
   a1470:	2007286b 	.word	0x2007286b
   a1474:	2007286c 	.word	0x2007286c
   a1478:	20072870 	.word	0x20072870
   a147c:	20072874 	.word	0x20072874
   a1480:	20072878 	.word	0x20072878
   a1484:	2007287c 	.word	0x2007287c
   a1488:	20072880 	.word	0x20072880
   a148c:	20072884 	.word	0x20072884
   a1490:	20072885 	.word	0x20072885
   a1494:	20072886 	.word	0x20072886
   a1498:	20072888 	.word	0x20072888
   a149c:	2007288a 	.word	0x2007288a
   a14a0:	2007288c 	.word	0x2007288c
   a14a4:	2007335f 	.word	0x2007335f
   a14a8:	2007288d 	.word	0x2007288d
   a14ac:	2007288e 	.word	0x2007288e

000a14b0 <Cl_Rinse_UpdateTimeInfo>:
	 return CL_OK;
 }
 
 
 Cl_ReturnCodeType Cl_Rinse_UpdateTimeInfo(void)
 {
   a14b0:	b580      	push	{r7, lr}
   a14b2:	b084      	sub	sp, #16
   a14b4:	af00      	add	r7, sp, #0
	 
	 Cl_ReturnCodeType Cl_rinseretcode = CL_ERROR;
   a14b6:	2304      	movs	r3, #4
   a14b8:	73fb      	strb	r3, [r7, #15]
	 Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a14ba:	234d      	movs	r3, #77	; 0x4d
   a14bc:	73bb      	strb	r3, [r7, #14]
	 Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   a14be:	1d3b      	adds	r3, r7, #4
   a14c0:	2200      	movs	r2, #0
   a14c2:	601a      	str	r2, [r3, #0]
   a14c4:	f8c3 2003 	str.w	r2, [r3, #3]
	 
	command = CON_TX_COMMAND_REM_TIME;
   a14c8:	230a      	movs	r3, #10
   a14ca:	73bb      	strb	r3, [r7, #14]

	
		data[0]= (Cl_Uint8Type)CLEAN_DATA;
   a14cc:	2301      	movs	r3, #1
   a14ce:	713b      	strb	r3, [r7, #4]
		data[1]= (Cl_Uint8Type)Cl_RinseTotalMinutescounter;
   a14d0:	4b08      	ldr	r3, [pc, #32]	; (a14f4 <Cl_Rinse_UpdateTimeInfo+0x44>)
   a14d2:	681b      	ldr	r3, [r3, #0]
   a14d4:	b2db      	uxtb	r3, r3
   a14d6:	717b      	strb	r3, [r7, #5]

		
		Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,2);
   a14d8:	1d39      	adds	r1, r7, #4
   a14da:	7bbb      	ldrb	r3, [r7, #14]
   a14dc:	2202      	movs	r2, #2
   a14de:	4618      	mov	r0, r3
   a14e0:	4b05      	ldr	r3, [pc, #20]	; (a14f8 <Cl_Rinse_UpdateTimeInfo+0x48>)
   a14e2:	4798      	blx	r3
   a14e4:	4603      	mov	r3, r0
   a14e6:	73fb      	strb	r3, [r7, #15]
		
		
//	Cl_Rinse_SendRinseStateData();                                                          commented on 28.05.2014
	return CL_OK;
   a14e8:	2300      	movs	r3, #0
	
 }
   a14ea:	4618      	mov	r0, r3
   a14ec:	3710      	adds	r7, #16
   a14ee:	46bd      	mov	sp, r7
   a14f0:	bd80      	pop	{r7, pc}
   a14f2:	bf00      	nop
   a14f4:	2007287c 	.word	0x2007287c
   a14f8:	00099729 	.word	0x00099729

000a14fc <Cl_Rinse_CheckforRinseCompletion>:
	  
  }
 
 
 Cl_ReturnCodeType Cl_Rinse_CheckforRinseCompletion(void)
 {
   a14fc:	b580      	push	{r7, lr}
   a14fe:	b082      	sub	sp, #8
   a1500:	af00      	add	r7, sp, #0
	 Cl_ReturnCodeType Cl_rinseretcode = CL_ERROR;
   a1502:	2304      	movs	r3, #4
   a1504:	71fb      	strb	r3, [r7, #7]
	 if(gtest_short_rinse)
   a1506:	4b18      	ldr	r3, [pc, #96]	; (a1568 <Cl_Rinse_CheckforRinseCompletion+0x6c>)
   a1508:	781b      	ldrb	r3, [r3, #0]
   a150a:	2b00      	cmp	r3, #0
   a150c:	d007      	beq.n	a151e <Cl_Rinse_CheckforRinseCompletion+0x22>
	 {
		if(Cl_RinseTotalMinutescounter > 5 ) 
   a150e:	4b17      	ldr	r3, [pc, #92]	; (a156c <Cl_Rinse_CheckforRinseCompletion+0x70>)
   a1510:	681b      	ldr	r3, [r3, #0]
   a1512:	2b05      	cmp	r3, #5
   a1514:	dd01      	ble.n	a151a <Cl_Rinse_CheckforRinseCompletion+0x1e>
		Cl_rinseretcode = CL_OK;
   a1516:	2300      	movs	r3, #0
   a1518:	71fb      	strb	r3, [r7, #7]
		return Cl_rinseretcode;
   a151a:	79fb      	ldrb	r3, [r7, #7]
   a151c:	e020      	b.n	a1560 <Cl_Rinse_CheckforRinseCompletion+0x64>
	 }
	if (hotrinse_flag == 1)
   a151e:	4b14      	ldr	r3, [pc, #80]	; (a1570 <Cl_Rinse_CheckforRinseCompletion+0x74>)
   a1520:	781b      	ldrb	r3, [r3, #0]
   a1522:	b2db      	uxtb	r3, r3
   a1524:	2b01      	cmp	r3, #1
   a1526:	d114      	bne.n	a1552 <Cl_Rinse_CheckforRinseCompletion+0x56>
	{
		if (Cl_RinseTotalMinutescounter >= (CL_HOTRINSE_TIMEOUT_MIN - 3) )
   a1528:	4b10      	ldr	r3, [pc, #64]	; (a156c <Cl_Rinse_CheckforRinseCompletion+0x70>)
   a152a:	681b      	ldr	r3, [r3, #0]
   a152c:	2b15      	cmp	r3, #21
   a152e:	dd03      	ble.n	a1538 <Cl_Rinse_CheckforRinseCompletion+0x3c>
		{
			sv_cntrl_poweroffheater();
   a1530:	4b10      	ldr	r3, [pc, #64]	; (a1574 <Cl_Rinse_CheckforRinseCompletion+0x78>)
   a1532:	4798      	blx	r3
			sv_cntrl_disable_loopback();											// added on 30.06.2017
   a1534:	4b10      	ldr	r3, [pc, #64]	; (a1578 <Cl_Rinse_CheckforRinseCompletion+0x7c>)
   a1536:	4798      	blx	r3
		}
		if (Cl_RinseTotalMinutescounter >= CL_HOTRINSE_TIMEOUT_MIN )
   a1538:	4b0c      	ldr	r3, [pc, #48]	; (a156c <Cl_Rinse_CheckforRinseCompletion+0x70>)
   a153a:	681b      	ldr	r3, [r3, #0]
   a153c:	2b18      	cmp	r3, #24
   a153e:	dd0e      	ble.n	a155e <Cl_Rinse_CheckforRinseCompletion+0x62>
		{
			Cl_rinseretcode = CL_OK;
   a1540:	2300      	movs	r3, #0
   a1542:	71fb      	strb	r3, [r7, #7]
			sv_cntrl_poweroffheater();
   a1544:	4b0b      	ldr	r3, [pc, #44]	; (a1574 <Cl_Rinse_CheckforRinseCompletion+0x78>)
   a1546:	4798      	blx	r3
			hotrinse_flag = 0;
   a1548:	4b09      	ldr	r3, [pc, #36]	; (a1570 <Cl_Rinse_CheckforRinseCompletion+0x74>)
   a154a:	2200      	movs	r2, #0
   a154c:	701a      	strb	r2, [r3, #0]
			//HeaterState == CL_HEATER_STATE_INACTIVE;							// // added on 3.07.2017
			return Cl_rinseretcode;
   a154e:	79fb      	ldrb	r3, [r7, #7]
   a1550:	e006      	b.n	a1560 <Cl_Rinse_CheckforRinseCompletion+0x64>
		}
	}
	else if (Cl_RinseTotalMinutescounter >= CL_RINSE_TIMEOUT_MIN)
   a1552:	4b06      	ldr	r3, [pc, #24]	; (a156c <Cl_Rinse_CheckforRinseCompletion+0x70>)
   a1554:	681b      	ldr	r3, [r3, #0]
   a1556:	2b04      	cmp	r3, #4
   a1558:	dd01      	ble.n	a155e <Cl_Rinse_CheckforRinseCompletion+0x62>
	{
			
		Cl_rinseretcode = CL_OK;
   a155a:	2300      	movs	r3, #0
   a155c:	71fb      	strb	r3, [r7, #7]
	}

	return Cl_rinseretcode;
   a155e:	79fb      	ldrb	r3, [r7, #7]
	 
 }
   a1560:	4618      	mov	r0, r3
   a1562:	3708      	adds	r7, #8
   a1564:	46bd      	mov	sp, r7
   a1566:	bd80      	pop	{r7, pc}
   a1568:	20072648 	.word	0x20072648
   a156c:	2007287c 	.word	0x2007287c
   a1570:	2007288d 	.word	0x2007288d
   a1574:	00097999 	.word	0x00097999
   a1578:	00097b3d 	.word	0x00097b3d

000a157c <cl_rinse_notifydacandgotorinsestandby>:
 
Cl_ReturnCodeType cl_rinse_notifydacandgotorinsestandby(void)
{
   a157c:	b580      	push	{r7, lr}
   a157e:	b082      	sub	sp, #8
   a1580:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_rinseretcode2 = CL_OK;
   a1582:	2300      	movs	r3, #0
   a1584:	71fb      	strb	r3, [r7, #7]
	
	Cl_Uint8Type data =0;
   a1586:	2300      	movs	r3, #0
   a1588:	71bb      	strb	r3, [r7, #6]
	Cl_RinseStop();
   a158a:	4b1b      	ldr	r3, [pc, #108]	; (a15f8 <cl_rinse_notifydacandgotorinsestandby+0x7c>)
   a158c:	4798      	blx	r3
	Cl_RinseFlowOff();
   a158e:	4b1b      	ldr	r3, [pc, #108]	; (a15fc <cl_rinse_notifydacandgotorinsestandby+0x80>)
   a1590:	4798      	blx	r3
//	Cl_rinseretcode2 = sv_cntrl_poweroffheater();
	//inform DAC about rinse completed state.
	Cl_Rinsesecondscounter = 0;
   a1592:	4b1b      	ldr	r3, [pc, #108]	; (a1600 <cl_rinse_notifydacandgotorinsestandby+0x84>)
   a1594:	2200      	movs	r2, #0
   a1596:	601a      	str	r2, [r3, #0]
	Cl_RinseMinutescounter= 0;
   a1598:	4b1a      	ldr	r3, [pc, #104]	; (a1604 <cl_rinse_notifydacandgotorinsestandby+0x88>)
   a159a:	2200      	movs	r2, #0
   a159c:	601a      	str	r2, [r3, #0]
	Cl_Rinseshourscounter= 0;
   a159e:	4b1a      	ldr	r3, [pc, #104]	; (a1608 <cl_rinse_notifydacandgotorinsestandby+0x8c>)
   a15a0:	2200      	movs	r2, #0
   a15a2:	601a      	str	r2, [r3, #0]
	Cl_RinseTotalMinutescounter= 0;
   a15a4:	4b19      	ldr	r3, [pc, #100]	; (a160c <cl_rinse_notifydacandgotorinsestandby+0x90>)
   a15a6:	2200      	movs	r2, #0
   a15a8:	601a      	str	r2, [r3, #0]
	Cl_RinsesTotalhourscounter=0;
   a15aa:	4b19      	ldr	r3, [pc, #100]	; (a1610 <cl_rinse_notifydacandgotorinsestandby+0x94>)
   a15ac:	2200      	movs	r2, #0
   a15ae:	601a      	str	r2, [r3, #0]
	
	data = 1;
   a15b0:	2301      	movs	r3, #1
   a15b2:	71bb      	strb	r3, [r7, #6]
	if((cl_rinsestate == CL_RINSE_STATE_RINSING)  )
   a15b4:	4b17      	ldr	r3, [pc, #92]	; (a1614 <cl_rinse_notifydacandgotorinsestandby+0x98>)
   a15b6:	781b      	ldrb	r3, [r3, #0]
   a15b8:	2b03      	cmp	r3, #3
   a15ba:	d114      	bne.n	a15e6 <cl_rinse_notifydacandgotorinsestandby+0x6a>
	{
		Cl_rinseretcode2 = sv_nvmsetdata(NV_NVM_RINSE_STATUS,&data,1);
   a15bc:	1dbb      	adds	r3, r7, #6
   a15be:	2201      	movs	r2, #1
   a15c0:	4619      	mov	r1, r3
   a15c2:	2001      	movs	r0, #1
   a15c4:	4b14      	ldr	r3, [pc, #80]	; (a1618 <cl_rinse_notifydacandgotorinsestandby+0x9c>)
   a15c6:	4798      	blx	r3
   a15c8:	4603      	mov	r3, r0
   a15ca:	71fb      	strb	r3, [r7, #7]
		Cl_rinseretcode2 = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_COMPLETED,&data,0);
   a15cc:	1dbb      	adds	r3, r7, #6
   a15ce:	2200      	movs	r2, #0
   a15d0:	4619      	mov	r1, r3
   a15d2:	200b      	movs	r0, #11
   a15d4:	4b11      	ldr	r3, [pc, #68]	; (a161c <cl_rinse_notifydacandgotorinsestandby+0xa0>)
   a15d6:	4798      	blx	r3
   a15d8:	4603      	mov	r3, r0
   a15da:	71fb      	strb	r3, [r7, #7]
		Cl_rinseretcode2 = Cl_mac_apprequesthandler(MACREQ_RINSE_COMPLETED);
   a15dc:	2048      	movs	r0, #72	; 0x48
   a15de:	4b10      	ldr	r3, [pc, #64]	; (a1620 <cl_rinse_notifydacandgotorinsestandby+0xa4>)
   a15e0:	4798      	blx	r3
   a15e2:	4603      	mov	r3, r0
   a15e4:	71fb      	strb	r3, [r7, #7]
		
	}
	cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_STOP);
   a15e6:	2002      	movs	r0, #2
   a15e8:	4b0e      	ldr	r3, [pc, #56]	; (a1624 <cl_rinse_notifydacandgotorinsestandby+0xa8>)
   a15ea:	4798      	blx	r3

						
	return Cl_rinseretcode2;
   a15ec:	79fb      	ldrb	r3, [r7, #7]
}
   a15ee:	4618      	mov	r0, r3
   a15f0:	3708      	adds	r7, #8
   a15f2:	46bd      	mov	sp, r7
   a15f4:	bd80      	pop	{r7, pc}
   a15f6:	bf00      	nop
   a15f8:	000a1bed 	.word	0x000a1bed
   a15fc:	000a1bc5 	.word	0x000a1bc5
   a1600:	2007286c 	.word	0x2007286c
   a1604:	20072870 	.word	0x20072870
   a1608:	20072874 	.word	0x20072874
   a160c:	2007287c 	.word	0x2007287c
   a1610:	20072880 	.word	0x20072880
   a1614:	2007286a 	.word	0x2007286a
   a1618:	00098271 	.word	0x00098271
   a161c:	00099729 	.word	0x00099729
   a1620:	0008a611 	.word	0x0008a611
   a1624:	000923ad 	.word	0x000923ad

000a1628 <Cl_Rinse_UpdateAlarmTable>:

Cl_ReturnCodeType Cl_Rinse_UpdateAlarmTable(ClRinseAlarmIdType* ClRinseAlarmId )
{
   a1628:	b580      	push	{r7, lr}
   a162a:	b086      	sub	sp, #24
   a162c:	af00      	add	r7, sp, #0
   a162e:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a1630:	2300      	movs	r3, #0
   a1632:	75fb      	strb	r3, [r7, #23]
	Cl_Uint8Type tempcount = 0;
   a1634:	2300      	movs	r3, #0
   a1636:	75bb      	strb	r3, [r7, #22]
	Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a1638:	f107 030c 	add.w	r3, r7, #12
   a163c:	2100      	movs	r1, #0
   a163e:	460a      	mov	r2, r1
   a1640:	801a      	strh	r2, [r3, #0]
   a1642:	460a      	mov	r2, r1
   a1644:	709a      	strb	r2, [r3, #2]
   a1646:	2300      	movs	r3, #0
   a1648:	613b      	str	r3, [r7, #16]
	Cl_Uint8Type data3;
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a164a:	234d      	movs	r3, #77	; 0x4d
   a164c:	73fb      	strb	r3, [r7, #15]
	
	
	for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a164e:	2300      	movs	r3, #0
   a1650:	75bb      	strb	r3, [r7, #22]
   a1652:	e045      	b.n	a16e0 <Cl_Rinse_UpdateAlarmTable+0xb8>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_RinseAlarmTable[tempcount].IsActive);
   a1654:	7dbb      	ldrb	r3, [r7, #22]
   a1656:	4a26      	ldr	r2, [pc, #152]	; (a16f0 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a1658:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   a165c:	7dbb      	ldrb	r3, [r7, #22]
   a165e:	00db      	lsls	r3, r3, #3
   a1660:	4a23      	ldr	r2, [pc, #140]	; (a16f0 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a1662:	4413      	add	r3, r2
   a1664:	3302      	adds	r3, #2
   a1666:	4619      	mov	r1, r3
   a1668:	4b22      	ldr	r3, [pc, #136]	; (a16f4 <Cl_Rinse_UpdateAlarmTable+0xcc>)
   a166a:	4798      	blx	r3

		
			if (Cl_RinseAlarmTable[tempcount].IsActive)
   a166c:	7dbb      	ldrb	r3, [r7, #22]
   a166e:	4a20      	ldr	r2, [pc, #128]	; (a16f0 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a1670:	00db      	lsls	r3, r3, #3
   a1672:	4413      	add	r3, r2
   a1674:	789b      	ldrb	r3, [r3, #2]
   a1676:	2b00      	cmp	r3, #0
   a1678:	d019      	beq.n	a16ae <Cl_Rinse_UpdateAlarmTable+0x86>
			{
				if(!Cl_RinseAlarmTable[tempcount].IsRaised)
   a167a:	7dbb      	ldrb	r3, [r7, #22]
   a167c:	4a1c      	ldr	r2, [pc, #112]	; (a16f0 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a167e:	00db      	lsls	r3, r3, #3
   a1680:	4413      	add	r3, r2
   a1682:	78db      	ldrb	r3, [r3, #3]
   a1684:	f083 0301 	eor.w	r3, r3, #1
   a1688:	b2db      	uxtb	r3, r3
   a168a:	2b00      	cmp	r3, #0
   a168c:	d025      	beq.n	a16da <Cl_Rinse_UpdateAlarmTable+0xb2>
					{
	
						Cl_RinseAlarmTable[tempcount].IsRaised = true;
   a168e:	7dbb      	ldrb	r3, [r7, #22]
   a1690:	4a17      	ldr	r2, [pc, #92]	; (a16f0 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a1692:	00db      	lsls	r3, r3, #3
   a1694:	4413      	add	r3, r2
   a1696:	2201      	movs	r2, #1
   a1698:	70da      	strb	r2, [r3, #3]
					
						Cl_rinseretcode = CL_RinseAlarmActon(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId);
   a169a:	7dbb      	ldrb	r3, [r7, #22]
   a169c:	4a14      	ldr	r2, [pc, #80]	; (a16f0 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a169e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   a16a2:	4618      	mov	r0, r3
   a16a4:	4b14      	ldr	r3, [pc, #80]	; (a16f8 <Cl_Rinse_UpdateAlarmTable+0xd0>)
   a16a6:	4798      	blx	r3
   a16a8:	4603      	mov	r3, r0
   a16aa:	75fb      	strb	r3, [r7, #23]
   a16ac:	e015      	b.n	a16da <Cl_Rinse_UpdateAlarmTable+0xb2>
			
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_RinseAlarmTable[tempcount].IsRaised == true)
   a16ae:	7dbb      	ldrb	r3, [r7, #22]
   a16b0:	4a0f      	ldr	r2, [pc, #60]	; (a16f0 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a16b2:	00db      	lsls	r3, r3, #3
   a16b4:	4413      	add	r3, r2
   a16b6:	78db      	ldrb	r3, [r3, #3]
   a16b8:	2b00      	cmp	r3, #0
   a16ba:	d00e      	beq.n	a16da <Cl_Rinse_UpdateAlarmTable+0xb2>
				{
					Cl_RinseAlarmTable[tempcount].IsRaised = false;
   a16bc:	7dbb      	ldrb	r3, [r7, #22]
   a16be:	4a0c      	ldr	r2, [pc, #48]	; (a16f0 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a16c0:	00db      	lsls	r3, r3, #3
   a16c2:	4413      	add	r3, r2
   a16c4:	2200      	movs	r2, #0
   a16c6:	70da      	strb	r2, [r3, #3]
					command = CON_TX_COMMAND_ALARM;
   a16c8:	2307      	movs	r3, #7
   a16ca:	73fb      	strb	r3, [r7, #15]
					data[0] = (Cl_Uint8Type)(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId);
   a16cc:	7dbb      	ldrb	r3, [r7, #22]
   a16ce:	4a08      	ldr	r2, [pc, #32]	; (a16f0 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a16d0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   a16d4:	733b      	strb	r3, [r7, #12]
					data[1] = (Cl_Uint8Type) CL_ALARM_CLEARED;
   a16d6:	2300      	movs	r3, #0
   a16d8:	737b      	strb	r3, [r7, #13]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	
	for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a16da:	7dbb      	ldrb	r3, [r7, #22]
   a16dc:	3301      	adds	r3, #1
   a16de:	75bb      	strb	r3, [r7, #22]
   a16e0:	7dbb      	ldrb	r3, [r7, #22]
   a16e2:	2b18      	cmp	r3, #24
   a16e4:	d9b6      	bls.n	a1654 <Cl_Rinse_UpdateAlarmTable+0x2c>
			}
		//}

	}

return (Cl_rinseretcode );
   a16e6:	7dfb      	ldrb	r3, [r7, #23]
}
   a16e8:	4618      	mov	r0, r3
   a16ea:	3718      	adds	r7, #24
   a16ec:	46bd      	mov	sp, r7
   a16ee:	bd80      	pop	{r7, pc}
   a16f0:	20070bac 	.word	0x20070bac
   a16f4:	00083035 	.word	0x00083035
   a16f8:	000a1851 	.word	0x000a1851

000a16fc <Cl_Rinse_ProcessAlarms>:

Cl_ReturnCodeType Cl_Rinse_ProcessAlarms(void )
{
   a16fc:	b580      	push	{r7, lr}
   a16fe:	b082      	sub	sp, #8
   a1700:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a1702:	2300      	movs	r3, #0
   a1704:	71fb      	strb	r3, [r7, #7]
		ClRinseAlarmIdType ClRinseAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a1706:	234d      	movs	r3, #77	; 0x4d
   a1708:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_rinsealarmid;
	
	   Cl_rinseretcode = Cl_Rinse_UpdateAlarmTable(&ClRinseAlarmId);
   a170a:	1d7b      	adds	r3, r7, #5
   a170c:	4618      	mov	r0, r3
   a170e:	4b04      	ldr	r3, [pc, #16]	; (a1720 <Cl_Rinse_ProcessAlarms+0x24>)
   a1710:	4798      	blx	r3
   a1712:	4603      	mov	r3, r0
   a1714:	71fb      	strb	r3, [r7, #7]

		   
		  
	   	return (Cl_rinseretcode);
   a1716:	79fb      	ldrb	r3, [r7, #7]
}
   a1718:	4618      	mov	r0, r3
   a171a:	3708      	adds	r7, #8
   a171c:	46bd      	mov	sp, r7
   a171e:	bd80      	pop	{r7, pc}
   a1720:	000a1629 	.word	0x000a1629

000a1724 <Cl_Rinse_ResetAlertsforReassertion>:

Cl_ReturnCodeType Cl_Rinse_ResetAlertsforReassertion(void )
{
   a1724:	b580      	push	{r7, lr}
   a1726:	b082      	sub	sp, #8
   a1728:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a172a:	2300      	movs	r3, #0
   a172c:	71fb      	strb	r3, [r7, #7]
	ClRinseAlarmIdType ClRinseAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a172e:	234d      	movs	r3, #77	; 0x4d
   a1730:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_rinsealarmid;
	
		
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a1732:	4b45      	ldr	r3, [pc, #276]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a1734:	2200      	movs	r2, #0
   a1736:	70da      	strb	r2, [r3, #3]
	//Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
	Cl_AlarmResetAlarm(Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].Cl_RinseAlarmId);
   a1738:	4b43      	ldr	r3, [pc, #268]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a173a:	781b      	ldrb	r3, [r3, #0]
   a173c:	4618      	mov	r0, r3
   a173e:	4b43      	ldr	r3, [pc, #268]	; (a184c <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a1740:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_BYPASSDOOR_STATUS_OPEN].IsRaised = false;
	//Cl_AlarmResetAlarm(BYPASSDOOR_STATUS_OPEN);

	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_LOW].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_LOW);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_ACID_IN].IsRaised = false;
   a1742:	4b41      	ldr	r3, [pc, #260]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a1744:	2200      	movs	r2, #0
   a1746:	72da      	strb	r2, [r3, #11]
	Cl_AlarmResetAlarm(ACID_IN_OPEN);
   a1748:	2029      	movs	r0, #41	; 0x29
   a174a:	4b40      	ldr	r3, [pc, #256]	; (a184c <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a174c:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BICARB_IN].IsRaised = false;
   a174e:	4b3e      	ldr	r3, [pc, #248]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a1750:	2200      	movs	r2, #0
   a1752:	74da      	strb	r2, [r3, #19]
	Cl_AlarmResetAlarm(BICARB_IN_OPEN);
   a1754:	202b      	movs	r0, #43	; 0x2b
   a1756:	4b3d      	ldr	r3, [pc, #244]	; (a184c <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a1758:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
   a175a:	4b3b      	ldr	r3, [pc, #236]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a175c:	2200      	movs	r2, #0
   a175e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   a1762:	2008      	movs	r0, #8
   a1764:	4b39      	ldr	r3, [pc, #228]	; (a184c <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a1766:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   a1768:	4b37      	ldr	r3, [pc, #220]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a176a:	2200      	movs	r2, #0
   a176c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   a1770:	4b35      	ldr	r3, [pc, #212]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a1772:	2200      	movs	r2, #0
   a1774:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   a1778:	2015      	movs	r0, #21
   a177a:	4b34      	ldr	r3, [pc, #208]	; (a184c <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a177c:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   a177e:	2016      	movs	r0, #22
   a1780:	4b32      	ldr	r3, [pc, #200]	; (a184c <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a1782:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   a1784:	4b30      	ldr	r3, [pc, #192]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a1786:	2200      	movs	r2, #0
   a1788:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   a178c:	4b2e      	ldr	r3, [pc, #184]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a178e:	2200      	movs	r2, #0
   a1790:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   a1794:	2017      	movs	r0, #23
   a1796:	4b2d      	ldr	r3, [pc, #180]	; (a184c <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a1798:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   a179a:	2018      	movs	r0, #24
   a179c:	4b2b      	ldr	r3, [pc, #172]	; (a184c <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a179e:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   a17a0:	4b29      	ldr	r3, [pc, #164]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a17a2:	2200      	movs	r2, #0
   a17a4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   a17a8:	4b27      	ldr	r3, [pc, #156]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a17aa:	2200      	movs	r2, #0
   a17ac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   a17b0:	2028      	movs	r0, #40	; 0x28
   a17b2:	4b26      	ldr	r3, [pc, #152]	; (a184c <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a17b4:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   a17b6:	2027      	movs	r0, #39	; 0x27
   a17b8:	4b24      	ldr	r3, [pc, #144]	; (a184c <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a17ba:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   a17bc:	4b22      	ldr	r3, [pc, #136]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a17be:	2200      	movs	r2, #0
   a17c0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   a17c4:	2012      	movs	r0, #18
   a17c6:	4b21      	ldr	r3, [pc, #132]	; (a184c <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a17c8:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   a17ca:	2011      	movs	r0, #17
   a17cc:	4b1f      	ldr	r3, [pc, #124]	; (a184c <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a17ce:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   a17d0:	4b1d      	ldr	r3, [pc, #116]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a17d2:	2200      	movs	r2, #0
   a17d4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   a17d8:	4b1b      	ldr	r3, [pc, #108]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a17da:	2200      	movs	r2, #0
   a17dc:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   a17e0:	2013      	movs	r0, #19
   a17e2:	4b1a      	ldr	r3, [pc, #104]	; (a184c <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a17e4:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   a17e6:	2014      	movs	r0, #20
   a17e8:	4b18      	ldr	r3, [pc, #96]	; (a184c <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a17ea:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   a17ec:	4b16      	ldr	r3, [pc, #88]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a17ee:	2200      	movs	r2, #0
   a17f0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   a17f4:	2003      	movs	r0, #3
   a17f6:	4b15      	ldr	r3, [pc, #84]	; (a184c <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a17f8:	4798      	blx	r3
	//Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   a17fa:	4b13      	ldr	r3, [pc, #76]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a17fc:	2200      	movs	r2, #0
   a17fe:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   a1802:	2004      	movs	r0, #4
   a1804:	4b11      	ldr	r3, [pc, #68]	; (a184c <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a1806:	4798      	blx	r3
	//Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_NO_FLOW].IsRaised = false;
   a1808:	4b0f      	ldr	r3, [pc, #60]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a180a:	2200      	movs	r2, #0
   a180c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_HIGH_FLOWRATE].IsRaised = false;
   a1810:	4b0d      	ldr	r3, [pc, #52]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a1812:	2200      	movs	r2, #0
   a1814:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   a1818:	4b0b      	ldr	r3, [pc, #44]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a181a:	2200      	movs	r2, #0
   a181c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   a1820:	4b09      	ldr	r3, [pc, #36]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a1822:	2200      	movs	r2, #0
   a1824:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   a1828:	2010      	movs	r0, #16
   a182a:	4b08      	ldr	r3, [pc, #32]	; (a184c <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a182c:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   a182e:	4b06      	ldr	r3, [pc, #24]	; (a1848 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a1830:	2200      	movs	r2, #0
   a1832:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   a1836:	200f      	movs	r0, #15
   a1838:	4b04      	ldr	r3, [pc, #16]	; (a184c <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a183a:	4798      	blx	r3
	//Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
	
	
	return (Cl_rinseretcode);
   a183c:	79fb      	ldrb	r3, [r7, #7]
}
   a183e:	4618      	mov	r0, r3
   a1840:	3708      	adds	r7, #8
   a1842:	46bd      	mov	sp, r7
   a1844:	bd80      	pop	{r7, pc}
   a1846:	bf00      	nop
   a1848:	20070bac 	.word	0x20070bac
   a184c:	00082ff1 	.word	0x00082ff1

000a1850 <CL_RinseAlarmActon>:


Cl_ReturnCodeType  CL_RinseAlarmActon(Cl_NewAlarmIdType cl_rinsealarmid)
{
   a1850:	b580      	push	{r7, lr}
   a1852:	b086      	sub	sp, #24
   a1854:	af00      	add	r7, sp, #0
   a1856:	4603      	mov	r3, r0
   a1858:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a185a:	2300      	movs	r3, #0
   a185c:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a185e:	f107 0308 	add.w	r3, r7, #8
   a1862:	2100      	movs	r1, #0
   a1864:	460a      	mov	r2, r1
   a1866:	801a      	strh	r2, [r3, #0]
   a1868:	460a      	mov	r2, r1
   a186a:	709a      	strb	r2, [r3, #2]
   a186c:	2300      	movs	r3, #0
   a186e:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a1870:	234d      	movs	r3, #77	; 0x4d
   a1872:	73fb      	strb	r3, [r7, #15]
			Cl_Uint16Type levelswitchstatus = 0;	
   a1874:	2300      	movs	r3, #0
   a1876:	81bb      	strh	r3, [r7, #12]
			static Cl_Uint8Type fillseccounter=0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   a1878:	2300      	movs	r3, #0
   a187a:	72fb      	strb	r3, [r7, #11]
		//Cl_Uint16Type var=0;

			

							
		switch(cl_rinsealarmid)
   a187c:	79fb      	ldrb	r3, [r7, #7]
   a187e:	3b01      	subs	r3, #1
   a1880:	2b3a      	cmp	r3, #58	; 0x3a
   a1882:	f200 8124 	bhi.w	a1ace <CL_RinseAlarmActon+0x27e>
   a1886:	a201      	add	r2, pc, #4	; (adr r2, a188c <CL_RinseAlarmActon+0x3c>)
   a1888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a188c:	000a1979 	.word	0x000a1979
   a1890:	000a1acf 	.word	0x000a1acf
   a1894:	000a19b3 	.word	0x000a19b3
   a1898:	000a19c7 	.word	0x000a19c7
   a189c:	000a1acf 	.word	0x000a1acf
   a18a0:	000a1acf 	.word	0x000a1acf
   a18a4:	000a1acf 	.word	0x000a1acf
   a18a8:	000a1a6b 	.word	0x000a1a6b
   a18ac:	000a1acf 	.word	0x000a1acf
   a18b0:	000a1acf 	.word	0x000a1acf
   a18b4:	000a1acf 	.word	0x000a1acf
   a18b8:	000a1a7f 	.word	0x000a1a7f
   a18bc:	000a1a8b 	.word	0x000a1a8b
   a18c0:	000a1a97 	.word	0x000a1a97
   a18c4:	000a19db 	.word	0x000a19db
   a18c8:	000a19db 	.word	0x000a19db
   a18cc:	000a19ef 	.word	0x000a19ef
   a18d0:	000a19ef 	.word	0x000a19ef
   a18d4:	000a1a03 	.word	0x000a1a03
   a18d8:	000a1a1b 	.word	0x000a1a1b
   a18dc:	000a1a2f 	.word	0x000a1a2f
   a18e0:	000a1a2f 	.word	0x000a1a2f
   a18e4:	000a1a43 	.word	0x000a1a43
   a18e8:	000a1a43 	.word	0x000a1a43
   a18ec:	000a1acf 	.word	0x000a1acf
   a18f0:	000a1abf 	.word	0x000a1abf
   a18f4:	000a1ad5 	.word	0x000a1ad5
   a18f8:	000a1ad5 	.word	0x000a1ad5
   a18fc:	000a1ad5 	.word	0x000a1ad5
   a1900:	000a1acf 	.word	0x000a1acf
   a1904:	000a1ad5 	.word	0x000a1ad5
   a1908:	000a1acf 	.word	0x000a1acf
   a190c:	000a1acf 	.word	0x000a1acf
   a1910:	000a1acf 	.word	0x000a1acf
   a1914:	000a1acf 	.word	0x000a1acf
   a1918:	000a1acf 	.word	0x000a1acf
   a191c:	000a1acf 	.word	0x000a1acf
   a1920:	000a1acf 	.word	0x000a1acf
   a1924:	000a1a57 	.word	0x000a1a57
   a1928:	000a1a57 	.word	0x000a1a57
   a192c:	000a198b 	.word	0x000a198b
   a1930:	000a1acf 	.word	0x000a1acf
   a1934:	000a199f 	.word	0x000a199f
   a1938:	000a1acf 	.word	0x000a1acf
   a193c:	000a1ad5 	.word	0x000a1ad5
   a1940:	000a1ad5 	.word	0x000a1ad5
   a1944:	000a1acf 	.word	0x000a1acf
   a1948:	000a1acf 	.word	0x000a1acf
   a194c:	000a1acf 	.word	0x000a1acf
   a1950:	000a1aa3 	.word	0x000a1aa3
   a1954:	000a1aa3 	.word	0x000a1aa3
   a1958:	000a1acf 	.word	0x000a1acf
   a195c:	000a1acf 	.word	0x000a1acf
   a1960:	000a1acf 	.word	0x000a1acf
   a1964:	000a1acf 	.word	0x000a1acf
   a1968:	000a1acf 	.word	0x000a1acf
   a196c:	000a1aaf 	.word	0x000a1aaf
   a1970:	000a1aaf 	.word	0x000a1aaf
   a1974:	000a1aaf 	.word	0x000a1aaf
		{
			
			
			case BLOODDOOR_STATUS_OPEN:
					sv_cntrl_setredalarm();
   a1978:	4b66      	ldr	r3, [pc, #408]	; (a1b14 <CL_RinseAlarmActon+0x2c4>)
   a197a:	4798      	blx	r3
					sv_cntrl_buzzer();
   a197c:	4b66      	ldr	r3, [pc, #408]	; (a1b18 <CL_RinseAlarmActon+0x2c8>)
   a197e:	4798      	blx	r3
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   a1980:	2100      	movs	r1, #0
   a1982:	2004      	movs	r0, #4
   a1984:	4b65      	ldr	r3, [pc, #404]	; (a1b1c <CL_RinseAlarmActon+0x2cc>)
   a1986:	4798      	blx	r3
				//	cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_ALARM,0);
			//		Cl_Rinse_StopRinse();
			//		cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
				
			break;
   a1988:	e0a5      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
			
			case ACID_IN_OPEN:
			sv_cntrl_setyellowalarm();
   a198a:	4b65      	ldr	r3, [pc, #404]	; (a1b20 <CL_RinseAlarmActon+0x2d0>)
   a198c:	4798      	blx	r3
			sv_cntrl_buzzer();
   a198e:	4b62      	ldr	r3, [pc, #392]	; (a1b18 <CL_RinseAlarmActon+0x2c8>)
   a1990:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a1992:	4b64      	ldr	r3, [pc, #400]	; (a1b24 <CL_RinseAlarmActon+0x2d4>)
   a1994:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a1996:	4b64      	ldr	r3, [pc, #400]	; (a1b28 <CL_RinseAlarmActon+0x2d8>)
   a1998:	2206      	movs	r2, #6
   a199a:	701a      	strb	r2, [r3, #0]
			break;
   a199c:	e09b      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
			
			case BICARB_IN_OPEN:
			sv_cntrl_setyellowalarm();
   a199e:	4b60      	ldr	r3, [pc, #384]	; (a1b20 <CL_RinseAlarmActon+0x2d0>)
   a19a0:	4798      	blx	r3
			sv_cntrl_buzzer();
   a19a2:	4b5d      	ldr	r3, [pc, #372]	; (a1b18 <CL_RinseAlarmActon+0x2c8>)
   a19a4:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a19a6:	4b5f      	ldr	r3, [pc, #380]	; (a1b24 <CL_RinseAlarmActon+0x2d4>)
   a19a8:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a19aa:	4b5f      	ldr	r3, [pc, #380]	; (a1b28 <CL_RinseAlarmActon+0x2d8>)
   a19ac:	2206      	movs	r2, #6
   a19ae:	701a      	strb	r2, [r3, #0]
			break;
   a19b0:	e091      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
			
			case HOLDER1STATUS_OPEN:
				sv_cntrl_setyellowalarm();
   a19b2:	4b5b      	ldr	r3, [pc, #364]	; (a1b20 <CL_RinseAlarmActon+0x2d0>)
   a19b4:	4798      	blx	r3
				sv_cntrl_buzzer();
   a19b6:	4b58      	ldr	r3, [pc, #352]	; (a1b18 <CL_RinseAlarmActon+0x2c8>)
   a19b8:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a19ba:	4b5a      	ldr	r3, [pc, #360]	; (a1b24 <CL_RinseAlarmActon+0x2d4>)
   a19bc:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a19be:	4b5a      	ldr	r3, [pc, #360]	; (a1b28 <CL_RinseAlarmActon+0x2d8>)
   a19c0:	2206      	movs	r2, #6
   a19c2:	701a      	strb	r2, [r3, #0]
			break;
   a19c4:	e087      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
			
			case HOLDER2STATUS_OPEN:
				sv_cntrl_setyellowalarm();
   a19c6:	4b56      	ldr	r3, [pc, #344]	; (a1b20 <CL_RinseAlarmActon+0x2d0>)
   a19c8:	4798      	blx	r3
				sv_cntrl_buzzer();
   a19ca:	4b53      	ldr	r3, [pc, #332]	; (a1b18 <CL_RinseAlarmActon+0x2c8>)
   a19cc:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a19ce:	4b55      	ldr	r3, [pc, #340]	; (a1b24 <CL_RinseAlarmActon+0x2d4>)
   a19d0:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a19d2:	4b55      	ldr	r3, [pc, #340]	; (a1b28 <CL_RinseAlarmActon+0x2d8>)
   a19d4:	2206      	movs	r2, #6
   a19d6:	701a      	strb	r2, [r3, #0]
			break;
   a19d8:	e07d      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
			break;*/
			
			
			case TEMP1_HIGH_THRESHOLD:
			case TEMP1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   a19da:	4b51      	ldr	r3, [pc, #324]	; (a1b20 <CL_RinseAlarmActon+0x2d0>)
   a19dc:	4798      	blx	r3
				sv_cntrl_buzzer();
   a19de:	4b4e      	ldr	r3, [pc, #312]	; (a1b18 <CL_RinseAlarmActon+0x2c8>)
   a19e0:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a19e2:	4b50      	ldr	r3, [pc, #320]	; (a1b24 <CL_RinseAlarmActon+0x2d4>)
   a19e4:	4798      	blx	r3
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a19e6:	4b50      	ldr	r3, [pc, #320]	; (a1b28 <CL_RinseAlarmActon+0x2d8>)
   a19e8:	2206      	movs	r2, #6
   a19ea:	701a      	strb	r2, [r3, #0]
			break;
   a19ec:	e073      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
		//	Cl_Rinse_StopRinse();
		//	cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
		//	break;
			
			case TEMP2_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   a19ee:	4b4c      	ldr	r3, [pc, #304]	; (a1b20 <CL_RinseAlarmActon+0x2d0>)
   a19f0:	4798      	blx	r3
			sv_cntrl_buzzer();
   a19f2:	4b49      	ldr	r3, [pc, #292]	; (a1b18 <CL_RinseAlarmActon+0x2c8>)
   a19f4:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a19f6:	4b4b      	ldr	r3, [pc, #300]	; (a1b24 <CL_RinseAlarmActon+0x2d4>)
   a19f8:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a19fa:	4b4b      	ldr	r3, [pc, #300]	; (a1b28 <CL_RinseAlarmActon+0x2d8>)
   a19fc:	2206      	movs	r2, #6
   a19fe:	701a      	strb	r2, [r3, #0]
			break;
   a1a00:	e069      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
			
			case TEMP3_HIGH_THRESHOLD:
					sv_cntrl_setyellowalarm();
   a1a02:	4b47      	ldr	r3, [pc, #284]	; (a1b20 <CL_RinseAlarmActon+0x2d0>)
   a1a04:	4798      	blx	r3
					sv_cntrl_buzzer();
   a1a06:	4b44      	ldr	r3, [pc, #272]	; (a1b18 <CL_RinseAlarmActon+0x2c8>)
   a1a08:	4798      	blx	r3
					Cl_Rinse_StopRinse();
   a1a0a:	4b46      	ldr	r3, [pc, #280]	; (a1b24 <CL_RinseAlarmActon+0x2d4>)
   a1a0c:	4798      	blx	r3
					Cl_Rinse_StopRinse();
   a1a0e:	4b45      	ldr	r3, [pc, #276]	; (a1b24 <CL_RinseAlarmActon+0x2d4>)
   a1a10:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a1a12:	4b45      	ldr	r3, [pc, #276]	; (a1b28 <CL_RinseAlarmActon+0x2d8>)
   a1a14:	2206      	movs	r2, #6
   a1a16:	701a      	strb	r2, [r3, #0]
			break;
   a1a18:	e05d      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
			case TEMP3_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   a1a1a:	4b41      	ldr	r3, [pc, #260]	; (a1b20 <CL_RinseAlarmActon+0x2d0>)
   a1a1c:	4798      	blx	r3
			sv_cntrl_buzzer();
   a1a1e:	4b3e      	ldr	r3, [pc, #248]	; (a1b18 <CL_RinseAlarmActon+0x2c8>)
   a1a20:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a1a22:	4b40      	ldr	r3, [pc, #256]	; (a1b24 <CL_RinseAlarmActon+0x2d4>)
   a1a24:	4798      	blx	r3
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a1a26:	4b40      	ldr	r3, [pc, #256]	; (a1b28 <CL_RinseAlarmActon+0x2d8>)
   a1a28:	2206      	movs	r2, #6
   a1a2a:	701a      	strb	r2, [r3, #0]
			break;
   a1a2c:	e053      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
			
			case PS1_HIGH_THRESHOLD:
			case PS1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   a1a2e:	4b3c      	ldr	r3, [pc, #240]	; (a1b20 <CL_RinseAlarmActon+0x2d0>)
   a1a30:	4798      	blx	r3
				sv_cntrl_buzzer();
   a1a32:	4b39      	ldr	r3, [pc, #228]	; (a1b18 <CL_RinseAlarmActon+0x2c8>)
   a1a34:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a1a36:	4b3b      	ldr	r3, [pc, #236]	; (a1b24 <CL_RinseAlarmActon+0x2d4>)
   a1a38:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a1a3a:	4b3b      	ldr	r3, [pc, #236]	; (a1b28 <CL_RinseAlarmActon+0x2d8>)
   a1a3c:	2206      	movs	r2, #6
   a1a3e:	701a      	strb	r2, [r3, #0]
			break;
   a1a40:	e049      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
			
			case	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   a1a42:	4b37      	ldr	r3, [pc, #220]	; (a1b20 <CL_RinseAlarmActon+0x2d0>)
   a1a44:	4798      	blx	r3
				sv_cntrl_buzzer();
   a1a46:	4b34      	ldr	r3, [pc, #208]	; (a1b18 <CL_RinseAlarmActon+0x2c8>)
   a1a48:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a1a4a:	4b36      	ldr	r3, [pc, #216]	; (a1b24 <CL_RinseAlarmActon+0x2d4>)
   a1a4c:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a1a4e:	4b36      	ldr	r3, [pc, #216]	; (a1b28 <CL_RinseAlarmActon+0x2d8>)
   a1a50:	2206      	movs	r2, #6
   a1a52:	701a      	strb	r2, [r3, #0]
			break;
   a1a54:	e03f      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
			
			case	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   a1a56:	4b32      	ldr	r3, [pc, #200]	; (a1b20 <CL_RinseAlarmActon+0x2d0>)
   a1a58:	4798      	blx	r3
				sv_cntrl_buzzer();
   a1a5a:	4b2f      	ldr	r3, [pc, #188]	; (a1b18 <CL_RinseAlarmActon+0x2c8>)
   a1a5c:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a1a5e:	4b31      	ldr	r3, [pc, #196]	; (a1b24 <CL_RinseAlarmActon+0x2d4>)
   a1a60:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a1a62:	4b31      	ldr	r3, [pc, #196]	; (a1b28 <CL_RinseAlarmActon+0x2d8>)
   a1a64:	2206      	movs	r2, #6
   a1a66:	701a      	strb	r2, [r3, #0]
			break;
   a1a68:	e035      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
			
			case COND_STATUS_HIGH:
				sv_cntrl_setyellowalarm();
   a1a6a:	4b2d      	ldr	r3, [pc, #180]	; (a1b20 <CL_RinseAlarmActon+0x2d0>)
   a1a6c:	4798      	blx	r3
				sv_cntrl_buzzer();
   a1a6e:	4b2a      	ldr	r3, [pc, #168]	; (a1b18 <CL_RinseAlarmActon+0x2c8>)
   a1a70:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a1a72:	4b2c      	ldr	r3, [pc, #176]	; (a1b24 <CL_RinseAlarmActon+0x2d4>)
   a1a74:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a1a76:	4b2c      	ldr	r3, [pc, #176]	; (a1b28 <CL_RinseAlarmActon+0x2d8>)
   a1a78:	2206      	movs	r2, #6
   a1a7a:	701a      	strb	r2, [r3, #0]
			break;
   a1a7c:	e02b      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
			
			case FLOW_NO_FLOW:
			
			Cl_Rinse_StopRinse();
   a1a7e:	4b29      	ldr	r3, [pc, #164]	; (a1b24 <CL_RinseAlarmActon+0x2d4>)
   a1a80:	4798      	blx	r3
		//	NewAlarmId = _FLOW_NO_FLOW;
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a1a82:	4b29      	ldr	r3, [pc, #164]	; (a1b28 <CL_RinseAlarmActon+0x2d8>)
   a1a84:	2206      	movs	r2, #6
   a1a86:	701a      	strb	r2, [r3, #0]
			break;
   a1a88:	e025      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
			case FLOW_LOW_FLOWRATE:
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
		//	NewAlarmId = _FLOW_LOW_FLOWRATE;
			Cl_Rinse_StopRinse();
   a1a8a:	4b26      	ldr	r3, [pc, #152]	; (a1b24 <CL_RinseAlarmActon+0x2d4>)
   a1a8c:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a1a8e:	4b26      	ldr	r3, [pc, #152]	; (a1b28 <CL_RinseAlarmActon+0x2d8>)
   a1a90:	2206      	movs	r2, #6
   a1a92:	701a      	strb	r2, [r3, #0]
			break;
   a1a94:	e01f      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
			
			case FLOW_HIGH_FLOWRATE:
		//	NewAlarmId = _FLOW_HIGH_FLOWRATE;
			Cl_Rinse_StopRinse();
   a1a96:	4b23      	ldr	r3, [pc, #140]	; (a1b24 <CL_RinseAlarmActon+0x2d4>)
   a1a98:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a1a9a:	4b23      	ldr	r3, [pc, #140]	; (a1b28 <CL_RinseAlarmActon+0x2d8>)
   a1a9c:	2206      	movs	r2, #6
   a1a9e:	701a      	strb	r2, [r3, #0]
			break;
   a1aa0:	e019      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
		
			case 	UFP_OVERRUN:
			case	UFP_UNDERRUN:
				//	NewAlarmId = _UF_ALARM_FOR_RINSE;
					Cl_Rinse_StopRinse();
   a1aa2:	4b20      	ldr	r3, [pc, #128]	; (a1b24 <CL_RinseAlarmActon+0x2d4>)
   a1aa4:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a1aa6:	4b20      	ldr	r3, [pc, #128]	; (a1b28 <CL_RinseAlarmActon+0x2d8>)
   a1aa8:	2206      	movs	r2, #6
   a1aaa:	701a      	strb	r2, [r3, #0]
			break;
   a1aac:	e013      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
			case 	BC_OVERRUN:
			case	BC_UNDERRUN:
			case	BC_FAILED:
				//	NewAlarmId = _BC_ALARM;
				sv_cntrl_setyellowalarm();                              // updated on 17.03.17
   a1aae:	4b1c      	ldr	r3, [pc, #112]	; (a1b20 <CL_RinseAlarmActon+0x2d0>)
   a1ab0:	4798      	blx	r3
					Cl_Rinse_StopRinse();
   a1ab2:	4b1c      	ldr	r3, [pc, #112]	; (a1b24 <CL_RinseAlarmActon+0x2d4>)
   a1ab4:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a1ab6:	4b1c      	ldr	r3, [pc, #112]	; (a1b28 <CL_RinseAlarmActon+0x2d8>)
   a1ab8:	2206      	movs	r2, #6
   a1aba:	701a      	strb	r2, [r3, #0]
			break;
   a1abc:	e00b      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
		//	NewAlarmId = _LEVEL_SWITCH_HIGH_TOGGLERATE;
			break;

			case BC_ALARM:
			
			sv_cntrl_setyellowalarm();                             
   a1abe:	4b18      	ldr	r3, [pc, #96]	; (a1b20 <CL_RinseAlarmActon+0x2d0>)
   a1ac0:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a1ac2:	4b18      	ldr	r3, [pc, #96]	; (a1b24 <CL_RinseAlarmActon+0x2d4>)
   a1ac4:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a1ac6:	4b18      	ldr	r3, [pc, #96]	; (a1b28 <CL_RinseAlarmActon+0x2d8>)
   a1ac8:	2206      	movs	r2, #6
   a1aca:	701a      	strb	r2, [r3, #0]
			
			break;
   a1acc:	e003      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
			case WATCHDOG_TIMER: //27
		//		NewAlarmId = _WATCHDOG_TIMER;
			break;
			default:
			cl_rinsealarmid = _NO_ALARM;
   a1ace:	2300      	movs	r3, #0
   a1ad0:	71fb      	strb	r3, [r7, #7]
			break;
   a1ad2:	e000      	b.n	a1ad6 <CL_RinseAlarmActon+0x286>
// 					Cl_Rinse_StopRinse();
// 					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
// 			break;

			case DE_CHAMBER_LOW: //23
			break;
   a1ad4:	bf00      	nop
			cl_rinsealarmid = _NO_ALARM;
			break;

		}
		
		 if(cl_rinsealarmid != _NO_ALARM)
   a1ad6:	79fb      	ldrb	r3, [r7, #7]
   a1ad8:	2b00      	cmp	r3, #0
   a1ada:	d013      	beq.n	a1b04 <CL_RinseAlarmActon+0x2b4>
		 {
			 

			
			data[0] = (Cl_Uint8Type)cl_rinsealarmid;
   a1adc:	79fb      	ldrb	r3, [r7, #7]
   a1ade:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a1ae0:	2301      	movs	r3, #1
   a1ae2:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   a1ae4:	2302      	movs	r3, #2
   a1ae6:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   a1ae8:	2307      	movs	r3, #7
   a1aea:	73fb      	strb	r3, [r7, #15]
			
			Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,3);
   a1aec:	f107 0108 	add.w	r1, r7, #8
   a1af0:	7bfb      	ldrb	r3, [r7, #15]
   a1af2:	2203      	movs	r2, #3
   a1af4:	4618      	mov	r0, r3
   a1af6:	4b0d      	ldr	r3, [pc, #52]	; (a1b2c <CL_RinseAlarmActon+0x2dc>)
   a1af8:	4798      	blx	r3
   a1afa:	4603      	mov	r3, r0
   a1afc:	75fb      	strb	r3, [r7, #23]
			cl_wait(10);
   a1afe:	200a      	movs	r0, #10
   a1b00:	4b0b      	ldr	r3, [pc, #44]	; (a1b30 <CL_RinseAlarmActon+0x2e0>)
   a1b02:	4798      	blx	r3
					

		 }
		 prevrinsealarm_id = cl_rinsealarmid;
   a1b04:	4a0b      	ldr	r2, [pc, #44]	; (a1b34 <CL_RinseAlarmActon+0x2e4>)
   a1b06:	79fb      	ldrb	r3, [r7, #7]
   a1b08:	7013      	strb	r3, [r2, #0]
		return CL_OK;	
   a1b0a:	2300      	movs	r3, #0
}
   a1b0c:	4618      	mov	r0, r3
   a1b0e:	3718      	adds	r7, #24
   a1b10:	46bd      	mov	sp, r7
   a1b12:	bd80      	pop	{r7, pc}
   a1b14:	00097c05 	.word	0x00097c05
   a1b18:	00097c41 	.word	0x00097c41
   a1b1c:	00091eb5 	.word	0x00091eb5
   a1b20:	00097c19 	.word	0x00097c19
   a1b24:	000a2415 	.word	0x000a2415
   a1b28:	2007286a 	.word	0x2007286a
   a1b2c:	00099729 	.word	0x00099729
   a1b30:	00091e2d 	.word	0x00091e2d
   a1b34:	2007288c 	.word	0x2007288c

000a1b38 <Cl_RinseSendAlarm>:
Cl_ReturnCodeType  Cl_RinseSendAlarm(Cl_NewAlarmIdType cl_rinsealarmId )
{
   a1b38:	b580      	push	{r7, lr}
   a1b3a:	b086      	sub	sp, #24
   a1b3c:	af00      	add	r7, sp, #0
   a1b3e:	4603      	mov	r3, r0
   a1b40:	71fb      	strb	r3, [r7, #7]
	
			Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a1b42:	2300      	movs	r3, #0
   a1b44:	75fb      	strb	r3, [r7, #23]
			 
			 
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a1b46:	f107 030c 	add.w	r3, r7, #12
   a1b4a:	2100      	movs	r1, #0
   a1b4c:	460a      	mov	r2, r1
   a1b4e:	801a      	strh	r2, [r3, #0]
   a1b50:	460a      	mov	r2, r1
   a1b52:	709a      	strb	r2, [r3, #2]
   a1b54:	2300      	movs	r3, #0
   a1b56:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a1b58:	234d      	movs	r3, #77	; 0x4d
   a1b5a:	73fb      	strb	r3, [r7, #15]
			if(cl_rinsealarmId != _NO_ALARM)
   a1b5c:	79fb      	ldrb	r3, [r7, #7]
   a1b5e:	2b00      	cmp	r3, #0
   a1b60:	d013      	beq.n	a1b8a <Cl_RinseSendAlarm+0x52>
			 {
				data[0] = (Cl_Uint8Type)cl_rinsealarmId;
   a1b62:	79fb      	ldrb	r3, [r7, #7]
   a1b64:	733b      	strb	r3, [r7, #12]
				data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a1b66:	2301      	movs	r3, #1
   a1b68:	737b      	strb	r3, [r7, #13]
				data[2] = (Cl_Uint8Type)CRITICAL;
   a1b6a:	2302      	movs	r3, #2
   a1b6c:	73bb      	strb	r3, [r7, #14]
				command = CON_TX_COMMAND_ALARM;
   a1b6e:	2307      	movs	r3, #7
   a1b70:	73fb      	strb	r3, [r7, #15]
			
				Cl_RetVal = Cl_SendDatatoconsole(command,&data,3);
   a1b72:	f107 010c 	add.w	r1, r7, #12
   a1b76:	7bfb      	ldrb	r3, [r7, #15]
   a1b78:	2203      	movs	r2, #3
   a1b7a:	4618      	mov	r0, r3
   a1b7c:	4b05      	ldr	r3, [pc, #20]	; (a1b94 <Cl_RinseSendAlarm+0x5c>)
   a1b7e:	4798      	blx	r3
   a1b80:	4603      	mov	r3, r0
   a1b82:	75fb      	strb	r3, [r7, #23]
				cl_wait(10);
   a1b84:	200a      	movs	r0, #10
   a1b86:	4b04      	ldr	r3, [pc, #16]	; (a1b98 <Cl_RinseSendAlarm+0x60>)
   a1b88:	4798      	blx	r3

			 }
}
   a1b8a:	bf00      	nop
   a1b8c:	4618      	mov	r0, r3
   a1b8e:	3718      	adds	r7, #24
   a1b90:	46bd      	mov	sp, r7
   a1b92:	bd80      	pop	{r7, pc}
   a1b94:	00099729 	.word	0x00099729
   a1b98:	00091e2d 	.word	0x00091e2d

000a1b9c <Cl_RinseFlowOn>:
Cl_ReturnCodeType  Cl_RinseFlowOn(void )
{
   a1b9c:	b580      	push	{r7, lr}
   a1b9e:	b082      	sub	sp, #8
   a1ba0:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a1ba2:	2300      	movs	r3, #0
   a1ba4:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_activate_valve(VALVE_ID1);
   a1ba6:	2001      	movs	r0, #1
   a1ba8:	4b04      	ldr	r3, [pc, #16]	; (a1bbc <Cl_RinseFlowOn+0x20>)
   a1baa:	4798      	blx	r3
	cl_gfillinprogress = true;
   a1bac:	4b04      	ldr	r3, [pc, #16]	; (a1bc0 <Cl_RinseFlowOn+0x24>)
   a1bae:	2201      	movs	r2, #1
   a1bb0:	701a      	strb	r2, [r3, #0]
	return Cl_RetVal;
   a1bb2:	79fb      	ldrb	r3, [r7, #7]
	
}
   a1bb4:	4618      	mov	r0, r3
   a1bb6:	3708      	adds	r7, #8
   a1bb8:	46bd      	mov	sp, r7
   a1bba:	bd80      	pop	{r7, pc}
   a1bbc:	000979ad 	.word	0x000979ad
   a1bc0:	20072885 	.word	0x20072885

000a1bc4 <Cl_RinseFlowOff>:

Cl_ReturnCodeType  Cl_RinseFlowOff(void )
{
   a1bc4:	b580      	push	{r7, lr}
   a1bc6:	b082      	sub	sp, #8
   a1bc8:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a1bca:	2300      	movs	r3, #0
   a1bcc:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_deactivate_valve(VALVE_ID1);
   a1bce:	2001      	movs	r0, #1
   a1bd0:	4b04      	ldr	r3, [pc, #16]	; (a1be4 <Cl_RinseFlowOff+0x20>)
   a1bd2:	4798      	blx	r3
	cl_gfillinprogress = false;
   a1bd4:	4b04      	ldr	r3, [pc, #16]	; (a1be8 <Cl_RinseFlowOff+0x24>)
   a1bd6:	2200      	movs	r2, #0
   a1bd8:	701a      	strb	r2, [r3, #0]
	return Cl_RetVal;
   a1bda:	79fb      	ldrb	r3, [r7, #7]
	
}
   a1bdc:	4618      	mov	r0, r3
   a1bde:	3708      	adds	r7, #8
   a1be0:	46bd      	mov	sp, r7
   a1be2:	bd80      	pop	{r7, pc}
   a1be4:	000979cd 	.word	0x000979cd
   a1be8:	20072885 	.word	0x20072885

000a1bec <Cl_RinseStop>:

Cl_ReturnCodeType  Cl_RinseStop(void)
{
   a1bec:	b580      	push	{r7, lr}
   a1bee:	b082      	sub	sp, #8
   a1bf0:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a1bf2:	2300      	movs	r3, #0
   a1bf4:	71fb      	strb	r3, [r7, #7]
	//sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
	Cl_bc_controller(BC_EVENT_STOP);
   a1bf6:	2005      	movs	r0, #5
   a1bf8:	4b04      	ldr	r3, [pc, #16]	; (a1c0c <Cl_RinseStop+0x20>)
   a1bfa:	4798      	blx	r3
	
	sv_cntrl_poweroffheater();
   a1bfc:	4b04      	ldr	r3, [pc, #16]	; (a1c10 <Cl_RinseStop+0x24>)
   a1bfe:	4798      	blx	r3
	return Cl_RetVal;
   a1c00:	79fb      	ldrb	r3, [r7, #7]
	
}
   a1c02:	4618      	mov	r0, r3
   a1c04:	3708      	adds	r7, #8
   a1c06:	46bd      	mov	sp, r7
   a1c08:	bd80      	pop	{r7, pc}
   a1c0a:	bf00      	nop
   a1c0c:	00083319 	.word	0x00083319
   a1c10:	00097999 	.word	0x00097999
   a1c14:	00000000 	.word	0x00000000

000a1c18 <Cl_Rinse_SendRinseStateData>:
Cl_ReturnCodeType Cl_Rinse_SendRinseStateData(void)
{
   a1c18:	b5f0      	push	{r4, r5, r6, r7, lr}
   a1c1a:	b08b      	sub	sp, #44	; 0x2c
   a1c1c:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_ReturnCodeType  Cl_rinseretcode = CL_OK;
   a1c1e:	2300      	movs	r3, #0
   a1c20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	StateDatatype data;
	Cl_Uint8Type count=0;
   a1c24:	2300      	movs	r3, #0
   a1c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Cl_Uint16Type ts2,temp=0,temp1=0,sensordata =0;
   a1c2a:	2300      	movs	r3, #0
   a1c2c:	827b      	strh	r3, [r7, #18]
   a1c2e:	2300      	movs	r3, #0
   a1c30:	84bb      	strh	r3, [r7, #36]	; 0x24
   a1c32:	2300      	movs	r3, #0
   a1c34:	823b      	strh	r3, [r7, #16]
	Cl_Uint8Type dataarray[12] =  {0,0,0,0,0,0,0,0,0,0,0,0};
   a1c36:	1d3b      	adds	r3, r7, #4
   a1c38:	2200      	movs	r2, #0
   a1c3a:	601a      	str	r2, [r3, #0]
   a1c3c:	605a      	str	r2, [r3, #4]
   a1c3e:	609a      	str	r2, [r3, #8]
	static timecount = 0;
	static float tmp3 = 0, tmp2 = 0;
	
	//Cl_Console_bulkdatatype 
	
	timecount++;
   a1c40:	4b93      	ldr	r3, [pc, #588]	; (a1e90 <Cl_Rinse_SendRinseStateData+0x278>)
   a1c42:	681b      	ldr	r3, [r3, #0]
   a1c44:	3301      	adds	r3, #1
   a1c46:	4a92      	ldr	r2, [pc, #584]	; (a1e90 <Cl_Rinse_SendRinseStateData+0x278>)
   a1c48:	6013      	str	r3, [r2, #0]

	if (timecount < 5)
   a1c4a:	4b91      	ldr	r3, [pc, #580]	; (a1e90 <Cl_Rinse_SendRinseStateData+0x278>)
   a1c4c:	681b      	ldr	r3, [r3, #0]
   a1c4e:	2b04      	cmp	r3, #4
   a1c50:	f340 81fb 	ble.w	a204a <Cl_Rinse_SendRinseStateData+0x432>
	{
		return;
	}
	else
	{
		timecount = 0;
   a1c54:	4b8e      	ldr	r3, [pc, #568]	; (a1e90 <Cl_Rinse_SendRinseStateData+0x278>)
   a1c56:	2200      	movs	r2, #0
   a1c58:	601a      	str	r2, [r3, #0]
	}
	
	dataarray[0] = CLEAN_DATA;
   a1c5a:	2301      	movs	r3, #1
   a1c5c:	713b      	strb	r3, [r7, #4]
	count++;
   a1c5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a1c62:	3301      	adds	r3, #1
   a1c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	//Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);


			Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   a1c68:	f107 0312 	add.w	r3, r7, #18
   a1c6c:	4619      	mov	r1, r3
   a1c6e:	2007      	movs	r0, #7
   a1c70:	4b88      	ldr	r3, [pc, #544]	; (a1e94 <Cl_Rinse_SendRinseStateData+0x27c>)
   a1c72:	4798      	blx	r3
		{
 			float cond_comp;
// 			float temp2;
// 			temp2 = temp * 0.8036;
			if (temp > 50)
   a1c74:	8a7b      	ldrh	r3, [r7, #18]
   a1c76:	2b32      	cmp	r3, #50	; 0x32
   a1c78:	f240 8138 	bls.w	a1eec <Cl_Rinse_SendRinseStateData+0x2d4>
			{
				//calibration_cond(temp2);
				cond =  -0.0001 * temp* temp  + 0.032 * temp  +0.91 + 0.4 ;
   a1c7c:	8a7b      	ldrh	r3, [r7, #18]
   a1c7e:	461a      	mov	r2, r3
   a1c80:	4b85      	ldr	r3, [pc, #532]	; (a1e98 <Cl_Rinse_SendRinseStateData+0x280>)
   a1c82:	4610      	mov	r0, r2
   a1c84:	4798      	blx	r3
   a1c86:	4c85      	ldr	r4, [pc, #532]	; (a1e9c <Cl_Rinse_SendRinseStateData+0x284>)
   a1c88:	a377      	add	r3, pc, #476	; (adr r3, a1e68 <Cl_Rinse_SendRinseStateData+0x250>)
   a1c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   a1c8e:	47a0      	blx	r4
   a1c90:	4603      	mov	r3, r0
   a1c92:	460c      	mov	r4, r1
   a1c94:	461d      	mov	r5, r3
   a1c96:	4626      	mov	r6, r4
   a1c98:	8a7b      	ldrh	r3, [r7, #18]
   a1c9a:	461a      	mov	r2, r3
   a1c9c:	4b7e      	ldr	r3, [pc, #504]	; (a1e98 <Cl_Rinse_SendRinseStateData+0x280>)
   a1c9e:	4610      	mov	r0, r2
   a1ca0:	4798      	blx	r3
   a1ca2:	4602      	mov	r2, r0
   a1ca4:	460b      	mov	r3, r1
   a1ca6:	4c7d      	ldr	r4, [pc, #500]	; (a1e9c <Cl_Rinse_SendRinseStateData+0x284>)
   a1ca8:	4628      	mov	r0, r5
   a1caa:	4631      	mov	r1, r6
   a1cac:	47a0      	blx	r4
   a1cae:	4603      	mov	r3, r0
   a1cb0:	460c      	mov	r4, r1
   a1cb2:	461d      	mov	r5, r3
   a1cb4:	4626      	mov	r6, r4
   a1cb6:	8a7b      	ldrh	r3, [r7, #18]
   a1cb8:	461a      	mov	r2, r3
   a1cba:	4b77      	ldr	r3, [pc, #476]	; (a1e98 <Cl_Rinse_SendRinseStateData+0x280>)
   a1cbc:	4610      	mov	r0, r2
   a1cbe:	4798      	blx	r3
   a1cc0:	4c76      	ldr	r4, [pc, #472]	; (a1e9c <Cl_Rinse_SendRinseStateData+0x284>)
   a1cc2:	a36b      	add	r3, pc, #428	; (adr r3, a1e70 <Cl_Rinse_SendRinseStateData+0x258>)
   a1cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   a1cc8:	47a0      	blx	r4
   a1cca:	4603      	mov	r3, r0
   a1ccc:	460c      	mov	r4, r1
   a1cce:	461a      	mov	r2, r3
   a1cd0:	4623      	mov	r3, r4
   a1cd2:	4c73      	ldr	r4, [pc, #460]	; (a1ea0 <Cl_Rinse_SendRinseStateData+0x288>)
   a1cd4:	4628      	mov	r0, r5
   a1cd6:	4631      	mov	r1, r6
   a1cd8:	47a0      	blx	r4
   a1cda:	4603      	mov	r3, r0
   a1cdc:	460c      	mov	r4, r1
   a1cde:	4618      	mov	r0, r3
   a1ce0:	4621      	mov	r1, r4
   a1ce2:	4c6f      	ldr	r4, [pc, #444]	; (a1ea0 <Cl_Rinse_SendRinseStateData+0x288>)
   a1ce4:	a364      	add	r3, pc, #400	; (adr r3, a1e78 <Cl_Rinse_SendRinseStateData+0x260>)
   a1ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
   a1cea:	47a0      	blx	r4
   a1cec:	4603      	mov	r3, r0
   a1cee:	460c      	mov	r4, r1
   a1cf0:	4618      	mov	r0, r3
   a1cf2:	4621      	mov	r1, r4
   a1cf4:	4c6a      	ldr	r4, [pc, #424]	; (a1ea0 <Cl_Rinse_SendRinseStateData+0x288>)
   a1cf6:	a362      	add	r3, pc, #392	; (adr r3, a1e80 <Cl_Rinse_SendRinseStateData+0x268>)
   a1cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   a1cfc:	47a0      	blx	r4
   a1cfe:	4603      	mov	r3, r0
   a1d00:	460c      	mov	r4, r1
   a1d02:	4619      	mov	r1, r3
   a1d04:	4622      	mov	r2, r4
   a1d06:	4b67      	ldr	r3, [pc, #412]	; (a1ea4 <Cl_Rinse_SendRinseStateData+0x28c>)
   a1d08:	4608      	mov	r0, r1
   a1d0a:	4611      	mov	r1, r2
   a1d0c:	4798      	blx	r3
   a1d0e:	4602      	mov	r2, r0
   a1d10:	4b65      	ldr	r3, [pc, #404]	; (a1ea8 <Cl_Rinse_SendRinseStateData+0x290>)
   a1d12:	601a      	str	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   a1d14:	f107 0310 	add.w	r3, r7, #16
   a1d18:	4619      	mov	r1, r3
   a1d1a:	2014      	movs	r0, #20
   a1d1c:	4b5d      	ldr	r3, [pc, #372]	; (a1e94 <Cl_Rinse_SendRinseStateData+0x27c>)
   a1d1e:	4798      	blx	r3
				{
				float ftemp,ftemp1,temp1;

				uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
   a1d20:	8a3b      	ldrh	r3, [r7, #16]
   a1d22:	461a      	mov	r2, r3
   a1d24:	f649 5308 	movw	r3, #40200	; 0x9d08
   a1d28:	fb03 f302 	mul.w	r3, r3, r2
   a1d2c:	2b00      	cmp	r3, #0
   a1d2e:	da02      	bge.n	a1d36 <Cl_Rinse_SendRinseStateData+0x11e>
   a1d30:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   a1d34:	33ff      	adds	r3, #255	; 0xff
   a1d36:	141b      	asrs	r3, r3, #16
   a1d38:	847b      	strh	r3, [r7, #34]	; 0x22
				res_temp_lookuptable(cal_data);
   a1d3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   a1d3c:	4618      	mov	r0, r3
   a1d3e:	4b5b      	ldr	r3, [pc, #364]	; (a1eac <Cl_Rinse_SendRinseStateData+0x294>)
   a1d40:	4798      	blx	r3
				tmp2 =	(tmp2*5 + res_temp_value)/6;
   a1d42:	4b5b      	ldr	r3, [pc, #364]	; (a1eb0 <Cl_Rinse_SendRinseStateData+0x298>)
   a1d44:	681a      	ldr	r2, [r3, #0]
   a1d46:	4b5b      	ldr	r3, [pc, #364]	; (a1eb4 <Cl_Rinse_SendRinseStateData+0x29c>)
   a1d48:	495b      	ldr	r1, [pc, #364]	; (a1eb8 <Cl_Rinse_SendRinseStateData+0x2a0>)
   a1d4a:	4610      	mov	r0, r2
   a1d4c:	4798      	blx	r3
   a1d4e:	4603      	mov	r3, r0
   a1d50:	4618      	mov	r0, r3
   a1d52:	4b5a      	ldr	r3, [pc, #360]	; (a1ebc <Cl_Rinse_SendRinseStateData+0x2a4>)
   a1d54:	681a      	ldr	r2, [r3, #0]
   a1d56:	4b5a      	ldr	r3, [pc, #360]	; (a1ec0 <Cl_Rinse_SendRinseStateData+0x2a8>)
   a1d58:	4611      	mov	r1, r2
   a1d5a:	4798      	blx	r3
   a1d5c:	4603      	mov	r3, r0
   a1d5e:	461a      	mov	r2, r3
   a1d60:	4b58      	ldr	r3, [pc, #352]	; (a1ec4 <Cl_Rinse_SendRinseStateData+0x2ac>)
   a1d62:	4959      	ldr	r1, [pc, #356]	; (a1ec8 <Cl_Rinse_SendRinseStateData+0x2b0>)
   a1d64:	4610      	mov	r0, r2
   a1d66:	4798      	blx	r3
   a1d68:	4603      	mov	r3, r0
   a1d6a:	461a      	mov	r2, r3
   a1d6c:	4b50      	ldr	r3, [pc, #320]	; (a1eb0 <Cl_Rinse_SendRinseStateData+0x298>)
   a1d6e:	601a      	str	r2, [r3, #0]
				uint16_t temp = tmp2/10;
   a1d70:	4b4f      	ldr	r3, [pc, #316]	; (a1eb0 <Cl_Rinse_SendRinseStateData+0x298>)
   a1d72:	681a      	ldr	r2, [r3, #0]
   a1d74:	4b53      	ldr	r3, [pc, #332]	; (a1ec4 <Cl_Rinse_SendRinseStateData+0x2ac>)
   a1d76:	4955      	ldr	r1, [pc, #340]	; (a1ecc <Cl_Rinse_SendRinseStateData+0x2b4>)
   a1d78:	4610      	mov	r0, r2
   a1d7a:	4798      	blx	r3
   a1d7c:	4603      	mov	r3, r0
   a1d7e:	461a      	mov	r2, r3
   a1d80:	4b53      	ldr	r3, [pc, #332]	; (a1ed0 <Cl_Rinse_SendRinseStateData+0x2b8>)
   a1d82:	4610      	mov	r0, r2
   a1d84:	4798      	blx	r3
   a1d86:	4603      	mov	r3, r0
   a1d88:	843b      	strh	r3, [r7, #32]
				temp = temp - 31 + 14;										// sensor offset
   a1d8a:	8c3b      	ldrh	r3, [r7, #32]
   a1d8c:	3b11      	subs	r3, #17
   a1d8e:	843b      	strh	r3, [r7, #32]
				cond_comp= cond/(1+(temp/10-25.0)*0.021);
   a1d90:	4b45      	ldr	r3, [pc, #276]	; (a1ea8 <Cl_Rinse_SendRinseStateData+0x290>)
   a1d92:	681a      	ldr	r2, [r3, #0]
   a1d94:	4b4f      	ldr	r3, [pc, #316]	; (a1ed4 <Cl_Rinse_SendRinseStateData+0x2bc>)
   a1d96:	4610      	mov	r0, r2
   a1d98:	4798      	blx	r3
   a1d9a:	4605      	mov	r5, r0
   a1d9c:	460e      	mov	r6, r1
   a1d9e:	8c3b      	ldrh	r3, [r7, #32]
   a1da0:	4a4d      	ldr	r2, [pc, #308]	; (a1ed8 <Cl_Rinse_SendRinseStateData+0x2c0>)
   a1da2:	fba2 2303 	umull	r2, r3, r2, r3
   a1da6:	08db      	lsrs	r3, r3, #3
   a1da8:	b29b      	uxth	r3, r3
   a1daa:	461a      	mov	r2, r3
   a1dac:	4b3a      	ldr	r3, [pc, #232]	; (a1e98 <Cl_Rinse_SendRinseStateData+0x280>)
   a1dae:	4610      	mov	r0, r2
   a1db0:	4798      	blx	r3
   a1db2:	4c4a      	ldr	r4, [pc, #296]	; (a1edc <Cl_Rinse_SendRinseStateData+0x2c4>)
   a1db4:	f04f 0200 	mov.w	r2, #0
   a1db8:	4b49      	ldr	r3, [pc, #292]	; (a1ee0 <Cl_Rinse_SendRinseStateData+0x2c8>)
   a1dba:	47a0      	blx	r4
   a1dbc:	4603      	mov	r3, r0
   a1dbe:	460c      	mov	r4, r1
   a1dc0:	4618      	mov	r0, r3
   a1dc2:	4621      	mov	r1, r4
   a1dc4:	4c35      	ldr	r4, [pc, #212]	; (a1e9c <Cl_Rinse_SendRinseStateData+0x284>)
   a1dc6:	a330      	add	r3, pc, #192	; (adr r3, a1e88 <Cl_Rinse_SendRinseStateData+0x270>)
   a1dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   a1dcc:	47a0      	blx	r4
   a1dce:	4603      	mov	r3, r0
   a1dd0:	460c      	mov	r4, r1
   a1dd2:	4618      	mov	r0, r3
   a1dd4:	4621      	mov	r1, r4
   a1dd6:	4c32      	ldr	r4, [pc, #200]	; (a1ea0 <Cl_Rinse_SendRinseStateData+0x288>)
   a1dd8:	f04f 0200 	mov.w	r2, #0
   a1ddc:	4b41      	ldr	r3, [pc, #260]	; (a1ee4 <Cl_Rinse_SendRinseStateData+0x2cc>)
   a1dde:	47a0      	blx	r4
   a1de0:	4603      	mov	r3, r0
   a1de2:	460c      	mov	r4, r1
   a1de4:	461a      	mov	r2, r3
   a1de6:	4623      	mov	r3, r4
   a1de8:	4c3f      	ldr	r4, [pc, #252]	; (a1ee8 <Cl_Rinse_SendRinseStateData+0x2d0>)
   a1dea:	4628      	mov	r0, r5
   a1dec:	4631      	mov	r1, r6
   a1dee:	47a0      	blx	r4
   a1df0:	4603      	mov	r3, r0
   a1df2:	460c      	mov	r4, r1
   a1df4:	4619      	mov	r1, r3
   a1df6:	4622      	mov	r2, r4
   a1df8:	4b2a      	ldr	r3, [pc, #168]	; (a1ea4 <Cl_Rinse_SendRinseStateData+0x28c>)
   a1dfa:	4608      	mov	r0, r1
   a1dfc:	4611      	mov	r1, r2
   a1dfe:	4798      	blx	r3
   a1e00:	4603      	mov	r3, r0
   a1e02:	61fb      	str	r3, [r7, #28]
// 											
// 											cond_final_X10000 =( cond_final_X10000 * 5.3 )/10;
				
				}
				//data.fourbytedata = (cond_comp);
				data.fourbytedata = cond_comp;
   a1e04:	4b32      	ldr	r3, [pc, #200]	; (a1ed0 <Cl_Rinse_SendRinseStateData+0x2b8>)
   a1e06:	69f8      	ldr	r0, [r7, #28]
   a1e08:	4798      	blx	r3
   a1e0a:	4603      	mov	r3, r0
   a1e0c:	617b      	str	r3, [r7, #20]
				dataarray[count++] = data.bytedata[0];
   a1e0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a1e12:	1c5a      	adds	r2, r3, #1
   a1e14:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a1e18:	7d3a      	ldrb	r2, [r7, #20]
   a1e1a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a1e1e:	440b      	add	r3, r1
   a1e20:	f803 2c24 	strb.w	r2, [r3, #-36]
				dataarray[count++] = data.bytedata[1];
   a1e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a1e28:	1c5a      	adds	r2, r3, #1
   a1e2a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a1e2e:	7d7a      	ldrb	r2, [r7, #21]
   a1e30:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a1e34:	440b      	add	r3, r1
   a1e36:	f803 2c24 	strb.w	r2, [r3, #-36]
				dataarray[count++] = data.bytedata[2];
   a1e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a1e3e:	1c5a      	adds	r2, r3, #1
   a1e40:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a1e44:	7dba      	ldrb	r2, [r7, #22]
   a1e46:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a1e4a:	440b      	add	r3, r1
   a1e4c:	f803 2c24 	strb.w	r2, [r3, #-36]
				dataarray[count++] = data.bytedata[3];
   a1e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a1e54:	1c5a      	adds	r2, r3, #1
   a1e56:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a1e5a:	7dfa      	ldrb	r2, [r7, #23]
   a1e5c:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a1e60:	440b      	add	r3, r1
   a1e62:	f803 2c24 	strb.w	r2, [r3, #-36]
   a1e66:	e06f      	b.n	a1f48 <Cl_Rinse_SendRinseStateData+0x330>
   a1e68:	eb1c432d 	.word	0xeb1c432d
   a1e6c:	bf1a36e2 	.word	0xbf1a36e2
   a1e70:	d2f1a9fc 	.word	0xd2f1a9fc
   a1e74:	3fa0624d 	.word	0x3fa0624d
   a1e78:	51eb851f 	.word	0x51eb851f
   a1e7c:	3fed1eb8 	.word	0x3fed1eb8
   a1e80:	9999999a 	.word	0x9999999a
   a1e84:	3fd99999 	.word	0x3fd99999
   a1e88:	24dd2f1b 	.word	0x24dd2f1b
   a1e8c:	3f958106 	.word	0x3f958106
   a1e90:	20072890 	.word	0x20072890
   a1e94:	0008d6b1 	.word	0x0008d6b1
   a1e98:	000a34c9 	.word	0x000a34c9
   a1e9c:	000a3595 	.word	0x000a3595
   a1ea0:	000a3231 	.word	0x000a3231
   a1ea4:	000a3b59 	.word	0x000a3b59
   a1ea8:	20072894 	.word	0x20072894
   a1eac:	0008e8e1 	.word	0x0008e8e1
   a1eb0:	20072898 	.word	0x20072898
   a1eb4:	000a3e15 	.word	0x000a3e15
   a1eb8:	40a00000 	.word	0x40a00000
   a1ebc:	20072630 	.word	0x20072630
   a1ec0:	000a3c05 	.word	0x000a3c05
   a1ec4:	000a3f7d 	.word	0x000a3f7d
   a1ec8:	40c00000 	.word	0x40c00000
   a1ecc:	41200000 	.word	0x41200000
   a1ed0:	000a41ed 	.word	0x000a41ed
   a1ed4:	000a34ed 	.word	0x000a34ed
   a1ed8:	cccccccd 	.word	0xcccccccd
   a1edc:	000a322d 	.word	0x000a322d
   a1ee0:	40390000 	.word	0x40390000
   a1ee4:	3ff00000 	.word	0x3ff00000
   a1ee8:	000a37e9 	.word	0x000a37e9
				}
			else
			{
				data.fourbytedata = 0;
   a1eec:	2300      	movs	r3, #0
   a1eee:	617b      	str	r3, [r7, #20]
				dataarray[count++] = data.bytedata[0];
   a1ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a1ef4:	1c5a      	adds	r2, r3, #1
   a1ef6:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a1efa:	7d3a      	ldrb	r2, [r7, #20]
   a1efc:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a1f00:	440b      	add	r3, r1
   a1f02:	f803 2c24 	strb.w	r2, [r3, #-36]
				dataarray[count++] = data.bytedata[1];
   a1f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a1f0a:	1c5a      	adds	r2, r3, #1
   a1f0c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a1f10:	7d7a      	ldrb	r2, [r7, #21]
   a1f12:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a1f16:	440b      	add	r3, r1
   a1f18:	f803 2c24 	strb.w	r2, [r3, #-36]
				dataarray[count++] = data.bytedata[2];
   a1f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a1f20:	1c5a      	adds	r2, r3, #1
   a1f22:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a1f26:	7dba      	ldrb	r2, [r7, #22]
   a1f28:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a1f2c:	440b      	add	r3, r1
   a1f2e:	f803 2c24 	strb.w	r2, [r3, #-36]
				dataarray[count++] = data.bytedata[3];
   a1f32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a1f36:	1c5a      	adds	r2, r3, #1
   a1f38:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a1f3c:	7dfa      	ldrb	r2, [r7, #23]
   a1f3e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a1f42:	440b      	add	r3, r1
   a1f44:	f803 2c24 	strb.w	r2, [r3, #-36]
			}
			
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   a1f48:	f107 0310 	add.w	r3, r7, #16
   a1f4c:	4619      	mov	r1, r3
   a1f4e:	2014      	movs	r0, #20
   a1f50:	4b40      	ldr	r3, [pc, #256]	; (a2054 <Cl_Rinse_SendRinseStateData+0x43c>)
   a1f52:	4798      	blx	r3
			{
				float ftemp,ftemp1,temp1;

				uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
   a1f54:	8a3b      	ldrh	r3, [r7, #16]
   a1f56:	461a      	mov	r2, r3
   a1f58:	f649 5308 	movw	r3, #40200	; 0x9d08
   a1f5c:	fb03 f302 	mul.w	r3, r3, r2
   a1f60:	2b00      	cmp	r3, #0
   a1f62:	da02      	bge.n	a1f6a <Cl_Rinse_SendRinseStateData+0x352>
   a1f64:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   a1f68:	33ff      	adds	r3, #255	; 0xff
   a1f6a:	141b      	asrs	r3, r3, #16
   a1f6c:	837b      	strh	r3, [r7, #26]
				res_temp_lookuptable(cal_data);
   a1f6e:	8b7b      	ldrh	r3, [r7, #26]
   a1f70:	4618      	mov	r0, r3
   a1f72:	4b39      	ldr	r3, [pc, #228]	; (a2058 <Cl_Rinse_SendRinseStateData+0x440>)
   a1f74:	4798      	blx	r3
			//	tmp3 =	(tmp3*5 + res_temp_value)/6;
				uint16_t temp = res_temp_value/10;
   a1f76:	4b39      	ldr	r3, [pc, #228]	; (a205c <Cl_Rinse_SendRinseStateData+0x444>)
   a1f78:	681a      	ldr	r2, [r3, #0]
   a1f7a:	4b39      	ldr	r3, [pc, #228]	; (a2060 <Cl_Rinse_SendRinseStateData+0x448>)
   a1f7c:	4939      	ldr	r1, [pc, #228]	; (a2064 <Cl_Rinse_SendRinseStateData+0x44c>)
   a1f7e:	4610      	mov	r0, r2
   a1f80:	4798      	blx	r3
   a1f82:	4603      	mov	r3, r0
   a1f84:	461a      	mov	r2, r3
   a1f86:	4b38      	ldr	r3, [pc, #224]	; (a2068 <Cl_Rinse_SendRinseStateData+0x450>)
   a1f88:	4610      	mov	r0, r2
   a1f8a:	4798      	blx	r3
   a1f8c:	4603      	mov	r3, r0
   a1f8e:	833b      	strh	r3, [r7, #24]
				temp = temp - 31 + 14;										// sensor offset			
   a1f90:	8b3b      	ldrh	r3, [r7, #24]
   a1f92:	3b11      	subs	r3, #17
   a1f94:	833b      	strh	r3, [r7, #24]
				tmp3 =(tmp3*5 + temp)/6;
   a1f96:	4b35      	ldr	r3, [pc, #212]	; (a206c <Cl_Rinse_SendRinseStateData+0x454>)
   a1f98:	681a      	ldr	r2, [r3, #0]
   a1f9a:	4b35      	ldr	r3, [pc, #212]	; (a2070 <Cl_Rinse_SendRinseStateData+0x458>)
   a1f9c:	4935      	ldr	r1, [pc, #212]	; (a2074 <Cl_Rinse_SendRinseStateData+0x45c>)
   a1f9e:	4610      	mov	r0, r2
   a1fa0:	4798      	blx	r3
   a1fa2:	4603      	mov	r3, r0
   a1fa4:	461c      	mov	r4, r3
   a1fa6:	8b3a      	ldrh	r2, [r7, #24]
   a1fa8:	4b33      	ldr	r3, [pc, #204]	; (a2078 <Cl_Rinse_SendRinseStateData+0x460>)
   a1faa:	4610      	mov	r0, r2
   a1fac:	4798      	blx	r3
   a1fae:	4602      	mov	r2, r0
   a1fb0:	4b32      	ldr	r3, [pc, #200]	; (a207c <Cl_Rinse_SendRinseStateData+0x464>)
   a1fb2:	4611      	mov	r1, r2
   a1fb4:	4620      	mov	r0, r4
   a1fb6:	4798      	blx	r3
   a1fb8:	4603      	mov	r3, r0
   a1fba:	461a      	mov	r2, r3
   a1fbc:	4b28      	ldr	r3, [pc, #160]	; (a2060 <Cl_Rinse_SendRinseStateData+0x448>)
   a1fbe:	4930      	ldr	r1, [pc, #192]	; (a2080 <Cl_Rinse_SendRinseStateData+0x468>)
   a1fc0:	4610      	mov	r0, r2
   a1fc2:	4798      	blx	r3
   a1fc4:	4603      	mov	r3, r0
   a1fc6:	461a      	mov	r2, r3
   a1fc8:	4b28      	ldr	r3, [pc, #160]	; (a206c <Cl_Rinse_SendRinseStateData+0x454>)
   a1fca:	601a      	str	r2, [r3, #0]
				data.fourbytedata = (uint16_t)(tmp3 );
   a1fcc:	4b27      	ldr	r3, [pc, #156]	; (a206c <Cl_Rinse_SendRinseStateData+0x454>)
   a1fce:	681a      	ldr	r2, [r3, #0]
   a1fd0:	4b25      	ldr	r3, [pc, #148]	; (a2068 <Cl_Rinse_SendRinseStateData+0x450>)
   a1fd2:	4610      	mov	r0, r2
   a1fd4:	4798      	blx	r3
   a1fd6:	4603      	mov	r3, r0
   a1fd8:	b29b      	uxth	r3, r3
   a1fda:	617b      	str	r3, [r7, #20]
				dataarray[count++] = data.bytedata[0];
   a1fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a1fe0:	1c5a      	adds	r2, r3, #1
   a1fe2:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a1fe6:	7d3a      	ldrb	r2, [r7, #20]
   a1fe8:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a1fec:	440b      	add	r3, r1
   a1fee:	f803 2c24 	strb.w	r2, [r3, #-36]
				dataarray[count++] = data.bytedata[1];
   a1ff2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a1ff6:	1c5a      	adds	r2, r3, #1
   a1ff8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a1ffc:	7d7a      	ldrb	r2, [r7, #21]
   a1ffe:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a2002:	440b      	add	r3, r1
   a2004:	f803 2c24 	strb.w	r2, [r3, #-36]
				dataarray[count++] = data.bytedata[2];
   a2008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a200c:	1c5a      	adds	r2, r3, #1
   a200e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a2012:	7dba      	ldrb	r2, [r7, #22]
   a2014:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a2018:	440b      	add	r3, r1
   a201a:	f803 2c24 	strb.w	r2, [r3, #-36]
				dataarray[count++] = data.bytedata[3];
   a201e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a2022:	1c5a      	adds	r2, r3, #1
   a2024:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a2028:	7dfa      	ldrb	r2, [r7, #23]
   a202a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a202e:	440b      	add	r3, r1
   a2030:	f803 2c24 	strb.w	r2, [r3, #-36]
			}
		
		Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
   a2034:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a2038:	1d3b      	adds	r3, r7, #4
   a203a:	4619      	mov	r1, r3
   a203c:	202a      	movs	r0, #42	; 0x2a
   a203e:	4b11      	ldr	r3, [pc, #68]	; (a2084 <Cl_Rinse_SendRinseStateData+0x46c>)
   a2040:	4798      	blx	r3
   a2042:	4603      	mov	r3, r0
   a2044:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   a2048:	e000      	b.n	a204c <Cl_Rinse_SendRinseStateData+0x434>
	
	timecount++;

	if (timecount < 5)
	{
		return;
   a204a:	bf00      	nop
			}
		
		Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
		

}
   a204c:	4618      	mov	r0, r3
   a204e:	372c      	adds	r7, #44	; 0x2c
   a2050:	46bd      	mov	sp, r7
   a2052:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a2054:	0008d6b1 	.word	0x0008d6b1
   a2058:	0008e8e1 	.word	0x0008e8e1
   a205c:	20072630 	.word	0x20072630
   a2060:	000a3f7d 	.word	0x000a3f7d
   a2064:	41200000 	.word	0x41200000
   a2068:	000a41ed 	.word	0x000a41ed
   a206c:	2007289c 	.word	0x2007289c
   a2070:	000a3e15 	.word	0x000a3e15
   a2074:	40a00000 	.word	0x40a00000
   a2078:	000a3d6d 	.word	0x000a3d6d
   a207c:	000a3c05 	.word	0x000a3c05
   a2080:	40c00000 	.word	0x40c00000
   a2084:	00099729 	.word	0x00099729

000a2088 <Cl_Rinse_StartRinse>:
	

	
}
Cl_ReturnCodeType Cl_Rinse_StartRinse(void)
{
   a2088:	b590      	push	{r4, r7, lr}
   a208a:	b089      	sub	sp, #36	; 0x24
   a208c:	af02      	add	r7, sp, #8
				Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   a208e:	2300      	movs	r3, #0
   a2090:	75bb      	strb	r3, [r7, #22]
				Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a2092:	234d      	movs	r3, #77	; 0x4d
   a2094:	757b      	strb	r3, [r7, #21]
				Cl_Uint8Type dataarray[4] = {0,0,0,0};
   a2096:	2300      	movs	r3, #0
   a2098:	60bb      	str	r3, [r7, #8]
				
				Cl_Uint8Type data = 0;
   a209a:	2300      	movs	r3, #0
   a209c:	753b      	strb	r3, [r7, #20]
				Cl_Uint16Type cl_rinse_acidstatus = 0, cl_rinse_bicarbstatus =0 , cl_rinse_holder1status = 0 , cl_rinse_holder2status = 0;
   a209e:	2300      	movs	r3, #0
   a20a0:	80fb      	strh	r3, [r7, #6]
   a20a2:	2300      	movs	r3, #0
   a20a4:	80bb      	strh	r3, [r7, #4]
   a20a6:	2300      	movs	r3, #0
   a20a8:	807b      	strh	r3, [r7, #2]
   a20aa:	2300      	movs	r3, #0
   a20ac:	803b      	strh	r3, [r7, #0]
				Cl_BoolType Cl_Rinsereaduinessflag = true;
   a20ae:	2301      	movs	r3, #1
   a20b0:	75fb      	strb	r3, [r7, #23]
					
				//Check for  rinse readiness and alarm status
				
				//Cl_checkRinseReadyness();
				SetHeaterState(CL_HEATER_STATE_OFF);
   a20b2:	2004      	movs	r0, #4
   a20b4:	4b20      	ldr	r3, [pc, #128]	; (a2138 <Cl_Rinse_StartRinse+0xb0>)
   a20b6:	4798      	blx	r3
				cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   a20b8:	2001      	movs	r0, #1
   a20ba:	4b20      	ldr	r3, [pc, #128]	; (a213c <Cl_Rinse_StartRinse+0xb4>)
   a20bc:	4798      	blx	r3
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_INLET,&cl_rinse_acidstatus);
   a20be:	1dbb      	adds	r3, r7, #6
   a20c0:	4619      	mov	r1, r3
   a20c2:	2020      	movs	r0, #32
   a20c4:	4b1e      	ldr	r3, [pc, #120]	; (a2140 <Cl_Rinse_StartRinse+0xb8>)
   a20c6:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_INLET,&cl_rinse_bicarbstatus);
   a20c8:	1d3b      	adds	r3, r7, #4
   a20ca:	4619      	mov	r1, r3
   a20cc:	2021      	movs	r0, #33	; 0x21
   a20ce:	4b1c      	ldr	r3, [pc, #112]	; (a2140 <Cl_Rinse_StartRinse+0xb8>)
   a20d0:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER1STATUS,&cl_rinse_holder1status);
   a20d2:	1cbb      	adds	r3, r7, #2
   a20d4:	4619      	mov	r1, r3
   a20d6:	2003      	movs	r0, #3
   a20d8:	4b19      	ldr	r3, [pc, #100]	; (a2140 <Cl_Rinse_StartRinse+0xb8>)
   a20da:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER2STATUS,&cl_rinse_holder2status);
   a20dc:	463b      	mov	r3, r7
   a20de:	4619      	mov	r1, r3
   a20e0:	2004      	movs	r0, #4
   a20e2:	4b17      	ldr	r3, [pc, #92]	; (a2140 <Cl_Rinse_StartRinse+0xb8>)
   a20e4:	4798      	blx	r3
				
				// below commented for tuv testing holder alarms were present even after hoolders were connected
				 if(cl_rinse_acidstatus == ACID_INLET_OPEN )
   a20e6:	88fb      	ldrh	r3, [r7, #6]
   a20e8:	2b00      	cmp	r3, #0
   a20ea:	d104      	bne.n	a20f6 <Cl_Rinse_StartRinse+0x6e>
				 {
					 Cl_RinseSendAlarm(ACID_IN_OPEN);
   a20ec:	2029      	movs	r0, #41	; 0x29
   a20ee:	4b15      	ldr	r3, [pc, #84]	; (a2144 <Cl_Rinse_StartRinse+0xbc>)
   a20f0:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a20f2:	2300      	movs	r3, #0
   a20f4:	75fb      	strb	r3, [r7, #23]
				 }
				 if(cl_rinse_bicarbstatus == BICARB_INLET_OPEN )
   a20f6:	88bb      	ldrh	r3, [r7, #4]
   a20f8:	2b00      	cmp	r3, #0
   a20fa:	d104      	bne.n	a2106 <Cl_Rinse_StartRinse+0x7e>
				 {
					  Cl_RinseSendAlarm(BICARB_IN_OPEN);
   a20fc:	202b      	movs	r0, #43	; 0x2b
   a20fe:	4b11      	ldr	r3, [pc, #68]	; (a2144 <Cl_Rinse_StartRinse+0xbc>)
   a2100:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a2102:	2300      	movs	r3, #0
   a2104:	75fb      	strb	r3, [r7, #23]
				 }	
				 if(cl_rinse_holder1status == CL_HOLDER1OPEN )  //CL_HOLDER1OPEN
   a2106:	887b      	ldrh	r3, [r7, #2]
   a2108:	2b01      	cmp	r3, #1
   a210a:	d104      	bne.n	a2116 <Cl_Rinse_StartRinse+0x8e>
				 {
					 Cl_RinseSendAlarm(HOLDER1STATUS_OPEN);
   a210c:	2003      	movs	r0, #3
   a210e:	4b0d      	ldr	r3, [pc, #52]	; (a2144 <Cl_Rinse_StartRinse+0xbc>)
   a2110:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a2112:	2300      	movs	r3, #0
   a2114:	75fb      	strb	r3, [r7, #23]
				 }
				 if(cl_rinse_holder2status == CL_HOLDER2OPEN )// CL_HOLDER1OPEN
   a2116:	883b      	ldrh	r3, [r7, #0]
   a2118:	2b01      	cmp	r3, #1
   a211a:	d104      	bne.n	a2126 <Cl_Rinse_StartRinse+0x9e>
				 {
					 Cl_RinseSendAlarm(HOLDER2STATUS_OPEN);
   a211c:	2004      	movs	r0, #4
   a211e:	4b09      	ldr	r3, [pc, #36]	; (a2144 <Cl_Rinse_StartRinse+0xbc>)
   a2120:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a2122:	2300      	movs	r3, #0
   a2124:	75fb      	strb	r3, [r7, #23]
				 }				 
				 if(Cl_Rinsereaduinessflag == false)
   a2126:	7dfb      	ldrb	r3, [r7, #23]
   a2128:	f083 0301 	eor.w	r3, r3, #1
   a212c:	b2db      	uxtb	r3, r3
   a212e:	2b00      	cmp	r3, #0
   a2130:	d00a      	beq.n	a2148 <Cl_Rinse_StartRinse+0xc0>
				 {
					 return CL_REJECTED;
   a2132:	2303      	movs	r3, #3
   a2134:	e139      	b.n	a23aa <Cl_Rinse_StartRinse+0x322>
   a2136:	bf00      	nop
   a2138:	00088a91 	.word	0x00088a91
   a213c:	000923ad 	.word	0x000923ad
   a2140:	0008d6b1 	.word	0x0008d6b1
   a2144:	000a1b39 	.word	0x000a1b39
				 }
				 
				sv_cntrl_resetgreenalarm();
   a2148:	4b9a      	ldr	r3, [pc, #616]	; (a23b4 <Cl_Rinse_StartRinse+0x32c>)
   a214a:	4798      	blx	r3
				Cl_RinseFlowOn();
   a214c:	4b9a      	ldr	r3, [pc, #616]	; (a23b8 <Cl_Rinse_StartRinse+0x330>)
   a214e:	4798      	blx	r3
				//sv_prop_startpropeo_aligning();
				sv_cntrl_activate_valve(VALVE_ID2);
   a2150:	2002      	movs	r0, #2
   a2152:	4b9a      	ldr	r3, [pc, #616]	; (a23bc <Cl_Rinse_StartRinse+0x334>)
   a2154:	4798      	blx	r3
				sv_cntrl_activate_valve(VALVE_ID3);
   a2156:	2003      	movs	r0, #3
   a2158:	4b98      	ldr	r3, [pc, #608]	; (a23bc <Cl_Rinse_StartRinse+0x334>)
   a215a:	4798      	blx	r3
				//	Cl_rinseretcode = sv_cntrl_setflowpath(BC_FLUSH_OPEN); // sanjeer BC_NEW
				
				Cl_rinseretcode = sv_cntrl_setpumpspeed(DCMOTOR2,1000);   // 900
   a215c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a2160:	2002      	movs	r0, #2
   a2162:	4b97      	ldr	r3, [pc, #604]	; (a23c0 <Cl_Rinse_StartRinse+0x338>)
   a2164:	4798      	blx	r3
   a2166:	4603      	mov	r3, r0
   a2168:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode = sv_cntrl_setpumpspeed(DCMOTOR1,1100);
   a216a:	f240 414c 	movw	r1, #1100	; 0x44c
   a216e:	2001      	movs	r0, #1
   a2170:	4b93      	ldr	r3, [pc, #588]	; (a23c0 <Cl_Rinse_StartRinse+0x338>)
   a2172:	4798      	blx	r3
   a2174:	4603      	mov	r3, r0
   a2176:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode =  sv_cntrl_activatepump(DCMOTOR1);
   a2178:	2001      	movs	r0, #1
   a217a:	4b92      	ldr	r3, [pc, #584]	; (a23c4 <Cl_Rinse_StartRinse+0x33c>)
   a217c:	4798      	blx	r3
   a217e:	4603      	mov	r3, r0
   a2180:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode =  sv_cntrl_activatepump(DCMOTOR2);
   a2182:	2002      	movs	r0, #2
   a2184:	4b8f      	ldr	r3, [pc, #572]	; (a23c4 <Cl_Rinse_StartRinse+0x33c>)
   a2186:	4798      	blx	r3
   a2188:	4603      	mov	r3, r0
   a218a:	75bb      	strb	r3, [r7, #22]

				Cl_Uint16Type potvalue = 0;
   a218c:	2300      	movs	r3, #0
   a218e:	827b      	strh	r3, [r7, #18]
				potvalue = (670 * 1024)/10000;                                 // 600
   a2190:	2344      	movs	r3, #68	; 0x44
   a2192:	827b      	strh	r3, [r7, #18]
				sv_cs_setpotvalue(potvalue);
   a2194:	8a7b      	ldrh	r3, [r7, #18]
   a2196:	4618      	mov	r0, r3
   a2198:	4b8b      	ldr	r3, [pc, #556]	; (a23c8 <Cl_Rinse_StartRinse+0x340>)
   a219a:	4798      	blx	r3
				
				Cl_Uint32Type temp = Treatdata[ID_dflow];
   a219c:	4b8b      	ldr	r3, [pc, #556]	; (a23cc <Cl_Rinse_StartRinse+0x344>)
   a219e:	695b      	ldr	r3, [r3, #20]
   a21a0:	60fb      	str	r3, [r7, #12]
				flow_rate = temp;
   a21a2:	4a8b      	ldr	r2, [pc, #556]	; (a23d0 <Cl_Rinse_StartRinse+0x348>)
   a21a4:	68fb      	ldr	r3, [r7, #12]
   a21a6:	6013      	str	r3, [r2, #0]
				
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,16000);
   a21a8:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
   a21ac:	2001      	movs	r0, #1
   a21ae:	4b89      	ldr	r3, [pc, #548]	; (a23d4 <Cl_Rinse_StartRinse+0x34c>)
   a21b0:	4798      	blx	r3
					cl_wait(100);
   a21b2:	2064      	movs	r0, #100	; 0x64
   a21b4:	4b88      	ldr	r3, [pc, #544]	; (a23d8 <Cl_Rinse_StartRinse+0x350>)
   a21b6:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_START,0);
   a21b8:	2100      	movs	r1, #0
   a21ba:	2002      	movs	r0, #2
   a21bc:	4b85      	ldr	r3, [pc, #532]	; (a23d4 <Cl_Rinse_StartRinse+0x34c>)
   a21be:	4798      	blx	r3
					cl_ufpumpFeedback_start();
   a21c0:	4b86      	ldr	r3, [pc, #536]	; (a23dc <Cl_Rinse_StartRinse+0x354>)
   a21c2:	4798      	blx	r3
					cl_wait(100);
   a21c4:	2064      	movs	r0, #100	; 0x64
   a21c6:	4b84      	ldr	r3, [pc, #528]	; (a23d8 <Cl_Rinse_StartRinse+0x350>)
   a21c8:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,12000);
   a21ca:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   a21ce:	2001      	movs	r0, #1
   a21d0:	4b80      	ldr	r3, [pc, #512]	; (a23d4 <Cl_Rinse_StartRinse+0x34c>)
   a21d2:	4798      	blx	r3
					cl_wait(100);
   a21d4:	2064      	movs	r0, #100	; 0x64
   a21d6:	4b80      	ldr	r3, [pc, #512]	; (a23d8 <Cl_Rinse_StartRinse+0x350>)
   a21d8:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,8000);
   a21da:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   a21de:	2001      	movs	r0, #1
   a21e0:	4b7c      	ldr	r3, [pc, #496]	; (a23d4 <Cl_Rinse_StartRinse+0x34c>)
   a21e2:	4798      	blx	r3
					cl_wait(100);
   a21e4:	2064      	movs	r0, #100	; 0x64
   a21e6:	4b7c      	ldr	r3, [pc, #496]	; (a23d8 <Cl_Rinse_StartRinse+0x350>)
   a21e8:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,150);
   a21ea:	2196      	movs	r1, #150	; 0x96
   a21ec:	2001      	movs	r0, #1
   a21ee:	4b79      	ldr	r3, [pc, #484]	; (a23d4 <Cl_Rinse_StartRinse+0x34c>)
   a21f0:	4798      	blx	r3
// 				cl_wait(100);
// 				sv_cntrl_setpumpspeed(UFPUMP,150);
// 				cl_wait(100);
// 				
				
				Cl_rinseretcode =  cl_deaeration_controller(CL_DEAER_EVENT_ACTIVATE);
   a21f2:	2000      	movs	r0, #0
   a21f4:	4b7a      	ldr	r3, [pc, #488]	; (a23e0 <Cl_Rinse_StartRinse+0x358>)
   a21f6:	4798      	blx	r3
   a21f8:	4603      	mov	r3, r0
   a21fa:	75bb      	strb	r3, [r7, #22]
				
				Cl_rinseretcode = Cl_bc_controller(BC_EVENT_START);
   a21fc:	2004      	movs	r0, #4
   a21fe:	4b79      	ldr	r3, [pc, #484]	; (a23e4 <Cl_Rinse_StartRinse+0x35c>)
   a2200:	4798      	blx	r3
   a2202:	4603      	mov	r3, r0
   a2204:	75bb      	strb	r3, [r7, #22]
		
				sv_prop_startopenfill(); 
   a2206:	4b78      	ldr	r3, [pc, #480]	; (a23e8 <Cl_Rinse_StartRinse+0x360>)
   a2208:	4798      	blx	r3
							//	sv_cntrl_deactivatepump(DCMOTOR1 );
							//	sv_cntrl_deactivatepump(DCMOTOR2 );
				if(Cl_rinseretcode == CL_OK)
   a220a:	7dbb      	ldrb	r3, [r7, #22]
   a220c:	2b00      	cmp	r3, #0
   a220e:	f040 80cb 	bne.w	a23a8 <Cl_Rinse_StartRinse+0x320>
				{
					

					//Reset the  OPENFILL time count
					Cl_RinseMinutescounter = 0;
   a2212:	4b76      	ldr	r3, [pc, #472]	; (a23ec <Cl_Rinse_StartRinse+0x364>)
   a2214:	2200      	movs	r2, #0
   a2216:	601a      	str	r2, [r3, #0]
					Cl_RinseTotalMinutescounter = 0;
   a2218:	4b75      	ldr	r3, [pc, #468]	; (a23f0 <Cl_Rinse_StartRinse+0x368>)
   a221a:	2200      	movs	r2, #0
   a221c:	601a      	str	r2, [r3, #0]
					Cl_RinseOpenFillTimeOut = false;
   a221e:	4b75      	ldr	r3, [pc, #468]	; (a23f4 <Cl_Rinse_StartRinse+0x36c>)
   a2220:	2200      	movs	r2, #0
   a2222:	701a      	strb	r2, [r3, #0]

					

					sv_cntrl_activatevenousclamp();
   a2224:	4b74      	ldr	r3, [pc, #464]	; (a23f8 <Cl_Rinse_StartRinse+0x370>)
   a2226:	4798      	blx	r3
					Cl_rinseretcode =  cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   a2228:	2001      	movs	r0, #1
   a222a:	4b74      	ldr	r3, [pc, #464]	; (a23fc <Cl_Rinse_StartRinse+0x374>)
   a222c:	4798      	blx	r3
   a222e:	4603      	mov	r3, r0
   a2230:	75bb      	strb	r3, [r7, #22]
					//Cl_Rinse_ResetAlertsforReassertion();
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);	
   a2232:	2300      	movs	r3, #0
   a2234:	9300      	str	r3, [sp, #0]
   a2236:	f04f 0300 	mov.w	r3, #0
   a223a:	f04f 0200 	mov.w	r2, #0
   a223e:	2101      	movs	r1, #1
   a2240:	2001      	movs	r0, #1
   a2242:	4c6f      	ldr	r4, [pc, #444]	; (a2400 <Cl_Rinse_StartRinse+0x378>)
   a2244:	47a0      	blx	r4
   a2246:	4603      	mov	r3, r0
   a2248:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);	
   a224a:	2300      	movs	r3, #0
   a224c:	9300      	str	r3, [sp, #0]
   a224e:	f04f 0300 	mov.w	r3, #0
   a2252:	f04f 0200 	mov.w	r2, #0
   a2256:	2100      	movs	r1, #0
   a2258:	2029      	movs	r0, #41	; 0x29
   a225a:	4c69      	ldr	r4, [pc, #420]	; (a2400 <Cl_Rinse_StartRinse+0x378>)
   a225c:	47a0      	blx	r4
   a225e:	4603      	mov	r3, r0
   a2260:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);			
   a2262:	2300      	movs	r3, #0
   a2264:	9300      	str	r3, [sp, #0]
   a2266:	f04f 0300 	mov.w	r3, #0
   a226a:	f04f 0200 	mov.w	r2, #0
   a226e:	2100      	movs	r1, #0
   a2270:	202b      	movs	r0, #43	; 0x2b
   a2272:	4c63      	ldr	r4, [pc, #396]	; (a2400 <Cl_Rinse_StartRinse+0x378>)
   a2274:	47a0      	blx	r4
   a2276:	4603      	mov	r3, r0
   a2278:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a227a:	2300      	movs	r3, #0
   a227c:	9300      	str	r3, [sp, #0]
   a227e:	f04f 0300 	mov.w	r3, #0
   a2282:	f04f 0200 	mov.w	r2, #0
   a2286:	2101      	movs	r1, #1
   a2288:	2003      	movs	r0, #3
   a228a:	4c5d      	ldr	r4, [pc, #372]	; (a2400 <Cl_Rinse_StartRinse+0x378>)
   a228c:	47a0      	blx	r4
   a228e:	4603      	mov	r3, r0
   a2290:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a2292:	2300      	movs	r3, #0
   a2294:	9300      	str	r3, [sp, #0]
   a2296:	f04f 0300 	mov.w	r3, #0
   a229a:	f04f 0200 	mov.w	r2, #0
   a229e:	2101      	movs	r1, #1
   a22a0:	2004      	movs	r0, #4
   a22a2:	4c57      	ldr	r4, [pc, #348]	; (a2400 <Cl_Rinse_StartRinse+0x378>)
   a22a4:	47a0      	blx	r4
   a22a6:	4603      	mov	r3, r0
   a22a8:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_OFF_TO_ON,LOGIC_LOW,0,0,0);
   a22aa:	2300      	movs	r3, #0
   a22ac:	9300      	str	r3, [sp, #0]
   a22ae:	f04f 0300 	mov.w	r3, #0
   a22b2:	f04f 0200 	mov.w	r2, #0
   a22b6:	2100      	movs	r1, #0
   a22b8:	203d      	movs	r0, #61	; 0x3d
   a22ba:	4c51      	ldr	r4, [pc, #324]	; (a2400 <Cl_Rinse_StartRinse+0x378>)
   a22bc:	47a0      	blx	r4
   a22be:	4603      	mov	r3, r0
   a22c0:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_ON_TO_OFF,LOGIC_HIGH,0,0,0);
   a22c2:	2300      	movs	r3, #0
   a22c4:	9300      	str	r3, [sp, #0]
   a22c6:	f04f 0300 	mov.w	r3, #0
   a22ca:	f04f 0200 	mov.w	r2, #0
   a22ce:	2101      	movs	r1, #1
   a22d0:	203e      	movs	r0, #62	; 0x3e
   a22d2:	4c4b      	ldr	r4, [pc, #300]	; (a2400 <Cl_Rinse_StartRinse+0x378>)
   a22d4:	47a0      	blx	r4
   a22d6:	4603      	mov	r3, r0
   a22d8:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BC_ALARM,0,0,0,0);
   a22da:	2300      	movs	r3, #0
   a22dc:	9300      	str	r3, [sp, #0]
   a22de:	f04f 0300 	mov.w	r3, #0
   a22e2:	f04f 0200 	mov.w	r2, #0
   a22e6:	2100      	movs	r1, #0
   a22e8:	201a      	movs	r0, #26
   a22ea:	4c45      	ldr	r4, [pc, #276]	; (a2400 <Cl_Rinse_StartRinse+0x378>)
   a22ec:	47a0      	blx	r4
   a22ee:	4603      	mov	r3, r0
   a22f0:	75bb      	strb	r3, [r7, #22]
					
					
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_LOW_FLOWRATE,0,0,0,0);
   a22f2:	2300      	movs	r3, #0
   a22f4:	9300      	str	r3, [sp, #0]
   a22f6:	f04f 0300 	mov.w	r3, #0
   a22fa:	f04f 0200 	mov.w	r2, #0
   a22fe:	2100      	movs	r1, #0
   a2300:	200d      	movs	r0, #13
   a2302:	4c3f      	ldr	r4, [pc, #252]	; (a2400 <Cl_Rinse_StartRinse+0x378>)
   a2304:	47a0      	blx	r4
   a2306:	4603      	mov	r3, r0
   a2308:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_NO_FLOW,0,0,0,0);
   a230a:	2300      	movs	r3, #0
   a230c:	9300      	str	r3, [sp, #0]
   a230e:	f04f 0300 	mov.w	r3, #0
   a2312:	f04f 0200 	mov.w	r2, #0
   a2316:	2100      	movs	r1, #0
   a2318:	200c      	movs	r0, #12
   a231a:	4c39      	ldr	r4, [pc, #228]	; (a2400 <Cl_Rinse_StartRinse+0x378>)
   a231c:	47a0      	blx	r4
   a231e:	4603      	mov	r3, r0
   a2320:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_HIGH_FLOWRATE,0,1500,0,0);
   a2322:	2300      	movs	r3, #0
   a2324:	9300      	str	r3, [sp, #0]
   a2326:	f04f 0300 	mov.w	r3, #0
   a232a:	4a36      	ldr	r2, [pc, #216]	; (a2404 <Cl_Rinse_StartRinse+0x37c>)
   a232c:	2100      	movs	r1, #0
   a232e:	200e      	movs	r0, #14
   a2330:	4c33      	ldr	r4, [pc, #204]	; (a2400 <Cl_Rinse_StartRinse+0x378>)
   a2332:	47a0      	blx	r4
   a2334:	4603      	mov	r3, r0
   a2336:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   a2338:	2101      	movs	r1, #1
   a233a:	203d      	movs	r0, #61	; 0x3d
   a233c:	4b32      	ldr	r3, [pc, #200]	; (a2408 <Cl_Rinse_StartRinse+0x380>)
   a233e:	4798      	blx	r3
   a2340:	4603      	mov	r3, r0
   a2342:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );					
   a2344:	2101      	movs	r1, #1
   a2346:	203e      	movs	r0, #62	; 0x3e
   a2348:	4b2f      	ldr	r3, [pc, #188]	; (a2408 <Cl_Rinse_StartRinse+0x380>)
   a234a:	4798      	blx	r3
   a234c:	4603      	mov	r3, r0
   a234e:	75bb      	strb	r3, [r7, #22]
				//	Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );					
// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,true );
   a2350:	2101      	movs	r1, #1
   a2352:	2029      	movs	r0, #41	; 0x29
   a2354:	4b2c      	ldr	r3, [pc, #176]	; (a2408 <Cl_Rinse_StartRinse+0x380>)
   a2356:	4798      	blx	r3
   a2358:	4603      	mov	r3, r0
   a235a:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,true );
   a235c:	2101      	movs	r1, #1
   a235e:	202b      	movs	r0, #43	; 0x2b
   a2360:	4b29      	ldr	r3, [pc, #164]	; (a2408 <Cl_Rinse_StartRinse+0x380>)
   a2362:	4798      	blx	r3
   a2364:	4603      	mov	r3, r0
   a2366:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
   a2368:	2101      	movs	r1, #1
   a236a:	2003      	movs	r0, #3
   a236c:	4b26      	ldr	r3, [pc, #152]	; (a2408 <Cl_Rinse_StartRinse+0x380>)
   a236e:	4798      	blx	r3
   a2370:	4603      	mov	r3, r0
   a2372:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
   a2374:	2101      	movs	r1, #1
   a2376:	2004      	movs	r0, #4
   a2378:	4b23      	ldr	r3, [pc, #140]	; (a2408 <Cl_Rinse_StartRinse+0x380>)
   a237a:	4798      	blx	r3
   a237c:	4603      	mov	r3, r0
   a237e:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(BC_ALARM,true);
   a2380:	2101      	movs	r1, #1
   a2382:	201a      	movs	r0, #26
   a2384:	4b20      	ldr	r3, [pc, #128]	; (a2408 <Cl_Rinse_StartRinse+0x380>)
   a2386:	4798      	blx	r3
   a2388:	4603      	mov	r3, r0
   a238a:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
					

					
					if(Current_sense_trigger)
   a238c:	4b1f      	ldr	r3, [pc, #124]	; (a240c <Cl_Rinse_StartRinse+0x384>)
   a238e:	781b      	ldrb	r3, [r3, #0]
   a2390:	2b00      	cmp	r3, #0
   a2392:	d005      	beq.n	a23a0 <Cl_Rinse_StartRinse+0x318>
					{
						Cl_rinseretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   a2394:	2101      	movs	r1, #1
   a2396:	203c      	movs	r0, #60	; 0x3c
   a2398:	4b1b      	ldr	r3, [pc, #108]	; (a2408 <Cl_Rinse_StartRinse+0x380>)
   a239a:	4798      	blx	r3
   a239c:	4603      	mov	r3, r0
   a239e:	75bb      	strb	r3, [r7, #22]
					else
					{
						//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
					}
											
					Cl_rinseretcode = Cl_Rinse_ResetAlertsforReassertion();
   a23a0:	4b1b      	ldr	r3, [pc, #108]	; (a2410 <Cl_Rinse_StartRinse+0x388>)
   a23a2:	4798      	blx	r3
   a23a4:	4603      	mov	r3, r0
   a23a6:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode = SetHeaterState(CL_HEATER_STATE_START);
					

					
				}
					return CL_OK;
   a23a8:	2300      	movs	r3, #0
}
   a23aa:	4618      	mov	r0, r3
   a23ac:	371c      	adds	r7, #28
   a23ae:	46bd      	mov	sp, r7
   a23b0:	bd90      	pop	{r4, r7, pc}
   a23b2:	bf00      	nop
   a23b4:	00097c7d 	.word	0x00097c7d
   a23b8:	000a1b9d 	.word	0x000a1b9d
   a23bc:	000979ad 	.word	0x000979ad
   a23c0:	00097a25 	.word	0x00097a25
   a23c4:	0009790d 	.word	0x0009790d
   a23c8:	00097e55 	.word	0x00097e55
   a23cc:	200731a4 	.word	0x200731a4
   a23d0:	200720f0 	.word	0x200720f0
   a23d4:	00093cd9 	.word	0x00093cd9
   a23d8:	00091e2d 	.word	0x00091e2d
   a23dc:	00093c41 	.word	0x00093c41
   a23e0:	000922ed 	.word	0x000922ed
   a23e4:	00083319 	.word	0x00083319
   a23e8:	00097e05 	.word	0x00097e05
   a23ec:	20072870 	.word	0x20072870
   a23f0:	2007287c 	.word	0x2007287c
   a23f4:	20072884 	.word	0x20072884
   a23f8:	00097af9 	.word	0x00097af9
   a23fc:	000923ad 	.word	0x000923ad
   a2400:	00082ea1 	.word	0x00082ea1
   a2404:	44bb8000 	.word	0x44bb8000
   a2408:	00082efd 	.word	0x00082efd
   a240c:	200709ee 	.word	0x200709ee
   a2410:	000a1725 	.word	0x000a1725

000a2414 <Cl_Rinse_StopRinse>:
Cl_ReturnCodeType Cl_Rinse_StopRinse(void)
{
   a2414:	b580      	push	{r7, lr}
   a2416:	b082      	sub	sp, #8
   a2418:	af00      	add	r7, sp, #0
				Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   a241a:	2300      	movs	r3, #0
   a241c:	71fb      	strb	r3, [r7, #7]
				Cl_Uint8Type data;
				
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false );
   a241e:	2100      	movs	r1, #0
   a2420:	2001      	movs	r0, #1
   a2422:	4b3d      	ldr	r3, [pc, #244]	; (a2518 <Cl_Rinse_StopRinse+0x104>)
   a2424:	4798      	blx	r3
   a2426:	4603      	mov	r3, r0
   a2428:	71fb      	strb	r3, [r7, #7]
				//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
				//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,false );
   a242a:	2100      	movs	r1, #0
   a242c:	203d      	movs	r0, #61	; 0x3d
   a242e:	4b3a      	ldr	r3, [pc, #232]	; (a2518 <Cl_Rinse_StopRinse+0x104>)
   a2430:	4798      	blx	r3
   a2432:	4603      	mov	r3, r0
   a2434:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,false );
   a2436:	2100      	movs	r1, #0
   a2438:	203e      	movs	r0, #62	; 0x3e
   a243a:	4b37      	ldr	r3, [pc, #220]	; (a2518 <Cl_Rinse_StopRinse+0x104>)
   a243c:	4798      	blx	r3
   a243e:	4603      	mov	r3, r0
   a2440:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a2442:	2100      	movs	r1, #0
   a2444:	200d      	movs	r0, #13
   a2446:	4b34      	ldr	r3, [pc, #208]	; (a2518 <Cl_Rinse_StopRinse+0x104>)
   a2448:	4798      	blx	r3
   a244a:	4603      	mov	r3, r0
   a244c:	71fb      	strb	r3, [r7, #7]
				 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );
   a244e:	2100      	movs	r1, #0
   a2450:	200c      	movs	r0, #12
   a2452:	4b31      	ldr	r3, [pc, #196]	; (a2518 <Cl_Rinse_StopRinse+0x104>)
   a2454:	4798      	blx	r3
   a2456:	4603      	mov	r3, r0
   a2458:	71fb      	strb	r3, [r7, #7]
				 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a245a:	2100      	movs	r1, #0
   a245c:	200d      	movs	r0, #13
   a245e:	4b2e      	ldr	r3, [pc, #184]	; (a2518 <Cl_Rinse_StopRinse+0x104>)
   a2460:	4798      	blx	r3
   a2462:	4603      	mov	r3, r0
   a2464:	71fb      	strb	r3, [r7, #7]
				// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a2466:	2100      	movs	r1, #0
   a2468:	2029      	movs	r0, #41	; 0x29
   a246a:	4b2b      	ldr	r3, [pc, #172]	; (a2518 <Cl_Rinse_StopRinse+0x104>)
   a246c:	4798      	blx	r3
   a246e:	4603      	mov	r3, r0
   a2470:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a2472:	2100      	movs	r1, #0
   a2474:	202b      	movs	r0, #43	; 0x2b
   a2476:	4b28      	ldr	r3, [pc, #160]	; (a2518 <Cl_Rinse_StopRinse+0x104>)
   a2478:	4798      	blx	r3
   a247a:	4603      	mov	r3, r0
   a247c:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a247e:	2100      	movs	r1, #0
   a2480:	2003      	movs	r0, #3
   a2482:	4b25      	ldr	r3, [pc, #148]	; (a2518 <Cl_Rinse_StopRinse+0x104>)
   a2484:	4798      	blx	r3
   a2486:	4603      	mov	r3, r0
   a2488:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a248a:	2100      	movs	r1, #0
   a248c:	2004      	movs	r0, #4
   a248e:	4b22      	ldr	r3, [pc, #136]	; (a2518 <Cl_Rinse_StopRinse+0x104>)
   a2490:	4798      	blx	r3
   a2492:	4603      	mov	r3, r0
   a2494:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(BC_ALARM,false);
   a2496:	2100      	movs	r1, #0
   a2498:	201a      	movs	r0, #26
   a249a:	4b1f      	ldr	r3, [pc, #124]	; (a2518 <Cl_Rinse_StopRinse+0x104>)
   a249c:	4798      	blx	r3
   a249e:	4603      	mov	r3, r0
   a24a0:	71fb      	strb	r3, [r7, #7]
				
				Cl_Rinse_ResetAlertsforReassertion();
   a24a2:	4b1e      	ldr	r3, [pc, #120]	; (a251c <Cl_Rinse_StopRinse+0x108>)
   a24a4:	4798      	blx	r3
				
				if(!((cl_rinsestate == CL_RINSE_STATE_IDLE ) || (cl_rinsestate == CL_RINSE_STATE_STOPPED ) ||(cl_rinsestate == CL_RINSE_STATE_CRITICAL_ALARM )  ))
   a24a6:	4b1e      	ldr	r3, [pc, #120]	; (a2520 <Cl_Rinse_StopRinse+0x10c>)
   a24a8:	781b      	ldrb	r3, [r3, #0]
   a24aa:	2b00      	cmp	r3, #0
   a24ac:	d02e      	beq.n	a250c <Cl_Rinse_StopRinse+0xf8>
   a24ae:	4b1c      	ldr	r3, [pc, #112]	; (a2520 <Cl_Rinse_StopRinse+0x10c>)
   a24b0:	781b      	ldrb	r3, [r3, #0]
   a24b2:	2b08      	cmp	r3, #8
   a24b4:	d02a      	beq.n	a250c <Cl_Rinse_StopRinse+0xf8>
   a24b6:	4b1a      	ldr	r3, [pc, #104]	; (a2520 <Cl_Rinse_StopRinse+0x10c>)
   a24b8:	781b      	ldrb	r3, [r3, #0]
   a24ba:	2b06      	cmp	r3, #6
   a24bc:	d026      	beq.n	a250c <Cl_Rinse_StopRinse+0xf8>
				{
					
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DOOR",4);
				sv_cntrl_activatevenousclamp();
   a24be:	4b19      	ldr	r3, [pc, #100]	; (a2524 <Cl_Rinse_StopRinse+0x110>)
   a24c0:	4798      	blx	r3
				Cl_Rinsesecondscounter = 0;
   a24c2:	4b19      	ldr	r3, [pc, #100]	; (a2528 <Cl_Rinse_StopRinse+0x114>)
   a24c4:	2200      	movs	r2, #0
   a24c6:	601a      	str	r2, [r3, #0]
				Cl_RinseMinutescounter = 0;
   a24c8:	4b18      	ldr	r3, [pc, #96]	; (a252c <Cl_Rinse_StopRinse+0x118>)
   a24ca:	2200      	movs	r2, #0
   a24cc:	601a      	str	r2, [r3, #0]
				Cl_RinseTotalMinutescounter = 0;
   a24ce:	4b18      	ldr	r3, [pc, #96]	; (a2530 <Cl_Rinse_StopRinse+0x11c>)
   a24d0:	2200      	movs	r2, #0
   a24d2:	601a      	str	r2, [r3, #0]
				Cl_RinsesTotalhourscounter = 0 ;
   a24d4:	4b17      	ldr	r3, [pc, #92]	; (a2534 <Cl_Rinse_StopRinse+0x120>)
   a24d6:	2200      	movs	r2, #0
   a24d8:	601a      	str	r2, [r3, #0]
				//Cl_rinseretcode = sv_cntrl_poweroffheater();
				Cl_bc_controller(BC_EVENT_STOP);
   a24da:	2005      	movs	r0, #5
   a24dc:	4b16      	ldr	r3, [pc, #88]	; (a2538 <Cl_Rinse_StopRinse+0x124>)
   a24de:	4798      	blx	r3
				Cl_bc_controller(BC_EVENT_STOP_RINSE);
   a24e0:	200d      	movs	r0, #13
   a24e2:	4b15      	ldr	r3, [pc, #84]	; (a2538 <Cl_Rinse_StopRinse+0x124>)
   a24e4:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_STOP,0);
   a24e6:	2100      	movs	r1, #0
   a24e8:	2004      	movs	r0, #4
   a24ea:	4b14      	ldr	r3, [pc, #80]	; (a253c <Cl_Rinse_StopRinse+0x128>)
   a24ec:	4798      	blx	r3
				sv_cntrl_poweroffheater();
   a24ee:	4b14      	ldr	r3, [pc, #80]	; (a2540 <Cl_Rinse_StopRinse+0x12c>)
   a24f0:	4798      	blx	r3
				sv_prop_stopmixing();
   a24f2:	4b14      	ldr	r3, [pc, #80]	; (a2544 <Cl_Rinse_StopRinse+0x130>)
   a24f4:	4798      	blx	r3
				//Cl_rinseretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
				cl_rinsestate = CL_RINSE_STATE_IDLE;
   a24f6:	4b0a      	ldr	r3, [pc, #40]	; (a2520 <Cl_Rinse_StopRinse+0x10c>)
   a24f8:	2200      	movs	r2, #0
   a24fa:	701a      	strb	r2, [r3, #0]
				Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_STOPPED,&data,0);
   a24fc:	1dbb      	adds	r3, r7, #6
   a24fe:	2200      	movs	r2, #0
   a2500:	4619      	mov	r1, r3
   a2502:	2022      	movs	r0, #34	; 0x22
   a2504:	4b10      	ldr	r3, [pc, #64]	; (a2548 <Cl_Rinse_StopRinse+0x134>)
   a2506:	4798      	blx	r3
   a2508:	4603      	mov	r3, r0
   a250a:	71fb      	strb	r3, [r7, #7]
				
					
				}
			
				return Cl_rinseretcode;
   a250c:	79fb      	ldrb	r3, [r7, #7]
}
   a250e:	4618      	mov	r0, r3
   a2510:	3708      	adds	r7, #8
   a2512:	46bd      	mov	sp, r7
   a2514:	bd80      	pop	{r7, pc}
   a2516:	bf00      	nop
   a2518:	00082efd 	.word	0x00082efd
   a251c:	000a1725 	.word	0x000a1725
   a2520:	2007286a 	.word	0x2007286a
   a2524:	00097af9 	.word	0x00097af9
   a2528:	2007286c 	.word	0x2007286c
   a252c:	20072870 	.word	0x20072870
   a2530:	2007287c 	.word	0x2007287c
   a2534:	20072880 	.word	0x20072880
   a2538:	00083319 	.word	0x00083319
   a253c:	00093cd9 	.word	0x00093cd9
   a2540:	00097999 	.word	0x00097999
   a2544:	00097da1 	.word	0x00097da1
   a2548:	00099729 	.word	0x00099729

000a254c <Cl_Standby_Controller>:
   a254c:	b580      	push	{r7, lr}
   a254e:	b088      	sub	sp, #32
   a2550:	af00      	add	r7, sp, #0
   a2552:	4603      	mov	r3, r0
   a2554:	71fb      	strb	r3, [r7, #7]
   a2556:	234d      	movs	r3, #77	; 0x4d
   a2558:	77fb      	strb	r3, [r7, #31]
   a255a:	2300      	movs	r3, #0
   a255c:	773b      	strb	r3, [r7, #28]
   a255e:	f107 021d 	add.w	r2, r7, #29
   a2562:	79fb      	ldrb	r3, [r7, #7]
   a2564:	4611      	mov	r1, r2
   a2566:	4618      	mov	r0, r3
   a2568:	4bbd      	ldr	r3, [pc, #756]	; (a2860 <Cl_Standby_Controller+0x314>)
   a256a:	4798      	blx	r3
   a256c:	4603      	mov	r3, r0
   a256e:	77bb      	strb	r3, [r7, #30]
   a2570:	4bbc      	ldr	r3, [pc, #752]	; (a2864 <Cl_Standby_Controller+0x318>)
   a2572:	781b      	ldrb	r3, [r3, #0]
   a2574:	2b0a      	cmp	r3, #10
   a2576:	f200 83ed 	bhi.w	a2d54 <Cl_Standby_Controller+0x808>
   a257a:	a201      	add	r2, pc, #4	; (adr r2, a2580 <Cl_Standby_Controller+0x34>)
   a257c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a2580:	000a2d55 	.word	0x000a2d55
   a2584:	000a25ad 	.word	0x000a25ad
   a2588:	000a2665 	.word	0x000a2665
   a258c:	000a290b 	.word	0x000a290b
   a2590:	000a2a2f 	.word	0x000a2a2f
   a2594:	000a2b0d 	.word	0x000a2b0d
   a2598:	000a2bbf 	.word	0x000a2bbf
   a259c:	000a2c45 	.word	0x000a2c45
   a25a0:	000a2ccd 	.word	0x000a2ccd
   a25a4:	000a2d55 	.word	0x000a2d55
   a25a8:	000a2d55 	.word	0x000a2d55
   a25ac:	7f7b      	ldrb	r3, [r7, #29]
   a25ae:	3b01      	subs	r3, #1
   a25b0:	2b0f      	cmp	r3, #15
   a25b2:	d853      	bhi.n	a265c <Cl_Standby_Controller+0x110>
   a25b4:	a201      	add	r2, pc, #4	; (adr r2, a25bc <Cl_Standby_Controller+0x70>)
   a25b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a25ba:	bf00      	nop
   a25bc:	000a25fd 	.word	0x000a25fd
   a25c0:	000a265d 	.word	0x000a265d
   a25c4:	000a265d 	.word	0x000a265d
   a25c8:	000a265d 	.word	0x000a265d
   a25cc:	000a265d 	.word	0x000a265d
   a25d0:	000a265d 	.word	0x000a265d
   a25d4:	000a265d 	.word	0x000a265d
   a25d8:	000a265d 	.word	0x000a265d
   a25dc:	000a265d 	.word	0x000a265d
   a25e0:	000a265d 	.word	0x000a265d
   a25e4:	000a265d 	.word	0x000a265d
   a25e8:	000a265d 	.word	0x000a265d
   a25ec:	000a265d 	.word	0x000a265d
   a25f0:	000a261d 	.word	0x000a261d
   a25f4:	000a2627 	.word	0x000a2627
   a25f8:	000a2631 	.word	0x000a2631
   a25fc:	2316      	movs	r3, #22
   a25fe:	77fb      	strb	r3, [r7, #31]
   a2600:	2311      	movs	r3, #17
   a2602:	763b      	strb	r3, [r7, #24]
   a2604:	230e      	movs	r3, #14
   a2606:	767b      	strb	r3, [r7, #25]
   a2608:	f107 0118 	add.w	r1, r7, #24
   a260c:	7ffb      	ldrb	r3, [r7, #31]
   a260e:	2202      	movs	r2, #2
   a2610:	4618      	mov	r0, r3
   a2612:	4b95      	ldr	r3, [pc, #596]	; (a2868 <Cl_Standby_Controller+0x31c>)
   a2614:	4798      	blx	r3
   a2616:	4603      	mov	r3, r0
   a2618:	77bb      	strb	r3, [r7, #30]
   a261a:	e022      	b.n	a2662 <Cl_Standby_Controller+0x116>
   a261c:	2100      	movs	r1, #0
   a261e:	2002      	movs	r0, #2
   a2620:	4b92      	ldr	r3, [pc, #584]	; (a286c <Cl_Standby_Controller+0x320>)
   a2622:	4798      	blx	r3
   a2624:	e01d      	b.n	a2662 <Cl_Standby_Controller+0x116>
   a2626:	2100      	movs	r1, #0
   a2628:	2004      	movs	r0, #4
   a262a:	4b90      	ldr	r3, [pc, #576]	; (a286c <Cl_Standby_Controller+0x320>)
   a262c:	4798      	blx	r3
   a262e:	e018      	b.n	a2662 <Cl_Standby_Controller+0x116>
   a2630:	4b8f      	ldr	r3, [pc, #572]	; (a2870 <Cl_Standby_Controller+0x324>)
   a2632:	7e1b      	ldrb	r3, [r3, #24]
   a2634:	2b00      	cmp	r3, #0
   a2636:	d013      	beq.n	a2660 <Cl_Standby_Controller+0x114>
   a2638:	4b8d      	ldr	r3, [pc, #564]	; (a2870 <Cl_Standby_Controller+0x324>)
   a263a:	791b      	ldrb	r3, [r3, #4]
   a263c:	743b      	strb	r3, [r7, #16]
   a263e:	4b8c      	ldr	r3, [pc, #560]	; (a2870 <Cl_Standby_Controller+0x324>)
   a2640:	795b      	ldrb	r3, [r3, #5]
   a2642:	747b      	strb	r3, [r7, #17]
   a2644:	4b8a      	ldr	r3, [pc, #552]	; (a2870 <Cl_Standby_Controller+0x324>)
   a2646:	799b      	ldrb	r3, [r3, #6]
   a2648:	74bb      	strb	r3, [r7, #18]
   a264a:	4b89      	ldr	r3, [pc, #548]	; (a2870 <Cl_Standby_Controller+0x324>)
   a264c:	79db      	ldrb	r3, [r3, #7]
   a264e:	74fb      	strb	r3, [r7, #19]
   a2650:	8a3b      	ldrh	r3, [r7, #16]
   a2652:	4619      	mov	r1, r3
   a2654:	2001      	movs	r0, #1
   a2656:	4b85      	ldr	r3, [pc, #532]	; (a286c <Cl_Standby_Controller+0x320>)
   a2658:	4798      	blx	r3
   a265a:	e001      	b.n	a2660 <Cl_Standby_Controller+0x114>
   a265c:	bf00      	nop
   a265e:	e37a      	b.n	a2d56 <Cl_Standby_Controller+0x80a>
   a2660:	bf00      	nop
   a2662:	e378      	b.n	a2d56 <Cl_Standby_Controller+0x80a>
   a2664:	7f7b      	ldrb	r3, [r7, #29]
   a2666:	3b01      	subs	r3, #1
   a2668:	2b0c      	cmp	r3, #12
   a266a:	f200 8148 	bhi.w	a28fe <Cl_Standby_Controller+0x3b2>
   a266e:	a201      	add	r2, pc, #4	; (adr r2, a2674 <Cl_Standby_Controller+0x128>)
   a2670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a2674:	000a28bd 	.word	0x000a28bd
   a2678:	000a28ff 	.word	0x000a28ff
   a267c:	000a28ff 	.word	0x000a28ff
   a2680:	000a28ff 	.word	0x000a28ff
   a2684:	000a28ff 	.word	0x000a28ff
   a2688:	000a28dd 	.word	0x000a28dd
   a268c:	000a28f1 	.word	0x000a28f1
   a2690:	000a28ff 	.word	0x000a28ff
   a2694:	000a28c5 	.word	0x000a28c5
   a2698:	000a26b1 	.word	0x000a26b1
   a269c:	000a2739 	.word	0x000a2739
   a26a0:	000a26a9 	.word	0x000a26a9
   a26a4:	000a28ff 	.word	0x000a28ff
   a26a8:	4b6e      	ldr	r3, [pc, #440]	; (a2864 <Cl_Standby_Controller+0x318>)
   a26aa:	2201      	movs	r2, #1
   a26ac:	701a      	strb	r2, [r3, #0]
   a26ae:	e12b      	b.n	a2908 <Cl_Standby_Controller+0x3bc>
   a26b0:	4b6f      	ldr	r3, [pc, #444]	; (a2870 <Cl_Standby_Controller+0x324>)
   a26b2:	7e1b      	ldrb	r3, [r3, #24]
   a26b4:	2b00      	cmp	r3, #0
   a26b6:	f000 8124 	beq.w	a2902 <Cl_Standby_Controller+0x3b6>
   a26ba:	4b6d      	ldr	r3, [pc, #436]	; (a2870 <Cl_Standby_Controller+0x324>)
   a26bc:	791b      	ldrb	r3, [r3, #4]
   a26be:	2b01      	cmp	r3, #1
   a26c0:	d002      	beq.n	a26c8 <Cl_Standby_Controller+0x17c>
   a26c2:	2b21      	cmp	r3, #33	; 0x21
   a26c4:	d017      	beq.n	a26f6 <Cl_Standby_Controller+0x1aa>
   a26c6:	e036      	b.n	a2736 <Cl_Standby_Controller+0x1ea>
   a26c8:	2316      	movs	r3, #22
   a26ca:	77fb      	strb	r3, [r7, #31]
   a26cc:	2301      	movs	r3, #1
   a26ce:	763b      	strb	r3, [r7, #24]
   a26d0:	f107 0318 	add.w	r3, r7, #24
   a26d4:	3301      	adds	r3, #1
   a26d6:	4619      	mov	r1, r3
   a26d8:	2001      	movs	r0, #1
   a26da:	4b66      	ldr	r3, [pc, #408]	; (a2874 <Cl_Standby_Controller+0x328>)
   a26dc:	4798      	blx	r3
   a26de:	4603      	mov	r3, r0
   a26e0:	77bb      	strb	r3, [r7, #30]
   a26e2:	f107 0118 	add.w	r1, r7, #24
   a26e6:	7ffb      	ldrb	r3, [r7, #31]
   a26e8:	2202      	movs	r2, #2
   a26ea:	4618      	mov	r0, r3
   a26ec:	4b5e      	ldr	r3, [pc, #376]	; (a2868 <Cl_Standby_Controller+0x31c>)
   a26ee:	4798      	blx	r3
   a26f0:	4603      	mov	r3, r0
   a26f2:	77bb      	strb	r3, [r7, #30]
   a26f4:	e01f      	b.n	a2736 <Cl_Standby_Controller+0x1ea>
   a26f6:	2316      	movs	r3, #22
   a26f8:	77fb      	strb	r3, [r7, #31]
   a26fa:	2323      	movs	r3, #35	; 0x23
   a26fc:	763b      	strb	r3, [r7, #24]
   a26fe:	f107 0318 	add.w	r3, r7, #24
   a2702:	3301      	adds	r3, #1
   a2704:	4619      	mov	r1, r3
   a2706:	2001      	movs	r0, #1
   a2708:	4b5a      	ldr	r3, [pc, #360]	; (a2874 <Cl_Standby_Controller+0x328>)
   a270a:	4798      	blx	r3
   a270c:	4603      	mov	r3, r0
   a270e:	77bb      	strb	r3, [r7, #30]
   a2710:	f107 0318 	add.w	r3, r7, #24
   a2714:	3301      	adds	r3, #1
   a2716:	4619      	mov	r1, r3
   a2718:	2028      	movs	r0, #40	; 0x28
   a271a:	4b56      	ldr	r3, [pc, #344]	; (a2874 <Cl_Standby_Controller+0x328>)
   a271c:	4798      	blx	r3
   a271e:	4603      	mov	r3, r0
   a2720:	77bb      	strb	r3, [r7, #30]
   a2722:	f107 0118 	add.w	r1, r7, #24
   a2726:	7ffb      	ldrb	r3, [r7, #31]
   a2728:	2202      	movs	r2, #2
   a272a:	4618      	mov	r0, r3
   a272c:	4b4e      	ldr	r3, [pc, #312]	; (a2868 <Cl_Standby_Controller+0x31c>)
   a272e:	4798      	blx	r3
   a2730:	4603      	mov	r3, r0
   a2732:	77bb      	strb	r3, [r7, #30]
   a2734:	bf00      	nop
   a2736:	e0e4      	b.n	a2902 <Cl_Standby_Controller+0x3b6>
   a2738:	4b4d      	ldr	r3, [pc, #308]	; (a2870 <Cl_Standby_Controller+0x324>)
   a273a:	7e1b      	ldrb	r3, [r3, #24]
   a273c:	2b00      	cmp	r3, #0
   a273e:	f000 80e2 	beq.w	a2906 <Cl_Standby_Controller+0x3ba>
   a2742:	4b4b      	ldr	r3, [pc, #300]	; (a2870 <Cl_Standby_Controller+0x324>)
   a2744:	795b      	ldrb	r3, [r3, #5]
   a2746:	733b      	strb	r3, [r7, #12]
   a2748:	4b49      	ldr	r3, [pc, #292]	; (a2870 <Cl_Standby_Controller+0x324>)
   a274a:	799b      	ldrb	r3, [r3, #6]
   a274c:	737b      	strb	r3, [r7, #13]
   a274e:	4b48      	ldr	r3, [pc, #288]	; (a2870 <Cl_Standby_Controller+0x324>)
   a2750:	79db      	ldrb	r3, [r3, #7]
   a2752:	73bb      	strb	r3, [r7, #14]
   a2754:	4b46      	ldr	r3, [pc, #280]	; (a2870 <Cl_Standby_Controller+0x324>)
   a2756:	7a1b      	ldrb	r3, [r3, #8]
   a2758:	73fb      	strb	r3, [r7, #15]
   a275a:	4b45      	ldr	r3, [pc, #276]	; (a2870 <Cl_Standby_Controller+0x324>)
   a275c:	791b      	ldrb	r3, [r3, #4]
   a275e:	3b05      	subs	r3, #5
   a2760:	2b20      	cmp	r3, #32
   a2762:	f200 80a9 	bhi.w	a28b8 <Cl_Standby_Controller+0x36c>
   a2766:	a201      	add	r2, pc, #4	; (adr r2, a276c <Cl_Standby_Controller+0x220>)
   a2768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a276c:	000a28b9 	.word	0x000a28b9
   a2770:	000a28b9 	.word	0x000a28b9
   a2774:	000a28b9 	.word	0x000a28b9
   a2778:	000a28b9 	.word	0x000a28b9
   a277c:	000a28b9 	.word	0x000a28b9
   a2780:	000a28b9 	.word	0x000a28b9
   a2784:	000a28b9 	.word	0x000a28b9
   a2788:	000a28b9 	.word	0x000a28b9
   a278c:	000a28b9 	.word	0x000a28b9
   a2790:	000a28b9 	.word	0x000a28b9
   a2794:	000a28b9 	.word	0x000a28b9
   a2798:	000a28b9 	.word	0x000a28b9
   a279c:	000a28b9 	.word	0x000a28b9
   a27a0:	000a28b9 	.word	0x000a28b9
   a27a4:	000a28b9 	.word	0x000a28b9
   a27a8:	000a28b9 	.word	0x000a28b9
   a27ac:	000a28b9 	.word	0x000a28b9
   a27b0:	000a28b9 	.word	0x000a28b9
   a27b4:	000a28b9 	.word	0x000a28b9
   a27b8:	000a27f1 	.word	0x000a27f1
   a27bc:	000a2809 	.word	0x000a2809
   a27c0:	000a2821 	.word	0x000a2821
   a27c4:	000a2831 	.word	0x000a2831
   a27c8:	000a2841 	.word	0x000a2841
   a27cc:	000a2851 	.word	0x000a2851
   a27d0:	000a28b9 	.word	0x000a28b9
   a27d4:	000a28b9 	.word	0x000a28b9
   a27d8:	000a28b9 	.word	0x000a28b9
   a27dc:	000a28b9 	.word	0x000a28b9
   a27e0:	000a2885 	.word	0x000a2885
   a27e4:	000a288f 	.word	0x000a288f
   a27e8:	000a2899 	.word	0x000a2899
   a27ec:	000a28a9 	.word	0x000a28a9
   a27f0:	68fb      	ldr	r3, [r7, #12]
   a27f2:	4a21      	ldr	r2, [pc, #132]	; (a2878 <Cl_Standby_Controller+0x32c>)
   a27f4:	fba2 2303 	umull	r2, r3, r2, r3
   a27f8:	08da      	lsrs	r2, r3, #3
   a27fa:	4b20      	ldr	r3, [pc, #128]	; (a287c <Cl_Standby_Controller+0x330>)
   a27fc:	4610      	mov	r0, r2
   a27fe:	4798      	blx	r3
   a2800:	4602      	mov	r2, r0
   a2802:	4b1f      	ldr	r3, [pc, #124]	; (a2880 <Cl_Standby_Controller+0x334>)
   a2804:	649a      	str	r2, [r3, #72]	; 0x48
   a2806:	e058      	b.n	a28ba <Cl_Standby_Controller+0x36e>
   a2808:	68fb      	ldr	r3, [r7, #12]
   a280a:	4a1b      	ldr	r2, [pc, #108]	; (a2878 <Cl_Standby_Controller+0x32c>)
   a280c:	fba2 2303 	umull	r2, r3, r2, r3
   a2810:	08da      	lsrs	r2, r3, #3
   a2812:	4b1a      	ldr	r3, [pc, #104]	; (a287c <Cl_Standby_Controller+0x330>)
   a2814:	4610      	mov	r0, r2
   a2816:	4798      	blx	r3
   a2818:	4602      	mov	r2, r0
   a281a:	4b19      	ldr	r3, [pc, #100]	; (a2880 <Cl_Standby_Controller+0x334>)
   a281c:	64da      	str	r2, [r3, #76]	; 0x4c
   a281e:	e04c      	b.n	a28ba <Cl_Standby_Controller+0x36e>
   a2820:	68fa      	ldr	r2, [r7, #12]
   a2822:	4b16      	ldr	r3, [pc, #88]	; (a287c <Cl_Standby_Controller+0x330>)
   a2824:	4610      	mov	r0, r2
   a2826:	4798      	blx	r3
   a2828:	4602      	mov	r2, r0
   a282a:	4b15      	ldr	r3, [pc, #84]	; (a2880 <Cl_Standby_Controller+0x334>)
   a282c:	635a      	str	r2, [r3, #52]	; 0x34
   a282e:	e044      	b.n	a28ba <Cl_Standby_Controller+0x36e>
   a2830:	68fa      	ldr	r2, [r7, #12]
   a2832:	4b12      	ldr	r3, [pc, #72]	; (a287c <Cl_Standby_Controller+0x330>)
   a2834:	4610      	mov	r0, r2
   a2836:	4798      	blx	r3
   a2838:	4602      	mov	r2, r0
   a283a:	4b11      	ldr	r3, [pc, #68]	; (a2880 <Cl_Standby_Controller+0x334>)
   a283c:	631a      	str	r2, [r3, #48]	; 0x30
   a283e:	e03c      	b.n	a28ba <Cl_Standby_Controller+0x36e>
   a2840:	68fa      	ldr	r2, [r7, #12]
   a2842:	4b0e      	ldr	r3, [pc, #56]	; (a287c <Cl_Standby_Controller+0x330>)
   a2844:	4610      	mov	r0, r2
   a2846:	4798      	blx	r3
   a2848:	4602      	mov	r2, r0
   a284a:	4b0d      	ldr	r3, [pc, #52]	; (a2880 <Cl_Standby_Controller+0x334>)
   a284c:	615a      	str	r2, [r3, #20]
   a284e:	e034      	b.n	a28ba <Cl_Standby_Controller+0x36e>
   a2850:	68fa      	ldr	r2, [r7, #12]
   a2852:	4b0a      	ldr	r3, [pc, #40]	; (a287c <Cl_Standby_Controller+0x330>)
   a2854:	4610      	mov	r0, r2
   a2856:	4798      	blx	r3
   a2858:	4602      	mov	r2, r0
   a285a:	4b09      	ldr	r3, [pc, #36]	; (a2880 <Cl_Standby_Controller+0x334>)
   a285c:	611a      	str	r2, [r3, #16]
   a285e:	e02c      	b.n	a28ba <Cl_Standby_Controller+0x36e>
   a2860:	000a2d6d 	.word	0x000a2d6d
   a2864:	20070c98 	.word	0x20070c98
   a2868:	00099729 	.word	0x00099729
   a286c:	00091eb5 	.word	0x00091eb5
   a2870:	20072f98 	.word	0x20072f98
   a2874:	00098239 	.word	0x00098239
   a2878:	cccccccd 	.word	0xcccccccd
   a287c:	000a3d65 	.word	0x000a3d65
   a2880:	20072d08 	.word	0x20072d08
   a2884:	68fb      	ldr	r3, [r7, #12]
   a2886:	b21a      	sxth	r2, r3
   a2888:	4ba9      	ldr	r3, [pc, #676]	; (a2b30 <Cl_Standby_Controller+0x5e4>)
   a288a:	801a      	strh	r2, [r3, #0]
   a288c:	e015      	b.n	a28ba <Cl_Standby_Controller+0x36e>
   a288e:	68fb      	ldr	r3, [r7, #12]
   a2890:	b21a      	sxth	r2, r3
   a2892:	4ba7      	ldr	r3, [pc, #668]	; (a2b30 <Cl_Standby_Controller+0x5e4>)
   a2894:	805a      	strh	r2, [r3, #2]
   a2896:	e010      	b.n	a28ba <Cl_Standby_Controller+0x36e>
   a2898:	68fa      	ldr	r2, [r7, #12]
   a289a:	4ba6      	ldr	r3, [pc, #664]	; (a2b34 <Cl_Standby_Controller+0x5e8>)
   a289c:	4610      	mov	r0, r2
   a289e:	4798      	blx	r3
   a28a0:	4602      	mov	r2, r0
   a28a2:	4ba3      	ldr	r3, [pc, #652]	; (a2b30 <Cl_Standby_Controller+0x5e4>)
   a28a4:	60da      	str	r2, [r3, #12]
   a28a6:	e008      	b.n	a28ba <Cl_Standby_Controller+0x36e>
   a28a8:	68fa      	ldr	r2, [r7, #12]
   a28aa:	4ba2      	ldr	r3, [pc, #648]	; (a2b34 <Cl_Standby_Controller+0x5e8>)
   a28ac:	4610      	mov	r0, r2
   a28ae:	4798      	blx	r3
   a28b0:	4602      	mov	r2, r0
   a28b2:	4b9f      	ldr	r3, [pc, #636]	; (a2b30 <Cl_Standby_Controller+0x5e4>)
   a28b4:	609a      	str	r2, [r3, #8]
   a28b6:	e000      	b.n	a28ba <Cl_Standby_Controller+0x36e>
   a28b8:	bf00      	nop
   a28ba:	e024      	b.n	a2906 <Cl_Standby_Controller+0x3ba>
   a28bc:	4b9e      	ldr	r3, [pc, #632]	; (a2b38 <Cl_Standby_Controller+0x5ec>)
   a28be:	2201      	movs	r2, #1
   a28c0:	701a      	strb	r2, [r3, #0]
   a28c2:	e021      	b.n	a2908 <Cl_Standby_Controller+0x3bc>
   a28c4:	2307      	movs	r3, #7
   a28c6:	77fb      	strb	r3, [r7, #31]
   a28c8:	f107 011c 	add.w	r1, r7, #28
   a28cc:	7ffb      	ldrb	r3, [r7, #31]
   a28ce:	2200      	movs	r2, #0
   a28d0:	4618      	mov	r0, r3
   a28d2:	4b9a      	ldr	r3, [pc, #616]	; (a2b3c <Cl_Standby_Controller+0x5f0>)
   a28d4:	4798      	blx	r3
   a28d6:	4603      	mov	r3, r0
   a28d8:	77bb      	strb	r3, [r7, #30]
   a28da:	e015      	b.n	a2908 <Cl_Standby_Controller+0x3bc>
   a28dc:	4b98      	ldr	r3, [pc, #608]	; (a2b40 <Cl_Standby_Controller+0x5f4>)
   a28de:	681b      	ldr	r3, [r3, #0]
   a28e0:	3301      	adds	r3, #1
   a28e2:	4a97      	ldr	r2, [pc, #604]	; (a2b40 <Cl_Standby_Controller+0x5f4>)
   a28e4:	6013      	str	r3, [r2, #0]
   a28e6:	4b97      	ldr	r3, [pc, #604]	; (a2b44 <Cl_Standby_Controller+0x5f8>)
   a28e8:	4798      	blx	r3
   a28ea:	4603      	mov	r3, r0
   a28ec:	77bb      	strb	r3, [r7, #30]
   a28ee:	e00b      	b.n	a2908 <Cl_Standby_Controller+0x3bc>
   a28f0:	4b93      	ldr	r3, [pc, #588]	; (a2b40 <Cl_Standby_Controller+0x5f4>)
   a28f2:	2200      	movs	r2, #0
   a28f4:	601a      	str	r2, [r3, #0]
   a28f6:	4b90      	ldr	r3, [pc, #576]	; (a2b38 <Cl_Standby_Controller+0x5ec>)
   a28f8:	2201      	movs	r2, #1
   a28fa:	701a      	strb	r2, [r3, #0]
   a28fc:	e004      	b.n	a2908 <Cl_Standby_Controller+0x3bc>
   a28fe:	bf00      	nop
   a2900:	e229      	b.n	a2d56 <Cl_Standby_Controller+0x80a>
   a2902:	bf00      	nop
   a2904:	e227      	b.n	a2d56 <Cl_Standby_Controller+0x80a>
   a2906:	bf00      	nop
   a2908:	e225      	b.n	a2d56 <Cl_Standby_Controller+0x80a>
   a290a:	7f7b      	ldrb	r3, [r7, #29]
   a290c:	3b06      	subs	r3, #6
   a290e:	2b07      	cmp	r3, #7
   a2910:	f200 8087 	bhi.w	a2a22 <Cl_Standby_Controller+0x4d6>
   a2914:	a201      	add	r2, pc, #4	; (adr r2, a291c <Cl_Standby_Controller+0x3d0>)
   a2916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a291a:	bf00      	nop
   a291c:	000a2a01 	.word	0x000a2a01
   a2920:	000a2a1b 	.word	0x000a2a1b
   a2924:	000a2a23 	.word	0x000a2a23
   a2928:	000a29f3 	.word	0x000a29f3
   a292c:	000a293d 	.word	0x000a293d
   a2930:	000a29b1 	.word	0x000a29b1
   a2934:	000a2a23 	.word	0x000a2a23
   a2938:	000a2a23 	.word	0x000a2a23
   a293c:	4b82      	ldr	r3, [pc, #520]	; (a2b48 <Cl_Standby_Controller+0x5fc>)
   a293e:	7e1b      	ldrb	r3, [r3, #24]
   a2940:	2b00      	cmp	r3, #0
   a2942:	d070      	beq.n	a2a26 <Cl_Standby_Controller+0x4da>
   a2944:	4b80      	ldr	r3, [pc, #512]	; (a2b48 <Cl_Standby_Controller+0x5fc>)
   a2946:	791b      	ldrb	r3, [r3, #4]
   a2948:	2b01      	cmp	r3, #1
   a294a:	d002      	beq.n	a2952 <Cl_Standby_Controller+0x406>
   a294c:	2b21      	cmp	r3, #33	; 0x21
   a294e:	d017      	beq.n	a2980 <Cl_Standby_Controller+0x434>
   a2950:	e02d      	b.n	a29ae <Cl_Standby_Controller+0x462>
   a2952:	2316      	movs	r3, #22
   a2954:	77fb      	strb	r3, [r7, #31]
   a2956:	2301      	movs	r3, #1
   a2958:	763b      	strb	r3, [r7, #24]
   a295a:	f107 0318 	add.w	r3, r7, #24
   a295e:	3301      	adds	r3, #1
   a2960:	4619      	mov	r1, r3
   a2962:	2001      	movs	r0, #1
   a2964:	4b79      	ldr	r3, [pc, #484]	; (a2b4c <Cl_Standby_Controller+0x600>)
   a2966:	4798      	blx	r3
   a2968:	4603      	mov	r3, r0
   a296a:	77bb      	strb	r3, [r7, #30]
   a296c:	f107 0118 	add.w	r1, r7, #24
   a2970:	7ffb      	ldrb	r3, [r7, #31]
   a2972:	2202      	movs	r2, #2
   a2974:	4618      	mov	r0, r3
   a2976:	4b71      	ldr	r3, [pc, #452]	; (a2b3c <Cl_Standby_Controller+0x5f0>)
   a2978:	4798      	blx	r3
   a297a:	4603      	mov	r3, r0
   a297c:	77bb      	strb	r3, [r7, #30]
   a297e:	e016      	b.n	a29ae <Cl_Standby_Controller+0x462>
   a2980:	2316      	movs	r3, #22
   a2982:	77fb      	strb	r3, [r7, #31]
   a2984:	2323      	movs	r3, #35	; 0x23
   a2986:	763b      	strb	r3, [r7, #24]
   a2988:	f107 0318 	add.w	r3, r7, #24
   a298c:	3301      	adds	r3, #1
   a298e:	4619      	mov	r1, r3
   a2990:	2001      	movs	r0, #1
   a2992:	4b6e      	ldr	r3, [pc, #440]	; (a2b4c <Cl_Standby_Controller+0x600>)
   a2994:	4798      	blx	r3
   a2996:	4603      	mov	r3, r0
   a2998:	77bb      	strb	r3, [r7, #30]
   a299a:	f107 0118 	add.w	r1, r7, #24
   a299e:	7ffb      	ldrb	r3, [r7, #31]
   a29a0:	2202      	movs	r2, #2
   a29a2:	4618      	mov	r0, r3
   a29a4:	4b65      	ldr	r3, [pc, #404]	; (a2b3c <Cl_Standby_Controller+0x5f0>)
   a29a6:	4798      	blx	r3
   a29a8:	4603      	mov	r3, r0
   a29aa:	77bb      	strb	r3, [r7, #30]
   a29ac:	bf00      	nop
   a29ae:	e03a      	b.n	a2a26 <Cl_Standby_Controller+0x4da>
   a29b0:	4b65      	ldr	r3, [pc, #404]	; (a2b48 <Cl_Standby_Controller+0x5fc>)
   a29b2:	7e1b      	ldrb	r3, [r3, #24]
   a29b4:	2b00      	cmp	r3, #0
   a29b6:	d038      	beq.n	a2a2a <Cl_Standby_Controller+0x4de>
   a29b8:	4b63      	ldr	r3, [pc, #396]	; (a2b48 <Cl_Standby_Controller+0x5fc>)
   a29ba:	791b      	ldrb	r3, [r3, #4]
   a29bc:	2b01      	cmp	r3, #1
   a29be:	d000      	beq.n	a29c2 <Cl_Standby_Controller+0x476>
   a29c0:	e016      	b.n	a29f0 <Cl_Standby_Controller+0x4a4>
   a29c2:	2316      	movs	r3, #22
   a29c4:	77fb      	strb	r3, [r7, #31]
   a29c6:	2301      	movs	r3, #1
   a29c8:	763b      	strb	r3, [r7, #24]
   a29ca:	f107 0318 	add.w	r3, r7, #24
   a29ce:	3301      	adds	r3, #1
   a29d0:	4619      	mov	r1, r3
   a29d2:	2001      	movs	r0, #1
   a29d4:	4b5d      	ldr	r3, [pc, #372]	; (a2b4c <Cl_Standby_Controller+0x600>)
   a29d6:	4798      	blx	r3
   a29d8:	4603      	mov	r3, r0
   a29da:	77bb      	strb	r3, [r7, #30]
   a29dc:	f107 0118 	add.w	r1, r7, #24
   a29e0:	7ffb      	ldrb	r3, [r7, #31]
   a29e2:	2202      	movs	r2, #2
   a29e4:	4618      	mov	r0, r3
   a29e6:	4b55      	ldr	r3, [pc, #340]	; (a2b3c <Cl_Standby_Controller+0x5f0>)
   a29e8:	4798      	blx	r3
   a29ea:	4603      	mov	r3, r0
   a29ec:	77bb      	strb	r3, [r7, #30]
   a29ee:	bf00      	nop
   a29f0:	e01b      	b.n	a2a2a <Cl_Standby_Controller+0x4de>
   a29f2:	2307      	movs	r3, #7
   a29f4:	77fb      	strb	r3, [r7, #31]
   a29f6:	4b56      	ldr	r3, [pc, #344]	; (a2b50 <Cl_Standby_Controller+0x604>)
   a29f8:	4798      	blx	r3
   a29fa:	4603      	mov	r3, r0
   a29fc:	77bb      	strb	r3, [r7, #30]
   a29fe:	e015      	b.n	a2a2c <Cl_Standby_Controller+0x4e0>
   a2a00:	4b4f      	ldr	r3, [pc, #316]	; (a2b40 <Cl_Standby_Controller+0x5f4>)
   a2a02:	681b      	ldr	r3, [r3, #0]
   a2a04:	3301      	adds	r3, #1
   a2a06:	4a4e      	ldr	r2, [pc, #312]	; (a2b40 <Cl_Standby_Controller+0x5f4>)
   a2a08:	6013      	str	r3, [r2, #0]
   a2a0a:	f107 0317 	add.w	r3, r7, #23
   a2a0e:	4618      	mov	r0, r3
   a2a10:	4b50      	ldr	r3, [pc, #320]	; (a2b54 <Cl_Standby_Controller+0x608>)
   a2a12:	4798      	blx	r3
   a2a14:	4603      	mov	r3, r0
   a2a16:	77bb      	strb	r3, [r7, #30]
   a2a18:	e008      	b.n	a2a2c <Cl_Standby_Controller+0x4e0>
   a2a1a:	4b49      	ldr	r3, [pc, #292]	; (a2b40 <Cl_Standby_Controller+0x5f4>)
   a2a1c:	2200      	movs	r2, #0
   a2a1e:	601a      	str	r2, [r3, #0]
   a2a20:	e004      	b.n	a2a2c <Cl_Standby_Controller+0x4e0>
   a2a22:	bf00      	nop
   a2a24:	e197      	b.n	a2d56 <Cl_Standby_Controller+0x80a>
   a2a26:	bf00      	nop
   a2a28:	e195      	b.n	a2d56 <Cl_Standby_Controller+0x80a>
   a2a2a:	bf00      	nop
   a2a2c:	e193      	b.n	a2d56 <Cl_Standby_Controller+0x80a>
   a2a2e:	7f7b      	ldrb	r3, [r7, #29]
   a2a30:	3b06      	subs	r3, #6
   a2a32:	2b07      	cmp	r3, #7
   a2a34:	d866      	bhi.n	a2b04 <Cl_Standby_Controller+0x5b8>
   a2a36:	a201      	add	r2, pc, #4	; (adr r2, a2a3c <Cl_Standby_Controller+0x4f0>)
   a2a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a2a3c:	000a2ae9 	.word	0x000a2ae9
   a2a40:	000a2afd 	.word	0x000a2afd
   a2a44:	000a2b05 	.word	0x000a2b05
   a2a48:	000a2ad1 	.word	0x000a2ad1
   a2a4c:	000a2a5d 	.word	0x000a2a5d
   a2a50:	000a2b05 	.word	0x000a2b05
   a2a54:	000a2b05 	.word	0x000a2b05
   a2a58:	000a2b05 	.word	0x000a2b05
   a2a5c:	4b3a      	ldr	r3, [pc, #232]	; (a2b48 <Cl_Standby_Controller+0x5fc>)
   a2a5e:	7e1b      	ldrb	r3, [r3, #24]
   a2a60:	2b00      	cmp	r3, #0
   a2a62:	d051      	beq.n	a2b08 <Cl_Standby_Controller+0x5bc>
   a2a64:	4b38      	ldr	r3, [pc, #224]	; (a2b48 <Cl_Standby_Controller+0x5fc>)
   a2a66:	791b      	ldrb	r3, [r3, #4]
   a2a68:	2b01      	cmp	r3, #1
   a2a6a:	d002      	beq.n	a2a72 <Cl_Standby_Controller+0x526>
   a2a6c:	2b21      	cmp	r3, #33	; 0x21
   a2a6e:	d017      	beq.n	a2aa0 <Cl_Standby_Controller+0x554>
   a2a70:	e02d      	b.n	a2ace <Cl_Standby_Controller+0x582>
   a2a72:	2316      	movs	r3, #22
   a2a74:	77fb      	strb	r3, [r7, #31]
   a2a76:	2301      	movs	r3, #1
   a2a78:	763b      	strb	r3, [r7, #24]
   a2a7a:	f107 0318 	add.w	r3, r7, #24
   a2a7e:	3301      	adds	r3, #1
   a2a80:	4619      	mov	r1, r3
   a2a82:	2001      	movs	r0, #1
   a2a84:	4b31      	ldr	r3, [pc, #196]	; (a2b4c <Cl_Standby_Controller+0x600>)
   a2a86:	4798      	blx	r3
   a2a88:	4603      	mov	r3, r0
   a2a8a:	77bb      	strb	r3, [r7, #30]
   a2a8c:	f107 0118 	add.w	r1, r7, #24
   a2a90:	7ffb      	ldrb	r3, [r7, #31]
   a2a92:	2202      	movs	r2, #2
   a2a94:	4618      	mov	r0, r3
   a2a96:	4b29      	ldr	r3, [pc, #164]	; (a2b3c <Cl_Standby_Controller+0x5f0>)
   a2a98:	4798      	blx	r3
   a2a9a:	4603      	mov	r3, r0
   a2a9c:	77bb      	strb	r3, [r7, #30]
   a2a9e:	e016      	b.n	a2ace <Cl_Standby_Controller+0x582>
   a2aa0:	2316      	movs	r3, #22
   a2aa2:	77fb      	strb	r3, [r7, #31]
   a2aa4:	2323      	movs	r3, #35	; 0x23
   a2aa6:	763b      	strb	r3, [r7, #24]
   a2aa8:	f107 0318 	add.w	r3, r7, #24
   a2aac:	3301      	adds	r3, #1
   a2aae:	4619      	mov	r1, r3
   a2ab0:	2001      	movs	r0, #1
   a2ab2:	4b26      	ldr	r3, [pc, #152]	; (a2b4c <Cl_Standby_Controller+0x600>)
   a2ab4:	4798      	blx	r3
   a2ab6:	4603      	mov	r3, r0
   a2ab8:	77bb      	strb	r3, [r7, #30]
   a2aba:	f107 0118 	add.w	r1, r7, #24
   a2abe:	7ffb      	ldrb	r3, [r7, #31]
   a2ac0:	2202      	movs	r2, #2
   a2ac2:	4618      	mov	r0, r3
   a2ac4:	4b1d      	ldr	r3, [pc, #116]	; (a2b3c <Cl_Standby_Controller+0x5f0>)
   a2ac6:	4798      	blx	r3
   a2ac8:	4603      	mov	r3, r0
   a2aca:	77bb      	strb	r3, [r7, #30]
   a2acc:	bf00      	nop
   a2ace:	e01b      	b.n	a2b08 <Cl_Standby_Controller+0x5bc>
   a2ad0:	2307      	movs	r3, #7
   a2ad2:	77fb      	strb	r3, [r7, #31]
   a2ad4:	f107 011c 	add.w	r1, r7, #28
   a2ad8:	7ffb      	ldrb	r3, [r7, #31]
   a2ada:	2200      	movs	r2, #0
   a2adc:	4618      	mov	r0, r3
   a2ade:	4b17      	ldr	r3, [pc, #92]	; (a2b3c <Cl_Standby_Controller+0x5f0>)
   a2ae0:	4798      	blx	r3
   a2ae2:	4603      	mov	r3, r0
   a2ae4:	77bb      	strb	r3, [r7, #30]
   a2ae6:	e010      	b.n	a2b0a <Cl_Standby_Controller+0x5be>
   a2ae8:	4b15      	ldr	r3, [pc, #84]	; (a2b40 <Cl_Standby_Controller+0x5f4>)
   a2aea:	681b      	ldr	r3, [r3, #0]
   a2aec:	3301      	adds	r3, #1
   a2aee:	4a14      	ldr	r2, [pc, #80]	; (a2b40 <Cl_Standby_Controller+0x5f4>)
   a2af0:	6013      	str	r3, [r2, #0]
   a2af2:	4b14      	ldr	r3, [pc, #80]	; (a2b44 <Cl_Standby_Controller+0x5f8>)
   a2af4:	4798      	blx	r3
   a2af6:	4603      	mov	r3, r0
   a2af8:	77bb      	strb	r3, [r7, #30]
   a2afa:	e006      	b.n	a2b0a <Cl_Standby_Controller+0x5be>
   a2afc:	4b10      	ldr	r3, [pc, #64]	; (a2b40 <Cl_Standby_Controller+0x5f4>)
   a2afe:	2200      	movs	r2, #0
   a2b00:	601a      	str	r2, [r3, #0]
   a2b02:	e002      	b.n	a2b0a <Cl_Standby_Controller+0x5be>
   a2b04:	bf00      	nop
   a2b06:	e126      	b.n	a2d56 <Cl_Standby_Controller+0x80a>
   a2b08:	bf00      	nop
   a2b0a:	e124      	b.n	a2d56 <Cl_Standby_Controller+0x80a>
   a2b0c:	7f7b      	ldrb	r3, [r7, #29]
   a2b0e:	2b0a      	cmp	r3, #10
   a2b10:	d002      	beq.n	a2b18 <Cl_Standby_Controller+0x5cc>
   a2b12:	2b0d      	cmp	r3, #13
   a2b14:	d04f      	beq.n	a2bb6 <Cl_Standby_Controller+0x66a>
   a2b16:	e051      	b.n	a2bbc <Cl_Standby_Controller+0x670>
   a2b18:	4b0b      	ldr	r3, [pc, #44]	; (a2b48 <Cl_Standby_Controller+0x5fc>)
   a2b1a:	7e1b      	ldrb	r3, [r3, #24]
   a2b1c:	2b00      	cmp	r3, #0
   a2b1e:	d04c      	beq.n	a2bba <Cl_Standby_Controller+0x66e>
   a2b20:	4b09      	ldr	r3, [pc, #36]	; (a2b48 <Cl_Standby_Controller+0x5fc>)
   a2b22:	791b      	ldrb	r3, [r3, #4]
   a2b24:	2b01      	cmp	r3, #1
   a2b26:	d017      	beq.n	a2b58 <Cl_Standby_Controller+0x60c>
   a2b28:	2b21      	cmp	r3, #33	; 0x21
   a2b2a:	d02c      	beq.n	a2b86 <Cl_Standby_Controller+0x63a>
   a2b2c:	e042      	b.n	a2bb4 <Cl_Standby_Controller+0x668>
   a2b2e:	bf00      	nop
   a2b30:	20072d08 	.word	0x20072d08
   a2b34:	000a3d65 	.word	0x000a3d65
   a2b38:	20070c98 	.word	0x20070c98
   a2b3c:	00099729 	.word	0x00099729
   a2b40:	200728a0 	.word	0x200728a0
   a2b44:	000a2f79 	.word	0x000a2f79
   a2b48:	20072f98 	.word	0x20072f98
   a2b4c:	00098239 	.word	0x00098239
   a2b50:	000a3005 	.word	0x000a3005
   a2b54:	000a3071 	.word	0x000a3071
   a2b58:	2316      	movs	r3, #22
   a2b5a:	77fb      	strb	r3, [r7, #31]
   a2b5c:	2301      	movs	r3, #1
   a2b5e:	763b      	strb	r3, [r7, #24]
   a2b60:	f107 0318 	add.w	r3, r7, #24
   a2b64:	3301      	adds	r3, #1
   a2b66:	4619      	mov	r1, r3
   a2b68:	2001      	movs	r0, #1
   a2b6a:	4b7d      	ldr	r3, [pc, #500]	; (a2d60 <Cl_Standby_Controller+0x814>)
   a2b6c:	4798      	blx	r3
   a2b6e:	4603      	mov	r3, r0
   a2b70:	77bb      	strb	r3, [r7, #30]
   a2b72:	f107 0118 	add.w	r1, r7, #24
   a2b76:	7ffb      	ldrb	r3, [r7, #31]
   a2b78:	2202      	movs	r2, #2
   a2b7a:	4618      	mov	r0, r3
   a2b7c:	4b79      	ldr	r3, [pc, #484]	; (a2d64 <Cl_Standby_Controller+0x818>)
   a2b7e:	4798      	blx	r3
   a2b80:	4603      	mov	r3, r0
   a2b82:	77bb      	strb	r3, [r7, #30]
   a2b84:	e016      	b.n	a2bb4 <Cl_Standby_Controller+0x668>
   a2b86:	2316      	movs	r3, #22
   a2b88:	77fb      	strb	r3, [r7, #31]
   a2b8a:	2323      	movs	r3, #35	; 0x23
   a2b8c:	763b      	strb	r3, [r7, #24]
   a2b8e:	f107 0318 	add.w	r3, r7, #24
   a2b92:	3301      	adds	r3, #1
   a2b94:	4619      	mov	r1, r3
   a2b96:	2001      	movs	r0, #1
   a2b98:	4b71      	ldr	r3, [pc, #452]	; (a2d60 <Cl_Standby_Controller+0x814>)
   a2b9a:	4798      	blx	r3
   a2b9c:	4603      	mov	r3, r0
   a2b9e:	77bb      	strb	r3, [r7, #30]
   a2ba0:	f107 0118 	add.w	r1, r7, #24
   a2ba4:	7ffb      	ldrb	r3, [r7, #31]
   a2ba6:	2202      	movs	r2, #2
   a2ba8:	4618      	mov	r0, r3
   a2baa:	4b6e      	ldr	r3, [pc, #440]	; (a2d64 <Cl_Standby_Controller+0x818>)
   a2bac:	4798      	blx	r3
   a2bae:	4603      	mov	r3, r0
   a2bb0:	77bb      	strb	r3, [r7, #30]
   a2bb2:	bf00      	nop
   a2bb4:	e001      	b.n	a2bba <Cl_Standby_Controller+0x66e>
   a2bb6:	bf00      	nop
   a2bb8:	e0cd      	b.n	a2d56 <Cl_Standby_Controller+0x80a>
   a2bba:	bf00      	nop
   a2bbc:	e0cb      	b.n	a2d56 <Cl_Standby_Controller+0x80a>
   a2bbe:	7f7b      	ldrb	r3, [r7, #29]
   a2bc0:	2b0a      	cmp	r3, #10
   a2bc2:	d002      	beq.n	a2bca <Cl_Standby_Controller+0x67e>
   a2bc4:	2b0d      	cmp	r3, #13
   a2bc6:	d03a      	beq.n	a2c3e <Cl_Standby_Controller+0x6f2>
   a2bc8:	e03c      	b.n	a2c44 <Cl_Standby_Controller+0x6f8>
   a2bca:	4b67      	ldr	r3, [pc, #412]	; (a2d68 <Cl_Standby_Controller+0x81c>)
   a2bcc:	7e1b      	ldrb	r3, [r3, #24]
   a2bce:	2b00      	cmp	r3, #0
   a2bd0:	d037      	beq.n	a2c42 <Cl_Standby_Controller+0x6f6>
   a2bd2:	4b65      	ldr	r3, [pc, #404]	; (a2d68 <Cl_Standby_Controller+0x81c>)
   a2bd4:	791b      	ldrb	r3, [r3, #4]
   a2bd6:	2b01      	cmp	r3, #1
   a2bd8:	d002      	beq.n	a2be0 <Cl_Standby_Controller+0x694>
   a2bda:	2b21      	cmp	r3, #33	; 0x21
   a2bdc:	d017      	beq.n	a2c0e <Cl_Standby_Controller+0x6c2>
   a2bde:	e02d      	b.n	a2c3c <Cl_Standby_Controller+0x6f0>
   a2be0:	2316      	movs	r3, #22
   a2be2:	77fb      	strb	r3, [r7, #31]
   a2be4:	2301      	movs	r3, #1
   a2be6:	763b      	strb	r3, [r7, #24]
   a2be8:	f107 0318 	add.w	r3, r7, #24
   a2bec:	3301      	adds	r3, #1
   a2bee:	4619      	mov	r1, r3
   a2bf0:	2001      	movs	r0, #1
   a2bf2:	4b5b      	ldr	r3, [pc, #364]	; (a2d60 <Cl_Standby_Controller+0x814>)
   a2bf4:	4798      	blx	r3
   a2bf6:	4603      	mov	r3, r0
   a2bf8:	77bb      	strb	r3, [r7, #30]
   a2bfa:	f107 0118 	add.w	r1, r7, #24
   a2bfe:	7ffb      	ldrb	r3, [r7, #31]
   a2c00:	2202      	movs	r2, #2
   a2c02:	4618      	mov	r0, r3
   a2c04:	4b57      	ldr	r3, [pc, #348]	; (a2d64 <Cl_Standby_Controller+0x818>)
   a2c06:	4798      	blx	r3
   a2c08:	4603      	mov	r3, r0
   a2c0a:	77bb      	strb	r3, [r7, #30]
   a2c0c:	e016      	b.n	a2c3c <Cl_Standby_Controller+0x6f0>
   a2c0e:	2316      	movs	r3, #22
   a2c10:	77fb      	strb	r3, [r7, #31]
   a2c12:	2323      	movs	r3, #35	; 0x23
   a2c14:	763b      	strb	r3, [r7, #24]
   a2c16:	f107 0318 	add.w	r3, r7, #24
   a2c1a:	3301      	adds	r3, #1
   a2c1c:	4619      	mov	r1, r3
   a2c1e:	2001      	movs	r0, #1
   a2c20:	4b4f      	ldr	r3, [pc, #316]	; (a2d60 <Cl_Standby_Controller+0x814>)
   a2c22:	4798      	blx	r3
   a2c24:	4603      	mov	r3, r0
   a2c26:	77bb      	strb	r3, [r7, #30]
   a2c28:	f107 0118 	add.w	r1, r7, #24
   a2c2c:	7ffb      	ldrb	r3, [r7, #31]
   a2c2e:	2202      	movs	r2, #2
   a2c30:	4618      	mov	r0, r3
   a2c32:	4b4c      	ldr	r3, [pc, #304]	; (a2d64 <Cl_Standby_Controller+0x818>)
   a2c34:	4798      	blx	r3
   a2c36:	4603      	mov	r3, r0
   a2c38:	77bb      	strb	r3, [r7, #30]
   a2c3a:	bf00      	nop
   a2c3c:	e001      	b.n	a2c42 <Cl_Standby_Controller+0x6f6>
   a2c3e:	bf00      	nop
   a2c40:	e000      	b.n	a2c44 <Cl_Standby_Controller+0x6f8>
   a2c42:	bf00      	nop
   a2c44:	7f7b      	ldrb	r3, [r7, #29]
   a2c46:	2b0a      	cmp	r3, #10
   a2c48:	d002      	beq.n	a2c50 <Cl_Standby_Controller+0x704>
   a2c4a:	2b0d      	cmp	r3, #13
   a2c4c:	d03a      	beq.n	a2cc4 <Cl_Standby_Controller+0x778>
   a2c4e:	e03c      	b.n	a2cca <Cl_Standby_Controller+0x77e>
   a2c50:	4b45      	ldr	r3, [pc, #276]	; (a2d68 <Cl_Standby_Controller+0x81c>)
   a2c52:	7e1b      	ldrb	r3, [r3, #24]
   a2c54:	2b00      	cmp	r3, #0
   a2c56:	d037      	beq.n	a2cc8 <Cl_Standby_Controller+0x77c>
   a2c58:	4b43      	ldr	r3, [pc, #268]	; (a2d68 <Cl_Standby_Controller+0x81c>)
   a2c5a:	791b      	ldrb	r3, [r3, #4]
   a2c5c:	2b01      	cmp	r3, #1
   a2c5e:	d002      	beq.n	a2c66 <Cl_Standby_Controller+0x71a>
   a2c60:	2b21      	cmp	r3, #33	; 0x21
   a2c62:	d017      	beq.n	a2c94 <Cl_Standby_Controller+0x748>
   a2c64:	e02d      	b.n	a2cc2 <Cl_Standby_Controller+0x776>
   a2c66:	2316      	movs	r3, #22
   a2c68:	77fb      	strb	r3, [r7, #31]
   a2c6a:	2301      	movs	r3, #1
   a2c6c:	763b      	strb	r3, [r7, #24]
   a2c6e:	f107 0318 	add.w	r3, r7, #24
   a2c72:	3301      	adds	r3, #1
   a2c74:	4619      	mov	r1, r3
   a2c76:	2001      	movs	r0, #1
   a2c78:	4b39      	ldr	r3, [pc, #228]	; (a2d60 <Cl_Standby_Controller+0x814>)
   a2c7a:	4798      	blx	r3
   a2c7c:	4603      	mov	r3, r0
   a2c7e:	77bb      	strb	r3, [r7, #30]
   a2c80:	f107 0118 	add.w	r1, r7, #24
   a2c84:	7ffb      	ldrb	r3, [r7, #31]
   a2c86:	2202      	movs	r2, #2
   a2c88:	4618      	mov	r0, r3
   a2c8a:	4b36      	ldr	r3, [pc, #216]	; (a2d64 <Cl_Standby_Controller+0x818>)
   a2c8c:	4798      	blx	r3
   a2c8e:	4603      	mov	r3, r0
   a2c90:	77bb      	strb	r3, [r7, #30]
   a2c92:	e016      	b.n	a2cc2 <Cl_Standby_Controller+0x776>
   a2c94:	2316      	movs	r3, #22
   a2c96:	77fb      	strb	r3, [r7, #31]
   a2c98:	2323      	movs	r3, #35	; 0x23
   a2c9a:	763b      	strb	r3, [r7, #24]
   a2c9c:	f107 0318 	add.w	r3, r7, #24
   a2ca0:	3301      	adds	r3, #1
   a2ca2:	4619      	mov	r1, r3
   a2ca4:	2001      	movs	r0, #1
   a2ca6:	4b2e      	ldr	r3, [pc, #184]	; (a2d60 <Cl_Standby_Controller+0x814>)
   a2ca8:	4798      	blx	r3
   a2caa:	4603      	mov	r3, r0
   a2cac:	77bb      	strb	r3, [r7, #30]
   a2cae:	f107 0118 	add.w	r1, r7, #24
   a2cb2:	7ffb      	ldrb	r3, [r7, #31]
   a2cb4:	2202      	movs	r2, #2
   a2cb6:	4618      	mov	r0, r3
   a2cb8:	4b2a      	ldr	r3, [pc, #168]	; (a2d64 <Cl_Standby_Controller+0x818>)
   a2cba:	4798      	blx	r3
   a2cbc:	4603      	mov	r3, r0
   a2cbe:	77bb      	strb	r3, [r7, #30]
   a2cc0:	bf00      	nop
   a2cc2:	e001      	b.n	a2cc8 <Cl_Standby_Controller+0x77c>
   a2cc4:	bf00      	nop
   a2cc6:	e046      	b.n	a2d56 <Cl_Standby_Controller+0x80a>
   a2cc8:	bf00      	nop
   a2cca:	e044      	b.n	a2d56 <Cl_Standby_Controller+0x80a>
   a2ccc:	7f7b      	ldrb	r3, [r7, #29]
   a2cce:	2b0a      	cmp	r3, #10
   a2cd0:	d002      	beq.n	a2cd8 <Cl_Standby_Controller+0x78c>
   a2cd2:	2b0d      	cmp	r3, #13
   a2cd4:	d03a      	beq.n	a2d4c <Cl_Standby_Controller+0x800>
   a2cd6:	e03c      	b.n	a2d52 <Cl_Standby_Controller+0x806>
   a2cd8:	4b23      	ldr	r3, [pc, #140]	; (a2d68 <Cl_Standby_Controller+0x81c>)
   a2cda:	7e1b      	ldrb	r3, [r3, #24]
   a2cdc:	2b00      	cmp	r3, #0
   a2cde:	d037      	beq.n	a2d50 <Cl_Standby_Controller+0x804>
   a2ce0:	4b21      	ldr	r3, [pc, #132]	; (a2d68 <Cl_Standby_Controller+0x81c>)
   a2ce2:	791b      	ldrb	r3, [r3, #4]
   a2ce4:	2b01      	cmp	r3, #1
   a2ce6:	d002      	beq.n	a2cee <Cl_Standby_Controller+0x7a2>
   a2ce8:	2b21      	cmp	r3, #33	; 0x21
   a2cea:	d017      	beq.n	a2d1c <Cl_Standby_Controller+0x7d0>
   a2cec:	e02d      	b.n	a2d4a <Cl_Standby_Controller+0x7fe>
   a2cee:	2316      	movs	r3, #22
   a2cf0:	77fb      	strb	r3, [r7, #31]
   a2cf2:	2301      	movs	r3, #1
   a2cf4:	763b      	strb	r3, [r7, #24]
   a2cf6:	f107 0318 	add.w	r3, r7, #24
   a2cfa:	3301      	adds	r3, #1
   a2cfc:	4619      	mov	r1, r3
   a2cfe:	2001      	movs	r0, #1
   a2d00:	4b17      	ldr	r3, [pc, #92]	; (a2d60 <Cl_Standby_Controller+0x814>)
   a2d02:	4798      	blx	r3
   a2d04:	4603      	mov	r3, r0
   a2d06:	77bb      	strb	r3, [r7, #30]
   a2d08:	f107 0118 	add.w	r1, r7, #24
   a2d0c:	7ffb      	ldrb	r3, [r7, #31]
   a2d0e:	2202      	movs	r2, #2
   a2d10:	4618      	mov	r0, r3
   a2d12:	4b14      	ldr	r3, [pc, #80]	; (a2d64 <Cl_Standby_Controller+0x818>)
   a2d14:	4798      	blx	r3
   a2d16:	4603      	mov	r3, r0
   a2d18:	77bb      	strb	r3, [r7, #30]
   a2d1a:	e016      	b.n	a2d4a <Cl_Standby_Controller+0x7fe>
   a2d1c:	2316      	movs	r3, #22
   a2d1e:	77fb      	strb	r3, [r7, #31]
   a2d20:	2323      	movs	r3, #35	; 0x23
   a2d22:	763b      	strb	r3, [r7, #24]
   a2d24:	f107 0318 	add.w	r3, r7, #24
   a2d28:	3301      	adds	r3, #1
   a2d2a:	4619      	mov	r1, r3
   a2d2c:	2001      	movs	r0, #1
   a2d2e:	4b0c      	ldr	r3, [pc, #48]	; (a2d60 <Cl_Standby_Controller+0x814>)
   a2d30:	4798      	blx	r3
   a2d32:	4603      	mov	r3, r0
   a2d34:	77bb      	strb	r3, [r7, #30]
   a2d36:	f107 0118 	add.w	r1, r7, #24
   a2d3a:	7ffb      	ldrb	r3, [r7, #31]
   a2d3c:	2202      	movs	r2, #2
   a2d3e:	4618      	mov	r0, r3
   a2d40:	4b08      	ldr	r3, [pc, #32]	; (a2d64 <Cl_Standby_Controller+0x818>)
   a2d42:	4798      	blx	r3
   a2d44:	4603      	mov	r3, r0
   a2d46:	77bb      	strb	r3, [r7, #30]
   a2d48:	bf00      	nop
   a2d4a:	e001      	b.n	a2d50 <Cl_Standby_Controller+0x804>
   a2d4c:	bf00      	nop
   a2d4e:	e002      	b.n	a2d56 <Cl_Standby_Controller+0x80a>
   a2d50:	bf00      	nop
   a2d52:	e000      	b.n	a2d56 <Cl_Standby_Controller+0x80a>
   a2d54:	bf00      	nop
   a2d56:	2300      	movs	r3, #0
   a2d58:	4618      	mov	r0, r3
   a2d5a:	3720      	adds	r7, #32
   a2d5c:	46bd      	mov	sp, r7
   a2d5e:	bd80      	pop	{r7, pc}
   a2d60:	00098239 	.word	0x00098239
   a2d64:	00099729 	.word	0x00099729
   a2d68:	20072f98 	.word	0x20072f98

000a2d6c <cl_stby_translatemacevent>:
   a2d6c:	b480      	push	{r7}
   a2d6e:	b083      	sub	sp, #12
   a2d70:	af00      	add	r7, sp, #0
   a2d72:	4603      	mov	r3, r0
   a2d74:	6039      	str	r1, [r7, #0]
   a2d76:	71fb      	strb	r3, [r7, #7]
   a2d78:	683b      	ldr	r3, [r7, #0]
   a2d7a:	2200      	movs	r2, #0
   a2d7c:	701a      	strb	r2, [r3, #0]
   a2d7e:	79fb      	ldrb	r3, [r7, #7]
   a2d80:	3b07      	subs	r3, #7
   a2d82:	2b36      	cmp	r3, #54	; 0x36
   a2d84:	f200 80a2 	bhi.w	a2ecc <cl_stby_translatemacevent+0x160>
   a2d88:	a201      	add	r2, pc, #4	; (adr r2, a2d90 <cl_stby_translatemacevent+0x24>)
   a2d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a2d8e:	bf00      	nop
   a2d90:	000a2e9d 	.word	0x000a2e9d
   a2d94:	000a2ecd 	.word	0x000a2ecd
   a2d98:	000a2ea5 	.word	0x000a2ea5
   a2d9c:	000a2ead 	.word	0x000a2ead
   a2da0:	000a2eb5 	.word	0x000a2eb5
   a2da4:	000a2ebd 	.word	0x000a2ebd
   a2da8:	000a2ecd 	.word	0x000a2ecd
   a2dac:	000a2e95 	.word	0x000a2e95
   a2db0:	000a2ecd 	.word	0x000a2ecd
   a2db4:	000a2ec5 	.word	0x000a2ec5
   a2db8:	000a2ecd 	.word	0x000a2ecd
   a2dbc:	000a2ecd 	.word	0x000a2ecd
   a2dc0:	000a2ecd 	.word	0x000a2ecd
   a2dc4:	000a2ecd 	.word	0x000a2ecd
   a2dc8:	000a2ecd 	.word	0x000a2ecd
   a2dcc:	000a2ecd 	.word	0x000a2ecd
   a2dd0:	000a2ecd 	.word	0x000a2ecd
   a2dd4:	000a2ecd 	.word	0x000a2ecd
   a2dd8:	000a2ecd 	.word	0x000a2ecd
   a2ddc:	000a2ecd 	.word	0x000a2ecd
   a2de0:	000a2ecd 	.word	0x000a2ecd
   a2de4:	000a2ecd 	.word	0x000a2ecd
   a2de8:	000a2ecd 	.word	0x000a2ecd
   a2dec:	000a2ecd 	.word	0x000a2ecd
   a2df0:	000a2ecd 	.word	0x000a2ecd
   a2df4:	000a2ecd 	.word	0x000a2ecd
   a2df8:	000a2ecd 	.word	0x000a2ecd
   a2dfc:	000a2ecd 	.word	0x000a2ecd
   a2e00:	000a2ecd 	.word	0x000a2ecd
   a2e04:	000a2ecd 	.word	0x000a2ecd
   a2e08:	000a2ecd 	.word	0x000a2ecd
   a2e0c:	000a2ecd 	.word	0x000a2ecd
   a2e10:	000a2ecd 	.word	0x000a2ecd
   a2e14:	000a2ecd 	.word	0x000a2ecd
   a2e18:	000a2ecd 	.word	0x000a2ecd
   a2e1c:	000a2ecd 	.word	0x000a2ecd
   a2e20:	000a2e6d 	.word	0x000a2e6d
   a2e24:	000a2ecd 	.word	0x000a2ecd
   a2e28:	000a2ecd 	.word	0x000a2ecd
   a2e2c:	000a2e8d 	.word	0x000a2e8d
   a2e30:	000a2ecd 	.word	0x000a2ecd
   a2e34:	000a2ecd 	.word	0x000a2ecd
   a2e38:	000a2ecd 	.word	0x000a2ecd
   a2e3c:	000a2ecd 	.word	0x000a2ecd
   a2e40:	000a2ecd 	.word	0x000a2ecd
   a2e44:	000a2ecd 	.word	0x000a2ecd
   a2e48:	000a2ecd 	.word	0x000a2ecd
   a2e4c:	000a2ecd 	.word	0x000a2ecd
   a2e50:	000a2ecd 	.word	0x000a2ecd
   a2e54:	000a2ecd 	.word	0x000a2ecd
   a2e58:	000a2e75 	.word	0x000a2e75
   a2e5c:	000a2ecd 	.word	0x000a2ecd
   a2e60:	000a2e7d 	.word	0x000a2e7d
   a2e64:	000a2e85 	.word	0x000a2e85
   a2e68:	000a2ecd 	.word	0x000a2ecd
   a2e6c:	683b      	ldr	r3, [r7, #0]
   a2e6e:	2201      	movs	r2, #1
   a2e70:	701a      	strb	r2, [r3, #0]
   a2e72:	e02c      	b.n	a2ece <cl_stby_translatemacevent+0x162>
   a2e74:	683b      	ldr	r3, [r7, #0]
   a2e76:	2204      	movs	r2, #4
   a2e78:	701a      	strb	r2, [r3, #0]
   a2e7a:	e028      	b.n	a2ece <cl_stby_translatemacevent+0x162>
   a2e7c:	683b      	ldr	r3, [r7, #0]
   a2e7e:	2206      	movs	r2, #6
   a2e80:	701a      	strb	r2, [r3, #0]
   a2e82:	e024      	b.n	a2ece <cl_stby_translatemacevent+0x162>
   a2e84:	683b      	ldr	r3, [r7, #0]
   a2e86:	2207      	movs	r2, #7
   a2e88:	701a      	strb	r2, [r3, #0]
   a2e8a:	e020      	b.n	a2ece <cl_stby_translatemacevent+0x162>
   a2e8c:	683b      	ldr	r3, [r7, #0]
   a2e8e:	2209      	movs	r2, #9
   a2e90:	701a      	strb	r2, [r3, #0]
   a2e92:	e01c      	b.n	a2ece <cl_stby_translatemacevent+0x162>
   a2e94:	683b      	ldr	r3, [r7, #0]
   a2e96:	220a      	movs	r2, #10
   a2e98:	701a      	strb	r2, [r3, #0]
   a2e9a:	e018      	b.n	a2ece <cl_stby_translatemacevent+0x162>
   a2e9c:	683b      	ldr	r3, [r7, #0]
   a2e9e:	220c      	movs	r2, #12
   a2ea0:	701a      	strb	r2, [r3, #0]
   a2ea2:	e014      	b.n	a2ece <cl_stby_translatemacevent+0x162>
   a2ea4:	683b      	ldr	r3, [r7, #0]
   a2ea6:	220d      	movs	r2, #13
   a2ea8:	701a      	strb	r2, [r3, #0]
   a2eaa:	e010      	b.n	a2ece <cl_stby_translatemacevent+0x162>
   a2eac:	683b      	ldr	r3, [r7, #0]
   a2eae:	220e      	movs	r2, #14
   a2eb0:	701a      	strb	r2, [r3, #0]
   a2eb2:	e00c      	b.n	a2ece <cl_stby_translatemacevent+0x162>
   a2eb4:	683b      	ldr	r3, [r7, #0]
   a2eb6:	220f      	movs	r2, #15
   a2eb8:	701a      	strb	r2, [r3, #0]
   a2eba:	e008      	b.n	a2ece <cl_stby_translatemacevent+0x162>
   a2ebc:	683b      	ldr	r3, [r7, #0]
   a2ebe:	2210      	movs	r2, #16
   a2ec0:	701a      	strb	r2, [r3, #0]
   a2ec2:	e004      	b.n	a2ece <cl_stby_translatemacevent+0x162>
   a2ec4:	683b      	ldr	r3, [r7, #0]
   a2ec6:	2210      	movs	r2, #16
   a2ec8:	701a      	strb	r2, [r3, #0]
   a2eca:	e000      	b.n	a2ece <cl_stby_translatemacevent+0x162>
   a2ecc:	bf00      	nop
   a2ece:	2300      	movs	r3, #0
   a2ed0:	4618      	mov	r0, r3
   a2ed2:	370c      	adds	r7, #12
   a2ed4:	46bd      	mov	sp, r7
   a2ed6:	bc80      	pop	{r7}
   a2ed8:	4770      	bx	lr
   a2eda:	bf00      	nop

000a2edc <Cl_stby_init>:
   a2edc:	b580      	push	{r7, lr}
   a2ede:	b082      	sub	sp, #8
   a2ee0:	af00      	add	r7, sp, #0
   a2ee2:	2304      	movs	r3, #4
   a2ee4:	717b      	strb	r3, [r7, #5]
   a2ee6:	2301      	movs	r3, #1
   a2ee8:	80fb      	strh	r3, [r7, #6]
   a2eea:	e00a      	b.n	a2f02 <Cl_stby_init+0x26>
   a2eec:	88fb      	ldrh	r3, [r7, #6]
   a2eee:	b2db      	uxtb	r3, r3
   a2ef0:	4618      	mov	r0, r3
   a2ef2:	4b1b      	ldr	r3, [pc, #108]	; (a2f60 <Cl_stby_init+0x84>)
   a2ef4:	4798      	blx	r3
   a2ef6:	200a      	movs	r0, #10
   a2ef8:	4b1a      	ldr	r3, [pc, #104]	; (a2f64 <Cl_stby_init+0x88>)
   a2efa:	4798      	blx	r3
   a2efc:	88fb      	ldrh	r3, [r7, #6]
   a2efe:	3301      	adds	r3, #1
   a2f00:	80fb      	strh	r3, [r7, #6]
   a2f02:	88fb      	ldrh	r3, [r7, #6]
   a2f04:	2b14      	cmp	r3, #20
   a2f06:	d9f1      	bls.n	a2eec <Cl_stby_init+0x10>
   a2f08:	2001      	movs	r0, #1
   a2f0a:	4b17      	ldr	r3, [pc, #92]	; (a2f68 <Cl_stby_init+0x8c>)
   a2f0c:	4798      	blx	r3
   a2f0e:	4603      	mov	r3, r0
   a2f10:	717b      	strb	r3, [r7, #5]
   a2f12:	2002      	movs	r0, #2
   a2f14:	4b14      	ldr	r3, [pc, #80]	; (a2f68 <Cl_stby_init+0x8c>)
   a2f16:	4798      	blx	r3
   a2f18:	4603      	mov	r3, r0
   a2f1a:	717b      	strb	r3, [r7, #5]
   a2f1c:	2004      	movs	r0, #4
   a2f1e:	4b12      	ldr	r3, [pc, #72]	; (a2f68 <Cl_stby_init+0x8c>)
   a2f20:	4798      	blx	r3
   a2f22:	4603      	mov	r3, r0
   a2f24:	717b      	strb	r3, [r7, #5]
   a2f26:	2005      	movs	r0, #5
   a2f28:	4b0f      	ldr	r3, [pc, #60]	; (a2f68 <Cl_stby_init+0x8c>)
   a2f2a:	4798      	blx	r3
   a2f2c:	4603      	mov	r3, r0
   a2f2e:	717b      	strb	r3, [r7, #5]
   a2f30:	2006      	movs	r0, #6
   a2f32:	4b0d      	ldr	r3, [pc, #52]	; (a2f68 <Cl_stby_init+0x8c>)
   a2f34:	4798      	blx	r3
   a2f36:	4603      	mov	r3, r0
   a2f38:	717b      	strb	r3, [r7, #5]
   a2f3a:	4b0c      	ldr	r3, [pc, #48]	; (a2f6c <Cl_stby_init+0x90>)
   a2f3c:	4798      	blx	r3
   a2f3e:	4603      	mov	r3, r0
   a2f40:	717b      	strb	r3, [r7, #5]
   a2f42:	20e1      	movs	r0, #225	; 0xe1
   a2f44:	4b0a      	ldr	r3, [pc, #40]	; (a2f70 <Cl_stby_init+0x94>)
   a2f46:	4798      	blx	r3
   a2f48:	4603      	mov	r3, r0
   a2f4a:	717b      	strb	r3, [r7, #5]
   a2f4c:	2000      	movs	r0, #0
   a2f4e:	4b09      	ldr	r3, [pc, #36]	; (a2f74 <Cl_stby_init+0x98>)
   a2f50:	4798      	blx	r3
   a2f52:	4603      	mov	r3, r0
   a2f54:	717b      	strb	r3, [r7, #5]
   a2f56:	2300      	movs	r3, #0
   a2f58:	4618      	mov	r0, r3
   a2f5a:	3708      	adds	r7, #8
   a2f5c:	46bd      	mov	sp, r7
   a2f5e:	bd80      	pop	{r7, pc}
   a2f60:	000979cd 	.word	0x000979cd
   a2f64:	00091e2d 	.word	0x00091e2d
   a2f68:	00097949 	.word	0x00097949
   a2f6c:	00097999 	.word	0x00097999
   a2f70:	00097e55 	.word	0x00097e55
   a2f74:	0008e401 	.word	0x0008e401

000a2f78 <Cl_StabyRinse_UpdateTimeInfo>:
   a2f78:	b580      	push	{r7, lr}
   a2f7a:	b084      	sub	sp, #16
   a2f7c:	af00      	add	r7, sp, #0
   a2f7e:	2304      	movs	r3, #4
   a2f80:	73fb      	strb	r3, [r7, #15]
   a2f82:	234d      	movs	r3, #77	; 0x4d
   a2f84:	73bb      	strb	r3, [r7, #14]
   a2f86:	1d3b      	adds	r3, r7, #4
   a2f88:	2200      	movs	r2, #0
   a2f8a:	601a      	str	r2, [r3, #0]
   a2f8c:	f8c3 2003 	str.w	r2, [r3, #3]
   a2f90:	230a      	movs	r3, #10
   a2f92:	73bb      	strb	r3, [r7, #14]
   a2f94:	2300      	movs	r3, #0
   a2f96:	713b      	strb	r3, [r7, #4]
   a2f98:	4b16      	ldr	r3, [pc, #88]	; (a2ff4 <Cl_StabyRinse_UpdateTimeInfo+0x7c>)
   a2f9a:	681b      	ldr	r3, [r3, #0]
   a2f9c:	b2db      	uxtb	r3, r3
   a2f9e:	717b      	strb	r3, [r7, #5]
   a2fa0:	4b15      	ldr	r3, [pc, #84]	; (a2ff8 <Cl_StabyRinse_UpdateTimeInfo+0x80>)
   a2fa2:	681b      	ldr	r3, [r3, #0]
   a2fa4:	b2db      	uxtb	r3, r3
   a2fa6:	71bb      	strb	r3, [r7, #6]
   a2fa8:	4b14      	ldr	r3, [pc, #80]	; (a2ffc <Cl_StabyRinse_UpdateTimeInfo+0x84>)
   a2faa:	681b      	ldr	r3, [r3, #0]
   a2fac:	b2db      	uxtb	r3, r3
   a2fae:	71fb      	strb	r3, [r7, #7]
   a2fb0:	4b10      	ldr	r3, [pc, #64]	; (a2ff4 <Cl_StabyRinse_UpdateTimeInfo+0x7c>)
   a2fb2:	681b      	ldr	r3, [r3, #0]
   a2fb4:	b2db      	uxtb	r3, r3
   a2fb6:	425b      	negs	r3, r3
   a2fb8:	b2db      	uxtb	r3, r3
   a2fba:	723b      	strb	r3, [r7, #8]
   a2fbc:	4b0e      	ldr	r3, [pc, #56]	; (a2ff8 <Cl_StabyRinse_UpdateTimeInfo+0x80>)
   a2fbe:	681b      	ldr	r3, [r3, #0]
   a2fc0:	b2db      	uxtb	r3, r3
   a2fc2:	f1c3 0308 	rsb	r3, r3, #8
   a2fc6:	b2db      	uxtb	r3, r3
   a2fc8:	727b      	strb	r3, [r7, #9]
   a2fca:	4b0c      	ldr	r3, [pc, #48]	; (a2ffc <Cl_StabyRinse_UpdateTimeInfo+0x84>)
   a2fcc:	681b      	ldr	r3, [r3, #0]
   a2fce:	b2db      	uxtb	r3, r3
   a2fd0:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   a2fd4:	b2db      	uxtb	r3, r3
   a2fd6:	72bb      	strb	r3, [r7, #10]
   a2fd8:	1d39      	adds	r1, r7, #4
   a2fda:	7bbb      	ldrb	r3, [r7, #14]
   a2fdc:	2207      	movs	r2, #7
   a2fde:	4618      	mov	r0, r3
   a2fe0:	4b07      	ldr	r3, [pc, #28]	; (a3000 <Cl_StabyRinse_UpdateTimeInfo+0x88>)
   a2fe2:	4798      	blx	r3
   a2fe4:	4603      	mov	r3, r0
   a2fe6:	73fb      	strb	r3, [r7, #15]
   a2fe8:	2300      	movs	r3, #0
   a2fea:	4618      	mov	r0, r3
   a2fec:	3710      	adds	r7, #16
   a2fee:	46bd      	mov	sp, r7
   a2ff0:	bd80      	pop	{r7, pc}
   a2ff2:	bf00      	nop
   a2ff4:	200728a8 	.word	0x200728a8
   a2ff8:	200728a4 	.word	0x200728a4
   a2ffc:	200728a0 	.word	0x200728a0
   a3000:	00099729 	.word	0x00099729

000a3004 <Cl_standby_ProcessAlarms>:
   a3004:	b580      	push	{r7, lr}
   a3006:	b082      	sub	sp, #8
   a3008:	af00      	add	r7, sp, #0
   a300a:	2300      	movs	r3, #0
   a300c:	71bb      	strb	r3, [r7, #6]
   a300e:	2300      	movs	r3, #0
   a3010:	71fb      	strb	r3, [r7, #7]
   a3012:	234d      	movs	r3, #77	; 0x4d
   a3014:	717b      	strb	r3, [r7, #5]
   a3016:	2300      	movs	r3, #0
   a3018:	71fb      	strb	r3, [r7, #7]
   a301a:	e01c      	b.n	a3056 <Cl_standby_ProcessAlarms+0x52>
   a301c:	79fa      	ldrb	r2, [r7, #7]
   a301e:	4912      	ldr	r1, [pc, #72]	; (a3068 <Cl_standby_ProcessAlarms+0x64>)
   a3020:	4613      	mov	r3, r2
   a3022:	00db      	lsls	r3, r3, #3
   a3024:	4413      	add	r3, r2
   a3026:	440b      	add	r3, r1
   a3028:	7818      	ldrb	r0, [r3, #0]
   a302a:	79fa      	ldrb	r2, [r7, #7]
   a302c:	4613      	mov	r3, r2
   a302e:	00db      	lsls	r3, r3, #3
   a3030:	4413      	add	r3, r2
   a3032:	4a0d      	ldr	r2, [pc, #52]	; (a3068 <Cl_standby_ProcessAlarms+0x64>)
   a3034:	4413      	add	r3, r2
   a3036:	3304      	adds	r3, #4
   a3038:	4619      	mov	r1, r3
   a303a:	4b0c      	ldr	r3, [pc, #48]	; (a306c <Cl_standby_ProcessAlarms+0x68>)
   a303c:	4798      	blx	r3
   a303e:	79fa      	ldrb	r2, [r7, #7]
   a3040:	4909      	ldr	r1, [pc, #36]	; (a3068 <Cl_standby_ProcessAlarms+0x64>)
   a3042:	4613      	mov	r3, r2
   a3044:	00db      	lsls	r3, r3, #3
   a3046:	4413      	add	r3, r2
   a3048:	440b      	add	r3, r1
   a304a:	3304      	adds	r3, #4
   a304c:	781b      	ldrb	r3, [r3, #0]
   a304e:	2b00      	cmp	r3, #0
   a3050:	79fb      	ldrb	r3, [r7, #7]
   a3052:	3301      	adds	r3, #1
   a3054:	71fb      	strb	r3, [r7, #7]
   a3056:	79fb      	ldrb	r3, [r7, #7]
   a3058:	2b03      	cmp	r3, #3
   a305a:	d9df      	bls.n	a301c <Cl_standby_ProcessAlarms+0x18>
   a305c:	79bb      	ldrb	r3, [r7, #6]
   a305e:	4618      	mov	r0, r3
   a3060:	3708      	adds	r7, #8
   a3062:	46bd      	mov	sp, r7
   a3064:	bd80      	pop	{r7, pc}
   a3066:	bf00      	nop
   a3068:	20070c74 	.word	0x20070c74
   a306c:	00083035 	.word	0x00083035

000a3070 <Cl_standby_UpdateAlarmTable>:
   a3070:	b580      	push	{r7, lr}
   a3072:	b084      	sub	sp, #16
   a3074:	af00      	add	r7, sp, #0
   a3076:	6078      	str	r0, [r7, #4]
   a3078:	2300      	movs	r3, #0
   a307a:	73fb      	strb	r3, [r7, #15]
   a307c:	2300      	movs	r3, #0
   a307e:	73bb      	strb	r3, [r7, #14]
   a3080:	234d      	movs	r3, #77	; 0x4d
   a3082:	737b      	strb	r3, [r7, #13]
   a3084:	2300      	movs	r3, #0
   a3086:	73bb      	strb	r3, [r7, #14]
   a3088:	e0bc      	b.n	a3204 <Cl_standby_UpdateAlarmTable+0x194>
   a308a:	7bba      	ldrb	r2, [r7, #14]
   a308c:	4962      	ldr	r1, [pc, #392]	; (a3218 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a308e:	4613      	mov	r3, r2
   a3090:	00db      	lsls	r3, r3, #3
   a3092:	4413      	add	r3, r2
   a3094:	440b      	add	r3, r1
   a3096:	7818      	ldrb	r0, [r3, #0]
   a3098:	7bba      	ldrb	r2, [r7, #14]
   a309a:	4613      	mov	r3, r2
   a309c:	00db      	lsls	r3, r3, #3
   a309e:	4413      	add	r3, r2
   a30a0:	4a5d      	ldr	r2, [pc, #372]	; (a3218 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a30a2:	4413      	add	r3, r2
   a30a4:	3304      	adds	r3, #4
   a30a6:	4619      	mov	r1, r3
   a30a8:	4b5c      	ldr	r3, [pc, #368]	; (a321c <Cl_standby_UpdateAlarmTable+0x1ac>)
   a30aa:	4798      	blx	r3
   a30ac:	7bba      	ldrb	r2, [r7, #14]
   a30ae:	495a      	ldr	r1, [pc, #360]	; (a3218 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a30b0:	4613      	mov	r3, r2
   a30b2:	00db      	lsls	r3, r3, #3
   a30b4:	4413      	add	r3, r2
   a30b6:	440b      	add	r3, r1
   a30b8:	3304      	adds	r3, #4
   a30ba:	781b      	ldrb	r3, [r3, #0]
   a30bc:	2b00      	cmp	r3, #0
   a30be:	d076      	beq.n	a31ae <Cl_standby_UpdateAlarmTable+0x13e>
   a30c0:	7bba      	ldrb	r2, [r7, #14]
   a30c2:	4955      	ldr	r1, [pc, #340]	; (a3218 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a30c4:	4613      	mov	r3, r2
   a30c6:	00db      	lsls	r3, r3, #3
   a30c8:	4413      	add	r3, r2
   a30ca:	440b      	add	r3, r1
   a30cc:	3305      	adds	r3, #5
   a30ce:	781b      	ldrb	r3, [r3, #0]
   a30d0:	f083 0301 	eor.w	r3, r3, #1
   a30d4:	b2db      	uxtb	r3, r3
   a30d6:	2b00      	cmp	r3, #0
   a30d8:	d01e      	beq.n	a3118 <Cl_standby_UpdateAlarmTable+0xa8>
   a30da:	7bba      	ldrb	r2, [r7, #14]
   a30dc:	494e      	ldr	r1, [pc, #312]	; (a3218 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a30de:	4613      	mov	r3, r2
   a30e0:	00db      	lsls	r3, r3, #3
   a30e2:	4413      	add	r3, r2
   a30e4:	440b      	add	r3, r1
   a30e6:	781b      	ldrb	r3, [r3, #0]
   a30e8:	723b      	strb	r3, [r7, #8]
   a30ea:	2301      	movs	r3, #1
   a30ec:	727b      	strb	r3, [r7, #9]
   a30ee:	2307      	movs	r3, #7
   a30f0:	737b      	strb	r3, [r7, #13]
   a30f2:	f107 0108 	add.w	r1, r7, #8
   a30f6:	7b7b      	ldrb	r3, [r7, #13]
   a30f8:	2202      	movs	r2, #2
   a30fa:	4618      	mov	r0, r3
   a30fc:	4b48      	ldr	r3, [pc, #288]	; (a3220 <Cl_standby_UpdateAlarmTable+0x1b0>)
   a30fe:	4798      	blx	r3
   a3100:	4603      	mov	r3, r0
   a3102:	73fb      	strb	r3, [r7, #15]
   a3104:	7bba      	ldrb	r2, [r7, #14]
   a3106:	4944      	ldr	r1, [pc, #272]	; (a3218 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a3108:	4613      	mov	r3, r2
   a310a:	00db      	lsls	r3, r3, #3
   a310c:	4413      	add	r3, r2
   a310e:	440b      	add	r3, r1
   a3110:	3305      	adds	r3, #5
   a3112:	2201      	movs	r2, #1
   a3114:	701a      	strb	r2, [r3, #0]
   a3116:	e072      	b.n	a31fe <Cl_standby_UpdateAlarmTable+0x18e>
   a3118:	7bba      	ldrb	r2, [r7, #14]
   a311a:	493f      	ldr	r1, [pc, #252]	; (a3218 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a311c:	4613      	mov	r3, r2
   a311e:	00db      	lsls	r3, r3, #3
   a3120:	4413      	add	r3, r2
   a3122:	440b      	add	r3, r1
   a3124:	3301      	adds	r3, #1
   a3126:	781b      	ldrb	r3, [r3, #0]
   a3128:	3301      	adds	r3, #1
   a312a:	b2d8      	uxtb	r0, r3
   a312c:	493a      	ldr	r1, [pc, #232]	; (a3218 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a312e:	4613      	mov	r3, r2
   a3130:	00db      	lsls	r3, r3, #3
   a3132:	4413      	add	r3, r2
   a3134:	440b      	add	r3, r1
   a3136:	3301      	adds	r3, #1
   a3138:	4602      	mov	r2, r0
   a313a:	701a      	strb	r2, [r3, #0]
   a313c:	7bba      	ldrb	r2, [r7, #14]
   a313e:	4936      	ldr	r1, [pc, #216]	; (a3218 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a3140:	4613      	mov	r3, r2
   a3142:	00db      	lsls	r3, r3, #3
   a3144:	4413      	add	r3, r2
   a3146:	440b      	add	r3, r1
   a3148:	3303      	adds	r3, #3
   a314a:	781b      	ldrb	r3, [r3, #0]
   a314c:	3301      	adds	r3, #1
   a314e:	b2d8      	uxtb	r0, r3
   a3150:	4931      	ldr	r1, [pc, #196]	; (a3218 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a3152:	4613      	mov	r3, r2
   a3154:	00db      	lsls	r3, r3, #3
   a3156:	4413      	add	r3, r2
   a3158:	440b      	add	r3, r1
   a315a:	3303      	adds	r3, #3
   a315c:	4602      	mov	r2, r0
   a315e:	701a      	strb	r2, [r3, #0]
   a3160:	7bba      	ldrb	r2, [r7, #14]
   a3162:	492d      	ldr	r1, [pc, #180]	; (a3218 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a3164:	4613      	mov	r3, r2
   a3166:	00db      	lsls	r3, r3, #3
   a3168:	4413      	add	r3, r2
   a316a:	440b      	add	r3, r1
   a316c:	3301      	adds	r3, #1
   a316e:	781b      	ldrb	r3, [r3, #0]
   a3170:	2b05      	cmp	r3, #5
   a3172:	d908      	bls.n	a3186 <Cl_standby_UpdateAlarmTable+0x116>
   a3174:	7bba      	ldrb	r2, [r7, #14]
   a3176:	4928      	ldr	r1, [pc, #160]	; (a3218 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a3178:	4613      	mov	r3, r2
   a317a:	00db      	lsls	r3, r3, #3
   a317c:	4413      	add	r3, r2
   a317e:	440b      	add	r3, r1
   a3180:	3303      	adds	r3, #3
   a3182:	2200      	movs	r2, #0
   a3184:	701a      	strb	r2, [r3, #0]
   a3186:	7bba      	ldrb	r2, [r7, #14]
   a3188:	4923      	ldr	r1, [pc, #140]	; (a3218 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a318a:	4613      	mov	r3, r2
   a318c:	00db      	lsls	r3, r3, #3
   a318e:	4413      	add	r3, r2
   a3190:	440b      	add	r3, r1
   a3192:	3301      	adds	r3, #1
   a3194:	781b      	ldrb	r3, [r3, #0]
   a3196:	2b3b      	cmp	r3, #59	; 0x3b
   a3198:	d931      	bls.n	a31fe <Cl_standby_UpdateAlarmTable+0x18e>
   a319a:	7bba      	ldrb	r2, [r7, #14]
   a319c:	491e      	ldr	r1, [pc, #120]	; (a3218 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a319e:	4613      	mov	r3, r2
   a31a0:	00db      	lsls	r3, r3, #3
   a31a2:	4413      	add	r3, r2
   a31a4:	440b      	add	r3, r1
   a31a6:	3301      	adds	r3, #1
   a31a8:	2200      	movs	r2, #0
   a31aa:	701a      	strb	r2, [r3, #0]
   a31ac:	e027      	b.n	a31fe <Cl_standby_UpdateAlarmTable+0x18e>
   a31ae:	7bba      	ldrb	r2, [r7, #14]
   a31b0:	4919      	ldr	r1, [pc, #100]	; (a3218 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a31b2:	4613      	mov	r3, r2
   a31b4:	00db      	lsls	r3, r3, #3
   a31b6:	4413      	add	r3, r2
   a31b8:	440b      	add	r3, r1
   a31ba:	3305      	adds	r3, #5
   a31bc:	781b      	ldrb	r3, [r3, #0]
   a31be:	2b00      	cmp	r3, #0
   a31c0:	d01d      	beq.n	a31fe <Cl_standby_UpdateAlarmTable+0x18e>
   a31c2:	7bba      	ldrb	r2, [r7, #14]
   a31c4:	4914      	ldr	r1, [pc, #80]	; (a3218 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a31c6:	4613      	mov	r3, r2
   a31c8:	00db      	lsls	r3, r3, #3
   a31ca:	4413      	add	r3, r2
   a31cc:	440b      	add	r3, r1
   a31ce:	3305      	adds	r3, #5
   a31d0:	2200      	movs	r2, #0
   a31d2:	701a      	strb	r2, [r3, #0]
   a31d4:	2307      	movs	r3, #7
   a31d6:	737b      	strb	r3, [r7, #13]
   a31d8:	7bba      	ldrb	r2, [r7, #14]
   a31da:	490f      	ldr	r1, [pc, #60]	; (a3218 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a31dc:	4613      	mov	r3, r2
   a31de:	00db      	lsls	r3, r3, #3
   a31e0:	4413      	add	r3, r2
   a31e2:	440b      	add	r3, r1
   a31e4:	781b      	ldrb	r3, [r3, #0]
   a31e6:	723b      	strb	r3, [r7, #8]
   a31e8:	2300      	movs	r3, #0
   a31ea:	727b      	strb	r3, [r7, #9]
   a31ec:	f107 0108 	add.w	r1, r7, #8
   a31f0:	7b7b      	ldrb	r3, [r7, #13]
   a31f2:	2202      	movs	r2, #2
   a31f4:	4618      	mov	r0, r3
   a31f6:	4b0a      	ldr	r3, [pc, #40]	; (a3220 <Cl_standby_UpdateAlarmTable+0x1b0>)
   a31f8:	4798      	blx	r3
   a31fa:	4603      	mov	r3, r0
   a31fc:	73fb      	strb	r3, [r7, #15]
   a31fe:	7bbb      	ldrb	r3, [r7, #14]
   a3200:	3301      	adds	r3, #1
   a3202:	73bb      	strb	r3, [r7, #14]
   a3204:	7bbb      	ldrb	r3, [r7, #14]
   a3206:	2b03      	cmp	r3, #3
   a3208:	f67f af3f 	bls.w	a308a <Cl_standby_UpdateAlarmTable+0x1a>
   a320c:	7bfb      	ldrb	r3, [r7, #15]
   a320e:	4618      	mov	r0, r3
   a3210:	3710      	adds	r7, #16
   a3212:	46bd      	mov	sp, r7
   a3214:	bd80      	pop	{r7, pc}
   a3216:	bf00      	nop
   a3218:	20070c74 	.word	0x20070c74
   a321c:	00083035 	.word	0x00083035
   a3220:	00099729 	.word	0x00099729

000a3224 <__aeabi_drsub>:
   a3224:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   a3228:	e002      	b.n	a3230 <__adddf3>
   a322a:	bf00      	nop

000a322c <__aeabi_dsub>:
   a322c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000a3230 <__adddf3>:
   a3230:	b530      	push	{r4, r5, lr}
   a3232:	ea4f 0441 	mov.w	r4, r1, lsl #1
   a3236:	ea4f 0543 	mov.w	r5, r3, lsl #1
   a323a:	ea94 0f05 	teq	r4, r5
   a323e:	bf08      	it	eq
   a3240:	ea90 0f02 	teqeq	r0, r2
   a3244:	bf1f      	itttt	ne
   a3246:	ea54 0c00 	orrsne.w	ip, r4, r0
   a324a:	ea55 0c02 	orrsne.w	ip, r5, r2
   a324e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   a3252:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   a3256:	f000 80e2 	beq.w	a341e <__adddf3+0x1ee>
   a325a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   a325e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   a3262:	bfb8      	it	lt
   a3264:	426d      	neglt	r5, r5
   a3266:	dd0c      	ble.n	a3282 <__adddf3+0x52>
   a3268:	442c      	add	r4, r5
   a326a:	ea80 0202 	eor.w	r2, r0, r2
   a326e:	ea81 0303 	eor.w	r3, r1, r3
   a3272:	ea82 0000 	eor.w	r0, r2, r0
   a3276:	ea83 0101 	eor.w	r1, r3, r1
   a327a:	ea80 0202 	eor.w	r2, r0, r2
   a327e:	ea81 0303 	eor.w	r3, r1, r3
   a3282:	2d36      	cmp	r5, #54	; 0x36
   a3284:	bf88      	it	hi
   a3286:	bd30      	pophi	{r4, r5, pc}
   a3288:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a328c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   a3290:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   a3294:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   a3298:	d002      	beq.n	a32a0 <__adddf3+0x70>
   a329a:	4240      	negs	r0, r0
   a329c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a32a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   a32a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   a32a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   a32ac:	d002      	beq.n	a32b4 <__adddf3+0x84>
   a32ae:	4252      	negs	r2, r2
   a32b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   a32b4:	ea94 0f05 	teq	r4, r5
   a32b8:	f000 80a7 	beq.w	a340a <__adddf3+0x1da>
   a32bc:	f1a4 0401 	sub.w	r4, r4, #1
   a32c0:	f1d5 0e20 	rsbs	lr, r5, #32
   a32c4:	db0d      	blt.n	a32e2 <__adddf3+0xb2>
   a32c6:	fa02 fc0e 	lsl.w	ip, r2, lr
   a32ca:	fa22 f205 	lsr.w	r2, r2, r5
   a32ce:	1880      	adds	r0, r0, r2
   a32d0:	f141 0100 	adc.w	r1, r1, #0
   a32d4:	fa03 f20e 	lsl.w	r2, r3, lr
   a32d8:	1880      	adds	r0, r0, r2
   a32da:	fa43 f305 	asr.w	r3, r3, r5
   a32de:	4159      	adcs	r1, r3
   a32e0:	e00e      	b.n	a3300 <__adddf3+0xd0>
   a32e2:	f1a5 0520 	sub.w	r5, r5, #32
   a32e6:	f10e 0e20 	add.w	lr, lr, #32
   a32ea:	2a01      	cmp	r2, #1
   a32ec:	fa03 fc0e 	lsl.w	ip, r3, lr
   a32f0:	bf28      	it	cs
   a32f2:	f04c 0c02 	orrcs.w	ip, ip, #2
   a32f6:	fa43 f305 	asr.w	r3, r3, r5
   a32fa:	18c0      	adds	r0, r0, r3
   a32fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   a3300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a3304:	d507      	bpl.n	a3316 <__adddf3+0xe6>
   a3306:	f04f 0e00 	mov.w	lr, #0
   a330a:	f1dc 0c00 	rsbs	ip, ip, #0
   a330e:	eb7e 0000 	sbcs.w	r0, lr, r0
   a3312:	eb6e 0101 	sbc.w	r1, lr, r1
   a3316:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   a331a:	d31b      	bcc.n	a3354 <__adddf3+0x124>
   a331c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   a3320:	d30c      	bcc.n	a333c <__adddf3+0x10c>
   a3322:	0849      	lsrs	r1, r1, #1
   a3324:	ea5f 0030 	movs.w	r0, r0, rrx
   a3328:	ea4f 0c3c 	mov.w	ip, ip, rrx
   a332c:	f104 0401 	add.w	r4, r4, #1
   a3330:	ea4f 5244 	mov.w	r2, r4, lsl #21
   a3334:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   a3338:	f080 809a 	bcs.w	a3470 <__adddf3+0x240>
   a333c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   a3340:	bf08      	it	eq
   a3342:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   a3346:	f150 0000 	adcs.w	r0, r0, #0
   a334a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a334e:	ea41 0105 	orr.w	r1, r1, r5
   a3352:	bd30      	pop	{r4, r5, pc}
   a3354:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   a3358:	4140      	adcs	r0, r0
   a335a:	eb41 0101 	adc.w	r1, r1, r1
   a335e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a3362:	f1a4 0401 	sub.w	r4, r4, #1
   a3366:	d1e9      	bne.n	a333c <__adddf3+0x10c>
   a3368:	f091 0f00 	teq	r1, #0
   a336c:	bf04      	itt	eq
   a336e:	4601      	moveq	r1, r0
   a3370:	2000      	moveq	r0, #0
   a3372:	fab1 f381 	clz	r3, r1
   a3376:	bf08      	it	eq
   a3378:	3320      	addeq	r3, #32
   a337a:	f1a3 030b 	sub.w	r3, r3, #11
   a337e:	f1b3 0220 	subs.w	r2, r3, #32
   a3382:	da0c      	bge.n	a339e <__adddf3+0x16e>
   a3384:	320c      	adds	r2, #12
   a3386:	dd08      	ble.n	a339a <__adddf3+0x16a>
   a3388:	f102 0c14 	add.w	ip, r2, #20
   a338c:	f1c2 020c 	rsb	r2, r2, #12
   a3390:	fa01 f00c 	lsl.w	r0, r1, ip
   a3394:	fa21 f102 	lsr.w	r1, r1, r2
   a3398:	e00c      	b.n	a33b4 <__adddf3+0x184>
   a339a:	f102 0214 	add.w	r2, r2, #20
   a339e:	bfd8      	it	le
   a33a0:	f1c2 0c20 	rsble	ip, r2, #32
   a33a4:	fa01 f102 	lsl.w	r1, r1, r2
   a33a8:	fa20 fc0c 	lsr.w	ip, r0, ip
   a33ac:	bfdc      	itt	le
   a33ae:	ea41 010c 	orrle.w	r1, r1, ip
   a33b2:	4090      	lslle	r0, r2
   a33b4:	1ae4      	subs	r4, r4, r3
   a33b6:	bfa2      	ittt	ge
   a33b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   a33bc:	4329      	orrge	r1, r5
   a33be:	bd30      	popge	{r4, r5, pc}
   a33c0:	ea6f 0404 	mvn.w	r4, r4
   a33c4:	3c1f      	subs	r4, #31
   a33c6:	da1c      	bge.n	a3402 <__adddf3+0x1d2>
   a33c8:	340c      	adds	r4, #12
   a33ca:	dc0e      	bgt.n	a33ea <__adddf3+0x1ba>
   a33cc:	f104 0414 	add.w	r4, r4, #20
   a33d0:	f1c4 0220 	rsb	r2, r4, #32
   a33d4:	fa20 f004 	lsr.w	r0, r0, r4
   a33d8:	fa01 f302 	lsl.w	r3, r1, r2
   a33dc:	ea40 0003 	orr.w	r0, r0, r3
   a33e0:	fa21 f304 	lsr.w	r3, r1, r4
   a33e4:	ea45 0103 	orr.w	r1, r5, r3
   a33e8:	bd30      	pop	{r4, r5, pc}
   a33ea:	f1c4 040c 	rsb	r4, r4, #12
   a33ee:	f1c4 0220 	rsb	r2, r4, #32
   a33f2:	fa20 f002 	lsr.w	r0, r0, r2
   a33f6:	fa01 f304 	lsl.w	r3, r1, r4
   a33fa:	ea40 0003 	orr.w	r0, r0, r3
   a33fe:	4629      	mov	r1, r5
   a3400:	bd30      	pop	{r4, r5, pc}
   a3402:	fa21 f004 	lsr.w	r0, r1, r4
   a3406:	4629      	mov	r1, r5
   a3408:	bd30      	pop	{r4, r5, pc}
   a340a:	f094 0f00 	teq	r4, #0
   a340e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   a3412:	bf06      	itte	eq
   a3414:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   a3418:	3401      	addeq	r4, #1
   a341a:	3d01      	subne	r5, #1
   a341c:	e74e      	b.n	a32bc <__adddf3+0x8c>
   a341e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   a3422:	bf18      	it	ne
   a3424:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   a3428:	d029      	beq.n	a347e <__adddf3+0x24e>
   a342a:	ea94 0f05 	teq	r4, r5
   a342e:	bf08      	it	eq
   a3430:	ea90 0f02 	teqeq	r0, r2
   a3434:	d005      	beq.n	a3442 <__adddf3+0x212>
   a3436:	ea54 0c00 	orrs.w	ip, r4, r0
   a343a:	bf04      	itt	eq
   a343c:	4619      	moveq	r1, r3
   a343e:	4610      	moveq	r0, r2
   a3440:	bd30      	pop	{r4, r5, pc}
   a3442:	ea91 0f03 	teq	r1, r3
   a3446:	bf1e      	ittt	ne
   a3448:	2100      	movne	r1, #0
   a344a:	2000      	movne	r0, #0
   a344c:	bd30      	popne	{r4, r5, pc}
   a344e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   a3452:	d105      	bne.n	a3460 <__adddf3+0x230>
   a3454:	0040      	lsls	r0, r0, #1
   a3456:	4149      	adcs	r1, r1
   a3458:	bf28      	it	cs
   a345a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   a345e:	bd30      	pop	{r4, r5, pc}
   a3460:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   a3464:	bf3c      	itt	cc
   a3466:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   a346a:	bd30      	popcc	{r4, r5, pc}
   a346c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a3470:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   a3474:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   a3478:	f04f 0000 	mov.w	r0, #0
   a347c:	bd30      	pop	{r4, r5, pc}
   a347e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   a3482:	bf1a      	itte	ne
   a3484:	4619      	movne	r1, r3
   a3486:	4610      	movne	r0, r2
   a3488:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   a348c:	bf1c      	itt	ne
   a348e:	460b      	movne	r3, r1
   a3490:	4602      	movne	r2, r0
   a3492:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   a3496:	bf06      	itte	eq
   a3498:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   a349c:	ea91 0f03 	teqeq	r1, r3
   a34a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   a34a4:	bd30      	pop	{r4, r5, pc}
   a34a6:	bf00      	nop

000a34a8 <__aeabi_ui2d>:
   a34a8:	f090 0f00 	teq	r0, #0
   a34ac:	bf04      	itt	eq
   a34ae:	2100      	moveq	r1, #0
   a34b0:	4770      	bxeq	lr
   a34b2:	b530      	push	{r4, r5, lr}
   a34b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a34b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a34bc:	f04f 0500 	mov.w	r5, #0
   a34c0:	f04f 0100 	mov.w	r1, #0
   a34c4:	e750      	b.n	a3368 <__adddf3+0x138>
   a34c6:	bf00      	nop

000a34c8 <__aeabi_i2d>:
   a34c8:	f090 0f00 	teq	r0, #0
   a34cc:	bf04      	itt	eq
   a34ce:	2100      	moveq	r1, #0
   a34d0:	4770      	bxeq	lr
   a34d2:	b530      	push	{r4, r5, lr}
   a34d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a34d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a34dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   a34e0:	bf48      	it	mi
   a34e2:	4240      	negmi	r0, r0
   a34e4:	f04f 0100 	mov.w	r1, #0
   a34e8:	e73e      	b.n	a3368 <__adddf3+0x138>
   a34ea:	bf00      	nop

000a34ec <__aeabi_f2d>:
   a34ec:	0042      	lsls	r2, r0, #1
   a34ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
   a34f2:	ea4f 0131 	mov.w	r1, r1, rrx
   a34f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   a34fa:	bf1f      	itttt	ne
   a34fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   a3500:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   a3504:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   a3508:	4770      	bxne	lr
   a350a:	f092 0f00 	teq	r2, #0
   a350e:	bf14      	ite	ne
   a3510:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   a3514:	4770      	bxeq	lr
   a3516:	b530      	push	{r4, r5, lr}
   a3518:	f44f 7460 	mov.w	r4, #896	; 0x380
   a351c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a3520:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   a3524:	e720      	b.n	a3368 <__adddf3+0x138>
   a3526:	bf00      	nop

000a3528 <__aeabi_ul2d>:
   a3528:	ea50 0201 	orrs.w	r2, r0, r1
   a352c:	bf08      	it	eq
   a352e:	4770      	bxeq	lr
   a3530:	b530      	push	{r4, r5, lr}
   a3532:	f04f 0500 	mov.w	r5, #0
   a3536:	e00a      	b.n	a354e <__aeabi_l2d+0x16>

000a3538 <__aeabi_l2d>:
   a3538:	ea50 0201 	orrs.w	r2, r0, r1
   a353c:	bf08      	it	eq
   a353e:	4770      	bxeq	lr
   a3540:	b530      	push	{r4, r5, lr}
   a3542:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   a3546:	d502      	bpl.n	a354e <__aeabi_l2d+0x16>
   a3548:	4240      	negs	r0, r0
   a354a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a354e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a3552:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a3556:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   a355a:	f43f aedc 	beq.w	a3316 <__adddf3+0xe6>
   a355e:	f04f 0203 	mov.w	r2, #3
   a3562:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   a3566:	bf18      	it	ne
   a3568:	3203      	addne	r2, #3
   a356a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   a356e:	bf18      	it	ne
   a3570:	3203      	addne	r2, #3
   a3572:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   a3576:	f1c2 0320 	rsb	r3, r2, #32
   a357a:	fa00 fc03 	lsl.w	ip, r0, r3
   a357e:	fa20 f002 	lsr.w	r0, r0, r2
   a3582:	fa01 fe03 	lsl.w	lr, r1, r3
   a3586:	ea40 000e 	orr.w	r0, r0, lr
   a358a:	fa21 f102 	lsr.w	r1, r1, r2
   a358e:	4414      	add	r4, r2
   a3590:	e6c1      	b.n	a3316 <__adddf3+0xe6>
   a3592:	bf00      	nop

000a3594 <__aeabi_dmul>:
   a3594:	b570      	push	{r4, r5, r6, lr}
   a3596:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a359a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   a359e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   a35a2:	bf1d      	ittte	ne
   a35a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   a35a8:	ea94 0f0c 	teqne	r4, ip
   a35ac:	ea95 0f0c 	teqne	r5, ip
   a35b0:	f000 f8de 	bleq	a3770 <__aeabi_dmul+0x1dc>
   a35b4:	442c      	add	r4, r5
   a35b6:	ea81 0603 	eor.w	r6, r1, r3
   a35ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   a35be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   a35c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   a35c6:	bf18      	it	ne
   a35c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   a35cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a35d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   a35d4:	d038      	beq.n	a3648 <__aeabi_dmul+0xb4>
   a35d6:	fba0 ce02 	umull	ip, lr, r0, r2
   a35da:	f04f 0500 	mov.w	r5, #0
   a35de:	fbe1 e502 	umlal	lr, r5, r1, r2
   a35e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   a35e6:	fbe0 e503 	umlal	lr, r5, r0, r3
   a35ea:	f04f 0600 	mov.w	r6, #0
   a35ee:	fbe1 5603 	umlal	r5, r6, r1, r3
   a35f2:	f09c 0f00 	teq	ip, #0
   a35f6:	bf18      	it	ne
   a35f8:	f04e 0e01 	orrne.w	lr, lr, #1
   a35fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   a3600:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   a3604:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   a3608:	d204      	bcs.n	a3614 <__aeabi_dmul+0x80>
   a360a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   a360e:	416d      	adcs	r5, r5
   a3610:	eb46 0606 	adc.w	r6, r6, r6
   a3614:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   a3618:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   a361c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   a3620:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   a3624:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   a3628:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   a362c:	bf88      	it	hi
   a362e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   a3632:	d81e      	bhi.n	a3672 <__aeabi_dmul+0xde>
   a3634:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   a3638:	bf08      	it	eq
   a363a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   a363e:	f150 0000 	adcs.w	r0, r0, #0
   a3642:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a3646:	bd70      	pop	{r4, r5, r6, pc}
   a3648:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   a364c:	ea46 0101 	orr.w	r1, r6, r1
   a3650:	ea40 0002 	orr.w	r0, r0, r2
   a3654:	ea81 0103 	eor.w	r1, r1, r3
   a3658:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   a365c:	bfc2      	ittt	gt
   a365e:	ebd4 050c 	rsbsgt	r5, r4, ip
   a3662:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   a3666:	bd70      	popgt	{r4, r5, r6, pc}
   a3668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a366c:	f04f 0e00 	mov.w	lr, #0
   a3670:	3c01      	subs	r4, #1
   a3672:	f300 80ab 	bgt.w	a37cc <__aeabi_dmul+0x238>
   a3676:	f114 0f36 	cmn.w	r4, #54	; 0x36
   a367a:	bfde      	ittt	le
   a367c:	2000      	movle	r0, #0
   a367e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   a3682:	bd70      	pople	{r4, r5, r6, pc}
   a3684:	f1c4 0400 	rsb	r4, r4, #0
   a3688:	3c20      	subs	r4, #32
   a368a:	da35      	bge.n	a36f8 <__aeabi_dmul+0x164>
   a368c:	340c      	adds	r4, #12
   a368e:	dc1b      	bgt.n	a36c8 <__aeabi_dmul+0x134>
   a3690:	f104 0414 	add.w	r4, r4, #20
   a3694:	f1c4 0520 	rsb	r5, r4, #32
   a3698:	fa00 f305 	lsl.w	r3, r0, r5
   a369c:	fa20 f004 	lsr.w	r0, r0, r4
   a36a0:	fa01 f205 	lsl.w	r2, r1, r5
   a36a4:	ea40 0002 	orr.w	r0, r0, r2
   a36a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   a36ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   a36b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   a36b4:	fa21 f604 	lsr.w	r6, r1, r4
   a36b8:	eb42 0106 	adc.w	r1, r2, r6
   a36bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a36c0:	bf08      	it	eq
   a36c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a36c6:	bd70      	pop	{r4, r5, r6, pc}
   a36c8:	f1c4 040c 	rsb	r4, r4, #12
   a36cc:	f1c4 0520 	rsb	r5, r4, #32
   a36d0:	fa00 f304 	lsl.w	r3, r0, r4
   a36d4:	fa20 f005 	lsr.w	r0, r0, r5
   a36d8:	fa01 f204 	lsl.w	r2, r1, r4
   a36dc:	ea40 0002 	orr.w	r0, r0, r2
   a36e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a36e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   a36e8:	f141 0100 	adc.w	r1, r1, #0
   a36ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a36f0:	bf08      	it	eq
   a36f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a36f6:	bd70      	pop	{r4, r5, r6, pc}
   a36f8:	f1c4 0520 	rsb	r5, r4, #32
   a36fc:	fa00 f205 	lsl.w	r2, r0, r5
   a3700:	ea4e 0e02 	orr.w	lr, lr, r2
   a3704:	fa20 f304 	lsr.w	r3, r0, r4
   a3708:	fa01 f205 	lsl.w	r2, r1, r5
   a370c:	ea43 0302 	orr.w	r3, r3, r2
   a3710:	fa21 f004 	lsr.w	r0, r1, r4
   a3714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a3718:	fa21 f204 	lsr.w	r2, r1, r4
   a371c:	ea20 0002 	bic.w	r0, r0, r2
   a3720:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   a3724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a3728:	bf08      	it	eq
   a372a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a372e:	bd70      	pop	{r4, r5, r6, pc}
   a3730:	f094 0f00 	teq	r4, #0
   a3734:	d10f      	bne.n	a3756 <__aeabi_dmul+0x1c2>
   a3736:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   a373a:	0040      	lsls	r0, r0, #1
   a373c:	eb41 0101 	adc.w	r1, r1, r1
   a3740:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a3744:	bf08      	it	eq
   a3746:	3c01      	subeq	r4, #1
   a3748:	d0f7      	beq.n	a373a <__aeabi_dmul+0x1a6>
   a374a:	ea41 0106 	orr.w	r1, r1, r6
   a374e:	f095 0f00 	teq	r5, #0
   a3752:	bf18      	it	ne
   a3754:	4770      	bxne	lr
   a3756:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   a375a:	0052      	lsls	r2, r2, #1
   a375c:	eb43 0303 	adc.w	r3, r3, r3
   a3760:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   a3764:	bf08      	it	eq
   a3766:	3d01      	subeq	r5, #1
   a3768:	d0f7      	beq.n	a375a <__aeabi_dmul+0x1c6>
   a376a:	ea43 0306 	orr.w	r3, r3, r6
   a376e:	4770      	bx	lr
   a3770:	ea94 0f0c 	teq	r4, ip
   a3774:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   a3778:	bf18      	it	ne
   a377a:	ea95 0f0c 	teqne	r5, ip
   a377e:	d00c      	beq.n	a379a <__aeabi_dmul+0x206>
   a3780:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a3784:	bf18      	it	ne
   a3786:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a378a:	d1d1      	bne.n	a3730 <__aeabi_dmul+0x19c>
   a378c:	ea81 0103 	eor.w	r1, r1, r3
   a3790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a3794:	f04f 0000 	mov.w	r0, #0
   a3798:	bd70      	pop	{r4, r5, r6, pc}
   a379a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a379e:	bf06      	itte	eq
   a37a0:	4610      	moveq	r0, r2
   a37a2:	4619      	moveq	r1, r3
   a37a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a37a8:	d019      	beq.n	a37de <__aeabi_dmul+0x24a>
   a37aa:	ea94 0f0c 	teq	r4, ip
   a37ae:	d102      	bne.n	a37b6 <__aeabi_dmul+0x222>
   a37b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   a37b4:	d113      	bne.n	a37de <__aeabi_dmul+0x24a>
   a37b6:	ea95 0f0c 	teq	r5, ip
   a37ba:	d105      	bne.n	a37c8 <__aeabi_dmul+0x234>
   a37bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   a37c0:	bf1c      	itt	ne
   a37c2:	4610      	movne	r0, r2
   a37c4:	4619      	movne	r1, r3
   a37c6:	d10a      	bne.n	a37de <__aeabi_dmul+0x24a>
   a37c8:	ea81 0103 	eor.w	r1, r1, r3
   a37cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a37d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   a37d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   a37d8:	f04f 0000 	mov.w	r0, #0
   a37dc:	bd70      	pop	{r4, r5, r6, pc}
   a37de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   a37e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   a37e6:	bd70      	pop	{r4, r5, r6, pc}

000a37e8 <__aeabi_ddiv>:
   a37e8:	b570      	push	{r4, r5, r6, lr}
   a37ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a37ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   a37f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   a37f6:	bf1d      	ittte	ne
   a37f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   a37fc:	ea94 0f0c 	teqne	r4, ip
   a3800:	ea95 0f0c 	teqne	r5, ip
   a3804:	f000 f8a7 	bleq	a3956 <__aeabi_ddiv+0x16e>
   a3808:	eba4 0405 	sub.w	r4, r4, r5
   a380c:	ea81 0e03 	eor.w	lr, r1, r3
   a3810:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   a3814:	ea4f 3101 	mov.w	r1, r1, lsl #12
   a3818:	f000 8088 	beq.w	a392c <__aeabi_ddiv+0x144>
   a381c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   a3820:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   a3824:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   a3828:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   a382c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   a3830:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   a3834:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   a3838:	ea4f 2600 	mov.w	r6, r0, lsl #8
   a383c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   a3840:	429d      	cmp	r5, r3
   a3842:	bf08      	it	eq
   a3844:	4296      	cmpeq	r6, r2
   a3846:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   a384a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   a384e:	d202      	bcs.n	a3856 <__aeabi_ddiv+0x6e>
   a3850:	085b      	lsrs	r3, r3, #1
   a3852:	ea4f 0232 	mov.w	r2, r2, rrx
   a3856:	1ab6      	subs	r6, r6, r2
   a3858:	eb65 0503 	sbc.w	r5, r5, r3
   a385c:	085b      	lsrs	r3, r3, #1
   a385e:	ea4f 0232 	mov.w	r2, r2, rrx
   a3862:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   a3866:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   a386a:	ebb6 0e02 	subs.w	lr, r6, r2
   a386e:	eb75 0e03 	sbcs.w	lr, r5, r3
   a3872:	bf22      	ittt	cs
   a3874:	1ab6      	subcs	r6, r6, r2
   a3876:	4675      	movcs	r5, lr
   a3878:	ea40 000c 	orrcs.w	r0, r0, ip
   a387c:	085b      	lsrs	r3, r3, #1
   a387e:	ea4f 0232 	mov.w	r2, r2, rrx
   a3882:	ebb6 0e02 	subs.w	lr, r6, r2
   a3886:	eb75 0e03 	sbcs.w	lr, r5, r3
   a388a:	bf22      	ittt	cs
   a388c:	1ab6      	subcs	r6, r6, r2
   a388e:	4675      	movcs	r5, lr
   a3890:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   a3894:	085b      	lsrs	r3, r3, #1
   a3896:	ea4f 0232 	mov.w	r2, r2, rrx
   a389a:	ebb6 0e02 	subs.w	lr, r6, r2
   a389e:	eb75 0e03 	sbcs.w	lr, r5, r3
   a38a2:	bf22      	ittt	cs
   a38a4:	1ab6      	subcs	r6, r6, r2
   a38a6:	4675      	movcs	r5, lr
   a38a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   a38ac:	085b      	lsrs	r3, r3, #1
   a38ae:	ea4f 0232 	mov.w	r2, r2, rrx
   a38b2:	ebb6 0e02 	subs.w	lr, r6, r2
   a38b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   a38ba:	bf22      	ittt	cs
   a38bc:	1ab6      	subcs	r6, r6, r2
   a38be:	4675      	movcs	r5, lr
   a38c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   a38c4:	ea55 0e06 	orrs.w	lr, r5, r6
   a38c8:	d018      	beq.n	a38fc <__aeabi_ddiv+0x114>
   a38ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   a38ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   a38d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   a38d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   a38da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   a38de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   a38e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   a38e6:	d1c0      	bne.n	a386a <__aeabi_ddiv+0x82>
   a38e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a38ec:	d10b      	bne.n	a3906 <__aeabi_ddiv+0x11e>
   a38ee:	ea41 0100 	orr.w	r1, r1, r0
   a38f2:	f04f 0000 	mov.w	r0, #0
   a38f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   a38fa:	e7b6      	b.n	a386a <__aeabi_ddiv+0x82>
   a38fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a3900:	bf04      	itt	eq
   a3902:	4301      	orreq	r1, r0
   a3904:	2000      	moveq	r0, #0
   a3906:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   a390a:	bf88      	it	hi
   a390c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   a3910:	f63f aeaf 	bhi.w	a3672 <__aeabi_dmul+0xde>
   a3914:	ebb5 0c03 	subs.w	ip, r5, r3
   a3918:	bf04      	itt	eq
   a391a:	ebb6 0c02 	subseq.w	ip, r6, r2
   a391e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   a3922:	f150 0000 	adcs.w	r0, r0, #0
   a3926:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a392a:	bd70      	pop	{r4, r5, r6, pc}
   a392c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   a3930:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   a3934:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   a3938:	bfc2      	ittt	gt
   a393a:	ebd4 050c 	rsbsgt	r5, r4, ip
   a393e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   a3942:	bd70      	popgt	{r4, r5, r6, pc}
   a3944:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a3948:	f04f 0e00 	mov.w	lr, #0
   a394c:	3c01      	subs	r4, #1
   a394e:	e690      	b.n	a3672 <__aeabi_dmul+0xde>
   a3950:	ea45 0e06 	orr.w	lr, r5, r6
   a3954:	e68d      	b.n	a3672 <__aeabi_dmul+0xde>
   a3956:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   a395a:	ea94 0f0c 	teq	r4, ip
   a395e:	bf08      	it	eq
   a3960:	ea95 0f0c 	teqeq	r5, ip
   a3964:	f43f af3b 	beq.w	a37de <__aeabi_dmul+0x24a>
   a3968:	ea94 0f0c 	teq	r4, ip
   a396c:	d10a      	bne.n	a3984 <__aeabi_ddiv+0x19c>
   a396e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   a3972:	f47f af34 	bne.w	a37de <__aeabi_dmul+0x24a>
   a3976:	ea95 0f0c 	teq	r5, ip
   a397a:	f47f af25 	bne.w	a37c8 <__aeabi_dmul+0x234>
   a397e:	4610      	mov	r0, r2
   a3980:	4619      	mov	r1, r3
   a3982:	e72c      	b.n	a37de <__aeabi_dmul+0x24a>
   a3984:	ea95 0f0c 	teq	r5, ip
   a3988:	d106      	bne.n	a3998 <__aeabi_ddiv+0x1b0>
   a398a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   a398e:	f43f aefd 	beq.w	a378c <__aeabi_dmul+0x1f8>
   a3992:	4610      	mov	r0, r2
   a3994:	4619      	mov	r1, r3
   a3996:	e722      	b.n	a37de <__aeabi_dmul+0x24a>
   a3998:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a399c:	bf18      	it	ne
   a399e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a39a2:	f47f aec5 	bne.w	a3730 <__aeabi_dmul+0x19c>
   a39a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   a39aa:	f47f af0d 	bne.w	a37c8 <__aeabi_dmul+0x234>
   a39ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   a39b2:	f47f aeeb 	bne.w	a378c <__aeabi_dmul+0x1f8>
   a39b6:	e712      	b.n	a37de <__aeabi_dmul+0x24a>

000a39b8 <__gedf2>:
   a39b8:	f04f 3cff 	mov.w	ip, #4294967295
   a39bc:	e006      	b.n	a39cc <__cmpdf2+0x4>
   a39be:	bf00      	nop

000a39c0 <__ledf2>:
   a39c0:	f04f 0c01 	mov.w	ip, #1
   a39c4:	e002      	b.n	a39cc <__cmpdf2+0x4>
   a39c6:	bf00      	nop

000a39c8 <__cmpdf2>:
   a39c8:	f04f 0c01 	mov.w	ip, #1
   a39cc:	f84d cd04 	str.w	ip, [sp, #-4]!
   a39d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   a39d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a39d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   a39dc:	bf18      	it	ne
   a39de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   a39e2:	d01b      	beq.n	a3a1c <__cmpdf2+0x54>
   a39e4:	b001      	add	sp, #4
   a39e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   a39ea:	bf0c      	ite	eq
   a39ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   a39f0:	ea91 0f03 	teqne	r1, r3
   a39f4:	bf02      	ittt	eq
   a39f6:	ea90 0f02 	teqeq	r0, r2
   a39fa:	2000      	moveq	r0, #0
   a39fc:	4770      	bxeq	lr
   a39fe:	f110 0f00 	cmn.w	r0, #0
   a3a02:	ea91 0f03 	teq	r1, r3
   a3a06:	bf58      	it	pl
   a3a08:	4299      	cmppl	r1, r3
   a3a0a:	bf08      	it	eq
   a3a0c:	4290      	cmpeq	r0, r2
   a3a0e:	bf2c      	ite	cs
   a3a10:	17d8      	asrcs	r0, r3, #31
   a3a12:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   a3a16:	f040 0001 	orr.w	r0, r0, #1
   a3a1a:	4770      	bx	lr
   a3a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   a3a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a3a24:	d102      	bne.n	a3a2c <__cmpdf2+0x64>
   a3a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   a3a2a:	d107      	bne.n	a3a3c <__cmpdf2+0x74>
   a3a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   a3a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a3a34:	d1d6      	bne.n	a39e4 <__cmpdf2+0x1c>
   a3a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   a3a3a:	d0d3      	beq.n	a39e4 <__cmpdf2+0x1c>
   a3a3c:	f85d 0b04 	ldr.w	r0, [sp], #4
   a3a40:	4770      	bx	lr
   a3a42:	bf00      	nop

000a3a44 <__aeabi_cdrcmple>:
   a3a44:	4684      	mov	ip, r0
   a3a46:	4610      	mov	r0, r2
   a3a48:	4662      	mov	r2, ip
   a3a4a:	468c      	mov	ip, r1
   a3a4c:	4619      	mov	r1, r3
   a3a4e:	4663      	mov	r3, ip
   a3a50:	e000      	b.n	a3a54 <__aeabi_cdcmpeq>
   a3a52:	bf00      	nop

000a3a54 <__aeabi_cdcmpeq>:
   a3a54:	b501      	push	{r0, lr}
   a3a56:	f7ff ffb7 	bl	a39c8 <__cmpdf2>
   a3a5a:	2800      	cmp	r0, #0
   a3a5c:	bf48      	it	mi
   a3a5e:	f110 0f00 	cmnmi.w	r0, #0
   a3a62:	bd01      	pop	{r0, pc}

000a3a64 <__aeabi_dcmpeq>:
   a3a64:	f84d ed08 	str.w	lr, [sp, #-8]!
   a3a68:	f7ff fff4 	bl	a3a54 <__aeabi_cdcmpeq>
   a3a6c:	bf0c      	ite	eq
   a3a6e:	2001      	moveq	r0, #1
   a3a70:	2000      	movne	r0, #0
   a3a72:	f85d fb08 	ldr.w	pc, [sp], #8
   a3a76:	bf00      	nop

000a3a78 <__aeabi_dcmplt>:
   a3a78:	f84d ed08 	str.w	lr, [sp, #-8]!
   a3a7c:	f7ff ffea 	bl	a3a54 <__aeabi_cdcmpeq>
   a3a80:	bf34      	ite	cc
   a3a82:	2001      	movcc	r0, #1
   a3a84:	2000      	movcs	r0, #0
   a3a86:	f85d fb08 	ldr.w	pc, [sp], #8
   a3a8a:	bf00      	nop

000a3a8c <__aeabi_dcmple>:
   a3a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   a3a90:	f7ff ffe0 	bl	a3a54 <__aeabi_cdcmpeq>
   a3a94:	bf94      	ite	ls
   a3a96:	2001      	movls	r0, #1
   a3a98:	2000      	movhi	r0, #0
   a3a9a:	f85d fb08 	ldr.w	pc, [sp], #8
   a3a9e:	bf00      	nop

000a3aa0 <__aeabi_dcmpge>:
   a3aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
   a3aa4:	f7ff ffce 	bl	a3a44 <__aeabi_cdrcmple>
   a3aa8:	bf94      	ite	ls
   a3aaa:	2001      	movls	r0, #1
   a3aac:	2000      	movhi	r0, #0
   a3aae:	f85d fb08 	ldr.w	pc, [sp], #8
   a3ab2:	bf00      	nop

000a3ab4 <__aeabi_dcmpgt>:
   a3ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
   a3ab8:	f7ff ffc4 	bl	a3a44 <__aeabi_cdrcmple>
   a3abc:	bf34      	ite	cc
   a3abe:	2001      	movcc	r0, #1
   a3ac0:	2000      	movcs	r0, #0
   a3ac2:	f85d fb08 	ldr.w	pc, [sp], #8
   a3ac6:	bf00      	nop

000a3ac8 <__aeabi_d2iz>:
   a3ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   a3acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   a3ad0:	d215      	bcs.n	a3afe <__aeabi_d2iz+0x36>
   a3ad2:	d511      	bpl.n	a3af8 <__aeabi_d2iz+0x30>
   a3ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   a3ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   a3adc:	d912      	bls.n	a3b04 <__aeabi_d2iz+0x3c>
   a3ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a3ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a3ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   a3aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a3aee:	fa23 f002 	lsr.w	r0, r3, r2
   a3af2:	bf18      	it	ne
   a3af4:	4240      	negne	r0, r0
   a3af6:	4770      	bx	lr
   a3af8:	f04f 0000 	mov.w	r0, #0
   a3afc:	4770      	bx	lr
   a3afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   a3b02:	d105      	bne.n	a3b10 <__aeabi_d2iz+0x48>
   a3b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   a3b08:	bf08      	it	eq
   a3b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   a3b0e:	4770      	bx	lr
   a3b10:	f04f 0000 	mov.w	r0, #0
   a3b14:	4770      	bx	lr
   a3b16:	bf00      	nop

000a3b18 <__aeabi_d2uiz>:
   a3b18:	004a      	lsls	r2, r1, #1
   a3b1a:	d211      	bcs.n	a3b40 <__aeabi_d2uiz+0x28>
   a3b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   a3b20:	d211      	bcs.n	a3b46 <__aeabi_d2uiz+0x2e>
   a3b22:	d50d      	bpl.n	a3b40 <__aeabi_d2uiz+0x28>
   a3b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   a3b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   a3b2c:	d40e      	bmi.n	a3b4c <__aeabi_d2uiz+0x34>
   a3b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a3b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a3b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   a3b3a:	fa23 f002 	lsr.w	r0, r3, r2
   a3b3e:	4770      	bx	lr
   a3b40:	f04f 0000 	mov.w	r0, #0
   a3b44:	4770      	bx	lr
   a3b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   a3b4a:	d102      	bne.n	a3b52 <__aeabi_d2uiz+0x3a>
   a3b4c:	f04f 30ff 	mov.w	r0, #4294967295
   a3b50:	4770      	bx	lr
   a3b52:	f04f 0000 	mov.w	r0, #0
   a3b56:	4770      	bx	lr

000a3b58 <__aeabi_d2f>:
   a3b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
   a3b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   a3b60:	bf24      	itt	cs
   a3b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   a3b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   a3b6a:	d90d      	bls.n	a3b88 <__aeabi_d2f+0x30>
   a3b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a3b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   a3b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   a3b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   a3b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   a3b80:	bf08      	it	eq
   a3b82:	f020 0001 	biceq.w	r0, r0, #1
   a3b86:	4770      	bx	lr
   a3b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   a3b8c:	d121      	bne.n	a3bd2 <__aeabi_d2f+0x7a>
   a3b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   a3b92:	bfbc      	itt	lt
   a3b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   a3b98:	4770      	bxlt	lr
   a3b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a3b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   a3ba2:	f1c2 0218 	rsb	r2, r2, #24
   a3ba6:	f1c2 0c20 	rsb	ip, r2, #32
   a3baa:	fa10 f30c 	lsls.w	r3, r0, ip
   a3bae:	fa20 f002 	lsr.w	r0, r0, r2
   a3bb2:	bf18      	it	ne
   a3bb4:	f040 0001 	orrne.w	r0, r0, #1
   a3bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a3bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   a3bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
   a3bc4:	ea40 000c 	orr.w	r0, r0, ip
   a3bc8:	fa23 f302 	lsr.w	r3, r3, r2
   a3bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   a3bd0:	e7cc      	b.n	a3b6c <__aeabi_d2f+0x14>
   a3bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   a3bd6:	d107      	bne.n	a3be8 <__aeabi_d2f+0x90>
   a3bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   a3bdc:	bf1e      	ittt	ne
   a3bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   a3be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   a3be6:	4770      	bxne	lr
   a3be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   a3bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a3bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a3bf4:	4770      	bx	lr
   a3bf6:	bf00      	nop

000a3bf8 <__aeabi_frsub>:
   a3bf8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   a3bfc:	e002      	b.n	a3c04 <__addsf3>
   a3bfe:	bf00      	nop

000a3c00 <__aeabi_fsub>:
   a3c00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000a3c04 <__addsf3>:
   a3c04:	0042      	lsls	r2, r0, #1
   a3c06:	bf1f      	itttt	ne
   a3c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   a3c0c:	ea92 0f03 	teqne	r2, r3
   a3c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   a3c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a3c18:	d06a      	beq.n	a3cf0 <__addsf3+0xec>
   a3c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   a3c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   a3c22:	bfc1      	itttt	gt
   a3c24:	18d2      	addgt	r2, r2, r3
   a3c26:	4041      	eorgt	r1, r0
   a3c28:	4048      	eorgt	r0, r1
   a3c2a:	4041      	eorgt	r1, r0
   a3c2c:	bfb8      	it	lt
   a3c2e:	425b      	neglt	r3, r3
   a3c30:	2b19      	cmp	r3, #25
   a3c32:	bf88      	it	hi
   a3c34:	4770      	bxhi	lr
   a3c36:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   a3c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a3c3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   a3c42:	bf18      	it	ne
   a3c44:	4240      	negne	r0, r0
   a3c46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a3c4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   a3c4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   a3c52:	bf18      	it	ne
   a3c54:	4249      	negne	r1, r1
   a3c56:	ea92 0f03 	teq	r2, r3
   a3c5a:	d03f      	beq.n	a3cdc <__addsf3+0xd8>
   a3c5c:	f1a2 0201 	sub.w	r2, r2, #1
   a3c60:	fa41 fc03 	asr.w	ip, r1, r3
   a3c64:	eb10 000c 	adds.w	r0, r0, ip
   a3c68:	f1c3 0320 	rsb	r3, r3, #32
   a3c6c:	fa01 f103 	lsl.w	r1, r1, r3
   a3c70:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   a3c74:	d502      	bpl.n	a3c7c <__addsf3+0x78>
   a3c76:	4249      	negs	r1, r1
   a3c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   a3c7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   a3c80:	d313      	bcc.n	a3caa <__addsf3+0xa6>
   a3c82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   a3c86:	d306      	bcc.n	a3c96 <__addsf3+0x92>
   a3c88:	0840      	lsrs	r0, r0, #1
   a3c8a:	ea4f 0131 	mov.w	r1, r1, rrx
   a3c8e:	f102 0201 	add.w	r2, r2, #1
   a3c92:	2afe      	cmp	r2, #254	; 0xfe
   a3c94:	d251      	bcs.n	a3d3a <__addsf3+0x136>
   a3c96:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   a3c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a3c9e:	bf08      	it	eq
   a3ca0:	f020 0001 	biceq.w	r0, r0, #1
   a3ca4:	ea40 0003 	orr.w	r0, r0, r3
   a3ca8:	4770      	bx	lr
   a3caa:	0049      	lsls	r1, r1, #1
   a3cac:	eb40 0000 	adc.w	r0, r0, r0
   a3cb0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   a3cb4:	f1a2 0201 	sub.w	r2, r2, #1
   a3cb8:	d1ed      	bne.n	a3c96 <__addsf3+0x92>
   a3cba:	fab0 fc80 	clz	ip, r0
   a3cbe:	f1ac 0c08 	sub.w	ip, ip, #8
   a3cc2:	ebb2 020c 	subs.w	r2, r2, ip
   a3cc6:	fa00 f00c 	lsl.w	r0, r0, ip
   a3cca:	bfaa      	itet	ge
   a3ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   a3cd0:	4252      	neglt	r2, r2
   a3cd2:	4318      	orrge	r0, r3
   a3cd4:	bfbc      	itt	lt
   a3cd6:	40d0      	lsrlt	r0, r2
   a3cd8:	4318      	orrlt	r0, r3
   a3cda:	4770      	bx	lr
   a3cdc:	f092 0f00 	teq	r2, #0
   a3ce0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   a3ce4:	bf06      	itte	eq
   a3ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   a3cea:	3201      	addeq	r2, #1
   a3cec:	3b01      	subne	r3, #1
   a3cee:	e7b5      	b.n	a3c5c <__addsf3+0x58>
   a3cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   a3cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a3cf8:	bf18      	it	ne
   a3cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a3cfe:	d021      	beq.n	a3d44 <__addsf3+0x140>
   a3d00:	ea92 0f03 	teq	r2, r3
   a3d04:	d004      	beq.n	a3d10 <__addsf3+0x10c>
   a3d06:	f092 0f00 	teq	r2, #0
   a3d0a:	bf08      	it	eq
   a3d0c:	4608      	moveq	r0, r1
   a3d0e:	4770      	bx	lr
   a3d10:	ea90 0f01 	teq	r0, r1
   a3d14:	bf1c      	itt	ne
   a3d16:	2000      	movne	r0, #0
   a3d18:	4770      	bxne	lr
   a3d1a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   a3d1e:	d104      	bne.n	a3d2a <__addsf3+0x126>
   a3d20:	0040      	lsls	r0, r0, #1
   a3d22:	bf28      	it	cs
   a3d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   a3d28:	4770      	bx	lr
   a3d2a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   a3d2e:	bf3c      	itt	cc
   a3d30:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   a3d34:	4770      	bxcc	lr
   a3d36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   a3d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   a3d3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a3d42:	4770      	bx	lr
   a3d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
   a3d48:	bf16      	itet	ne
   a3d4a:	4608      	movne	r0, r1
   a3d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   a3d50:	4601      	movne	r1, r0
   a3d52:	0242      	lsls	r2, r0, #9
   a3d54:	bf06      	itte	eq
   a3d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   a3d5a:	ea90 0f01 	teqeq	r0, r1
   a3d5e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   a3d62:	4770      	bx	lr

000a3d64 <__aeabi_ui2f>:
   a3d64:	f04f 0300 	mov.w	r3, #0
   a3d68:	e004      	b.n	a3d74 <__aeabi_i2f+0x8>
   a3d6a:	bf00      	nop

000a3d6c <__aeabi_i2f>:
   a3d6c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   a3d70:	bf48      	it	mi
   a3d72:	4240      	negmi	r0, r0
   a3d74:	ea5f 0c00 	movs.w	ip, r0
   a3d78:	bf08      	it	eq
   a3d7a:	4770      	bxeq	lr
   a3d7c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   a3d80:	4601      	mov	r1, r0
   a3d82:	f04f 0000 	mov.w	r0, #0
   a3d86:	e01c      	b.n	a3dc2 <__aeabi_l2f+0x2a>

000a3d88 <__aeabi_ul2f>:
   a3d88:	ea50 0201 	orrs.w	r2, r0, r1
   a3d8c:	bf08      	it	eq
   a3d8e:	4770      	bxeq	lr
   a3d90:	f04f 0300 	mov.w	r3, #0
   a3d94:	e00a      	b.n	a3dac <__aeabi_l2f+0x14>
   a3d96:	bf00      	nop

000a3d98 <__aeabi_l2f>:
   a3d98:	ea50 0201 	orrs.w	r2, r0, r1
   a3d9c:	bf08      	it	eq
   a3d9e:	4770      	bxeq	lr
   a3da0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   a3da4:	d502      	bpl.n	a3dac <__aeabi_l2f+0x14>
   a3da6:	4240      	negs	r0, r0
   a3da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a3dac:	ea5f 0c01 	movs.w	ip, r1
   a3db0:	bf02      	ittt	eq
   a3db2:	4684      	moveq	ip, r0
   a3db4:	4601      	moveq	r1, r0
   a3db6:	2000      	moveq	r0, #0
   a3db8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   a3dbc:	bf08      	it	eq
   a3dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   a3dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   a3dc6:	fabc f28c 	clz	r2, ip
   a3dca:	3a08      	subs	r2, #8
   a3dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   a3dd0:	db10      	blt.n	a3df4 <__aeabi_l2f+0x5c>
   a3dd2:	fa01 fc02 	lsl.w	ip, r1, r2
   a3dd6:	4463      	add	r3, ip
   a3dd8:	fa00 fc02 	lsl.w	ip, r0, r2
   a3ddc:	f1c2 0220 	rsb	r2, r2, #32
   a3de0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   a3de4:	fa20 f202 	lsr.w	r2, r0, r2
   a3de8:	eb43 0002 	adc.w	r0, r3, r2
   a3dec:	bf08      	it	eq
   a3dee:	f020 0001 	biceq.w	r0, r0, #1
   a3df2:	4770      	bx	lr
   a3df4:	f102 0220 	add.w	r2, r2, #32
   a3df8:	fa01 fc02 	lsl.w	ip, r1, r2
   a3dfc:	f1c2 0220 	rsb	r2, r2, #32
   a3e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   a3e04:	fa21 f202 	lsr.w	r2, r1, r2
   a3e08:	eb43 0002 	adc.w	r0, r3, r2
   a3e0c:	bf08      	it	eq
   a3e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   a3e12:	4770      	bx	lr

000a3e14 <__aeabi_fmul>:
   a3e14:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a3e18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   a3e1c:	bf1e      	ittt	ne
   a3e1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   a3e22:	ea92 0f0c 	teqne	r2, ip
   a3e26:	ea93 0f0c 	teqne	r3, ip
   a3e2a:	d06f      	beq.n	a3f0c <__aeabi_fmul+0xf8>
   a3e2c:	441a      	add	r2, r3
   a3e2e:	ea80 0c01 	eor.w	ip, r0, r1
   a3e32:	0240      	lsls	r0, r0, #9
   a3e34:	bf18      	it	ne
   a3e36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   a3e3a:	d01e      	beq.n	a3e7a <__aeabi_fmul+0x66>
   a3e3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   a3e40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   a3e44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   a3e48:	fba0 3101 	umull	r3, r1, r0, r1
   a3e4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   a3e50:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   a3e54:	bf3e      	ittt	cc
   a3e56:	0049      	lslcc	r1, r1, #1
   a3e58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   a3e5c:	005b      	lslcc	r3, r3, #1
   a3e5e:	ea40 0001 	orr.w	r0, r0, r1
   a3e62:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   a3e66:	2afd      	cmp	r2, #253	; 0xfd
   a3e68:	d81d      	bhi.n	a3ea6 <__aeabi_fmul+0x92>
   a3e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   a3e6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a3e72:	bf08      	it	eq
   a3e74:	f020 0001 	biceq.w	r0, r0, #1
   a3e78:	4770      	bx	lr
   a3e7a:	f090 0f00 	teq	r0, #0
   a3e7e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   a3e82:	bf08      	it	eq
   a3e84:	0249      	lsleq	r1, r1, #9
   a3e86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   a3e8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   a3e8e:	3a7f      	subs	r2, #127	; 0x7f
   a3e90:	bfc2      	ittt	gt
   a3e92:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   a3e96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   a3e9a:	4770      	bxgt	lr
   a3e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a3ea0:	f04f 0300 	mov.w	r3, #0
   a3ea4:	3a01      	subs	r2, #1
   a3ea6:	dc5d      	bgt.n	a3f64 <__aeabi_fmul+0x150>
   a3ea8:	f112 0f19 	cmn.w	r2, #25
   a3eac:	bfdc      	itt	le
   a3eae:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   a3eb2:	4770      	bxle	lr
   a3eb4:	f1c2 0200 	rsb	r2, r2, #0
   a3eb8:	0041      	lsls	r1, r0, #1
   a3eba:	fa21 f102 	lsr.w	r1, r1, r2
   a3ebe:	f1c2 0220 	rsb	r2, r2, #32
   a3ec2:	fa00 fc02 	lsl.w	ip, r0, r2
   a3ec6:	ea5f 0031 	movs.w	r0, r1, rrx
   a3eca:	f140 0000 	adc.w	r0, r0, #0
   a3ece:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   a3ed2:	bf08      	it	eq
   a3ed4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   a3ed8:	4770      	bx	lr
   a3eda:	f092 0f00 	teq	r2, #0
   a3ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   a3ee2:	bf02      	ittt	eq
   a3ee4:	0040      	lsleq	r0, r0, #1
   a3ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   a3eea:	3a01      	subeq	r2, #1
   a3eec:	d0f9      	beq.n	a3ee2 <__aeabi_fmul+0xce>
   a3eee:	ea40 000c 	orr.w	r0, r0, ip
   a3ef2:	f093 0f00 	teq	r3, #0
   a3ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a3efa:	bf02      	ittt	eq
   a3efc:	0049      	lsleq	r1, r1, #1
   a3efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   a3f02:	3b01      	subeq	r3, #1
   a3f04:	d0f9      	beq.n	a3efa <__aeabi_fmul+0xe6>
   a3f06:	ea41 010c 	orr.w	r1, r1, ip
   a3f0a:	e78f      	b.n	a3e2c <__aeabi_fmul+0x18>
   a3f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   a3f10:	ea92 0f0c 	teq	r2, ip
   a3f14:	bf18      	it	ne
   a3f16:	ea93 0f0c 	teqne	r3, ip
   a3f1a:	d00a      	beq.n	a3f32 <__aeabi_fmul+0x11e>
   a3f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   a3f20:	bf18      	it	ne
   a3f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   a3f26:	d1d8      	bne.n	a3eda <__aeabi_fmul+0xc6>
   a3f28:	ea80 0001 	eor.w	r0, r0, r1
   a3f2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   a3f30:	4770      	bx	lr
   a3f32:	f090 0f00 	teq	r0, #0
   a3f36:	bf17      	itett	ne
   a3f38:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   a3f3c:	4608      	moveq	r0, r1
   a3f3e:	f091 0f00 	teqne	r1, #0
   a3f42:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   a3f46:	d014      	beq.n	a3f72 <__aeabi_fmul+0x15e>
   a3f48:	ea92 0f0c 	teq	r2, ip
   a3f4c:	d101      	bne.n	a3f52 <__aeabi_fmul+0x13e>
   a3f4e:	0242      	lsls	r2, r0, #9
   a3f50:	d10f      	bne.n	a3f72 <__aeabi_fmul+0x15e>
   a3f52:	ea93 0f0c 	teq	r3, ip
   a3f56:	d103      	bne.n	a3f60 <__aeabi_fmul+0x14c>
   a3f58:	024b      	lsls	r3, r1, #9
   a3f5a:	bf18      	it	ne
   a3f5c:	4608      	movne	r0, r1
   a3f5e:	d108      	bne.n	a3f72 <__aeabi_fmul+0x15e>
   a3f60:	ea80 0001 	eor.w	r0, r0, r1
   a3f64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   a3f68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a3f6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a3f70:	4770      	bx	lr
   a3f72:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a3f76:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   a3f7a:	4770      	bx	lr

000a3f7c <__aeabi_fdiv>:
   a3f7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a3f80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   a3f84:	bf1e      	ittt	ne
   a3f86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   a3f8a:	ea92 0f0c 	teqne	r2, ip
   a3f8e:	ea93 0f0c 	teqne	r3, ip
   a3f92:	d069      	beq.n	a4068 <__aeabi_fdiv+0xec>
   a3f94:	eba2 0203 	sub.w	r2, r2, r3
   a3f98:	ea80 0c01 	eor.w	ip, r0, r1
   a3f9c:	0249      	lsls	r1, r1, #9
   a3f9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
   a3fa2:	d037      	beq.n	a4014 <__aeabi_fdiv+0x98>
   a3fa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   a3fa8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   a3fac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   a3fb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   a3fb4:	428b      	cmp	r3, r1
   a3fb6:	bf38      	it	cc
   a3fb8:	005b      	lslcc	r3, r3, #1
   a3fba:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   a3fbe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   a3fc2:	428b      	cmp	r3, r1
   a3fc4:	bf24      	itt	cs
   a3fc6:	1a5b      	subcs	r3, r3, r1
   a3fc8:	ea40 000c 	orrcs.w	r0, r0, ip
   a3fcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   a3fd0:	bf24      	itt	cs
   a3fd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   a3fd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   a3fda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   a3fde:	bf24      	itt	cs
   a3fe0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   a3fe4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   a3fe8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   a3fec:	bf24      	itt	cs
   a3fee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   a3ff2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   a3ff6:	011b      	lsls	r3, r3, #4
   a3ff8:	bf18      	it	ne
   a3ffa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   a3ffe:	d1e0      	bne.n	a3fc2 <__aeabi_fdiv+0x46>
   a4000:	2afd      	cmp	r2, #253	; 0xfd
   a4002:	f63f af50 	bhi.w	a3ea6 <__aeabi_fmul+0x92>
   a4006:	428b      	cmp	r3, r1
   a4008:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a400c:	bf08      	it	eq
   a400e:	f020 0001 	biceq.w	r0, r0, #1
   a4012:	4770      	bx	lr
   a4014:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   a4018:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   a401c:	327f      	adds	r2, #127	; 0x7f
   a401e:	bfc2      	ittt	gt
   a4020:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   a4024:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   a4028:	4770      	bxgt	lr
   a402a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a402e:	f04f 0300 	mov.w	r3, #0
   a4032:	3a01      	subs	r2, #1
   a4034:	e737      	b.n	a3ea6 <__aeabi_fmul+0x92>
   a4036:	f092 0f00 	teq	r2, #0
   a403a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   a403e:	bf02      	ittt	eq
   a4040:	0040      	lsleq	r0, r0, #1
   a4042:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   a4046:	3a01      	subeq	r2, #1
   a4048:	d0f9      	beq.n	a403e <__aeabi_fdiv+0xc2>
   a404a:	ea40 000c 	orr.w	r0, r0, ip
   a404e:	f093 0f00 	teq	r3, #0
   a4052:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a4056:	bf02      	ittt	eq
   a4058:	0049      	lsleq	r1, r1, #1
   a405a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   a405e:	3b01      	subeq	r3, #1
   a4060:	d0f9      	beq.n	a4056 <__aeabi_fdiv+0xda>
   a4062:	ea41 010c 	orr.w	r1, r1, ip
   a4066:	e795      	b.n	a3f94 <__aeabi_fdiv+0x18>
   a4068:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   a406c:	ea92 0f0c 	teq	r2, ip
   a4070:	d108      	bne.n	a4084 <__aeabi_fdiv+0x108>
   a4072:	0242      	lsls	r2, r0, #9
   a4074:	f47f af7d 	bne.w	a3f72 <__aeabi_fmul+0x15e>
   a4078:	ea93 0f0c 	teq	r3, ip
   a407c:	f47f af70 	bne.w	a3f60 <__aeabi_fmul+0x14c>
   a4080:	4608      	mov	r0, r1
   a4082:	e776      	b.n	a3f72 <__aeabi_fmul+0x15e>
   a4084:	ea93 0f0c 	teq	r3, ip
   a4088:	d104      	bne.n	a4094 <__aeabi_fdiv+0x118>
   a408a:	024b      	lsls	r3, r1, #9
   a408c:	f43f af4c 	beq.w	a3f28 <__aeabi_fmul+0x114>
   a4090:	4608      	mov	r0, r1
   a4092:	e76e      	b.n	a3f72 <__aeabi_fmul+0x15e>
   a4094:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   a4098:	bf18      	it	ne
   a409a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   a409e:	d1ca      	bne.n	a4036 <__aeabi_fdiv+0xba>
   a40a0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   a40a4:	f47f af5c 	bne.w	a3f60 <__aeabi_fmul+0x14c>
   a40a8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   a40ac:	f47f af3c 	bne.w	a3f28 <__aeabi_fmul+0x114>
   a40b0:	e75f      	b.n	a3f72 <__aeabi_fmul+0x15e>
   a40b2:	bf00      	nop

000a40b4 <__gesf2>:
   a40b4:	f04f 3cff 	mov.w	ip, #4294967295
   a40b8:	e006      	b.n	a40c8 <__cmpsf2+0x4>
   a40ba:	bf00      	nop

000a40bc <__lesf2>:
   a40bc:	f04f 0c01 	mov.w	ip, #1
   a40c0:	e002      	b.n	a40c8 <__cmpsf2+0x4>
   a40c2:	bf00      	nop

000a40c4 <__cmpsf2>:
   a40c4:	f04f 0c01 	mov.w	ip, #1
   a40c8:	f84d cd04 	str.w	ip, [sp, #-4]!
   a40cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
   a40d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   a40d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a40d8:	bf18      	it	ne
   a40da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a40de:	d011      	beq.n	a4104 <__cmpsf2+0x40>
   a40e0:	b001      	add	sp, #4
   a40e2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   a40e6:	bf18      	it	ne
   a40e8:	ea90 0f01 	teqne	r0, r1
   a40ec:	bf58      	it	pl
   a40ee:	ebb2 0003 	subspl.w	r0, r2, r3
   a40f2:	bf88      	it	hi
   a40f4:	17c8      	asrhi	r0, r1, #31
   a40f6:	bf38      	it	cc
   a40f8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   a40fc:	bf18      	it	ne
   a40fe:	f040 0001 	orrne.w	r0, r0, #1
   a4102:	4770      	bx	lr
   a4104:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a4108:	d102      	bne.n	a4110 <__cmpsf2+0x4c>
   a410a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   a410e:	d105      	bne.n	a411c <__cmpsf2+0x58>
   a4110:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   a4114:	d1e4      	bne.n	a40e0 <__cmpsf2+0x1c>
   a4116:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   a411a:	d0e1      	beq.n	a40e0 <__cmpsf2+0x1c>
   a411c:	f85d 0b04 	ldr.w	r0, [sp], #4
   a4120:	4770      	bx	lr
   a4122:	bf00      	nop

000a4124 <__aeabi_cfrcmple>:
   a4124:	4684      	mov	ip, r0
   a4126:	4608      	mov	r0, r1
   a4128:	4661      	mov	r1, ip
   a412a:	e7ff      	b.n	a412c <__aeabi_cfcmpeq>

000a412c <__aeabi_cfcmpeq>:
   a412c:	b50f      	push	{r0, r1, r2, r3, lr}
   a412e:	f7ff ffc9 	bl	a40c4 <__cmpsf2>
   a4132:	2800      	cmp	r0, #0
   a4134:	bf48      	it	mi
   a4136:	f110 0f00 	cmnmi.w	r0, #0
   a413a:	bd0f      	pop	{r0, r1, r2, r3, pc}

000a413c <__aeabi_fcmpeq>:
   a413c:	f84d ed08 	str.w	lr, [sp, #-8]!
   a4140:	f7ff fff4 	bl	a412c <__aeabi_cfcmpeq>
   a4144:	bf0c      	ite	eq
   a4146:	2001      	moveq	r0, #1
   a4148:	2000      	movne	r0, #0
   a414a:	f85d fb08 	ldr.w	pc, [sp], #8
   a414e:	bf00      	nop

000a4150 <__aeabi_fcmplt>:
   a4150:	f84d ed08 	str.w	lr, [sp, #-8]!
   a4154:	f7ff ffea 	bl	a412c <__aeabi_cfcmpeq>
   a4158:	bf34      	ite	cc
   a415a:	2001      	movcc	r0, #1
   a415c:	2000      	movcs	r0, #0
   a415e:	f85d fb08 	ldr.w	pc, [sp], #8
   a4162:	bf00      	nop

000a4164 <__aeabi_fcmple>:
   a4164:	f84d ed08 	str.w	lr, [sp, #-8]!
   a4168:	f7ff ffe0 	bl	a412c <__aeabi_cfcmpeq>
   a416c:	bf94      	ite	ls
   a416e:	2001      	movls	r0, #1
   a4170:	2000      	movhi	r0, #0
   a4172:	f85d fb08 	ldr.w	pc, [sp], #8
   a4176:	bf00      	nop

000a4178 <__aeabi_fcmpge>:
   a4178:	f84d ed08 	str.w	lr, [sp, #-8]!
   a417c:	f7ff ffd2 	bl	a4124 <__aeabi_cfrcmple>
   a4180:	bf94      	ite	ls
   a4182:	2001      	movls	r0, #1
   a4184:	2000      	movhi	r0, #0
   a4186:	f85d fb08 	ldr.w	pc, [sp], #8
   a418a:	bf00      	nop

000a418c <__aeabi_fcmpgt>:
   a418c:	f84d ed08 	str.w	lr, [sp, #-8]!
   a4190:	f7ff ffc8 	bl	a4124 <__aeabi_cfrcmple>
   a4194:	bf34      	ite	cc
   a4196:	2001      	movcc	r0, #1
   a4198:	2000      	movcs	r0, #0
   a419a:	f85d fb08 	ldr.w	pc, [sp], #8
   a419e:	bf00      	nop

000a41a0 <__aeabi_f2iz>:
   a41a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
   a41a4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   a41a8:	d30f      	bcc.n	a41ca <__aeabi_f2iz+0x2a>
   a41aa:	f04f 039e 	mov.w	r3, #158	; 0x9e
   a41ae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   a41b2:	d90d      	bls.n	a41d0 <__aeabi_f2iz+0x30>
   a41b4:	ea4f 2300 	mov.w	r3, r0, lsl #8
   a41b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a41bc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   a41c0:	fa23 f002 	lsr.w	r0, r3, r2
   a41c4:	bf18      	it	ne
   a41c6:	4240      	negne	r0, r0
   a41c8:	4770      	bx	lr
   a41ca:	f04f 0000 	mov.w	r0, #0
   a41ce:	4770      	bx	lr
   a41d0:	f112 0f61 	cmn.w	r2, #97	; 0x61
   a41d4:	d101      	bne.n	a41da <__aeabi_f2iz+0x3a>
   a41d6:	0242      	lsls	r2, r0, #9
   a41d8:	d105      	bne.n	a41e6 <__aeabi_f2iz+0x46>
   a41da:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   a41de:	bf08      	it	eq
   a41e0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   a41e4:	4770      	bx	lr
   a41e6:	f04f 0000 	mov.w	r0, #0
   a41ea:	4770      	bx	lr

000a41ec <__aeabi_f2uiz>:
   a41ec:	0042      	lsls	r2, r0, #1
   a41ee:	d20e      	bcs.n	a420e <__aeabi_f2uiz+0x22>
   a41f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   a41f4:	d30b      	bcc.n	a420e <__aeabi_f2uiz+0x22>
   a41f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
   a41fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   a41fe:	d409      	bmi.n	a4214 <__aeabi_f2uiz+0x28>
   a4200:	ea4f 2300 	mov.w	r3, r0, lsl #8
   a4204:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a4208:	fa23 f002 	lsr.w	r0, r3, r2
   a420c:	4770      	bx	lr
   a420e:	f04f 0000 	mov.w	r0, #0
   a4212:	4770      	bx	lr
   a4214:	f112 0f61 	cmn.w	r2, #97	; 0x61
   a4218:	d101      	bne.n	a421e <__aeabi_f2uiz+0x32>
   a421a:	0242      	lsls	r2, r0, #9
   a421c:	d102      	bne.n	a4224 <__aeabi_f2uiz+0x38>
   a421e:	f04f 30ff 	mov.w	r0, #4294967295
   a4222:	4770      	bx	lr
   a4224:	f04f 0000 	mov.w	r0, #0
   a4228:	4770      	bx	lr
   a422a:	bf00      	nop

000a422c <__libc_init_array>:
   a422c:	b570      	push	{r4, r5, r6, lr}
   a422e:	4e0f      	ldr	r6, [pc, #60]	; (a426c <__libc_init_array+0x40>)
   a4230:	4d0f      	ldr	r5, [pc, #60]	; (a4270 <__libc_init_array+0x44>)
   a4232:	1b76      	subs	r6, r6, r5
   a4234:	10b6      	asrs	r6, r6, #2
   a4236:	bf18      	it	ne
   a4238:	2400      	movne	r4, #0
   a423a:	d005      	beq.n	a4248 <__libc_init_array+0x1c>
   a423c:	3401      	adds	r4, #1
   a423e:	f855 3b04 	ldr.w	r3, [r5], #4
   a4242:	4798      	blx	r3
   a4244:	42a6      	cmp	r6, r4
   a4246:	d1f9      	bne.n	a423c <__libc_init_array+0x10>
   a4248:	4e0a      	ldr	r6, [pc, #40]	; (a4274 <__libc_init_array+0x48>)
   a424a:	4d0b      	ldr	r5, [pc, #44]	; (a4278 <__libc_init_array+0x4c>)
   a424c:	f002 f878 	bl	a6340 <_init>
   a4250:	1b76      	subs	r6, r6, r5
   a4252:	10b6      	asrs	r6, r6, #2
   a4254:	bf18      	it	ne
   a4256:	2400      	movne	r4, #0
   a4258:	d006      	beq.n	a4268 <__libc_init_array+0x3c>
   a425a:	3401      	adds	r4, #1
   a425c:	f855 3b04 	ldr.w	r3, [r5], #4
   a4260:	4798      	blx	r3
   a4262:	42a6      	cmp	r6, r4
   a4264:	d1f9      	bne.n	a425a <__libc_init_array+0x2e>
   a4266:	bd70      	pop	{r4, r5, r6, pc}
   a4268:	bd70      	pop	{r4, r5, r6, pc}
   a426a:	bf00      	nop
   a426c:	000a634c 	.word	0x000a634c
   a4270:	000a634c 	.word	0x000a634c
   a4274:	000a6354 	.word	0x000a6354
   a4278:	000a634c 	.word	0x000a634c

000a427c <memcpy>:
   a427c:	4684      	mov	ip, r0
   a427e:	ea41 0300 	orr.w	r3, r1, r0
   a4282:	f013 0303 	ands.w	r3, r3, #3
   a4286:	d149      	bne.n	a431c <memcpy+0xa0>
   a4288:	3a40      	subs	r2, #64	; 0x40
   a428a:	d323      	bcc.n	a42d4 <memcpy+0x58>
   a428c:	680b      	ldr	r3, [r1, #0]
   a428e:	6003      	str	r3, [r0, #0]
   a4290:	684b      	ldr	r3, [r1, #4]
   a4292:	6043      	str	r3, [r0, #4]
   a4294:	688b      	ldr	r3, [r1, #8]
   a4296:	6083      	str	r3, [r0, #8]
   a4298:	68cb      	ldr	r3, [r1, #12]
   a429a:	60c3      	str	r3, [r0, #12]
   a429c:	690b      	ldr	r3, [r1, #16]
   a429e:	6103      	str	r3, [r0, #16]
   a42a0:	694b      	ldr	r3, [r1, #20]
   a42a2:	6143      	str	r3, [r0, #20]
   a42a4:	698b      	ldr	r3, [r1, #24]
   a42a6:	6183      	str	r3, [r0, #24]
   a42a8:	69cb      	ldr	r3, [r1, #28]
   a42aa:	61c3      	str	r3, [r0, #28]
   a42ac:	6a0b      	ldr	r3, [r1, #32]
   a42ae:	6203      	str	r3, [r0, #32]
   a42b0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   a42b2:	6243      	str	r3, [r0, #36]	; 0x24
   a42b4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   a42b6:	6283      	str	r3, [r0, #40]	; 0x28
   a42b8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   a42ba:	62c3      	str	r3, [r0, #44]	; 0x2c
   a42bc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   a42be:	6303      	str	r3, [r0, #48]	; 0x30
   a42c0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   a42c2:	6343      	str	r3, [r0, #52]	; 0x34
   a42c4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   a42c6:	6383      	str	r3, [r0, #56]	; 0x38
   a42c8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   a42ca:	63c3      	str	r3, [r0, #60]	; 0x3c
   a42cc:	3040      	adds	r0, #64	; 0x40
   a42ce:	3140      	adds	r1, #64	; 0x40
   a42d0:	3a40      	subs	r2, #64	; 0x40
   a42d2:	d2db      	bcs.n	a428c <memcpy+0x10>
   a42d4:	3230      	adds	r2, #48	; 0x30
   a42d6:	d30b      	bcc.n	a42f0 <memcpy+0x74>
   a42d8:	680b      	ldr	r3, [r1, #0]
   a42da:	6003      	str	r3, [r0, #0]
   a42dc:	684b      	ldr	r3, [r1, #4]
   a42de:	6043      	str	r3, [r0, #4]
   a42e0:	688b      	ldr	r3, [r1, #8]
   a42e2:	6083      	str	r3, [r0, #8]
   a42e4:	68cb      	ldr	r3, [r1, #12]
   a42e6:	60c3      	str	r3, [r0, #12]
   a42e8:	3010      	adds	r0, #16
   a42ea:	3110      	adds	r1, #16
   a42ec:	3a10      	subs	r2, #16
   a42ee:	d2f3      	bcs.n	a42d8 <memcpy+0x5c>
   a42f0:	320c      	adds	r2, #12
   a42f2:	d305      	bcc.n	a4300 <memcpy+0x84>
   a42f4:	f851 3b04 	ldr.w	r3, [r1], #4
   a42f8:	f840 3b04 	str.w	r3, [r0], #4
   a42fc:	3a04      	subs	r2, #4
   a42fe:	d2f9      	bcs.n	a42f4 <memcpy+0x78>
   a4300:	3204      	adds	r2, #4
   a4302:	d008      	beq.n	a4316 <memcpy+0x9a>
   a4304:	07d2      	lsls	r2, r2, #31
   a4306:	bf1c      	itt	ne
   a4308:	f811 3b01 	ldrbne.w	r3, [r1], #1
   a430c:	f800 3b01 	strbne.w	r3, [r0], #1
   a4310:	d301      	bcc.n	a4316 <memcpy+0x9a>
   a4312:	880b      	ldrh	r3, [r1, #0]
   a4314:	8003      	strh	r3, [r0, #0]
   a4316:	4660      	mov	r0, ip
   a4318:	4770      	bx	lr
   a431a:	bf00      	nop
   a431c:	2a08      	cmp	r2, #8
   a431e:	d313      	bcc.n	a4348 <memcpy+0xcc>
   a4320:	078b      	lsls	r3, r1, #30
   a4322:	d0b1      	beq.n	a4288 <memcpy+0xc>
   a4324:	f010 0303 	ands.w	r3, r0, #3
   a4328:	d0ae      	beq.n	a4288 <memcpy+0xc>
   a432a:	f1c3 0304 	rsb	r3, r3, #4
   a432e:	1ad2      	subs	r2, r2, r3
   a4330:	07db      	lsls	r3, r3, #31
   a4332:	bf1c      	itt	ne
   a4334:	f811 3b01 	ldrbne.w	r3, [r1], #1
   a4338:	f800 3b01 	strbne.w	r3, [r0], #1
   a433c:	d3a4      	bcc.n	a4288 <memcpy+0xc>
   a433e:	f831 3b02 	ldrh.w	r3, [r1], #2
   a4342:	f820 3b02 	strh.w	r3, [r0], #2
   a4346:	e79f      	b.n	a4288 <memcpy+0xc>
   a4348:	3a04      	subs	r2, #4
   a434a:	d3d9      	bcc.n	a4300 <memcpy+0x84>
   a434c:	3a01      	subs	r2, #1
   a434e:	f811 3b01 	ldrb.w	r3, [r1], #1
   a4352:	f800 3b01 	strb.w	r3, [r0], #1
   a4356:	d2f9      	bcs.n	a434c <memcpy+0xd0>
   a4358:	780b      	ldrb	r3, [r1, #0]
   a435a:	7003      	strb	r3, [r0, #0]
   a435c:	784b      	ldrb	r3, [r1, #1]
   a435e:	7043      	strb	r3, [r0, #1]
   a4360:	788b      	ldrb	r3, [r1, #2]
   a4362:	7083      	strb	r3, [r0, #2]
   a4364:	4660      	mov	r0, ip
   a4366:	4770      	bx	lr

000a4368 <memset>:
   a4368:	b470      	push	{r4, r5, r6}
   a436a:	0784      	lsls	r4, r0, #30
   a436c:	d046      	beq.n	a43fc <memset+0x94>
   a436e:	1e54      	subs	r4, r2, #1
   a4370:	2a00      	cmp	r2, #0
   a4372:	d041      	beq.n	a43f8 <memset+0x90>
   a4374:	b2cd      	uxtb	r5, r1
   a4376:	4603      	mov	r3, r0
   a4378:	e002      	b.n	a4380 <memset+0x18>
   a437a:	1e62      	subs	r2, r4, #1
   a437c:	b3e4      	cbz	r4, a43f8 <memset+0x90>
   a437e:	4614      	mov	r4, r2
   a4380:	f803 5b01 	strb.w	r5, [r3], #1
   a4384:	079a      	lsls	r2, r3, #30
   a4386:	d1f8      	bne.n	a437a <memset+0x12>
   a4388:	2c03      	cmp	r4, #3
   a438a:	d92e      	bls.n	a43ea <memset+0x82>
   a438c:	b2cd      	uxtb	r5, r1
   a438e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   a4392:	2c0f      	cmp	r4, #15
   a4394:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   a4398:	d919      	bls.n	a43ce <memset+0x66>
   a439a:	4626      	mov	r6, r4
   a439c:	f103 0210 	add.w	r2, r3, #16
   a43a0:	3e10      	subs	r6, #16
   a43a2:	2e0f      	cmp	r6, #15
   a43a4:	f842 5c10 	str.w	r5, [r2, #-16]
   a43a8:	f842 5c0c 	str.w	r5, [r2, #-12]
   a43ac:	f842 5c08 	str.w	r5, [r2, #-8]
   a43b0:	f842 5c04 	str.w	r5, [r2, #-4]
   a43b4:	f102 0210 	add.w	r2, r2, #16
   a43b8:	d8f2      	bhi.n	a43a0 <memset+0x38>
   a43ba:	f1a4 0210 	sub.w	r2, r4, #16
   a43be:	f022 020f 	bic.w	r2, r2, #15
   a43c2:	f004 040f 	and.w	r4, r4, #15
   a43c6:	3210      	adds	r2, #16
   a43c8:	2c03      	cmp	r4, #3
   a43ca:	4413      	add	r3, r2
   a43cc:	d90d      	bls.n	a43ea <memset+0x82>
   a43ce:	461e      	mov	r6, r3
   a43d0:	4622      	mov	r2, r4
   a43d2:	3a04      	subs	r2, #4
   a43d4:	2a03      	cmp	r2, #3
   a43d6:	f846 5b04 	str.w	r5, [r6], #4
   a43da:	d8fa      	bhi.n	a43d2 <memset+0x6a>
   a43dc:	1f22      	subs	r2, r4, #4
   a43de:	f022 0203 	bic.w	r2, r2, #3
   a43e2:	3204      	adds	r2, #4
   a43e4:	4413      	add	r3, r2
   a43e6:	f004 0403 	and.w	r4, r4, #3
   a43ea:	b12c      	cbz	r4, a43f8 <memset+0x90>
   a43ec:	b2c9      	uxtb	r1, r1
   a43ee:	441c      	add	r4, r3
   a43f0:	f803 1b01 	strb.w	r1, [r3], #1
   a43f4:	42a3      	cmp	r3, r4
   a43f6:	d1fb      	bne.n	a43f0 <memset+0x88>
   a43f8:	bc70      	pop	{r4, r5, r6}
   a43fa:	4770      	bx	lr
   a43fc:	4614      	mov	r4, r2
   a43fe:	4603      	mov	r3, r0
   a4400:	e7c2      	b.n	a4388 <memset+0x20>
   a4402:	bf00      	nop

000a4404 <_puts_r>:
   a4404:	b5f0      	push	{r4, r5, r6, r7, lr}
   a4406:	4605      	mov	r5, r0
   a4408:	b089      	sub	sp, #36	; 0x24
   a440a:	4608      	mov	r0, r1
   a440c:	460c      	mov	r4, r1
   a440e:	f000 f8e5 	bl	a45dc <strlen>
   a4412:	1c43      	adds	r3, r0, #1
   a4414:	4f14      	ldr	r7, [pc, #80]	; (a4468 <_puts_r+0x64>)
   a4416:	9303      	str	r3, [sp, #12]
   a4418:	6bab      	ldr	r3, [r5, #56]	; 0x38
   a441a:	2601      	movs	r6, #1
   a441c:	a904      	add	r1, sp, #16
   a441e:	2202      	movs	r2, #2
   a4420:	9404      	str	r4, [sp, #16]
   a4422:	9005      	str	r0, [sp, #20]
   a4424:	68ac      	ldr	r4, [r5, #8]
   a4426:	9706      	str	r7, [sp, #24]
   a4428:	9607      	str	r6, [sp, #28]
   a442a:	9101      	str	r1, [sp, #4]
   a442c:	9202      	str	r2, [sp, #8]
   a442e:	b1b3      	cbz	r3, a445e <_puts_r+0x5a>
   a4430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a4434:	049a      	lsls	r2, r3, #18
   a4436:	d406      	bmi.n	a4446 <_puts_r+0x42>
   a4438:	6e62      	ldr	r2, [r4, #100]	; 0x64
   a443a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   a443e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   a4442:	81a3      	strh	r3, [r4, #12]
   a4444:	6662      	str	r2, [r4, #100]	; 0x64
   a4446:	4621      	mov	r1, r4
   a4448:	4628      	mov	r0, r5
   a444a:	aa01      	add	r2, sp, #4
   a444c:	f000 fbf4 	bl	a4c38 <__sfvwrite_r>
   a4450:	2800      	cmp	r0, #0
   a4452:	bf14      	ite	ne
   a4454:	f04f 30ff 	movne.w	r0, #4294967295
   a4458:	200a      	moveq	r0, #10
   a445a:	b009      	add	sp, #36	; 0x24
   a445c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a445e:	4628      	mov	r0, r5
   a4460:	f000 fa96 	bl	a4990 <__sinit>
   a4464:	e7e4      	b.n	a4430 <_puts_r+0x2c>
   a4466:	bf00      	nop
   a4468:	000a633c 	.word	0x000a633c

000a446c <puts>:
   a446c:	4b02      	ldr	r3, [pc, #8]	; (a4478 <puts+0xc>)
   a446e:	4601      	mov	r1, r0
   a4470:	6818      	ldr	r0, [r3, #0]
   a4472:	f7ff bfc7 	b.w	a4404 <_puts_r>
   a4476:	bf00      	nop
   a4478:	200710c8 	.word	0x200710c8

000a447c <setbuf>:
   a447c:	2900      	cmp	r1, #0
   a447e:	bf0c      	ite	eq
   a4480:	2202      	moveq	r2, #2
   a4482:	2200      	movne	r2, #0
   a4484:	f44f 6380 	mov.w	r3, #1024	; 0x400
   a4488:	f000 b800 	b.w	a448c <setvbuf>

000a448c <setvbuf>:
   a448c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   a4490:	4d51      	ldr	r5, [pc, #324]	; (a45d8 <setvbuf+0x14c>)
   a4492:	b083      	sub	sp, #12
   a4494:	682d      	ldr	r5, [r5, #0]
   a4496:	4604      	mov	r4, r0
   a4498:	460f      	mov	r7, r1
   a449a:	4690      	mov	r8, r2
   a449c:	461e      	mov	r6, r3
   a449e:	b115      	cbz	r5, a44a6 <setvbuf+0x1a>
   a44a0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   a44a2:	2b00      	cmp	r3, #0
   a44a4:	d079      	beq.n	a459a <setvbuf+0x10e>
   a44a6:	f1b8 0f02 	cmp.w	r8, #2
   a44aa:	d004      	beq.n	a44b6 <setvbuf+0x2a>
   a44ac:	f1b8 0f01 	cmp.w	r8, #1
   a44b0:	d87f      	bhi.n	a45b2 <setvbuf+0x126>
   a44b2:	2e00      	cmp	r6, #0
   a44b4:	db7d      	blt.n	a45b2 <setvbuf+0x126>
   a44b6:	4621      	mov	r1, r4
   a44b8:	4628      	mov	r0, r5
   a44ba:	f000 f9d5 	bl	a4868 <_fflush_r>
   a44be:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a44c0:	b141      	cbz	r1, a44d4 <setvbuf+0x48>
   a44c2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a44c6:	4299      	cmp	r1, r3
   a44c8:	d002      	beq.n	a44d0 <setvbuf+0x44>
   a44ca:	4628      	mov	r0, r5
   a44cc:	f000 facc 	bl	a4a68 <_free_r>
   a44d0:	2300      	movs	r3, #0
   a44d2:	6323      	str	r3, [r4, #48]	; 0x30
   a44d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a44d8:	2200      	movs	r2, #0
   a44da:	61a2      	str	r2, [r4, #24]
   a44dc:	6062      	str	r2, [r4, #4]
   a44de:	061a      	lsls	r2, r3, #24
   a44e0:	d454      	bmi.n	a458c <setvbuf+0x100>
   a44e2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   a44e6:	f023 0303 	bic.w	r3, r3, #3
   a44ea:	f1b8 0f02 	cmp.w	r8, #2
   a44ee:	81a3      	strh	r3, [r4, #12]
   a44f0:	d039      	beq.n	a4566 <setvbuf+0xda>
   a44f2:	ab01      	add	r3, sp, #4
   a44f4:	466a      	mov	r2, sp
   a44f6:	4621      	mov	r1, r4
   a44f8:	4628      	mov	r0, r5
   a44fa:	f000 fd49 	bl	a4f90 <__swhatbuf_r>
   a44fe:	89a3      	ldrh	r3, [r4, #12]
   a4500:	4318      	orrs	r0, r3
   a4502:	81a0      	strh	r0, [r4, #12]
   a4504:	b326      	cbz	r6, a4550 <setvbuf+0xc4>
   a4506:	b327      	cbz	r7, a4552 <setvbuf+0xc6>
   a4508:	6bab      	ldr	r3, [r5, #56]	; 0x38
   a450a:	2b00      	cmp	r3, #0
   a450c:	d04d      	beq.n	a45aa <setvbuf+0x11e>
   a450e:	9b00      	ldr	r3, [sp, #0]
   a4510:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   a4514:	429e      	cmp	r6, r3
   a4516:	bf1c      	itt	ne
   a4518:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   a451c:	81a0      	strhne	r0, [r4, #12]
   a451e:	f1b8 0f01 	cmp.w	r8, #1
   a4522:	bf08      	it	eq
   a4524:	f040 0001 	orreq.w	r0, r0, #1
   a4528:	b283      	uxth	r3, r0
   a452a:	bf08      	it	eq
   a452c:	81a0      	strheq	r0, [r4, #12]
   a452e:	f003 0008 	and.w	r0, r3, #8
   a4532:	b280      	uxth	r0, r0
   a4534:	6027      	str	r7, [r4, #0]
   a4536:	6127      	str	r7, [r4, #16]
   a4538:	6166      	str	r6, [r4, #20]
   a453a:	b318      	cbz	r0, a4584 <setvbuf+0xf8>
   a453c:	f013 0001 	ands.w	r0, r3, #1
   a4540:	d02f      	beq.n	a45a2 <setvbuf+0x116>
   a4542:	2000      	movs	r0, #0
   a4544:	4276      	negs	r6, r6
   a4546:	61a6      	str	r6, [r4, #24]
   a4548:	60a0      	str	r0, [r4, #8]
   a454a:	b003      	add	sp, #12
   a454c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a4550:	9e00      	ldr	r6, [sp, #0]
   a4552:	4630      	mov	r0, r6
   a4554:	f000 fd90 	bl	a5078 <malloc>
   a4558:	4607      	mov	r7, r0
   a455a:	b368      	cbz	r0, a45b8 <setvbuf+0x12c>
   a455c:	89a3      	ldrh	r3, [r4, #12]
   a455e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a4562:	81a3      	strh	r3, [r4, #12]
   a4564:	e7d0      	b.n	a4508 <setvbuf+0x7c>
   a4566:	2000      	movs	r0, #0
   a4568:	f104 0243 	add.w	r2, r4, #67	; 0x43
   a456c:	f043 0302 	orr.w	r3, r3, #2
   a4570:	2500      	movs	r5, #0
   a4572:	2101      	movs	r1, #1
   a4574:	81a3      	strh	r3, [r4, #12]
   a4576:	60a5      	str	r5, [r4, #8]
   a4578:	6022      	str	r2, [r4, #0]
   a457a:	6122      	str	r2, [r4, #16]
   a457c:	6161      	str	r1, [r4, #20]
   a457e:	b003      	add	sp, #12
   a4580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a4584:	60a0      	str	r0, [r4, #8]
   a4586:	b003      	add	sp, #12
   a4588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a458c:	6921      	ldr	r1, [r4, #16]
   a458e:	4628      	mov	r0, r5
   a4590:	f000 fa6a 	bl	a4a68 <_free_r>
   a4594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a4598:	e7a3      	b.n	a44e2 <setvbuf+0x56>
   a459a:	4628      	mov	r0, r5
   a459c:	f000 f9f8 	bl	a4990 <__sinit>
   a45a0:	e781      	b.n	a44a6 <setvbuf+0x1a>
   a45a2:	60a6      	str	r6, [r4, #8]
   a45a4:	b003      	add	sp, #12
   a45a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a45aa:	4628      	mov	r0, r5
   a45ac:	f000 f9f0 	bl	a4990 <__sinit>
   a45b0:	e7ad      	b.n	a450e <setvbuf+0x82>
   a45b2:	f04f 30ff 	mov.w	r0, #4294967295
   a45b6:	e7e2      	b.n	a457e <setvbuf+0xf2>
   a45b8:	f8dd 9000 	ldr.w	r9, [sp]
   a45bc:	45b1      	cmp	r9, r6
   a45be:	d006      	beq.n	a45ce <setvbuf+0x142>
   a45c0:	4648      	mov	r0, r9
   a45c2:	f000 fd59 	bl	a5078 <malloc>
   a45c6:	4607      	mov	r7, r0
   a45c8:	b108      	cbz	r0, a45ce <setvbuf+0x142>
   a45ca:	464e      	mov	r6, r9
   a45cc:	e7c6      	b.n	a455c <setvbuf+0xd0>
   a45ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a45d2:	f04f 30ff 	mov.w	r0, #4294967295
   a45d6:	e7c7      	b.n	a4568 <setvbuf+0xdc>
   a45d8:	200710c8 	.word	0x200710c8

000a45dc <strlen>:
   a45dc:	f020 0103 	bic.w	r1, r0, #3
   a45e0:	f010 0003 	ands.w	r0, r0, #3
   a45e4:	f1c0 0000 	rsb	r0, r0, #0
   a45e8:	f851 3b04 	ldr.w	r3, [r1], #4
   a45ec:	f100 0c04 	add.w	ip, r0, #4
   a45f0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   a45f4:	f06f 0200 	mvn.w	r2, #0
   a45f8:	bf1c      	itt	ne
   a45fa:	fa22 f20c 	lsrne.w	r2, r2, ip
   a45fe:	4313      	orrne	r3, r2
   a4600:	f04f 0c01 	mov.w	ip, #1
   a4604:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   a4608:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   a460c:	eba3 020c 	sub.w	r2, r3, ip
   a4610:	ea22 0203 	bic.w	r2, r2, r3
   a4614:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   a4618:	bf04      	itt	eq
   a461a:	f851 3b04 	ldreq.w	r3, [r1], #4
   a461e:	3004      	addeq	r0, #4
   a4620:	d0f4      	beq.n	a460c <strlen+0x30>
   a4622:	f1c2 0100 	rsb	r1, r2, #0
   a4626:	ea02 0201 	and.w	r2, r2, r1
   a462a:	fab2 f282 	clz	r2, r2
   a462e:	f1c2 021f 	rsb	r2, r2, #31
   a4632:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   a4636:	4770      	bx	lr

000a4638 <__swsetup_r>:
   a4638:	b538      	push	{r3, r4, r5, lr}
   a463a:	4b30      	ldr	r3, [pc, #192]	; (a46fc <__swsetup_r+0xc4>)
   a463c:	4605      	mov	r5, r0
   a463e:	6818      	ldr	r0, [r3, #0]
   a4640:	460c      	mov	r4, r1
   a4642:	b110      	cbz	r0, a464a <__swsetup_r+0x12>
   a4644:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a4646:	2b00      	cmp	r3, #0
   a4648:	d038      	beq.n	a46bc <__swsetup_r+0x84>
   a464a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   a464e:	b293      	uxth	r3, r2
   a4650:	0718      	lsls	r0, r3, #28
   a4652:	d50c      	bpl.n	a466e <__swsetup_r+0x36>
   a4654:	6920      	ldr	r0, [r4, #16]
   a4656:	b1a8      	cbz	r0, a4684 <__swsetup_r+0x4c>
   a4658:	f013 0201 	ands.w	r2, r3, #1
   a465c:	d01e      	beq.n	a469c <__swsetup_r+0x64>
   a465e:	6963      	ldr	r3, [r4, #20]
   a4660:	2200      	movs	r2, #0
   a4662:	425b      	negs	r3, r3
   a4664:	61a3      	str	r3, [r4, #24]
   a4666:	60a2      	str	r2, [r4, #8]
   a4668:	b1f0      	cbz	r0, a46a8 <__swsetup_r+0x70>
   a466a:	2000      	movs	r0, #0
   a466c:	bd38      	pop	{r3, r4, r5, pc}
   a466e:	06d9      	lsls	r1, r3, #27
   a4670:	d53b      	bpl.n	a46ea <__swsetup_r+0xb2>
   a4672:	0758      	lsls	r0, r3, #29
   a4674:	d425      	bmi.n	a46c2 <__swsetup_r+0x8a>
   a4676:	6920      	ldr	r0, [r4, #16]
   a4678:	f042 0308 	orr.w	r3, r2, #8
   a467c:	81a3      	strh	r3, [r4, #12]
   a467e:	b29b      	uxth	r3, r3
   a4680:	2800      	cmp	r0, #0
   a4682:	d1e9      	bne.n	a4658 <__swsetup_r+0x20>
   a4684:	f403 7220 	and.w	r2, r3, #640	; 0x280
   a4688:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   a468c:	d0e4      	beq.n	a4658 <__swsetup_r+0x20>
   a468e:	4628      	mov	r0, r5
   a4690:	4621      	mov	r1, r4
   a4692:	f000 fcad 	bl	a4ff0 <__smakebuf_r>
   a4696:	89a3      	ldrh	r3, [r4, #12]
   a4698:	6920      	ldr	r0, [r4, #16]
   a469a:	e7dd      	b.n	a4658 <__swsetup_r+0x20>
   a469c:	0799      	lsls	r1, r3, #30
   a469e:	bf58      	it	pl
   a46a0:	6962      	ldrpl	r2, [r4, #20]
   a46a2:	60a2      	str	r2, [r4, #8]
   a46a4:	2800      	cmp	r0, #0
   a46a6:	d1e0      	bne.n	a466a <__swsetup_r+0x32>
   a46a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a46ac:	061a      	lsls	r2, r3, #24
   a46ae:	d5dd      	bpl.n	a466c <__swsetup_r+0x34>
   a46b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a46b4:	81a3      	strh	r3, [r4, #12]
   a46b6:	f04f 30ff 	mov.w	r0, #4294967295
   a46ba:	bd38      	pop	{r3, r4, r5, pc}
   a46bc:	f000 f968 	bl	a4990 <__sinit>
   a46c0:	e7c3      	b.n	a464a <__swsetup_r+0x12>
   a46c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a46c4:	b151      	cbz	r1, a46dc <__swsetup_r+0xa4>
   a46c6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a46ca:	4299      	cmp	r1, r3
   a46cc:	d004      	beq.n	a46d8 <__swsetup_r+0xa0>
   a46ce:	4628      	mov	r0, r5
   a46d0:	f000 f9ca 	bl	a4a68 <_free_r>
   a46d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   a46d8:	2300      	movs	r3, #0
   a46da:	6323      	str	r3, [r4, #48]	; 0x30
   a46dc:	6920      	ldr	r0, [r4, #16]
   a46de:	2300      	movs	r3, #0
   a46e0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   a46e4:	e884 0009 	stmia.w	r4, {r0, r3}
   a46e8:	e7c6      	b.n	a4678 <__swsetup_r+0x40>
   a46ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   a46ee:	2309      	movs	r3, #9
   a46f0:	602b      	str	r3, [r5, #0]
   a46f2:	f04f 30ff 	mov.w	r0, #4294967295
   a46f6:	81a2      	strh	r2, [r4, #12]
   a46f8:	bd38      	pop	{r3, r4, r5, pc}
   a46fa:	bf00      	nop
   a46fc:	200710c8 	.word	0x200710c8

000a4700 <register_fini>:
   a4700:	4b02      	ldr	r3, [pc, #8]	; (a470c <register_fini+0xc>)
   a4702:	b113      	cbz	r3, a470a <register_fini+0xa>
   a4704:	4802      	ldr	r0, [pc, #8]	; (a4710 <register_fini+0x10>)
   a4706:	f000 b805 	b.w	a4714 <atexit>
   a470a:	4770      	bx	lr
   a470c:	00000000 	.word	0x00000000
   a4710:	000a49a5 	.word	0x000a49a5

000a4714 <atexit>:
   a4714:	2300      	movs	r3, #0
   a4716:	4601      	mov	r1, r0
   a4718:	461a      	mov	r2, r3
   a471a:	4618      	mov	r0, r3
   a471c:	f001 ba64 	b.w	a5be8 <__register_exitproc>

000a4720 <__sflush_r>:
   a4720:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   a4724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a4728:	b29a      	uxth	r2, r3
   a472a:	460d      	mov	r5, r1
   a472c:	0711      	lsls	r1, r2, #28
   a472e:	4680      	mov	r8, r0
   a4730:	d43c      	bmi.n	a47ac <__sflush_r+0x8c>
   a4732:	686a      	ldr	r2, [r5, #4]
   a4734:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   a4738:	2a00      	cmp	r2, #0
   a473a:	81ab      	strh	r3, [r5, #12]
   a473c:	dd73      	ble.n	a4826 <__sflush_r+0x106>
   a473e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   a4740:	2c00      	cmp	r4, #0
   a4742:	d04b      	beq.n	a47dc <__sflush_r+0xbc>
   a4744:	b29b      	uxth	r3, r3
   a4746:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   a474a:	2100      	movs	r1, #0
   a474c:	b292      	uxth	r2, r2
   a474e:	f8d8 6000 	ldr.w	r6, [r8]
   a4752:	f8c8 1000 	str.w	r1, [r8]
   a4756:	2a00      	cmp	r2, #0
   a4758:	d069      	beq.n	a482e <__sflush_r+0x10e>
   a475a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   a475c:	075f      	lsls	r7, r3, #29
   a475e:	d505      	bpl.n	a476c <__sflush_r+0x4c>
   a4760:	6869      	ldr	r1, [r5, #4]
   a4762:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   a4764:	1a52      	subs	r2, r2, r1
   a4766:	b10b      	cbz	r3, a476c <__sflush_r+0x4c>
   a4768:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   a476a:	1ad2      	subs	r2, r2, r3
   a476c:	2300      	movs	r3, #0
   a476e:	69e9      	ldr	r1, [r5, #28]
   a4770:	4640      	mov	r0, r8
   a4772:	47a0      	blx	r4
   a4774:	1c44      	adds	r4, r0, #1
   a4776:	d03c      	beq.n	a47f2 <__sflush_r+0xd2>
   a4778:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   a477c:	6929      	ldr	r1, [r5, #16]
   a477e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   a4782:	2200      	movs	r2, #0
   a4784:	81ab      	strh	r3, [r5, #12]
   a4786:	04db      	lsls	r3, r3, #19
   a4788:	e885 0006 	stmia.w	r5, {r1, r2}
   a478c:	d449      	bmi.n	a4822 <__sflush_r+0x102>
   a478e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   a4790:	f8c8 6000 	str.w	r6, [r8]
   a4794:	b311      	cbz	r1, a47dc <__sflush_r+0xbc>
   a4796:	f105 0340 	add.w	r3, r5, #64	; 0x40
   a479a:	4299      	cmp	r1, r3
   a479c:	d002      	beq.n	a47a4 <__sflush_r+0x84>
   a479e:	4640      	mov	r0, r8
   a47a0:	f000 f962 	bl	a4a68 <_free_r>
   a47a4:	2000      	movs	r0, #0
   a47a6:	6328      	str	r0, [r5, #48]	; 0x30
   a47a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a47ac:	692e      	ldr	r6, [r5, #16]
   a47ae:	b1ae      	cbz	r6, a47dc <__sflush_r+0xbc>
   a47b0:	0790      	lsls	r0, r2, #30
   a47b2:	682c      	ldr	r4, [r5, #0]
   a47b4:	bf0c      	ite	eq
   a47b6:	696b      	ldreq	r3, [r5, #20]
   a47b8:	2300      	movne	r3, #0
   a47ba:	602e      	str	r6, [r5, #0]
   a47bc:	1ba4      	subs	r4, r4, r6
   a47be:	60ab      	str	r3, [r5, #8]
   a47c0:	e00a      	b.n	a47d8 <__sflush_r+0xb8>
   a47c2:	4623      	mov	r3, r4
   a47c4:	4632      	mov	r2, r6
   a47c6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   a47c8:	69e9      	ldr	r1, [r5, #28]
   a47ca:	4640      	mov	r0, r8
   a47cc:	47b8      	blx	r7
   a47ce:	2800      	cmp	r0, #0
   a47d0:	eba4 0400 	sub.w	r4, r4, r0
   a47d4:	4406      	add	r6, r0
   a47d6:	dd04      	ble.n	a47e2 <__sflush_r+0xc2>
   a47d8:	2c00      	cmp	r4, #0
   a47da:	dcf2      	bgt.n	a47c2 <__sflush_r+0xa2>
   a47dc:	2000      	movs	r0, #0
   a47de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a47e2:	89ab      	ldrh	r3, [r5, #12]
   a47e4:	f04f 30ff 	mov.w	r0, #4294967295
   a47e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a47ec:	81ab      	strh	r3, [r5, #12]
   a47ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a47f2:	f8d8 2000 	ldr.w	r2, [r8]
   a47f6:	2a1d      	cmp	r2, #29
   a47f8:	d8f3      	bhi.n	a47e2 <__sflush_r+0xc2>
   a47fa:	4b1a      	ldr	r3, [pc, #104]	; (a4864 <__sflush_r+0x144>)
   a47fc:	40d3      	lsrs	r3, r2
   a47fe:	f003 0301 	and.w	r3, r3, #1
   a4802:	f083 0401 	eor.w	r4, r3, #1
   a4806:	2b00      	cmp	r3, #0
   a4808:	d0eb      	beq.n	a47e2 <__sflush_r+0xc2>
   a480a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   a480e:	6929      	ldr	r1, [r5, #16]
   a4810:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   a4814:	6029      	str	r1, [r5, #0]
   a4816:	04d9      	lsls	r1, r3, #19
   a4818:	606c      	str	r4, [r5, #4]
   a481a:	81ab      	strh	r3, [r5, #12]
   a481c:	d5b7      	bpl.n	a478e <__sflush_r+0x6e>
   a481e:	2a00      	cmp	r2, #0
   a4820:	d1b5      	bne.n	a478e <__sflush_r+0x6e>
   a4822:	6528      	str	r0, [r5, #80]	; 0x50
   a4824:	e7b3      	b.n	a478e <__sflush_r+0x6e>
   a4826:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   a4828:	2a00      	cmp	r2, #0
   a482a:	dc88      	bgt.n	a473e <__sflush_r+0x1e>
   a482c:	e7d6      	b.n	a47dc <__sflush_r+0xbc>
   a482e:	2301      	movs	r3, #1
   a4830:	69e9      	ldr	r1, [r5, #28]
   a4832:	4640      	mov	r0, r8
   a4834:	47a0      	blx	r4
   a4836:	1c43      	adds	r3, r0, #1
   a4838:	4602      	mov	r2, r0
   a483a:	d002      	beq.n	a4842 <__sflush_r+0x122>
   a483c:	89ab      	ldrh	r3, [r5, #12]
   a483e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   a4840:	e78c      	b.n	a475c <__sflush_r+0x3c>
   a4842:	f8d8 3000 	ldr.w	r3, [r8]
   a4846:	2b00      	cmp	r3, #0
   a4848:	d0f8      	beq.n	a483c <__sflush_r+0x11c>
   a484a:	2b1d      	cmp	r3, #29
   a484c:	d001      	beq.n	a4852 <__sflush_r+0x132>
   a484e:	2b16      	cmp	r3, #22
   a4850:	d102      	bne.n	a4858 <__sflush_r+0x138>
   a4852:	f8c8 6000 	str.w	r6, [r8]
   a4856:	e7c1      	b.n	a47dc <__sflush_r+0xbc>
   a4858:	89ab      	ldrh	r3, [r5, #12]
   a485a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a485e:	81ab      	strh	r3, [r5, #12]
   a4860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a4864:	20400001 	.word	0x20400001

000a4868 <_fflush_r>:
   a4868:	b510      	push	{r4, lr}
   a486a:	4604      	mov	r4, r0
   a486c:	b082      	sub	sp, #8
   a486e:	b108      	cbz	r0, a4874 <_fflush_r+0xc>
   a4870:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a4872:	b153      	cbz	r3, a488a <_fflush_r+0x22>
   a4874:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   a4878:	b908      	cbnz	r0, a487e <_fflush_r+0x16>
   a487a:	b002      	add	sp, #8
   a487c:	bd10      	pop	{r4, pc}
   a487e:	4620      	mov	r0, r4
   a4880:	b002      	add	sp, #8
   a4882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   a4886:	f7ff bf4b 	b.w	a4720 <__sflush_r>
   a488a:	9101      	str	r1, [sp, #4]
   a488c:	f000 f880 	bl	a4990 <__sinit>
   a4890:	9901      	ldr	r1, [sp, #4]
   a4892:	e7ef      	b.n	a4874 <_fflush_r+0xc>

000a4894 <_cleanup_r>:
   a4894:	4901      	ldr	r1, [pc, #4]	; (a489c <_cleanup_r+0x8>)
   a4896:	f000 bb53 	b.w	a4f40 <_fwalk_reent>
   a489a:	bf00      	nop
   a489c:	000a5cb1 	.word	0x000a5cb1

000a48a0 <__sinit.part.1>:
   a48a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a48a4:	4607      	mov	r7, r0
   a48a6:	4835      	ldr	r0, [pc, #212]	; (a497c <__sinit.part.1+0xdc>)
   a48a8:	687d      	ldr	r5, [r7, #4]
   a48aa:	2400      	movs	r4, #0
   a48ac:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   a48b0:	2304      	movs	r3, #4
   a48b2:	2103      	movs	r1, #3
   a48b4:	63f8      	str	r0, [r7, #60]	; 0x3c
   a48b6:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   a48ba:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   a48be:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   a48c2:	b083      	sub	sp, #12
   a48c4:	602c      	str	r4, [r5, #0]
   a48c6:	606c      	str	r4, [r5, #4]
   a48c8:	60ac      	str	r4, [r5, #8]
   a48ca:	666c      	str	r4, [r5, #100]	; 0x64
   a48cc:	81ec      	strh	r4, [r5, #14]
   a48ce:	612c      	str	r4, [r5, #16]
   a48d0:	616c      	str	r4, [r5, #20]
   a48d2:	61ac      	str	r4, [r5, #24]
   a48d4:	81ab      	strh	r3, [r5, #12]
   a48d6:	4621      	mov	r1, r4
   a48d8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   a48dc:	2208      	movs	r2, #8
   a48de:	f7ff fd43 	bl	a4368 <memset>
   a48e2:	f8df b09c 	ldr.w	fp, [pc, #156]	; a4980 <__sinit.part.1+0xe0>
   a48e6:	68be      	ldr	r6, [r7, #8]
   a48e8:	f8df a098 	ldr.w	sl, [pc, #152]	; a4984 <__sinit.part.1+0xe4>
   a48ec:	f8df 9098 	ldr.w	r9, [pc, #152]	; a4988 <__sinit.part.1+0xe8>
   a48f0:	f8df 8098 	ldr.w	r8, [pc, #152]	; a498c <__sinit.part.1+0xec>
   a48f4:	2301      	movs	r3, #1
   a48f6:	2209      	movs	r2, #9
   a48f8:	f8c5 b020 	str.w	fp, [r5, #32]
   a48fc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   a4900:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   a4904:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   a4908:	61ed      	str	r5, [r5, #28]
   a490a:	4621      	mov	r1, r4
   a490c:	81f3      	strh	r3, [r6, #14]
   a490e:	81b2      	strh	r2, [r6, #12]
   a4910:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   a4914:	6034      	str	r4, [r6, #0]
   a4916:	6074      	str	r4, [r6, #4]
   a4918:	60b4      	str	r4, [r6, #8]
   a491a:	6674      	str	r4, [r6, #100]	; 0x64
   a491c:	6134      	str	r4, [r6, #16]
   a491e:	6174      	str	r4, [r6, #20]
   a4920:	61b4      	str	r4, [r6, #24]
   a4922:	2208      	movs	r2, #8
   a4924:	9301      	str	r3, [sp, #4]
   a4926:	f7ff fd1f 	bl	a4368 <memset>
   a492a:	68fd      	ldr	r5, [r7, #12]
   a492c:	2012      	movs	r0, #18
   a492e:	2202      	movs	r2, #2
   a4930:	61f6      	str	r6, [r6, #28]
   a4932:	f8c6 b020 	str.w	fp, [r6, #32]
   a4936:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   a493a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   a493e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   a4942:	4621      	mov	r1, r4
   a4944:	81a8      	strh	r0, [r5, #12]
   a4946:	81ea      	strh	r2, [r5, #14]
   a4948:	602c      	str	r4, [r5, #0]
   a494a:	606c      	str	r4, [r5, #4]
   a494c:	60ac      	str	r4, [r5, #8]
   a494e:	666c      	str	r4, [r5, #100]	; 0x64
   a4950:	612c      	str	r4, [r5, #16]
   a4952:	616c      	str	r4, [r5, #20]
   a4954:	61ac      	str	r4, [r5, #24]
   a4956:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   a495a:	2208      	movs	r2, #8
   a495c:	f7ff fd04 	bl	a4368 <memset>
   a4960:	9b01      	ldr	r3, [sp, #4]
   a4962:	61ed      	str	r5, [r5, #28]
   a4964:	f8c5 b020 	str.w	fp, [r5, #32]
   a4968:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   a496c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   a4970:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   a4974:	63bb      	str	r3, [r7, #56]	; 0x38
   a4976:	b003      	add	sp, #12
   a4978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a497c:	000a4895 	.word	0x000a4895
   a4980:	000a5b35 	.word	0x000a5b35
   a4984:	000a5b59 	.word	0x000a5b59
   a4988:	000a5b95 	.word	0x000a5b95
   a498c:	000a5bb5 	.word	0x000a5bb5

000a4990 <__sinit>:
   a4990:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a4992:	b103      	cbz	r3, a4996 <__sinit+0x6>
   a4994:	4770      	bx	lr
   a4996:	f7ff bf83 	b.w	a48a0 <__sinit.part.1>
   a499a:	bf00      	nop

000a499c <__sfp_lock_acquire>:
   a499c:	4770      	bx	lr
   a499e:	bf00      	nop

000a49a0 <__sfp_lock_release>:
   a49a0:	4770      	bx	lr
   a49a2:	bf00      	nop

000a49a4 <__libc_fini_array>:
   a49a4:	b538      	push	{r3, r4, r5, lr}
   a49a6:	4d07      	ldr	r5, [pc, #28]	; (a49c4 <__libc_fini_array+0x20>)
   a49a8:	4c07      	ldr	r4, [pc, #28]	; (a49c8 <__libc_fini_array+0x24>)
   a49aa:	1b2c      	subs	r4, r5, r4
   a49ac:	10a4      	asrs	r4, r4, #2
   a49ae:	d005      	beq.n	a49bc <__libc_fini_array+0x18>
   a49b0:	3c01      	subs	r4, #1
   a49b2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   a49b6:	4798      	blx	r3
   a49b8:	2c00      	cmp	r4, #0
   a49ba:	d1f9      	bne.n	a49b0 <__libc_fini_array+0xc>
   a49bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   a49c0:	f001 bcc8 	b.w	a6354 <_fini>
   a49c4:	000a6364 	.word	0x000a6364
   a49c8:	000a6360 	.word	0x000a6360

000a49cc <_malloc_trim_r>:
   a49cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a49ce:	460c      	mov	r4, r1
   a49d0:	4f22      	ldr	r7, [pc, #136]	; (a4a5c <_malloc_trim_r+0x90>)
   a49d2:	4606      	mov	r6, r0
   a49d4:	f000 feae 	bl	a5734 <__malloc_lock>
   a49d8:	68bb      	ldr	r3, [r7, #8]
   a49da:	685d      	ldr	r5, [r3, #4]
   a49dc:	f025 0503 	bic.w	r5, r5, #3
   a49e0:	1b29      	subs	r1, r5, r4
   a49e2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   a49e6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   a49ea:	f021 010f 	bic.w	r1, r1, #15
   a49ee:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   a49f2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   a49f6:	db07      	blt.n	a4a08 <_malloc_trim_r+0x3c>
   a49f8:	2100      	movs	r1, #0
   a49fa:	4630      	mov	r0, r6
   a49fc:	f001 f888 	bl	a5b10 <_sbrk_r>
   a4a00:	68bb      	ldr	r3, [r7, #8]
   a4a02:	442b      	add	r3, r5
   a4a04:	4298      	cmp	r0, r3
   a4a06:	d004      	beq.n	a4a12 <_malloc_trim_r+0x46>
   a4a08:	4630      	mov	r0, r6
   a4a0a:	f000 fe95 	bl	a5738 <__malloc_unlock>
   a4a0e:	2000      	movs	r0, #0
   a4a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   a4a12:	4261      	negs	r1, r4
   a4a14:	4630      	mov	r0, r6
   a4a16:	f001 f87b 	bl	a5b10 <_sbrk_r>
   a4a1a:	3001      	adds	r0, #1
   a4a1c:	d00d      	beq.n	a4a3a <_malloc_trim_r+0x6e>
   a4a1e:	4b10      	ldr	r3, [pc, #64]	; (a4a60 <_malloc_trim_r+0x94>)
   a4a20:	68ba      	ldr	r2, [r7, #8]
   a4a22:	6819      	ldr	r1, [r3, #0]
   a4a24:	1b2d      	subs	r5, r5, r4
   a4a26:	f045 0501 	orr.w	r5, r5, #1
   a4a2a:	4630      	mov	r0, r6
   a4a2c:	1b09      	subs	r1, r1, r4
   a4a2e:	6055      	str	r5, [r2, #4]
   a4a30:	6019      	str	r1, [r3, #0]
   a4a32:	f000 fe81 	bl	a5738 <__malloc_unlock>
   a4a36:	2001      	movs	r0, #1
   a4a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   a4a3a:	2100      	movs	r1, #0
   a4a3c:	4630      	mov	r0, r6
   a4a3e:	f001 f867 	bl	a5b10 <_sbrk_r>
   a4a42:	68ba      	ldr	r2, [r7, #8]
   a4a44:	1a83      	subs	r3, r0, r2
   a4a46:	2b0f      	cmp	r3, #15
   a4a48:	ddde      	ble.n	a4a08 <_malloc_trim_r+0x3c>
   a4a4a:	4c06      	ldr	r4, [pc, #24]	; (a4a64 <_malloc_trim_r+0x98>)
   a4a4c:	4904      	ldr	r1, [pc, #16]	; (a4a60 <_malloc_trim_r+0x94>)
   a4a4e:	6824      	ldr	r4, [r4, #0]
   a4a50:	f043 0301 	orr.w	r3, r3, #1
   a4a54:	1b00      	subs	r0, r0, r4
   a4a56:	6053      	str	r3, [r2, #4]
   a4a58:	6008      	str	r0, [r1, #0]
   a4a5a:	e7d5      	b.n	a4a08 <_malloc_trim_r+0x3c>
   a4a5c:	200710cc 	.word	0x200710cc
   a4a60:	200728b8 	.word	0x200728b8
   a4a64:	200714d8 	.word	0x200714d8

000a4a68 <_free_r>:
   a4a68:	2900      	cmp	r1, #0
   a4a6a:	d045      	beq.n	a4af8 <_free_r+0x90>
   a4a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a4a70:	460d      	mov	r5, r1
   a4a72:	4680      	mov	r8, r0
   a4a74:	f000 fe5e 	bl	a5734 <__malloc_lock>
   a4a78:	f855 7c04 	ldr.w	r7, [r5, #-4]
   a4a7c:	496a      	ldr	r1, [pc, #424]	; (a4c28 <_free_r+0x1c0>)
   a4a7e:	f1a5 0408 	sub.w	r4, r5, #8
   a4a82:	f027 0301 	bic.w	r3, r7, #1
   a4a86:	18e2      	adds	r2, r4, r3
   a4a88:	688e      	ldr	r6, [r1, #8]
   a4a8a:	6850      	ldr	r0, [r2, #4]
   a4a8c:	42b2      	cmp	r2, r6
   a4a8e:	f020 0003 	bic.w	r0, r0, #3
   a4a92:	d062      	beq.n	a4b5a <_free_r+0xf2>
   a4a94:	07fe      	lsls	r6, r7, #31
   a4a96:	6050      	str	r0, [r2, #4]
   a4a98:	d40b      	bmi.n	a4ab2 <_free_r+0x4a>
   a4a9a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   a4a9e:	f101 0e08 	add.w	lr, r1, #8
   a4aa2:	1be4      	subs	r4, r4, r7
   a4aa4:	68a5      	ldr	r5, [r4, #8]
   a4aa6:	443b      	add	r3, r7
   a4aa8:	4575      	cmp	r5, lr
   a4aaa:	d06f      	beq.n	a4b8c <_free_r+0x124>
   a4aac:	68e7      	ldr	r7, [r4, #12]
   a4aae:	60ef      	str	r7, [r5, #12]
   a4ab0:	60bd      	str	r5, [r7, #8]
   a4ab2:	1815      	adds	r5, r2, r0
   a4ab4:	686d      	ldr	r5, [r5, #4]
   a4ab6:	07ed      	lsls	r5, r5, #31
   a4ab8:	d542      	bpl.n	a4b40 <_free_r+0xd8>
   a4aba:	f043 0201 	orr.w	r2, r3, #1
   a4abe:	6062      	str	r2, [r4, #4]
   a4ac0:	50e3      	str	r3, [r4, r3]
   a4ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   a4ac6:	d218      	bcs.n	a4afa <_free_r+0x92>
   a4ac8:	08db      	lsrs	r3, r3, #3
   a4aca:	6848      	ldr	r0, [r1, #4]
   a4acc:	109d      	asrs	r5, r3, #2
   a4ace:	2201      	movs	r2, #1
   a4ad0:	3301      	adds	r3, #1
   a4ad2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   a4ad6:	fa02 f505 	lsl.w	r5, r2, r5
   a4ada:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   a4ade:	4328      	orrs	r0, r5
   a4ae0:	3a08      	subs	r2, #8
   a4ae2:	60e2      	str	r2, [r4, #12]
   a4ae4:	60a7      	str	r7, [r4, #8]
   a4ae6:	6048      	str	r0, [r1, #4]
   a4ae8:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   a4aec:	60fc      	str	r4, [r7, #12]
   a4aee:	4640      	mov	r0, r8
   a4af0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a4af4:	f000 be20 	b.w	a5738 <__malloc_unlock>
   a4af8:	4770      	bx	lr
   a4afa:	0a5a      	lsrs	r2, r3, #9
   a4afc:	2a04      	cmp	r2, #4
   a4afe:	d853      	bhi.n	a4ba8 <_free_r+0x140>
   a4b00:	099a      	lsrs	r2, r3, #6
   a4b02:	f102 0739 	add.w	r7, r2, #57	; 0x39
   a4b06:	007f      	lsls	r7, r7, #1
   a4b08:	f102 0538 	add.w	r5, r2, #56	; 0x38
   a4b0c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   a4b10:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   a4b14:	3808      	subs	r0, #8
   a4b16:	4290      	cmp	r0, r2
   a4b18:	4943      	ldr	r1, [pc, #268]	; (a4c28 <_free_r+0x1c0>)
   a4b1a:	d04d      	beq.n	a4bb8 <_free_r+0x150>
   a4b1c:	6851      	ldr	r1, [r2, #4]
   a4b1e:	f021 0103 	bic.w	r1, r1, #3
   a4b22:	428b      	cmp	r3, r1
   a4b24:	d202      	bcs.n	a4b2c <_free_r+0xc4>
   a4b26:	6892      	ldr	r2, [r2, #8]
   a4b28:	4290      	cmp	r0, r2
   a4b2a:	d1f7      	bne.n	a4b1c <_free_r+0xb4>
   a4b2c:	68d0      	ldr	r0, [r2, #12]
   a4b2e:	60e0      	str	r0, [r4, #12]
   a4b30:	60a2      	str	r2, [r4, #8]
   a4b32:	6084      	str	r4, [r0, #8]
   a4b34:	60d4      	str	r4, [r2, #12]
   a4b36:	4640      	mov	r0, r8
   a4b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a4b3c:	f000 bdfc 	b.w	a5738 <__malloc_unlock>
   a4b40:	6895      	ldr	r5, [r2, #8]
   a4b42:	4f3a      	ldr	r7, [pc, #232]	; (a4c2c <_free_r+0x1c4>)
   a4b44:	4403      	add	r3, r0
   a4b46:	42bd      	cmp	r5, r7
   a4b48:	d03f      	beq.n	a4bca <_free_r+0x162>
   a4b4a:	68d0      	ldr	r0, [r2, #12]
   a4b4c:	f043 0201 	orr.w	r2, r3, #1
   a4b50:	60e8      	str	r0, [r5, #12]
   a4b52:	6085      	str	r5, [r0, #8]
   a4b54:	6062      	str	r2, [r4, #4]
   a4b56:	50e3      	str	r3, [r4, r3]
   a4b58:	e7b3      	b.n	a4ac2 <_free_r+0x5a>
   a4b5a:	07ff      	lsls	r7, r7, #31
   a4b5c:	4403      	add	r3, r0
   a4b5e:	d407      	bmi.n	a4b70 <_free_r+0x108>
   a4b60:	f855 5c08 	ldr.w	r5, [r5, #-8]
   a4b64:	1b64      	subs	r4, r4, r5
   a4b66:	68e2      	ldr	r2, [r4, #12]
   a4b68:	68a0      	ldr	r0, [r4, #8]
   a4b6a:	442b      	add	r3, r5
   a4b6c:	60c2      	str	r2, [r0, #12]
   a4b6e:	6090      	str	r0, [r2, #8]
   a4b70:	4a2f      	ldr	r2, [pc, #188]	; (a4c30 <_free_r+0x1c8>)
   a4b72:	f043 0001 	orr.w	r0, r3, #1
   a4b76:	6812      	ldr	r2, [r2, #0]
   a4b78:	6060      	str	r0, [r4, #4]
   a4b7a:	4293      	cmp	r3, r2
   a4b7c:	608c      	str	r4, [r1, #8]
   a4b7e:	d3b6      	bcc.n	a4aee <_free_r+0x86>
   a4b80:	4b2c      	ldr	r3, [pc, #176]	; (a4c34 <_free_r+0x1cc>)
   a4b82:	4640      	mov	r0, r8
   a4b84:	6819      	ldr	r1, [r3, #0]
   a4b86:	f7ff ff21 	bl	a49cc <_malloc_trim_r>
   a4b8a:	e7b0      	b.n	a4aee <_free_r+0x86>
   a4b8c:	1811      	adds	r1, r2, r0
   a4b8e:	6849      	ldr	r1, [r1, #4]
   a4b90:	07c9      	lsls	r1, r1, #31
   a4b92:	d444      	bmi.n	a4c1e <_free_r+0x1b6>
   a4b94:	6891      	ldr	r1, [r2, #8]
   a4b96:	4403      	add	r3, r0
   a4b98:	68d2      	ldr	r2, [r2, #12]
   a4b9a:	f043 0001 	orr.w	r0, r3, #1
   a4b9e:	60ca      	str	r2, [r1, #12]
   a4ba0:	6091      	str	r1, [r2, #8]
   a4ba2:	6060      	str	r0, [r4, #4]
   a4ba4:	50e3      	str	r3, [r4, r3]
   a4ba6:	e7a2      	b.n	a4aee <_free_r+0x86>
   a4ba8:	2a14      	cmp	r2, #20
   a4baa:	d817      	bhi.n	a4bdc <_free_r+0x174>
   a4bac:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   a4bb0:	007f      	lsls	r7, r7, #1
   a4bb2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   a4bb6:	e7a9      	b.n	a4b0c <_free_r+0xa4>
   a4bb8:	10aa      	asrs	r2, r5, #2
   a4bba:	684b      	ldr	r3, [r1, #4]
   a4bbc:	2501      	movs	r5, #1
   a4bbe:	fa05 f202 	lsl.w	r2, r5, r2
   a4bc2:	4313      	orrs	r3, r2
   a4bc4:	604b      	str	r3, [r1, #4]
   a4bc6:	4602      	mov	r2, r0
   a4bc8:	e7b1      	b.n	a4b2e <_free_r+0xc6>
   a4bca:	f043 0201 	orr.w	r2, r3, #1
   a4bce:	614c      	str	r4, [r1, #20]
   a4bd0:	610c      	str	r4, [r1, #16]
   a4bd2:	60e5      	str	r5, [r4, #12]
   a4bd4:	60a5      	str	r5, [r4, #8]
   a4bd6:	6062      	str	r2, [r4, #4]
   a4bd8:	50e3      	str	r3, [r4, r3]
   a4bda:	e788      	b.n	a4aee <_free_r+0x86>
   a4bdc:	2a54      	cmp	r2, #84	; 0x54
   a4bde:	d806      	bhi.n	a4bee <_free_r+0x186>
   a4be0:	0b1a      	lsrs	r2, r3, #12
   a4be2:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   a4be6:	007f      	lsls	r7, r7, #1
   a4be8:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   a4bec:	e78e      	b.n	a4b0c <_free_r+0xa4>
   a4bee:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   a4bf2:	d806      	bhi.n	a4c02 <_free_r+0x19a>
   a4bf4:	0bda      	lsrs	r2, r3, #15
   a4bf6:	f102 0778 	add.w	r7, r2, #120	; 0x78
   a4bfa:	007f      	lsls	r7, r7, #1
   a4bfc:	f102 0577 	add.w	r5, r2, #119	; 0x77
   a4c00:	e784      	b.n	a4b0c <_free_r+0xa4>
   a4c02:	f240 5054 	movw	r0, #1364	; 0x554
   a4c06:	4282      	cmp	r2, r0
   a4c08:	d806      	bhi.n	a4c18 <_free_r+0x1b0>
   a4c0a:	0c9a      	lsrs	r2, r3, #18
   a4c0c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   a4c10:	007f      	lsls	r7, r7, #1
   a4c12:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   a4c16:	e779      	b.n	a4b0c <_free_r+0xa4>
   a4c18:	27fe      	movs	r7, #254	; 0xfe
   a4c1a:	257e      	movs	r5, #126	; 0x7e
   a4c1c:	e776      	b.n	a4b0c <_free_r+0xa4>
   a4c1e:	f043 0201 	orr.w	r2, r3, #1
   a4c22:	6062      	str	r2, [r4, #4]
   a4c24:	50e3      	str	r3, [r4, r3]
   a4c26:	e762      	b.n	a4aee <_free_r+0x86>
   a4c28:	200710cc 	.word	0x200710cc
   a4c2c:	200710d4 	.word	0x200710d4
   a4c30:	200714d4 	.word	0x200714d4
   a4c34:	200728b4 	.word	0x200728b4

000a4c38 <__sfvwrite_r>:
   a4c38:	6893      	ldr	r3, [r2, #8]
   a4c3a:	2b00      	cmp	r3, #0
   a4c3c:	f000 80ab 	beq.w	a4d96 <__sfvwrite_r+0x15e>
   a4c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a4c44:	898b      	ldrh	r3, [r1, #12]
   a4c46:	b085      	sub	sp, #20
   a4c48:	460c      	mov	r4, r1
   a4c4a:	0719      	lsls	r1, r3, #28
   a4c4c:	9002      	str	r0, [sp, #8]
   a4c4e:	4616      	mov	r6, r2
   a4c50:	d528      	bpl.n	a4ca4 <__sfvwrite_r+0x6c>
   a4c52:	6922      	ldr	r2, [r4, #16]
   a4c54:	b332      	cbz	r2, a4ca4 <__sfvwrite_r+0x6c>
   a4c56:	f003 0802 	and.w	r8, r3, #2
   a4c5a:	fa1f f088 	uxth.w	r0, r8
   a4c5e:	6835      	ldr	r5, [r6, #0]
   a4c60:	b378      	cbz	r0, a4cc2 <__sfvwrite_r+0x8a>
   a4c62:	f04f 0900 	mov.w	r9, #0
   a4c66:	46c8      	mov	r8, r9
   a4c68:	f8df a2d0 	ldr.w	sl, [pc, #720]	; a4f3c <__sfvwrite_r+0x304>
   a4c6c:	f1b8 0f00 	cmp.w	r8, #0
   a4c70:	f000 808b 	beq.w	a4d8a <__sfvwrite_r+0x152>
   a4c74:	45d0      	cmp	r8, sl
   a4c76:	4643      	mov	r3, r8
   a4c78:	464a      	mov	r2, r9
   a4c7a:	bf28      	it	cs
   a4c7c:	4653      	movcs	r3, sl
   a4c7e:	69e1      	ldr	r1, [r4, #28]
   a4c80:	9802      	ldr	r0, [sp, #8]
   a4c82:	6a67      	ldr	r7, [r4, #36]	; 0x24
   a4c84:	47b8      	blx	r7
   a4c86:	2800      	cmp	r0, #0
   a4c88:	f340 80a5 	ble.w	a4dd6 <__sfvwrite_r+0x19e>
   a4c8c:	68b3      	ldr	r3, [r6, #8]
   a4c8e:	4481      	add	r9, r0
   a4c90:	1a1b      	subs	r3, r3, r0
   a4c92:	ebc0 0808 	rsb	r8, r0, r8
   a4c96:	60b3      	str	r3, [r6, #8]
   a4c98:	2b00      	cmp	r3, #0
   a4c9a:	d1e7      	bne.n	a4c6c <__sfvwrite_r+0x34>
   a4c9c:	2000      	movs	r0, #0
   a4c9e:	b005      	add	sp, #20
   a4ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a4ca4:	4621      	mov	r1, r4
   a4ca6:	9802      	ldr	r0, [sp, #8]
   a4ca8:	f7ff fcc6 	bl	a4638 <__swsetup_r>
   a4cac:	2800      	cmp	r0, #0
   a4cae:	f040 813c 	bne.w	a4f2a <__sfvwrite_r+0x2f2>
   a4cb2:	89a3      	ldrh	r3, [r4, #12]
   a4cb4:	6835      	ldr	r5, [r6, #0]
   a4cb6:	f003 0802 	and.w	r8, r3, #2
   a4cba:	fa1f f088 	uxth.w	r0, r8
   a4cbe:	2800      	cmp	r0, #0
   a4cc0:	d1cf      	bne.n	a4c62 <__sfvwrite_r+0x2a>
   a4cc2:	f013 0901 	ands.w	r9, r3, #1
   a4cc6:	f040 8090 	bne.w	a4dea <__sfvwrite_r+0x1b2>
   a4cca:	464f      	mov	r7, r9
   a4ccc:	9601      	str	r6, [sp, #4]
   a4cce:	2f00      	cmp	r7, #0
   a4cd0:	d056      	beq.n	a4d80 <__sfvwrite_r+0x148>
   a4cd2:	059a      	lsls	r2, r3, #22
   a4cd4:	f8d4 8008 	ldr.w	r8, [r4, #8]
   a4cd8:	d55f      	bpl.n	a4d9a <__sfvwrite_r+0x162>
   a4cda:	4547      	cmp	r7, r8
   a4cdc:	46c2      	mov	sl, r8
   a4cde:	f0c0 80bf 	bcc.w	a4e60 <__sfvwrite_r+0x228>
   a4ce2:	f413 6f90 	tst.w	r3, #1152	; 0x480
   a4ce6:	f000 80bd 	beq.w	a4e64 <__sfvwrite_r+0x22c>
   a4cea:	6962      	ldr	r2, [r4, #20]
   a4cec:	6820      	ldr	r0, [r4, #0]
   a4cee:	6921      	ldr	r1, [r4, #16]
   a4cf0:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   a4cf4:	ebc1 0a00 	rsb	sl, r1, r0
   a4cf8:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   a4cfc:	f10a 0001 	add.w	r0, sl, #1
   a4d00:	ea4f 0868 	mov.w	r8, r8, asr #1
   a4d04:	4438      	add	r0, r7
   a4d06:	4540      	cmp	r0, r8
   a4d08:	4642      	mov	r2, r8
   a4d0a:	bf84      	itt	hi
   a4d0c:	4680      	movhi	r8, r0
   a4d0e:	4642      	movhi	r2, r8
   a4d10:	055b      	lsls	r3, r3, #21
   a4d12:	f140 80f2 	bpl.w	a4efa <__sfvwrite_r+0x2c2>
   a4d16:	4611      	mov	r1, r2
   a4d18:	9802      	ldr	r0, [sp, #8]
   a4d1a:	f000 f9b5 	bl	a5088 <_malloc_r>
   a4d1e:	4683      	mov	fp, r0
   a4d20:	2800      	cmp	r0, #0
   a4d22:	f000 8105 	beq.w	a4f30 <__sfvwrite_r+0x2f8>
   a4d26:	4652      	mov	r2, sl
   a4d28:	6921      	ldr	r1, [r4, #16]
   a4d2a:	f7ff faa7 	bl	a427c <memcpy>
   a4d2e:	89a3      	ldrh	r3, [r4, #12]
   a4d30:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   a4d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a4d38:	81a3      	strh	r3, [r4, #12]
   a4d3a:	ebca 0308 	rsb	r3, sl, r8
   a4d3e:	eb0b 000a 	add.w	r0, fp, sl
   a4d42:	f8c4 8014 	str.w	r8, [r4, #20]
   a4d46:	46ba      	mov	sl, r7
   a4d48:	46b8      	mov	r8, r7
   a4d4a:	f8c4 b010 	str.w	fp, [r4, #16]
   a4d4e:	6020      	str	r0, [r4, #0]
   a4d50:	60a3      	str	r3, [r4, #8]
   a4d52:	4652      	mov	r2, sl
   a4d54:	4649      	mov	r1, r9
   a4d56:	f000 fc89 	bl	a566c <memmove>
   a4d5a:	68a0      	ldr	r0, [r4, #8]
   a4d5c:	6823      	ldr	r3, [r4, #0]
   a4d5e:	ebc8 0000 	rsb	r0, r8, r0
   a4d62:	60a0      	str	r0, [r4, #8]
   a4d64:	4638      	mov	r0, r7
   a4d66:	4453      	add	r3, sl
   a4d68:	6023      	str	r3, [r4, #0]
   a4d6a:	9a01      	ldr	r2, [sp, #4]
   a4d6c:	4481      	add	r9, r0
   a4d6e:	6893      	ldr	r3, [r2, #8]
   a4d70:	1a3f      	subs	r7, r7, r0
   a4d72:	1a1b      	subs	r3, r3, r0
   a4d74:	6093      	str	r3, [r2, #8]
   a4d76:	2b00      	cmp	r3, #0
   a4d78:	d090      	beq.n	a4c9c <__sfvwrite_r+0x64>
   a4d7a:	89a3      	ldrh	r3, [r4, #12]
   a4d7c:	2f00      	cmp	r7, #0
   a4d7e:	d1a8      	bne.n	a4cd2 <__sfvwrite_r+0x9a>
   a4d80:	f8d5 9000 	ldr.w	r9, [r5]
   a4d84:	686f      	ldr	r7, [r5, #4]
   a4d86:	3508      	adds	r5, #8
   a4d88:	e7a1      	b.n	a4cce <__sfvwrite_r+0x96>
   a4d8a:	f8d5 9000 	ldr.w	r9, [r5]
   a4d8e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   a4d92:	3508      	adds	r5, #8
   a4d94:	e76a      	b.n	a4c6c <__sfvwrite_r+0x34>
   a4d96:	2000      	movs	r0, #0
   a4d98:	4770      	bx	lr
   a4d9a:	6820      	ldr	r0, [r4, #0]
   a4d9c:	6923      	ldr	r3, [r4, #16]
   a4d9e:	4298      	cmp	r0, r3
   a4da0:	d803      	bhi.n	a4daa <__sfvwrite_r+0x172>
   a4da2:	6962      	ldr	r2, [r4, #20]
   a4da4:	4297      	cmp	r7, r2
   a4da6:	f080 8083 	bcs.w	a4eb0 <__sfvwrite_r+0x278>
   a4daa:	45b8      	cmp	r8, r7
   a4dac:	bf28      	it	cs
   a4dae:	46b8      	movcs	r8, r7
   a4db0:	4649      	mov	r1, r9
   a4db2:	4642      	mov	r2, r8
   a4db4:	f000 fc5a 	bl	a566c <memmove>
   a4db8:	68a3      	ldr	r3, [r4, #8]
   a4dba:	6822      	ldr	r2, [r4, #0]
   a4dbc:	ebc8 0303 	rsb	r3, r8, r3
   a4dc0:	4442      	add	r2, r8
   a4dc2:	60a3      	str	r3, [r4, #8]
   a4dc4:	6022      	str	r2, [r4, #0]
   a4dc6:	2b00      	cmp	r3, #0
   a4dc8:	d148      	bne.n	a4e5c <__sfvwrite_r+0x224>
   a4dca:	4621      	mov	r1, r4
   a4dcc:	9802      	ldr	r0, [sp, #8]
   a4dce:	f7ff fd4b 	bl	a4868 <_fflush_r>
   a4dd2:	2800      	cmp	r0, #0
   a4dd4:	d042      	beq.n	a4e5c <__sfvwrite_r+0x224>
   a4dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a4dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a4dde:	f04f 30ff 	mov.w	r0, #4294967295
   a4de2:	81a3      	strh	r3, [r4, #12]
   a4de4:	b005      	add	sp, #20
   a4de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a4dea:	4680      	mov	r8, r0
   a4dec:	4682      	mov	sl, r0
   a4dee:	4681      	mov	r9, r0
   a4df0:	9001      	str	r0, [sp, #4]
   a4df2:	f1b9 0f00 	cmp.w	r9, #0
   a4df6:	d029      	beq.n	a4e4c <__sfvwrite_r+0x214>
   a4df8:	9b01      	ldr	r3, [sp, #4]
   a4dfa:	2b00      	cmp	r3, #0
   a4dfc:	d04b      	beq.n	a4e96 <__sfvwrite_r+0x25e>
   a4dfe:	45c8      	cmp	r8, r9
   a4e00:	46c3      	mov	fp, r8
   a4e02:	bf28      	it	cs
   a4e04:	46cb      	movcs	fp, r9
   a4e06:	6820      	ldr	r0, [r4, #0]
   a4e08:	6923      	ldr	r3, [r4, #16]
   a4e0a:	465f      	mov	r7, fp
   a4e0c:	4298      	cmp	r0, r3
   a4e0e:	6962      	ldr	r2, [r4, #20]
   a4e10:	d903      	bls.n	a4e1a <__sfvwrite_r+0x1e2>
   a4e12:	68a3      	ldr	r3, [r4, #8]
   a4e14:	4413      	add	r3, r2
   a4e16:	459b      	cmp	fp, r3
   a4e18:	dc5c      	bgt.n	a4ed4 <__sfvwrite_r+0x29c>
   a4e1a:	4593      	cmp	fp, r2
   a4e1c:	db24      	blt.n	a4e68 <__sfvwrite_r+0x230>
   a4e1e:	4613      	mov	r3, r2
   a4e20:	6a67      	ldr	r7, [r4, #36]	; 0x24
   a4e22:	4652      	mov	r2, sl
   a4e24:	69e1      	ldr	r1, [r4, #28]
   a4e26:	9802      	ldr	r0, [sp, #8]
   a4e28:	47b8      	blx	r7
   a4e2a:	1e07      	subs	r7, r0, #0
   a4e2c:	ddd3      	ble.n	a4dd6 <__sfvwrite_r+0x19e>
   a4e2e:	ebb8 0807 	subs.w	r8, r8, r7
   a4e32:	d027      	beq.n	a4e84 <__sfvwrite_r+0x24c>
   a4e34:	68b3      	ldr	r3, [r6, #8]
   a4e36:	44ba      	add	sl, r7
   a4e38:	1bdb      	subs	r3, r3, r7
   a4e3a:	ebc7 0909 	rsb	r9, r7, r9
   a4e3e:	60b3      	str	r3, [r6, #8]
   a4e40:	2b00      	cmp	r3, #0
   a4e42:	f43f af2b 	beq.w	a4c9c <__sfvwrite_r+0x64>
   a4e46:	f1b9 0f00 	cmp.w	r9, #0
   a4e4a:	d1d5      	bne.n	a4df8 <__sfvwrite_r+0x1c0>
   a4e4c:	2300      	movs	r3, #0
   a4e4e:	f8d5 a000 	ldr.w	sl, [r5]
   a4e52:	f8d5 9004 	ldr.w	r9, [r5, #4]
   a4e56:	9301      	str	r3, [sp, #4]
   a4e58:	3508      	adds	r5, #8
   a4e5a:	e7ca      	b.n	a4df2 <__sfvwrite_r+0x1ba>
   a4e5c:	4640      	mov	r0, r8
   a4e5e:	e784      	b.n	a4d6a <__sfvwrite_r+0x132>
   a4e60:	46b8      	mov	r8, r7
   a4e62:	46ba      	mov	sl, r7
   a4e64:	6820      	ldr	r0, [r4, #0]
   a4e66:	e774      	b.n	a4d52 <__sfvwrite_r+0x11a>
   a4e68:	465a      	mov	r2, fp
   a4e6a:	4651      	mov	r1, sl
   a4e6c:	f000 fbfe 	bl	a566c <memmove>
   a4e70:	68a2      	ldr	r2, [r4, #8]
   a4e72:	6823      	ldr	r3, [r4, #0]
   a4e74:	ebcb 0202 	rsb	r2, fp, r2
   a4e78:	445b      	add	r3, fp
   a4e7a:	ebb8 0807 	subs.w	r8, r8, r7
   a4e7e:	60a2      	str	r2, [r4, #8]
   a4e80:	6023      	str	r3, [r4, #0]
   a4e82:	d1d7      	bne.n	a4e34 <__sfvwrite_r+0x1fc>
   a4e84:	4621      	mov	r1, r4
   a4e86:	9802      	ldr	r0, [sp, #8]
   a4e88:	f7ff fcee 	bl	a4868 <_fflush_r>
   a4e8c:	2800      	cmp	r0, #0
   a4e8e:	d1a2      	bne.n	a4dd6 <__sfvwrite_r+0x19e>
   a4e90:	f8cd 8004 	str.w	r8, [sp, #4]
   a4e94:	e7ce      	b.n	a4e34 <__sfvwrite_r+0x1fc>
   a4e96:	464a      	mov	r2, r9
   a4e98:	210a      	movs	r1, #10
   a4e9a:	4650      	mov	r0, sl
   a4e9c:	f000 fba0 	bl	a55e0 <memchr>
   a4ea0:	2800      	cmp	r0, #0
   a4ea2:	d03d      	beq.n	a4f20 <__sfvwrite_r+0x2e8>
   a4ea4:	3001      	adds	r0, #1
   a4ea6:	2301      	movs	r3, #1
   a4ea8:	ebca 0800 	rsb	r8, sl, r0
   a4eac:	9301      	str	r3, [sp, #4]
   a4eae:	e7a6      	b.n	a4dfe <__sfvwrite_r+0x1c6>
   a4eb0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   a4eb4:	42bb      	cmp	r3, r7
   a4eb6:	bf28      	it	cs
   a4eb8:	463b      	movcs	r3, r7
   a4eba:	fb93 f3f2 	sdiv	r3, r3, r2
   a4ebe:	69e1      	ldr	r1, [r4, #28]
   a4ec0:	fb02 f303 	mul.w	r3, r2, r3
   a4ec4:	9802      	ldr	r0, [sp, #8]
   a4ec6:	464a      	mov	r2, r9
   a4ec8:	6a66      	ldr	r6, [r4, #36]	; 0x24
   a4eca:	47b0      	blx	r6
   a4ecc:	2800      	cmp	r0, #0
   a4ece:	f73f af4c 	bgt.w	a4d6a <__sfvwrite_r+0x132>
   a4ed2:	e780      	b.n	a4dd6 <__sfvwrite_r+0x19e>
   a4ed4:	461a      	mov	r2, r3
   a4ed6:	4651      	mov	r1, sl
   a4ed8:	9303      	str	r3, [sp, #12]
   a4eda:	f000 fbc7 	bl	a566c <memmove>
   a4ede:	6822      	ldr	r2, [r4, #0]
   a4ee0:	9b03      	ldr	r3, [sp, #12]
   a4ee2:	4621      	mov	r1, r4
   a4ee4:	441a      	add	r2, r3
   a4ee6:	6022      	str	r2, [r4, #0]
   a4ee8:	9802      	ldr	r0, [sp, #8]
   a4eea:	f7ff fcbd 	bl	a4868 <_fflush_r>
   a4eee:	9b03      	ldr	r3, [sp, #12]
   a4ef0:	2800      	cmp	r0, #0
   a4ef2:	f47f af70 	bne.w	a4dd6 <__sfvwrite_r+0x19e>
   a4ef6:	461f      	mov	r7, r3
   a4ef8:	e799      	b.n	a4e2e <__sfvwrite_r+0x1f6>
   a4efa:	9802      	ldr	r0, [sp, #8]
   a4efc:	f000 fc1e 	bl	a573c <_realloc_r>
   a4f00:	4683      	mov	fp, r0
   a4f02:	2800      	cmp	r0, #0
   a4f04:	f47f af19 	bne.w	a4d3a <__sfvwrite_r+0x102>
   a4f08:	9d02      	ldr	r5, [sp, #8]
   a4f0a:	6921      	ldr	r1, [r4, #16]
   a4f0c:	4628      	mov	r0, r5
   a4f0e:	f7ff fdab 	bl	a4a68 <_free_r>
   a4f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a4f16:	220c      	movs	r2, #12
   a4f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   a4f1c:	602a      	str	r2, [r5, #0]
   a4f1e:	e75c      	b.n	a4dda <__sfvwrite_r+0x1a2>
   a4f20:	2301      	movs	r3, #1
   a4f22:	f109 0801 	add.w	r8, r9, #1
   a4f26:	9301      	str	r3, [sp, #4]
   a4f28:	e769      	b.n	a4dfe <__sfvwrite_r+0x1c6>
   a4f2a:	f04f 30ff 	mov.w	r0, #4294967295
   a4f2e:	e6b6      	b.n	a4c9e <__sfvwrite_r+0x66>
   a4f30:	9a02      	ldr	r2, [sp, #8]
   a4f32:	230c      	movs	r3, #12
   a4f34:	6013      	str	r3, [r2, #0]
   a4f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a4f3a:	e74e      	b.n	a4dda <__sfvwrite_r+0x1a2>
   a4f3c:	7ffffc00 	.word	0x7ffffc00

000a4f40 <_fwalk_reent>:
   a4f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   a4f44:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   a4f48:	d01e      	beq.n	a4f88 <_fwalk_reent+0x48>
   a4f4a:	4688      	mov	r8, r1
   a4f4c:	4607      	mov	r7, r0
   a4f4e:	f04f 0900 	mov.w	r9, #0
   a4f52:	6875      	ldr	r5, [r6, #4]
   a4f54:	68b4      	ldr	r4, [r6, #8]
   a4f56:	3d01      	subs	r5, #1
   a4f58:	d410      	bmi.n	a4f7c <_fwalk_reent+0x3c>
   a4f5a:	89a3      	ldrh	r3, [r4, #12]
   a4f5c:	3d01      	subs	r5, #1
   a4f5e:	2b01      	cmp	r3, #1
   a4f60:	d908      	bls.n	a4f74 <_fwalk_reent+0x34>
   a4f62:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   a4f66:	3301      	adds	r3, #1
   a4f68:	d004      	beq.n	a4f74 <_fwalk_reent+0x34>
   a4f6a:	4621      	mov	r1, r4
   a4f6c:	4638      	mov	r0, r7
   a4f6e:	47c0      	blx	r8
   a4f70:	ea49 0900 	orr.w	r9, r9, r0
   a4f74:	1c6b      	adds	r3, r5, #1
   a4f76:	f104 0468 	add.w	r4, r4, #104	; 0x68
   a4f7a:	d1ee      	bne.n	a4f5a <_fwalk_reent+0x1a>
   a4f7c:	6836      	ldr	r6, [r6, #0]
   a4f7e:	2e00      	cmp	r6, #0
   a4f80:	d1e7      	bne.n	a4f52 <_fwalk_reent+0x12>
   a4f82:	4648      	mov	r0, r9
   a4f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a4f88:	46b1      	mov	r9, r6
   a4f8a:	4648      	mov	r0, r9
   a4f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000a4f90 <__swhatbuf_r>:
   a4f90:	b570      	push	{r4, r5, r6, lr}
   a4f92:	460e      	mov	r6, r1
   a4f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a4f98:	b090      	sub	sp, #64	; 0x40
   a4f9a:	2900      	cmp	r1, #0
   a4f9c:	4614      	mov	r4, r2
   a4f9e:	461d      	mov	r5, r3
   a4fa0:	db14      	blt.n	a4fcc <__swhatbuf_r+0x3c>
   a4fa2:	aa01      	add	r2, sp, #4
   a4fa4:	f000 fec6 	bl	a5d34 <_fstat_r>
   a4fa8:	2800      	cmp	r0, #0
   a4faa:	db0f      	blt.n	a4fcc <__swhatbuf_r+0x3c>
   a4fac:	9a02      	ldr	r2, [sp, #8]
   a4fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
   a4fb2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   a4fb6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   a4fba:	fab2 f282 	clz	r2, r2
   a4fbe:	f44f 6000 	mov.w	r0, #2048	; 0x800
   a4fc2:	0952      	lsrs	r2, r2, #5
   a4fc4:	602a      	str	r2, [r5, #0]
   a4fc6:	6023      	str	r3, [r4, #0]
   a4fc8:	b010      	add	sp, #64	; 0x40
   a4fca:	bd70      	pop	{r4, r5, r6, pc}
   a4fcc:	89b2      	ldrh	r2, [r6, #12]
   a4fce:	2000      	movs	r0, #0
   a4fd0:	f002 0280 	and.w	r2, r2, #128	; 0x80
   a4fd4:	b292      	uxth	r2, r2
   a4fd6:	6028      	str	r0, [r5, #0]
   a4fd8:	b11a      	cbz	r2, a4fe2 <__swhatbuf_r+0x52>
   a4fda:	2340      	movs	r3, #64	; 0x40
   a4fdc:	6023      	str	r3, [r4, #0]
   a4fde:	b010      	add	sp, #64	; 0x40
   a4fe0:	bd70      	pop	{r4, r5, r6, pc}
   a4fe2:	4610      	mov	r0, r2
   a4fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   a4fe8:	6023      	str	r3, [r4, #0]
   a4fea:	b010      	add	sp, #64	; 0x40
   a4fec:	bd70      	pop	{r4, r5, r6, pc}
   a4fee:	bf00      	nop

000a4ff0 <__smakebuf_r>:
   a4ff0:	898a      	ldrh	r2, [r1, #12]
   a4ff2:	460b      	mov	r3, r1
   a4ff4:	0792      	lsls	r2, r2, #30
   a4ff6:	d506      	bpl.n	a5006 <__smakebuf_r+0x16>
   a4ff8:	f101 0243 	add.w	r2, r1, #67	; 0x43
   a4ffc:	2101      	movs	r1, #1
   a4ffe:	601a      	str	r2, [r3, #0]
   a5000:	611a      	str	r2, [r3, #16]
   a5002:	6159      	str	r1, [r3, #20]
   a5004:	4770      	bx	lr
   a5006:	b5f0      	push	{r4, r5, r6, r7, lr}
   a5008:	b083      	sub	sp, #12
   a500a:	ab01      	add	r3, sp, #4
   a500c:	466a      	mov	r2, sp
   a500e:	460c      	mov	r4, r1
   a5010:	4605      	mov	r5, r0
   a5012:	f7ff ffbd 	bl	a4f90 <__swhatbuf_r>
   a5016:	9900      	ldr	r1, [sp, #0]
   a5018:	4606      	mov	r6, r0
   a501a:	4628      	mov	r0, r5
   a501c:	f000 f834 	bl	a5088 <_malloc_r>
   a5020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a5024:	b1d0      	cbz	r0, a505c <__smakebuf_r+0x6c>
   a5026:	e89d 0006 	ldmia.w	sp, {r1, r2}
   a502a:	4f12      	ldr	r7, [pc, #72]	; (a5074 <__smakebuf_r+0x84>)
   a502c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a5030:	63ef      	str	r7, [r5, #60]	; 0x3c
   a5032:	81a3      	strh	r3, [r4, #12]
   a5034:	6020      	str	r0, [r4, #0]
   a5036:	6120      	str	r0, [r4, #16]
   a5038:	6161      	str	r1, [r4, #20]
   a503a:	b91a      	cbnz	r2, a5044 <__smakebuf_r+0x54>
   a503c:	4333      	orrs	r3, r6
   a503e:	81a3      	strh	r3, [r4, #12]
   a5040:	b003      	add	sp, #12
   a5042:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a5044:	4628      	mov	r0, r5
   a5046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a504a:	f000 fe87 	bl	a5d5c <_isatty_r>
   a504e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a5052:	2800      	cmp	r0, #0
   a5054:	d0f2      	beq.n	a503c <__smakebuf_r+0x4c>
   a5056:	f043 0301 	orr.w	r3, r3, #1
   a505a:	e7ef      	b.n	a503c <__smakebuf_r+0x4c>
   a505c:	059a      	lsls	r2, r3, #22
   a505e:	d4ef      	bmi.n	a5040 <__smakebuf_r+0x50>
   a5060:	f104 0243 	add.w	r2, r4, #67	; 0x43
   a5064:	f043 0302 	orr.w	r3, r3, #2
   a5068:	2101      	movs	r1, #1
   a506a:	81a3      	strh	r3, [r4, #12]
   a506c:	6022      	str	r2, [r4, #0]
   a506e:	6122      	str	r2, [r4, #16]
   a5070:	6161      	str	r1, [r4, #20]
   a5072:	e7e5      	b.n	a5040 <__smakebuf_r+0x50>
   a5074:	000a4895 	.word	0x000a4895

000a5078 <malloc>:
   a5078:	4b02      	ldr	r3, [pc, #8]	; (a5084 <malloc+0xc>)
   a507a:	4601      	mov	r1, r0
   a507c:	6818      	ldr	r0, [r3, #0]
   a507e:	f000 b803 	b.w	a5088 <_malloc_r>
   a5082:	bf00      	nop
   a5084:	200710c8 	.word	0x200710c8

000a5088 <_malloc_r>:
   a5088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a508c:	f101 050b 	add.w	r5, r1, #11
   a5090:	2d16      	cmp	r5, #22
   a5092:	b083      	sub	sp, #12
   a5094:	4606      	mov	r6, r0
   a5096:	f240 80a0 	bls.w	a51da <_malloc_r+0x152>
   a509a:	f035 0507 	bics.w	r5, r5, #7
   a509e:	f100 80c0 	bmi.w	a5222 <_malloc_r+0x19a>
   a50a2:	42a9      	cmp	r1, r5
   a50a4:	f200 80bd 	bhi.w	a5222 <_malloc_r+0x19a>
   a50a8:	f000 fb44 	bl	a5734 <__malloc_lock>
   a50ac:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   a50b0:	f0c0 8290 	bcc.w	a55d4 <_malloc_r+0x54c>
   a50b4:	0a6b      	lsrs	r3, r5, #9
   a50b6:	f000 80bb 	beq.w	a5230 <_malloc_r+0x1a8>
   a50ba:	2b04      	cmp	r3, #4
   a50bc:	f200 8177 	bhi.w	a53ae <_malloc_r+0x326>
   a50c0:	09a8      	lsrs	r0, r5, #6
   a50c2:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   a50c6:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a50ca:	3038      	adds	r0, #56	; 0x38
   a50cc:	4fbe      	ldr	r7, [pc, #760]	; (a53c8 <_malloc_r+0x340>)
   a50ce:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   a50d2:	684c      	ldr	r4, [r1, #4]
   a50d4:	3908      	subs	r1, #8
   a50d6:	42a1      	cmp	r1, r4
   a50d8:	d107      	bne.n	a50ea <_malloc_r+0x62>
   a50da:	e0ae      	b.n	a523a <_malloc_r+0x1b2>
   a50dc:	2a00      	cmp	r2, #0
   a50de:	f280 80ae 	bge.w	a523e <_malloc_r+0x1b6>
   a50e2:	68e4      	ldr	r4, [r4, #12]
   a50e4:	42a1      	cmp	r1, r4
   a50e6:	f000 80a8 	beq.w	a523a <_malloc_r+0x1b2>
   a50ea:	6863      	ldr	r3, [r4, #4]
   a50ec:	f023 0303 	bic.w	r3, r3, #3
   a50f0:	1b5a      	subs	r2, r3, r5
   a50f2:	2a0f      	cmp	r2, #15
   a50f4:	ddf2      	ble.n	a50dc <_malloc_r+0x54>
   a50f6:	49b4      	ldr	r1, [pc, #720]	; (a53c8 <_malloc_r+0x340>)
   a50f8:	693c      	ldr	r4, [r7, #16]
   a50fa:	f101 0e08 	add.w	lr, r1, #8
   a50fe:	4574      	cmp	r4, lr
   a5100:	f000 81a8 	beq.w	a5454 <_malloc_r+0x3cc>
   a5104:	6863      	ldr	r3, [r4, #4]
   a5106:	f023 0303 	bic.w	r3, r3, #3
   a510a:	1b5a      	subs	r2, r3, r5
   a510c:	2a0f      	cmp	r2, #15
   a510e:	f300 818e 	bgt.w	a542e <_malloc_r+0x3a6>
   a5112:	2a00      	cmp	r2, #0
   a5114:	f8c1 e014 	str.w	lr, [r1, #20]
   a5118:	f8c1 e010 	str.w	lr, [r1, #16]
   a511c:	f280 8093 	bge.w	a5246 <_malloc_r+0x1be>
   a5120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   a5124:	f080 815c 	bcs.w	a53e0 <_malloc_r+0x358>
   a5128:	08db      	lsrs	r3, r3, #3
   a512a:	684a      	ldr	r2, [r1, #4]
   a512c:	ea4f 09a3 	mov.w	r9, r3, asr #2
   a5130:	f04f 0c01 	mov.w	ip, #1
   a5134:	3301      	adds	r3, #1
   a5136:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   a513a:	fa0c f909 	lsl.w	r9, ip, r9
   a513e:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   a5142:	ea49 0202 	orr.w	r2, r9, r2
   a5146:	f1ac 0c08 	sub.w	ip, ip, #8
   a514a:	f8c4 c00c 	str.w	ip, [r4, #12]
   a514e:	f8c4 8008 	str.w	r8, [r4, #8]
   a5152:	604a      	str	r2, [r1, #4]
   a5154:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   a5158:	f8c8 400c 	str.w	r4, [r8, #12]
   a515c:	1083      	asrs	r3, r0, #2
   a515e:	2401      	movs	r4, #1
   a5160:	409c      	lsls	r4, r3
   a5162:	4294      	cmp	r4, r2
   a5164:	d87c      	bhi.n	a5260 <_malloc_r+0x1d8>
   a5166:	4214      	tst	r4, r2
   a5168:	d106      	bne.n	a5178 <_malloc_r+0xf0>
   a516a:	f020 0003 	bic.w	r0, r0, #3
   a516e:	0064      	lsls	r4, r4, #1
   a5170:	4214      	tst	r4, r2
   a5172:	f100 0004 	add.w	r0, r0, #4
   a5176:	d0fa      	beq.n	a516e <_malloc_r+0xe6>
   a5178:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   a517c:	46cc      	mov	ip, r9
   a517e:	4680      	mov	r8, r0
   a5180:	f8dc 100c 	ldr.w	r1, [ip, #12]
   a5184:	458c      	cmp	ip, r1
   a5186:	d107      	bne.n	a5198 <_malloc_r+0x110>
   a5188:	e166      	b.n	a5458 <_malloc_r+0x3d0>
   a518a:	2a00      	cmp	r2, #0
   a518c:	f280 8174 	bge.w	a5478 <_malloc_r+0x3f0>
   a5190:	68c9      	ldr	r1, [r1, #12]
   a5192:	458c      	cmp	ip, r1
   a5194:	f000 8160 	beq.w	a5458 <_malloc_r+0x3d0>
   a5198:	684b      	ldr	r3, [r1, #4]
   a519a:	f023 0303 	bic.w	r3, r3, #3
   a519e:	1b5a      	subs	r2, r3, r5
   a51a0:	2a0f      	cmp	r2, #15
   a51a2:	ddf2      	ble.n	a518a <_malloc_r+0x102>
   a51a4:	460c      	mov	r4, r1
   a51a6:	68cb      	ldr	r3, [r1, #12]
   a51a8:	f854 cf08 	ldr.w	ip, [r4, #8]!
   a51ac:	f045 0801 	orr.w	r8, r5, #1
   a51b0:	f8c1 8004 	str.w	r8, [r1, #4]
   a51b4:	440d      	add	r5, r1
   a51b6:	f042 0101 	orr.w	r1, r2, #1
   a51ba:	f8cc 300c 	str.w	r3, [ip, #12]
   a51be:	4630      	mov	r0, r6
   a51c0:	f8c3 c008 	str.w	ip, [r3, #8]
   a51c4:	617d      	str	r5, [r7, #20]
   a51c6:	613d      	str	r5, [r7, #16]
   a51c8:	f8c5 e00c 	str.w	lr, [r5, #12]
   a51cc:	f8c5 e008 	str.w	lr, [r5, #8]
   a51d0:	6069      	str	r1, [r5, #4]
   a51d2:	50aa      	str	r2, [r5, r2]
   a51d4:	f000 fab0 	bl	a5738 <__malloc_unlock>
   a51d8:	e01f      	b.n	a521a <_malloc_r+0x192>
   a51da:	2910      	cmp	r1, #16
   a51dc:	d821      	bhi.n	a5222 <_malloc_r+0x19a>
   a51de:	f000 faa9 	bl	a5734 <__malloc_lock>
   a51e2:	2510      	movs	r5, #16
   a51e4:	2306      	movs	r3, #6
   a51e6:	2002      	movs	r0, #2
   a51e8:	4f77      	ldr	r7, [pc, #476]	; (a53c8 <_malloc_r+0x340>)
   a51ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   a51ee:	685c      	ldr	r4, [r3, #4]
   a51f0:	f1a3 0208 	sub.w	r2, r3, #8
   a51f4:	4294      	cmp	r4, r2
   a51f6:	f000 8138 	beq.w	a546a <_malloc_r+0x3e2>
   a51fa:	6863      	ldr	r3, [r4, #4]
   a51fc:	68e1      	ldr	r1, [r4, #12]
   a51fe:	f023 0303 	bic.w	r3, r3, #3
   a5202:	4423      	add	r3, r4
   a5204:	685a      	ldr	r2, [r3, #4]
   a5206:	68a5      	ldr	r5, [r4, #8]
   a5208:	f042 0201 	orr.w	r2, r2, #1
   a520c:	60e9      	str	r1, [r5, #12]
   a520e:	4630      	mov	r0, r6
   a5210:	608d      	str	r5, [r1, #8]
   a5212:	605a      	str	r2, [r3, #4]
   a5214:	f000 fa90 	bl	a5738 <__malloc_unlock>
   a5218:	3408      	adds	r4, #8
   a521a:	4620      	mov	r0, r4
   a521c:	b003      	add	sp, #12
   a521e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a5222:	2400      	movs	r4, #0
   a5224:	4620      	mov	r0, r4
   a5226:	230c      	movs	r3, #12
   a5228:	6033      	str	r3, [r6, #0]
   a522a:	b003      	add	sp, #12
   a522c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a5230:	2180      	movs	r1, #128	; 0x80
   a5232:	f04f 0e40 	mov.w	lr, #64	; 0x40
   a5236:	203f      	movs	r0, #63	; 0x3f
   a5238:	e748      	b.n	a50cc <_malloc_r+0x44>
   a523a:	4670      	mov	r0, lr
   a523c:	e75b      	b.n	a50f6 <_malloc_r+0x6e>
   a523e:	4423      	add	r3, r4
   a5240:	685a      	ldr	r2, [r3, #4]
   a5242:	68e1      	ldr	r1, [r4, #12]
   a5244:	e7df      	b.n	a5206 <_malloc_r+0x17e>
   a5246:	4423      	add	r3, r4
   a5248:	685a      	ldr	r2, [r3, #4]
   a524a:	4630      	mov	r0, r6
   a524c:	f042 0201 	orr.w	r2, r2, #1
   a5250:	605a      	str	r2, [r3, #4]
   a5252:	3408      	adds	r4, #8
   a5254:	f000 fa70 	bl	a5738 <__malloc_unlock>
   a5258:	4620      	mov	r0, r4
   a525a:	b003      	add	sp, #12
   a525c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a5260:	68bc      	ldr	r4, [r7, #8]
   a5262:	6863      	ldr	r3, [r4, #4]
   a5264:	f023 0803 	bic.w	r8, r3, #3
   a5268:	45a8      	cmp	r8, r5
   a526a:	d304      	bcc.n	a5276 <_malloc_r+0x1ee>
   a526c:	ebc5 0308 	rsb	r3, r5, r8
   a5270:	2b0f      	cmp	r3, #15
   a5272:	f300 808c 	bgt.w	a538e <_malloc_r+0x306>
   a5276:	4b55      	ldr	r3, [pc, #340]	; (a53cc <_malloc_r+0x344>)
   a5278:	f8df 9160 	ldr.w	r9, [pc, #352]	; a53dc <_malloc_r+0x354>
   a527c:	681a      	ldr	r2, [r3, #0]
   a527e:	f8d9 3000 	ldr.w	r3, [r9]
   a5282:	442a      	add	r2, r5
   a5284:	3301      	adds	r3, #1
   a5286:	eb04 0a08 	add.w	sl, r4, r8
   a528a:	f000 8160 	beq.w	a554e <_malloc_r+0x4c6>
   a528e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   a5292:	320f      	adds	r2, #15
   a5294:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   a5298:	f022 020f 	bic.w	r2, r2, #15
   a529c:	4611      	mov	r1, r2
   a529e:	4630      	mov	r0, r6
   a52a0:	9201      	str	r2, [sp, #4]
   a52a2:	f000 fc35 	bl	a5b10 <_sbrk_r>
   a52a6:	f1b0 3fff 	cmp.w	r0, #4294967295
   a52aa:	4683      	mov	fp, r0
   a52ac:	9a01      	ldr	r2, [sp, #4]
   a52ae:	f000 8158 	beq.w	a5562 <_malloc_r+0x4da>
   a52b2:	4582      	cmp	sl, r0
   a52b4:	f200 80fc 	bhi.w	a54b0 <_malloc_r+0x428>
   a52b8:	4b45      	ldr	r3, [pc, #276]	; (a53d0 <_malloc_r+0x348>)
   a52ba:	45da      	cmp	sl, fp
   a52bc:	6819      	ldr	r1, [r3, #0]
   a52be:	4411      	add	r1, r2
   a52c0:	6019      	str	r1, [r3, #0]
   a52c2:	f000 8153 	beq.w	a556c <_malloc_r+0x4e4>
   a52c6:	f8d9 0000 	ldr.w	r0, [r9]
   a52ca:	f8df e110 	ldr.w	lr, [pc, #272]	; a53dc <_malloc_r+0x354>
   a52ce:	3001      	adds	r0, #1
   a52d0:	bf1b      	ittet	ne
   a52d2:	ebca 0a0b 	rsbne	sl, sl, fp
   a52d6:	4451      	addne	r1, sl
   a52d8:	f8ce b000 	streq.w	fp, [lr]
   a52dc:	6019      	strne	r1, [r3, #0]
   a52de:	f01b 0107 	ands.w	r1, fp, #7
   a52e2:	f000 8117 	beq.w	a5514 <_malloc_r+0x48c>
   a52e6:	f1c1 0008 	rsb	r0, r1, #8
   a52ea:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   a52ee:	4483      	add	fp, r0
   a52f0:	3108      	adds	r1, #8
   a52f2:	445a      	add	r2, fp
   a52f4:	f3c2 020b 	ubfx	r2, r2, #0, #12
   a52f8:	ebc2 0901 	rsb	r9, r2, r1
   a52fc:	4649      	mov	r1, r9
   a52fe:	4630      	mov	r0, r6
   a5300:	9301      	str	r3, [sp, #4]
   a5302:	f000 fc05 	bl	a5b10 <_sbrk_r>
   a5306:	1c43      	adds	r3, r0, #1
   a5308:	9b01      	ldr	r3, [sp, #4]
   a530a:	f000 813f 	beq.w	a558c <_malloc_r+0x504>
   a530e:	ebcb 0200 	rsb	r2, fp, r0
   a5312:	444a      	add	r2, r9
   a5314:	f042 0201 	orr.w	r2, r2, #1
   a5318:	6819      	ldr	r1, [r3, #0]
   a531a:	42bc      	cmp	r4, r7
   a531c:	4449      	add	r1, r9
   a531e:	f8c7 b008 	str.w	fp, [r7, #8]
   a5322:	6019      	str	r1, [r3, #0]
   a5324:	f8cb 2004 	str.w	r2, [fp, #4]
   a5328:	f8df 90a4 	ldr.w	r9, [pc, #164]	; a53d0 <_malloc_r+0x348>
   a532c:	d016      	beq.n	a535c <_malloc_r+0x2d4>
   a532e:	f1b8 0f0f 	cmp.w	r8, #15
   a5332:	f240 80fd 	bls.w	a5530 <_malloc_r+0x4a8>
   a5336:	6862      	ldr	r2, [r4, #4]
   a5338:	f1a8 030c 	sub.w	r3, r8, #12
   a533c:	f023 0307 	bic.w	r3, r3, #7
   a5340:	f002 0201 	and.w	r2, r2, #1
   a5344:	18e0      	adds	r0, r4, r3
   a5346:	f04f 0e05 	mov.w	lr, #5
   a534a:	431a      	orrs	r2, r3
   a534c:	2b0f      	cmp	r3, #15
   a534e:	6062      	str	r2, [r4, #4]
   a5350:	f8c0 e004 	str.w	lr, [r0, #4]
   a5354:	f8c0 e008 	str.w	lr, [r0, #8]
   a5358:	f200 811c 	bhi.w	a5594 <_malloc_r+0x50c>
   a535c:	4b1d      	ldr	r3, [pc, #116]	; (a53d4 <_malloc_r+0x34c>)
   a535e:	68bc      	ldr	r4, [r7, #8]
   a5360:	681a      	ldr	r2, [r3, #0]
   a5362:	4291      	cmp	r1, r2
   a5364:	bf88      	it	hi
   a5366:	6019      	strhi	r1, [r3, #0]
   a5368:	4b1b      	ldr	r3, [pc, #108]	; (a53d8 <_malloc_r+0x350>)
   a536a:	681a      	ldr	r2, [r3, #0]
   a536c:	4291      	cmp	r1, r2
   a536e:	6862      	ldr	r2, [r4, #4]
   a5370:	bf88      	it	hi
   a5372:	6019      	strhi	r1, [r3, #0]
   a5374:	f022 0203 	bic.w	r2, r2, #3
   a5378:	4295      	cmp	r5, r2
   a537a:	eba2 0305 	sub.w	r3, r2, r5
   a537e:	d801      	bhi.n	a5384 <_malloc_r+0x2fc>
   a5380:	2b0f      	cmp	r3, #15
   a5382:	dc04      	bgt.n	a538e <_malloc_r+0x306>
   a5384:	4630      	mov	r0, r6
   a5386:	f000 f9d7 	bl	a5738 <__malloc_unlock>
   a538a:	2400      	movs	r4, #0
   a538c:	e745      	b.n	a521a <_malloc_r+0x192>
   a538e:	f045 0201 	orr.w	r2, r5, #1
   a5392:	f043 0301 	orr.w	r3, r3, #1
   a5396:	4425      	add	r5, r4
   a5398:	6062      	str	r2, [r4, #4]
   a539a:	4630      	mov	r0, r6
   a539c:	60bd      	str	r5, [r7, #8]
   a539e:	3408      	adds	r4, #8
   a53a0:	606b      	str	r3, [r5, #4]
   a53a2:	f000 f9c9 	bl	a5738 <__malloc_unlock>
   a53a6:	4620      	mov	r0, r4
   a53a8:	b003      	add	sp, #12
   a53aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a53ae:	2b14      	cmp	r3, #20
   a53b0:	d971      	bls.n	a5496 <_malloc_r+0x40e>
   a53b2:	2b54      	cmp	r3, #84	; 0x54
   a53b4:	f200 80a4 	bhi.w	a5500 <_malloc_r+0x478>
   a53b8:	0b28      	lsrs	r0, r5, #12
   a53ba:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   a53be:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a53c2:	306e      	adds	r0, #110	; 0x6e
   a53c4:	e682      	b.n	a50cc <_malloc_r+0x44>
   a53c6:	bf00      	nop
   a53c8:	200710cc 	.word	0x200710cc
   a53cc:	200728b4 	.word	0x200728b4
   a53d0:	200728b8 	.word	0x200728b8
   a53d4:	200728b0 	.word	0x200728b0
   a53d8:	200728ac 	.word	0x200728ac
   a53dc:	200714d8 	.word	0x200714d8
   a53e0:	0a5a      	lsrs	r2, r3, #9
   a53e2:	2a04      	cmp	r2, #4
   a53e4:	d95e      	bls.n	a54a4 <_malloc_r+0x41c>
   a53e6:	2a14      	cmp	r2, #20
   a53e8:	f200 80b3 	bhi.w	a5552 <_malloc_r+0x4ca>
   a53ec:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   a53f0:	0049      	lsls	r1, r1, #1
   a53f2:	325b      	adds	r2, #91	; 0x5b
   a53f4:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   a53f8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   a53fc:	f1ac 0c08 	sub.w	ip, ip, #8
   a5400:	458c      	cmp	ip, r1
   a5402:	f8df 81d8 	ldr.w	r8, [pc, #472]	; a55dc <_malloc_r+0x554>
   a5406:	f000 8088 	beq.w	a551a <_malloc_r+0x492>
   a540a:	684a      	ldr	r2, [r1, #4]
   a540c:	f022 0203 	bic.w	r2, r2, #3
   a5410:	4293      	cmp	r3, r2
   a5412:	d202      	bcs.n	a541a <_malloc_r+0x392>
   a5414:	6889      	ldr	r1, [r1, #8]
   a5416:	458c      	cmp	ip, r1
   a5418:	d1f7      	bne.n	a540a <_malloc_r+0x382>
   a541a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   a541e:	687a      	ldr	r2, [r7, #4]
   a5420:	f8c4 c00c 	str.w	ip, [r4, #12]
   a5424:	60a1      	str	r1, [r4, #8]
   a5426:	f8cc 4008 	str.w	r4, [ip, #8]
   a542a:	60cc      	str	r4, [r1, #12]
   a542c:	e696      	b.n	a515c <_malloc_r+0xd4>
   a542e:	f045 0701 	orr.w	r7, r5, #1
   a5432:	f042 0301 	orr.w	r3, r2, #1
   a5436:	4425      	add	r5, r4
   a5438:	6067      	str	r7, [r4, #4]
   a543a:	4630      	mov	r0, r6
   a543c:	614d      	str	r5, [r1, #20]
   a543e:	610d      	str	r5, [r1, #16]
   a5440:	f8c5 e00c 	str.w	lr, [r5, #12]
   a5444:	f8c5 e008 	str.w	lr, [r5, #8]
   a5448:	606b      	str	r3, [r5, #4]
   a544a:	50aa      	str	r2, [r5, r2]
   a544c:	3408      	adds	r4, #8
   a544e:	f000 f973 	bl	a5738 <__malloc_unlock>
   a5452:	e6e2      	b.n	a521a <_malloc_r+0x192>
   a5454:	684a      	ldr	r2, [r1, #4]
   a5456:	e681      	b.n	a515c <_malloc_r+0xd4>
   a5458:	f108 0801 	add.w	r8, r8, #1
   a545c:	f018 0f03 	tst.w	r8, #3
   a5460:	f10c 0c08 	add.w	ip, ip, #8
   a5464:	f47f ae8c 	bne.w	a5180 <_malloc_r+0xf8>
   a5468:	e030      	b.n	a54cc <_malloc_r+0x444>
   a546a:	68dc      	ldr	r4, [r3, #12]
   a546c:	42a3      	cmp	r3, r4
   a546e:	bf08      	it	eq
   a5470:	3002      	addeq	r0, #2
   a5472:	f43f ae40 	beq.w	a50f6 <_malloc_r+0x6e>
   a5476:	e6c0      	b.n	a51fa <_malloc_r+0x172>
   a5478:	460c      	mov	r4, r1
   a547a:	440b      	add	r3, r1
   a547c:	685a      	ldr	r2, [r3, #4]
   a547e:	68c9      	ldr	r1, [r1, #12]
   a5480:	f854 5f08 	ldr.w	r5, [r4, #8]!
   a5484:	f042 0201 	orr.w	r2, r2, #1
   a5488:	605a      	str	r2, [r3, #4]
   a548a:	4630      	mov	r0, r6
   a548c:	60e9      	str	r1, [r5, #12]
   a548e:	608d      	str	r5, [r1, #8]
   a5490:	f000 f952 	bl	a5738 <__malloc_unlock>
   a5494:	e6c1      	b.n	a521a <_malloc_r+0x192>
   a5496:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   a549a:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   a549e:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a54a2:	e613      	b.n	a50cc <_malloc_r+0x44>
   a54a4:	099a      	lsrs	r2, r3, #6
   a54a6:	f102 0139 	add.w	r1, r2, #57	; 0x39
   a54aa:	0049      	lsls	r1, r1, #1
   a54ac:	3238      	adds	r2, #56	; 0x38
   a54ae:	e7a1      	b.n	a53f4 <_malloc_r+0x36c>
   a54b0:	42bc      	cmp	r4, r7
   a54b2:	4b4a      	ldr	r3, [pc, #296]	; (a55dc <_malloc_r+0x554>)
   a54b4:	f43f af00 	beq.w	a52b8 <_malloc_r+0x230>
   a54b8:	689c      	ldr	r4, [r3, #8]
   a54ba:	6862      	ldr	r2, [r4, #4]
   a54bc:	f022 0203 	bic.w	r2, r2, #3
   a54c0:	e75a      	b.n	a5378 <_malloc_r+0x2f0>
   a54c2:	f859 3908 	ldr.w	r3, [r9], #-8
   a54c6:	4599      	cmp	r9, r3
   a54c8:	f040 8082 	bne.w	a55d0 <_malloc_r+0x548>
   a54cc:	f010 0f03 	tst.w	r0, #3
   a54d0:	f100 30ff 	add.w	r0, r0, #4294967295
   a54d4:	d1f5      	bne.n	a54c2 <_malloc_r+0x43a>
   a54d6:	687b      	ldr	r3, [r7, #4]
   a54d8:	ea23 0304 	bic.w	r3, r3, r4
   a54dc:	607b      	str	r3, [r7, #4]
   a54de:	0064      	lsls	r4, r4, #1
   a54e0:	429c      	cmp	r4, r3
   a54e2:	f63f aebd 	bhi.w	a5260 <_malloc_r+0x1d8>
   a54e6:	2c00      	cmp	r4, #0
   a54e8:	f43f aeba 	beq.w	a5260 <_malloc_r+0x1d8>
   a54ec:	421c      	tst	r4, r3
   a54ee:	4640      	mov	r0, r8
   a54f0:	f47f ae42 	bne.w	a5178 <_malloc_r+0xf0>
   a54f4:	0064      	lsls	r4, r4, #1
   a54f6:	421c      	tst	r4, r3
   a54f8:	f100 0004 	add.w	r0, r0, #4
   a54fc:	d0fa      	beq.n	a54f4 <_malloc_r+0x46c>
   a54fe:	e63b      	b.n	a5178 <_malloc_r+0xf0>
   a5500:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   a5504:	d818      	bhi.n	a5538 <_malloc_r+0x4b0>
   a5506:	0be8      	lsrs	r0, r5, #15
   a5508:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   a550c:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a5510:	3077      	adds	r0, #119	; 0x77
   a5512:	e5db      	b.n	a50cc <_malloc_r+0x44>
   a5514:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   a5518:	e6eb      	b.n	a52f2 <_malloc_r+0x26a>
   a551a:	2101      	movs	r1, #1
   a551c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   a5520:	1092      	asrs	r2, r2, #2
   a5522:	fa01 f202 	lsl.w	r2, r1, r2
   a5526:	431a      	orrs	r2, r3
   a5528:	f8c8 2004 	str.w	r2, [r8, #4]
   a552c:	4661      	mov	r1, ip
   a552e:	e777      	b.n	a5420 <_malloc_r+0x398>
   a5530:	2301      	movs	r3, #1
   a5532:	f8cb 3004 	str.w	r3, [fp, #4]
   a5536:	e725      	b.n	a5384 <_malloc_r+0x2fc>
   a5538:	f240 5254 	movw	r2, #1364	; 0x554
   a553c:	4293      	cmp	r3, r2
   a553e:	d820      	bhi.n	a5582 <_malloc_r+0x4fa>
   a5540:	0ca8      	lsrs	r0, r5, #18
   a5542:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   a5546:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a554a:	307c      	adds	r0, #124	; 0x7c
   a554c:	e5be      	b.n	a50cc <_malloc_r+0x44>
   a554e:	3210      	adds	r2, #16
   a5550:	e6a4      	b.n	a529c <_malloc_r+0x214>
   a5552:	2a54      	cmp	r2, #84	; 0x54
   a5554:	d826      	bhi.n	a55a4 <_malloc_r+0x51c>
   a5556:	0b1a      	lsrs	r2, r3, #12
   a5558:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   a555c:	0049      	lsls	r1, r1, #1
   a555e:	326e      	adds	r2, #110	; 0x6e
   a5560:	e748      	b.n	a53f4 <_malloc_r+0x36c>
   a5562:	68bc      	ldr	r4, [r7, #8]
   a5564:	6862      	ldr	r2, [r4, #4]
   a5566:	f022 0203 	bic.w	r2, r2, #3
   a556a:	e705      	b.n	a5378 <_malloc_r+0x2f0>
   a556c:	f3ca 000b 	ubfx	r0, sl, #0, #12
   a5570:	2800      	cmp	r0, #0
   a5572:	f47f aea8 	bne.w	a52c6 <_malloc_r+0x23e>
   a5576:	4442      	add	r2, r8
   a5578:	68bb      	ldr	r3, [r7, #8]
   a557a:	f042 0201 	orr.w	r2, r2, #1
   a557e:	605a      	str	r2, [r3, #4]
   a5580:	e6ec      	b.n	a535c <_malloc_r+0x2d4>
   a5582:	21fe      	movs	r1, #254	; 0xfe
   a5584:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   a5588:	207e      	movs	r0, #126	; 0x7e
   a558a:	e59f      	b.n	a50cc <_malloc_r+0x44>
   a558c:	2201      	movs	r2, #1
   a558e:	f04f 0900 	mov.w	r9, #0
   a5592:	e6c1      	b.n	a5318 <_malloc_r+0x290>
   a5594:	f104 0108 	add.w	r1, r4, #8
   a5598:	4630      	mov	r0, r6
   a559a:	f7ff fa65 	bl	a4a68 <_free_r>
   a559e:	f8d9 1000 	ldr.w	r1, [r9]
   a55a2:	e6db      	b.n	a535c <_malloc_r+0x2d4>
   a55a4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   a55a8:	d805      	bhi.n	a55b6 <_malloc_r+0x52e>
   a55aa:	0bda      	lsrs	r2, r3, #15
   a55ac:	f102 0178 	add.w	r1, r2, #120	; 0x78
   a55b0:	0049      	lsls	r1, r1, #1
   a55b2:	3277      	adds	r2, #119	; 0x77
   a55b4:	e71e      	b.n	a53f4 <_malloc_r+0x36c>
   a55b6:	f240 5154 	movw	r1, #1364	; 0x554
   a55ba:	428a      	cmp	r2, r1
   a55bc:	d805      	bhi.n	a55ca <_malloc_r+0x542>
   a55be:	0c9a      	lsrs	r2, r3, #18
   a55c0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   a55c4:	0049      	lsls	r1, r1, #1
   a55c6:	327c      	adds	r2, #124	; 0x7c
   a55c8:	e714      	b.n	a53f4 <_malloc_r+0x36c>
   a55ca:	21fe      	movs	r1, #254	; 0xfe
   a55cc:	227e      	movs	r2, #126	; 0x7e
   a55ce:	e711      	b.n	a53f4 <_malloc_r+0x36c>
   a55d0:	687b      	ldr	r3, [r7, #4]
   a55d2:	e784      	b.n	a54de <_malloc_r+0x456>
   a55d4:	08e8      	lsrs	r0, r5, #3
   a55d6:	1c43      	adds	r3, r0, #1
   a55d8:	005b      	lsls	r3, r3, #1
   a55da:	e605      	b.n	a51e8 <_malloc_r+0x160>
   a55dc:	200710cc 	.word	0x200710cc

000a55e0 <memchr>:
   a55e0:	0783      	lsls	r3, r0, #30
   a55e2:	b470      	push	{r4, r5, r6}
   a55e4:	b2cd      	uxtb	r5, r1
   a55e6:	d03d      	beq.n	a5664 <memchr+0x84>
   a55e8:	1e53      	subs	r3, r2, #1
   a55ea:	b302      	cbz	r2, a562e <memchr+0x4e>
   a55ec:	7802      	ldrb	r2, [r0, #0]
   a55ee:	42aa      	cmp	r2, r5
   a55f0:	d01e      	beq.n	a5630 <memchr+0x50>
   a55f2:	1c42      	adds	r2, r0, #1
   a55f4:	e004      	b.n	a5600 <memchr+0x20>
   a55f6:	b1d3      	cbz	r3, a562e <memchr+0x4e>
   a55f8:	7804      	ldrb	r4, [r0, #0]
   a55fa:	3b01      	subs	r3, #1
   a55fc:	42ac      	cmp	r4, r5
   a55fe:	d017      	beq.n	a5630 <memchr+0x50>
   a5600:	f012 0f03 	tst.w	r2, #3
   a5604:	4610      	mov	r0, r2
   a5606:	f102 0201 	add.w	r2, r2, #1
   a560a:	d1f4      	bne.n	a55f6 <memchr+0x16>
   a560c:	2b03      	cmp	r3, #3
   a560e:	d811      	bhi.n	a5634 <memchr+0x54>
   a5610:	b353      	cbz	r3, a5668 <memchr+0x88>
   a5612:	7802      	ldrb	r2, [r0, #0]
   a5614:	42aa      	cmp	r2, r5
   a5616:	d00b      	beq.n	a5630 <memchr+0x50>
   a5618:	4403      	add	r3, r0
   a561a:	1c42      	adds	r2, r0, #1
   a561c:	e002      	b.n	a5624 <memchr+0x44>
   a561e:	7801      	ldrb	r1, [r0, #0]
   a5620:	42a9      	cmp	r1, r5
   a5622:	d005      	beq.n	a5630 <memchr+0x50>
   a5624:	4293      	cmp	r3, r2
   a5626:	4610      	mov	r0, r2
   a5628:	f102 0201 	add.w	r2, r2, #1
   a562c:	d1f7      	bne.n	a561e <memchr+0x3e>
   a562e:	2000      	movs	r0, #0
   a5630:	bc70      	pop	{r4, r5, r6}
   a5632:	4770      	bx	lr
   a5634:	4604      	mov	r4, r0
   a5636:	020e      	lsls	r6, r1, #8
   a5638:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   a563c:	432e      	orrs	r6, r5
   a563e:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   a5642:	6822      	ldr	r2, [r4, #0]
   a5644:	4620      	mov	r0, r4
   a5646:	4072      	eors	r2, r6
   a5648:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   a564c:	ea21 0202 	bic.w	r2, r1, r2
   a5650:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   a5654:	f104 0404 	add.w	r4, r4, #4
   a5658:	d1db      	bne.n	a5612 <memchr+0x32>
   a565a:	3b04      	subs	r3, #4
   a565c:	2b03      	cmp	r3, #3
   a565e:	4620      	mov	r0, r4
   a5660:	d8ef      	bhi.n	a5642 <memchr+0x62>
   a5662:	e7d5      	b.n	a5610 <memchr+0x30>
   a5664:	4613      	mov	r3, r2
   a5666:	e7d1      	b.n	a560c <memchr+0x2c>
   a5668:	4618      	mov	r0, r3
   a566a:	e7e1      	b.n	a5630 <memchr+0x50>

000a566c <memmove>:
   a566c:	4288      	cmp	r0, r1
   a566e:	b5f0      	push	{r4, r5, r6, r7, lr}
   a5670:	d90d      	bls.n	a568e <memmove+0x22>
   a5672:	188b      	adds	r3, r1, r2
   a5674:	4298      	cmp	r0, r3
   a5676:	d20a      	bcs.n	a568e <memmove+0x22>
   a5678:	1881      	adds	r1, r0, r2
   a567a:	2a00      	cmp	r2, #0
   a567c:	d051      	beq.n	a5722 <memmove+0xb6>
   a567e:	1a9a      	subs	r2, r3, r2
   a5680:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   a5684:	4293      	cmp	r3, r2
   a5686:	f801 4d01 	strb.w	r4, [r1, #-1]!
   a568a:	d1f9      	bne.n	a5680 <memmove+0x14>
   a568c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a568e:	2a0f      	cmp	r2, #15
   a5690:	d948      	bls.n	a5724 <memmove+0xb8>
   a5692:	ea41 0300 	orr.w	r3, r1, r0
   a5696:	079b      	lsls	r3, r3, #30
   a5698:	d146      	bne.n	a5728 <memmove+0xbc>
   a569a:	4615      	mov	r5, r2
   a569c:	f100 0410 	add.w	r4, r0, #16
   a56a0:	f101 0310 	add.w	r3, r1, #16
   a56a4:	f853 6c10 	ldr.w	r6, [r3, #-16]
   a56a8:	3d10      	subs	r5, #16
   a56aa:	f844 6c10 	str.w	r6, [r4, #-16]
   a56ae:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   a56b2:	2d0f      	cmp	r5, #15
   a56b4:	f844 6c0c 	str.w	r6, [r4, #-12]
   a56b8:	f853 6c08 	ldr.w	r6, [r3, #-8]
   a56bc:	f104 0410 	add.w	r4, r4, #16
   a56c0:	f844 6c18 	str.w	r6, [r4, #-24]
   a56c4:	f853 6c04 	ldr.w	r6, [r3, #-4]
   a56c8:	f103 0310 	add.w	r3, r3, #16
   a56cc:	f844 6c14 	str.w	r6, [r4, #-20]
   a56d0:	d8e8      	bhi.n	a56a4 <memmove+0x38>
   a56d2:	f1a2 0310 	sub.w	r3, r2, #16
   a56d6:	f023 030f 	bic.w	r3, r3, #15
   a56da:	f002 0e0f 	and.w	lr, r2, #15
   a56de:	3310      	adds	r3, #16
   a56e0:	f1be 0f03 	cmp.w	lr, #3
   a56e4:	4419      	add	r1, r3
   a56e6:	4403      	add	r3, r0
   a56e8:	d921      	bls.n	a572e <memmove+0xc2>
   a56ea:	460e      	mov	r6, r1
   a56ec:	4674      	mov	r4, lr
   a56ee:	1f1d      	subs	r5, r3, #4
   a56f0:	f856 7b04 	ldr.w	r7, [r6], #4
   a56f4:	3c04      	subs	r4, #4
   a56f6:	2c03      	cmp	r4, #3
   a56f8:	f845 7f04 	str.w	r7, [r5, #4]!
   a56fc:	d8f8      	bhi.n	a56f0 <memmove+0x84>
   a56fe:	f1ae 0404 	sub.w	r4, lr, #4
   a5702:	f024 0403 	bic.w	r4, r4, #3
   a5706:	3404      	adds	r4, #4
   a5708:	4423      	add	r3, r4
   a570a:	4421      	add	r1, r4
   a570c:	f002 0203 	and.w	r2, r2, #3
   a5710:	b162      	cbz	r2, a572c <memmove+0xc0>
   a5712:	3b01      	subs	r3, #1
   a5714:	440a      	add	r2, r1
   a5716:	f811 4b01 	ldrb.w	r4, [r1], #1
   a571a:	428a      	cmp	r2, r1
   a571c:	f803 4f01 	strb.w	r4, [r3, #1]!
   a5720:	d1f9      	bne.n	a5716 <memmove+0xaa>
   a5722:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a5724:	4603      	mov	r3, r0
   a5726:	e7f3      	b.n	a5710 <memmove+0xa4>
   a5728:	4603      	mov	r3, r0
   a572a:	e7f2      	b.n	a5712 <memmove+0xa6>
   a572c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a572e:	4672      	mov	r2, lr
   a5730:	e7ee      	b.n	a5710 <memmove+0xa4>
   a5732:	bf00      	nop

000a5734 <__malloc_lock>:
   a5734:	4770      	bx	lr
   a5736:	bf00      	nop

000a5738 <__malloc_unlock>:
   a5738:	4770      	bx	lr
   a573a:	bf00      	nop

000a573c <_realloc_r>:
   a573c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a5740:	4617      	mov	r7, r2
   a5742:	b083      	sub	sp, #12
   a5744:	2900      	cmp	r1, #0
   a5746:	f000 808f 	beq.w	a5868 <_realloc_r+0x12c>
   a574a:	460d      	mov	r5, r1
   a574c:	4681      	mov	r9, r0
   a574e:	f107 040b 	add.w	r4, r7, #11
   a5752:	f7ff ffef 	bl	a5734 <__malloc_lock>
   a5756:	f855 ec04 	ldr.w	lr, [r5, #-4]
   a575a:	2c16      	cmp	r4, #22
   a575c:	f02e 0603 	bic.w	r6, lr, #3
   a5760:	f1a5 0808 	sub.w	r8, r5, #8
   a5764:	d83c      	bhi.n	a57e0 <_realloc_r+0xa4>
   a5766:	2210      	movs	r2, #16
   a5768:	4614      	mov	r4, r2
   a576a:	42a7      	cmp	r7, r4
   a576c:	d83d      	bhi.n	a57ea <_realloc_r+0xae>
   a576e:	4296      	cmp	r6, r2
   a5770:	da42      	bge.n	a57f8 <_realloc_r+0xbc>
   a5772:	4bc6      	ldr	r3, [pc, #792]	; (a5a8c <_realloc_r+0x350>)
   a5774:	eb08 0006 	add.w	r0, r8, r6
   a5778:	6899      	ldr	r1, [r3, #8]
   a577a:	4288      	cmp	r0, r1
   a577c:	6841      	ldr	r1, [r0, #4]
   a577e:	f000 80d7 	beq.w	a5930 <_realloc_r+0x1f4>
   a5782:	f021 0301 	bic.w	r3, r1, #1
   a5786:	4403      	add	r3, r0
   a5788:	685b      	ldr	r3, [r3, #4]
   a578a:	07db      	lsls	r3, r3, #31
   a578c:	d54c      	bpl.n	a5828 <_realloc_r+0xec>
   a578e:	f01e 0f01 	tst.w	lr, #1
   a5792:	f000 809d 	beq.w	a58d0 <_realloc_r+0x194>
   a5796:	4639      	mov	r1, r7
   a5798:	4648      	mov	r0, r9
   a579a:	f7ff fc75 	bl	a5088 <_malloc_r>
   a579e:	4607      	mov	r7, r0
   a57a0:	2800      	cmp	r0, #0
   a57a2:	d03a      	beq.n	a581a <_realloc_r+0xde>
   a57a4:	f855 3c04 	ldr.w	r3, [r5, #-4]
   a57a8:	f1a0 0208 	sub.w	r2, r0, #8
   a57ac:	f023 0301 	bic.w	r3, r3, #1
   a57b0:	4443      	add	r3, r8
   a57b2:	429a      	cmp	r2, r3
   a57b4:	f000 813e 	beq.w	a5a34 <_realloc_r+0x2f8>
   a57b8:	1f32      	subs	r2, r6, #4
   a57ba:	2a24      	cmp	r2, #36	; 0x24
   a57bc:	f200 812b 	bhi.w	a5a16 <_realloc_r+0x2da>
   a57c0:	2a13      	cmp	r2, #19
   a57c2:	f200 80ff 	bhi.w	a59c4 <_realloc_r+0x288>
   a57c6:	4603      	mov	r3, r0
   a57c8:	462a      	mov	r2, r5
   a57ca:	6811      	ldr	r1, [r2, #0]
   a57cc:	6019      	str	r1, [r3, #0]
   a57ce:	6851      	ldr	r1, [r2, #4]
   a57d0:	6059      	str	r1, [r3, #4]
   a57d2:	6892      	ldr	r2, [r2, #8]
   a57d4:	609a      	str	r2, [r3, #8]
   a57d6:	4629      	mov	r1, r5
   a57d8:	4648      	mov	r0, r9
   a57da:	f7ff f945 	bl	a4a68 <_free_r>
   a57de:	e01c      	b.n	a581a <_realloc_r+0xde>
   a57e0:	f024 0407 	bic.w	r4, r4, #7
   a57e4:	2c00      	cmp	r4, #0
   a57e6:	4622      	mov	r2, r4
   a57e8:	dabf      	bge.n	a576a <_realloc_r+0x2e>
   a57ea:	230c      	movs	r3, #12
   a57ec:	2000      	movs	r0, #0
   a57ee:	f8c9 3000 	str.w	r3, [r9]
   a57f2:	b003      	add	sp, #12
   a57f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a57f8:	462f      	mov	r7, r5
   a57fa:	1b33      	subs	r3, r6, r4
   a57fc:	2b0f      	cmp	r3, #15
   a57fe:	f8d8 2004 	ldr.w	r2, [r8, #4]
   a5802:	d81d      	bhi.n	a5840 <_realloc_r+0x104>
   a5804:	f002 0201 	and.w	r2, r2, #1
   a5808:	4332      	orrs	r2, r6
   a580a:	eb08 0106 	add.w	r1, r8, r6
   a580e:	f8c8 2004 	str.w	r2, [r8, #4]
   a5812:	684b      	ldr	r3, [r1, #4]
   a5814:	f043 0301 	orr.w	r3, r3, #1
   a5818:	604b      	str	r3, [r1, #4]
   a581a:	4648      	mov	r0, r9
   a581c:	f7ff ff8c 	bl	a5738 <__malloc_unlock>
   a5820:	4638      	mov	r0, r7
   a5822:	b003      	add	sp, #12
   a5824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a5828:	f021 0103 	bic.w	r1, r1, #3
   a582c:	4431      	add	r1, r6
   a582e:	4291      	cmp	r1, r2
   a5830:	db20      	blt.n	a5874 <_realloc_r+0x138>
   a5832:	68c3      	ldr	r3, [r0, #12]
   a5834:	6882      	ldr	r2, [r0, #8]
   a5836:	462f      	mov	r7, r5
   a5838:	60d3      	str	r3, [r2, #12]
   a583a:	460e      	mov	r6, r1
   a583c:	609a      	str	r2, [r3, #8]
   a583e:	e7dc      	b.n	a57fa <_realloc_r+0xbe>
   a5840:	f002 0201 	and.w	r2, r2, #1
   a5844:	eb08 0104 	add.w	r1, r8, r4
   a5848:	4314      	orrs	r4, r2
   a584a:	f043 0201 	orr.w	r2, r3, #1
   a584e:	f8c8 4004 	str.w	r4, [r8, #4]
   a5852:	440b      	add	r3, r1
   a5854:	604a      	str	r2, [r1, #4]
   a5856:	685a      	ldr	r2, [r3, #4]
   a5858:	3108      	adds	r1, #8
   a585a:	f042 0201 	orr.w	r2, r2, #1
   a585e:	605a      	str	r2, [r3, #4]
   a5860:	4648      	mov	r0, r9
   a5862:	f7ff f901 	bl	a4a68 <_free_r>
   a5866:	e7d8      	b.n	a581a <_realloc_r+0xde>
   a5868:	4611      	mov	r1, r2
   a586a:	b003      	add	sp, #12
   a586c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a5870:	f7ff bc0a 	b.w	a5088 <_malloc_r>
   a5874:	f01e 0f01 	tst.w	lr, #1
   a5878:	d18d      	bne.n	a5796 <_realloc_r+0x5a>
   a587a:	f855 3c08 	ldr.w	r3, [r5, #-8]
   a587e:	ebc3 0a08 	rsb	sl, r3, r8
   a5882:	f8da 3004 	ldr.w	r3, [sl, #4]
   a5886:	f023 0c03 	bic.w	ip, r3, #3
   a588a:	eb01 0e0c 	add.w	lr, r1, ip
   a588e:	4596      	cmp	lr, r2
   a5890:	db26      	blt.n	a58e0 <_realloc_r+0x1a4>
   a5892:	4657      	mov	r7, sl
   a5894:	68c3      	ldr	r3, [r0, #12]
   a5896:	6881      	ldr	r1, [r0, #8]
   a5898:	1f32      	subs	r2, r6, #4
   a589a:	60cb      	str	r3, [r1, #12]
   a589c:	6099      	str	r1, [r3, #8]
   a589e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   a58a2:	f8da 300c 	ldr.w	r3, [sl, #12]
   a58a6:	2a24      	cmp	r2, #36	; 0x24
   a58a8:	60cb      	str	r3, [r1, #12]
   a58aa:	6099      	str	r1, [r3, #8]
   a58ac:	f200 80c9 	bhi.w	a5a42 <_realloc_r+0x306>
   a58b0:	2a13      	cmp	r2, #19
   a58b2:	f240 8092 	bls.w	a59da <_realloc_r+0x29e>
   a58b6:	682b      	ldr	r3, [r5, #0]
   a58b8:	2a1b      	cmp	r2, #27
   a58ba:	f8ca 3008 	str.w	r3, [sl, #8]
   a58be:	686b      	ldr	r3, [r5, #4]
   a58c0:	f8ca 300c 	str.w	r3, [sl, #12]
   a58c4:	f200 80cd 	bhi.w	a5a62 <_realloc_r+0x326>
   a58c8:	3508      	adds	r5, #8
   a58ca:	f10a 0310 	add.w	r3, sl, #16
   a58ce:	e085      	b.n	a59dc <_realloc_r+0x2a0>
   a58d0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   a58d4:	ebc3 0a08 	rsb	sl, r3, r8
   a58d8:	f8da 3004 	ldr.w	r3, [sl, #4]
   a58dc:	f023 0c03 	bic.w	ip, r3, #3
   a58e0:	eb06 030c 	add.w	r3, r6, ip
   a58e4:	4293      	cmp	r3, r2
   a58e6:	f6ff af56 	blt.w	a5796 <_realloc_r+0x5a>
   a58ea:	4657      	mov	r7, sl
   a58ec:	f8da 100c 	ldr.w	r1, [sl, #12]
   a58f0:	f857 0f08 	ldr.w	r0, [r7, #8]!
   a58f4:	1f32      	subs	r2, r6, #4
   a58f6:	2a24      	cmp	r2, #36	; 0x24
   a58f8:	60c1      	str	r1, [r0, #12]
   a58fa:	6088      	str	r0, [r1, #8]
   a58fc:	f200 80aa 	bhi.w	a5a54 <_realloc_r+0x318>
   a5900:	2a13      	cmp	r2, #19
   a5902:	f240 80a5 	bls.w	a5a50 <_realloc_r+0x314>
   a5906:	6829      	ldr	r1, [r5, #0]
   a5908:	2a1b      	cmp	r2, #27
   a590a:	f8ca 1008 	str.w	r1, [sl, #8]
   a590e:	6869      	ldr	r1, [r5, #4]
   a5910:	f8ca 100c 	str.w	r1, [sl, #12]
   a5914:	f200 80bc 	bhi.w	a5a90 <_realloc_r+0x354>
   a5918:	3508      	adds	r5, #8
   a591a:	f10a 0210 	add.w	r2, sl, #16
   a591e:	6829      	ldr	r1, [r5, #0]
   a5920:	461e      	mov	r6, r3
   a5922:	6011      	str	r1, [r2, #0]
   a5924:	6869      	ldr	r1, [r5, #4]
   a5926:	46d0      	mov	r8, sl
   a5928:	6051      	str	r1, [r2, #4]
   a592a:	68ab      	ldr	r3, [r5, #8]
   a592c:	6093      	str	r3, [r2, #8]
   a592e:	e764      	b.n	a57fa <_realloc_r+0xbe>
   a5930:	f021 0b03 	bic.w	fp, r1, #3
   a5934:	f104 0010 	add.w	r0, r4, #16
   a5938:	44b3      	add	fp, r6
   a593a:	4583      	cmp	fp, r0
   a593c:	da57      	bge.n	a59ee <_realloc_r+0x2b2>
   a593e:	f01e 0f01 	tst.w	lr, #1
   a5942:	f47f af28 	bne.w	a5796 <_realloc_r+0x5a>
   a5946:	f855 1c08 	ldr.w	r1, [r5, #-8]
   a594a:	ebc1 0a08 	rsb	sl, r1, r8
   a594e:	f8da 1004 	ldr.w	r1, [sl, #4]
   a5952:	f021 0c03 	bic.w	ip, r1, #3
   a5956:	44e3      	add	fp, ip
   a5958:	4558      	cmp	r0, fp
   a595a:	dcc1      	bgt.n	a58e0 <_realloc_r+0x1a4>
   a595c:	4657      	mov	r7, sl
   a595e:	f8da 100c 	ldr.w	r1, [sl, #12]
   a5962:	f857 0f08 	ldr.w	r0, [r7, #8]!
   a5966:	1f32      	subs	r2, r6, #4
   a5968:	2a24      	cmp	r2, #36	; 0x24
   a596a:	60c1      	str	r1, [r0, #12]
   a596c:	6088      	str	r0, [r1, #8]
   a596e:	f200 80b1 	bhi.w	a5ad4 <_realloc_r+0x398>
   a5972:	2a13      	cmp	r2, #19
   a5974:	f240 80a2 	bls.w	a5abc <_realloc_r+0x380>
   a5978:	6829      	ldr	r1, [r5, #0]
   a597a:	2a1b      	cmp	r2, #27
   a597c:	f8ca 1008 	str.w	r1, [sl, #8]
   a5980:	6869      	ldr	r1, [r5, #4]
   a5982:	f8ca 100c 	str.w	r1, [sl, #12]
   a5986:	f200 80ac 	bhi.w	a5ae2 <_realloc_r+0x3a6>
   a598a:	3508      	adds	r5, #8
   a598c:	f10a 0210 	add.w	r2, sl, #16
   a5990:	6829      	ldr	r1, [r5, #0]
   a5992:	6011      	str	r1, [r2, #0]
   a5994:	6869      	ldr	r1, [r5, #4]
   a5996:	6051      	str	r1, [r2, #4]
   a5998:	68a9      	ldr	r1, [r5, #8]
   a599a:	6091      	str	r1, [r2, #8]
   a599c:	ebc4 020b 	rsb	r2, r4, fp
   a59a0:	eb0a 0104 	add.w	r1, sl, r4
   a59a4:	f042 0201 	orr.w	r2, r2, #1
   a59a8:	6099      	str	r1, [r3, #8]
   a59aa:	604a      	str	r2, [r1, #4]
   a59ac:	f8da 3004 	ldr.w	r3, [sl, #4]
   a59b0:	4648      	mov	r0, r9
   a59b2:	f003 0301 	and.w	r3, r3, #1
   a59b6:	431c      	orrs	r4, r3
   a59b8:	f8ca 4004 	str.w	r4, [sl, #4]
   a59bc:	f7ff febc 	bl	a5738 <__malloc_unlock>
   a59c0:	4638      	mov	r0, r7
   a59c2:	e72e      	b.n	a5822 <_realloc_r+0xe6>
   a59c4:	682b      	ldr	r3, [r5, #0]
   a59c6:	2a1b      	cmp	r2, #27
   a59c8:	6003      	str	r3, [r0, #0]
   a59ca:	686b      	ldr	r3, [r5, #4]
   a59cc:	6043      	str	r3, [r0, #4]
   a59ce:	d826      	bhi.n	a5a1e <_realloc_r+0x2e2>
   a59d0:	f100 0308 	add.w	r3, r0, #8
   a59d4:	f105 0208 	add.w	r2, r5, #8
   a59d8:	e6f7      	b.n	a57ca <_realloc_r+0x8e>
   a59da:	463b      	mov	r3, r7
   a59dc:	682a      	ldr	r2, [r5, #0]
   a59de:	4676      	mov	r6, lr
   a59e0:	601a      	str	r2, [r3, #0]
   a59e2:	686a      	ldr	r2, [r5, #4]
   a59e4:	46d0      	mov	r8, sl
   a59e6:	605a      	str	r2, [r3, #4]
   a59e8:	68aa      	ldr	r2, [r5, #8]
   a59ea:	609a      	str	r2, [r3, #8]
   a59ec:	e705      	b.n	a57fa <_realloc_r+0xbe>
   a59ee:	ebc4 0b0b 	rsb	fp, r4, fp
   a59f2:	eb08 0104 	add.w	r1, r8, r4
   a59f6:	f04b 0201 	orr.w	r2, fp, #1
   a59fa:	6099      	str	r1, [r3, #8]
   a59fc:	604a      	str	r2, [r1, #4]
   a59fe:	f855 3c04 	ldr.w	r3, [r5, #-4]
   a5a02:	4648      	mov	r0, r9
   a5a04:	f003 0301 	and.w	r3, r3, #1
   a5a08:	431c      	orrs	r4, r3
   a5a0a:	f845 4c04 	str.w	r4, [r5, #-4]
   a5a0e:	f7ff fe93 	bl	a5738 <__malloc_unlock>
   a5a12:	4628      	mov	r0, r5
   a5a14:	e705      	b.n	a5822 <_realloc_r+0xe6>
   a5a16:	4629      	mov	r1, r5
   a5a18:	f7ff fe28 	bl	a566c <memmove>
   a5a1c:	e6db      	b.n	a57d6 <_realloc_r+0x9a>
   a5a1e:	68ab      	ldr	r3, [r5, #8]
   a5a20:	2a24      	cmp	r2, #36	; 0x24
   a5a22:	6083      	str	r3, [r0, #8]
   a5a24:	68eb      	ldr	r3, [r5, #12]
   a5a26:	60c3      	str	r3, [r0, #12]
   a5a28:	d027      	beq.n	a5a7a <_realloc_r+0x33e>
   a5a2a:	f100 0310 	add.w	r3, r0, #16
   a5a2e:	f105 0210 	add.w	r2, r5, #16
   a5a32:	e6ca      	b.n	a57ca <_realloc_r+0x8e>
   a5a34:	f850 3c04 	ldr.w	r3, [r0, #-4]
   a5a38:	462f      	mov	r7, r5
   a5a3a:	f023 0303 	bic.w	r3, r3, #3
   a5a3e:	441e      	add	r6, r3
   a5a40:	e6db      	b.n	a57fa <_realloc_r+0xbe>
   a5a42:	4629      	mov	r1, r5
   a5a44:	4638      	mov	r0, r7
   a5a46:	4676      	mov	r6, lr
   a5a48:	46d0      	mov	r8, sl
   a5a4a:	f7ff fe0f 	bl	a566c <memmove>
   a5a4e:	e6d4      	b.n	a57fa <_realloc_r+0xbe>
   a5a50:	463a      	mov	r2, r7
   a5a52:	e764      	b.n	a591e <_realloc_r+0x1e2>
   a5a54:	4629      	mov	r1, r5
   a5a56:	4638      	mov	r0, r7
   a5a58:	461e      	mov	r6, r3
   a5a5a:	46d0      	mov	r8, sl
   a5a5c:	f7ff fe06 	bl	a566c <memmove>
   a5a60:	e6cb      	b.n	a57fa <_realloc_r+0xbe>
   a5a62:	68ab      	ldr	r3, [r5, #8]
   a5a64:	2a24      	cmp	r2, #36	; 0x24
   a5a66:	f8ca 3010 	str.w	r3, [sl, #16]
   a5a6a:	68eb      	ldr	r3, [r5, #12]
   a5a6c:	f8ca 3014 	str.w	r3, [sl, #20]
   a5a70:	d01a      	beq.n	a5aa8 <_realloc_r+0x36c>
   a5a72:	3510      	adds	r5, #16
   a5a74:	f10a 0318 	add.w	r3, sl, #24
   a5a78:	e7b0      	b.n	a59dc <_realloc_r+0x2a0>
   a5a7a:	692a      	ldr	r2, [r5, #16]
   a5a7c:	f100 0318 	add.w	r3, r0, #24
   a5a80:	6102      	str	r2, [r0, #16]
   a5a82:	6969      	ldr	r1, [r5, #20]
   a5a84:	f105 0218 	add.w	r2, r5, #24
   a5a88:	6141      	str	r1, [r0, #20]
   a5a8a:	e69e      	b.n	a57ca <_realloc_r+0x8e>
   a5a8c:	200710cc 	.word	0x200710cc
   a5a90:	68a9      	ldr	r1, [r5, #8]
   a5a92:	2a24      	cmp	r2, #36	; 0x24
   a5a94:	f8ca 1010 	str.w	r1, [sl, #16]
   a5a98:	68e9      	ldr	r1, [r5, #12]
   a5a9a:	f8ca 1014 	str.w	r1, [sl, #20]
   a5a9e:	d00f      	beq.n	a5ac0 <_realloc_r+0x384>
   a5aa0:	3510      	adds	r5, #16
   a5aa2:	f10a 0218 	add.w	r2, sl, #24
   a5aa6:	e73a      	b.n	a591e <_realloc_r+0x1e2>
   a5aa8:	692a      	ldr	r2, [r5, #16]
   a5aaa:	f10a 0320 	add.w	r3, sl, #32
   a5aae:	f8ca 2018 	str.w	r2, [sl, #24]
   a5ab2:	696a      	ldr	r2, [r5, #20]
   a5ab4:	3518      	adds	r5, #24
   a5ab6:	f8ca 201c 	str.w	r2, [sl, #28]
   a5aba:	e78f      	b.n	a59dc <_realloc_r+0x2a0>
   a5abc:	463a      	mov	r2, r7
   a5abe:	e767      	b.n	a5990 <_realloc_r+0x254>
   a5ac0:	6929      	ldr	r1, [r5, #16]
   a5ac2:	f10a 0220 	add.w	r2, sl, #32
   a5ac6:	f8ca 1018 	str.w	r1, [sl, #24]
   a5aca:	6969      	ldr	r1, [r5, #20]
   a5acc:	3518      	adds	r5, #24
   a5ace:	f8ca 101c 	str.w	r1, [sl, #28]
   a5ad2:	e724      	b.n	a591e <_realloc_r+0x1e2>
   a5ad4:	4629      	mov	r1, r5
   a5ad6:	4638      	mov	r0, r7
   a5ad8:	9301      	str	r3, [sp, #4]
   a5ada:	f7ff fdc7 	bl	a566c <memmove>
   a5ade:	9b01      	ldr	r3, [sp, #4]
   a5ae0:	e75c      	b.n	a599c <_realloc_r+0x260>
   a5ae2:	68a9      	ldr	r1, [r5, #8]
   a5ae4:	2a24      	cmp	r2, #36	; 0x24
   a5ae6:	f8ca 1010 	str.w	r1, [sl, #16]
   a5aea:	68e9      	ldr	r1, [r5, #12]
   a5aec:	f8ca 1014 	str.w	r1, [sl, #20]
   a5af0:	d003      	beq.n	a5afa <_realloc_r+0x3be>
   a5af2:	3510      	adds	r5, #16
   a5af4:	f10a 0218 	add.w	r2, sl, #24
   a5af8:	e74a      	b.n	a5990 <_realloc_r+0x254>
   a5afa:	6929      	ldr	r1, [r5, #16]
   a5afc:	f10a 0220 	add.w	r2, sl, #32
   a5b00:	f8ca 1018 	str.w	r1, [sl, #24]
   a5b04:	6969      	ldr	r1, [r5, #20]
   a5b06:	3518      	adds	r5, #24
   a5b08:	f8ca 101c 	str.w	r1, [sl, #28]
   a5b0c:	e740      	b.n	a5990 <_realloc_r+0x254>
   a5b0e:	bf00      	nop

000a5b10 <_sbrk_r>:
   a5b10:	b538      	push	{r3, r4, r5, lr}
   a5b12:	4c07      	ldr	r4, [pc, #28]	; (a5b30 <_sbrk_r+0x20>)
   a5b14:	2300      	movs	r3, #0
   a5b16:	4605      	mov	r5, r0
   a5b18:	4608      	mov	r0, r1
   a5b1a:	6023      	str	r3, [r4, #0]
   a5b1c:	f7f3 fbde 	bl	992dc <_sbrk>
   a5b20:	1c43      	adds	r3, r0, #1
   a5b22:	d000      	beq.n	a5b26 <_sbrk_r+0x16>
   a5b24:	bd38      	pop	{r3, r4, r5, pc}
   a5b26:	6823      	ldr	r3, [r4, #0]
   a5b28:	2b00      	cmp	r3, #0
   a5b2a:	d0fb      	beq.n	a5b24 <_sbrk_r+0x14>
   a5b2c:	602b      	str	r3, [r5, #0]
   a5b2e:	bd38      	pop	{r3, r4, r5, pc}
   a5b30:	20073360 	.word	0x20073360

000a5b34 <__sread>:
   a5b34:	b510      	push	{r4, lr}
   a5b36:	460c      	mov	r4, r1
   a5b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a5b3c:	f000 f936 	bl	a5dac <_read_r>
   a5b40:	2800      	cmp	r0, #0
   a5b42:	db03      	blt.n	a5b4c <__sread+0x18>
   a5b44:	6d23      	ldr	r3, [r4, #80]	; 0x50
   a5b46:	4403      	add	r3, r0
   a5b48:	6523      	str	r3, [r4, #80]	; 0x50
   a5b4a:	bd10      	pop	{r4, pc}
   a5b4c:	89a3      	ldrh	r3, [r4, #12]
   a5b4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   a5b52:	81a3      	strh	r3, [r4, #12]
   a5b54:	bd10      	pop	{r4, pc}
   a5b56:	bf00      	nop

000a5b58 <__swrite>:
   a5b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a5b5c:	460c      	mov	r4, r1
   a5b5e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   a5b62:	461f      	mov	r7, r3
   a5b64:	05cb      	lsls	r3, r1, #23
   a5b66:	4616      	mov	r6, r2
   a5b68:	4605      	mov	r5, r0
   a5b6a:	d507      	bpl.n	a5b7c <__swrite+0x24>
   a5b6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a5b70:	2302      	movs	r3, #2
   a5b72:	2200      	movs	r2, #0
   a5b74:	f000 f904 	bl	a5d80 <_lseek_r>
   a5b78:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   a5b7c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   a5b80:	81a1      	strh	r1, [r4, #12]
   a5b82:	463b      	mov	r3, r7
   a5b84:	4632      	mov	r2, r6
   a5b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a5b8a:	4628      	mov	r0, r5
   a5b8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a5b90:	f000 b814 	b.w	a5bbc <_write_r>

000a5b94 <__sseek>:
   a5b94:	b510      	push	{r4, lr}
   a5b96:	460c      	mov	r4, r1
   a5b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a5b9c:	f000 f8f0 	bl	a5d80 <_lseek_r>
   a5ba0:	89a3      	ldrh	r3, [r4, #12]
   a5ba2:	1c42      	adds	r2, r0, #1
   a5ba4:	bf0e      	itee	eq
   a5ba6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   a5baa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   a5bae:	6520      	strne	r0, [r4, #80]	; 0x50
   a5bb0:	81a3      	strh	r3, [r4, #12]
   a5bb2:	bd10      	pop	{r4, pc}

000a5bb4 <__sclose>:
   a5bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a5bb8:	f000 b868 	b.w	a5c8c <_close_r>

000a5bbc <_write_r>:
   a5bbc:	b570      	push	{r4, r5, r6, lr}
   a5bbe:	460d      	mov	r5, r1
   a5bc0:	4c08      	ldr	r4, [pc, #32]	; (a5be4 <_write_r+0x28>)
   a5bc2:	4611      	mov	r1, r2
   a5bc4:	4606      	mov	r6, r0
   a5bc6:	461a      	mov	r2, r3
   a5bc8:	4628      	mov	r0, r5
   a5bca:	2300      	movs	r3, #0
   a5bcc:	6023      	str	r3, [r4, #0]
   a5bce:	f7f2 fb95 	bl	982fc <_write>
   a5bd2:	1c43      	adds	r3, r0, #1
   a5bd4:	d000      	beq.n	a5bd8 <_write_r+0x1c>
   a5bd6:	bd70      	pop	{r4, r5, r6, pc}
   a5bd8:	6823      	ldr	r3, [r4, #0]
   a5bda:	2b00      	cmp	r3, #0
   a5bdc:	d0fb      	beq.n	a5bd6 <_write_r+0x1a>
   a5bde:	6033      	str	r3, [r6, #0]
   a5be0:	bd70      	pop	{r4, r5, r6, pc}
   a5be2:	bf00      	nop
   a5be4:	20073360 	.word	0x20073360

000a5be8 <__register_exitproc>:
   a5be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   a5bec:	4c25      	ldr	r4, [pc, #148]	; (a5c84 <__register_exitproc+0x9c>)
   a5bee:	4606      	mov	r6, r0
   a5bf0:	6825      	ldr	r5, [r4, #0]
   a5bf2:	4688      	mov	r8, r1
   a5bf4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   a5bf8:	4692      	mov	sl, r2
   a5bfa:	4699      	mov	r9, r3
   a5bfc:	b3c4      	cbz	r4, a5c70 <__register_exitproc+0x88>
   a5bfe:	6860      	ldr	r0, [r4, #4]
   a5c00:	281f      	cmp	r0, #31
   a5c02:	dc17      	bgt.n	a5c34 <__register_exitproc+0x4c>
   a5c04:	1c41      	adds	r1, r0, #1
   a5c06:	b176      	cbz	r6, a5c26 <__register_exitproc+0x3e>
   a5c08:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   a5c0c:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   a5c10:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   a5c14:	2201      	movs	r2, #1
   a5c16:	4082      	lsls	r2, r0
   a5c18:	4315      	orrs	r5, r2
   a5c1a:	2e02      	cmp	r6, #2
   a5c1c:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   a5c20:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   a5c24:	d01e      	beq.n	a5c64 <__register_exitproc+0x7c>
   a5c26:	1c83      	adds	r3, r0, #2
   a5c28:	6061      	str	r1, [r4, #4]
   a5c2a:	2000      	movs	r0, #0
   a5c2c:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   a5c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   a5c34:	4b14      	ldr	r3, [pc, #80]	; (a5c88 <__register_exitproc+0xa0>)
   a5c36:	b303      	cbz	r3, a5c7a <__register_exitproc+0x92>
   a5c38:	f44f 70c8 	mov.w	r0, #400	; 0x190
   a5c3c:	f7ff fa1c 	bl	a5078 <malloc>
   a5c40:	4604      	mov	r4, r0
   a5c42:	b1d0      	cbz	r0, a5c7a <__register_exitproc+0x92>
   a5c44:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   a5c48:	2700      	movs	r7, #0
   a5c4a:	e884 0088 	stmia.w	r4, {r3, r7}
   a5c4e:	4638      	mov	r0, r7
   a5c50:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   a5c54:	2101      	movs	r1, #1
   a5c56:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   a5c5a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   a5c5e:	2e00      	cmp	r6, #0
   a5c60:	d0e1      	beq.n	a5c26 <__register_exitproc+0x3e>
   a5c62:	e7d1      	b.n	a5c08 <__register_exitproc+0x20>
   a5c64:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   a5c68:	431a      	orrs	r2, r3
   a5c6a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   a5c6e:	e7da      	b.n	a5c26 <__register_exitproc+0x3e>
   a5c70:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   a5c74:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   a5c78:	e7c1      	b.n	a5bfe <__register_exitproc+0x16>
   a5c7a:	f04f 30ff 	mov.w	r0, #4294967295
   a5c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   a5c82:	bf00      	nop
   a5c84:	000a6338 	.word	0x000a6338
   a5c88:	000a5079 	.word	0x000a5079

000a5c8c <_close_r>:
   a5c8c:	b538      	push	{r3, r4, r5, lr}
   a5c8e:	4c07      	ldr	r4, [pc, #28]	; (a5cac <_close_r+0x20>)
   a5c90:	2300      	movs	r3, #0
   a5c92:	4605      	mov	r5, r0
   a5c94:	4608      	mov	r0, r1
   a5c96:	6023      	str	r3, [r4, #0]
   a5c98:	f7f3 fb3e 	bl	99318 <_close>
   a5c9c:	1c43      	adds	r3, r0, #1
   a5c9e:	d000      	beq.n	a5ca2 <_close_r+0x16>
   a5ca0:	bd38      	pop	{r3, r4, r5, pc}
   a5ca2:	6823      	ldr	r3, [r4, #0]
   a5ca4:	2b00      	cmp	r3, #0
   a5ca6:	d0fb      	beq.n	a5ca0 <_close_r+0x14>
   a5ca8:	602b      	str	r3, [r5, #0]
   a5caa:	bd38      	pop	{r3, r4, r5, pc}
   a5cac:	20073360 	.word	0x20073360

000a5cb0 <_fclose_r>:
   a5cb0:	2900      	cmp	r1, #0
   a5cb2:	d03d      	beq.n	a5d30 <_fclose_r+0x80>
   a5cb4:	b570      	push	{r4, r5, r6, lr}
   a5cb6:	4605      	mov	r5, r0
   a5cb8:	460c      	mov	r4, r1
   a5cba:	b108      	cbz	r0, a5cc0 <_fclose_r+0x10>
   a5cbc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a5cbe:	b37b      	cbz	r3, a5d20 <_fclose_r+0x70>
   a5cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a5cc4:	b90b      	cbnz	r3, a5cca <_fclose_r+0x1a>
   a5cc6:	2000      	movs	r0, #0
   a5cc8:	bd70      	pop	{r4, r5, r6, pc}
   a5cca:	4621      	mov	r1, r4
   a5ccc:	4628      	mov	r0, r5
   a5cce:	f7fe fd27 	bl	a4720 <__sflush_r>
   a5cd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   a5cd4:	4606      	mov	r6, r0
   a5cd6:	b133      	cbz	r3, a5ce6 <_fclose_r+0x36>
   a5cd8:	69e1      	ldr	r1, [r4, #28]
   a5cda:	4628      	mov	r0, r5
   a5cdc:	4798      	blx	r3
   a5cde:	2800      	cmp	r0, #0
   a5ce0:	bfb8      	it	lt
   a5ce2:	f04f 36ff 	movlt.w	r6, #4294967295
   a5ce6:	89a3      	ldrh	r3, [r4, #12]
   a5ce8:	061b      	lsls	r3, r3, #24
   a5cea:	d41c      	bmi.n	a5d26 <_fclose_r+0x76>
   a5cec:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a5cee:	b141      	cbz	r1, a5d02 <_fclose_r+0x52>
   a5cf0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a5cf4:	4299      	cmp	r1, r3
   a5cf6:	d002      	beq.n	a5cfe <_fclose_r+0x4e>
   a5cf8:	4628      	mov	r0, r5
   a5cfa:	f7fe feb5 	bl	a4a68 <_free_r>
   a5cfe:	2300      	movs	r3, #0
   a5d00:	6323      	str	r3, [r4, #48]	; 0x30
   a5d02:	6c61      	ldr	r1, [r4, #68]	; 0x44
   a5d04:	b121      	cbz	r1, a5d10 <_fclose_r+0x60>
   a5d06:	4628      	mov	r0, r5
   a5d08:	f7fe feae 	bl	a4a68 <_free_r>
   a5d0c:	2300      	movs	r3, #0
   a5d0e:	6463      	str	r3, [r4, #68]	; 0x44
   a5d10:	f7fe fe44 	bl	a499c <__sfp_lock_acquire>
   a5d14:	2300      	movs	r3, #0
   a5d16:	81a3      	strh	r3, [r4, #12]
   a5d18:	f7fe fe42 	bl	a49a0 <__sfp_lock_release>
   a5d1c:	4630      	mov	r0, r6
   a5d1e:	bd70      	pop	{r4, r5, r6, pc}
   a5d20:	f7fe fe36 	bl	a4990 <__sinit>
   a5d24:	e7cc      	b.n	a5cc0 <_fclose_r+0x10>
   a5d26:	6921      	ldr	r1, [r4, #16]
   a5d28:	4628      	mov	r0, r5
   a5d2a:	f7fe fe9d 	bl	a4a68 <_free_r>
   a5d2e:	e7dd      	b.n	a5cec <_fclose_r+0x3c>
   a5d30:	2000      	movs	r0, #0
   a5d32:	4770      	bx	lr

000a5d34 <_fstat_r>:
   a5d34:	b538      	push	{r3, r4, r5, lr}
   a5d36:	460b      	mov	r3, r1
   a5d38:	4c07      	ldr	r4, [pc, #28]	; (a5d58 <_fstat_r+0x24>)
   a5d3a:	4605      	mov	r5, r0
   a5d3c:	4611      	mov	r1, r2
   a5d3e:	4618      	mov	r0, r3
   a5d40:	2300      	movs	r3, #0
   a5d42:	6023      	str	r3, [r4, #0]
   a5d44:	f7f3 faf4 	bl	99330 <_fstat>
   a5d48:	1c43      	adds	r3, r0, #1
   a5d4a:	d000      	beq.n	a5d4e <_fstat_r+0x1a>
   a5d4c:	bd38      	pop	{r3, r4, r5, pc}
   a5d4e:	6823      	ldr	r3, [r4, #0]
   a5d50:	2b00      	cmp	r3, #0
   a5d52:	d0fb      	beq.n	a5d4c <_fstat_r+0x18>
   a5d54:	602b      	str	r3, [r5, #0]
   a5d56:	bd38      	pop	{r3, r4, r5, pc}
   a5d58:	20073360 	.word	0x20073360

000a5d5c <_isatty_r>:
   a5d5c:	b538      	push	{r3, r4, r5, lr}
   a5d5e:	4c07      	ldr	r4, [pc, #28]	; (a5d7c <_isatty_r+0x20>)
   a5d60:	2300      	movs	r3, #0
   a5d62:	4605      	mov	r5, r0
   a5d64:	4608      	mov	r0, r1
   a5d66:	6023      	str	r3, [r4, #0]
   a5d68:	f7f3 faf2 	bl	99350 <_isatty>
   a5d6c:	1c43      	adds	r3, r0, #1
   a5d6e:	d000      	beq.n	a5d72 <_isatty_r+0x16>
   a5d70:	bd38      	pop	{r3, r4, r5, pc}
   a5d72:	6823      	ldr	r3, [r4, #0]
   a5d74:	2b00      	cmp	r3, #0
   a5d76:	d0fb      	beq.n	a5d70 <_isatty_r+0x14>
   a5d78:	602b      	str	r3, [r5, #0]
   a5d7a:	bd38      	pop	{r3, r4, r5, pc}
   a5d7c:	20073360 	.word	0x20073360

000a5d80 <_lseek_r>:
   a5d80:	b570      	push	{r4, r5, r6, lr}
   a5d82:	460d      	mov	r5, r1
   a5d84:	4c08      	ldr	r4, [pc, #32]	; (a5da8 <_lseek_r+0x28>)
   a5d86:	4611      	mov	r1, r2
   a5d88:	4606      	mov	r6, r0
   a5d8a:	461a      	mov	r2, r3
   a5d8c:	4628      	mov	r0, r5
   a5d8e:	2300      	movs	r3, #0
   a5d90:	6023      	str	r3, [r4, #0]
   a5d92:	f7f3 fae7 	bl	99364 <_lseek>
   a5d96:	1c43      	adds	r3, r0, #1
   a5d98:	d000      	beq.n	a5d9c <_lseek_r+0x1c>
   a5d9a:	bd70      	pop	{r4, r5, r6, pc}
   a5d9c:	6823      	ldr	r3, [r4, #0]
   a5d9e:	2b00      	cmp	r3, #0
   a5da0:	d0fb      	beq.n	a5d9a <_lseek_r+0x1a>
   a5da2:	6033      	str	r3, [r6, #0]
   a5da4:	bd70      	pop	{r4, r5, r6, pc}
   a5da6:	bf00      	nop
   a5da8:	20073360 	.word	0x20073360

000a5dac <_read_r>:
   a5dac:	b570      	push	{r4, r5, r6, lr}
   a5dae:	460d      	mov	r5, r1
   a5db0:	4c08      	ldr	r4, [pc, #32]	; (a5dd4 <_read_r+0x28>)
   a5db2:	4611      	mov	r1, r2
   a5db4:	4606      	mov	r6, r0
   a5db6:	461a      	mov	r2, r3
   a5db8:	4628      	mov	r0, r5
   a5dba:	2300      	movs	r3, #0
   a5dbc:	6023      	str	r3, [r4, #0]
   a5dbe:	f7f2 fa73 	bl	982a8 <_read>
   a5dc2:	1c43      	adds	r3, r0, #1
   a5dc4:	d000      	beq.n	a5dc8 <_read_r+0x1c>
   a5dc6:	bd70      	pop	{r4, r5, r6, pc}
   a5dc8:	6823      	ldr	r3, [r4, #0]
   a5dca:	2b00      	cmp	r3, #0
   a5dcc:	d0fb      	beq.n	a5dc6 <_read_r+0x1a>
   a5dce:	6033      	str	r3, [r6, #0]
   a5dd0:	bd70      	pop	{r4, r5, r6, pc}
   a5dd2:	bf00      	nop
   a5dd4:	20073360 	.word	0x20073360
   a5dd8:	54534554 	.word	0x54534554
   a5ddc:	00315350 	.word	0x00315350
   a5de0:	54534554 	.word	0x54534554
   a5de4:	00325350 	.word	0x00325350
   a5de8:	54534554 	.word	0x54534554
   a5dec:	00335350 	.word	0x00335350
   a5df0:	54534554 	.word	0x54534554
   a5df4:	00545041 	.word	0x00545041
   a5df8:	54534554 	.word	0x54534554
   a5dfc:	00003154 	.word	0x00003154
   a5e00:	54534554 	.word	0x54534554
   a5e04:	00003254 	.word	0x00003254
   a5e08:	54534554 	.word	0x54534554
   a5e0c:	00003354 	.word	0x00003354
   a5e10:	54534554 	.word	0x54534554
   a5e14:	444e4f43 	.word	0x444e4f43
   a5e18:	00000000 	.word	0x00000000
   a5e1c:	45544544 	.word	0x45544544
   a5e20:	4c5f5443 	.word	0x4c5f5443
   a5e24:	0000574f 	.word	0x0000574f
   a5e28:	48545056 	.word	0x48545056
   a5e2c:	00484749 	.word	0x00484749
   a5e30:	4f4f4c42 	.word	0x4f4f4c42
   a5e34:	4c445f44 	.word	0x4c445f44
   a5e38:	00000000 	.word	0x00000000
   a5e3c:	00545041 	.word	0x00545041
   a5e40:	45544e45 	.word	0x45544e45
   a5e44:	00325f52 	.word	0x00325f52
   a5e48:	45544e45 	.word	0x45544e45
   a5e4c:	00335f52 	.word	0x00335f52
   a5e50:	45544e45 	.word	0x45544e45
   a5e54:	00345f52 	.word	0x00345f52
   a5e58:	00574c46 	.word	0x00574c46
   a5e5c:	00004442 	.word	0x00004442
   a5e60:	00444241 	.word	0x00444241
   a5e64:	00303035 	.word	0x00303035
   a5e68:	41505942 	.word	0x41505942
   a5e6c:	00005353 	.word	0x00005353
   a5e70:	4d495250 	.word	0x4d495250
   a5e74:	00003245 	.word	0x00003245
   a5e78:	52494352 	.word	0x52494352
   a5e7c:	00003243 	.word	0x00003243
   a5e80:	4f5f4548 	.word	0x4f5f4548
   a5e84:	0000004e 	.word	0x0000004e
   a5e88:	4f5f4548 	.word	0x4f5f4548
   a5e8c:	00004646 	.word	0x00004646
   a5e90:	4f5f5046 	.word	0x4f5f5046
   a5e94:	0000004e 	.word	0x0000004e
   a5e98:	4f5f5046 	.word	0x4f5f5046
   a5e9c:	00004646 	.word	0x00004646
   a5ea0:	505f5343 	.word	0x505f5343
   a5ea4:	535f544f 	.word	0x535f544f
   a5ea8:	00005445 	.word	0x00005445
   a5eac:	525f5046 	.word	0x525f5046
   a5eb0:	00455441 	.word	0x00455441
   a5eb4:	465f5046 	.word	0x465f5046
   a5eb8:	00005152 	.word	0x00005152
   a5ebc:	5f504744 	.word	0x5f504744
   a5ec0:	00004e4f 	.word	0x00004e4f
   a5ec4:	5f504744 	.word	0x5f504744
   a5ec8:	0046464f 	.word	0x0046464f
   a5ecc:	5f504744 	.word	0x5f504744
   a5ed0:	45544152 	.word	0x45544152
   a5ed4:	00000000 	.word	0x00000000
   a5ed8:	5f504744 	.word	0x5f504744
   a5edc:	00515246 	.word	0x00515246
   a5ee0:	545f5350 	.word	0x545f5350
   a5ee4:	00000000 	.word	0x00000000
   a5ee8:	5f504655 	.word	0x5f504655
   a5eec:	0046464f 	.word	0x0046464f
   a5ef0:	5f504655 	.word	0x5f504655
   a5ef4:	45544152 	.word	0x45544152
   a5ef8:	00000000 	.word	0x00000000
   a5efc:	5f414c56 	.word	0x5f414c56
   a5f00:	504d5550 	.word	0x504d5550
   a5f04:	004e4f5f 	.word	0x004e4f5f
   a5f08:	5f414c56 	.word	0x5f414c56
   a5f0c:	504d5550 	.word	0x504d5550
   a5f10:	46464f5f 	.word	0x46464f5f
   a5f14:	00000000 	.word	0x00000000
   a5f18:	525f5042 	.word	0x525f5042
   a5f1c:	00455441 	.word	0x00455441
   a5f20:	4f5f4356 	.word	0x4f5f4356
   a5f24:	00004646 	.word	0x00004646
   a5f28:	4f5f4957 	.word	0x4f5f4957
   a5f2c:	0000004e 	.word	0x0000004e
   a5f30:	4f5f4957 	.word	0x4f5f4957
   a5f34:	00004646 	.word	0x00004646
   a5f38:	49415244 	.word	0x49415244
   a5f3c:	4e4f5f4e 	.word	0x4e4f5f4e
   a5f40:	00000000 	.word	0x00000000
   a5f44:	49415244 	.word	0x49415244
   a5f48:	464f5f4e 	.word	0x464f5f4e
   a5f4c:	00000046 	.word	0x00000046
   a5f50:	504f5f56 	.word	0x504f5f56
   a5f54:	00004e45 	.word	0x00004e45
   a5f58:	4c435f56 	.word	0x4c435f56
   a5f5c:	0045534f 	.word	0x0045534f
   a5f60:	4c415f56 	.word	0x4c415f56
   a5f64:	45504f4c 	.word	0x45504f4c
   a5f68:	0000004e 	.word	0x0000004e
   a5f6c:	4f5f5048 	.word	0x4f5f5048
   a5f70:	0000004e 	.word	0x0000004e
   a5f74:	4f5f5048 	.word	0x4f5f5048
   a5f78:	00004646 	.word	0x00004646
   a5f7c:	525f5048 	.word	0x525f5048
   a5f80:	00455441 	.word	0x00455441
   a5f84:	565f4342 	.word	0x565f4342
   a5f88:	45532031 	.word	0x45532031
   a5f8c:	00000054 	.word	0x00000054
   a5f90:	565f4342 	.word	0x565f4342
   a5f94:	45532032 	.word	0x45532032
   a5f98:	00000054 	.word	0x00000054
   a5f9c:	565f4342 	.word	0x565f4342
   a5fa0:	33315f31 	.word	0x33315f31
   a5fa4:	53203431 	.word	0x53203431
   a5fa8:	00005445 	.word	0x00005445
   a5fac:	565f4342 	.word	0x565f4342
   a5fb0:	33315f32 	.word	0x33315f32
   a5fb4:	53203431 	.word	0x53203431
   a5fb8:	00005445 	.word	0x00005445
   a5fbc:	565f4342 	.word	0x565f4342
   a5fc0:	20345f31 	.word	0x20345f31
   a5fc4:	00544553 	.word	0x00544553
   a5fc8:	565f4342 	.word	0x565f4342
   a5fcc:	20345f32 	.word	0x20345f32
   a5fd0:	00544553 	.word	0x00544553
   a5fd4:	525f4342 	.word	0x525f4342
   a5fd8:	54455345 	.word	0x54455345
   a5fdc:	00000000 	.word	0x00000000
   a5fe0:	465f4342 	.word	0x465f4342
   a5fe4:	5a454552 	.word	0x5a454552
   a5fe8:	00000045 	.word	0x00000045
   a5fec:	555f4342 	.word	0x555f4342
   a5ff0:	4552464e 	.word	0x4552464e
   a5ff4:	00455a45 	.word	0x00455a45
   a5ff8:	4e45504f 	.word	0x4e45504f
   a5ffc:	4c4c4946 	.word	0x4c4c4946
   a6000:	00000000 	.word	0x00000000
   a6004:	0052544a 	.word	0x0052544a
   a6008:	4f5f4356 	.word	0x4f5f4356
   a600c:	0000004e 	.word	0x0000004e
   a6010:	545f5343 	.word	0x545f5343
   a6014:	47474952 	.word	0x47474952
   a6018:	00005245 	.word	0x00005245
   a601c:	545f5350 	.word	0x545f5350
   a6020:	47474952 	.word	0x47474952
   a6024:	00005245 	.word	0x00005245
   a6028:	3a726556 	.word	0x3a726556
   a602c:	00342e54 	.word	0x00342e54
   a6030:	574f4c46 	.word	0x574f4c46
   a6034:	004e455f 	.word	0x004e455f
   a6038:	574f4c46 	.word	0x574f4c46
   a603c:	5349445f 	.word	0x5349445f
   a6040:	00000000 	.word	0x00000000
   a6044:	504d4554 	.word	0x504d4554
   a6048:	49485f31 	.word	0x49485f31
   a604c:	00004847 	.word	0x00004847
   a6050:	504d4554 	.word	0x504d4554
   a6054:	4f4c5f31 	.word	0x4f4c5f31
   a6058:	00000057 	.word	0x00000057
   a605c:	504d4554 	.word	0x504d4554
   a6060:	00000031 	.word	0x00000031
   a6064:	504d4554 	.word	0x504d4554
   a6068:	49485f32 	.word	0x49485f32
   a606c:	00004847 	.word	0x00004847
   a6070:	504d4554 	.word	0x504d4554
   a6074:	4f4c5f32 	.word	0x4f4c5f32
   a6078:	00000057 	.word	0x00000057
   a607c:	54534554 	.word	0x54534554
   a6080:	00000000 	.word	0x00000000
   a6084:	504d4554 	.word	0x504d4554
   a6088:	00000032 	.word	0x00000032
   a608c:	504d4554 	.word	0x504d4554
   a6090:	4749485f 	.word	0x4749485f
   a6094:	00000048 	.word	0x00000048
   a6098:	504d4554 	.word	0x504d4554
   a609c:	574f4c5f 	.word	0x574f4c5f
   a60a0:	00000000 	.word	0x00000000
   a60a4:	504d4554 	.word	0x504d4554
   a60a8:	00000033 	.word	0x00000033
   a60ac:	5f545041 	.word	0x5f545041
   a60b0:	48474948 	.word	0x48474948
   a60b4:	00000000 	.word	0x00000000
   a60b8:	5f545041 	.word	0x5f545041
   a60bc:	3d574f4c 	.word	0x3d574f4c
   a60c0:	292d2820 	.word	0x292d2820
   a60c4:	00000000 	.word	0x00000000
   a60c8:	5f545041 	.word	0x5f545041
   a60cc:	00574f4c 	.word	0x00574f4c
   a60d0:	5f545056 	.word	0x5f545056
   a60d4:	48474948 	.word	0x48474948
   a60d8:	00000000 	.word	0x00000000
   a60dc:	5f545056 	.word	0x5f545056
   a60e0:	3d574f4c 	.word	0x3d574f4c
   a60e4:	292d2820 	.word	0x292d2820
   a60e8:	00000000 	.word	0x00000000
   a60ec:	5f325350 	.word	0x5f325350
   a60f0:	00574f4c 	.word	0x00574f4c
   a60f4:	444e4f43 	.word	0x444e4f43
   a60f8:	4749485f 	.word	0x4749485f
   a60fc:	00000048 	.word	0x00000048
   a6100:	444e4f43 	.word	0x444e4f43
   a6104:	574f4c5f 	.word	0x574f4c5f
   a6108:	00000000 	.word	0x00000000
   a610c:	5f4e4f43 	.word	0x5f4e4f43
   a6110:	00574f4c 	.word	0x00574f4c
   a6114:	5f315350 	.word	0x5f315350
   a6118:	48474948 	.word	0x48474948
   a611c:	00000000 	.word	0x00000000
   a6120:	5f315350 	.word	0x5f315350
   a6124:	3d574f4c 	.word	0x3d574f4c
   a6128:	292d2820 	.word	0x292d2820
   a612c:	00000000 	.word	0x00000000
   a6130:	00325350 	.word	0x00325350
   a6134:	5f325350 	.word	0x5f325350
   a6138:	3d574f4c 	.word	0x3d574f4c
   a613c:	292d2820 	.word	0x292d2820
   a6140:	00000000 	.word	0x00000000
   a6144:	00335350 	.word	0x00335350
   a6148:	5f335350 	.word	0x5f335350
   a614c:	3d574f4c 	.word	0x3d574f4c
   a6150:	292d2820 	.word	0x292d2820
   a6154:	00000000 	.word	0x00000000
   a6158:	5f335350 	.word	0x5f335350
   a615c:	00574f4c 	.word	0x00574f4c
   a6160:	535f5048 	.word	0x535f5048
   a6164:	54524154 	.word	0x54524154
   a6168:	0000003d 	.word	0x0000003d
   a616c:	455f5048 	.word	0x455f5048
   a6170:	003d444e 	.word	0x003d444e
   a6174:	3d315350 	.word	0x3d315350
   a6178:	00000000 	.word	0x00000000
   a617c:	3d325350 	.word	0x3d325350
   a6180:	00000000 	.word	0x00000000
   a6184:	3d335350 	.word	0x3d335350
   a6188:	00000000 	.word	0x00000000
   a618c:	3d545041 	.word	0x3d545041
   a6190:	00000000 	.word	0x00000000
   a6194:	3d545056 	.word	0x3d545056
   a6198:	00000000 	.word	0x00000000
   a619c:	31504d54 	.word	0x31504d54
   a61a0:	0000003d 	.word	0x0000003d
   a61a4:	32504d54 	.word	0x32504d54
   a61a8:	0000003d 	.word	0x0000003d
   a61ac:	504d4554 	.word	0x504d4554
   a61b0:	00003d31 	.word	0x00003d31
   a61b4:	504d4554 	.word	0x504d4554
   a61b8:	00003d32 	.word	0x00003d32
   a61bc:	504d4554 	.word	0x504d4554
   a61c0:	00003d33 	.word	0x00003d33
   a61c4:	544e4328 	.word	0x544e4328
   a61c8:	00000029 	.word	0x00000029

000a61cc <can_bit_time>:
   a61cc:	02020308 02094b03 43020303 0303030a     .....K.....C....
   a61dc:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   a61ec:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   a61fc:	05050510 06114504 47040505 06060512     .....E.....G....
   a620c:	06134304 44040606 06060714 08154604     .C.....D.....F..
   a621c:	47040606 07070716 08174404 46040708     ...G.....D.....F
   a622c:	08080718 08194304 44040808 00006325     .....C.....D%c..
   a623c:	0004021c 5f373156 00000030 202d462d     ....V17_0...-F- 
   a624c:	74737953 206b6369 666e6f63 72756769     Systick configur
   a625c:	6f697461 7265206e 0d726f72 00000000     ation error.....

000a626c <uart_serial_options>:
   a626c:	0001c200 00000000 00000800 00000001     ................
   a627c:	01ddccaa 05040302 09080706 bbee0b0a     ................
   a628c:	4e45504f 004c4946 504f5453 004c4946     OPENFIL.STOPFIL.
   a629c:	45544e45 00315f52 00544e49 0065766f     ENTER_1.INT.ove.
   a62ac:	45464153 00000000 52494352 00000043     SAFE....RCIRC...
   a62bc:	4d495250 00003145 4f4f4c42 00000044     PRIME1..BLOOD...
   a62cc:	41504548 004e4952 454e4f44 0050485f     HEPARIN.DONE_HP.
   a62dc:	00303035 534e4952 00003245 534e4952     500.RINSE2..RINS
   a62ec:	00003345 534e4952 00003445 534e4952     E3..RINSE4..RINS
   a62fc:	00003145 454e4f44 00000000 52494352     E1..DONE....RCIR
   a630c:	00000043 52494352 54535f43 0000504f     C...RCIRC_STOP..
   a631c:	45544e45 00315f52 45464153 00000000     ENTER_1.SAFE....
   a632c:	4d495250 00003145 00000043              PRIME1..C...

000a6338 <_global_impure_ptr>:
   a6338:	20070ca0 0000000a                       ... ....

000a6340 <_init>:
   a6340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a6342:	bf00      	nop
   a6344:	bcf8      	pop	{r3, r4, r5, r6, r7}
   a6346:	bc08      	pop	{r3}
   a6348:	469e      	mov	lr, r3
   a634a:	4770      	bx	lr

000a634c <__init_array_start>:
   a634c:	000a4701 	.word	0x000a4701

000a6350 <__frame_dummy_init_array_entry>:
   a6350:	00080119                                ....

000a6354 <_fini>:
   a6354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a6356:	bf00      	nop
   a6358:	bcf8      	pop	{r3, r4, r5, r6, r7}
   a635a:	bc08      	pop	{r3}
   a635c:	469e      	mov	lr, r3
   a635e:	4770      	bx	lr

000a6360 <__fini_array_start>:
   a6360:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <efc_perform_read_sequence>:
 */
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070000:	b480      	push	{r7}
20070002:	b089      	sub	sp, #36	; 0x24
20070004:	af00      	add	r7, sp, #0
20070006:	60f8      	str	r0, [r7, #12]
20070008:	60b9      	str	r1, [r7, #8]
2007000a:	607a      	str	r2, [r7, #4]
2007000c:	603b      	str	r3, [r7, #0]
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
2007000e:	68fb      	ldr	r3, [r7, #12]
20070010:	4a27      	ldr	r2, [pc, #156]	; (200700b0 <efc_perform_read_sequence+0xb0>)
20070012:	4293      	cmp	r3, r2
20070014:	d102      	bne.n	2007001c <efc_perform_read_sequence+0x1c>
20070016:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2007001a:	e001      	b.n	20070020 <efc_perform_read_sequence+0x20>
2007001c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
{
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32)
	uint32_t *p_ul_data =
20070020:	61bb      	str	r3, [r7, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070022:	683b      	ldr	r3, [r7, #0]
20070024:	2b00      	cmp	r3, #0
20070026:	d101      	bne.n	2007002c <efc_perform_read_sequence+0x2c>
		return EFC_RC_INVALID;
20070028:	2302      	movs	r3, #2
2007002a:	e03c      	b.n	200700a6 <efc_perform_read_sequence+0xa6>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2007002c:	68fb      	ldr	r3, [r7, #12]
2007002e:	681b      	ldr	r3, [r3, #0]
20070030:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20070034:	68fb      	ldr	r3, [r7, #12]
20070036:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20070038:	68bb      	ldr	r3, [r7, #8]
2007003a:	b2db      	uxtb	r3, r3
2007003c:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070040:	68fb      	ldr	r3, [r7, #12]
20070042:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070044:	68fb      	ldr	r3, [r7, #12]
20070046:	689b      	ldr	r3, [r3, #8]
20070048:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2007004a:	697b      	ldr	r3, [r7, #20]
2007004c:	f003 0301 	and.w	r3, r3, #1
20070050:	2b00      	cmp	r3, #0
20070052:	d1f7      	bne.n	20070044 <efc_perform_read_sequence+0x44>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070054:	2300      	movs	r3, #0
20070056:	61fb      	str	r3, [r7, #28]
20070058:	e00c      	b.n	20070074 <efc_perform_read_sequence+0x74>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007005a:	69fb      	ldr	r3, [r7, #28]
2007005c:	009b      	lsls	r3, r3, #2
2007005e:	683a      	ldr	r2, [r7, #0]
20070060:	4413      	add	r3, r2
20070062:	69fa      	ldr	r2, [r7, #28]
20070064:	0092      	lsls	r2, r2, #2
20070066:	69b9      	ldr	r1, [r7, #24]
20070068:	440a      	add	r2, r1
2007006a:	6812      	ldr	r2, [r2, #0]
2007006c:	601a      	str	r2, [r3, #0]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2007006e:	69fb      	ldr	r3, [r7, #28]
20070070:	3301      	adds	r3, #1
20070072:	61fb      	str	r3, [r7, #28]
20070074:	69fa      	ldr	r2, [r7, #28]
20070076:	6abb      	ldr	r3, [r7, #40]	; 0x28
20070078:	429a      	cmp	r2, r3
2007007a:	d3ee      	bcc.n	2007005a <efc_perform_read_sequence+0x5a>
#if (SAM4S || SAM4E || SAM4N)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2007007c:	687b      	ldr	r3, [r7, #4]
2007007e:	b2db      	uxtb	r3, r3
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20070080:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
20070084:	68fb      	ldr	r3, [r7, #12]
20070086:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070088:	68fb      	ldr	r3, [r7, #12]
2007008a:	689b      	ldr	r3, [r3, #8]
2007008c:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2007008e:	697b      	ldr	r3, [r7, #20]
20070090:	f003 0301 	and.w	r3, r3, #1
20070094:	2b00      	cmp	r3, #0
20070096:	d0f7      	beq.n	20070088 <efc_perform_read_sequence+0x88>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20070098:	68fb      	ldr	r3, [r7, #12]
2007009a:	681b      	ldr	r3, [r3, #0]
2007009c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
200700a0:	68fb      	ldr	r3, [r7, #12]
200700a2:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
200700a4:	2300      	movs	r3, #0
}
200700a6:	4618      	mov	r0, r3
200700a8:	3724      	adds	r7, #36	; 0x24
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00

200700b4 <efc_write_fmr>:
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fmr Value of mode register
 */
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200700b4:	b480      	push	{r7}
200700b6:	b083      	sub	sp, #12
200700b8:	af00      	add	r7, sp, #0
200700ba:	6078      	str	r0, [r7, #4]
200700bc:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200700be:	687b      	ldr	r3, [r7, #4]
200700c0:	683a      	ldr	r2, [r7, #0]
200700c2:	601a      	str	r2, [r3, #0]
}
200700c4:	bf00      	nop
200700c6:	370c      	adds	r7, #12
200700c8:	46bd      	mov	sp, r7
200700ca:	bc80      	pop	{r7}
200700cc:	4770      	bx	lr
200700ce:	bf00      	nop

200700d0 <efc_perform_fcr>:
 *
 * \return The current status.
 */
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200700d0:	b480      	push	{r7}
200700d2:	b085      	sub	sp, #20
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
200700d8:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200700da:	687b      	ldr	r3, [r7, #4]
200700dc:	683a      	ldr	r2, [r7, #0]
200700de:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200700e0:	687b      	ldr	r3, [r7, #4]
200700e2:	689b      	ldr	r3, [r3, #8]
200700e4:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200700e6:	68fb      	ldr	r3, [r7, #12]
200700e8:	f003 0301 	and.w	r3, r3, #1
200700ec:	2b00      	cmp	r3, #0
200700ee:	d0f7      	beq.n	200700e0 <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200700f0:	68fb      	ldr	r3, [r7, #12]
200700f2:	f003 0306 	and.w	r3, r3, #6
}
200700f6:	4618      	mov	r0, r3
200700f8:	3714      	adds	r7, #20
200700fa:	46bd      	mov	sp, r7
200700fc:	bc80      	pop	{r7}
200700fe:	4770      	bx	lr

20070100 <levelswitchprevstatus>:
20070100:	0001                                        ..

20070102 <ps3_threshold>:
20070102:	1000                                        ..

20070104 <cl_flowpathtable>:
20070104:	0000 0707 0101 0202 0303 0404 0505 0606     ................
	...

2007011c <apt2>:
2007011c:	ffd8 fd08 ffe2 fdda ffec fe52 fff6 fee8     ..........R.....
2007012c:	0000 ff2e 000a 0005 0014 008c 001e 0118     ................
2007013c:	0028 0150 0032 0226 003c 02b4 0046 0348     (.P.2.&.<...F.H.
2007014c:	0050 03d4 005a 045b 0064 04ec 006e 0574     P...Z.[.d...n.t.
2007015c:	0078 05e9 008c 06d3 00a0 07ee 00b4 094d     x.............M.
2007016c:	00c8 0ab6 00f0 0c76 0118 0e3e 0140 10cc     ......v...>.@...
2007017c:	0168 12e1 01a4 1630                         h.....0.

20070184 <vpt2>:
20070184:	ffd8 fd08 ffe2 fdda ffec fe52 fff6 fee8     ..........R.....
20070194:	0000 ff2e 000a 0005 0014 008c 001e 0118     ................
200701a4:	0028 0150 0032 0226 003c 02b4 0046 0348     (.P.2.&.<...F.H.
200701b4:	0050 03d4 005a 045b 0064 04ec 006e 0574     P...Z.[.d...n.t.
200701c4:	0078 05e9 008c 06d3 00a0 07ee 00b4 094d     x.............M.
200701d4:	00c8 0ab6 00f0 0c76 0118 0e3e 0140 10cc     ......v...>.@...
200701e4:	0168 12e1 01a4 1630                         h.....0.

200701ec <ufp>:
200701ec:	0028 05dc 003c 041a 0046 02bc 0050 028a     (...<...F...P...
200701fc:	005a 0258 0064 0226 006e 01f4 0078 01c2     Z.X.d.&.n...x...
2007020c:	0082 0190 0096 015e 00aa 012c 00c8 00fa     ......^...,.....
2007021c:	00fa 00c8 0154 0096                         ....T...

20070224 <ps_1_2>:
20070224:	fe70 d41d fea2 d611 fed4 da25 ff06 dbbd     p.........%.....
20070234:	ff38 df71 ff6a e16e ff9c e565 ffce e769     8.q.j.n...e...i.
20070244:	0000 eb1c 0032 ed4c 0064 f0a0 0096 f414     ....2.L.d.......
20070254:	00c8 f708 00fa f972 012c fc35 015e ff10     ......r.,.5.^...
20070264:	0190 026c 01c2 0559 01da 06a4 01f4 0719     ..l...Y.........
20070274:	0226 0ace 0258 0e10 028a 1004 02bc 13ec     &...X...........
20070284:	02ee 1676 0320 1964 0000 0000               ..v. .d.....

20070290 <ps_2_2>:
20070290:	fe70 d3b9 fea2 d5ad fed4 d998 ff06 db4a     p.............J.
200702a0:	ff38 def9 ff6a e0f9 ff9c e522 ffce e694     8...j.....".....
200702b0:	0000 ea9a 0032 ec67 0064 f01d 0096 f326     ....2.g.d.....&.
200702c0:	00c8 f61a 00fa f85d 012c fb57 015e fe3e     ......].,.W.^.>.
200702d0:	0190 0190 01c2 044c 01da 05be 01f4 062c     ......L.......,.
200702e0:	0226 09e8 0258 0d20 028a 0f3c 02bc 1388     &...X. ...<.....
200702f0:	02ee 1612 0320 1900 0000 0000               .... .......

200702fc <ps_3_2>:
200702fc:	fe70 d41d fea2 d611 fed4 da25 ff06 dbbd     p.........%.....
2007030c:	ff38 df0d ff6a e172 ff9c e563 ffce e769     8...j.r...c...i.
2007031c:	0000 eb06 0032 ed32 0064 f08a 0096 f3fb     ....2.2.d.......
2007032c:	00c8 f6ce 00fa f941 012c fc1b 015e ff10     ......A.,...^...
2007033c:	0190 026c 01c2 053f 01da 06a4 01f4 0708     ..l...?.........
2007034c:	0226 0ab7 0258 0e10 028a 1004 02bc 13ec     &...X...........
2007035c:	02ee 1676 0320 1964 0352 1c6d 0384 1f40     ..v. .d.R.m...@.
2007036c:	03b6 2260 03e8 25e4 041a 29cc 044c 2db4     ..`"...%...)L..-
2007037c:	047e 3200 04b0 36b0 04e2 3b60 0514 4074     ~..2...6..`;..t@
2007038c:	0546 4588 0578 4b00 05aa 50dc 05dc 571c     F..Ex..K...P...W

2007039c <Cl_DlsisAlarmTable>:
2007039c:	0105 0000 0000 0600 0001 0000 0000 012a     ..............*.
200703ac:	0000 0000 2c00 0001 0000 0000 010c 0000     .....,..........
200703bc:	0000 0d00 0001 0000 0000 0101 0000 0000     ................
200703cc:	1500 0001 0000 0000 0116 0000 0000 1700     ................
200703dc:	0001 0000 0000 0118 0000 0000 2700 0001     .............'..
200703ec:	0000 0000 0128 0000 0000 2100 0001 0000     ....(......!....
200703fc:	0000 0120 0000 0000 2200 0001 0000 0000     .. ......"......
2007040c:	0124 0000 0000 2300 0001 0000 0000 0126     $......#......&.
2007041c:	0000 0000 2500 0001 0000 0000 0107 0000     .....%..........
2007042c:	0001 0800 0001 0100 0000 0113 0000 0000     ................
2007043c:	1400 0001 0000 0000 0111 0000 0000 1200     ................
2007044c:	0001 0000 0000 010f 0000 0000 1000 0001     ................
	...

20070470 <heater_duty>:
20070470:	0555 0000                                   U...

20070474 <prescribed_temp>:
20070474:	0000 4214                                   ...B

20070478 <wait_4_TS2Stability>:
20070478:	00b4                                        ..

2007047a <wait_4_stability>:
2007047a:	00f0                                        ..

2007047c <Prescribed_T2>:
2007047c:	0000 4214                                   ...B

20070480 <Prescribed_T3>:
20070480:	0000 4214                                   ...B

20070484 <SYSTEM_FLOW>:
20070484:	012c 0000                                   ,...

20070488 <gram_test_buffer.9544>:
20070488:	aaaa 0000 5555 0000 aaaa 0000 5555 0000     ....UU......UU..
20070498:	aaaa 0000 5555 0000 aaaa 0000 5555 0000     ....UU......UU..
200704a8:	aaaa 0000 0000 0000                         ........

200704b0 <Cl_MacState>:
200704b0:	0101                                             .

200704b1 <ConsoleSync>:
200704b1:	0001 0000                                        ...

200704b4 <array>:
	...
200704bc:	01d4 0000 0001 0000 01d4 0000 01d4 0000     ................
200704cc:	0002 0000 03a8 0000 01d4 0000 0003 0000     ................
200704dc:	057c 0000 0094 0000 0004 0000 0610 0000     |...............
200704ec:	0094 0000 0005 0000 06a4 0000 0094 0000     ................
200704fc:	0006 0000 0738 0000 0038 0000 0007 0000     ....8...8.......
2007050c:	0770 0000 0038 0000 0008 0000 07a8 0000     p...8...........
2007051c:	005c 0000 0009 0000 0804 0000 002c 0000     \...........,...
2007052c:	000a 0000 0830 0000 0014 0000               ....0.......

20070538 <cond_pot_val_2volts.9568>:
20070538:	02cc 0000                                   ....

2007053c <res_temp>:
2007053c:	6c00 4628 0000 44fa 0800 4629 4000 4503     .l(F...D..)F.@.E
2007054c:	a400 4629 8000 4509 4000 462a c000 450f     ..)F...E.@*F...E
2007055c:	dc00 462a 0000 4516 7400 462b 4000 451c     ..*F...E.t+F.@.E
2007056c:	1000 462c 8000 4522 ac00 462c c000 4528     ..,F.."E..,F..(E
2007057c:	4800 462d 0000 452f e000 462d 4000 4535     .H-F../E..-F.@5E
2007058c:	7c00 462e 8000 453b 1800 462f c000 4541     .|.F..;E../F..AE
2007059c:	b400 462f 0000 4548 4c00 4630 4000 454e     ../F..HE.L0F.@NE
200705ac:	e800 4630 8000 4554 8400 4631 c000 455a     ..0F..TE..1F..ZE
200705bc:	1c00 4632 0000 4561 b800 4632 4000 4567     ..2F..aE..2F.@gE
200705cc:	5400 4633 8000 456d ec00 4633 c000 4573     .T3F..mE..3F..sE
200705dc:	8800 4634 0000 457a 2400 4635 2000 4580     ..4F..zE.$5F. .E
200705ec:	bc00 4635 4000 4583 5800 4636 6000 4586     ..5F.@.E.X6F.`.E
200705fc:	f000 4636 8000 4589 8c00 4637 a000 458c     ..6F...E..7F...E
2007060c:	2400 4638 c000 458f c000 4638 e000 4592     .$8F...E..8F...E
2007061c:	5800 4639 0000 4596 f400 4639 2000 4599     .X9F...E..9F. .E
2007062c:	9000 463a 4000 459c 2800 463b 6000 459f     ..:F.@.E.(;F.`.E
2007063c:	c000 463b 8000 45a2 5c00 463c a000 45a5     ..;F...E.\<F...E
2007064c:	f400 463c c000 45a8 9000 463d e000 45ab     ..<F...E..=F...E
2007065c:	2800 463e 0000 45af c400 463e 2000 45b2     .(>F...E..>F. .E
2007066c:	5c00 463f 4000 45b5 f800 463f 6000 45b8     .\?F.@.E..?F.`.E
2007067c:	9000 4640 8000 45bb 2800 4641 a000 45be     ..@F...E.(AF...E
2007068c:	c400 4641 c000 45c1 5c00 4642 e000 45c4     ..AF...E.\BF...E
2007069c:	f400 4642 0000 45c8 9000 4643 2000 45cb     ..BF...E..CF. .E
200706ac:	2800 4644 4000 45ce c000 4644 6000 45d1     .(DF.@.E..DF.`.E
200706bc:	5c00 4645 8000 45d4 f400 4645 a000 45d7     .\EF...E..EF...E
200706cc:	8c00 4646 c000 45da 2400 4647 e000 45dd     ..FF...E.$GF...E
200706dc:	c000 4647 0000 45e1 5800 4648 2000 45e4     ..GF...E.XHF. .E
200706ec:	f000 4648 4000 45e7 8800 4649 6000 45ea     ..HF.@.E..IF.`.E
200706fc:	2400 464a 8000 45ed bc00 464a a000 45f0     .$JF...E..JF...E
2007070c:	5400 464b c000 45f3 ec00 464b e000 45f6     .TKF...E..KF...E
2007071c:	8400 464c 0000 45fa 1c00 464d 2000 45fd     ..LF...E..MF. .E
2007072c:	b800 464d 2000 4600 5000 464e b000 4601     ..MF. .F.PNF...F
2007073c:	e800 464e 4000 4603 8000 464f d000 4604     ..NF.@.F..OF...F
2007074c:	1800 4650 6000 4606 b000 4650 f000 4607     ..PF.`.F..PF...F
2007075c:	4800 4651 8000 4609 e000 4651 1000 460b     .HQF...F..QF...F
2007076c:	7800 4652 a000 460c 1000 4653 3000 460e     .xRF...F..SF.0.F
2007077c:	a800 4653 c000 460f 0000 0000 0000 0000     ..SF...F........
	...

200709ec <TEST_STUB_ENABLEGATE>:
200709ec:	0101                                             .

200709ed <prev_gate_status>:
200709ed:	0101                                             .

200709ee <Current_sense_trigger>:
200709ee:	0001                                        ..

200709f0 <pwm_period>:
200709f0:	00c8 0000                                   ....

200709f4 <bp_rotataion_marker>:
200709f4:	0001                                        ..

200709f6 <prev_bp_rotataion_marker>:
200709f6:	0001                                        ..

200709f8 <cl_hep_deliveryrate>:
200709f8:	0064 0000                                   d...

200709fc <hep_rotataion_marker>:
200709fc:	0001                                        ..

200709fe <prev_hep_rotataion_marker>:
200709fe:	0001                                        ..

20070a00 <opt>:
20070a00:	0000 0000 86a0 0001 002c 0000               ........,...

20070a0c <nvmarray>:
	...
20070a14:	fffe 0000 0000 0000 0000 0000 0000 0000     ................
20070a24:	fffc 0000 0000 0000 0000 0000 0000 0000     ................
	...

20070a60 <SystemCoreClock>:
20070a60:	0900 003d                                   ..=.

20070a64 <Cl_ConsoleState>:
20070a64:	0101                                             .

20070a65 <g_b_led0_active>:
20070a65:	0101                                             .

20070a66 <Cl_disinfOpenFillTimeOut>:
20070a66:	0001                                        ..

20070a68 <Cl_DisinfAlarmTable>:
20070a68:	012a 0000 0000 2c00 0001 0000 0000 0103     *......,........
20070a78:	0000 0000 0400 0001 0000 0000 0113 0000     ................
20070a88:	0000 1500 0001 0000 0000 0116 0000 0000     ................
20070a98:	1700 0001 0000 0000 0118 0000 0000 2700     ...............'
20070aa8:	0001 0000 0000 0128 0000 0000 0800 0001     ......(.........
20070ab8:	0000 0000                                   ....

20070abc <Cl_DprepAlarmTable>:
20070abc:	0101 0000 0000 0500 0001 0000 0000 0106     ................
20070acc:	0000 0000 0300 0001 0000 0000 0104 0000     ................
20070adc:	0000 2a00 0001 0000 0000 012c 0000 0000     ...*......,.....
20070aec:	0700 0001 0000 0000 0108 0000 0000 0900     ................
20070afc:	0001 0000 0000 010a 0000 0000 0b00 0001     ................
20070b0c:	0000 0000 010c 0000 0000 0d00 0001 0000     ................
20070b1c:	0000 0120 0000 0000 2100 0001 0000 0000     .. ......!......
20070b2c:	0122 0000 0000 2400 0001 0000 0000 0126     "......$......&.
20070b3c:	0000 0000 1500 0001 0000 0000 0116 0000     ................
20070b4c:	0000 1700 0001 0000 0000 0118 0000 0000     ................
20070b5c:	2700 0001 0000 0000 0128 0000 0000 0f00     .'......(.......
20070b6c:	0001 0000 0000 0110 0000 0000 1100 0001     ................
20070b7c:	0000 0000 0112 0000 0000 1300 0001 0000     ................
20070b8c:	0000 0114 0000 0000 3c00 0001 0000 0000     .........<......
	...

20070bac <Cl_RinseAlarmTable>:
20070bac:	0101 0000 0000 0000 0129 0000 0100 0000     ........).......
20070bbc:	012b 0000 0100 0000 013d 0000 0100 0000     +.......=.......
20070bcc:	013e 0000 0100 0000 0103 0000 0100 0000     >...............
20070bdc:	0104 0000 0100 0000 0110 0000 0000 0000     ................
20070bec:	010f 0000 0000 0000 0112 0000 0000 0000     ................
20070bfc:	0111 0000 0000 0000 0114 0000 0000 0000     ................
20070c0c:	0113 0000 0000 0000 0115 0000 0000 0000     ................
20070c1c:	0116 0000 0000 0000 0117 0000 0000 0000     ................
20070c2c:	0118 0000 0000 0000 0127 0000 0000 0000     ........'.......
20070c3c:	0128 0000 0000 0000 0108 0000 0000 0000     (...............
20070c4c:	010c 0000 0000 0000 010d 0000 0000 0000     ................
20070c5c:	010e 0000 0000 0000 0121 0000 0000 0000     ........!.......
20070c6c:	011a 0000 0000 0000                         ........

20070c74 <Cl_StandbyAlarmTable>:
20070c74:	003d 0000 0000 0000 3e00 0000 0000 0000     =........>......
20070c84:	0000 0003 0000 0000 0000 0400 0000 0000     ................
20070c94:	0000 0000                                   ....

20070c98 <cl_stbystate>:
20070c98:	0001 0000 0000 0000                         ........

20070ca0 <impure_data>:
20070ca0:	0000 0000 0f8c 2007 0ff4 2007 105c 2007     ....... ... \.. 
	...
20070cd4:	6334 000a 0000 0000 0000 0000 0000 0000     4c..............
	...
20070d48:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20070d58:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200710c8 <_impure_ptr>:
200710c8:	0ca0 2007                                   ... 

200710cc <__malloc_av_>:
	...
200710d4:	10cc 2007 10cc 2007 10d4 2007 10d4 2007     ... ... ... ... 
200710e4:	10dc 2007 10dc 2007 10e4 2007 10e4 2007     ... ... ... ... 
200710f4:	10ec 2007 10ec 2007 10f4 2007 10f4 2007     ... ... ... ... 
20071104:	10fc 2007 10fc 2007 1104 2007 1104 2007     ... ... ... ... 
20071114:	110c 2007 110c 2007 1114 2007 1114 2007     ... ... ... ... 
20071124:	111c 2007 111c 2007 1124 2007 1124 2007     ... ... $.. $.. 
20071134:	112c 2007 112c 2007 1134 2007 1134 2007     ,.. ,.. 4.. 4.. 
20071144:	113c 2007 113c 2007 1144 2007 1144 2007     <.. <.. D.. D.. 
20071154:	114c 2007 114c 2007 1154 2007 1154 2007     L.. L.. T.. T.. 
20071164:	115c 2007 115c 2007 1164 2007 1164 2007     \.. \.. d.. d.. 
20071174:	116c 2007 116c 2007 1174 2007 1174 2007     l.. l.. t.. t.. 
20071184:	117c 2007 117c 2007 1184 2007 1184 2007     |.. |.. ... ... 
20071194:	118c 2007 118c 2007 1194 2007 1194 2007     ... ... ... ... 
200711a4:	119c 2007 119c 2007 11a4 2007 11a4 2007     ... ... ... ... 
200711b4:	11ac 2007 11ac 2007 11b4 2007 11b4 2007     ... ... ... ... 
200711c4:	11bc 2007 11bc 2007 11c4 2007 11c4 2007     ... ... ... ... 
200711d4:	11cc 2007 11cc 2007 11d4 2007 11d4 2007     ... ... ... ... 
200711e4:	11dc 2007 11dc 2007 11e4 2007 11e4 2007     ... ... ... ... 
200711f4:	11ec 2007 11ec 2007 11f4 2007 11f4 2007     ... ... ... ... 
20071204:	11fc 2007 11fc 2007 1204 2007 1204 2007     ... ... ... ... 
20071214:	120c 2007 120c 2007 1214 2007 1214 2007     ... ... ... ... 
20071224:	121c 2007 121c 2007 1224 2007 1224 2007     ... ... $.. $.. 
20071234:	122c 2007 122c 2007 1234 2007 1234 2007     ,.. ,.. 4.. 4.. 
20071244:	123c 2007 123c 2007 1244 2007 1244 2007     <.. <.. D.. D.. 
20071254:	124c 2007 124c 2007 1254 2007 1254 2007     L.. L.. T.. T.. 
20071264:	125c 2007 125c 2007 1264 2007 1264 2007     \.. \.. d.. d.. 
20071274:	126c 2007 126c 2007 1274 2007 1274 2007     l.. l.. t.. t.. 
20071284:	127c 2007 127c 2007 1284 2007 1284 2007     |.. |.. ... ... 
20071294:	128c 2007 128c 2007 1294 2007 1294 2007     ... ... ... ... 
200712a4:	129c 2007 129c 2007 12a4 2007 12a4 2007     ... ... ... ... 
200712b4:	12ac 2007 12ac 2007 12b4 2007 12b4 2007     ... ... ... ... 
200712c4:	12bc 2007 12bc 2007 12c4 2007 12c4 2007     ... ... ... ... 
200712d4:	12cc 2007 12cc 2007 12d4 2007 12d4 2007     ... ... ... ... 
200712e4:	12dc 2007 12dc 2007 12e4 2007 12e4 2007     ... ... ... ... 
200712f4:	12ec 2007 12ec 2007 12f4 2007 12f4 2007     ... ... ... ... 
20071304:	12fc 2007 12fc 2007 1304 2007 1304 2007     ... ... ... ... 
20071314:	130c 2007 130c 2007 1314 2007 1314 2007     ... ... ... ... 
20071324:	131c 2007 131c 2007 1324 2007 1324 2007     ... ... $.. $.. 
20071334:	132c 2007 132c 2007 1334 2007 1334 2007     ,.. ,.. 4.. 4.. 
20071344:	133c 2007 133c 2007 1344 2007 1344 2007     <.. <.. D.. D.. 
20071354:	134c 2007 134c 2007 1354 2007 1354 2007     L.. L.. T.. T.. 
20071364:	135c 2007 135c 2007 1364 2007 1364 2007     \.. \.. d.. d.. 
20071374:	136c 2007 136c 2007 1374 2007 1374 2007     l.. l.. t.. t.. 
20071384:	137c 2007 137c 2007 1384 2007 1384 2007     |.. |.. ... ... 
20071394:	138c 2007 138c 2007 1394 2007 1394 2007     ... ... ... ... 
200713a4:	139c 2007 139c 2007 13a4 2007 13a4 2007     ... ... ... ... 
200713b4:	13ac 2007 13ac 2007 13b4 2007 13b4 2007     ... ... ... ... 
200713c4:	13bc 2007 13bc 2007 13c4 2007 13c4 2007     ... ... ... ... 
200713d4:	13cc 2007 13cc 2007 13d4 2007 13d4 2007     ... ... ... ... 
200713e4:	13dc 2007 13dc 2007 13e4 2007 13e4 2007     ... ... ... ... 
200713f4:	13ec 2007 13ec 2007 13f4 2007 13f4 2007     ... ... ... ... 
20071404:	13fc 2007 13fc 2007 1404 2007 1404 2007     ... ... ... ... 
20071414:	140c 2007 140c 2007 1414 2007 1414 2007     ... ... ... ... 
20071424:	141c 2007 141c 2007 1424 2007 1424 2007     ... ... $.. $.. 
20071434:	142c 2007 142c 2007 1434 2007 1434 2007     ,.. ,.. 4.. 4.. 
20071444:	143c 2007 143c 2007 1444 2007 1444 2007     <.. <.. D.. D.. 
20071454:	144c 2007 144c 2007 1454 2007 1454 2007     L.. L.. T.. T.. 
20071464:	145c 2007 145c 2007 1464 2007 1464 2007     \.. \.. d.. d.. 
20071474:	146c 2007 146c 2007 1474 2007 1474 2007     l.. l.. t.. t.. 
20071484:	147c 2007 147c 2007 1484 2007 1484 2007     |.. |.. ... ... 
20071494:	148c 2007 148c 2007 1494 2007 1494 2007     ... ... ... ... 
200714a4:	149c 2007 149c 2007 14a4 2007 14a4 2007     ... ... ... ... 
200714b4:	14ac 2007 14ac 2007 14b4 2007 14b4 2007     ... ... ... ... 
200714c4:	14bc 2007 14bc 2007 14c4 2007 14c4 2007     ... ... ... ... 

200714d4 <__malloc_trim_threshold>:
200714d4:	0000 0002                                   ....

200714d8 <__malloc_sbrk_base>:
200714d8:	ffff ffff                                   ....
