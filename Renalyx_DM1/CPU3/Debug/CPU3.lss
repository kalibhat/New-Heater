
CPU3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000067e4  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000867e4  000867e4  000167e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c6c  20070000  000867ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000005d8  20070c6c  00087458  00020c6c  2**2
                  ALLOC
  4 .stack        00002004  20071244  00087a30  00020c6c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020c6c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020c95  2**0
                  CONTENTS, READONLY
  7 .debug_info   00014b2c  00000000  00000000  00020cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e86  00000000  00000000  0003581a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000073de  00000000  00000000  000386a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d70  00000000  00000000  0003fa7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000be8  00000000  00000000  000407ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009cd2  00000000  00000000  000413d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00016e62  00000000  00000000  0004b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00062514  00000000  00000000  00061f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004234  00000000  00000000  000c4420  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20073248 	.word	0x20073248
   80004:	00083071 	.word	0x00083071
   80008:	00083069 	.word	0x00083069
   8000c:	00083069 	.word	0x00083069
   80010:	00083069 	.word	0x00083069
   80014:	00083069 	.word	0x00083069
   80018:	00083069 	.word	0x00083069
	...
   8002c:	00083069 	.word	0x00083069
   80030:	00083069 	.word	0x00083069
   80034:	00000000 	.word	0x00000000
   80038:	00083069 	.word	0x00083069
   8003c:	00083069 	.word	0x00083069
   80040:	00083069 	.word	0x00083069
   80044:	00083069 	.word	0x00083069
   80048:	00083069 	.word	0x00083069
   8004c:	00083069 	.word	0x00083069
   80050:	00083069 	.word	0x00083069
   80054:	00083069 	.word	0x00083069
   80058:	00083069 	.word	0x00083069
   8005c:	00083069 	.word	0x00083069
   80060:	00081c8d 	.word	0x00081c8d
   80064:	00083069 	.word	0x00083069
   80068:	00000000 	.word	0x00000000
   8006c:	00082ced 	.word	0x00082ced
   80070:	00082d05 	.word	0x00082d05
   80074:	00082d1d 	.word	0x00082d1d
   80078:	00082d35 	.word	0x00082d35
	...
   80084:	00083069 	.word	0x00083069
   80088:	00083069 	.word	0x00083069
   8008c:	00083069 	.word	0x00083069
   80090:	00083069 	.word	0x00083069
   80094:	00083069 	.word	0x00083069
   80098:	00083069 	.word	0x00083069
   8009c:	00083069 	.word	0x00083069
   800a0:	00083069 	.word	0x00083069
   800a4:	00000000 	.word	0x00000000
   800a8:	00083069 	.word	0x00083069
   800ac:	00080a59 	.word	0x00080a59
   800b0:	00080b31 	.word	0x00080b31
   800b4:	00080c09 	.word	0x00080c09
   800b8:	00080c41 	.word	0x00080c41
   800bc:	00083069 	.word	0x00083069
   800c0:	00083069 	.word	0x00083069
   800c4:	00080c59 	.word	0x00080c59
   800c8:	00083069 	.word	0x00083069
   800cc:	00083069 	.word	0x00083069
   800d0:	00083069 	.word	0x00083069
   800d4:	00083069 	.word	0x00083069
   800d8:	00083069 	.word	0x00083069
   800dc:	00083069 	.word	0x00083069
   800e0:	00083069 	.word	0x00083069
   800e4:	00083069 	.word	0x00083069
   800e8:	00083069 	.word	0x00083069
   800ec:	000801b5 	.word	0x000801b5
   800f0:	00083069 	.word	0x00083069

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070c6c 	.word	0x20070c6c
   80110:	00000000 	.word	0x00000000
   80114:	000867ec 	.word	0x000867ec

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	20070c70 	.word	0x20070c70
   80144:	000867ec 	.word	0x000867ec
   80148:	000867ec 	.word	0x000867ec
   8014c:	00000000 	.word	0x00000000

00080150 <CPU3_D_INIT_CLOCK>:
 *  Author: wid7
 */ 
#include "D_CLOCK.h"

void CPU3_D_INIT_CLOCK()
{
   80150:	b580      	push	{r7, lr}
   80152:	af00      	add	r7, sp, #0
	sysclk_init();
   80154:	4b07      	ldr	r3, [pc, #28]	; (80174 <CPU3_D_INIT_CLOCK+0x24>)
   80156:	4798      	blx	r3
	PMC->PMC_WPMR  = 0x504D4300;
   80158:	4b07      	ldr	r3, [pc, #28]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   8015a:	4a08      	ldr	r2, [pc, #32]	; (8017c <CPU3_D_INIT_CLOCK+0x2c>)
   8015c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 = 0xF8407900;
   80160:	4b05      	ldr	r3, [pc, #20]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   80162:	4a07      	ldr	r2, [pc, #28]	; (80180 <CPU3_D_INIT_CLOCK+0x30>)
   80164:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER1 = 0x0000083F;
   80166:	4b04      	ldr	r3, [pc, #16]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   80168:	f640 023f 	movw	r2, #2111	; 0x83f
   8016c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   80170:	bf00      	nop
   80172:	bd80      	pop	{r7, pc}
   80174:	0008271d 	.word	0x0008271d
   80178:	400e0600 	.word	0x400e0600
   8017c:	504d4300 	.word	0x504d4300
   80180:	f8407900 	.word	0xf8407900

00080184 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80184:	b480      	push	{r7}
   80186:	b083      	sub	sp, #12
   80188:	af00      	add	r7, sp, #0
   8018a:	4603      	mov	r3, r0
   8018c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8018e:	4908      	ldr	r1, [pc, #32]	; (801b0 <NVIC_EnableIRQ+0x2c>)
   80190:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80194:	095b      	lsrs	r3, r3, #5
   80196:	79fa      	ldrb	r2, [r7, #7]
   80198:	f002 021f 	and.w	r2, r2, #31
   8019c:	2001      	movs	r0, #1
   8019e:	fa00 f202 	lsl.w	r2, r0, r2
   801a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   801a6:	bf00      	nop
   801a8:	370c      	adds	r7, #12
   801aa:	46bd      	mov	sp, r7
   801ac:	bc80      	pop	{r7}
   801ae:	4770      	bx	lr
   801b0:	e000e100 	.word	0xe000e100

000801b4 <CAN0_Handler>:
can_mb_conf_t can0_mailbox;
volatile uint32_t g_ul_recv_status = 0;
temp_struct_type  temp_struct;


void CAN0_Handler(void)   {
   801b4:	b580      	push	{r7, lr}
   801b6:	b082      	sub	sp, #8
   801b8:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	ul_status = (CAN0 -> CAN_SR);
   801ba:	4b11      	ldr	r3, [pc, #68]	; (80200 <CAN0_Handler+0x4c>)
   801bc:	691b      	ldr	r3, [r3, #16]
   801be:	607b      	str	r3, [r7, #4]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   801c0:	687b      	ldr	r3, [r7, #4]
   801c2:	b2db      	uxtb	r3, r3
   801c4:	2b00      	cmp	r3, #0
   801c6:	d017      	beq.n	801f8 <CAN0_Handler+0x44>
		ul_status = CAN0->CAN_MB[1].CAN_MSR ;
   801c8:	4b0d      	ldr	r3, [pc, #52]	; (80200 <CAN0_Handler+0x4c>)
   801ca:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
   801ce:	607b      	str	r3, [r7, #4]
		if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   801d6:	2b00      	cmp	r3, #0
   801d8:	d00e      	beq.n	801f8 <CAN0_Handler+0x44>
			can0_mailbox.ul_mb_idx = 1;
   801da:	4b0a      	ldr	r3, [pc, #40]	; (80204 <CAN0_Handler+0x50>)
   801dc:	2201      	movs	r2, #1
   801de:	601a      	str	r2, [r3, #0]
			can0_mailbox.ul_status = ul_status;
   801e0:	4a08      	ldr	r2, [pc, #32]	; (80204 <CAN0_Handler+0x50>)
   801e2:	687b      	ldr	r3, [r7, #4]
   801e4:	6093      	str	r3, [r2, #8]
			dd_can_mailbox_read(&can0_mailbox);
   801e6:	4807      	ldr	r0, [pc, #28]	; (80204 <CAN0_Handler+0x50>)
   801e8:	4b07      	ldr	r3, [pc, #28]	; (80208 <CAN0_Handler+0x54>)
   801ea:	4798      	blx	r3
			dd_can_extract_mailbox_data(&can0_mailbox);
   801ec:	4805      	ldr	r0, [pc, #20]	; (80204 <CAN0_Handler+0x50>)
   801ee:	4b07      	ldr	r3, [pc, #28]	; (8020c <CAN0_Handler+0x58>)
   801f0:	4798      	blx	r3
			g_ul_recv_status = 1;
   801f2:	4b07      	ldr	r3, [pc, #28]	; (80210 <CAN0_Handler+0x5c>)
   801f4:	2201      	movs	r2, #1
   801f6:	601a      	str	r2, [r3, #0]
		}
		
	}
}
   801f8:	bf00      	nop
   801fa:	3708      	adds	r7, #8
   801fc:	46bd      	mov	sp, r7
   801fe:	bd80      	pop	{r7, pc}
   80200:	400b4000 	.word	0x400b4000
   80204:	20070dc8 	.word	0x20070dc8
   80208:	0008042d 	.word	0x0008042d
   8020c:	00080215 	.word	0x00080215
   80210:	20070c98 	.word	0x20070c98

00080214 <dd_can_extract_mailbox_data>:
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}


static void dd_can_extract_mailbox_data(can_mb_conf_t *p_mailbox )   {
   80214:	b480      	push	{r7}
   80216:	b085      	sub	sp, #20
   80218:	af00      	add	r7, sp, #0
   8021a:	6078      	str	r0, [r7, #4]
		 uint32_t status ;	
		 uint32_t ul_reg;
	     uint8_t master_command_byte, master_data_byte;
	
	   temp_struct.temp_reg_32 = (p_mailbox->ul_datal);
   8021c:	687b      	ldr	r3, [r7, #4]
   8021e:	699b      	ldr	r3, [r3, #24]
   80220:	4a76      	ldr	r2, [pc, #472]	; (803fc <dd_can_extract_mailbox_data+0x1e8>)
   80222:	6013      	str	r3, [r2, #0]
	   master_command_byte  =  temp_struct.temp_reg_8[1]  ;
   80224:	4b75      	ldr	r3, [pc, #468]	; (803fc <dd_can_extract_mailbox_data+0x1e8>)
   80226:	785b      	ldrb	r3, [r3, #1]
   80228:	73fb      	strb	r3, [r7, #15]
	   master_data_byte     =  temp_struct.temp_reg_8[1]  ;
   8022a:	4b74      	ldr	r3, [pc, #464]	; (803fc <dd_can_extract_mailbox_data+0x1e8>)
   8022c:	785b      	ldrb	r3, [r3, #1]
   8022e:	73bb      	strb	r3, [r7, #14]
	   sv_rxrdy_flag = true;
   80230:	4b73      	ldr	r3, [pc, #460]	; (80400 <dd_can_extract_mailbox_data+0x1ec>)
   80232:	2201      	movs	r2, #1
   80234:	701a      	strb	r2, [r3, #0]
	   switch (state)  {
   80236:	4b73      	ldr	r3, [pc, #460]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   80238:	781b      	ldrb	r3, [r3, #0]
   8023a:	2b00      	cmp	r3, #0
   8023c:	d000      	beq.n	80240 <dd_can_extract_mailbox_data+0x2c>
				
				default:
				break;
			  }		  
		   default:
		   break;
   8023e:	e0d7      	b.n	803f0 <dd_can_extract_mailbox_data+0x1dc>
	   master_command_byte  =  temp_struct.temp_reg_8[1]  ;
	   master_data_byte     =  temp_struct.temp_reg_8[1]  ;
	   sv_rxrdy_flag = true;
	   switch (state)  {
		   case CAN_IDLE:		
		      data[data_count] = master_command_byte;
   80240:	4b71      	ldr	r3, [pc, #452]	; (80408 <dd_can_extract_mailbox_data+0x1f4>)
   80242:	781b      	ldrb	r3, [r3, #0]
   80244:	b2db      	uxtb	r3, r3
   80246:	4619      	mov	r1, r3
   80248:	4a70      	ldr	r2, [pc, #448]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   8024a:	7bfb      	ldrb	r3, [r7, #15]
   8024c:	5453      	strb	r3, [r2, r1]
		      data_buff[data_count] = data[data_count];		
   8024e:	4b6e      	ldr	r3, [pc, #440]	; (80408 <dd_can_extract_mailbox_data+0x1f4>)
   80250:	781b      	ldrb	r3, [r3, #0]
   80252:	b2db      	uxtb	r3, r3
   80254:	461a      	mov	r2, r3
   80256:	4b6c      	ldr	r3, [pc, #432]	; (80408 <dd_can_extract_mailbox_data+0x1f4>)
   80258:	781b      	ldrb	r3, [r3, #0]
   8025a:	b2db      	uxtb	r3, r3
   8025c:	4619      	mov	r1, r3
   8025e:	4b6b      	ldr	r3, [pc, #428]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   80260:	5c5b      	ldrb	r3, [r3, r1]
   80262:	b2d9      	uxtb	r1, r3
   80264:	4b6a      	ldr	r3, [pc, #424]	; (80410 <dd_can_extract_mailbox_data+0x1fc>)
   80266:	5499      	strb	r1, [r3, r2]
			  data_buffer[data_count]= data_buff[data_count];
   80268:	4b67      	ldr	r3, [pc, #412]	; (80408 <dd_can_extract_mailbox_data+0x1f4>)
   8026a:	781b      	ldrb	r3, [r3, #0]
   8026c:	b2db      	uxtb	r3, r3
   8026e:	461a      	mov	r2, r3
   80270:	4b65      	ldr	r3, [pc, #404]	; (80408 <dd_can_extract_mailbox_data+0x1f4>)
   80272:	781b      	ldrb	r3, [r3, #0]
   80274:	b2db      	uxtb	r3, r3
   80276:	4619      	mov	r1, r3
   80278:	4b65      	ldr	r3, [pc, #404]	; (80410 <dd_can_extract_mailbox_data+0x1fc>)
   8027a:	5c5b      	ldrb	r3, [r3, r1]
   8027c:	b2d9      	uxtb	r1, r3
   8027e:	4b65      	ldr	r3, [pc, #404]	; (80414 <dd_can_extract_mailbox_data+0x200>)
   80280:	5499      	strb	r1, [r3, r2]
			  
			  Master_cpu_command_type diff;
			  diff = data_buff[0];
   80282:	4b63      	ldr	r3, [pc, #396]	; (80410 <dd_can_extract_mailbox_data+0x1fc>)
   80284:	781b      	ldrb	r3, [r3, #0]
   80286:	737b      	strb	r3, [r7, #13]
		      start_c[0] =diff;
   80288:	4a63      	ldr	r2, [pc, #396]	; (80418 <dd_can_extract_mailbox_data+0x204>)
   8028a:	7b7b      	ldrb	r3, [r7, #13]
   8028c:	7013      	strb	r3, [r2, #0]
		      switch (diff)	
   8028e:	7b7b      	ldrb	r3, [r7, #13]
   80290:	3b01      	subs	r3, #1
   80292:	2b0c      	cmp	r3, #12
   80294:	f200 80ab 	bhi.w	803ee <dd_can_extract_mailbox_data+0x1da>
   80298:	a201      	add	r2, pc, #4	; (adr r2, 802a0 <dd_can_extract_mailbox_data+0x8c>)
   8029a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8029e:	bf00      	nop
   802a0:	00080319 	.word	0x00080319
   802a4:	0008033b 	.word	0x0008033b
   802a8:	0008035d 	.word	0x0008035d
   802ac:	000803b7 	.word	0x000803b7
   802b0:	000803c5 	.word	0x000803c5
   802b4:	000803d3 	.word	0x000803d3
   802b8:	000803e1 	.word	0x000803e1
   802bc:	0008039b 	.word	0x0008039b
   802c0:	000803a9 	.word	0x000803a9
   802c4:	0008037f 	.word	0x0008037f
   802c8:	0008038d 	.word	0x0008038d
   802cc:	000802d5 	.word	0x000802d5
   802d0:	000802f7 	.word	0x000802f7
			  {
				  case PROP_START_ACID_PUMP:
				  			          test =0;
   802d4:	4b51      	ldr	r3, [pc, #324]	; (8041c <dd_can_extract_mailbox_data+0x208>)
   802d6:	2200      	movs	r2, #0
   802d8:	701a      	strb	r2, [r3, #0]
				  			          count_start++;
   802da:	4b51      	ldr	r3, [pc, #324]	; (80420 <dd_can_extract_mailbox_data+0x20c>)
   802dc:	881b      	ldrh	r3, [r3, #0]
   802de:	b29b      	uxth	r3, r3
   802e0:	3301      	adds	r3, #1
   802e2:	b29a      	uxth	r2, r3
   802e4:	4b4e      	ldr	r3, [pc, #312]	; (80420 <dd_can_extract_mailbox_data+0x20c>)
   802e6:	801a      	strh	r2, [r3, #0]
				  			          flag_buff = 1;
   802e8:	4b4e      	ldr	r3, [pc, #312]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   802ea:	2201      	movs	r2, #1
   802ec:	701a      	strb	r2, [r3, #0]
				  			          state = CAN_IDLE;
   802ee:	4b45      	ldr	r3, [pc, #276]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   802f0:	2200      	movs	r2, #0
   802f2:	701a      	strb	r2, [r3, #0]
				  
				  break;
   802f4:	e07c      	b.n	803f0 <dd_can_extract_mailbox_data+0x1dc>
				  
				  case PROP_START_BICARB_PUMP:
				  			          test =0;
   802f6:	4b49      	ldr	r3, [pc, #292]	; (8041c <dd_can_extract_mailbox_data+0x208>)
   802f8:	2200      	movs	r2, #0
   802fa:	701a      	strb	r2, [r3, #0]
				  			          count_start++;
   802fc:	4b48      	ldr	r3, [pc, #288]	; (80420 <dd_can_extract_mailbox_data+0x20c>)
   802fe:	881b      	ldrh	r3, [r3, #0]
   80300:	b29b      	uxth	r3, r3
   80302:	3301      	adds	r3, #1
   80304:	b29a      	uxth	r2, r3
   80306:	4b46      	ldr	r3, [pc, #280]	; (80420 <dd_can_extract_mailbox_data+0x20c>)
   80308:	801a      	strh	r2, [r3, #0]
				  			          flag_buff = 1;
   8030a:	4b46      	ldr	r3, [pc, #280]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   8030c:	2201      	movs	r2, #1
   8030e:	701a      	strb	r2, [r3, #0]
				  			          state = CAN_IDLE;
   80310:	4b3c      	ldr	r3, [pc, #240]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   80312:	2200      	movs	r2, #0
   80314:	701a      	strb	r2, [r3, #0]
				  
				  break;
   80316:	e06b      	b.n	803f0 <dd_can_extract_mailbox_data+0x1dc>
			     case PROP_START_ALIGMENT:
			          test =0;
   80318:	4b40      	ldr	r3, [pc, #256]	; (8041c <dd_can_extract_mailbox_data+0x208>)
   8031a:	2200      	movs	r2, #0
   8031c:	701a      	strb	r2, [r3, #0]
					  count_start++;
   8031e:	4b40      	ldr	r3, [pc, #256]	; (80420 <dd_can_extract_mailbox_data+0x20c>)
   80320:	881b      	ldrh	r3, [r3, #0]
   80322:	b29b      	uxth	r3, r3
   80324:	3301      	adds	r3, #1
   80326:	b29a      	uxth	r2, r3
   80328:	4b3d      	ldr	r3, [pc, #244]	; (80420 <dd_can_extract_mailbox_data+0x20c>)
   8032a:	801a      	strh	r2, [r3, #0]
			          flag_buff = 1;
   8032c:	4b3d      	ldr	r3, [pc, #244]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   8032e:	2201      	movs	r2, #1
   80330:	701a      	strb	r2, [r3, #0]
			          state = CAN_IDLE;
   80332:	4b34      	ldr	r3, [pc, #208]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   80334:	2200      	movs	r2, #0
   80336:	701a      	strb	r2, [r3, #0]
			    break;
   80338:	e05a      	b.n	803f0 <dd_can_extract_mailbox_data+0x1dc>
				
			    case PROP_START_MIXING:
			        test=0;
   8033a:	4b38      	ldr	r3, [pc, #224]	; (8041c <dd_can_extract_mailbox_data+0x208>)
   8033c:	2200      	movs	r2, #0
   8033e:	701a      	strb	r2, [r3, #0]
					count_start++;					
   80340:	4b37      	ldr	r3, [pc, #220]	; (80420 <dd_can_extract_mailbox_data+0x20c>)
   80342:	881b      	ldrh	r3, [r3, #0]
   80344:	b29b      	uxth	r3, r3
   80346:	3301      	adds	r3, #1
   80348:	b29a      	uxth	r2, r3
   8034a:	4b35      	ldr	r3, [pc, #212]	; (80420 <dd_can_extract_mailbox_data+0x20c>)
   8034c:	801a      	strh	r2, [r3, #0]
			        flag_buff = 1;
   8034e:	4b35      	ldr	r3, [pc, #212]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   80350:	2201      	movs	r2, #1
   80352:	701a      	strb	r2, [r3, #0]
			        state = CAN_IDLE;
   80354:	4b2b      	ldr	r3, [pc, #172]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   80356:	2200      	movs	r2, #0
   80358:	701a      	strb	r2, [r3, #0]
			    break;
   8035a:	e049      	b.n	803f0 <dd_can_extract_mailbox_data+0x1dc>
				
			    case PROP_STOP_MIXING:
			        test =0;
   8035c:	4b2f      	ldr	r3, [pc, #188]	; (8041c <dd_can_extract_mailbox_data+0x208>)
   8035e:	2200      	movs	r2, #0
   80360:	701a      	strb	r2, [r3, #0]
					count_stop++;
   80362:	4b31      	ldr	r3, [pc, #196]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   80364:	881b      	ldrh	r3, [r3, #0]
   80366:	b29b      	uxth	r3, r3
   80368:	3301      	adds	r3, #1
   8036a:	b29a      	uxth	r2, r3
   8036c:	4b2e      	ldr	r3, [pc, #184]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   8036e:	801a      	strh	r2, [r3, #0]
			        flag_buff = 1;
   80370:	4b2c      	ldr	r3, [pc, #176]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   80372:	2201      	movs	r2, #1
   80374:	701a      	strb	r2, [r3, #0]
			        state = CAN_IDLE;
   80376:	4b23      	ldr	r3, [pc, #140]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   80378:	2200      	movs	r2, #0
   8037a:	701a      	strb	r2, [r3, #0]
			    break;
   8037c:	e038      	b.n	803f0 <dd_can_extract_mailbox_data+0x1dc>
			       state = IDLE;
			    break;*/
				
			    case PROP_COMPLETED:
			        //flag = 1;
			          flag_buff = 1;
   8037e:	4b29      	ldr	r3, [pc, #164]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   80380:	2201      	movs	r2, #1
   80382:	701a      	strb	r2, [r3, #0]
			          state = CAN_IDLE;
   80384:	4b1f      	ldr	r3, [pc, #124]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   80386:	2200      	movs	r2, #0
   80388:	701a      	strb	r2, [r3, #0]
			    break;
   8038a:	e031      	b.n	803f0 <dd_can_extract_mailbox_data+0x1dc>
				
			    case PROP_RECOVER:
			         //flag = 1;
			         flag_buff = 1;
   8038c:	4b25      	ldr	r3, [pc, #148]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   8038e:	2201      	movs	r2, #1
   80390:	701a      	strb	r2, [r3, #0]
			         state = CAN_IDLE;
   80392:	4b1c      	ldr	r3, [pc, #112]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   80394:	2200      	movs	r2, #0
   80396:	701a      	strb	r2, [r3, #0]
			    break;
   80398:	e02a      	b.n	803f0 <dd_can_extract_mailbox_data+0x1dc>
			    case PROP_START_OPENFILL:
			        flag_buff=1;
   8039a:	4b22      	ldr	r3, [pc, #136]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   8039c:	2201      	movs	r2, #1
   8039e:	701a      	strb	r2, [r3, #0]
					state= CAN_IDLE;		
   803a0:	4b18      	ldr	r3, [pc, #96]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   803a2:	2200      	movs	r2, #0
   803a4:	701a      	strb	r2, [r3, #0]
			    break;
   803a6:	e023      	b.n	803f0 <dd_can_extract_mailbox_data+0x1dc>
				
				
			    case PROP_STOP_OPENFILL:
				    flag_buff=1;
   803a8:	4b1e      	ldr	r3, [pc, #120]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   803aa:	2201      	movs	r2, #1
   803ac:	701a      	strb	r2, [r3, #0]
				    state= CAN_IDLE;
   803ae:	4b15      	ldr	r3, [pc, #84]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   803b0:	2200      	movs	r2, #0
   803b2:	701a      	strb	r2, [r3, #0]
				
				break;
   803b4:	e01c      	b.n	803f0 <dd_can_extract_mailbox_data+0x1dc>
				
				
				case PROP_START_DISINFECTION:
				   flag_buff=1;
   803b6:	4b1b      	ldr	r3, [pc, #108]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   803b8:	2201      	movs	r2, #1
   803ba:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803bc:	4b11      	ldr	r3, [pc, #68]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   803be:	2200      	movs	r2, #0
   803c0:	701a      	strb	r2, [r3, #0]
				break;
   803c2:	e015      	b.n	803f0 <dd_can_extract_mailbox_data+0x1dc>
				
				
				case PROP_STOP_DISINFECTION:
				   flag_buff=1;
   803c4:	4b17      	ldr	r3, [pc, #92]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   803c6:	2201      	movs	r2, #1
   803c8:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803ca:	4b0e      	ldr	r3, [pc, #56]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   803cc:	2200      	movs	r2, #0
   803ce:	701a      	strb	r2, [r3, #0]
				break;
   803d0:	e00e      	b.n	803f0 <dd_can_extract_mailbox_data+0x1dc>
				
				case PROP_START_CITRIC_DISINFECTION:
				   flag_buff=1;
   803d2:	4b14      	ldr	r3, [pc, #80]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   803d4:	2201      	movs	r2, #1
   803d6:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803d8:	4b0a      	ldr	r3, [pc, #40]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   803da:	2200      	movs	r2, #0
   803dc:	701a      	strb	r2, [r3, #0]
				break;
   803de:	e007      	b.n	803f0 <dd_can_extract_mailbox_data+0x1dc>
				
				case PROP_STOP_CITRIC_DISINFECTION:
				flag_buff=1;
   803e0:	4b10      	ldr	r3, [pc, #64]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   803e2:	2201      	movs	r2, #1
   803e4:	701a      	strb	r2, [r3, #0]
				state= CAN_IDLE;
   803e6:	4b07      	ldr	r3, [pc, #28]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   803e8:	2200      	movs	r2, #0
   803ea:	701a      	strb	r2, [r3, #0]
				break;
   803ec:	e000      	b.n	803f0 <dd_can_extract_mailbox_data+0x1dc>
				
				default:
				break;
   803ee:	bf00      	nop
			  }		  
		   default:
		   break;
   803f0:	bf00      	nop
		   
	 }
}
   803f2:	bf00      	nop
   803f4:	3714      	adds	r7, #20
   803f6:	46bd      	mov	sp, r7
   803f8:	bc80      	pop	{r7}
   803fa:	4770      	bx	lr
   803fc:	20070dc0 	.word	0x20070dc0
   80400:	20070c93 	.word	0x20070c93
   80404:	20070c88 	.word	0x20070c88
   80408:	20070c8e 	.word	0x20070c8e
   8040c:	20070c90 	.word	0x20070c90
   80410:	20070c94 	.word	0x20070c94
   80414:	20070dfc 	.word	0x20070dfc
   80418:	20070dc4 	.word	0x20070dc4
   8041c:	20070c97 	.word	0x20070c97
   80420:	20070c8a 	.word	0x20070c8a
   80424:	20070de8 	.word	0x20070de8
   80428:	20070c8c 	.word	0x20070c8c

0008042c <dd_can_mailbox_read>:
	
	



static uint32_t dd_can_mailbox_read(can_mb_conf_t *p_mailbox)   {
   8042c:	b480      	push	{r7}
   8042e:	b087      	sub	sp, #28
   80430:	af00      	add	r7, sp, #0
   80432:	6078      	str	r0, [r7, #4]

	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   80434:	2300      	movs	r3, #0
   80436:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80438:	687b      	ldr	r3, [r7, #4]
   8043a:	681b      	ldr	r3, [r3, #0]
   8043c:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   8043e:	687b      	ldr	r3, [r7, #4]
   80440:	689b      	ldr	r3, [r3, #8]
   80442:	60fb      	str	r3, [r7, #12]
	 /* Check whether there is overwriting happening in Receive with * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	 
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {	ul_retval = CAN_MAILBOX_RX_OVER;	}
   80444:	68fb      	ldr	r3, [r7, #12]
   80446:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   8044a:	2b00      	cmp	r3, #0
   8044c:	d006      	beq.n	8045c <dd_can_mailbox_read+0x30>
   8044e:	68fb      	ldr	r3, [r7, #12]
   80450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80454:	2b00      	cmp	r3, #0
   80456:	d001      	beq.n	8045c <dd_can_mailbox_read+0x30>
   80458:	2302      	movs	r3, #2
   8045a:	617b      	str	r3, [r7, #20]

	/* Read the message family ID. */
	p_mailbox->ul_fid =	CAN0->CAN_MB[uc_index].CAN_MFID & CAN_MFID_MFID_Msk;	
   8045c:	4a26      	ldr	r2, [pc, #152]	; (804f8 <dd_can_mailbox_read+0xcc>)
   8045e:	7cfb      	ldrb	r3, [r7, #19]
   80460:	015b      	lsls	r3, r3, #5
   80462:	4413      	add	r3, r2
   80464:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   80468:	681b      	ldr	r3, [r3, #0]
   8046a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8046e:	687b      	ldr	r3, [r7, #4]
   80470:	615a      	str	r2, [r3, #20]

	/* Read received data length. */
	p_mailbox->uc_length = (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   80472:	68fb      	ldr	r3, [r7, #12]
   80474:	0c1b      	lsrs	r3, r3, #16
   80476:	b2db      	uxtb	r3, r3
   80478:	f003 030f 	and.w	r3, r3, #15
   8047c:	b2da      	uxtb	r2, r3
   8047e:	687b      	ldr	r3, [r7, #4]
   80480:	719a      	strb	r2, [r3, #6]
	
	/* Read received data. */
	p_mailbox->ul_datal = CAN0->CAN_MB[uc_index].CAN_MDL;
   80482:	4a1d      	ldr	r2, [pc, #116]	; (804f8 <dd_can_mailbox_read+0xcc>)
   80484:	7cfb      	ldrb	r3, [r7, #19]
   80486:	015b      	lsls	r3, r3, #5
   80488:	4413      	add	r3, r2
   8048a:	f503 7305 	add.w	r3, r3, #532	; 0x214
   8048e:	681a      	ldr	r2, [r3, #0]
   80490:	687b      	ldr	r3, [r7, #4]
   80492:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = CAN0->CAN_MB[uc_index].CAN_MDH;
   80494:	4a18      	ldr	r2, [pc, #96]	; (804f8 <dd_can_mailbox_read+0xcc>)
   80496:	7cfb      	ldrb	r3, [r7, #19]
   80498:	015b      	lsls	r3, r3, #5
   8049a:	4413      	add	r3, r2
   8049c:	f503 7306 	add.w	r3, r3, #536	; 0x218
   804a0:	681a      	ldr	r2, [r3, #0]
   804a2:	687b      	ldr	r3, [r7, #4]
   804a4:	61da      	str	r2, [r3, #28]
	
	
	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   804a6:	4a14      	ldr	r2, [pc, #80]	; (804f8 <dd_can_mailbox_read+0xcc>)
   804a8:	7cfb      	ldrb	r3, [r7, #19]
   804aa:	015b      	lsls	r3, r3, #5
   804ac:	4413      	add	r3, r2
   804ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
   804b2:	681a      	ldr	r2, [r3, #0]
   804b4:	687b      	ldr	r3, [r7, #4]
   804b6:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   804b8:	687b      	ldr	r3, [r7, #4]
   804ba:	689b      	ldr	r3, [r3, #8]
   804bc:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;	}
   804be:	68fb      	ldr	r3, [r7, #12]
   804c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   804c4:	2b00      	cmp	r3, #0
   804c6:	d003      	beq.n	804d0 <dd_can_mailbox_read+0xa4>
   804c8:	697b      	ldr	r3, [r7, #20]
   804ca:	f043 0304 	orr.w	r3, r3, #4
   804ce:	617b      	str	r3, [r7, #20]
	else { ul_retval |= CAN_MAILBOX_TRANSFER_OK; }		
		
	/* Enable next receive process. */	 // Allows the reception of the next message
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |CAN_MCR_MDLC(p_mailbox->uc_length);    
   804d0:	4909      	ldr	r1, [pc, #36]	; (804f8 <dd_can_mailbox_read+0xcc>)
   804d2:	7cfb      	ldrb	r3, [r7, #19]
   804d4:	687a      	ldr	r2, [r7, #4]
   804d6:	7992      	ldrb	r2, [r2, #6]
   804d8:	0412      	lsls	r2, r2, #16
   804da:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   804de:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   804e2:	015b      	lsls	r3, r3, #5
   804e4:	440b      	add	r3, r1
   804e6:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   804ea:	601a      	str	r2, [r3, #0]
	return ul_retval;
   804ec:	697b      	ldr	r3, [r7, #20]
}
   804ee:	4618      	mov	r0, r3
   804f0:	371c      	adds	r7, #28
   804f2:	46bd      	mov	sp, r7
   804f4:	bc80      	pop	{r7}
   804f6:	4770      	bx	lr
   804f8:	400b4000 	.word	0x400b4000

000804fc <dd_can_mailbox_conf>:
}



 void dd_can_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   804fc:	b480      	push	{r7}
   804fe:	b085      	sub	sp, #20
   80500:	af00      	add	r7, sp, #0
   80502:	6078      	str	r0, [r7, #4]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80504:	687b      	ldr	r3, [r7, #4]
   80506:	681b      	ldr	r3, [r3, #0]
   80508:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   8050a:	687b      	ldr	r3, [r7, #4]
   8050c:	791b      	ldrb	r3, [r3, #4]
   8050e:	2b00      	cmp	r3, #0
   80510:	d12f      	bne.n	80572 <dd_can_mailbox_conf+0x76>
		CAN0->CAN_MB[uc_index].CAN_MMR = 0;
   80512:	4a35      	ldr	r2, [pc, #212]	; (805e8 <dd_can_mailbox_conf+0xec>)
   80514:	7bfb      	ldrb	r3, [r7, #15]
   80516:	3310      	adds	r3, #16
   80518:	015b      	lsls	r3, r3, #5
   8051a:	4413      	add	r3, r2
   8051c:	2200      	movs	r2, #0
   8051e:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MAM = 0;
   80520:	4a31      	ldr	r2, [pc, #196]	; (805e8 <dd_can_mailbox_conf+0xec>)
   80522:	7bfb      	ldrb	r3, [r7, #15]
   80524:	3310      	adds	r3, #16
   80526:	015b      	lsls	r3, r3, #5
   80528:	4413      	add	r3, r2
   8052a:	3304      	adds	r3, #4
   8052c:	2200      	movs	r2, #0
   8052e:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MID = 0;
   80530:	4a2d      	ldr	r2, [pc, #180]	; (805e8 <dd_can_mailbox_conf+0xec>)
   80532:	7bfb      	ldrb	r3, [r7, #15]
   80534:	015b      	lsls	r3, r3, #5
   80536:	4413      	add	r3, r2
   80538:	f503 7302 	add.w	r3, r3, #520	; 0x208
   8053c:	2200      	movs	r2, #0
   8053e:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDL = 0;
   80540:	4a29      	ldr	r2, [pc, #164]	; (805e8 <dd_can_mailbox_conf+0xec>)
   80542:	7bfb      	ldrb	r3, [r7, #15]
   80544:	015b      	lsls	r3, r3, #5
   80546:	4413      	add	r3, r2
   80548:	f503 7305 	add.w	r3, r3, #532	; 0x214
   8054c:	2200      	movs	r2, #0
   8054e:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDH = 0;
   80550:	4a25      	ldr	r2, [pc, #148]	; (805e8 <dd_can_mailbox_conf+0xec>)
   80552:	7bfb      	ldrb	r3, [r7, #15]
   80554:	015b      	lsls	r3, r3, #5
   80556:	4413      	add	r3, r2
   80558:	f503 7306 	add.w	r3, r3, #536	; 0x218
   8055c:	2200      	movs	r2, #0
   8055e:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MCR = 0;
   80560:	4a21      	ldr	r2, [pc, #132]	; (805e8 <dd_can_mailbox_conf+0xec>)
   80562:	7bfb      	ldrb	r3, [r7, #15]
   80564:	015b      	lsls	r3, r3, #5
   80566:	4413      	add	r3, r2
   80568:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   8056c:	2200      	movs	r2, #0
   8056e:	601a      	str	r2, [r3, #0]
		return;
   80570:	e035      	b.n	805de <dd_can_mailbox_conf+0xe2>
	}
	
	/* Set the priority in Transmit mode. */                                                                   
	CAN0->CAN_MB[uc_index].CAN_MMR = (CAN0->CAN_MB[uc_index].CAN_MMR &  ~CAN_MMR_PRIOR_Msk) | (p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);  
   80572:	481d      	ldr	r0, [pc, #116]	; (805e8 <dd_can_mailbox_conf+0xec>)
   80574:	7bfb      	ldrb	r3, [r7, #15]
   80576:	491c      	ldr	r1, [pc, #112]	; (805e8 <dd_can_mailbox_conf+0xec>)
   80578:	7bfa      	ldrb	r2, [r7, #15]
   8057a:	3210      	adds	r2, #16
   8057c:	0152      	lsls	r2, r2, #5
   8057e:	440a      	add	r2, r1
   80580:	6812      	ldr	r2, [r2, #0]
   80582:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   80586:	6879      	ldr	r1, [r7, #4]
   80588:	79c9      	ldrb	r1, [r1, #7]
   8058a:	0409      	lsls	r1, r1, #16
   8058c:	430a      	orrs	r2, r1
   8058e:	3310      	adds	r3, #16
   80590:	015b      	lsls	r3, r3, #5
   80592:	4403      	add	r3, r0
   80594:	601a      	str	r2, [r3, #0]
	/* Set the message ID and message acceptance mask for the mailbox in * other modes. */	
		CAN0 ->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   80596:	4914      	ldr	r1, [pc, #80]	; (805e8 <dd_can_mailbox_conf+0xec>)
   80598:	7bfb      	ldrb	r3, [r7, #15]
   8059a:	687a      	ldr	r2, [r7, #4]
   8059c:	68d2      	ldr	r2, [r2, #12]
   8059e:	3310      	adds	r3, #16
   805a0:	015b      	lsls	r3, r3, #5
   805a2:	440b      	add	r3, r1
   805a4:	3304      	adds	r3, #4
   805a6:	601a      	str	r2, [r3, #0]
		CAN0 ->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;	
   805a8:	490f      	ldr	r1, [pc, #60]	; (805e8 <dd_can_mailbox_conf+0xec>)
   805aa:	7bfb      	ldrb	r3, [r7, #15]
   805ac:	687a      	ldr	r2, [r7, #4]
   805ae:	6912      	ldr	r2, [r2, #16]
   805b0:	015b      	lsls	r3, r3, #5
   805b2:	440b      	add	r3, r1
   805b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805b8:	601a      	str	r2, [r3, #0]

	/* Set up mailbox in one of the five different modes. */                                                      
	CAN0 ->CAN_MB[uc_index].CAN_MMR = (CAN0 ->CAN_MB[uc_index].CAN_MMR & ~CAN_MMR_MOT_Msk) | (p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);		
   805ba:	480b      	ldr	r0, [pc, #44]	; (805e8 <dd_can_mailbox_conf+0xec>)
   805bc:	7bfb      	ldrb	r3, [r7, #15]
   805be:	490a      	ldr	r1, [pc, #40]	; (805e8 <dd_can_mailbox_conf+0xec>)
   805c0:	7bfa      	ldrb	r2, [r7, #15]
   805c2:	3210      	adds	r2, #16
   805c4:	0152      	lsls	r2, r2, #5
   805c6:	440a      	add	r2, r1
   805c8:	6812      	ldr	r2, [r2, #0]
   805ca:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
   805ce:	6879      	ldr	r1, [r7, #4]
   805d0:	7909      	ldrb	r1, [r1, #4]
   805d2:	0609      	lsls	r1, r1, #24
   805d4:	430a      	orrs	r2, r1
   805d6:	3310      	adds	r3, #16
   805d8:	015b      	lsls	r3, r3, #5
   805da:	4403      	add	r3, r0
   805dc:	601a      	str	r2, [r3, #0]
}
   805de:	3714      	adds	r7, #20
   805e0:	46bd      	mov	sp, r7
   805e2:	bc80      	pop	{r7}
   805e4:	4770      	bx	lr
   805e6:	bf00      	nop
   805e8:	400b4000 	.word	0x400b4000

000805ec <DD_INIT_CAN>:
	p_mailbox->ul_fid = 0;
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}

void DD_INIT_CAN()     {
   805ec:	b580      	push	{r7, lr}
   805ee:	b08e      	sub	sp, #56	; 0x38
   805f0:	af00      	add	r7, sp, #0
	can_bit_timing_t  *p_bit_time ;
	p_bit_time = (can_bit_timing_t *)&can_bit_time[6];
   805f2:	4b4c      	ldr	r3, [pc, #304]	; (80724 <DD_INIT_CAN+0x138>)
   805f4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_flag;
	uint32_t ul_tick;
	uint8_t uc_prescale = 120;
   805f6:	2378      	movs	r3, #120	; 0x78
   805f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t ul_sysclk;
	CAN0 ->CAN_WPMR = 0x43414E00;  //Can write protection disabled
   805fc:	4b4a      	ldr	r3, [pc, #296]	; (80728 <DD_INIT_CAN+0x13c>)
   805fe:	4a4b      	ldr	r2, [pc, #300]	; (8072c <DD_INIT_CAN+0x140>)
   80600:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	CAN0 ->CAN_MR &= ~CAN_MR_CANEN ;  //0xFFFFFFFE; // DISABLE CAN0
   80604:	4a48      	ldr	r2, [pc, #288]	; (80728 <DD_INIT_CAN+0x13c>)
   80606:	4b48      	ldr	r3, [pc, #288]	; (80728 <DD_INIT_CAN+0x13c>)
   80608:	681b      	ldr	r3, [r3, #0]
   8060a:	f023 0301 	bic.w	r3, r3, #1
   8060e:	6013      	str	r3, [r2, #0]
	CAN0->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) | CAN_BR_PROPAG(p_bit_time->uc_prog - 1) | CAN_BR_SJW(p_bit_time->uc_sjw - 1) |	CAN_BR_BRP(uc_prescale - 1);
   80610:	4945      	ldr	r1, [pc, #276]	; (80728 <DD_INIT_CAN+0x13c>)
   80612:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80614:	78db      	ldrb	r3, [r3, #3]
   80616:	3b01      	subs	r3, #1
   80618:	f003 0207 	and.w	r2, r3, #7
   8061c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8061e:	789b      	ldrb	r3, [r3, #2]
   80620:	3b01      	subs	r3, #1
   80622:	011b      	lsls	r3, r3, #4
   80624:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80628:	431a      	orrs	r2, r3
   8062a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8062c:	785b      	ldrb	r3, [r3, #1]
   8062e:	3b01      	subs	r3, #1
   80630:	021b      	lsls	r3, r3, #8
   80632:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   80636:	431a      	orrs	r2, r3
   80638:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8063a:	791b      	ldrb	r3, [r3, #4]
   8063c:	3b01      	subs	r3, #1
   8063e:	031b      	lsls	r3, r3, #12
   80640:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   80644:	431a      	orrs	r2, r3
   80646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   8064a:	3b01      	subs	r3, #1
   8064c:	041b      	lsls	r3, r3, #16
   8064e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   80652:	4313      	orrs	r3, r2
   80654:	614b      	str	r3, [r1, #20]
	can_mb_conf_t mb_config_t;
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   80656:	2300      	movs	r3, #0
   80658:	723b      	strb	r3, [r7, #8]
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   8065a:	2300      	movs	r3, #0
   8065c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   80660:	e00b      	b.n	8067a <DD_INIT_CAN+0x8e>
		mb_config_t.ul_mb_idx = i;
   80662:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80666:	607b      	str	r3, [r7, #4]
		dd_can_mailbox_conf(&mb_config_t);
   80668:	1d3b      	adds	r3, r7, #4
   8066a:	4618      	mov	r0, r3
   8066c:	4b30      	ldr	r3, [pc, #192]	; (80730 <DD_INIT_CAN+0x144>)
   8066e:	4798      	blx	r3
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   80670:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80674:	3301      	adds	r3, #1
   80676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   8067a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   8067e:	2b07      	cmp	r3, #7
   80680:	d9ef      	bls.n	80662 <DD_INIT_CAN+0x76>
		mb_config_t.ul_mb_idx = i;
		dd_can_mailbox_conf(&mb_config_t);
	}
	// ALL MAIL BOX HAS BEEN RESET
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
   80682:	4a29      	ldr	r2, [pc, #164]	; (80728 <DD_INIT_CAN+0x13c>)
   80684:	4b28      	ldr	r3, [pc, #160]	; (80728 <DD_INIT_CAN+0x13c>)
   80686:	681b      	ldr	r3, [r3, #0]
   80688:	f043 0301 	orr.w	r3, r3, #1
   8068c:	6013      	str	r3, [r2, #0]
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   8068e:	2300      	movs	r3, #0
   80690:	637b      	str	r3, [r7, #52]	; 0x34
	ul_tick = 0;
   80692:	2300      	movs	r3, #0
   80694:	633b      	str	r3, [r7, #48]	; 0x30
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   80696:	e005      	b.n	806a4 <DD_INIT_CAN+0xb8>
		ul_flag = (CAN0->CAN_SR);
   80698:	4b23      	ldr	r3, [pc, #140]	; (80728 <DD_INIT_CAN+0x13c>)
   8069a:	691b      	ldr	r3, [r3, #16]
   8069c:	637b      	str	r3, [r7, #52]	; 0x34
		ul_tick++;
   8069e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   806a0:	3301      	adds	r3, #1
   806a2:	633b      	str	r3, [r7, #48]	; 0x30
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   806a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   806a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   806aa:	2b00      	cmp	r3, #0
   806ac:	d103      	bne.n	806b6 <DD_INIT_CAN+0xca>
   806ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   806b0:	4a20      	ldr	r2, [pc, #128]	; (80734 <DD_INIT_CAN+0x148>)
   806b2:	4293      	cmp	r3, r2
   806b4:	d9f0      	bls.n	80698 <DD_INIT_CAN+0xac>
	/* Timeout or the CAN module has been synchronized with the bus. */
/*	if (CAN_TIMEOUT == ul_tick) { puts("CAN initialization (sync) ERROR" STRING_EOL);	}
	else {	puts("CAN initialization is completed." STRING_EOL);
	}*/
	//NVIC-> ISER reset_mailbox_conf(&can0_mailbox);
	can0_mailbox.ul_mb_idx =   MAILBOX_1;
   806b6:	4b20      	ldr	r3, [pc, #128]	; (80738 <DD_INIT_CAN+0x14c>)
   806b8:	2201      	movs	r2, #1
   806ba:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE ;
   806bc:	4b1e      	ldr	r3, [pc, #120]	; (80738 <DD_INIT_CAN+0x14c>)
   806be:	2201      	movs	r2, #1
   806c0:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 0;
   806c2:	4b1d      	ldr	r3, [pc, #116]	; (80738 <DD_INIT_CAN+0x14c>)
   806c4:	2200      	movs	r2, #0
   806c6:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   806c8:	4b1b      	ldr	r3, [pc, #108]	; (80738 <DD_INIT_CAN+0x14c>)
   806ca:	2200      	movs	r2, #0
   806cc:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =  CAN_MFID_MFID_VA_dd(CAN_MASK);   // 0x7FC | CAN_MAM_MIDvA_Msk ;
   806ce:	4b1a      	ldr	r3, [pc, #104]	; (80738 <DD_INIT_CAN+0x14c>)
   806d0:	4a1a      	ldr	r2, [pc, #104]	; (8073c <DD_INIT_CAN+0x150>)
   806d2:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(PROPORTIONING_CPU_id) ;
   806d4:	4b18      	ldr	r3, [pc, #96]	; (80738 <DD_INIT_CAN+0x14c>)
   806d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   806da:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);
   806dc:	4816      	ldr	r0, [pc, #88]	; (80738 <DD_INIT_CAN+0x14c>)
   806de:	4b14      	ldr	r3, [pc, #80]	; (80730 <DD_INIT_CAN+0x144>)
   806e0:	4798      	blx	r3
	NVIC_EnableIRQ(CAN0_IRQn);
   806e2:	202b      	movs	r0, #43	; 0x2b
   806e4:	4b16      	ldr	r3, [pc, #88]	; (80740 <DD_INIT_CAN+0x154>)
   806e6:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   806e8:	4b0f      	ldr	r3, [pc, #60]	; (80728 <DD_INIT_CAN+0x13c>)
   806ea:	2202      	movs	r2, #2
   806ec:	605a      	str	r2, [r3, #4]
	
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   806ee:	4b12      	ldr	r3, [pc, #72]	; (80738 <DD_INIT_CAN+0x14c>)
   806f0:	2200      	movs	r2, #0
   806f2:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   806f4:	4b10      	ldr	r3, [pc, #64]	; (80738 <DD_INIT_CAN+0x14c>)
   806f6:	2203      	movs	r2, #3
   806f8:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   806fa:	4b0f      	ldr	r3, [pc, #60]	; (80738 <DD_INIT_CAN+0x14c>)
   806fc:	2201      	movs	r2, #1
   806fe:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   80700:	4b0d      	ldr	r3, [pc, #52]	; (80738 <DD_INIT_CAN+0x14c>)
   80702:	2200      	movs	r2, #0
   80704:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = CAN_MFID_MFID_VA_dd(CAN_MASK);// 0x7FC | CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk ;
   80706:	4b0c      	ldr	r3, [pc, #48]	; (80738 <DD_INIT_CAN+0x14c>)
   80708:	4a0c      	ldr	r2, [pc, #48]	; (8073c <DD_INIT_CAN+0x150>)
   8070a:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id);
   8070c:	4b0a      	ldr	r3, [pc, #40]	; (80738 <DD_INIT_CAN+0x14c>)
   8070e:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   80712:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   80714:	4808      	ldr	r0, [pc, #32]	; (80738 <DD_INIT_CAN+0x14c>)
   80716:	4b06      	ldr	r3, [pc, #24]	; (80730 <DD_INIT_CAN+0x144>)
   80718:	4798      	blx	r3
}
   8071a:	bf00      	nop
   8071c:	3738      	adds	r7, #56	; 0x38
   8071e:	46bd      	mov	sp, r7
   80720:	bd80      	pop	{r7, pc}
   80722:	bf00      	nop
   80724:	000866fc 	.word	0x000866fc
   80728:	400b4000 	.word	0x400b4000
   8072c:	43414e00 	.word	0x43414e00
   80730:	000804fd 	.word	0x000804fd
   80734:	0001869f 	.word	0x0001869f
   80738:	20070dc8 	.word	0x20070dc8
   8073c:	1ffc0000 	.word	0x1ffc0000
   80740:	00080185 	.word	0x00080185

00080744 <CPU3_D_SET_PUMP>:
 */ 
#include "D_SYS.h"
#include "Platform/Service/sv_interface.h"

uint8_t CPU3_D_SET_PUMP(sv_pumptype id_pump)
{
   80744:	b580      	push	{r7, lr}
   80746:	b082      	sub	sp, #8
   80748:	af00      	add	r7, sp, #0
   8074a:	4603      	mov	r3, r0
   8074c:	71fb      	strb	r3, [r7, #7]
	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   8074e:	4b18      	ldr	r3, [pc, #96]	; (807b0 <CPU3_D_SET_PUMP+0x6c>)
   80750:	f640 2241 	movw	r2, #2625	; 0xa41
   80754:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x00000700;
   80758:	4b15      	ldr	r3, [pc, #84]	; (807b0 <CPU3_D_SET_PUMP+0x6c>)
   8075a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   8075e:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	
	PWM->PWM_CH_NUM[5].PWM_CPRD = 0x00000A41;
   80762:	4b13      	ldr	r3, [pc, #76]	; (807b0 <CPU3_D_SET_PUMP+0x6c>)
   80764:	f640 2241 	movw	r2, #2625	; 0xa41
   80768:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000700;
   8076c:	4b10      	ldr	r3, [pc, #64]	; (807b0 <CPU3_D_SET_PUMP+0x6c>)
   8076e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   80772:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
	switch (id_pump)
   80776:	79fb      	ldrb	r3, [r7, #7]
   80778:	2b01      	cmp	r3, #1
   8077a:	d002      	beq.n	80782 <CPU3_D_SET_PUMP+0x3e>
   8077c:	2b02      	cmp	r3, #2
   8077e:	d009      	beq.n	80794 <CPU3_D_SET_PUMP+0x50>
		PWM->PWM_ENA =0x00000020;
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
		break;
		
		default:
		break;
   80780:	e011      	b.n	807a6 <CPU3_D_SET_PUMP+0x62>
	
	switch (id_pump)
	{
		case ACID_PUMP: //ACID PUMP
		
		PWM->PWM_ENA =0x00000010;
   80782:	4b0b      	ldr	r3, [pc, #44]	; (807b0 <CPU3_D_SET_PUMP+0x6c>)
   80784:	2210      	movs	r2, #16
   80786:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   80788:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8078c:	2055      	movs	r0, #85	; 0x55
   8078e:	4b09      	ldr	r3, [pc, #36]	; (807b4 <CPU3_D_SET_PUMP+0x70>)
   80790:	4798      	blx	r3
		break;
   80792:	e008      	b.n	807a6 <CPU3_D_SET_PUMP+0x62>
		
		case BICAR_PUMP:
		PWM->PWM_ENA =0x00000020;
   80794:	4b06      	ldr	r3, [pc, #24]	; (807b0 <CPU3_D_SET_PUMP+0x6c>)
   80796:	2220      	movs	r2, #32
   80798:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
   8079a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8079e:	2056      	movs	r0, #86	; 0x56
   807a0:	4b04      	ldr	r3, [pc, #16]	; (807b4 <CPU3_D_SET_PUMP+0x70>)
   807a2:	4798      	blx	r3
		break;
   807a4:	bf00      	nop
		
		default:
		break;
	}
	
	return 0;
   807a6:	2300      	movs	r3, #0
}
   807a8:	4618      	mov	r0, r3
   807aa:	3708      	adds	r7, #8
   807ac:	46bd      	mov	sp, r7
   807ae:	bd80      	pop	{r7, pc}
   807b0:	40094000 	.word	0x40094000
   807b4:	00082a21 	.word	0x00082a21

000807b8 <CPU3_D_CONFIG_TIMER>:
	return SENSOR_VAL;
	
}

uint8_t CPU3_D_CONFIG_TIMER(uint8_t timer_no, uint8_t timer_res)
{
   807b8:	b590      	push	{r4, r7, lr}
   807ba:	b089      	sub	sp, #36	; 0x24
   807bc:	af00      	add	r7, sp, #0
   807be:	4603      	mov	r3, r0
   807c0:	460a      	mov	r2, r1
   807c2:	71fb      	strb	r3, [r7, #7]
   807c4:	4613      	mov	r3, r2
   807c6:	71bb      	strb	r3, [r7, #6]
	uint32_t ch_no=0,rc;
   807c8:	2300      	movs	r3, #0
   807ca:	61fb      	str	r3, [r7, #28]
	double rc_cal;
	rc_cal = ((84000000/(128 * timer_res)) -1);
   807cc:	79bb      	ldrb	r3, [r7, #6]
   807ce:	01db      	lsls	r3, r3, #7
   807d0:	4a20      	ldr	r2, [pc, #128]	; (80854 <CPU3_D_CONFIG_TIMER+0x9c>)
   807d2:	fb92 f3f3 	sdiv	r3, r2, r3
   807d6:	1e5a      	subs	r2, r3, #1
   807d8:	4b1f      	ldr	r3, [pc, #124]	; (80858 <CPU3_D_CONFIG_TIMER+0xa0>)
   807da:	4610      	mov	r0, r2
   807dc:	4798      	blx	r3
   807de:	4603      	mov	r3, r0
   807e0:	460c      	mov	r4, r1
   807e2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	rc = rc_cal;
   807e6:	4b1d      	ldr	r3, [pc, #116]	; (8085c <CPU3_D_CONFIG_TIMER+0xa4>)
   807e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   807ec:	4798      	blx	r3
   807ee:	4603      	mov	r3, r0
   807f0:	60fb      	str	r3, [r7, #12]

	switch (timer_no)
   807f2:	79fb      	ldrb	r3, [r7, #7]
   807f4:	2b04      	cmp	r3, #4
   807f6:	d826      	bhi.n	80846 <CPU3_D_CONFIG_TIMER+0x8e>
   807f8:	a201      	add	r2, pc, #4	; (adr r2, 80800 <CPU3_D_CONFIG_TIMER+0x48>)
   807fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   807fe:	bf00      	nop
   80800:	00080815 	.word	0x00080815
   80804:	00080823 	.word	0x00080823
   80808:	00080835 	.word	0x00080835
   8080c:	0008083b 	.word	0x0008083b
   80810:	00080841 	.word	0x00080841
	{
		case 0:
		CPU3_D_MAIN_TIMER( TC2, ch_no, TC6_IRQn, rc);
   80814:	68fb      	ldr	r3, [r7, #12]
   80816:	2221      	movs	r2, #33	; 0x21
   80818:	69f9      	ldr	r1, [r7, #28]
   8081a:	4811      	ldr	r0, [pc, #68]	; (80860 <CPU3_D_CONFIG_TIMER+0xa8>)
   8081c:	4c11      	ldr	r4, [pc, #68]	; (80864 <CPU3_D_CONFIG_TIMER+0xac>)
   8081e:	47a0      	blx	r4
		break;
   80820:	e012      	b.n	80848 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 1:
		rc = timer_res;
   80822:	79bb      	ldrb	r3, [r7, #6]
   80824:	60fb      	str	r3, [r7, #12]
		acid_startTimer1(TC0,0,TC0_IRQn,rc);
   80826:	68fb      	ldr	r3, [r7, #12]
   80828:	221b      	movs	r2, #27
   8082a:	2100      	movs	r1, #0
   8082c:	480e      	ldr	r0, [pc, #56]	; (80868 <CPU3_D_CONFIG_TIMER+0xb0>)
   8082e:	4c0f      	ldr	r4, [pc, #60]	; (8086c <CPU3_D_CONFIG_TIMER+0xb4>)
   80830:	47a0      	blx	r4
		break;
   80832:	e009      	b.n	80848 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 2:
		rc = timer_res;
   80834:	79bb      	ldrb	r3, [r7, #6]
   80836:	60fb      	str	r3, [r7, #12]
		//acid_startTimer2(TC0,1,TC1_IRQn,rc);
		break;
   80838:	e006      	b.n	80848 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 3:
		rc = timer_res;
   8083a:	79bb      	ldrb	r3, [r7, #6]
   8083c:	60fb      	str	r3, [r7, #12]
		//bicar_startTimer2(TC1,0,TC1_IRQn,rc);
		break;
   8083e:	e003      	b.n	80848 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 4:
		rc = timer_res;
   80840:	79bb      	ldrb	r3, [r7, #6]
   80842:	60fb      	str	r3, [r7, #12]
		//bicar_startTimer2(TC1,1,TC1_IRQn,rc);
		break;
   80844:	e000      	b.n	80848 <CPU3_D_CONFIG_TIMER+0x90>
		
		
		default:
		break;
   80846:	bf00      	nop
		
	}
}
   80848:	bf00      	nop
   8084a:	4618      	mov	r0, r3
   8084c:	3724      	adds	r7, #36	; 0x24
   8084e:	46bd      	mov	sp, r7
   80850:	bd90      	pop	{r4, r7, pc}
   80852:	bf00      	nop
   80854:	0501bd00 	.word	0x0501bd00
   80858:	0008369d 	.word	0x0008369d
   8085c:	00083769 	.word	0x00083769
   80860:	40088000 	.word	0x40088000
   80864:	00080ff5 	.word	0x00080ff5
   80868:	40080000 	.word	0x40080000
   8086c:	00081051 	.word	0x00081051

00080870 <CPU3_D_STOP_TIMER>:

uint8_t CPU3_D_STOP_TIMER(uint8_t timer_no)
{
   80870:	b580      	push	{r7, lr}
   80872:	b082      	sub	sp, #8
   80874:	af00      	add	r7, sp, #0
   80876:	4603      	mov	r3, r0
   80878:	71fb      	strb	r3, [r7, #7]
	//uint32_t ch_no=0;
	switch (timer_no)
   8087a:	79fb      	ldrb	r3, [r7, #7]
   8087c:	2b04      	cmp	r3, #4
   8087e:	d826      	bhi.n	808ce <CPU3_D_STOP_TIMER+0x5e>
   80880:	a201      	add	r2, pc, #4	; (adr r2, 80888 <CPU3_D_STOP_TIMER+0x18>)
   80882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80886:	bf00      	nop
   80888:	0008089d 	.word	0x0008089d
   8088c:	000808a7 	.word	0x000808a7
   80890:	000808b1 	.word	0x000808b1
   80894:	000808bb 	.word	0x000808bb
   80898:	000808c5 	.word	0x000808c5
	{
		case 0:
		tc_stop(TC0,0);
   8089c:	2100      	movs	r1, #0
   8089e:	480f      	ldr	r0, [pc, #60]	; (808dc <CPU3_D_STOP_TIMER+0x6c>)
   808a0:	4b0f      	ldr	r3, [pc, #60]	; (808e0 <CPU3_D_STOP_TIMER+0x70>)
   808a2:	4798      	blx	r3
		break;
   808a4:	e014      	b.n	808d0 <CPU3_D_STOP_TIMER+0x60>
		
		case 1:
		tc_stop(TC0,1);
   808a6:	2101      	movs	r1, #1
   808a8:	480c      	ldr	r0, [pc, #48]	; (808dc <CPU3_D_STOP_TIMER+0x6c>)
   808aa:	4b0d      	ldr	r3, [pc, #52]	; (808e0 <CPU3_D_STOP_TIMER+0x70>)
   808ac:	4798      	blx	r3
		break;
   808ae:	e00f      	b.n	808d0 <CPU3_D_STOP_TIMER+0x60>
		
		case 2:
		tc_stop(TC2,0);
   808b0:	2100      	movs	r1, #0
   808b2:	480c      	ldr	r0, [pc, #48]	; (808e4 <CPU3_D_STOP_TIMER+0x74>)
   808b4:	4b0a      	ldr	r3, [pc, #40]	; (808e0 <CPU3_D_STOP_TIMER+0x70>)
   808b6:	4798      	blx	r3
		break;
   808b8:	e00a      	b.n	808d0 <CPU3_D_STOP_TIMER+0x60>
		
		case 3:
		tc_stop(TC1,0);
   808ba:	2100      	movs	r1, #0
   808bc:	480a      	ldr	r0, [pc, #40]	; (808e8 <CPU3_D_STOP_TIMER+0x78>)
   808be:	4b08      	ldr	r3, [pc, #32]	; (808e0 <CPU3_D_STOP_TIMER+0x70>)
   808c0:	4798      	blx	r3
		break;
   808c2:	e005      	b.n	808d0 <CPU3_D_STOP_TIMER+0x60>
		
		case 4:
		tc_stop(TC1,1);
   808c4:	2101      	movs	r1, #1
   808c6:	4808      	ldr	r0, [pc, #32]	; (808e8 <CPU3_D_STOP_TIMER+0x78>)
   808c8:	4b05      	ldr	r3, [pc, #20]	; (808e0 <CPU3_D_STOP_TIMER+0x70>)
   808ca:	4798      	blx	r3
		break;
   808cc:	e000      	b.n	808d0 <CPU3_D_STOP_TIMER+0x60>
		
		default:
		break;
   808ce:	bf00      	nop
	}
   808d0:	bf00      	nop
   808d2:	4618      	mov	r0, r3
   808d4:	3708      	adds	r7, #8
   808d6:	46bd      	mov	sp, r7
   808d8:	bd80      	pop	{r7, pc}
   808da:	bf00      	nop
   808dc:	40080000 	.word	0x40080000
   808e0:	0008136d 	.word	0x0008136d
   808e4:	40088000 	.word	0x40088000
   808e8:	40084000 	.word	0x40084000

000808ec <CPU3_D_INIT_PIO>:
 *  Author: wid7
 */ 
#include "D_GPIO.h"

void CPU3_D_INIT_PIO()
{
   808ec:	b580      	push	{r7, lr}
   808ee:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_PIOA);
   808f0:	200b      	movs	r0, #11
   808f2:	4b3b      	ldr	r3, [pc, #236]	; (809e0 <CPU3_D_INIT_PIO+0xf4>)
   808f4:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOB);
   808f6:	200c      	movs	r0, #12
   808f8:	4b39      	ldr	r3, [pc, #228]	; (809e0 <CPU3_D_INIT_PIO+0xf4>)
   808fa:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOC);
   808fc:	200d      	movs	r0, #13
   808fe:	4b38      	ldr	r3, [pc, #224]	; (809e0 <CPU3_D_INIT_PIO+0xf4>)
   80900:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
   80902:	200e      	movs	r0, #14
   80904:	4b36      	ldr	r3, [pc, #216]	; (809e0 <CPU3_D_INIT_PIO+0xf4>)
   80906:	4798      	blx	r3
	
	
	PIOA->PIO_WPMR = 0x50494F00;
   80908:	4b36      	ldr	r3, [pc, #216]	; (809e4 <CPU3_D_INIT_PIO+0xf8>)
   8090a:	4a37      	ldr	r2, [pc, #220]	; (809e8 <CPU3_D_INIT_PIO+0xfc>)
   8090c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOB->PIO_WPMR = 0x50494F00;
   80910:	4b36      	ldr	r3, [pc, #216]	; (809ec <CPU3_D_INIT_PIO+0x100>)
   80912:	4a35      	ldr	r2, [pc, #212]	; (809e8 <CPU3_D_INIT_PIO+0xfc>)
   80914:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR = 0x50494F00;
   80918:	4b35      	ldr	r3, [pc, #212]	; (809f0 <CPU3_D_INIT_PIO+0x104>)
   8091a:	4a33      	ldr	r2, [pc, #204]	; (809e8 <CPU3_D_INIT_PIO+0xfc>)
   8091c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_WPMR = 0x50494F00;
   80920:	4b34      	ldr	r3, [pc, #208]	; (809f4 <CPU3_D_INIT_PIO+0x108>)
   80922:	4a31      	ldr	r2, [pc, #196]	; (809e8 <CPU3_D_INIT_PIO+0xfc>)
   80924:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PIOA->PIO_PUER = 0x00060000;			
   80928:	4b2e      	ldr	r3, [pc, #184]	; (809e4 <CPU3_D_INIT_PIO+0xf8>)
   8092a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   8092e:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PDR  = 0x1F870343;		//PIOA->PIO_PDR =	 0x00060000;				// initialization for TWI //
   80930:	4b2c      	ldr	r3, [pc, #176]	; (809e4 <CPU3_D_INIT_PIO+0xf8>)
   80932:	4a31      	ldr	r2, [pc, #196]	; (809f8 <CPU3_D_INIT_PIO+0x10c>)
   80934:	605a      	str	r2, [r3, #4]
	PIOA->PIO_ABSR = 0x00090000;
   80936:	4b2b      	ldr	r3, [pc, #172]	; (809e4 <CPU3_D_INIT_PIO+0xf8>)
   80938:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   8093c:	671a      	str	r2, [r3, #112]	; 0x70
	PIOA->PIO_PUER = 0x00000300;			// for scanf statement//
   8093e:	4b29      	ldr	r3, [pc, #164]	; (809e4 <CPU3_D_INIT_PIO+0xf8>)
   80940:	f44f 7240 	mov.w	r2, #768	; 0x300
   80944:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PUER = 0x00000300;
   80946:	4b27      	ldr	r3, [pc, #156]	; (809e4 <CPU3_D_INIT_PIO+0xf8>)
   80948:	f44f 7240 	mov.w	r2, #768	; 0x300
   8094c:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PER  = 0x0018C004;		//PIOA->PIO_PER  = 0x0018C000;
   8094e:	4b25      	ldr	r3, [pc, #148]	; (809e4 <CPU3_D_INIT_PIO+0xf8>)
   80950:	4a2a      	ldr	r2, [pc, #168]	; (809fc <CPU3_D_INIT_PIO+0x110>)
   80952:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER  = 0x00180004;		//PIOA->PIO_OER  = 0x0018C000;
   80954:	4b23      	ldr	r3, [pc, #140]	; (809e4 <CPU3_D_INIT_PIO+0xf8>)
   80956:	4a2a      	ldr	r2, [pc, #168]	; (80a00 <CPU3_D_INIT_PIO+0x114>)
   80958:	611a      	str	r2, [r3, #16]
	PIOA->PIO_SODR = 0x00180000;           //??????
   8095a:	4b22      	ldr	r3, [pc, #136]	; (809e4 <CPU3_D_INIT_PIO+0xf8>)
   8095c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   80960:	631a      	str	r2, [r3, #48]	; 0x30
	PIOA->PIO_ODR  = 0x0000C000;             //??????
   80962:	4b20      	ldr	r3, [pc, #128]	; (809e4 <CPU3_D_INIT_PIO+0xf8>)
   80964:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   80968:	615a      	str	r2, [r3, #20]
	
		
	PIOB->PIO_PER  = 0x08204000;		//PIOB->PIO_OER  = 0x04204000;
   8096a:	4b20      	ldr	r3, [pc, #128]	; (809ec <CPU3_D_INIT_PIO+0x100>)
   8096c:	4a25      	ldr	r2, [pc, #148]	; (80a04 <CPU3_D_INIT_PIO+0x118>)
   8096e:	601a      	str	r2, [r3, #0]
	PIOB->PIO_OER  = 0x08204000;		//PIOB->PIO_OER  = 0x06204000;
   80970:	4b1e      	ldr	r3, [pc, #120]	; (809ec <CPU3_D_INIT_PIO+0x100>)
   80972:	4a24      	ldr	r2, [pc, #144]	; (80a04 <CPU3_D_INIT_PIO+0x118>)
   80974:	611a      	str	r2, [r3, #16]
	PIOB->PIO_PDR  = 0xF01800FF;
   80976:	4b1d      	ldr	r3, [pc, #116]	; (809ec <CPU3_D_INIT_PIO+0x100>)
   80978:	4a23      	ldr	r2, [pc, #140]	; (80a08 <CPU3_D_INIT_PIO+0x11c>)
   8097a:	605a      	str	r2, [r3, #4]
	PIOB->PIO_SODR = 0x06204000;
   8097c:	4b1b      	ldr	r3, [pc, #108]	; (809ec <CPU3_D_INIT_PIO+0x100>)
   8097e:	4a23      	ldr	r2, [pc, #140]	; (80a0c <CPU3_D_INIT_PIO+0x120>)
   80980:	631a      	str	r2, [r3, #48]	; 0x30
	PIOB->PIO_CODR = 0x04000000;
   80982:	4b1a      	ldr	r3, [pc, #104]	; (809ec <CPU3_D_INIT_PIO+0x100>)
   80984:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80988:	635a      	str	r2, [r3, #52]	; 0x34
	
	PIOC->PIO_PER  = 0x0D8FF1FE;		//PIOC->PIO_PER  = 0x378FF1FE;
   8098a:	4b19      	ldr	r3, [pc, #100]	; (809f0 <CPU3_D_INIT_PIO+0x104>)
   8098c:	4a20      	ldr	r2, [pc, #128]	; (80a10 <CPU3_D_INIT_PIO+0x124>)
   8098e:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER  = 0x008FF1FE;		//PIOC->PIO_OER  = 0x068FF1FE;
   80990:	4b17      	ldr	r3, [pc, #92]	; (809f0 <CPU3_D_INIT_PIO+0x104>)
   80992:	4a20      	ldr	r2, [pc, #128]	; (80a14 <CPU3_D_INIT_PIO+0x128>)
   80994:	611a      	str	r2, [r3, #16]
	PIOC->PIO_ODR  = 0x05000000;		//PIOC->PIO_ODR  = 0x14000000;
   80996:	4b16      	ldr	r3, [pc, #88]	; (809f0 <CPU3_D_INIT_PIO+0x104>)
   80998:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
   8099c:	615a      	str	r2, [r3, #20]
	PIOC->PIO_CODR = 0x060FF1FE;
   8099e:	4b14      	ldr	r3, [pc, #80]	; (809f0 <CPU3_D_INIT_PIO+0x104>)
   809a0:	4a1d      	ldr	r2, [pc, #116]	; (80a18 <CPU3_D_INIT_PIO+0x12c>)
   809a2:	635a      	str	r2, [r3, #52]	; 0x34
	PIOC->PIO_CODR = 0x00800000;
   809a4:	4b12      	ldr	r3, [pc, #72]	; (809f0 <CPU3_D_INIT_PIO+0x104>)
   809a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   809aa:	635a      	str	r2, [r3, #52]	; 0x34

	PIOD->PIO_PER  = 0X000001E10;		//PIOD->PIO_PER  = 0x0000000F;
   809ac:	4b11      	ldr	r3, [pc, #68]	; (809f4 <CPU3_D_INIT_PIO+0x108>)
   809ae:	f641 6210 	movw	r2, #7696	; 0x1e10
   809b2:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER  = 0x0000006F;
   809b4:	4b0f      	ldr	r3, [pc, #60]	; (809f4 <CPU3_D_INIT_PIO+0x108>)
   809b6:	226f      	movs	r2, #111	; 0x6f
   809b8:	611a      	str	r2, [r3, #16]
	//PIOD->PIO_SODR = 0x0000000F;
	PIOD->PIO_PUER = 0x0000000F;
   809ba:	4b0e      	ldr	r3, [pc, #56]	; (809f4 <CPU3_D_INIT_PIO+0x108>)
   809bc:	220f      	movs	r2, #15
   809be:	665a      	str	r2, [r3, #100]	; 0x64
	
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   809c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809c4:	2001      	movs	r0, #1
   809c6:	4b15      	ldr	r3, [pc, #84]	; (80a1c <CPU3_D_INIT_PIO+0x130>)
   809c8:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   809ca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809ce:	2000      	movs	r0, #0
   809d0:	4b12      	ldr	r3, [pc, #72]	; (80a1c <CPU3_D_INIT_PIO+0x130>)
   809d2:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_STANDBY_IDX, PIN_CAN0_STANDBY_FLAGS);
   809d4:	4912      	ldr	r1, [pc, #72]	; (80a20 <CPU3_D_INIT_PIO+0x134>)
   809d6:	2003      	movs	r0, #3
   809d8:	4b10      	ldr	r3, [pc, #64]	; (80a1c <CPU3_D_INIT_PIO+0x130>)
   809da:	4798      	blx	r3





}
   809dc:	bf00      	nop
   809de:	bd80      	pop	{r7, pc}
   809e0:	00082fb1 	.word	0x00082fb1
   809e4:	400e0e00 	.word	0x400e0e00
   809e8:	50494f00 	.word	0x50494f00
   809ec:	400e1000 	.word	0x400e1000
   809f0:	400e1200 	.word	0x400e1200
   809f4:	400e1400 	.word	0x400e1400
   809f8:	1f870343 	.word	0x1f870343
   809fc:	0018c004 	.word	0x0018c004
   80a00:	00180004 	.word	0x00180004
   80a04:	08204000 	.word	0x08204000
   80a08:	f01800ff 	.word	0xf01800ff
   80a0c:	06204000 	.word	0x06204000
   80a10:	0d8ff1fe 	.word	0x0d8ff1fe
   80a14:	008ff1fe 	.word	0x008ff1fe
   80a18:	060ff1fe 	.word	0x060ff1fe
   80a1c:	00082a21 	.word	0x00082a21
   80a20:	30000001 	.word	0x30000001

00080a24 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80a24:	b480      	push	{r7}
   80a26:	b083      	sub	sp, #12
   80a28:	af00      	add	r7, sp, #0
   80a2a:	4603      	mov	r3, r0
   80a2c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80a2e:	4909      	ldr	r1, [pc, #36]	; (80a54 <NVIC_ClearPendingIRQ+0x30>)
   80a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80a34:	095b      	lsrs	r3, r3, #5
   80a36:	79fa      	ldrb	r2, [r7, #7]
   80a38:	f002 021f 	and.w	r2, r2, #31
   80a3c:	2001      	movs	r0, #1
   80a3e:	fa00 f202 	lsl.w	r2, r0, r2
   80a42:	3360      	adds	r3, #96	; 0x60
   80a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80a48:	bf00      	nop
   80a4a:	370c      	adds	r7, #12
   80a4c:	46bd      	mov	sp, r7
   80a4e:	bc80      	pop	{r7}
   80a50:	4770      	bx	lr
   80a52:	bf00      	nop
   80a54:	e000e100 	.word	0xe000e100

00080a58 <TC0_Handler>:
		}
	}
}*/

void TC0_Handler()
{
   80a58:	b580      	push	{r7, lr}
   80a5a:	af00      	add	r7, sp, #0
	PIOD->PIO_WPMR	= 0x50494F00;
   80a5c:	4b2b      	ldr	r3, [pc, #172]	; (80b0c <TC0_Handler+0xb4>)
   80a5e:	4a2c      	ldr	r2, [pc, #176]	; (80b10 <TC0_Handler+0xb8>)
   80a60:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   80a64:	4b2b      	ldr	r3, [pc, #172]	; (80b14 <TC0_Handler+0xbc>)
   80a66:	4a2a      	ldr	r2, [pc, #168]	; (80b10 <TC0_Handler+0xb8>)
   80a68:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x00000003;
   80a6c:	4b27      	ldr	r3, [pc, #156]	; (80b0c <TC0_Handler+0xb4>)
   80a6e:	2203      	movs	r2, #3
   80a70:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x0000000C;
   80a74:	4b25      	ldr	r3, [pc, #148]	; (80b0c <TC0_Handler+0xb4>)
   80a76:	220c      	movs	r2, #12
   80a78:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000001FE;
   80a7c:	4b25      	ldr	r3, [pc, #148]	; (80b14 <TC0_Handler+0xbc>)
   80a7e:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   80a82:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000FF000;
   80a86:	4b23      	ldr	r3, [pc, #140]	; (80b14 <TC0_Handler+0xbc>)
   80a88:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   80a8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	count = count+1;
   80a90:	4b21      	ldr	r3, [pc, #132]	; (80b18 <TC0_Handler+0xc0>)
   80a92:	681b      	ldr	r3, [r3, #0]
   80a94:	3301      	adds	r3, #1
   80a96:	4a20      	ldr	r2, [pc, #128]	; (80b18 <TC0_Handler+0xc0>)
   80a98:	6013      	str	r3, [r2, #0]
	TC1_cnt++;
   80a9a:	4b20      	ldr	r3, [pc, #128]	; (80b1c <TC0_Handler+0xc4>)
   80a9c:	681b      	ldr	r3, [r3, #0]
   80a9e:	3301      	adds	r3, #1
   80aa0:	4a1e      	ldr	r2, [pc, #120]	; (80b1c <TC0_Handler+0xc4>)
   80aa2:	6013      	str	r3, [r2, #0]
   Cnt_TC0_total++;
   80aa4:	4b1e      	ldr	r3, [pc, #120]	; (80b20 <TC0_Handler+0xc8>)
   80aa6:	681b      	ldr	r3, [r3, #0]
   80aa8:	3301      	adds	r3, #1
   80aaa:	4a1d      	ldr	r2, [pc, #116]	; (80b20 <TC0_Handler+0xc8>)
   80aac:	6013      	str	r3, [r2, #0]
	
	if(count<64)
   80aae:	4b1a      	ldr	r3, [pc, #104]	; (80b18 <TC0_Handler+0xc0>)
   80ab0:	681b      	ldr	r3, [r3, #0]
   80ab2:	2b3f      	cmp	r3, #63	; 0x3f
   80ab4:	d80e      	bhi.n	80ad4 <TC0_Handler+0x7c>
	{
		PIOD->PIO_ODSR = array_acid[count].dir;
   80ab6:	4a15      	ldr	r2, [pc, #84]	; (80b0c <TC0_Handler+0xb4>)
   80ab8:	4b17      	ldr	r3, [pc, #92]	; (80b18 <TC0_Handler+0xc0>)
   80aba:	681b      	ldr	r3, [r3, #0]
   80abc:	4919      	ldr	r1, [pc, #100]	; (80b24 <TC0_Handler+0xcc>)
   80abe:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80ac2:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_acid[count].AB;
   80ac4:	4a13      	ldr	r2, [pc, #76]	; (80b14 <TC0_Handler+0xbc>)
   80ac6:	4b14      	ldr	r3, [pc, #80]	; (80b18 <TC0_Handler+0xc0>)
   80ac8:	681b      	ldr	r3, [r3, #0]
   80aca:	4916      	ldr	r1, [pc, #88]	; (80b24 <TC0_Handler+0xcc>)
   80acc:	00db      	lsls	r3, r3, #3
   80ace:	440b      	add	r3, r1
   80ad0:	685b      	ldr	r3, [r3, #4]
   80ad2:	6393      	str	r3, [r2, #56]	; 0x38
		//printf("%x %x\n",array_acid[count].dir,array_acid[count].AB);
	}
	if (count >=64)
   80ad4:	4b10      	ldr	r3, [pc, #64]	; (80b18 <TC0_Handler+0xc0>)
   80ad6:	681b      	ldr	r3, [r3, #0]
   80ad8:	2b3f      	cmp	r3, #63	; 0x3f
   80ada:	d911      	bls.n	80b00 <TC0_Handler+0xa8>
	{
		count = 0;
   80adc:	4b0e      	ldr	r3, [pc, #56]	; (80b18 <TC0_Handler+0xc0>)
   80ade:	2200      	movs	r2, #0
   80ae0:	601a      	str	r2, [r3, #0]
		PIOD->PIO_ODSR = array_acid[count].dir;
   80ae2:	4a0a      	ldr	r2, [pc, #40]	; (80b0c <TC0_Handler+0xb4>)
   80ae4:	4b0c      	ldr	r3, [pc, #48]	; (80b18 <TC0_Handler+0xc0>)
   80ae6:	681b      	ldr	r3, [r3, #0]
   80ae8:	490e      	ldr	r1, [pc, #56]	; (80b24 <TC0_Handler+0xcc>)
   80aea:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80aee:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_acid[count].AB;
   80af0:	4a08      	ldr	r2, [pc, #32]	; (80b14 <TC0_Handler+0xbc>)
   80af2:	4b09      	ldr	r3, [pc, #36]	; (80b18 <TC0_Handler+0xc0>)
   80af4:	681b      	ldr	r3, [r3, #0]
   80af6:	490b      	ldr	r1, [pc, #44]	; (80b24 <TC0_Handler+0xcc>)
   80af8:	00db      	lsls	r3, r3, #3
   80afa:	440b      	add	r3, r1
   80afc:	685b      	ldr	r3, [r3, #4]
   80afe:	6393      	str	r3, [r2, #56]	; 0x38
		//printf("%x %x\n",array_acid[count].dir,array_acid[count].AB);
	}
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80b00:	2100      	movs	r1, #0
   80b02:	4809      	ldr	r0, [pc, #36]	; (80b28 <TC0_Handler+0xd0>)
   80b04:	4b09      	ldr	r3, [pc, #36]	; (80b2c <TC0_Handler+0xd4>)
   80b06:	4798      	blx	r3
	{
	
	}
}
   80b08:	bf00      	nop
   80b0a:	bd80      	pop	{r7, pc}
   80b0c:	400e1400 	.word	0x400e1400
   80b10:	50494f00 	.word	0x50494f00
   80b14:	400e1200 	.word	0x400e1200
   80b18:	20070cc8 	.word	0x20070cc8
   80b1c:	20070ca0 	.word	0x20070ca0
   80b20:	20070ca8 	.word	0x20070ca8
   80b24:	20070000 	.word	0x20070000
   80b28:	40080000 	.word	0x40080000
   80b2c:	000813d9 	.word	0x000813d9

00080b30 <TC1_Handler>:

void TC1_Handler()
{	PIOD->PIO_WPMR	= 0x50494F00;
   80b30:	b580      	push	{r7, lr}
   80b32:	af00      	add	r7, sp, #0
   80b34:	4b2b      	ldr	r3, [pc, #172]	; (80be4 <TC1_Handler+0xb4>)
   80b36:	4a2c      	ldr	r2, [pc, #176]	; (80be8 <TC1_Handler+0xb8>)
   80b38:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   80b3c:	4b2b      	ldr	r3, [pc, #172]	; (80bec <TC1_Handler+0xbc>)
   80b3e:	4a2a      	ldr	r2, [pc, #168]	; (80be8 <TC1_Handler+0xb8>)
   80b40:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x0000000C;
   80b44:	4b27      	ldr	r3, [pc, #156]	; (80be4 <TC1_Handler+0xb4>)
   80b46:	220c      	movs	r2, #12
   80b48:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x00000003;
   80b4c:	4b25      	ldr	r3, [pc, #148]	; (80be4 <TC1_Handler+0xb4>)
   80b4e:	2203      	movs	r2, #3
   80b50:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000FF000;
   80b54:	4b25      	ldr	r3, [pc, #148]	; (80bec <TC1_Handler+0xbc>)
   80b56:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   80b5a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000001FE;
   80b5e:	4b23      	ldr	r3, [pc, #140]	; (80bec <TC1_Handler+0xbc>)
   80b60:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   80b64:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	count1 = count1+1;
   80b68:	4b21      	ldr	r3, [pc, #132]	; (80bf0 <TC1_Handler+0xc0>)
   80b6a:	681b      	ldr	r3, [r3, #0]
   80b6c:	3301      	adds	r3, #1
   80b6e:	4a20      	ldr	r2, [pc, #128]	; (80bf0 <TC1_Handler+0xc0>)
   80b70:	6013      	str	r3, [r2, #0]
	TC2_cnt++;
   80b72:	4b20      	ldr	r3, [pc, #128]	; (80bf4 <TC1_Handler+0xc4>)
   80b74:	681b      	ldr	r3, [r3, #0]
   80b76:	3301      	adds	r3, #1
   80b78:	4a1e      	ldr	r2, [pc, #120]	; (80bf4 <TC1_Handler+0xc4>)
   80b7a:	6013      	str	r3, [r2, #0]
	Cnt_TC1_total++;
   80b7c:	4b1e      	ldr	r3, [pc, #120]	; (80bf8 <TC1_Handler+0xc8>)
   80b7e:	681b      	ldr	r3, [r3, #0]
   80b80:	3301      	adds	r3, #1
   80b82:	4a1d      	ldr	r2, [pc, #116]	; (80bf8 <TC1_Handler+0xc8>)
   80b84:	6013      	str	r3, [r2, #0]
	if(count1<64)
   80b86:	4b1a      	ldr	r3, [pc, #104]	; (80bf0 <TC1_Handler+0xc0>)
   80b88:	681b      	ldr	r3, [r3, #0]
   80b8a:	2b3f      	cmp	r3, #63	; 0x3f
   80b8c:	d80e      	bhi.n	80bac <TC1_Handler+0x7c>
	{
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   80b8e:	4a15      	ldr	r2, [pc, #84]	; (80be4 <TC1_Handler+0xb4>)
   80b90:	4b17      	ldr	r3, [pc, #92]	; (80bf0 <TC1_Handler+0xc0>)
   80b92:	681b      	ldr	r3, [r3, #0]
   80b94:	4919      	ldr	r1, [pc, #100]	; (80bfc <TC1_Handler+0xcc>)
   80b96:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80b9a:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   80b9c:	4a13      	ldr	r2, [pc, #76]	; (80bec <TC1_Handler+0xbc>)
   80b9e:	4b14      	ldr	r3, [pc, #80]	; (80bf0 <TC1_Handler+0xc0>)
   80ba0:	681b      	ldr	r3, [r3, #0]
   80ba2:	4916      	ldr	r1, [pc, #88]	; (80bfc <TC1_Handler+0xcc>)
   80ba4:	00db      	lsls	r3, r3, #3
   80ba6:	440b      	add	r3, r1
   80ba8:	685b      	ldr	r3, [r3, #4]
   80baa:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if (count1 >=64)
   80bac:	4b10      	ldr	r3, [pc, #64]	; (80bf0 <TC1_Handler+0xc0>)
   80bae:	681b      	ldr	r3, [r3, #0]
   80bb0:	2b3f      	cmp	r3, #63	; 0x3f
   80bb2:	d911      	bls.n	80bd8 <TC1_Handler+0xa8>
	{
		count1 = 0;
   80bb4:	4b0e      	ldr	r3, [pc, #56]	; (80bf0 <TC1_Handler+0xc0>)
   80bb6:	2200      	movs	r2, #0
   80bb8:	601a      	str	r2, [r3, #0]
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   80bba:	4a0a      	ldr	r2, [pc, #40]	; (80be4 <TC1_Handler+0xb4>)
   80bbc:	4b0c      	ldr	r3, [pc, #48]	; (80bf0 <TC1_Handler+0xc0>)
   80bbe:	681b      	ldr	r3, [r3, #0]
   80bc0:	490e      	ldr	r1, [pc, #56]	; (80bfc <TC1_Handler+0xcc>)
   80bc2:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80bc6:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   80bc8:	4a08      	ldr	r2, [pc, #32]	; (80bec <TC1_Handler+0xbc>)
   80bca:	4b09      	ldr	r3, [pc, #36]	; (80bf0 <TC1_Handler+0xc0>)
   80bcc:	681b      	ldr	r3, [r3, #0]
   80bce:	490b      	ldr	r1, [pc, #44]	; (80bfc <TC1_Handler+0xcc>)
   80bd0:	00db      	lsls	r3, r3, #3
   80bd2:	440b      	add	r3, r1
   80bd4:	685b      	ldr	r3, [r3, #4]
   80bd6:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if ((tc_get_status(TC0, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   80bd8:	2101      	movs	r1, #1
   80bda:	4809      	ldr	r0, [pc, #36]	; (80c00 <TC1_Handler+0xd0>)
   80bdc:	4b09      	ldr	r3, [pc, #36]	; (80c04 <TC1_Handler+0xd4>)
   80bde:	4798      	blx	r3
	{
		
		
	}
}
   80be0:	bf00      	nop
   80be2:	bd80      	pop	{r7, pc}
   80be4:	400e1400 	.word	0x400e1400
   80be8:	50494f00 	.word	0x50494f00
   80bec:	400e1200 	.word	0x400e1200
   80bf0:	20070ccc 	.word	0x20070ccc
   80bf4:	20070ca4 	.word	0x20070ca4
   80bf8:	20070cac 	.word	0x20070cac
   80bfc:	20070200 	.word	0x20070200
   80c00:	40080000 	.word	0x40080000
   80c04:	000813d9 	.word	0x000813d9

00080c08 <TC2_Handler>:
void TC2_Handler()
{
   80c08:	b580      	push	{r7, lr}
   80c0a:	af00      	add	r7, sp, #0
// 	else
// 	{
// 		i2c_counter = 0;
// 	}
	//printf("reached 2sec\n");
	tc_stop(TC0,0);
   80c0c:	2100      	movs	r1, #0
   80c0e:	4808      	ldr	r0, [pc, #32]	; (80c30 <TC2_Handler+0x28>)
   80c10:	4b08      	ldr	r3, [pc, #32]	; (80c34 <TC2_Handler+0x2c>)
   80c12:	4798      	blx	r3
	tc_stop(TC0,1);
   80c14:	2101      	movs	r1, #1
   80c16:	4806      	ldr	r0, [pc, #24]	; (80c30 <TC2_Handler+0x28>)
   80c18:	4b06      	ldr	r3, [pc, #24]	; (80c34 <TC2_Handler+0x2c>)
   80c1a:	4798      	blx	r3
// 	toggle = 1;
// }
// else
{
//	PIOB->PIO_CODR = 1 << 19 ;
	toggle = 0;
   80c1c:	4b06      	ldr	r3, [pc, #24]	; (80c38 <TC2_Handler+0x30>)
   80c1e:	2200      	movs	r2, #0
   80c20:	701a      	strb	r2, [r3, #0]
}

	if ((tc_get_status(TC0, 2) & TC_SR_CPCS) == TC_SR_CPCS)
   80c22:	2102      	movs	r1, #2
   80c24:	4802      	ldr	r0, [pc, #8]	; (80c30 <TC2_Handler+0x28>)
   80c26:	4b05      	ldr	r3, [pc, #20]	; (80c3c <TC2_Handler+0x34>)
   80c28:	4798      	blx	r3
	{
		
	}
}
   80c2a:	bf00      	nop
   80c2c:	bd80      	pop	{r7, pc}
   80c2e:	bf00      	nop
   80c30:	40080000 	.word	0x40080000
   80c34:	0008136d 	.word	0x0008136d
   80c38:	20070c9c 	.word	0x20070c9c
   80c3c:	000813d9 	.word	0x000813d9

00080c40 <TC3_Handler>:
void TC3_Handler()
{
   80c40:	b580      	push	{r7, lr}
   80c42:	af00      	add	r7, sp, #0
	
	if ((tc_get_status(TC1, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80c44:	2100      	movs	r1, #0
   80c46:	4802      	ldr	r0, [pc, #8]	; (80c50 <TC3_Handler+0x10>)
   80c48:	4b02      	ldr	r3, [pc, #8]	; (80c54 <TC3_Handler+0x14>)
   80c4a:	4798      	blx	r3
	{
		
	}
}
   80c4c:	bf00      	nop
   80c4e:	bd80      	pop	{r7, pc}
   80c50:	40084000 	.word	0x40084000
   80c54:	000813d9 	.word	0x000813d9

00080c58 <TC6_Handler>:

void TC6_Handler()
{
   80c58:	b580      	push	{r7, lr}
   80c5a:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC6_IRQn);
   80c5c:	2021      	movs	r0, #33	; 0x21
   80c5e:	4b29      	ldr	r3, [pc, #164]	; (80d04 <TC6_Handler+0xac>)
   80c60:	4798      	blx	r3
	tick++;
   80c62:	4b29      	ldr	r3, [pc, #164]	; (80d08 <TC6_Handler+0xb0>)
   80c64:	681b      	ldr	r3, [r3, #0]
   80c66:	3301      	adds	r3, #1
   80c68:	4a27      	ldr	r2, [pc, #156]	; (80d08 <TC6_Handler+0xb0>)
   80c6a:	6013      	str	r3, [r2, #0]
	if (tick == 10)
   80c6c:	4b26      	ldr	r3, [pc, #152]	; (80d08 <TC6_Handler+0xb0>)
   80c6e:	681b      	ldr	r3, [r3, #0]
   80c70:	2b0a      	cmp	r3, #10
   80c72:	d10a      	bne.n	80c8a <TC6_Handler+0x32>
	{
		tick_10++;
   80c74:	4b25      	ldr	r3, [pc, #148]	; (80d0c <TC6_Handler+0xb4>)
   80c76:	681b      	ldr	r3, [r3, #0]
   80c78:	3301      	adds	r3, #1
   80c7a:	4a24      	ldr	r2, [pc, #144]	; (80d0c <TC6_Handler+0xb4>)
   80c7c:	6013      	str	r3, [r2, #0]
		tick = 0;
   80c7e:	4b22      	ldr	r3, [pc, #136]	; (80d08 <TC6_Handler+0xb0>)
   80c80:	2200      	movs	r2, #0
   80c82:	601a      	str	r2, [r3, #0]
		time_tick = TICK_10MS;
   80c84:	4b22      	ldr	r3, [pc, #136]	; (80d10 <TC6_Handler+0xb8>)
   80c86:	2200      	movs	r2, #0
   80c88:	601a      	str	r2, [r3, #0]
	}
	if (tick_10 == 5)
   80c8a:	4b20      	ldr	r3, [pc, #128]	; (80d0c <TC6_Handler+0xb4>)
   80c8c:	681b      	ldr	r3, [r3, #0]
   80c8e:	2b05      	cmp	r3, #5
   80c90:	d10a      	bne.n	80ca8 <TC6_Handler+0x50>
	{
		tick_50++;
   80c92:	4b20      	ldr	r3, [pc, #128]	; (80d14 <TC6_Handler+0xbc>)
   80c94:	681b      	ldr	r3, [r3, #0]
   80c96:	3301      	adds	r3, #1
   80c98:	4a1e      	ldr	r2, [pc, #120]	; (80d14 <TC6_Handler+0xbc>)
   80c9a:	6013      	str	r3, [r2, #0]
		tick_10 = 0;
   80c9c:	4b1b      	ldr	r3, [pc, #108]	; (80d0c <TC6_Handler+0xb4>)
   80c9e:	2200      	movs	r2, #0
   80ca0:	601a      	str	r2, [r3, #0]
		time_tick = TICK_50MS;
   80ca2:	4b1b      	ldr	r3, [pc, #108]	; (80d10 <TC6_Handler+0xb8>)
   80ca4:	2201      	movs	r2, #1
   80ca6:	601a      	str	r2, [r3, #0]
	}
	if (tick_50 == 2)
   80ca8:	4b1a      	ldr	r3, [pc, #104]	; (80d14 <TC6_Handler+0xbc>)
   80caa:	681b      	ldr	r3, [r3, #0]
   80cac:	2b02      	cmp	r3, #2
   80cae:	d10a      	bne.n	80cc6 <TC6_Handler+0x6e>
	{
		tick_100++;
   80cb0:	4b19      	ldr	r3, [pc, #100]	; (80d18 <TC6_Handler+0xc0>)
   80cb2:	681b      	ldr	r3, [r3, #0]
   80cb4:	3301      	adds	r3, #1
   80cb6:	4a18      	ldr	r2, [pc, #96]	; (80d18 <TC6_Handler+0xc0>)
   80cb8:	6013      	str	r3, [r2, #0]
		tick_50 = 0;
   80cba:	4b16      	ldr	r3, [pc, #88]	; (80d14 <TC6_Handler+0xbc>)
   80cbc:	2200      	movs	r2, #0
   80cbe:	601a      	str	r2, [r3, #0]
		time_tick = TICK_100MS;
   80cc0:	4b13      	ldr	r3, [pc, #76]	; (80d10 <TC6_Handler+0xb8>)
   80cc2:	2202      	movs	r2, #2
   80cc4:	601a      	str	r2, [r3, #0]
	}
	if (tick_100 == 5)
   80cc6:	4b14      	ldr	r3, [pc, #80]	; (80d18 <TC6_Handler+0xc0>)
   80cc8:	681b      	ldr	r3, [r3, #0]
   80cca:	2b05      	cmp	r3, #5
   80ccc:	d10a      	bne.n	80ce4 <TC6_Handler+0x8c>
	{
		tick_500++;
   80cce:	4b13      	ldr	r3, [pc, #76]	; (80d1c <TC6_Handler+0xc4>)
   80cd0:	681b      	ldr	r3, [r3, #0]
   80cd2:	3301      	adds	r3, #1
   80cd4:	4a11      	ldr	r2, [pc, #68]	; (80d1c <TC6_Handler+0xc4>)
   80cd6:	6013      	str	r3, [r2, #0]
		tick_100 = 0;
   80cd8:	4b0f      	ldr	r3, [pc, #60]	; (80d18 <TC6_Handler+0xc0>)
   80cda:	2200      	movs	r2, #0
   80cdc:	601a      	str	r2, [r3, #0]
		time_tick = TICK_500MS;
   80cde:	4b0c      	ldr	r3, [pc, #48]	; (80d10 <TC6_Handler+0xb8>)
   80ce0:	2203      	movs	r2, #3
   80ce2:	601a      	str	r2, [r3, #0]
	}
	if (tick_500 == 2)
   80ce4:	4b0d      	ldr	r3, [pc, #52]	; (80d1c <TC6_Handler+0xc4>)
   80ce6:	681b      	ldr	r3, [r3, #0]
   80ce8:	2b02      	cmp	r3, #2
   80cea:	d105      	bne.n	80cf8 <TC6_Handler+0xa0>
	{
		tick_500 = 0;
   80cec:	4b0b      	ldr	r3, [pc, #44]	; (80d1c <TC6_Handler+0xc4>)
   80cee:	2200      	movs	r2, #0
   80cf0:	601a      	str	r2, [r3, #0]
		time_tick = TICK_SEC;
   80cf2:	4b07      	ldr	r3, [pc, #28]	; (80d10 <TC6_Handler+0xb8>)
   80cf4:	2204      	movs	r2, #4
   80cf6:	601a      	str	r2, [r3, #0]
		//printf("1sec\n");
	}
	
	if ((tc_get_status(TC2, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80cf8:	2100      	movs	r1, #0
   80cfa:	4809      	ldr	r0, [pc, #36]	; (80d20 <TC6_Handler+0xc8>)
   80cfc:	4b09      	ldr	r3, [pc, #36]	; (80d24 <TC6_Handler+0xcc>)
   80cfe:	4798      	blx	r3
	{
		//printf("i m in handler tc6\n");
	}
   80d00:	bf00      	nop
   80d02:	bd80      	pop	{r7, pc}
   80d04:	00080a25 	.word	0x00080a25
   80d08:	20070cb0 	.word	0x20070cb0
   80d0c:	20070cb4 	.word	0x20070cb4
   80d10:	200711e4 	.word	0x200711e4
   80d14:	20070cb8 	.word	0x20070cb8
   80d18:	20070cbc 	.word	0x20070cbc
   80d1c:	20070cc0 	.word	0x20070cc0
   80d20:	40088000 	.word	0x40088000
   80d24:	000813d9 	.word	0x000813d9

00080d28 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80d28:	b480      	push	{r7}
   80d2a:	b083      	sub	sp, #12
   80d2c:	af00      	add	r7, sp, #0
   80d2e:	4603      	mov	r3, r0
   80d30:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80d32:	4908      	ldr	r1, [pc, #32]	; (80d54 <NVIC_EnableIRQ+0x2c>)
   80d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80d38:	095b      	lsrs	r3, r3, #5
   80d3a:	79fa      	ldrb	r2, [r7, #7]
   80d3c:	f002 021f 	and.w	r2, r2, #31
   80d40:	2001      	movs	r0, #1
   80d42:	fa00 f202 	lsl.w	r2, r0, r2
   80d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80d4a:	bf00      	nop
   80d4c:	370c      	adds	r7, #12
   80d4e:	46bd      	mov	sp, r7
   80d50:	bc80      	pop	{r7}
   80d52:	4770      	bx	lr
   80d54:	e000e100 	.word	0xe000e100

00080d58 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   80d58:	b480      	push	{r7}
   80d5a:	b083      	sub	sp, #12
   80d5c:	af00      	add	r7, sp, #0
   80d5e:	4603      	mov	r3, r0
   80d60:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   80d62:	4909      	ldr	r1, [pc, #36]	; (80d88 <NVIC_DisableIRQ+0x30>)
   80d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80d68:	095b      	lsrs	r3, r3, #5
   80d6a:	79fa      	ldrb	r2, [r7, #7]
   80d6c:	f002 021f 	and.w	r2, r2, #31
   80d70:	2001      	movs	r0, #1
   80d72:	fa00 f202 	lsl.w	r2, r0, r2
   80d76:	3320      	adds	r3, #32
   80d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80d7c:	bf00      	nop
   80d7e:	370c      	adds	r7, #12
   80d80:	46bd      	mov	sp, r7
   80d82:	bc80      	pop	{r7}
   80d84:	4770      	bx	lr
   80d86:	bf00      	nop
   80d88:	e000e100 	.word	0xe000e100

00080d8c <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80d8c:	b480      	push	{r7}
   80d8e:	b083      	sub	sp, #12
   80d90:	af00      	add	r7, sp, #0
   80d92:	4603      	mov	r3, r0
   80d94:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80d96:	4909      	ldr	r1, [pc, #36]	; (80dbc <NVIC_ClearPendingIRQ+0x30>)
   80d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80d9c:	095b      	lsrs	r3, r3, #5
   80d9e:	79fa      	ldrb	r2, [r7, #7]
   80da0:	f002 021f 	and.w	r2, r2, #31
   80da4:	2001      	movs	r0, #1
   80da6:	fa00 f202 	lsl.w	r2, r0, r2
   80daa:	3360      	adds	r3, #96	; 0x60
   80dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80db0:	bf00      	nop
   80db2:	370c      	adds	r7, #12
   80db4:	46bd      	mov	sp, r7
   80db6:	bc80      	pop	{r7}
   80db8:	4770      	bx	lr
   80dba:	bf00      	nop
   80dbc:	e000e100 	.word	0xe000e100

00080dc0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   80dc0:	b480      	push	{r7}
   80dc2:	b083      	sub	sp, #12
   80dc4:	af00      	add	r7, sp, #0
   80dc6:	4603      	mov	r3, r0
   80dc8:	6039      	str	r1, [r7, #0]
   80dca:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   80dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80dd0:	2b00      	cmp	r3, #0
   80dd2:	da0b      	bge.n	80dec <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   80dd4:	490d      	ldr	r1, [pc, #52]	; (80e0c <NVIC_SetPriority+0x4c>)
   80dd6:	79fb      	ldrb	r3, [r7, #7]
   80dd8:	f003 030f 	and.w	r3, r3, #15
   80ddc:	3b04      	subs	r3, #4
   80dde:	683a      	ldr	r2, [r7, #0]
   80de0:	b2d2      	uxtb	r2, r2
   80de2:	0112      	lsls	r2, r2, #4
   80de4:	b2d2      	uxtb	r2, r2
   80de6:	440b      	add	r3, r1
   80de8:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   80dea:	e009      	b.n	80e00 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   80dec:	4908      	ldr	r1, [pc, #32]	; (80e10 <NVIC_SetPriority+0x50>)
   80dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80df2:	683a      	ldr	r2, [r7, #0]
   80df4:	b2d2      	uxtb	r2, r2
   80df6:	0112      	lsls	r2, r2, #4
   80df8:	b2d2      	uxtb	r2, r2
   80dfa:	440b      	add	r3, r1
   80dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   80e00:	bf00      	nop
   80e02:	370c      	adds	r7, #12
   80e04:	46bd      	mov	sp, r7
   80e06:	bc80      	pop	{r7}
   80e08:	4770      	bx	lr
   80e0a:	bf00      	nop
   80e0c:	e000ed00 	.word	0xe000ed00
   80e10:	e000e100 	.word	0xe000e100

00080e14 <CPU3_D_INIT_INT>:
#include "D_INT.h"

#define BOARD_TWI_IRQn          TWI0_IRQn

void CPU3_D_INIT_INT()
{
   80e14:	b580      	push	{r7, lr}
   80e16:	af00      	add	r7, sp, #0
	
	NVIC_DisableIRQ(BOARD_TWI_IRQn);
   80e18:	2016      	movs	r0, #22
   80e1a:	4b31      	ldr	r3, [pc, #196]	; (80ee0 <CPU3_D_INIT_INT+0xcc>)
   80e1c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
   80e1e:	2016      	movs	r0, #22
   80e20:	4b30      	ldr	r3, [pc, #192]	; (80ee4 <CPU3_D_INIT_INT+0xd0>)
   80e22:	4798      	blx	r3
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
   80e24:	2100      	movs	r1, #0
   80e26:	2016      	movs	r0, #22
   80e28:	4b2f      	ldr	r3, [pc, #188]	; (80ee8 <CPU3_D_INIT_INT+0xd4>)
   80e2a:	4798      	blx	r3
	NVIC_EnableIRQ(BOARD_TWI_IRQn);
   80e2c:	2016      	movs	r0, #22
   80e2e:	4b2f      	ldr	r3, [pc, #188]	; (80eec <CPU3_D_INIT_INT+0xd8>)
   80e30:	4798      	blx	r3
	
	NVIC_DisableIRQ(UART_IRQn);
   80e32:	2008      	movs	r0, #8
   80e34:	4b2a      	ldr	r3, [pc, #168]	; (80ee0 <CPU3_D_INIT_INT+0xcc>)
   80e36:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   80e38:	2008      	movs	r0, #8
   80e3a:	4b2a      	ldr	r3, [pc, #168]	; (80ee4 <CPU3_D_INIT_INT+0xd0>)
   80e3c:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn,0);
   80e3e:	2100      	movs	r1, #0
   80e40:	2008      	movs	r0, #8
   80e42:	4b29      	ldr	r3, [pc, #164]	; (80ee8 <CPU3_D_INIT_INT+0xd4>)
   80e44:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   80e46:	2008      	movs	r0, #8
   80e48:	4b28      	ldr	r3, [pc, #160]	; (80eec <CPU3_D_INIT_INT+0xd8>)
   80e4a:	4798      	blx	r3
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   80e4c:	2101      	movs	r1, #1
   80e4e:	4828      	ldr	r0, [pc, #160]	; (80ef0 <CPU3_D_INIT_INT+0xdc>)
   80e50:	4b28      	ldr	r3, [pc, #160]	; (80ef4 <CPU3_D_INIT_INT+0xe0>)
   80e52:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC0_IRQn);
   80e54:	201b      	movs	r0, #27
   80e56:	4b22      	ldr	r3, [pc, #136]	; (80ee0 <CPU3_D_INIT_INT+0xcc>)
   80e58:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC0_IRQn);
   80e5a:	201b      	movs	r0, #27
   80e5c:	4b21      	ldr	r3, [pc, #132]	; (80ee4 <CPU3_D_INIT_INT+0xd0>)
   80e5e:	4798      	blx	r3
	NVIC_SetPriority(TC0_IRQn,0);
   80e60:	2100      	movs	r1, #0
   80e62:	201b      	movs	r0, #27
   80e64:	4b20      	ldr	r3, [pc, #128]	; (80ee8 <CPU3_D_INIT_INT+0xd4>)
   80e66:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
   80e68:	201b      	movs	r0, #27
   80e6a:	4b20      	ldr	r3, [pc, #128]	; (80eec <CPU3_D_INIT_INT+0xd8>)
   80e6c:	4798      	blx	r3

	NVIC_DisableIRQ(TC1_IRQn);
   80e6e:	201c      	movs	r0, #28
   80e70:	4b1b      	ldr	r3, [pc, #108]	; (80ee0 <CPU3_D_INIT_INT+0xcc>)
   80e72:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC1_IRQn);
   80e74:	201c      	movs	r0, #28
   80e76:	4b1b      	ldr	r3, [pc, #108]	; (80ee4 <CPU3_D_INIT_INT+0xd0>)
   80e78:	4798      	blx	r3
	NVIC_SetPriority(TC1_IRQn,0);
   80e7a:	2100      	movs	r1, #0
   80e7c:	201c      	movs	r0, #28
   80e7e:	4b1a      	ldr	r3, [pc, #104]	; (80ee8 <CPU3_D_INIT_INT+0xd4>)
   80e80:	4798      	blx	r3
	NVIC_EnableIRQ(TC1_IRQn);
   80e82:	201c      	movs	r0, #28
   80e84:	4b19      	ldr	r3, [pc, #100]	; (80eec <CPU3_D_INIT_INT+0xd8>)
   80e86:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC2_IRQn);
   80e88:	201d      	movs	r0, #29
   80e8a:	4b15      	ldr	r3, [pc, #84]	; (80ee0 <CPU3_D_INIT_INT+0xcc>)
   80e8c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC2_IRQn);
   80e8e:	201d      	movs	r0, #29
   80e90:	4b14      	ldr	r3, [pc, #80]	; (80ee4 <CPU3_D_INIT_INT+0xd0>)
   80e92:	4798      	blx	r3
	NVIC_SetPriority(TC2_IRQn,0);
   80e94:	2100      	movs	r1, #0
   80e96:	201d      	movs	r0, #29
   80e98:	4b13      	ldr	r3, [pc, #76]	; (80ee8 <CPU3_D_INIT_INT+0xd4>)
   80e9a:	4798      	blx	r3
	NVIC_EnableIRQ(TC2_IRQn);
   80e9c:	201d      	movs	r0, #29
   80e9e:	4b13      	ldr	r3, [pc, #76]	; (80eec <CPU3_D_INIT_INT+0xd8>)
   80ea0:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC3_IRQn);
   80ea2:	201e      	movs	r0, #30
   80ea4:	4b0e      	ldr	r3, [pc, #56]	; (80ee0 <CPU3_D_INIT_INT+0xcc>)
   80ea6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC3_IRQn);
   80ea8:	201e      	movs	r0, #30
   80eaa:	4b0e      	ldr	r3, [pc, #56]	; (80ee4 <CPU3_D_INIT_INT+0xd0>)
   80eac:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,0);
   80eae:	2100      	movs	r1, #0
   80eb0:	201e      	movs	r0, #30
   80eb2:	4b0d      	ldr	r3, [pc, #52]	; (80ee8 <CPU3_D_INIT_INT+0xd4>)
   80eb4:	4798      	blx	r3
	NVIC_EnableIRQ(TC3_IRQn);
   80eb6:	201e      	movs	r0, #30
   80eb8:	4b0c      	ldr	r3, [pc, #48]	; (80eec <CPU3_D_INIT_INT+0xd8>)
   80eba:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC6_IRQn);
   80ebc:	2021      	movs	r0, #33	; 0x21
   80ebe:	4b08      	ldr	r3, [pc, #32]	; (80ee0 <CPU3_D_INIT_INT+0xcc>)
   80ec0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC6_IRQn);
   80ec2:	2021      	movs	r0, #33	; 0x21
   80ec4:	4b07      	ldr	r3, [pc, #28]	; (80ee4 <CPU3_D_INIT_INT+0xd0>)
   80ec6:	4798      	blx	r3
	NVIC_SetPriority(TC6_IRQn,0);
   80ec8:	2100      	movs	r1, #0
   80eca:	2021      	movs	r0, #33	; 0x21
   80ecc:	4b06      	ldr	r3, [pc, #24]	; (80ee8 <CPU3_D_INIT_INT+0xd4>)
   80ece:	4798      	blx	r3
	NVIC_EnableIRQ(TC6_IRQn);
   80ed0:	2021      	movs	r0, #33	; 0x21
   80ed2:	4b06      	ldr	r3, [pc, #24]	; (80eec <CPU3_D_INIT_INT+0xd8>)
   80ed4:	4798      	blx	r3
	
	NVIC_EnableIRQ(CAN0_IRQn);
   80ed6:	202b      	movs	r0, #43	; 0x2b
   80ed8:	4b04      	ldr	r3, [pc, #16]	; (80eec <CPU3_D_INIT_INT+0xd8>)
   80eda:	4798      	blx	r3
	
	
   80edc:	bf00      	nop
   80ede:	bd80      	pop	{r7, pc}
   80ee0:	00080d59 	.word	0x00080d59
   80ee4:	00080d8d 	.word	0x00080d8d
   80ee8:	00080dc1 	.word	0x00080dc1
   80eec:	00080d29 	.word	0x00080d29
   80ef0:	400e0800 	.word	0x400e0800
   80ef4:	000814a5 	.word	0x000814a5

00080ef8 <CPU3_D_INIT_PWM>:
 */ 

#include "D_PWM.h"

void CPU3_D_INIT_PWM()
{
   80ef8:	b480      	push	{r7}
   80efa:	af00      	add	r7, sp, #0
	PWM->PWM_WPCR = 0x50574D00;
   80efc:	4b14      	ldr	r3, [pc, #80]	; (80f50 <CPU3_D_INIT_PWM+0x58>)
   80efe:	4a15      	ldr	r2, [pc, #84]	; (80f54 <CPU3_D_INIT_PWM+0x5c>)
   80f00:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   80f04:	4b12      	ldr	r3, [pc, #72]	; (80f50 <CPU3_D_INIT_PWM+0x58>)
   80f06:	4a14      	ldr	r2, [pc, #80]	; (80f58 <CPU3_D_INIT_PWM+0x60>)
   80f08:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   80f0c:	4b10      	ldr	r3, [pc, #64]	; (80f50 <CPU3_D_INIT_PWM+0x58>)
   80f0e:	4a12      	ldr	r2, [pc, #72]	; (80f58 <CPU3_D_INIT_PWM+0x60>)
   80f10:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0

	PWM->PWM_DIS = 0x000000FF;
   80f14:	4b0e      	ldr	r3, [pc, #56]	; (80f50 <CPU3_D_INIT_PWM+0x58>)
   80f16:	22ff      	movs	r2, #255	; 0xff
   80f18:	609a      	str	r2, [r3, #8]
	
	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   80f1a:	4b0d      	ldr	r3, [pc, #52]	; (80f50 <CPU3_D_INIT_PWM+0x58>)
   80f1c:	f640 2241 	movw	r2, #2625	; 0xa41
   80f20:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x00000700;
   80f24:	4b0a      	ldr	r3, [pc, #40]	; (80f50 <CPU3_D_INIT_PWM+0x58>)
   80f26:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   80f2a:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	
	PWM->PWM_CH_NUM[5].PWM_CPRD = 0x00000A41;
   80f2e:	4b08      	ldr	r3, [pc, #32]	; (80f50 <CPU3_D_INIT_PWM+0x58>)
   80f30:	f640 2241 	movw	r2, #2625	; 0xa41
   80f34:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000700;
   80f38:	4b05      	ldr	r3, [pc, #20]	; (80f50 <CPU3_D_INIT_PWM+0x58>)
   80f3a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   80f3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	PWM->PWM_ENA = 0x000000FF;
   80f42:	4b03      	ldr	r3, [pc, #12]	; (80f50 <CPU3_D_INIT_PWM+0x58>)
   80f44:	22ff      	movs	r2, #255	; 0xff
   80f46:	605a      	str	r2, [r3, #4]
}
   80f48:	bf00      	nop
   80f4a:	46bd      	mov	sp, r7
   80f4c:	bc80      	pop	{r7}
   80f4e:	4770      	bx	lr
   80f50:	40094000 	.word	0x40094000
   80f54:	50574d00 	.word	0x50574d00
   80f58:	00070605 	.word	0x00070605

00080f5c <CPU3_D_INIT_TIMER>:


extern uint32_t ra,rc;

void CPU3_D_INIT_TIMER()
{
   80f5c:	b580      	push	{r7, lr}
   80f5e:	af00      	add	r7, sp, #0
	TC0->TC_WPMR = 0x54494D00;
   80f60:	4b1f      	ldr	r3, [pc, #124]	; (80fe0 <CPU3_D_INIT_TIMER+0x84>)
   80f62:	4a20      	ldr	r2, [pc, #128]	; (80fe4 <CPU3_D_INIT_TIMER+0x88>)
   80f64:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC1->TC_WPMR = 0x54494D00;
   80f68:	4b1f      	ldr	r3, [pc, #124]	; (80fe8 <CPU3_D_INIT_TIMER+0x8c>)
   80f6a:	4a1e      	ldr	r2, [pc, #120]	; (80fe4 <CPU3_D_INIT_TIMER+0x88>)
   80f6c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC2->TC_WPMR = 0x54494D00;
   80f70:	4b1e      	ldr	r3, [pc, #120]	; (80fec <CPU3_D_INIT_TIMER+0x90>)
   80f72:	4a1c      	ldr	r2, [pc, #112]	; (80fe4 <CPU3_D_INIT_TIMER+0x88>)
   80f74:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	pmc_enable_periph_clk(ID_TC0);
   80f78:	201b      	movs	r0, #27
   80f7a:	4b1d      	ldr	r3, [pc, #116]	; (80ff0 <CPU3_D_INIT_TIMER+0x94>)
   80f7c:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   80f7e:	201c      	movs	r0, #28
   80f80:	4b1b      	ldr	r3, [pc, #108]	; (80ff0 <CPU3_D_INIT_TIMER+0x94>)
   80f82:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC3);
   80f84:	201e      	movs	r0, #30
   80f86:	4b1a      	ldr	r3, [pc, #104]	; (80ff0 <CPU3_D_INIT_TIMER+0x94>)
   80f88:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC4);
   80f8a:	201f      	movs	r0, #31
   80f8c:	4b18      	ldr	r3, [pc, #96]	; (80ff0 <CPU3_D_INIT_TIMER+0x94>)
   80f8e:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC6);
   80f90:	2021      	movs	r0, #33	; 0x21
   80f92:	4b17      	ldr	r3, [pc, #92]	; (80ff0 <CPU3_D_INIT_TIMER+0x94>)
   80f94:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   80f96:	4b12      	ldr	r3, [pc, #72]	; (80fe0 <CPU3_D_INIT_TIMER+0x84>)
   80f98:	f24c 0203 	movw	r2, #49155	; 0xc003
   80f9c:	605a      	str	r2, [r3, #4]
	TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   80f9e:	4b10      	ldr	r3, [pc, #64]	; (80fe0 <CPU3_D_INIT_TIMER+0x84>)
   80fa0:	f24c 0203 	movw	r2, #49155	; 0xc003
   80fa4:	645a      	str	r2, [r3, #68]	; 0x44
	
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   80fa6:	4b10      	ldr	r3, [pc, #64]	; (80fe8 <CPU3_D_INIT_TIMER+0x8c>)
   80fa8:	f24c 0203 	movw	r2, #49155	; 0xc003
   80fac:	605a      	str	r2, [r3, #4]
	TC1->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   80fae:	4b0e      	ldr	r3, [pc, #56]	; (80fe8 <CPU3_D_INIT_TIMER+0x8c>)
   80fb0:	f24c 0203 	movw	r2, #49155	; 0xc003
   80fb4:	645a      	str	r2, [r3, #68]	; 0x44
	
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   80fb6:	4b0d      	ldr	r3, [pc, #52]	; (80fec <CPU3_D_INIT_TIMER+0x90>)
   80fb8:	f24c 0203 	movw	r2, #49155	; 0xc003
   80fbc:	605a      	str	r2, [r3, #4]
	
	TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   80fbe:	4b08      	ldr	r3, [pc, #32]	; (80fe0 <CPU3_D_INIT_TIMER+0x84>)
   80fc0:	2210      	movs	r2, #16
   80fc2:	625a      	str	r2, [r3, #36]	; 0x24
	TC0->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
   80fc4:	4b06      	ldr	r3, [pc, #24]	; (80fe0 <CPU3_D_INIT_TIMER+0x84>)
   80fc6:	2210      	movs	r2, #16
   80fc8:	665a      	str	r2, [r3, #100]	; 0x64
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   80fca:	4b07      	ldr	r3, [pc, #28]	; (80fe8 <CPU3_D_INIT_TIMER+0x8c>)
   80fcc:	2210      	movs	r2, #16
   80fce:	625a      	str	r2, [r3, #36]	; 0x24
	TC1->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
   80fd0:	4b05      	ldr	r3, [pc, #20]	; (80fe8 <CPU3_D_INIT_TIMER+0x8c>)
   80fd2:	2210      	movs	r2, #16
   80fd4:	665a      	str	r2, [r3, #100]	; 0x64
	TC2->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   80fd6:	4b05      	ldr	r3, [pc, #20]	; (80fec <CPU3_D_INIT_TIMER+0x90>)
   80fd8:	2210      	movs	r2, #16
   80fda:	625a      	str	r2, [r3, #36]	; 0x24
}
   80fdc:	bf00      	nop
   80fde:	bd80      	pop	{r7, pc}
   80fe0:	40080000 	.word	0x40080000
   80fe4:	54494d00 	.word	0x54494d00
   80fe8:	40084000 	.word	0x40084000
   80fec:	40088000 	.word	0x40088000
   80ff0:	00082fb1 	.word	0x00082fb1

00080ff4 <CPU3_D_MAIN_TIMER>:


uint8_t CPU3_D_MAIN_TIMER(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t fre)
{
   80ff4:	b580      	push	{r7, lr}
   80ff6:	b084      	sub	sp, #16
   80ff8:	af00      	add	r7, sp, #0
   80ffa:	60f8      	str	r0, [r7, #12]
   80ffc:	60b9      	str	r1, [r7, #8]
   80ffe:	603b      	str	r3, [r7, #0]
   81000:	4613      	mov	r3, r2
   81002:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   81004:	2000      	movs	r0, #0
   81006:	4b0d      	ldr	r3, [pc, #52]	; (8103c <CPU3_D_MAIN_TIMER+0x48>)
   81008:	4798      	blx	r3
	channel=0;
   8100a:	2300      	movs	r3, #0
   8100c:	60bb      	str	r3, [r7, #8]
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   8100e:	4b0c      	ldr	r3, [pc, #48]	; (81040 <CPU3_D_MAIN_TIMER+0x4c>)
   81010:	f24c 0203 	movw	r2, #49155	; 0xc003
   81014:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel,fre);
   81016:	683a      	ldr	r2, [r7, #0]
   81018:	68b9      	ldr	r1, [r7, #8]
   8101a:	68f8      	ldr	r0, [r7, #12]
   8101c:	4b09      	ldr	r3, [pc, #36]	; (81044 <CPU3_D_MAIN_TIMER+0x50>)
   8101e:	4798      	blx	r3
	tc_start(tc, channel);
   81020:	68b9      	ldr	r1, [r7, #8]
   81022:	68f8      	ldr	r0, [r7, #12]
   81024:	4b08      	ldr	r3, [pc, #32]	; (81048 <CPU3_D_MAIN_TIMER+0x54>)
   81026:	4798      	blx	r3
	tc_enable_interrupt(tc, channel, TC_IER_CPCS);
   81028:	2210      	movs	r2, #16
   8102a:	68b9      	ldr	r1, [r7, #8]
   8102c:	68f8      	ldr	r0, [r7, #12]
   8102e:	4b07      	ldr	r3, [pc, #28]	; (8104c <CPU3_D_MAIN_TIMER+0x58>)
   81030:	4798      	blx	r3
}
   81032:	bf00      	nop
   81034:	4618      	mov	r0, r3
   81036:	3710      	adds	r7, #16
   81038:	46bd      	mov	sp, r7
   8103a:	bd80      	pop	{r7, pc}
   8103c:	00083031 	.word	0x00083031
   81040:	40088000 	.word	0x40088000
   81044:	0008138d 	.word	0x0008138d
   81048:	0008134d 	.word	0x0008134d
   8104c:	000813b1 	.word	0x000813b1

00081050 <acid_startTimer1>:

void acid_startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   81050:	b580      	push	{r7, lr}
   81052:	b084      	sub	sp, #16
   81054:	af00      	add	r7, sp, #0
   81056:	60f8      	str	r0, [r7, #12]
   81058:	60b9      	str	r1, [r7, #8]
   8105a:	603b      	str	r3, [r7, #0]
   8105c:	4613      	mov	r3, r2
   8105e:	71fb      	strb	r3, [r7, #7]
	//printf("h\n");
	pmc_set_writeprotect(0);
   81060:	2000      	movs	r0, #0
   81062:	4b10      	ldr	r3, [pc, #64]	; (810a4 <acid_startTimer1+0x54>)
   81064:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC0);
   81066:	201b      	movs	r0, #27
   81068:	4b0f      	ldr	r3, [pc, #60]	; (810a8 <acid_startTimer1+0x58>)
   8106a:	4798      	blx	r3
	//printf("%d\n",stepcount);
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3);
   8106c:	f24c 0202 	movw	r2, #49154	; 0xc002
   81070:	68b9      	ldr	r1, [r7, #8]
   81072:	68f8      	ldr	r0, [r7, #12]
   81074:	4b0d      	ldr	r3, [pc, #52]	; (810ac <acid_startTimer1+0x5c>)
   81076:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3;
   81078:	4b0d      	ldr	r3, [pc, #52]	; (810b0 <acid_startTimer1+0x60>)
   8107a:	f24c 0202 	movw	r2, #49154	; 0xc002
   8107e:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel, stepcount);
   81080:	683a      	ldr	r2, [r7, #0]
   81082:	68b9      	ldr	r1, [r7, #8]
   81084:	68f8      	ldr	r0, [r7, #12]
   81086:	4b0b      	ldr	r3, [pc, #44]	; (810b4 <acid_startTimer1+0x64>)
   81088:	4798      	blx	r3
	tc_enable_interrupt(TC0,0,TC_IER_CPCS);
   8108a:	2210      	movs	r2, #16
   8108c:	2100      	movs	r1, #0
   8108e:	4808      	ldr	r0, [pc, #32]	; (810b0 <acid_startTimer1+0x60>)
   81090:	4b09      	ldr	r3, [pc, #36]	; (810b8 <acid_startTimer1+0x68>)
   81092:	4798      	blx	r3
	tc_start(tc, channel);
   81094:	68b9      	ldr	r1, [r7, #8]
   81096:	68f8      	ldr	r0, [r7, #12]
   81098:	4b08      	ldr	r3, [pc, #32]	; (810bc <acid_startTimer1+0x6c>)
   8109a:	4798      	blx	r3
}
   8109c:	bf00      	nop
   8109e:	3710      	adds	r7, #16
   810a0:	46bd      	mov	sp, r7
   810a2:	bd80      	pop	{r7, pc}
   810a4:	00083031 	.word	0x00083031
   810a8:	00082fb1 	.word	0x00082fb1
   810ac:	00081315 	.word	0x00081315
   810b0:	40080000 	.word	0x40080000
   810b4:	0008138d 	.word	0x0008138d
   810b8:	000813b1 	.word	0x000813b1
   810bc:	0008134d 	.word	0x0008134d

000810c0 <bicar_startTimer1>:

void bicar_startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   810c0:	b580      	push	{r7, lr}
   810c2:	b084      	sub	sp, #16
   810c4:	af00      	add	r7, sp, #0
   810c6:	60f8      	str	r0, [r7, #12]
   810c8:	60b9      	str	r1, [r7, #8]
   810ca:	603b      	str	r3, [r7, #0]
   810cc:	4613      	mov	r3, r2
   810ce:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   810d0:	2000      	movs	r0, #0
   810d2:	4b10      	ldr	r3, [pc, #64]	; (81114 <bicar_startTimer1+0x54>)
   810d4:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   810d6:	201c      	movs	r0, #28
   810d8:	4b0f      	ldr	r3, [pc, #60]	; (81118 <bicar_startTimer1+0x58>)
   810da:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3);
   810dc:	f24c 0202 	movw	r2, #49154	; 0xc002
   810e0:	68b9      	ldr	r1, [r7, #8]
   810e2:	68f8      	ldr	r0, [r7, #12]
   810e4:	4b0d      	ldr	r3, [pc, #52]	; (8111c <bicar_startTimer1+0x5c>)
   810e6:	4798      	blx	r3
	TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3;
   810e8:	4b0d      	ldr	r3, [pc, #52]	; (81120 <bicar_startTimer1+0x60>)
   810ea:	f24c 0202 	movw	r2, #49154	; 0xc002
   810ee:	645a      	str	r2, [r3, #68]	; 0x44
	tc_write_rc(tc, channel, stepcount);
   810f0:	683a      	ldr	r2, [r7, #0]
   810f2:	68b9      	ldr	r1, [r7, #8]
   810f4:	68f8      	ldr	r0, [r7, #12]
   810f6:	4b0b      	ldr	r3, [pc, #44]	; (81124 <bicar_startTimer1+0x64>)
   810f8:	4798      	blx	r3
	tc_enable_interrupt(TC0,1,TC_IER_CPCS);
   810fa:	2210      	movs	r2, #16
   810fc:	2101      	movs	r1, #1
   810fe:	4808      	ldr	r0, [pc, #32]	; (81120 <bicar_startTimer1+0x60>)
   81100:	4b09      	ldr	r3, [pc, #36]	; (81128 <bicar_startTimer1+0x68>)
   81102:	4798      	blx	r3
	tc_start(tc, channel);
   81104:	68b9      	ldr	r1, [r7, #8]
   81106:	68f8      	ldr	r0, [r7, #12]
   81108:	4b08      	ldr	r3, [pc, #32]	; (8112c <bicar_startTimer1+0x6c>)
   8110a:	4798      	blx	r3
}
   8110c:	bf00      	nop
   8110e:	3710      	adds	r7, #16
   81110:	46bd      	mov	sp, r7
   81112:	bd80      	pop	{r7, pc}
   81114:	00083031 	.word	0x00083031
   81118:	00082fb1 	.word	0x00082fb1
   8111c:	00081315 	.word	0x00081315
   81120:	40080000 	.word	0x40080000
   81124:	0008138d 	.word	0x0008138d
   81128:	000813b1 	.word	0x000813b1
   8112c:	0008134d 	.word	0x0008134d

00081130 <startTimer1>:
void startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   81130:	b580      	push	{r7, lr}
   81132:	b084      	sub	sp, #16
   81134:	af00      	add	r7, sp, #0
   81136:	60f8      	str	r0, [r7, #12]
   81138:	60b9      	str	r1, [r7, #8]
   8113a:	603b      	str	r3, [r7, #0]
   8113c:	4613      	mov	r3, r2
   8113e:	71fb      	strb	r3, [r7, #7]
	//printf("h\n");
	pmc_set_writeprotect(0);
   81140:	2000      	movs	r0, #0
   81142:	4b11      	ldr	r3, [pc, #68]	; (81188 <startTimer1+0x58>)
   81144:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC2);
   81146:	201d      	movs	r0, #29
   81148:	4b10      	ldr	r3, [pc, #64]	; (8118c <startTimer1+0x5c>)
   8114a:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
   8114c:	f24c 0203 	movw	r2, #49155	; 0xc003
   81150:	68b9      	ldr	r1, [r7, #8]
   81152:	68f8      	ldr	r0, [r7, #12]
   81154:	4b0e      	ldr	r3, [pc, #56]	; (81190 <startTimer1+0x60>)
   81156:	4798      	blx	r3
	TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81158:	4b0e      	ldr	r3, [pc, #56]	; (81194 <startTimer1+0x64>)
   8115a:	f24c 0203 	movw	r2, #49155	; 0xc003
   8115e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	tc_write_rc(tc, channel, stepcount);
   81162:	683a      	ldr	r2, [r7, #0]
   81164:	68b9      	ldr	r1, [r7, #8]
   81166:	68f8      	ldr	r0, [r7, #12]
   81168:	4b0b      	ldr	r3, [pc, #44]	; (81198 <startTimer1+0x68>)
   8116a:	4798      	blx	r3
	tc_enable_interrupt(TC0,2,TC_IER_CPCS);
   8116c:	2210      	movs	r2, #16
   8116e:	2102      	movs	r1, #2
   81170:	4808      	ldr	r0, [pc, #32]	; (81194 <startTimer1+0x64>)
   81172:	4b0a      	ldr	r3, [pc, #40]	; (8119c <startTimer1+0x6c>)
   81174:	4798      	blx	r3
	tc_start(tc, channel);
   81176:	68b9      	ldr	r1, [r7, #8]
   81178:	68f8      	ldr	r0, [r7, #12]
   8117a:	4b09      	ldr	r3, [pc, #36]	; (811a0 <startTimer1+0x70>)
   8117c:	4798      	blx	r3
}
   8117e:	bf00      	nop
   81180:	3710      	adds	r7, #16
   81182:	46bd      	mov	sp, r7
   81184:	bd80      	pop	{r7, pc}
   81186:	bf00      	nop
   81188:	00083031 	.word	0x00083031
   8118c:	00082fb1 	.word	0x00082fb1
   81190:	00081315 	.word	0x00081315
   81194:	40080000 	.word	0x40080000
   81198:	0008138d 	.word	0x0008138d
   8119c:	000813b1 	.word	0x000813b1
   811a0:	0008134d 	.word	0x0008134d

000811a4 <cpu3_sv_cntrl_activatepump>:

#include "S_CNTRL.h"


uint8_t cpu3_sv_cntrl_activatepump(sv_pumptype sv_pump_id)
{
   811a4:	b580      	push	{r7, lr}
   811a6:	b082      	sub	sp, #8
   811a8:	af00      	add	r7, sp, #0
   811aa:	4603      	mov	r3, r0
   811ac:	71fb      	strb	r3, [r7, #7]
	CPU3_D_SET_PUMP(sv_pump_id);
   811ae:	79fb      	ldrb	r3, [r7, #7]
   811b0:	4618      	mov	r0, r3
   811b2:	4b03      	ldr	r3, [pc, #12]	; (811c0 <cpu3_sv_cntrl_activatepump+0x1c>)
   811b4:	4798      	blx	r3
	
	return 0;
   811b6:	2300      	movs	r3, #0
}
   811b8:	4618      	mov	r0, r3
   811ba:	3708      	adds	r7, #8
   811bc:	46bd      	mov	sp, r7
   811be:	bd80      	pop	{r7, pc}
   811c0:	00080745 	.word	0x00080745

000811c4 <CPU3_S_SYSTEM_INIT>:
 */ 
#include "S_SYS.h"
#include "Platform/Service/TIMER/S_TIMER.h"

void CPU3_S_SYSTEM_INIT()
{
   811c4:	b580      	push	{r7, lr}
   811c6:	af00      	add	r7, sp, #0
	CPU3_D_INIT_CLOCK();
   811c8:	4b09      	ldr	r3, [pc, #36]	; (811f0 <CPU3_S_SYSTEM_INIT+0x2c>)
   811ca:	4798      	blx	r3
//	CPU3_D_INIT_ADC();
	CPU3_D_INIT_INT();
   811cc:	4b09      	ldr	r3, [pc, #36]	; (811f4 <CPU3_S_SYSTEM_INIT+0x30>)
   811ce:	4798      	blx	r3
	CPU3_D_INIT_PIO();
   811d0:	4b09      	ldr	r3, [pc, #36]	; (811f8 <CPU3_S_SYSTEM_INIT+0x34>)
   811d2:	4798      	blx	r3
	CPU3_D_INIT_PWM();
   811d4:	4b09      	ldr	r3, [pc, #36]	; (811fc <CPU3_S_SYSTEM_INIT+0x38>)
   811d6:	4798      	blx	r3
	CPU3_D_INIT_TIMER();
   811d8:	4b09      	ldr	r3, [pc, #36]	; (81200 <CPU3_S_SYSTEM_INIT+0x3c>)
   811da:	4798      	blx	r3
	DD_INIT_CAN();
   811dc:	4b09      	ldr	r3, [pc, #36]	; (81204 <CPU3_S_SYSTEM_INIT+0x40>)
   811de:	4798      	blx	r3
	//CPU3_D_INIT_IIC();
	
	
	CPU3_S_START_TIMER(0,1000);			//1ms means 1000Hz interrupt frequency
   811e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   811e4:	2000      	movs	r0, #0
   811e6:	4b08      	ldr	r3, [pc, #32]	; (81208 <CPU3_S_SYSTEM_INIT+0x44>)
   811e8:	4798      	blx	r3
}
   811ea:	bf00      	nop
   811ec:	bd80      	pop	{r7, pc}
   811ee:	bf00      	nop
   811f0:	00080151 	.word	0x00080151
   811f4:	00080e15 	.word	0x00080e15
   811f8:	000808ed 	.word	0x000808ed
   811fc:	00080ef9 	.word	0x00080ef9
   81200:	00080f5d 	.word	0x00080f5d
   81204:	000805ed 	.word	0x000805ed
   81208:	0008120d 	.word	0x0008120d

0008120c <CPU3_S_START_TIMER>:
 */ 
#include "S_TIMER.h"


uint8_t CPU3_S_START_TIMER(uint8_t timer_no, uint32_t timer_res)
{
   8120c:	b580      	push	{r7, lr}
   8120e:	b082      	sub	sp, #8
   81210:	af00      	add	r7, sp, #0
   81212:	4603      	mov	r3, r0
   81214:	6039      	str	r1, [r7, #0]
   81216:	71fb      	strb	r3, [r7, #7]
	// 	timer_no = 2;
	// 	timer_res = 100;
	// 	printf("inside sv start");
	CPU3_D_CONFIG_TIMER(timer_no, timer_res);
   81218:	683b      	ldr	r3, [r7, #0]
   8121a:	b2da      	uxtb	r2, r3
   8121c:	79fb      	ldrb	r3, [r7, #7]
   8121e:	4611      	mov	r1, r2
   81220:	4618      	mov	r0, r3
   81222:	4b03      	ldr	r3, [pc, #12]	; (81230 <CPU3_S_START_TIMER+0x24>)
   81224:	4798      	blx	r3
	
	return 0;
   81226:	2300      	movs	r3, #0
}
   81228:	4618      	mov	r0, r3
   8122a:	3708      	adds	r7, #8
   8122c:	46bd      	mov	sp, r7
   8122e:	bd80      	pop	{r7, pc}
   81230:	000807b9 	.word	0x000807b9

00081234 <CPU3_S_STOP_TIMER>:

uint8_t CPU3_S_STOP_TIMER(uint8_t timer_no)
{
   81234:	b580      	push	{r7, lr}
   81236:	b082      	sub	sp, #8
   81238:	af00      	add	r7, sp, #0
   8123a:	4603      	mov	r3, r0
   8123c:	71fb      	strb	r3, [r7, #7]
	
	CPU3_D_STOP_TIMER(timer_no);
   8123e:	79fb      	ldrb	r3, [r7, #7]
   81240:	4618      	mov	r0, r3
   81242:	4b03      	ldr	r3, [pc, #12]	; (81250 <CPU3_S_STOP_TIMER+0x1c>)
   81244:	4798      	blx	r3
	
	return 0;
   81246:	2300      	movs	r3, #0
   81248:	4618      	mov	r0, r3
   8124a:	3708      	adds	r7, #8
   8124c:	46bd      	mov	sp, r7
   8124e:	bd80      	pop	{r7, pc}
   81250:	00080871 	.word	0x00080871

00081254 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   81254:	b580      	push	{r7, lr}
   81256:	b086      	sub	sp, #24
   81258:	af00      	add	r7, sp, #0
   8125a:	60f8      	str	r0, [r7, #12]
   8125c:	60b9      	str	r1, [r7, #8]
   8125e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   81260:	2300      	movs	r3, #0
   81262:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   81264:	68fb      	ldr	r3, [r7, #12]
   81266:	2b00      	cmp	r3, #0
   81268:	d012      	beq.n	81290 <_read+0x3c>
		return -1;
   8126a:	f04f 33ff 	mov.w	r3, #4294967295
   8126e:	e013      	b.n	81298 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   81270:	4b0b      	ldr	r3, [pc, #44]	; (812a0 <_read+0x4c>)
   81272:	681b      	ldr	r3, [r3, #0]
   81274:	4a0b      	ldr	r2, [pc, #44]	; (812a4 <_read+0x50>)
   81276:	6812      	ldr	r2, [r2, #0]
   81278:	68b9      	ldr	r1, [r7, #8]
   8127a:	4610      	mov	r0, r2
   8127c:	4798      	blx	r3
		ptr++;
   8127e:	68bb      	ldr	r3, [r7, #8]
   81280:	3301      	adds	r3, #1
   81282:	60bb      	str	r3, [r7, #8]
		nChars++;
   81284:	697b      	ldr	r3, [r7, #20]
   81286:	3301      	adds	r3, #1
   81288:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8128a:	687b      	ldr	r3, [r7, #4]
   8128c:	3b01      	subs	r3, #1
   8128e:	607b      	str	r3, [r7, #4]
   81290:	687b      	ldr	r3, [r7, #4]
   81292:	2b00      	cmp	r3, #0
   81294:	dcec      	bgt.n	81270 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   81296:	697b      	ldr	r3, [r7, #20]
}
   81298:	4618      	mov	r0, r3
   8129a:	3718      	adds	r7, #24
   8129c:	46bd      	mov	sp, r7
   8129e:	bd80      	pop	{r7, pc}
   812a0:	200711ec 	.word	0x200711ec
   812a4:	200711f4 	.word	0x200711f4

000812a8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   812a8:	b580      	push	{r7, lr}
   812aa:	b086      	sub	sp, #24
   812ac:	af00      	add	r7, sp, #0
   812ae:	60f8      	str	r0, [r7, #12]
   812b0:	60b9      	str	r1, [r7, #8]
   812b2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   812b4:	2300      	movs	r3, #0
   812b6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   812b8:	68fb      	ldr	r3, [r7, #12]
   812ba:	2b01      	cmp	r3, #1
   812bc:	d01e      	beq.n	812fc <_write+0x54>
   812be:	68fb      	ldr	r3, [r7, #12]
   812c0:	2b02      	cmp	r3, #2
   812c2:	d01b      	beq.n	812fc <_write+0x54>
   812c4:	68fb      	ldr	r3, [r7, #12]
   812c6:	2b03      	cmp	r3, #3
   812c8:	d018      	beq.n	812fc <_write+0x54>
		return -1;
   812ca:	f04f 33ff 	mov.w	r3, #4294967295
   812ce:	e019      	b.n	81304 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   812d0:	4b0e      	ldr	r3, [pc, #56]	; (8130c <_write+0x64>)
   812d2:	681a      	ldr	r2, [r3, #0]
   812d4:	4b0e      	ldr	r3, [pc, #56]	; (81310 <_write+0x68>)
   812d6:	6818      	ldr	r0, [r3, #0]
   812d8:	68bb      	ldr	r3, [r7, #8]
   812da:	1c59      	adds	r1, r3, #1
   812dc:	60b9      	str	r1, [r7, #8]
   812de:	781b      	ldrb	r3, [r3, #0]
   812e0:	4619      	mov	r1, r3
   812e2:	4790      	blx	r2
   812e4:	4603      	mov	r3, r0
   812e6:	2b00      	cmp	r3, #0
   812e8:	da02      	bge.n	812f0 <_write+0x48>
			return -1;
   812ea:	f04f 33ff 	mov.w	r3, #4294967295
   812ee:	e009      	b.n	81304 <_write+0x5c>
		}
		++nChars;
   812f0:	697b      	ldr	r3, [r7, #20]
   812f2:	3301      	adds	r3, #1
   812f4:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   812f6:	687b      	ldr	r3, [r7, #4]
   812f8:	3b01      	subs	r3, #1
   812fa:	607b      	str	r3, [r7, #4]
   812fc:	687b      	ldr	r3, [r7, #4]
   812fe:	2b00      	cmp	r3, #0
   81300:	d1e6      	bne.n	812d0 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   81302:	697b      	ldr	r3, [r7, #20]
}
   81304:	4618      	mov	r0, r3
   81306:	3718      	adds	r7, #24
   81308:	46bd      	mov	sp, r7
   8130a:	bd80      	pop	{r7, pc}
   8130c:	200711f0 	.word	0x200711f0
   81310:	200711f4 	.word	0x200711f4

00081314 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   81314:	b480      	push	{r7}
   81316:	b087      	sub	sp, #28
   81318:	af00      	add	r7, sp, #0
   8131a:	60f8      	str	r0, [r7, #12]
   8131c:	60b9      	str	r1, [r7, #8]
   8131e:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81320:	68fa      	ldr	r2, [r7, #12]
   81322:	68bb      	ldr	r3, [r7, #8]
   81324:	019b      	lsls	r3, r3, #6
   81326:	4413      	add	r3, r2
   81328:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   8132a:	697b      	ldr	r3, [r7, #20]
   8132c:	2202      	movs	r2, #2
   8132e:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   81330:	697b      	ldr	r3, [r7, #20]
   81332:	f04f 32ff 	mov.w	r2, #4294967295
   81336:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   81338:	697b      	ldr	r3, [r7, #20]
   8133a:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   8133c:	697b      	ldr	r3, [r7, #20]
   8133e:	687a      	ldr	r2, [r7, #4]
   81340:	605a      	str	r2, [r3, #4]
}
   81342:	bf00      	nop
   81344:	371c      	adds	r7, #28
   81346:	46bd      	mov	sp, r7
   81348:	bc80      	pop	{r7}
   8134a:	4770      	bx	lr

0008134c <tc_start>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
   8134c:	b480      	push	{r7}
   8134e:	b083      	sub	sp, #12
   81350:	af00      	add	r7, sp, #0
   81352:	6078      	str	r0, [r7, #4]
   81354:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   81356:	687a      	ldr	r2, [r7, #4]
   81358:	683b      	ldr	r3, [r7, #0]
   8135a:	019b      	lsls	r3, r3, #6
   8135c:	4413      	add	r3, r2
   8135e:	2205      	movs	r2, #5
   81360:	601a      	str	r2, [r3, #0]
}
   81362:	bf00      	nop
   81364:	370c      	adds	r7, #12
   81366:	46bd      	mov	sp, r7
   81368:	bc80      	pop	{r7}
   8136a:	4770      	bx	lr

0008136c <tc_stop>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
   8136c:	b480      	push	{r7}
   8136e:	b083      	sub	sp, #12
   81370:	af00      	add	r7, sp, #0
   81372:	6078      	str	r0, [r7, #4]
   81374:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   81376:	687a      	ldr	r2, [r7, #4]
   81378:	683b      	ldr	r3, [r7, #0]
   8137a:	019b      	lsls	r3, r3, #6
   8137c:	4413      	add	r3, r2
   8137e:	2202      	movs	r2, #2
   81380:	601a      	str	r2, [r3, #0]
}
   81382:	bf00      	nop
   81384:	370c      	adds	r7, #12
   81386:	46bd      	mov	sp, r7
   81388:	bc80      	pop	{r7}
   8138a:	4770      	bx	lr

0008138c <tc_write_rc>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_rc(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
   8138c:	b480      	push	{r7}
   8138e:	b085      	sub	sp, #20
   81390:	af00      	add	r7, sp, #0
   81392:	60f8      	str	r0, [r7, #12]
   81394:	60b9      	str	r1, [r7, #8]
   81396:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   81398:	68fa      	ldr	r2, [r7, #12]
   8139a:	68bb      	ldr	r3, [r7, #8]
   8139c:	019b      	lsls	r3, r3, #6
   8139e:	4413      	add	r3, r2
   813a0:	331c      	adds	r3, #28
   813a2:	687a      	ldr	r2, [r7, #4]
   813a4:	601a      	str	r2, [r3, #0]
}
   813a6:	bf00      	nop
   813a8:	3714      	adds	r7, #20
   813aa:	46bd      	mov	sp, r7
   813ac:	bc80      	pop	{r7}
   813ae:	4770      	bx	lr

000813b0 <tc_enable_interrupt>:
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void tc_enable_interrupt(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_sources)
{
   813b0:	b480      	push	{r7}
   813b2:	b087      	sub	sp, #28
   813b4:	af00      	add	r7, sp, #0
   813b6:	60f8      	str	r0, [r7, #12]
   813b8:	60b9      	str	r1, [r7, #8]
   813ba:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   813bc:	68fa      	ldr	r2, [r7, #12]
   813be:	68bb      	ldr	r3, [r7, #8]
   813c0:	019b      	lsls	r3, r3, #6
   813c2:	4413      	add	r3, r2
   813c4:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   813c6:	697b      	ldr	r3, [r7, #20]
   813c8:	687a      	ldr	r2, [r7, #4]
   813ca:	625a      	str	r2, [r3, #36]	; 0x24
}
   813cc:	bf00      	nop
   813ce:	371c      	adds	r7, #28
   813d0:	46bd      	mov	sp, r7
   813d2:	bc80      	pop	{r7}
   813d4:	4770      	bx	lr
   813d6:	bf00      	nop

000813d8 <tc_get_status>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t tc_get_status(Tc *p_tc, uint32_t ul_channel)
{
   813d8:	b480      	push	{r7}
   813da:	b085      	sub	sp, #20
   813dc:	af00      	add	r7, sp, #0
   813de:	6078      	str	r0, [r7, #4]
   813e0:	6039      	str	r1, [r7, #0]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   813e2:	687a      	ldr	r2, [r7, #4]
   813e4:	683b      	ldr	r3, [r7, #0]
   813e6:	019b      	lsls	r3, r3, #6
   813e8:	4413      	add	r3, r2
   813ea:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   813ec:	68fb      	ldr	r3, [r7, #12]
   813ee:	6a1b      	ldr	r3, [r3, #32]
}
   813f0:	4618      	mov	r0, r3
   813f2:	3714      	adds	r7, #20
   813f4:	46bd      	mov	sp, r7
   813f6:	bc80      	pop	{r7}
   813f8:	4770      	bx	lr
   813fa:	bf00      	nop

000813fc <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   813fc:	b480      	push	{r7}
   813fe:	b085      	sub	sp, #20
   81400:	af00      	add	r7, sp, #0
   81402:	6078      	str	r0, [r7, #4]
   81404:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   81406:	2300      	movs	r3, #0
   81408:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8140a:	687b      	ldr	r3, [r7, #4]
   8140c:	22ac      	movs	r2, #172	; 0xac
   8140e:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81410:	683b      	ldr	r3, [r7, #0]
   81412:	681a      	ldr	r2, [r3, #0]
   81414:	683b      	ldr	r3, [r7, #0]
   81416:	685b      	ldr	r3, [r3, #4]
   81418:	fbb2 f3f3 	udiv	r3, r2, r3
   8141c:	091b      	lsrs	r3, r3, #4
   8141e:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81420:	68fb      	ldr	r3, [r7, #12]
   81422:	2b00      	cmp	r3, #0
   81424:	d003      	beq.n	8142e <uart_init+0x32>
   81426:	68fb      	ldr	r3, [r7, #12]
   81428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8142c:	d301      	bcc.n	81432 <uart_init+0x36>
		return 1;
   8142e:	2301      	movs	r3, #1
   81430:	e00f      	b.n	81452 <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   81432:	687b      	ldr	r3, [r7, #4]
   81434:	68fa      	ldr	r2, [r7, #12]
   81436:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81438:	683b      	ldr	r3, [r7, #0]
   8143a:	689a      	ldr	r2, [r3, #8]
   8143c:	687b      	ldr	r3, [r7, #4]
   8143e:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81440:	687b      	ldr	r3, [r7, #4]
   81442:	f240 2202 	movw	r2, #514	; 0x202
   81446:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8144a:	687b      	ldr	r3, [r7, #4]
   8144c:	2250      	movs	r2, #80	; 0x50
   8144e:	601a      	str	r2, [r3, #0]

	return 0;
   81450:	2300      	movs	r3, #0
}
   81452:	4618      	mov	r0, r3
   81454:	3714      	adds	r7, #20
   81456:	46bd      	mov	sp, r7
   81458:	bc80      	pop	{r7}
   8145a:	4770      	bx	lr

0008145c <uart_enable_tx>:
 * \brief Enable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
   8145c:	b480      	push	{r7}
   8145e:	b083      	sub	sp, #12
   81460:	af00      	add	r7, sp, #0
   81462:	6078      	str	r0, [r7, #4]
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
   81464:	687b      	ldr	r3, [r7, #4]
   81466:	2240      	movs	r2, #64	; 0x40
   81468:	601a      	str	r2, [r3, #0]
}
   8146a:	bf00      	nop
   8146c:	370c      	adds	r7, #12
   8146e:	46bd      	mov	sp, r7
   81470:	bc80      	pop	{r7}
   81472:	4770      	bx	lr

00081474 <uart_enable_rx>:
 * \brief Enable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
   81474:	b480      	push	{r7}
   81476:	b083      	sub	sp, #12
   81478:	af00      	add	r7, sp, #0
   8147a:	6078      	str	r0, [r7, #4]
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
   8147c:	687b      	ldr	r3, [r7, #4]
   8147e:	2210      	movs	r2, #16
   81480:	601a      	str	r2, [r3, #0]
}
   81482:	bf00      	nop
   81484:	370c      	adds	r7, #12
   81486:	46bd      	mov	sp, r7
   81488:	bc80      	pop	{r7}
   8148a:	4770      	bx	lr

0008148c <uart_enable>:
 * \brief Enable UART receiver and transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
   8148c:	b480      	push	{r7}
   8148e:	b083      	sub	sp, #12
   81490:	af00      	add	r7, sp, #0
   81492:	6078      	str	r0, [r7, #4]
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81494:	687b      	ldr	r3, [r7, #4]
   81496:	2250      	movs	r2, #80	; 0x50
   81498:	601a      	str	r2, [r3, #0]
}
   8149a:	bf00      	nop
   8149c:	370c      	adds	r7, #12
   8149e:	46bd      	mov	sp, r7
   814a0:	bc80      	pop	{r7}
   814a2:	4770      	bx	lr

000814a4 <uart_enable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
   814a4:	b480      	push	{r7}
   814a6:	b083      	sub	sp, #12
   814a8:	af00      	add	r7, sp, #0
   814aa:	6078      	str	r0, [r7, #4]
   814ac:	6039      	str	r1, [r7, #0]
	p_uart->UART_IER = ul_sources;
   814ae:	687b      	ldr	r3, [r7, #4]
   814b0:	683a      	ldr	r2, [r7, #0]
   814b2:	609a      	str	r2, [r3, #8]
}
   814b4:	bf00      	nop
   814b6:	370c      	adds	r7, #12
   814b8:	46bd      	mov	sp, r7
   814ba:	bc80      	pop	{r7}
   814bc:	4770      	bx	lr
   814be:	bf00      	nop

000814c0 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   814c0:	b480      	push	{r7}
   814c2:	b083      	sub	sp, #12
   814c4:	af00      	add	r7, sp, #0
   814c6:	6078      	str	r0, [r7, #4]
   814c8:	460b      	mov	r3, r1
   814ca:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   814cc:	687b      	ldr	r3, [r7, #4]
   814ce:	695b      	ldr	r3, [r3, #20]
   814d0:	f003 0302 	and.w	r3, r3, #2
   814d4:	2b00      	cmp	r3, #0
   814d6:	d101      	bne.n	814dc <uart_write+0x1c>
		return 1;
   814d8:	2301      	movs	r3, #1
   814da:	e003      	b.n	814e4 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
   814dc:	78fa      	ldrb	r2, [r7, #3]
   814de:	687b      	ldr	r3, [r7, #4]
   814e0:	61da      	str	r2, [r3, #28]
	return 0;
   814e2:	2300      	movs	r3, #0
}
   814e4:	4618      	mov	r0, r3
   814e6:	370c      	adds	r7, #12
   814e8:	46bd      	mov	sp, r7
   814ea:	bc80      	pop	{r7}
   814ec:	4770      	bx	lr
   814ee:	bf00      	nop

000814f0 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   814f0:	b480      	push	{r7}
   814f2:	b083      	sub	sp, #12
   814f4:	af00      	add	r7, sp, #0
   814f6:	6078      	str	r0, [r7, #4]
   814f8:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   814fa:	687b      	ldr	r3, [r7, #4]
   814fc:	695b      	ldr	r3, [r3, #20]
   814fe:	f003 0301 	and.w	r3, r3, #1
   81502:	2b00      	cmp	r3, #0
   81504:	d101      	bne.n	8150a <uart_read+0x1a>
		return 1;
   81506:	2301      	movs	r3, #1
   81508:	e005      	b.n	81516 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8150a:	687b      	ldr	r3, [r7, #4]
   8150c:	699b      	ldr	r3, [r3, #24]
   8150e:	b2da      	uxtb	r2, r3
   81510:	683b      	ldr	r3, [r7, #0]
   81512:	701a      	strb	r2, [r3, #0]
	return 0;
   81514:	2300      	movs	r3, #0
}
   81516:	4618      	mov	r0, r3
   81518:	370c      	adds	r7, #12
   8151a:	46bd      	mov	sp, r7
   8151c:	bc80      	pop	{r7}
   8151e:	4770      	bx	lr

00081520 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   81520:	b480      	push	{r7}
   81522:	b089      	sub	sp, #36	; 0x24
   81524:	af00      	add	r7, sp, #0
   81526:	60f8      	str	r0, [r7, #12]
   81528:	60b9      	str	r1, [r7, #8]
   8152a:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   8152c:	68bb      	ldr	r3, [r7, #8]
   8152e:	011a      	lsls	r2, r3, #4
   81530:	687b      	ldr	r3, [r7, #4]
   81532:	429a      	cmp	r2, r3
   81534:	d802      	bhi.n	8153c <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   81536:	2310      	movs	r3, #16
   81538:	61fb      	str	r3, [r7, #28]
   8153a:	e001      	b.n	81540 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   8153c:	2308      	movs	r3, #8
   8153e:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   81540:	687b      	ldr	r3, [r7, #4]
   81542:	00da      	lsls	r2, r3, #3
   81544:	69fb      	ldr	r3, [r7, #28]
   81546:	68b9      	ldr	r1, [r7, #8]
   81548:	fb01 f303 	mul.w	r3, r1, r3
   8154c:	085b      	lsrs	r3, r3, #1
   8154e:	441a      	add	r2, r3
   81550:	69fb      	ldr	r3, [r7, #28]
   81552:	68b9      	ldr	r1, [r7, #8]
   81554:	fb01 f303 	mul.w	r3, r1, r3
   81558:	fbb2 f3f3 	udiv	r3, r2, r3
   8155c:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   8155e:	69bb      	ldr	r3, [r7, #24]
   81560:	08db      	lsrs	r3, r3, #3
   81562:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   81564:	69bb      	ldr	r3, [r7, #24]
   81566:	f003 0307 	and.w	r3, r3, #7
   8156a:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8156c:	697b      	ldr	r3, [r7, #20]
   8156e:	2b00      	cmp	r3, #0
   81570:	d003      	beq.n	8157a <usart_set_async_baudrate+0x5a>
   81572:	697b      	ldr	r3, [r7, #20]
   81574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   81578:	d301      	bcc.n	8157e <usart_set_async_baudrate+0x5e>
		return 1;
   8157a:	2301      	movs	r3, #1
   8157c:	e00f      	b.n	8159e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   8157e:	69fb      	ldr	r3, [r7, #28]
   81580:	2b08      	cmp	r3, #8
   81582:	d105      	bne.n	81590 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   81584:	68fb      	ldr	r3, [r7, #12]
   81586:	685b      	ldr	r3, [r3, #4]
   81588:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   8158c:	68fb      	ldr	r3, [r7, #12]
   8158e:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   81590:	693b      	ldr	r3, [r7, #16]
   81592:	041a      	lsls	r2, r3, #16
   81594:	697b      	ldr	r3, [r7, #20]
   81596:	431a      	orrs	r2, r3
   81598:	68fb      	ldr	r3, [r7, #12]
   8159a:	621a      	str	r2, [r3, #32]

	return 0;
   8159c:	2300      	movs	r3, #0
}
   8159e:	4618      	mov	r0, r3
   815a0:	3724      	adds	r7, #36	; 0x24
   815a2:	46bd      	mov	sp, r7
   815a4:	bc80      	pop	{r7}
   815a6:	4770      	bx	lr

000815a8 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   815a8:	b580      	push	{r7, lr}
   815aa:	b082      	sub	sp, #8
   815ac:	af00      	add	r7, sp, #0
   815ae:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   815b0:	6878      	ldr	r0, [r7, #4]
   815b2:	4b0d      	ldr	r3, [pc, #52]	; (815e8 <usart_reset+0x40>)
   815b4:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   815b6:	687b      	ldr	r3, [r7, #4]
   815b8:	2200      	movs	r2, #0
   815ba:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   815bc:	687b      	ldr	r3, [r7, #4]
   815be:	2200      	movs	r2, #0
   815c0:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   815c2:	687b      	ldr	r3, [r7, #4]
   815c4:	2200      	movs	r2, #0
   815c6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   815c8:	6878      	ldr	r0, [r7, #4]
   815ca:	4b08      	ldr	r3, [pc, #32]	; (815ec <usart_reset+0x44>)
   815cc:	4798      	blx	r3
	usart_reset_rx(p_usart);
   815ce:	6878      	ldr	r0, [r7, #4]
   815d0:	4b07      	ldr	r3, [pc, #28]	; (815f0 <usart_reset+0x48>)
   815d2:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   815d4:	6878      	ldr	r0, [r7, #4]
   815d6:	4b07      	ldr	r3, [pc, #28]	; (815f4 <usart_reset+0x4c>)
   815d8:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   815da:	6878      	ldr	r0, [r7, #4]
   815dc:	4b06      	ldr	r3, [pc, #24]	; (815f8 <usart_reset+0x50>)
   815de:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   815e0:	bf00      	nop
   815e2:	3708      	adds	r7, #8
   815e4:	46bd      	mov	sp, r7
   815e6:	bd80      	pop	{r7, pc}
   815e8:	0008177d 	.word	0x0008177d
   815ec:	00081699 	.word	0x00081699
   815f0:	000816c9 	.word	0x000816c9
   815f4:	000816e1 	.word	0x000816e1
   815f8:	000816fd 	.word	0x000816fd

000815fc <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   815fc:	b580      	push	{r7, lr}
   815fe:	b084      	sub	sp, #16
   81600:	af00      	add	r7, sp, #0
   81602:	60f8      	str	r0, [r7, #12]
   81604:	60b9      	str	r1, [r7, #8]
   81606:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   81608:	68f8      	ldr	r0, [r7, #12]
   8160a:	4b1a      	ldr	r3, [pc, #104]	; (81674 <usart_init_rs232+0x78>)
   8160c:	4798      	blx	r3

	ul_reg_val = 0;
   8160e:	4b1a      	ldr	r3, [pc, #104]	; (81678 <usart_init_rs232+0x7c>)
   81610:	2200      	movs	r2, #0
   81612:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   81614:	68bb      	ldr	r3, [r7, #8]
   81616:	2b00      	cmp	r3, #0
   81618:	d009      	beq.n	8162e <usart_init_rs232+0x32>
   8161a:	68bb      	ldr	r3, [r7, #8]
   8161c:	681b      	ldr	r3, [r3, #0]
   8161e:	687a      	ldr	r2, [r7, #4]
   81620:	4619      	mov	r1, r3
   81622:	68f8      	ldr	r0, [r7, #12]
   81624:	4b15      	ldr	r3, [pc, #84]	; (8167c <usart_init_rs232+0x80>)
   81626:	4798      	blx	r3
   81628:	4603      	mov	r3, r0
   8162a:	2b00      	cmp	r3, #0
   8162c:	d001      	beq.n	81632 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   8162e:	2301      	movs	r3, #1
   81630:	e01b      	b.n	8166a <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   81632:	68bb      	ldr	r3, [r7, #8]
   81634:	685a      	ldr	r2, [r3, #4]
   81636:	68bb      	ldr	r3, [r7, #8]
   81638:	689b      	ldr	r3, [r3, #8]
   8163a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   8163c:	68bb      	ldr	r3, [r7, #8]
   8163e:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   81640:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   81642:	68bb      	ldr	r3, [r7, #8]
   81644:	68db      	ldr	r3, [r3, #12]
   81646:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   81648:	4b0b      	ldr	r3, [pc, #44]	; (81678 <usart_init_rs232+0x7c>)
   8164a:	681b      	ldr	r3, [r3, #0]
   8164c:	4313      	orrs	r3, r2
   8164e:	4a0a      	ldr	r2, [pc, #40]	; (81678 <usart_init_rs232+0x7c>)
   81650:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   81652:	4b09      	ldr	r3, [pc, #36]	; (81678 <usart_init_rs232+0x7c>)
   81654:	681b      	ldr	r3, [r3, #0]
   81656:	4a08      	ldr	r2, [pc, #32]	; (81678 <usart_init_rs232+0x7c>)
   81658:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   8165a:	68fb      	ldr	r3, [r7, #12]
   8165c:	685a      	ldr	r2, [r3, #4]
   8165e:	4b06      	ldr	r3, [pc, #24]	; (81678 <usart_init_rs232+0x7c>)
   81660:	681b      	ldr	r3, [r3, #0]
   81662:	431a      	orrs	r2, r3
   81664:	68fb      	ldr	r3, [r7, #12]
   81666:	605a      	str	r2, [r3, #4]

	return 0;
   81668:	2300      	movs	r3, #0
}
   8166a:	4618      	mov	r0, r3
   8166c:	3710      	adds	r7, #16
   8166e:	46bd      	mov	sp, r7
   81670:	bd80      	pop	{r7, pc}
   81672:	bf00      	nop
   81674:	000815a9 	.word	0x000815a9
   81678:	20070cc4 	.word	0x20070cc4
   8167c:	00081521 	.word	0x00081521

00081680 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   81680:	b480      	push	{r7}
   81682:	b083      	sub	sp, #12
   81684:	af00      	add	r7, sp, #0
   81686:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   81688:	687b      	ldr	r3, [r7, #4]
   8168a:	2240      	movs	r2, #64	; 0x40
   8168c:	601a      	str	r2, [r3, #0]
}
   8168e:	bf00      	nop
   81690:	370c      	adds	r7, #12
   81692:	46bd      	mov	sp, r7
   81694:	bc80      	pop	{r7}
   81696:	4770      	bx	lr

00081698 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   81698:	b480      	push	{r7}
   8169a:	b083      	sub	sp, #12
   8169c:	af00      	add	r7, sp, #0
   8169e:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   816a0:	687b      	ldr	r3, [r7, #4]
   816a2:	2288      	movs	r2, #136	; 0x88
   816a4:	601a      	str	r2, [r3, #0]
}
   816a6:	bf00      	nop
   816a8:	370c      	adds	r7, #12
   816aa:	46bd      	mov	sp, r7
   816ac:	bc80      	pop	{r7}
   816ae:	4770      	bx	lr

000816b0 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   816b0:	b480      	push	{r7}
   816b2:	b083      	sub	sp, #12
   816b4:	af00      	add	r7, sp, #0
   816b6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   816b8:	687b      	ldr	r3, [r7, #4]
   816ba:	2210      	movs	r2, #16
   816bc:	601a      	str	r2, [r3, #0]
}
   816be:	bf00      	nop
   816c0:	370c      	adds	r7, #12
   816c2:	46bd      	mov	sp, r7
   816c4:	bc80      	pop	{r7}
   816c6:	4770      	bx	lr

000816c8 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   816c8:	b480      	push	{r7}
   816ca:	b083      	sub	sp, #12
   816cc:	af00      	add	r7, sp, #0
   816ce:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   816d0:	687b      	ldr	r3, [r7, #4]
   816d2:	2224      	movs	r2, #36	; 0x24
   816d4:	601a      	str	r2, [r3, #0]
}
   816d6:	bf00      	nop
   816d8:	370c      	adds	r7, #12
   816da:	46bd      	mov	sp, r7
   816dc:	bc80      	pop	{r7}
   816de:	4770      	bx	lr

000816e0 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   816e0:	b480      	push	{r7}
   816e2:	b083      	sub	sp, #12
   816e4:	af00      	add	r7, sp, #0
   816e6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   816e8:	687b      	ldr	r3, [r7, #4]
   816ea:	f44f 7280 	mov.w	r2, #256	; 0x100
   816ee:	601a      	str	r2, [r3, #0]
}
   816f0:	bf00      	nop
   816f2:	370c      	adds	r7, #12
   816f4:	46bd      	mov	sp, r7
   816f6:	bc80      	pop	{r7}
   816f8:	4770      	bx	lr
   816fa:	bf00      	nop

000816fc <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   816fc:	b480      	push	{r7}
   816fe:	b083      	sub	sp, #12
   81700:	af00      	add	r7, sp, #0
   81702:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   81704:	687b      	ldr	r3, [r7, #4]
   81706:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8170a:	601a      	str	r2, [r3, #0]
}
   8170c:	bf00      	nop
   8170e:	370c      	adds	r7, #12
   81710:	46bd      	mov	sp, r7
   81712:	bc80      	pop	{r7}
   81714:	4770      	bx	lr
   81716:	bf00      	nop

00081718 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   81718:	b480      	push	{r7}
   8171a:	b083      	sub	sp, #12
   8171c:	af00      	add	r7, sp, #0
   8171e:	6078      	str	r0, [r7, #4]
   81720:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81722:	687b      	ldr	r3, [r7, #4]
   81724:	695b      	ldr	r3, [r3, #20]
   81726:	f003 0302 	and.w	r3, r3, #2
   8172a:	2b00      	cmp	r3, #0
   8172c:	d101      	bne.n	81732 <usart_write+0x1a>
		return 1;
   8172e:	2301      	movs	r3, #1
   81730:	e005      	b.n	8173e <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81732:	683b      	ldr	r3, [r7, #0]
   81734:	f3c3 0208 	ubfx	r2, r3, #0, #9
   81738:	687b      	ldr	r3, [r7, #4]
   8173a:	61da      	str	r2, [r3, #28]
	return 0;
   8173c:	2300      	movs	r3, #0
}
   8173e:	4618      	mov	r0, r3
   81740:	370c      	adds	r7, #12
   81742:	46bd      	mov	sp, r7
   81744:	bc80      	pop	{r7}
   81746:	4770      	bx	lr

00081748 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   81748:	b480      	push	{r7}
   8174a:	b083      	sub	sp, #12
   8174c:	af00      	add	r7, sp, #0
   8174e:	6078      	str	r0, [r7, #4]
   81750:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81752:	687b      	ldr	r3, [r7, #4]
   81754:	695b      	ldr	r3, [r3, #20]
   81756:	f003 0301 	and.w	r3, r3, #1
   8175a:	2b00      	cmp	r3, #0
   8175c:	d101      	bne.n	81762 <usart_read+0x1a>
		return 1;
   8175e:	2301      	movs	r3, #1
   81760:	e006      	b.n	81770 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81762:	687b      	ldr	r3, [r7, #4]
   81764:	699b      	ldr	r3, [r3, #24]
   81766:	f3c3 0208 	ubfx	r2, r3, #0, #9
   8176a:	683b      	ldr	r3, [r7, #0]
   8176c:	601a      	str	r2, [r3, #0]

	return 0;
   8176e:	2300      	movs	r3, #0
}
   81770:	4618      	mov	r0, r3
   81772:	370c      	adds	r7, #12
   81774:	46bd      	mov	sp, r7
   81776:	bc80      	pop	{r7}
   81778:	4770      	bx	lr
   8177a:	bf00      	nop

0008177c <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   8177c:	b480      	push	{r7}
   8177e:	b083      	sub	sp, #12
   81780:	af00      	add	r7, sp, #0
   81782:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   81784:	687b      	ldr	r3, [r7, #4]
   81786:	4a04      	ldr	r2, [pc, #16]	; (81798 <usart_disable_writeprotect+0x1c>)
   81788:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   8178c:	bf00      	nop
   8178e:	370c      	adds	r7, #12
   81790:	46bd      	mov	sp, r7
   81792:	bc80      	pop	{r7}
   81794:	4770      	bx	lr
   81796:	bf00      	nop
   81798:	55534100 	.word	0x55534100

0008179c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   8179c:	b480      	push	{r7}
   8179e:	b083      	sub	sp, #12
   817a0:	af00      	add	r7, sp, #0
   817a2:	4603      	mov	r3, r0
   817a4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   817a6:	4908      	ldr	r1, [pc, #32]	; (817c8 <NVIC_EnableIRQ+0x2c>)
   817a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   817ac:	095b      	lsrs	r3, r3, #5
   817ae:	79fa      	ldrb	r2, [r7, #7]
   817b0:	f002 021f 	and.w	r2, r2, #31
   817b4:	2001      	movs	r0, #1
   817b6:	fa00 f202 	lsl.w	r2, r0, r2
   817ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   817be:	bf00      	nop
   817c0:	370c      	adds	r7, #12
   817c2:	46bd      	mov	sp, r7
   817c4:	bc80      	pop	{r7}
   817c6:	4770      	bx	lr
   817c8:	e000e100 	.word	0xe000e100

000817cc <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   817cc:	b480      	push	{r7}
   817ce:	b083      	sub	sp, #12
   817d0:	af00      	add	r7, sp, #0
   817d2:	4603      	mov	r3, r0
   817d4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   817d6:	4909      	ldr	r1, [pc, #36]	; (817fc <NVIC_DisableIRQ+0x30>)
   817d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   817dc:	095b      	lsrs	r3, r3, #5
   817de:	79fa      	ldrb	r2, [r7, #7]
   817e0:	f002 021f 	and.w	r2, r2, #31
   817e4:	2001      	movs	r0, #1
   817e6:	fa00 f202 	lsl.w	r2, r0, r2
   817ea:	3320      	adds	r3, #32
   817ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   817f0:	bf00      	nop
   817f2:	370c      	adds	r7, #12
   817f4:	46bd      	mov	sp, r7
   817f6:	bc80      	pop	{r7}
   817f8:	4770      	bx	lr
   817fa:	bf00      	nop
   817fc:	e000e100 	.word	0xe000e100

00081800 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   81800:	b480      	push	{r7}
   81802:	b083      	sub	sp, #12
   81804:	af00      	add	r7, sp, #0
   81806:	4603      	mov	r3, r0
   81808:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8180a:	4909      	ldr	r1, [pc, #36]	; (81830 <NVIC_ClearPendingIRQ+0x30>)
   8180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81810:	095b      	lsrs	r3, r3, #5
   81812:	79fa      	ldrb	r2, [r7, #7]
   81814:	f002 021f 	and.w	r2, r2, #31
   81818:	2001      	movs	r0, #1
   8181a:	fa00 f202 	lsl.w	r2, r0, r2
   8181e:	3360      	adds	r3, #96	; 0x60
   81820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81824:	bf00      	nop
   81826:	370c      	adds	r7, #12
   81828:	46bd      	mov	sp, r7
   8182a:	bc80      	pop	{r7}
   8182c:	4770      	bx	lr
   8182e:	bf00      	nop
   81830:	e000e100 	.word	0xe000e100

00081834 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   81834:	b480      	push	{r7}
   81836:	b083      	sub	sp, #12
   81838:	af00      	add	r7, sp, #0
   8183a:	4603      	mov	r3, r0
   8183c:	6039      	str	r1, [r7, #0]
   8183e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81840:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81844:	2b00      	cmp	r3, #0
   81846:	da0b      	bge.n	81860 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81848:	490d      	ldr	r1, [pc, #52]	; (81880 <NVIC_SetPriority+0x4c>)
   8184a:	79fb      	ldrb	r3, [r7, #7]
   8184c:	f003 030f 	and.w	r3, r3, #15
   81850:	3b04      	subs	r3, #4
   81852:	683a      	ldr	r2, [r7, #0]
   81854:	b2d2      	uxtb	r2, r2
   81856:	0112      	lsls	r2, r2, #4
   81858:	b2d2      	uxtb	r2, r2
   8185a:	440b      	add	r3, r1
   8185c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   8185e:	e009      	b.n	81874 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81860:	4908      	ldr	r1, [pc, #32]	; (81884 <NVIC_SetPriority+0x50>)
   81862:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81866:	683a      	ldr	r2, [r7, #0]
   81868:	b2d2      	uxtb	r2, r2
   8186a:	0112      	lsls	r2, r2, #4
   8186c:	b2d2      	uxtb	r2, r2
   8186e:	440b      	add	r3, r1
   81870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81874:	bf00      	nop
   81876:	370c      	adds	r7, #12
   81878:	46bd      	mov	sp, r7
   8187a:	bc80      	pop	{r7}
   8187c:	4770      	bx	lr
   8187e:	bf00      	nop
   81880:	e000ed00 	.word	0xe000ed00
   81884:	e000e100 	.word	0xe000e100

00081888 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   81888:	b480      	push	{r7}
   8188a:	b083      	sub	sp, #12
   8188c:	af00      	add	r7, sp, #0
   8188e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81890:	687b      	ldr	r3, [r7, #4]
   81892:	2b07      	cmp	r3, #7
   81894:	d825      	bhi.n	818e2 <osc_get_rate+0x5a>
   81896:	a201      	add	r2, pc, #4	; (adr r2, 8189c <osc_get_rate+0x14>)
   81898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8189c:	000818bd 	.word	0x000818bd
   818a0:	000818c3 	.word	0x000818c3
   818a4:	000818c9 	.word	0x000818c9
   818a8:	000818cf 	.word	0x000818cf
   818ac:	000818d3 	.word	0x000818d3
   818b0:	000818d7 	.word	0x000818d7
   818b4:	000818db 	.word	0x000818db
   818b8:	000818df 	.word	0x000818df
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   818bc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   818c0:	e010      	b.n	818e4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   818c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   818c6:	e00d      	b.n	818e4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   818c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   818cc:	e00a      	b.n	818e4 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   818ce:	4b08      	ldr	r3, [pc, #32]	; (818f0 <osc_get_rate+0x68>)
   818d0:	e008      	b.n	818e4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   818d2:	4b08      	ldr	r3, [pc, #32]	; (818f4 <osc_get_rate+0x6c>)
   818d4:	e006      	b.n	818e4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   818d6:	4b08      	ldr	r3, [pc, #32]	; (818f8 <osc_get_rate+0x70>)
   818d8:	e004      	b.n	818e4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   818da:	4b07      	ldr	r3, [pc, #28]	; (818f8 <osc_get_rate+0x70>)
   818dc:	e002      	b.n	818e4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   818de:	4b06      	ldr	r3, [pc, #24]	; (818f8 <osc_get_rate+0x70>)
   818e0:	e000      	b.n	818e4 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   818e2:	2300      	movs	r3, #0
}
   818e4:	4618      	mov	r0, r3
   818e6:	370c      	adds	r7, #12
   818e8:	46bd      	mov	sp, r7
   818ea:	bc80      	pop	{r7}
   818ec:	4770      	bx	lr
   818ee:	bf00      	nop
   818f0:	003d0900 	.word	0x003d0900
   818f4:	007a1200 	.word	0x007a1200
   818f8:	00b71b00 	.word	0x00b71b00

000818fc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   818fc:	b580      	push	{r7, lr}
   818fe:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   81900:	2006      	movs	r0, #6
   81902:	4b04      	ldr	r3, [pc, #16]	; (81914 <sysclk_get_main_hz+0x18>)
   81904:	4798      	blx	r3
   81906:	4602      	mov	r2, r0
   81908:	4613      	mov	r3, r2
   8190a:	00db      	lsls	r3, r3, #3
   8190c:	1a9b      	subs	r3, r3, r2
   8190e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81910:	4618      	mov	r0, r3
   81912:	bd80      	pop	{r7, pc}
   81914:	00081889 	.word	0x00081889

00081918 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   81918:	b580      	push	{r7, lr}
   8191a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   8191c:	4b02      	ldr	r3, [pc, #8]	; (81928 <sysclk_get_peripheral_hz+0x10>)
   8191e:	4798      	blx	r3
   81920:	4603      	mov	r3, r0
   81922:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   81924:	4618      	mov	r0, r3
   81926:	bd80      	pop	{r7, pc}
   81928:	000818fd 	.word	0x000818fd

0008192c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   8192c:	b580      	push	{r7, lr}
   8192e:	b082      	sub	sp, #8
   81930:	af00      	add	r7, sp, #0
   81932:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81934:	6878      	ldr	r0, [r7, #4]
   81936:	4b03      	ldr	r3, [pc, #12]	; (81944 <sysclk_enable_peripheral_clock+0x18>)
   81938:	4798      	blx	r3
}
   8193a:	bf00      	nop
   8193c:	3708      	adds	r7, #8
   8193e:	46bd      	mov	sp, r7
   81940:	bd80      	pop	{r7, pc}
   81942:	bf00      	nop
   81944:	00082fb1 	.word	0x00082fb1

00081948 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   81948:	b580      	push	{r7, lr}
   8194a:	b08c      	sub	sp, #48	; 0x30
   8194c:	af00      	add	r7, sp, #0
   8194e:	6078      	str	r0, [r7, #4]
   81950:	6039      	str	r1, [r7, #0]
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   81952:	4b40      	ldr	r3, [pc, #256]	; (81a54 <usart_serial_init+0x10c>)
   81954:	4798      	blx	r3
   81956:	4603      	mov	r3, r0
   81958:	623b      	str	r3, [r7, #32]
	uart_settings.ul_baudrate = opt->baudrate;
   8195a:	683b      	ldr	r3, [r7, #0]
   8195c:	681b      	ldr	r3, [r3, #0]
   8195e:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
   81960:	683b      	ldr	r3, [r7, #0]
   81962:	689b      	ldr	r3, [r3, #8]
   81964:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   81966:	683b      	ldr	r3, [r7, #0]
   81968:	681b      	ldr	r3, [r3, #0]
   8196a:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
   8196c:	683b      	ldr	r3, [r7, #0]
   8196e:	685b      	ldr	r3, [r3, #4]
   81970:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
   81972:	683b      	ldr	r3, [r7, #0]
   81974:	689b      	ldr	r3, [r3, #8]
   81976:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
   81978:	683b      	ldr	r3, [r7, #0]
   8197a:	7b1b      	ldrb	r3, [r3, #12]
   8197c:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   8197e:	2300      	movs	r3, #0
   81980:	61bb      	str	r3, [r7, #24]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81982:	687b      	ldr	r3, [r7, #4]
   81984:	4a34      	ldr	r2, [pc, #208]	; (81a58 <usart_serial_init+0x110>)
   81986:	4293      	cmp	r3, r2
   81988:	d108      	bne.n	8199c <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   8198a:	2008      	movs	r0, #8
   8198c:	4b33      	ldr	r3, [pc, #204]	; (81a5c <usart_serial_init+0x114>)
   8198e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   81990:	f107 0320 	add.w	r3, r7, #32
   81994:	4619      	mov	r1, r3
   81996:	6878      	ldr	r0, [r7, #4]
   81998:	4b31      	ldr	r3, [pc, #196]	; (81a60 <usart_serial_init+0x118>)
   8199a:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8199c:	687b      	ldr	r3, [r7, #4]
   8199e:	4a31      	ldr	r2, [pc, #196]	; (81a64 <usart_serial_init+0x11c>)
   819a0:	4293      	cmp	r3, r2
   819a2:	d111      	bne.n	819c8 <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   819a4:	2011      	movs	r0, #17
   819a6:	4b2d      	ldr	r3, [pc, #180]	; (81a5c <usart_serial_init+0x114>)
   819a8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   819aa:	4b2a      	ldr	r3, [pc, #168]	; (81a54 <usart_serial_init+0x10c>)
   819ac:	4798      	blx	r3
   819ae:	4602      	mov	r2, r0
   819b0:	f107 0308 	add.w	r3, r7, #8
   819b4:	4619      	mov	r1, r3
   819b6:	6878      	ldr	r0, [r7, #4]
   819b8:	4b2b      	ldr	r3, [pc, #172]	; (81a68 <usart_serial_init+0x120>)
   819ba:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   819bc:	6878      	ldr	r0, [r7, #4]
   819be:	4b2b      	ldr	r3, [pc, #172]	; (81a6c <usart_serial_init+0x124>)
   819c0:	4798      	blx	r3
		usart_enable_rx(p_usart);
   819c2:	6878      	ldr	r0, [r7, #4]
   819c4:	4b2a      	ldr	r3, [pc, #168]	; (81a70 <usart_serial_init+0x128>)
   819c6:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   819c8:	687b      	ldr	r3, [r7, #4]
   819ca:	4a2a      	ldr	r2, [pc, #168]	; (81a74 <usart_serial_init+0x12c>)
   819cc:	4293      	cmp	r3, r2
   819ce:	d111      	bne.n	819f4 <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   819d0:	2012      	movs	r0, #18
   819d2:	4b22      	ldr	r3, [pc, #136]	; (81a5c <usart_serial_init+0x114>)
   819d4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   819d6:	4b1f      	ldr	r3, [pc, #124]	; (81a54 <usart_serial_init+0x10c>)
   819d8:	4798      	blx	r3
   819da:	4602      	mov	r2, r0
   819dc:	f107 0308 	add.w	r3, r7, #8
   819e0:	4619      	mov	r1, r3
   819e2:	6878      	ldr	r0, [r7, #4]
   819e4:	4b20      	ldr	r3, [pc, #128]	; (81a68 <usart_serial_init+0x120>)
   819e6:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   819e8:	6878      	ldr	r0, [r7, #4]
   819ea:	4b20      	ldr	r3, [pc, #128]	; (81a6c <usart_serial_init+0x124>)
   819ec:	4798      	blx	r3
		usart_enable_rx(p_usart);
   819ee:	6878      	ldr	r0, [r7, #4]
   819f0:	4b1f      	ldr	r3, [pc, #124]	; (81a70 <usart_serial_init+0x128>)
   819f2:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   819f4:	687b      	ldr	r3, [r7, #4]
   819f6:	4a20      	ldr	r2, [pc, #128]	; (81a78 <usart_serial_init+0x130>)
   819f8:	4293      	cmp	r3, r2
   819fa:	d111      	bne.n	81a20 <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   819fc:	2013      	movs	r0, #19
   819fe:	4b17      	ldr	r3, [pc, #92]	; (81a5c <usart_serial_init+0x114>)
   81a00:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81a02:	4b14      	ldr	r3, [pc, #80]	; (81a54 <usart_serial_init+0x10c>)
   81a04:	4798      	blx	r3
   81a06:	4602      	mov	r2, r0
   81a08:	f107 0308 	add.w	r3, r7, #8
   81a0c:	4619      	mov	r1, r3
   81a0e:	6878      	ldr	r0, [r7, #4]
   81a10:	4b15      	ldr	r3, [pc, #84]	; (81a68 <usart_serial_init+0x120>)
   81a12:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81a14:	6878      	ldr	r0, [r7, #4]
   81a16:	4b15      	ldr	r3, [pc, #84]	; (81a6c <usart_serial_init+0x124>)
   81a18:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81a1a:	6878      	ldr	r0, [r7, #4]
   81a1c:	4b14      	ldr	r3, [pc, #80]	; (81a70 <usart_serial_init+0x128>)
   81a1e:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81a20:	687b      	ldr	r3, [r7, #4]
   81a22:	4a16      	ldr	r2, [pc, #88]	; (81a7c <usart_serial_init+0x134>)
   81a24:	4293      	cmp	r3, r2
   81a26:	d111      	bne.n	81a4c <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   81a28:	2014      	movs	r0, #20
   81a2a:	4b0c      	ldr	r3, [pc, #48]	; (81a5c <usart_serial_init+0x114>)
   81a2c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81a2e:	4b09      	ldr	r3, [pc, #36]	; (81a54 <usart_serial_init+0x10c>)
   81a30:	4798      	blx	r3
   81a32:	4602      	mov	r2, r0
   81a34:	f107 0308 	add.w	r3, r7, #8
   81a38:	4619      	mov	r1, r3
   81a3a:	6878      	ldr	r0, [r7, #4]
   81a3c:	4b0a      	ldr	r3, [pc, #40]	; (81a68 <usart_serial_init+0x120>)
   81a3e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81a40:	6878      	ldr	r0, [r7, #4]
   81a42:	4b0a      	ldr	r3, [pc, #40]	; (81a6c <usart_serial_init+0x124>)
   81a44:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81a46:	6878      	ldr	r0, [r7, #4]
   81a48:	4b09      	ldr	r3, [pc, #36]	; (81a70 <usart_serial_init+0x128>)
   81a4a:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
   81a4c:	bf00      	nop
   81a4e:	3730      	adds	r7, #48	; 0x30
   81a50:	46bd      	mov	sp, r7
   81a52:	bd80      	pop	{r7, pc}
   81a54:	00081919 	.word	0x00081919
   81a58:	400e0800 	.word	0x400e0800
   81a5c:	0008192d 	.word	0x0008192d
   81a60:	000813fd 	.word	0x000813fd
   81a64:	40098000 	.word	0x40098000
   81a68:	000815fd 	.word	0x000815fd
   81a6c:	00081681 	.word	0x00081681
   81a70:	000816b1 	.word	0x000816b1
   81a74:	4009c000 	.word	0x4009c000
   81a78:	400a0000 	.word	0x400a0000
   81a7c:	400a4000 	.word	0x400a4000

00081a80 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   81a80:	b580      	push	{r7, lr}
   81a82:	b082      	sub	sp, #8
   81a84:	af00      	add	r7, sp, #0
   81a86:	6078      	str	r0, [r7, #4]
   81a88:	460b      	mov	r3, r1
   81a8a:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81a8c:	687b      	ldr	r3, [r7, #4]
   81a8e:	4a27      	ldr	r2, [pc, #156]	; (81b2c <usart_serial_putchar+0xac>)
   81a90:	4293      	cmp	r3, r2
   81a92:	d10a      	bne.n	81aaa <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   81a94:	bf00      	nop
   81a96:	78fb      	ldrb	r3, [r7, #3]
   81a98:	4619      	mov	r1, r3
   81a9a:	6878      	ldr	r0, [r7, #4]
   81a9c:	4b24      	ldr	r3, [pc, #144]	; (81b30 <usart_serial_putchar+0xb0>)
   81a9e:	4798      	blx	r3
   81aa0:	4603      	mov	r3, r0
   81aa2:	2b00      	cmp	r3, #0
   81aa4:	d1f7      	bne.n	81a96 <usart_serial_putchar+0x16>
		return 1;
   81aa6:	2301      	movs	r3, #1
   81aa8:	e03c      	b.n	81b24 <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81aaa:	687b      	ldr	r3, [r7, #4]
   81aac:	4a21      	ldr	r2, [pc, #132]	; (81b34 <usart_serial_putchar+0xb4>)
   81aae:	4293      	cmp	r3, r2
   81ab0:	d10a      	bne.n	81ac8 <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   81ab2:	bf00      	nop
   81ab4:	78fb      	ldrb	r3, [r7, #3]
   81ab6:	4619      	mov	r1, r3
   81ab8:	6878      	ldr	r0, [r7, #4]
   81aba:	4b1f      	ldr	r3, [pc, #124]	; (81b38 <usart_serial_putchar+0xb8>)
   81abc:	4798      	blx	r3
   81abe:	4603      	mov	r3, r0
   81ac0:	2b00      	cmp	r3, #0
   81ac2:	d1f7      	bne.n	81ab4 <usart_serial_putchar+0x34>
		return 1;
   81ac4:	2301      	movs	r3, #1
   81ac6:	e02d      	b.n	81b24 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81ac8:	687b      	ldr	r3, [r7, #4]
   81aca:	4a1c      	ldr	r2, [pc, #112]	; (81b3c <usart_serial_putchar+0xbc>)
   81acc:	4293      	cmp	r3, r2
   81ace:	d10a      	bne.n	81ae6 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   81ad0:	bf00      	nop
   81ad2:	78fb      	ldrb	r3, [r7, #3]
   81ad4:	4619      	mov	r1, r3
   81ad6:	6878      	ldr	r0, [r7, #4]
   81ad8:	4b17      	ldr	r3, [pc, #92]	; (81b38 <usart_serial_putchar+0xb8>)
   81ada:	4798      	blx	r3
   81adc:	4603      	mov	r3, r0
   81ade:	2b00      	cmp	r3, #0
   81ae0:	d1f7      	bne.n	81ad2 <usart_serial_putchar+0x52>
		return 1;
   81ae2:	2301      	movs	r3, #1
   81ae4:	e01e      	b.n	81b24 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81ae6:	687b      	ldr	r3, [r7, #4]
   81ae8:	4a15      	ldr	r2, [pc, #84]	; (81b40 <usart_serial_putchar+0xc0>)
   81aea:	4293      	cmp	r3, r2
   81aec:	d10a      	bne.n	81b04 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   81aee:	bf00      	nop
   81af0:	78fb      	ldrb	r3, [r7, #3]
   81af2:	4619      	mov	r1, r3
   81af4:	6878      	ldr	r0, [r7, #4]
   81af6:	4b10      	ldr	r3, [pc, #64]	; (81b38 <usart_serial_putchar+0xb8>)
   81af8:	4798      	blx	r3
   81afa:	4603      	mov	r3, r0
   81afc:	2b00      	cmp	r3, #0
   81afe:	d1f7      	bne.n	81af0 <usart_serial_putchar+0x70>
		return 1;
   81b00:	2301      	movs	r3, #1
   81b02:	e00f      	b.n	81b24 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81b04:	687b      	ldr	r3, [r7, #4]
   81b06:	4a0f      	ldr	r2, [pc, #60]	; (81b44 <usart_serial_putchar+0xc4>)
   81b08:	4293      	cmp	r3, r2
   81b0a:	d10a      	bne.n	81b22 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   81b0c:	bf00      	nop
   81b0e:	78fb      	ldrb	r3, [r7, #3]
   81b10:	4619      	mov	r1, r3
   81b12:	6878      	ldr	r0, [r7, #4]
   81b14:	4b08      	ldr	r3, [pc, #32]	; (81b38 <usart_serial_putchar+0xb8>)
   81b16:	4798      	blx	r3
   81b18:	4603      	mov	r3, r0
   81b1a:	2b00      	cmp	r3, #0
   81b1c:	d1f7      	bne.n	81b0e <usart_serial_putchar+0x8e>
		return 1;
   81b1e:	2301      	movs	r3, #1
   81b20:	e000      	b.n	81b24 <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   81b22:	2300      	movs	r3, #0
}
   81b24:	4618      	mov	r0, r3
   81b26:	3708      	adds	r7, #8
   81b28:	46bd      	mov	sp, r7
   81b2a:	bd80      	pop	{r7, pc}
   81b2c:	400e0800 	.word	0x400e0800
   81b30:	000814c1 	.word	0x000814c1
   81b34:	40098000 	.word	0x40098000
   81b38:	00081719 	.word	0x00081719
   81b3c:	4009c000 	.word	0x4009c000
   81b40:	400a0000 	.word	0x400a0000
   81b44:	400a4000 	.word	0x400a4000

00081b48 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   81b48:	b580      	push	{r7, lr}
   81b4a:	b084      	sub	sp, #16
   81b4c:	af00      	add	r7, sp, #0
   81b4e:	6078      	str	r0, [r7, #4]
   81b50:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   81b52:	2300      	movs	r3, #0
   81b54:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81b56:	687b      	ldr	r3, [r7, #4]
   81b58:	4a2b      	ldr	r2, [pc, #172]	; (81c08 <usart_serial_getchar+0xc0>)
   81b5a:	4293      	cmp	r3, r2
   81b5c:	d107      	bne.n	81b6e <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   81b5e:	bf00      	nop
   81b60:	6839      	ldr	r1, [r7, #0]
   81b62:	6878      	ldr	r0, [r7, #4]
   81b64:	4b29      	ldr	r3, [pc, #164]	; (81c0c <usart_serial_getchar+0xc4>)
   81b66:	4798      	blx	r3
   81b68:	4603      	mov	r3, r0
   81b6a:	2b00      	cmp	r3, #0
   81b6c:	d1f8      	bne.n	81b60 <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81b6e:	687b      	ldr	r3, [r7, #4]
   81b70:	4a27      	ldr	r2, [pc, #156]	; (81c10 <usart_serial_getchar+0xc8>)
   81b72:	4293      	cmp	r3, r2
   81b74:	d10d      	bne.n	81b92 <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   81b76:	bf00      	nop
   81b78:	f107 030c 	add.w	r3, r7, #12
   81b7c:	4619      	mov	r1, r3
   81b7e:	6878      	ldr	r0, [r7, #4]
   81b80:	4b24      	ldr	r3, [pc, #144]	; (81c14 <usart_serial_getchar+0xcc>)
   81b82:	4798      	blx	r3
   81b84:	4603      	mov	r3, r0
   81b86:	2b00      	cmp	r3, #0
   81b88:	d1f6      	bne.n	81b78 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   81b8a:	68fb      	ldr	r3, [r7, #12]
   81b8c:	b2da      	uxtb	r2, r3
   81b8e:	683b      	ldr	r3, [r7, #0]
   81b90:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81b92:	687b      	ldr	r3, [r7, #4]
   81b94:	4a20      	ldr	r2, [pc, #128]	; (81c18 <usart_serial_getchar+0xd0>)
   81b96:	4293      	cmp	r3, r2
   81b98:	d10d      	bne.n	81bb6 <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   81b9a:	bf00      	nop
   81b9c:	f107 030c 	add.w	r3, r7, #12
   81ba0:	4619      	mov	r1, r3
   81ba2:	6878      	ldr	r0, [r7, #4]
   81ba4:	4b1b      	ldr	r3, [pc, #108]	; (81c14 <usart_serial_getchar+0xcc>)
   81ba6:	4798      	blx	r3
   81ba8:	4603      	mov	r3, r0
   81baa:	2b00      	cmp	r3, #0
   81bac:	d1f6      	bne.n	81b9c <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   81bae:	68fb      	ldr	r3, [r7, #12]
   81bb0:	b2da      	uxtb	r2, r3
   81bb2:	683b      	ldr	r3, [r7, #0]
   81bb4:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81bb6:	687b      	ldr	r3, [r7, #4]
   81bb8:	4a18      	ldr	r2, [pc, #96]	; (81c1c <usart_serial_getchar+0xd4>)
   81bba:	4293      	cmp	r3, r2
   81bbc:	d10d      	bne.n	81bda <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   81bbe:	bf00      	nop
   81bc0:	f107 030c 	add.w	r3, r7, #12
   81bc4:	4619      	mov	r1, r3
   81bc6:	6878      	ldr	r0, [r7, #4]
   81bc8:	4b12      	ldr	r3, [pc, #72]	; (81c14 <usart_serial_getchar+0xcc>)
   81bca:	4798      	blx	r3
   81bcc:	4603      	mov	r3, r0
   81bce:	2b00      	cmp	r3, #0
   81bd0:	d1f6      	bne.n	81bc0 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   81bd2:	68fb      	ldr	r3, [r7, #12]
   81bd4:	b2da      	uxtb	r2, r3
   81bd6:	683b      	ldr	r3, [r7, #0]
   81bd8:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81bda:	687b      	ldr	r3, [r7, #4]
   81bdc:	4a10      	ldr	r2, [pc, #64]	; (81c20 <usart_serial_getchar+0xd8>)
   81bde:	4293      	cmp	r3, r2
   81be0:	d10d      	bne.n	81bfe <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   81be2:	bf00      	nop
   81be4:	f107 030c 	add.w	r3, r7, #12
   81be8:	4619      	mov	r1, r3
   81bea:	6878      	ldr	r0, [r7, #4]
   81bec:	4b09      	ldr	r3, [pc, #36]	; (81c14 <usart_serial_getchar+0xcc>)
   81bee:	4798      	blx	r3
   81bf0:	4603      	mov	r3, r0
   81bf2:	2b00      	cmp	r3, #0
   81bf4:	d1f6      	bne.n	81be4 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   81bf6:	68fb      	ldr	r3, [r7, #12]
   81bf8:	b2da      	uxtb	r2, r3
   81bfa:	683b      	ldr	r3, [r7, #0]
   81bfc:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   81bfe:	bf00      	nop
   81c00:	3710      	adds	r7, #16
   81c02:	46bd      	mov	sp, r7
   81c04:	bd80      	pop	{r7, pc}
   81c06:	bf00      	nop
   81c08:	400e0800 	.word	0x400e0800
   81c0c:	000814f1 	.word	0x000814f1
   81c10:	40098000 	.word	0x40098000
   81c14:	00081749 	.word	0x00081749
   81c18:	4009c000 	.word	0x4009c000
   81c1c:	400a0000 	.word	0x400a0000
   81c20:	400a4000 	.word	0x400a4000

00081c24 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   81c24:	b580      	push	{r7, lr}
   81c26:	b082      	sub	sp, #8
   81c28:	af00      	add	r7, sp, #0
   81c2a:	6078      	str	r0, [r7, #4]
   81c2c:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   81c2e:	4a0f      	ldr	r2, [pc, #60]	; (81c6c <stdio_serial_init+0x48>)
   81c30:	687b      	ldr	r3, [r7, #4]
   81c32:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81c34:	4b0e      	ldr	r3, [pc, #56]	; (81c70 <stdio_serial_init+0x4c>)
   81c36:	4a0f      	ldr	r2, [pc, #60]	; (81c74 <stdio_serial_init+0x50>)
   81c38:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81c3a:	4b0f      	ldr	r3, [pc, #60]	; (81c78 <stdio_serial_init+0x54>)
   81c3c:	4a0f      	ldr	r2, [pc, #60]	; (81c7c <stdio_serial_init+0x58>)
   81c3e:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   81c40:	6839      	ldr	r1, [r7, #0]
   81c42:	6878      	ldr	r0, [r7, #4]
   81c44:	4b0e      	ldr	r3, [pc, #56]	; (81c80 <stdio_serial_init+0x5c>)
   81c46:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81c48:	4b0e      	ldr	r3, [pc, #56]	; (81c84 <stdio_serial_init+0x60>)
   81c4a:	681b      	ldr	r3, [r3, #0]
   81c4c:	689b      	ldr	r3, [r3, #8]
   81c4e:	2100      	movs	r1, #0
   81c50:	4618      	mov	r0, r3
   81c52:	4b0d      	ldr	r3, [pc, #52]	; (81c88 <stdio_serial_init+0x64>)
   81c54:	4798      	blx	r3
	setbuf(stdin, NULL);
   81c56:	4b0b      	ldr	r3, [pc, #44]	; (81c84 <stdio_serial_init+0x60>)
   81c58:	681b      	ldr	r3, [r3, #0]
   81c5a:	685b      	ldr	r3, [r3, #4]
   81c5c:	2100      	movs	r1, #0
   81c5e:	4618      	mov	r0, r3
   81c60:	4b09      	ldr	r3, [pc, #36]	; (81c88 <stdio_serial_init+0x64>)
   81c62:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   81c64:	bf00      	nop
   81c66:	3708      	adds	r7, #8
   81c68:	46bd      	mov	sp, r7
   81c6a:	bd80      	pop	{r7, pc}
   81c6c:	200711f4 	.word	0x200711f4
   81c70:	200711f0 	.word	0x200711f0
   81c74:	00081a81 	.word	0x00081a81
   81c78:	200711ec 	.word	0x200711ec
   81c7c:	00081b49 	.word	0x00081b49
   81c80:	00081949 	.word	0x00081949
   81c84:	20070830 	.word	0x20070830
   81c88:	000838bd 	.word	0x000838bd

00081c8c <UART_Handler>:
};
uint8_t feedcount_flag = 0;
uint32_t acid_count = 0;
uint32_t bicarb_count = 0;
void UART_Handler()
{
   81c8c:	b580      	push	{r7, lr}
   81c8e:	b082      	sub	sp, #8
   81c90:	af00      	add	r7, sp, #0
	static uint8_t cnt=0;
	cnt++;
   81c92:	4b28      	ldr	r3, [pc, #160]	; (81d34 <UART_Handler+0xa8>)
   81c94:	781b      	ldrb	r3, [r3, #0]
   81c96:	3301      	adds	r3, #1
   81c98:	b2da      	uxtb	r2, r3
   81c9a:	4b26      	ldr	r3, [pc, #152]	; (81d34 <UART_Handler+0xa8>)
   81c9c:	701a      	strb	r2, [r3, #0]
	//printf("l\n");
	uint32_t status;
	//static dummy_1=0;
	uint8_t rx_val;
	status= UART->UART_SR;
   81c9e:	4b26      	ldr	r3, [pc, #152]	; (81d38 <UART_Handler+0xac>)
   81ca0:	695b      	ldr	r3, [r3, #20]
   81ca2:	607b      	str	r3, [r7, #4]
	if(status & 0x01)
   81ca4:	687b      	ldr	r3, [r7, #4]
   81ca6:	f003 0301 	and.w	r3, r3, #1
   81caa:	2b00      	cmp	r3, #0
   81cac:	d03d      	beq.n	81d2a <UART_Handler+0x9e>
	{
		rx_val=UART->UART_RHR;
   81cae:	4b22      	ldr	r3, [pc, #136]	; (81d38 <UART_Handler+0xac>)
   81cb0:	699b      	ldr	r3, [r3, #24]
   81cb2:	70fb      	strb	r3, [r7, #3]
		rx_val=rx_val+127;
   81cb4:	78fb      	ldrb	r3, [r7, #3]
   81cb6:	337f      	adds	r3, #127	; 0x7f
   81cb8:	70fb      	strb	r3, [r7, #3]
		if (cnt==1)
   81cba:	4b1e      	ldr	r3, [pc, #120]	; (81d34 <UART_Handler+0xa8>)
   81cbc:	781b      	ldrb	r3, [r3, #0]
   81cbe:	2b01      	cmp	r3, #1
   81cc0:	d103      	bne.n	81cca <UART_Handler+0x3e>
		{
			rc=rx_val;
   81cc2:	78fb      	ldrb	r3, [r7, #3]
   81cc4:	4a1d      	ldr	r2, [pc, #116]	; (81d3c <UART_Handler+0xb0>)
   81cc6:	6013      	str	r3, [r2, #0]
   81cc8:	e009      	b.n	81cde <UART_Handler+0x52>
		}
		else if (cnt==2)
   81cca:	4b1a      	ldr	r3, [pc, #104]	; (81d34 <UART_Handler+0xa8>)
   81ccc:	781b      	ldrb	r3, [r3, #0]
   81cce:	2b02      	cmp	r3, #2
   81cd0:	d105      	bne.n	81cde <UART_Handler+0x52>
		{
			bic_rc=rx_val;
   81cd2:	78fb      	ldrb	r3, [r7, #3]
   81cd4:	4a1a      	ldr	r2, [pc, #104]	; (81d40 <UART_Handler+0xb4>)
   81cd6:	6013      	str	r3, [r2, #0]
			cnt=0;
   81cd8:	4b16      	ldr	r3, [pc, #88]	; (81d34 <UART_Handler+0xa8>)
   81cda:	2200      	movs	r2, #0
   81cdc:	701a      	strb	r2, [r3, #0]
		}
		printf("%d %d\n",rc,bic_rc);
   81cde:	4b17      	ldr	r3, [pc, #92]	; (81d3c <UART_Handler+0xb0>)
   81ce0:	6819      	ldr	r1, [r3, #0]
   81ce2:	4b17      	ldr	r3, [pc, #92]	; (81d40 <UART_Handler+0xb4>)
   81ce4:	681b      	ldr	r3, [r3, #0]
   81ce6:	461a      	mov	r2, r3
   81ce8:	4816      	ldr	r0, [pc, #88]	; (81d44 <UART_Handler+0xb8>)
   81cea:	4b17      	ldr	r3, [pc, #92]	; (81d48 <UART_Handler+0xbc>)
   81cec:	4798      	blx	r3
		tc_stop(TC0,0);
   81cee:	2100      	movs	r1, #0
   81cf0:	4816      	ldr	r0, [pc, #88]	; (81d4c <UART_Handler+0xc0>)
   81cf2:	4b17      	ldr	r3, [pc, #92]	; (81d50 <UART_Handler+0xc4>)
   81cf4:	4798      	blx	r3
		tc_stop(TC0,1);
   81cf6:	2101      	movs	r1, #1
   81cf8:	4814      	ldr	r0, [pc, #80]	; (81d4c <UART_Handler+0xc0>)
   81cfa:	4b15      	ldr	r3, [pc, #84]	; (81d50 <UART_Handler+0xc4>)
   81cfc:	4798      	blx	r3
		tc_write_rc(TC0,0,rc);
   81cfe:	4b0f      	ldr	r3, [pc, #60]	; (81d3c <UART_Handler+0xb0>)
   81d00:	681b      	ldr	r3, [r3, #0]
   81d02:	461a      	mov	r2, r3
   81d04:	2100      	movs	r1, #0
   81d06:	4811      	ldr	r0, [pc, #68]	; (81d4c <UART_Handler+0xc0>)
   81d08:	4b12      	ldr	r3, [pc, #72]	; (81d54 <UART_Handler+0xc8>)
   81d0a:	4798      	blx	r3
		tc_write_rc(TC0,1,bic_rc);
   81d0c:	4b0c      	ldr	r3, [pc, #48]	; (81d40 <UART_Handler+0xb4>)
   81d0e:	681b      	ldr	r3, [r3, #0]
   81d10:	461a      	mov	r2, r3
   81d12:	2101      	movs	r1, #1
   81d14:	480d      	ldr	r0, [pc, #52]	; (81d4c <UART_Handler+0xc0>)
   81d16:	4b0f      	ldr	r3, [pc, #60]	; (81d54 <UART_Handler+0xc8>)
   81d18:	4798      	blx	r3
		tc_start(TC0,0);
   81d1a:	2100      	movs	r1, #0
   81d1c:	480b      	ldr	r0, [pc, #44]	; (81d4c <UART_Handler+0xc0>)
   81d1e:	4b0e      	ldr	r3, [pc, #56]	; (81d58 <UART_Handler+0xcc>)
   81d20:	4798      	blx	r3
		tc_start(TC0,1);
   81d22:	2101      	movs	r1, #1
   81d24:	4809      	ldr	r0, [pc, #36]	; (81d4c <UART_Handler+0xc0>)
   81d26:	4b0c      	ldr	r3, [pc, #48]	; (81d58 <UART_Handler+0xcc>)
   81d28:	4798      	blx	r3
	}
}
   81d2a:	bf00      	nop
   81d2c:	3708      	adds	r7, #8
   81d2e:	46bd      	mov	sp, r7
   81d30:	bd80      	pop	{r7, pc}
   81d32:	bf00      	nop
   81d34:	20070ce4 	.word	0x20070ce4
   81d38:	400e0800 	.word	0x400e0800
   81d3c:	20070cd4 	.word	0x20070cd4
   81d40:	20071204 	.word	0x20071204
   81d44:	00086754 	.word	0x00086754
   81d48:	000837f9 	.word	0x000837f9
   81d4c:	40080000 	.word	0x40080000
   81d50:	0008136d 	.word	0x0008136d
   81d54:	0008138d 	.word	0x0008138d
   81d58:	0008134d 	.word	0x0008134d

00081d5c <main>:
int main (void)
{
   81d5c:	b590      	push	{r4, r7, lr}
   81d5e:	b085      	sub	sp, #20
   81d60:	af00      	add	r7, sp, #0
	uint8_t uc_key;
	board_init();
   81d62:	4b1a      	ldr	r3, [pc, #104]	; (81dcc <main+0x70>)
   81d64:	4798      	blx	r3
	CPU3_S_SYSTEM_INIT();
   81d66:	4b1a      	ldr	r3, [pc, #104]	; (81dd0 <main+0x74>)
   81d68:	4798      	blx	r3
	//configure_console();
	sysclk_enable_peripheral_clock(ID_UART);
   81d6a:	2008      	movs	r0, #8
   81d6c:	4b19      	ldr	r3, [pc, #100]	; (81dd4 <main+0x78>)
   81d6e:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOA);
   81d70:	200b      	movs	r0, #11
   81d72:	4b19      	ldr	r3, [pc, #100]	; (81dd8 <main+0x7c>)
   81d74:	4798      	blx	r3
	UART->UART_CR	= 0x00000050;
   81d76:	4b19      	ldr	r3, [pc, #100]	; (81ddc <main+0x80>)
   81d78:	2250      	movs	r2, #80	; 0x50
   81d7a:	601a      	str	r2, [r3, #0]
	UART->UART_MR	= 0x00000800;
   81d7c:	4b17      	ldr	r3, [pc, #92]	; (81ddc <main+0x80>)
   81d7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   81d82:	605a      	str	r2, [r3, #4]
	UART->UART_BRGR = 0x00000046;
   81d84:	4b15      	ldr	r3, [pc, #84]	; (81ddc <main+0x80>)
   81d86:	2246      	movs	r2, #70	; 0x46
   81d88:	621a      	str	r2, [r3, #32]
	PIOA->PIO_PUER = 0x00000300;
   81d8a:	4b15      	ldr	r3, [pc, #84]	; (81de0 <main+0x84>)
   81d8c:	f44f 7240 	mov.w	r2, #768	; 0x300
   81d90:	665a      	str	r2, [r3, #100]	; 0x64
	
	stdio_serial_init(UART,&uart_serial_options);
   81d92:	4914      	ldr	r1, [pc, #80]	; (81de4 <main+0x88>)
   81d94:	4811      	ldr	r0, [pc, #68]	; (81ddc <main+0x80>)
   81d96:	4b14      	ldr	r3, [pc, #80]	; (81de8 <main+0x8c>)
   81d98:	4798      	blx	r3
	uart_enable(UART);
   81d9a:	4810      	ldr	r0, [pc, #64]	; (81ddc <main+0x80>)
   81d9c:	4b13      	ldr	r3, [pc, #76]	; (81dec <main+0x90>)
   81d9e:	4798      	blx	r3
	uart_enable_rx(UART);
   81da0:	480e      	ldr	r0, [pc, #56]	; (81ddc <main+0x80>)
   81da2:	4b13      	ldr	r3, [pc, #76]	; (81df0 <main+0x94>)
   81da4:	4798      	blx	r3
	uart_enable_tx(UART);
   81da6:	480d      	ldr	r0, [pc, #52]	; (81ddc <main+0x80>)
   81da8:	4b12      	ldr	r3, [pc, #72]	; (81df4 <main+0x98>)
   81daa:	4798      	blx	r3
	
	NVIC_DisableIRQ(UART_IRQn);
   81dac:	2008      	movs	r0, #8
   81dae:	4b12      	ldr	r3, [pc, #72]	; (81df8 <main+0x9c>)
   81db0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   81db2:	2008      	movs	r0, #8
   81db4:	4b11      	ldr	r3, [pc, #68]	; (81dfc <main+0xa0>)
   81db6:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn,0);
   81db8:	2100      	movs	r1, #0
   81dba:	2008      	movs	r0, #8
   81dbc:	4b10      	ldr	r3, [pc, #64]	; (81e00 <main+0xa4>)
   81dbe:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   81dc0:	2008      	movs	r0, #8
   81dc2:	4b10      	ldr	r3, [pc, #64]	; (81e04 <main+0xa8>)
   81dc4:	4798      	blx	r3
	
	for (int i=0;i <100000;i++)
   81dc6:	2300      	movs	r3, #0
   81dc8:	60fb      	str	r3, [r7, #12]
   81dca:	e020      	b.n	81e0e <main+0xb2>
   81dcc:	000827c5 	.word	0x000827c5
   81dd0:	000811c5 	.word	0x000811c5
   81dd4:	0008192d 	.word	0x0008192d
   81dd8:	00082fb1 	.word	0x00082fb1
   81ddc:	400e0800 	.word	0x400e0800
   81de0:	400e0e00 	.word	0x400e0e00
   81de4:	00086744 	.word	0x00086744
   81de8:	00081c25 	.word	0x00081c25
   81dec:	0008148d 	.word	0x0008148d
   81df0:	00081475 	.word	0x00081475
   81df4:	0008145d 	.word	0x0008145d
   81df8:	000817cd 	.word	0x000817cd
   81dfc:	00081801 	.word	0x00081801
   81e00:	00081835 	.word	0x00081835
   81e04:	0008179d 	.word	0x0008179d
   81e08:	68fb      	ldr	r3, [r7, #12]
   81e0a:	3301      	adds	r3, #1
   81e0c:	60fb      	str	r3, [r7, #12]
   81e0e:	68fb      	ldr	r3, [r7, #12]
   81e10:	4a95      	ldr	r2, [pc, #596]	; (82068 <main+0x30c>)
   81e12:	4293      	cmp	r3, r2
   81e14:	ddf8      	ble.n	81e08 <main+0xac>
	{
		;
	}
	printf("welcome\n");
   81e16:	4895      	ldr	r0, [pc, #596]	; (8206c <main+0x310>)
   81e18:	4b95      	ldr	r3, [pc, #596]	; (82070 <main+0x314>)
   81e1a:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_PIOA);
   81e1c:	200b      	movs	r0, #11
   81e1e:	4b95      	ldr	r3, [pc, #596]	; (82074 <main+0x318>)
   81e20:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOB);
   81e22:	200c      	movs	r0, #12
   81e24:	4b93      	ldr	r3, [pc, #588]	; (82074 <main+0x318>)
   81e26:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOC);
   81e28:	200d      	movs	r0, #13
   81e2a:	4b92      	ldr	r3, [pc, #584]	; (82074 <main+0x318>)
   81e2c:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
   81e2e:	200e      	movs	r0, #14
   81e30:	4b90      	ldr	r3, [pc, #576]	; (82074 <main+0x318>)
   81e32:	4798      	blx	r3
	static uint32_t dummy_1=0,flag_1=0,flag_1b=0,dummy_1b=0;
	static uint32_t status,status_bic,status_fdbck;
	static uint32_t prev_status=0, curr_status=0;
    static uint32_t prev_status_bic=0, curr_status_bic=0;
	static uint32_t prev_status_fdbck=0, curr_status_fdbck=0;
	status=(((PIOB->PIO_PDSR)>>25)&1);
   81e34:	4b90      	ldr	r3, [pc, #576]	; (82078 <main+0x31c>)
   81e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81e38:	0e5b      	lsrs	r3, r3, #25
   81e3a:	f003 0301 	and.w	r3, r3, #1
   81e3e:	4a8f      	ldr	r2, [pc, #572]	; (8207c <main+0x320>)
   81e40:	6013      	str	r3, [r2, #0]
	status_bic=(((PIOC->PIO_PDSR)>>28)&1);
   81e42:	4b8f      	ldr	r3, [pc, #572]	; (82080 <main+0x324>)
   81e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81e46:	0f1b      	lsrs	r3, r3, #28
   81e48:	f003 0301 	and.w	r3, r3, #1
   81e4c:	4a8d      	ldr	r2, [pc, #564]	; (82084 <main+0x328>)
   81e4e:	6013      	str	r3, [r2, #0]
	status_fdbck=(((PIOC->PIO_PDSR)>>26)&1);
   81e50:	4b8b      	ldr	r3, [pc, #556]	; (82080 <main+0x324>)
   81e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81e54:	0e9b      	lsrs	r3, r3, #26
   81e56:	f003 0301 	and.w	r3, r3, #1
   81e5a:	4a8b      	ldr	r2, [pc, #556]	; (82088 <main+0x32c>)
   81e5c:	6013      	str	r3, [r2, #0]
	prev_status_bic=status_bic;
   81e5e:	4b89      	ldr	r3, [pc, #548]	; (82084 <main+0x328>)
   81e60:	681b      	ldr	r3, [r3, #0]
   81e62:	4a8a      	ldr	r2, [pc, #552]	; (8208c <main+0x330>)
   81e64:	6013      	str	r3, [r2, #0]
	prev_status_fdbck=status_fdbck;
   81e66:	4b88      	ldr	r3, [pc, #544]	; (82088 <main+0x32c>)
   81e68:	681b      	ldr	r3, [r3, #0]
   81e6a:	4a89      	ldr	r2, [pc, #548]	; (82090 <main+0x334>)
   81e6c:	6013      	str	r3, [r2, #0]
	uint32_t stepcount = 1312499; // sanjeer - this is original value
   81e6e:	4b89      	ldr	r3, [pc, #548]	; (82094 <main+0x338>)
   81e70:	60bb      	str	r3, [r7, #8]
//	uint32_t stepcount = 1351873; // changed to get right cond for clinical trial, need to re fix after adjusting angles again
//		uint32_t stepcount = 797782;
	uint32_t stepcount1 = 6562;
   81e72:	f641 13a2 	movw	r3, #6562	; 0x19a2
   81e76:	607b      	str	r3, [r7, #4]
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   81e78:	2101      	movs	r1, #1
   81e7a:	4887      	ldr	r0, [pc, #540]	; (82098 <main+0x33c>)
   81e7c:	4b87      	ldr	r3, [pc, #540]	; (8209c <main+0x340>)
   81e7e:	4798      	blx	r3
	
	
	
PIOB->PIO_PER = 1 << 19 ; //TEST
   81e80:	4b7d      	ldr	r3, [pc, #500]	; (82078 <main+0x31c>)
   81e82:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81e86:	601a      	str	r2, [r3, #0]
PIOB->PIO_OER = 1 << 19 ; //TEST
   81e88:	4b7b      	ldr	r3, [pc, #492]	; (82078 <main+0x31c>)
   81e8a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81e8e:	611a      	str	r2, [r3, #16]
	
		
	
	while (FOREVER)
	{
		if(openfillstate != STATE_OPEN_FILL)
   81e90:	4b83      	ldr	r3, [pc, #524]	; (820a0 <main+0x344>)
   81e92:	781b      	ldrb	r3, [r3, #0]
   81e94:	2b01      	cmp	r3, #1
   81e96:	d057      	beq.n	81f48 <main+0x1ec>
		{
			
		
				if(flag_1==0)
   81e98:	4b82      	ldr	r3, [pc, #520]	; (820a4 <main+0x348>)
   81e9a:	681b      	ldr	r3, [r3, #0]
   81e9c:	2b00      	cmp	r3, #0
   81e9e:	d125      	bne.n	81eec <main+0x190>
				{
					status=(((PIOA->PIO_PDSR)>>14)&1);
   81ea0:	4b81      	ldr	r3, [pc, #516]	; (820a8 <main+0x34c>)
   81ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81ea4:	0b9b      	lsrs	r3, r3, #14
   81ea6:	f003 0301 	and.w	r3, r3, #1
   81eaa:	4a74      	ldr	r2, [pc, #464]	; (8207c <main+0x320>)
   81eac:	6013      	str	r3, [r2, #0]
					if (status==1 && prev_status ==0)
   81eae:	4b73      	ldr	r3, [pc, #460]	; (8207c <main+0x320>)
   81eb0:	681b      	ldr	r3, [r3, #0]
   81eb2:	2b01      	cmp	r3, #1
   81eb4:	d116      	bne.n	81ee4 <main+0x188>
   81eb6:	4b7d      	ldr	r3, [pc, #500]	; (820ac <main+0x350>)
   81eb8:	681b      	ldr	r3, [r3, #0]
   81eba:	2b00      	cmp	r3, #0
   81ebc:	d112      	bne.n	81ee4 <main+0x188>
					{
						dummy_1++;
   81ebe:	4b7c      	ldr	r3, [pc, #496]	; (820b0 <main+0x354>)
   81ec0:	681b      	ldr	r3, [r3, #0]
   81ec2:	3301      	adds	r3, #1
   81ec4:	4a7a      	ldr	r2, [pc, #488]	; (820b0 <main+0x354>)
   81ec6:	6013      	str	r3, [r2, #0]
						if (dummy_1==2)
   81ec8:	4b79      	ldr	r3, [pc, #484]	; (820b0 <main+0x354>)
   81eca:	681b      	ldr	r3, [r3, #0]
   81ecc:	2b02      	cmp	r3, #2
   81ece:	d109      	bne.n	81ee4 <main+0x188>
						{
							tc_stop(TC0,0);
   81ed0:	2100      	movs	r1, #0
   81ed2:	4878      	ldr	r0, [pc, #480]	; (820b4 <main+0x358>)
   81ed4:	4b78      	ldr	r3, [pc, #480]	; (820b8 <main+0x35c>)
   81ed6:	4798      	blx	r3
							dummy_1=0;
   81ed8:	4b75      	ldr	r3, [pc, #468]	; (820b0 <main+0x354>)
   81eda:	2200      	movs	r2, #0
   81edc:	601a      	str	r2, [r3, #0]
							flag_1=1;
   81ede:	4b71      	ldr	r3, [pc, #452]	; (820a4 <main+0x348>)
   81ee0:	2201      	movs	r2, #1
   81ee2:	601a      	str	r2, [r3, #0]
						}
				
					}
					prev_status= status;
   81ee4:	4b65      	ldr	r3, [pc, #404]	; (8207c <main+0x320>)
   81ee6:	681b      	ldr	r3, [r3, #0]
   81ee8:	4a70      	ldr	r2, [pc, #448]	; (820ac <main+0x350>)
   81eea:	6013      	str	r3, [r2, #0]
				}
				if((flag_1b==0) && (flag_1==1))
   81eec:	4b73      	ldr	r3, [pc, #460]	; (820bc <main+0x360>)
   81eee:	681b      	ldr	r3, [r3, #0]
   81ef0:	2b00      	cmp	r3, #0
   81ef2:	d129      	bne.n	81f48 <main+0x1ec>
   81ef4:	4b6b      	ldr	r3, [pc, #428]	; (820a4 <main+0x348>)
   81ef6:	681b      	ldr	r3, [r3, #0]
   81ef8:	2b01      	cmp	r3, #1
   81efa:	d125      	bne.n	81f48 <main+0x1ec>
				{
			                    
					status_bic=(((PIOA->PIO_PDSR)>>15)&1);
   81efc:	4b6a      	ldr	r3, [pc, #424]	; (820a8 <main+0x34c>)
   81efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81f00:	0bdb      	lsrs	r3, r3, #15
   81f02:	f003 0301 	and.w	r3, r3, #1
   81f06:	4a5f      	ldr	r2, [pc, #380]	; (82084 <main+0x328>)
   81f08:	6013      	str	r3, [r2, #0]
			
					if (status_bic==1 && prev_status_bic ==0)
   81f0a:	4b5e      	ldr	r3, [pc, #376]	; (82084 <main+0x328>)
   81f0c:	681b      	ldr	r3, [r3, #0]
   81f0e:	2b01      	cmp	r3, #1
   81f10:	d116      	bne.n	81f40 <main+0x1e4>
   81f12:	4b5e      	ldr	r3, [pc, #376]	; (8208c <main+0x330>)
   81f14:	681b      	ldr	r3, [r3, #0]
   81f16:	2b00      	cmp	r3, #0
   81f18:	d112      	bne.n	81f40 <main+0x1e4>
					{
						dummy_1b++;
   81f1a:	4b69      	ldr	r3, [pc, #420]	; (820c0 <main+0x364>)
   81f1c:	681b      	ldr	r3, [r3, #0]
   81f1e:	3301      	adds	r3, #1
   81f20:	4a67      	ldr	r2, [pc, #412]	; (820c0 <main+0x364>)
   81f22:	6013      	str	r3, [r2, #0]
						if (dummy_1b==2)
   81f24:	4b66      	ldr	r3, [pc, #408]	; (820c0 <main+0x364>)
   81f26:	681b      	ldr	r3, [r3, #0]
   81f28:	2b02      	cmp	r3, #2
   81f2a:	d109      	bne.n	81f40 <main+0x1e4>
						{
							tc_stop(TC0,1);
   81f2c:	2101      	movs	r1, #1
   81f2e:	4861      	ldr	r0, [pc, #388]	; (820b4 <main+0x358>)
   81f30:	4b61      	ldr	r3, [pc, #388]	; (820b8 <main+0x35c>)
   81f32:	4798      	blx	r3
							dummy_1b=0;
   81f34:	4b62      	ldr	r3, [pc, #392]	; (820c0 <main+0x364>)
   81f36:	2200      	movs	r2, #0
   81f38:	601a      	str	r2, [r3, #0]
							flag_1b=1;
   81f3a:	4b60      	ldr	r3, [pc, #384]	; (820bc <main+0x360>)
   81f3c:	2201      	movs	r2, #1
   81f3e:	601a      	str	r2, [r3, #0]
						}
				
					}
					prev_status_bic= status_bic;
   81f40:	4b50      	ldr	r3, [pc, #320]	; (82084 <main+0x328>)
   81f42:	681b      	ldr	r3, [r3, #0]
   81f44:	4a51      	ldr	r2, [pc, #324]	; (8208c <main+0x330>)
   81f46:	6013      	str	r3, [r2, #0]
				}
		}
	
		
		if(feedcount_flag == 1)
   81f48:	4b5e      	ldr	r3, [pc, #376]	; (820c4 <main+0x368>)
   81f4a:	781b      	ldrb	r3, [r3, #0]
   81f4c:	2b01      	cmp	r3, #1
   81f4e:	d135      	bne.n	81fbc <main+0x260>
		{
			
				status=(((PIOA->PIO_PDSR)>>14)&1);
   81f50:	4b55      	ldr	r3, [pc, #340]	; (820a8 <main+0x34c>)
   81f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81f54:	0b9b      	lsrs	r3, r3, #14
   81f56:	f003 0301 	and.w	r3, r3, #1
   81f5a:	4a48      	ldr	r2, [pc, #288]	; (8207c <main+0x320>)
   81f5c:	6013      	str	r3, [r2, #0]
				if (status==1 && prev_status ==0)
   81f5e:	4b47      	ldr	r3, [pc, #284]	; (8207c <main+0x320>)
   81f60:	681b      	ldr	r3, [r3, #0]
   81f62:	2b01      	cmp	r3, #1
   81f64:	d10b      	bne.n	81f7e <main+0x222>
   81f66:	4b51      	ldr	r3, [pc, #324]	; (820ac <main+0x350>)
   81f68:	681b      	ldr	r3, [r3, #0]
   81f6a:	2b00      	cmp	r3, #0
   81f6c:	d107      	bne.n	81f7e <main+0x222>
				{
					acid_count++;
   81f6e:	4b56      	ldr	r3, [pc, #344]	; (820c8 <main+0x36c>)
   81f70:	681b      	ldr	r3, [r3, #0]
   81f72:	3301      	adds	r3, #1
   81f74:	4a54      	ldr	r2, [pc, #336]	; (820c8 <main+0x36c>)
   81f76:	6013      	str	r3, [r2, #0]
					TC1_cnt = 0;
   81f78:	4b54      	ldr	r3, [pc, #336]	; (820cc <main+0x370>)
   81f7a:	2200      	movs	r2, #0
   81f7c:	601a      	str	r2, [r3, #0]
					
				}
				prev_status= status;
   81f7e:	4b3f      	ldr	r3, [pc, #252]	; (8207c <main+0x320>)
   81f80:	681b      	ldr	r3, [r3, #0]
   81f82:	4a4a      	ldr	r2, [pc, #296]	; (820ac <main+0x350>)
   81f84:	6013      	str	r3, [r2, #0]
				
					
					
			
			
				status_bic=(((PIOA->PIO_PDSR)>>15)&1);
   81f86:	4b48      	ldr	r3, [pc, #288]	; (820a8 <main+0x34c>)
   81f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81f8a:	0bdb      	lsrs	r3, r3, #15
   81f8c:	f003 0301 	and.w	r3, r3, #1
   81f90:	4a3c      	ldr	r2, [pc, #240]	; (82084 <main+0x328>)
   81f92:	6013      	str	r3, [r2, #0]
				
				if (status_bic==1 && prev_status_bic ==0)
   81f94:	4b3b      	ldr	r3, [pc, #236]	; (82084 <main+0x328>)
   81f96:	681b      	ldr	r3, [r3, #0]
   81f98:	2b01      	cmp	r3, #1
   81f9a:	d10b      	bne.n	81fb4 <main+0x258>
   81f9c:	4b3b      	ldr	r3, [pc, #236]	; (8208c <main+0x330>)
   81f9e:	681b      	ldr	r3, [r3, #0]
   81fa0:	2b00      	cmp	r3, #0
   81fa2:	d107      	bne.n	81fb4 <main+0x258>
				{
				 bicarb_count ++;
   81fa4:	4b4a      	ldr	r3, [pc, #296]	; (820d0 <main+0x374>)
   81fa6:	681b      	ldr	r3, [r3, #0]
   81fa8:	3301      	adds	r3, #1
   81faa:	4a49      	ldr	r2, [pc, #292]	; (820d0 <main+0x374>)
   81fac:	6013      	str	r3, [r2, #0]
				 TC2_cnt = 0;
   81fae:	4b49      	ldr	r3, [pc, #292]	; (820d4 <main+0x378>)
   81fb0:	2200      	movs	r2, #0
   81fb2:	601a      	str	r2, [r3, #0]
				 
				}
				prev_status_bic= status_bic;
   81fb4:	4b33      	ldr	r3, [pc, #204]	; (82084 <main+0x328>)
   81fb6:	681b      	ldr	r3, [r3, #0]
   81fb8:	4a34      	ldr	r2, [pc, #208]	; (8208c <main+0x330>)
   81fba:	6013      	str	r3, [r2, #0]
				
				
				
		}
 		if ((flag_nrmal == 1) && (flag_1 == 1) && (flag_1b == 1))
   81fbc:	4b46      	ldr	r3, [pc, #280]	; (820d8 <main+0x37c>)
   81fbe:	781b      	ldrb	r3, [r3, #0]
   81fc0:	b2db      	uxtb	r3, r3
   81fc2:	2b01      	cmp	r3, #1
   81fc4:	d124      	bne.n	82010 <main+0x2b4>
   81fc6:	4b37      	ldr	r3, [pc, #220]	; (820a4 <main+0x348>)
   81fc8:	681b      	ldr	r3, [r3, #0]
   81fca:	2b01      	cmp	r3, #1
   81fcc:	d120      	bne.n	82010 <main+0x2b4>
   81fce:	4b3b      	ldr	r3, [pc, #236]	; (820bc <main+0x360>)
   81fd0:	681b      	ldr	r3, [r3, #0]
   81fd2:	2b01      	cmp	r3, #1
   81fd4:	d11c      	bne.n	82010 <main+0x2b4>
		{
			status_fdbck=(((PIOC->PIO_PDSR)>>26)&1);
   81fd6:	4b2a      	ldr	r3, [pc, #168]	; (82080 <main+0x324>)
   81fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81fda:	0e9b      	lsrs	r3, r3, #26
   81fdc:	f003 0301 	and.w	r3, r3, #1
   81fe0:	4a29      	ldr	r2, [pc, #164]	; (82088 <main+0x32c>)
   81fe2:	6013      	str	r3, [r2, #0]
			
//			if (status_fdbck==0 && prev_status_fdbck ==1)
			if (status_fdbck==1 && prev_status_fdbck ==0)
   81fe4:	4b28      	ldr	r3, [pc, #160]	; (82088 <main+0x32c>)
   81fe6:	681b      	ldr	r3, [r3, #0]
   81fe8:	2b01      	cmp	r3, #1
   81fea:	d10d      	bne.n	82008 <main+0x2ac>
   81fec:	4b28      	ldr	r3, [pc, #160]	; (82090 <main+0x334>)
   81fee:	681b      	ldr	r3, [r3, #0]
   81ff0:	2b00      	cmp	r3, #0
   81ff2:	d109      	bne.n	82008 <main+0x2ac>
			{
				
				//startTimer1(TC0,2,TC2_IRQn,stepcount);
			//	PIOB->PIO_SODR = 1 << 19 ;
				start_acidpump();
   81ff4:	4b39      	ldr	r3, [pc, #228]	; (820dc <main+0x380>)
   81ff6:	4798      	blx	r3
				start_bicarpump();
   81ff8:	4b39      	ldr	r3, [pc, #228]	; (820e0 <main+0x384>)
   81ffa:	4798      	blx	r3
				//tc_stop(TC0,2);
				startTimer1(TC0,2,TC2_IRQn,stepcount);
   81ffc:	68bb      	ldr	r3, [r7, #8]
   81ffe:	221d      	movs	r2, #29
   82000:	2102      	movs	r1, #2
   82002:	482c      	ldr	r0, [pc, #176]	; (820b4 <main+0x358>)
   82004:	4c37      	ldr	r4, [pc, #220]	; (820e4 <main+0x388>)
   82006:	47a0      	blx	r4
			}
			prev_status_fdbck= status_fdbck;
   82008:	4b1f      	ldr	r3, [pc, #124]	; (82088 <main+0x32c>)
   8200a:	681b      	ldr	r3, [r3, #0]
   8200c:	4a20      	ldr	r2, [pc, #128]	; (82090 <main+0x334>)
   8200e:	6013      	str	r3, [r2, #0]
		}

			switch (state_3)
   82010:	4b35      	ldr	r3, [pc, #212]	; (820e8 <main+0x38c>)
   82012:	781b      	ldrb	r3, [r3, #0]
   82014:	2b05      	cmp	r3, #5
   82016:	f63f af3b 	bhi.w	81e90 <main+0x134>
   8201a:	a201      	add	r2, pc, #4	; (adr r2, 82020 <main+0x2c4>)
   8201c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82020:	00082039 	.word	0x00082039
   82024:	000820f1 	.word	0x000820f1
   82028:	00081e91 	.word	0x00081e91
   8202c:	00082053 	.word	0x00082053
   82030:	0008210b 	.word	0x0008210b
   82034:	00082121 	.word	0x00082121
			{
				case IDLE_ACID:
					//printf("acid alignment\n");
					rc = 1000;
   82038:	4b2c      	ldr	r3, [pc, #176]	; (820ec <main+0x390>)
   8203a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8203e:	601a      	str	r2, [r3, #0]
					start_acidpump();
   82040:	4b26      	ldr	r3, [pc, #152]	; (820dc <main+0x380>)
   82042:	4798      	blx	r3
					state_3 = ALIGNMENT_ACID;
   82044:	4b28      	ldr	r3, [pc, #160]	; (820e8 <main+0x38c>)
   82046:	2203      	movs	r2, #3
   82048:	701a      	strb	r2, [r3, #0]
					flag_nrmal=0;
   8204a:	4b23      	ldr	r3, [pc, #140]	; (820d8 <main+0x37c>)
   8204c:	2200      	movs	r2, #0
   8204e:	701a      	strb	r2, [r3, #0]
				break;
   82050:	e10e      	b.n	82270 <main+0x514>
				
				case ALIGNMENT_ACID:
					if (flag_1==1)
   82052:	4b14      	ldr	r3, [pc, #80]	; (820a4 <main+0x348>)
   82054:	681b      	ldr	r3, [r3, #0]
   82056:	2b01      	cmp	r3, #1
   82058:	d102      	bne.n	82060 <main+0x304>
					{
						//printf("done acid alignment\n");
						state_3 = IDLE_BICAR;
   8205a:	4b23      	ldr	r3, [pc, #140]	; (820e8 <main+0x38c>)
   8205c:	2201      	movs	r2, #1
   8205e:	701a      	strb	r2, [r3, #0]
					}
					flag_nrmal=0;
   82060:	4b1d      	ldr	r3, [pc, #116]	; (820d8 <main+0x37c>)
   82062:	2200      	movs	r2, #0
   82064:	701a      	strb	r2, [r3, #0]
				break;
   82066:	e103      	b.n	82270 <main+0x514>
   82068:	0001869f 	.word	0x0001869f
   8206c:	0008675c 	.word	0x0008675c
   82070:	000837f9 	.word	0x000837f9
   82074:	00082fb1 	.word	0x00082fb1
   82078:	400e1000 	.word	0x400e1000
   8207c:	20070ce8 	.word	0x20070ce8
   82080:	400e1200 	.word	0x400e1200
   82084:	20070cec 	.word	0x20070cec
   82088:	20070cf0 	.word	0x20070cf0
   8208c:	20070cf4 	.word	0x20070cf4
   82090:	20070cf8 	.word	0x20070cf8
   82094:	001406f3 	.word	0x001406f3
   82098:	400e0800 	.word	0x400e0800
   8209c:	000814a5 	.word	0x000814a5
   820a0:	20070cd0 	.word	0x20070cd0
   820a4:	20070cfc 	.word	0x20070cfc
   820a8:	400e0e00 	.word	0x400e0e00
   820ac:	20070d00 	.word	0x20070d00
   820b0:	20070d04 	.word	0x20070d04
   820b4:	40080000 	.word	0x40080000
   820b8:	0008136d 	.word	0x0008136d
   820bc:	20070d08 	.word	0x20070d08
   820c0:	20070d0c 	.word	0x20070d0c
   820c4:	20070cd8 	.word	0x20070cd8
   820c8:	20070cdc 	.word	0x20070cdc
   820cc:	20070ca0 	.word	0x20070ca0
   820d0:	20070ce0 	.word	0x20070ce0
   820d4:	20070ca4 	.word	0x20070ca4
   820d8:	20070cd1 	.word	0x20070cd1
   820dc:	000822b1 	.word	0x000822b1
   820e0:	0008235d 	.word	0x0008235d
   820e4:	00081131 	.word	0x00081131
   820e8:	20070400 	.word	0x20070400
   820ec:	20070cd4 	.word	0x20070cd4
				
				case IDLE_BICAR:
					//printf("bicar alignment\n");
					bic_rc = 1000;
   820f0:	4b60      	ldr	r3, [pc, #384]	; (82274 <main+0x518>)
   820f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   820f6:	601a      	str	r2, [r3, #0]
					start_bicarpump();
   820f8:	4b5f      	ldr	r3, [pc, #380]	; (82278 <main+0x51c>)
   820fa:	4798      	blx	r3
					state_3 = ALIGNMENT_BICAR;
   820fc:	4b5f      	ldr	r3, [pc, #380]	; (8227c <main+0x520>)
   820fe:	2204      	movs	r2, #4
   82100:	701a      	strb	r2, [r3, #0]
					flag_nrmal=0;
   82102:	4b5f      	ldr	r3, [pc, #380]	; (82280 <main+0x524>)
   82104:	2200      	movs	r2, #0
   82106:	701a      	strb	r2, [r3, #0]
				break;
   82108:	e0b2      	b.n	82270 <main+0x514>
				
				case ALIGNMENT_BICAR:
						
					if (flag_1b==1)
   8210a:	4b5e      	ldr	r3, [pc, #376]	; (82284 <main+0x528>)
   8210c:	681b      	ldr	r3, [r3, #0]
   8210e:	2b01      	cmp	r3, #1
   82110:	d102      	bne.n	82118 <main+0x3bc>
					{
						//printf("Done with bicar alignment\n");
						state_3 = CPU3_STANDBY;
   82112:	4b5a      	ldr	r3, [pc, #360]	; (8227c <main+0x520>)
   82114:	2205      	movs	r2, #5
   82116:	701a      	strb	r2, [r3, #0]
					}
					flag_nrmal=0;
   82118:	4b59      	ldr	r3, [pc, #356]	; (82280 <main+0x524>)
   8211a:	2200      	movs	r2, #0
   8211c:	701a      	strb	r2, [r3, #0]
				break;
   8211e:	e0a7      	b.n	82270 <main+0x514>
				case CPU3_STANDBY:
	
					if(flag_buff==1)
   82120:	4b59      	ldr	r3, [pc, #356]	; (82288 <main+0x52c>)
   82122:	781b      	ldrb	r3, [r3, #0]
   82124:	b2db      	uxtb	r3, r3
   82126:	2b01      	cmp	r3, #1
   82128:	f47f aeb2 	bne.w	81e90 <main+0x134>
					{
						Master_cpu_command_type dummy;
						dummy=data_buff[0];
   8212c:	4b57      	ldr	r3, [pc, #348]	; (8228c <main+0x530>)
   8212e:	781b      	ldrb	r3, [r3, #0]
   82130:	70fb      	strb	r3, [r7, #3]
						switch (dummy)
   82132:	78fb      	ldrb	r3, [r7, #3]
   82134:	3b01      	subs	r3, #1
   82136:	2b0c      	cmp	r3, #12
   82138:	f200 808f 	bhi.w	8225a <main+0x4fe>
   8213c:	a201      	add	r2, pc, #4	; (adr r2, 82144 <main+0x3e8>)
   8213e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82142:	bf00      	nop
   82144:	000821cb 	.word	0x000821cb
   82148:	00082215 	.word	0x00082215
   8214c:	00082249 	.word	0x00082249
   82150:	000821d9 	.word	0x000821d9
   82154:	000821eb 	.word	0x000821eb
   82158:	000821f7 	.word	0x000821f7
   8215c:	00082209 	.word	0x00082209
   82160:	00082191 	.word	0x00082191
   82164:	000821b3 	.word	0x000821b3
   82168:	0008225b 	.word	0x0008225b
   8216c:	0008225b 	.word	0x0008225b
   82170:	00082179 	.word	0x00082179
   82174:	00082185 	.word	0x00082185
						{ 
							case PROP_START_ACID_PUMP:
															rc=210;
   82178:	4b45      	ldr	r3, [pc, #276]	; (82290 <main+0x534>)
   8217a:	22d2      	movs	r2, #210	; 0xd2
   8217c:	601a      	str	r2, [r3, #0]
															start_acidpump();
   8217e:	4b45      	ldr	r3, [pc, #276]	; (82294 <main+0x538>)
   82180:	4798      	blx	r3
							
							break;
   82182:	e06b      	b.n	8225c <main+0x500>
							
							case PROP_START_BICARB_PUMP:
															bic_rc=210;
   82184:	4b3b      	ldr	r3, [pc, #236]	; (82274 <main+0x518>)
   82186:	22d2      	movs	r2, #210	; 0xd2
   82188:	601a      	str	r2, [r3, #0]
															start_bicarpump();
   8218a:	4b3b      	ldr	r3, [pc, #236]	; (82278 <main+0x51c>)
   8218c:	4798      	blx	r3
							
							break;
   8218e:	e065      	b.n	8225c <main+0x500>
							case PROP_START_OPENFILL:
					//		startTimer1(TC0,2,TC2_IRQn,stepcount);
								rc=170;
   82190:	4b3f      	ldr	r3, [pc, #252]	; (82290 <main+0x534>)
   82192:	22aa      	movs	r2, #170	; 0xaa
   82194:	601a      	str	r2, [r3, #0]
								bic_rc=170;
   82196:	4b37      	ldr	r3, [pc, #220]	; (82274 <main+0x518>)
   82198:	22aa      	movs	r2, #170	; 0xaa
   8219a:	601a      	str	r2, [r3, #0]
								start_acidpump();
   8219c:	4b3d      	ldr	r3, [pc, #244]	; (82294 <main+0x538>)
   8219e:	4798      	blx	r3
								start_bicarpump();
   821a0:	4b35      	ldr	r3, [pc, #212]	; (82278 <main+0x51c>)
   821a2:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   821a4:	4b35      	ldr	r3, [pc, #212]	; (8227c <main+0x520>)
   821a6:	2205      	movs	r2, #5
   821a8:	701a      	strb	r2, [r3, #0]
								openfillstate = STATE_OPEN_FILL; 
   821aa:	4b3b      	ldr	r3, [pc, #236]	; (82298 <main+0x53c>)
   821ac:	2201      	movs	r2, #1
   821ae:	701a      	strb	r2, [r3, #0]
							break;
   821b0:	e054      	b.n	8225c <main+0x500>
							case PROP_STOP_OPENFILL:
							//printf("stop_openfill\n");
								stop_pump();
   821b2:	4b3a      	ldr	r3, [pc, #232]	; (8229c <main+0x540>)
   821b4:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   821b6:	4b31      	ldr	r3, [pc, #196]	; (8227c <main+0x520>)
   821b8:	2205      	movs	r2, #5
   821ba:	701a      	strb	r2, [r3, #0]
								flag_nrmal=0;
   821bc:	4b30      	ldr	r3, [pc, #192]	; (82280 <main+0x524>)
   821be:	2200      	movs	r2, #0
   821c0:	701a      	strb	r2, [r3, #0]
								openfillstate = STATE_IDLE;
   821c2:	4b35      	ldr	r3, [pc, #212]	; (82298 <main+0x53c>)
   821c4:	2200      	movs	r2, #0
   821c6:	701a      	strb	r2, [r3, #0]
							break;
   821c8:	e048      	b.n	8225c <main+0x500>
							case PROP_START_ALIGMENT:
		//					printf("start_aligment\n");
							flag_nrmal=0;
   821ca:	4b2d      	ldr	r3, [pc, #180]	; (82280 <main+0x524>)
   821cc:	2200      	movs	r2, #0
   821ce:	701a      	strb	r2, [r3, #0]
								state_3 = IDLE_ACID;
   821d0:	4b2a      	ldr	r3, [pc, #168]	; (8227c <main+0x520>)
   821d2:	2200      	movs	r2, #0
   821d4:	701a      	strb	r2, [r3, #0]
							break;
   821d6:	e041      	b.n	8225c <main+0x500>
							case PROP_START_DISINFECTION:
								rc=210;
   821d8:	4b2d      	ldr	r3, [pc, #180]	; (82290 <main+0x534>)
   821da:	22d2      	movs	r2, #210	; 0xd2
   821dc:	601a      	str	r2, [r3, #0]
								start_acidpump();
   821de:	4b2d      	ldr	r3, [pc, #180]	; (82294 <main+0x538>)
   821e0:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   821e2:	4b26      	ldr	r3, [pc, #152]	; (8227c <main+0x520>)
   821e4:	2205      	movs	r2, #5
   821e6:	701a      	strb	r2, [r3, #0]
							break;
   821e8:	e038      	b.n	8225c <main+0x500>
							case PROP_STOP_DISINFECTION:
								stop_pump();
   821ea:	4b2c      	ldr	r3, [pc, #176]	; (8229c <main+0x540>)
   821ec:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   821ee:	4b23      	ldr	r3, [pc, #140]	; (8227c <main+0x520>)
   821f0:	2205      	movs	r2, #5
   821f2:	701a      	strb	r2, [r3, #0]
							break;
   821f4:	e032      	b.n	8225c <main+0x500>
							case PROP_START_CITRIC_DISINFECTION:
								bic_rc=210;
   821f6:	4b1f      	ldr	r3, [pc, #124]	; (82274 <main+0x518>)
   821f8:	22d2      	movs	r2, #210	; 0xd2
   821fa:	601a      	str	r2, [r3, #0]
								start_bicarpump();
   821fc:	4b1e      	ldr	r3, [pc, #120]	; (82278 <main+0x51c>)
   821fe:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   82200:	4b1e      	ldr	r3, [pc, #120]	; (8227c <main+0x520>)
   82202:	2205      	movs	r2, #5
   82204:	701a      	strb	r2, [r3, #0]
							break;
   82206:	e029      	b.n	8225c <main+0x500>
							case PROP_STOP_CITRIC_DISINFECTION:
								stop_pump();
   82208:	4b24      	ldr	r3, [pc, #144]	; (8229c <main+0x540>)
   8220a:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   8220c:	4b1b      	ldr	r3, [pc, #108]	; (8227c <main+0x520>)
   8220e:	2205      	movs	r2, #5
   82210:	701a      	strb	r2, [r3, #0]
							break;
   82212:	e023      	b.n	8225c <main+0x500>
							case PROP_START_MIXING:
							feedcount_flag = 1; // test - to be removed
   82214:	4b22      	ldr	r3, [pc, #136]	; (822a0 <main+0x544>)
   82216:	2201      	movs	r2, #1
   82218:	701a      	strb	r2, [r3, #0]
							startTimer1(TC0,2,TC2_IRQn,stepcount);
   8221a:	68bb      	ldr	r3, [r7, #8]
   8221c:	221d      	movs	r2, #29
   8221e:	2102      	movs	r1, #2
   82220:	4820      	ldr	r0, [pc, #128]	; (822a4 <main+0x548>)
   82222:	4c21      	ldr	r4, [pc, #132]	; (822a8 <main+0x54c>)
   82224:	47a0      	blx	r4
								//printf("start\n");
								//rc=184;
								//bic_rc=184;
 								rc=195;   //273, 205 = 4 rotations per sec, 164 = 5rps, 136 =6 rps, 195 = 4.2 rps
   82226:	4b1a      	ldr	r3, [pc, #104]	; (82290 <main+0x534>)
   82228:	22c3      	movs	r2, #195	; 0xc3
   8222a:	601a      	str	r2, [r3, #0]
 								bic_rc=195;   
   8222c:	4b11      	ldr	r3, [pc, #68]	; (82274 <main+0x518>)
   8222e:	22c3      	movs	r2, #195	; 0xc3
   82230:	601a      	str	r2, [r3, #0]
							//	rc=250;
							//	bic_rc=250;
								start_acidpump();
   82232:	4b18      	ldr	r3, [pc, #96]	; (82294 <main+0x538>)
   82234:	4798      	blx	r3
								start_bicarpump();
   82236:	4b10      	ldr	r3, [pc, #64]	; (82278 <main+0x51c>)
   82238:	4798      	blx	r3
								flag_nrmal=1;
   8223a:	4b11      	ldr	r3, [pc, #68]	; (82280 <main+0x524>)
   8223c:	2201      	movs	r2, #1
   8223e:	701a      	strb	r2, [r3, #0]
								state_3 = CPU3_STANDBY;
   82240:	4b0e      	ldr	r3, [pc, #56]	; (8227c <main+0x520>)
   82242:	2205      	movs	r2, #5
   82244:	701a      	strb	r2, [r3, #0]
							break;
   82246:	e009      	b.n	8225c <main+0x500>
							case PROP_STOP_MIXING:
								//printf("stop\n");
								stop_pump();
   82248:	4b14      	ldr	r3, [pc, #80]	; (8229c <main+0x540>)
   8224a:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   8224c:	4b0b      	ldr	r3, [pc, #44]	; (8227c <main+0x520>)
   8224e:	2205      	movs	r2, #5
   82250:	701a      	strb	r2, [r3, #0]
								flag_nrmal=0;
   82252:	4b0b      	ldr	r3, [pc, #44]	; (82280 <main+0x524>)
   82254:	2200      	movs	r2, #0
   82256:	701a      	strb	r2, [r3, #0]
							break;
   82258:	e000      	b.n	8225c <main+0x500>
								count_start = 0;
								count_stop = 0;*/
							
							break;
						default:
							break;
   8225a:	bf00      	nop
						}
						
					data_buff[0] = (uint8_t)0;
   8225c:	4b0b      	ldr	r3, [pc, #44]	; (8228c <main+0x530>)
   8225e:	2200      	movs	r2, #0
   82260:	701a      	strb	r2, [r3, #0]
					flag_buff = 0;
   82262:	4b09      	ldr	r3, [pc, #36]	; (82288 <main+0x52c>)
   82264:	2200      	movs	r2, #0
   82266:	701a      	strb	r2, [r3, #0]
					data_count = 0;
   82268:	4b10      	ldr	r3, [pc, #64]	; (822ac <main+0x550>)
   8226a:	2200      	movs	r2, #0
   8226c:	601a      	str	r2, [r3, #0]
				break;
   8226e:	bf00      	nop
				break;
			}
		}*/
	}
 	}
	}
   82270:	e60e      	b.n	81e90 <main+0x134>
   82272:	bf00      	nop
   82274:	20071204 	.word	0x20071204
   82278:	0008235d 	.word	0x0008235d
   8227c:	20070400 	.word	0x20070400
   82280:	20070cd1 	.word	0x20070cd1
   82284:	20070d08 	.word	0x20070d08
   82288:	20070de8 	.word	0x20070de8
   8228c:	20070c94 	.word	0x20070c94
   82290:	20070cd4 	.word	0x20070cd4
   82294:	000822b1 	.word	0x000822b1
   82298:	20070cd0 	.word	0x20070cd0
   8229c:	000823fd 	.word	0x000823fd
   822a0:	20070cd8 	.word	0x20070cd8
   822a4:	40080000 	.word	0x40080000
   822a8:	00081131 	.word	0x00081131
   822ac:	20070c8e 	.word	0x20070c8e

000822b0 <start_acidpump>:
	}
	
void start_acidpump()
{
   822b0:	b598      	push	{r3, r4, r7, lr}
   822b2:	af00      	add	r7, sp, #0
	PIOA->PIO_CODR  = 0x00180000;				// brake clear
   822b4:	4b1f      	ldr	r3, [pc, #124]	; (82334 <start_acidpump+0x84>)
   822b6:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   822ba:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_PER   = 0x00000003;
   822bc:	4b1e      	ldr	r3, [pc, #120]	; (82338 <start_acidpump+0x88>)
   822be:	2203      	movs	r2, #3
   822c0:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER  = 0x000001FE;
   822c2:	4b1e      	ldr	r3, [pc, #120]	; (8233c <start_acidpump+0x8c>)
   822c4:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   822c8:	601a      	str	r2, [r3, #0]
	PIOD->PIO_WPMR	= 0x50494F00;
   822ca:	4b1b      	ldr	r3, [pc, #108]	; (82338 <start_acidpump+0x88>)
   822cc:	4a1c      	ldr	r2, [pc, #112]	; (82340 <start_acidpump+0x90>)
   822ce:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   822d2:	4b1a      	ldr	r3, [pc, #104]	; (8233c <start_acidpump+0x8c>)
   822d4:	4a1a      	ldr	r2, [pc, #104]	; (82340 <start_acidpump+0x90>)
   822d6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x00000003;
   822da:	4b17      	ldr	r3, [pc, #92]	; (82338 <start_acidpump+0x88>)
   822dc:	2203      	movs	r2, #3
   822de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x0000000C;
   822e2:	4b15      	ldr	r3, [pc, #84]	; (82338 <start_acidpump+0x88>)
   822e4:	220c      	movs	r2, #12
   822e6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000001FE;
   822ea:	4b14      	ldr	r3, [pc, #80]	; (8233c <start_acidpump+0x8c>)
   822ec:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   822f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000FF000;
   822f4:	4b11      	ldr	r3, [pc, #68]	; (8233c <start_acidpump+0x8c>)
   822f6:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   822fa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	
	PIOD->PIO_ODSR = array_acid[count].dir;
   822fe:	4a0e      	ldr	r2, [pc, #56]	; (82338 <start_acidpump+0x88>)
   82300:	4b10      	ldr	r3, [pc, #64]	; (82344 <start_acidpump+0x94>)
   82302:	681b      	ldr	r3, [r3, #0]
   82304:	4910      	ldr	r1, [pc, #64]	; (82348 <start_acidpump+0x98>)
   82306:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   8230a:	6393      	str	r3, [r2, #56]	; 0x38
	PIOC->PIO_ODSR = array_acid[count].AB;
   8230c:	4a0b      	ldr	r2, [pc, #44]	; (8233c <start_acidpump+0x8c>)
   8230e:	4b0d      	ldr	r3, [pc, #52]	; (82344 <start_acidpump+0x94>)
   82310:	681b      	ldr	r3, [r3, #0]
   82312:	490d      	ldr	r1, [pc, #52]	; (82348 <start_acidpump+0x98>)
   82314:	00db      	lsls	r3, r3, #3
   82316:	440b      	add	r3, r1
   82318:	685b      	ldr	r3, [r3, #4]
   8231a:	6393      	str	r3, [r2, #56]	; 0x38
	
	cpu3_sv_cntrl_activatepump(ACID_PUMP);
   8231c:	2001      	movs	r0, #1
   8231e:	4b0b      	ldr	r3, [pc, #44]	; (8234c <start_acidpump+0x9c>)
   82320:	4798      	blx	r3
	acid_startTimer1(TC0,0,TC0_IRQn,rc);	
   82322:	4b0b      	ldr	r3, [pc, #44]	; (82350 <start_acidpump+0xa0>)
   82324:	681b      	ldr	r3, [r3, #0]
   82326:	221b      	movs	r2, #27
   82328:	2100      	movs	r1, #0
   8232a:	480a      	ldr	r0, [pc, #40]	; (82354 <start_acidpump+0xa4>)
   8232c:	4c0a      	ldr	r4, [pc, #40]	; (82358 <start_acidpump+0xa8>)
   8232e:	47a0      	blx	r4
}
   82330:	bf00      	nop
   82332:	bd98      	pop	{r3, r4, r7, pc}
   82334:	400e0e00 	.word	0x400e0e00
   82338:	400e1400 	.word	0x400e1400
   8233c:	400e1200 	.word	0x400e1200
   82340:	50494f00 	.word	0x50494f00
   82344:	20070cc8 	.word	0x20070cc8
   82348:	20070000 	.word	0x20070000
   8234c:	000811a5 	.word	0x000811a5
   82350:	20070cd4 	.word	0x20070cd4
   82354:	40080000 	.word	0x40080000
   82358:	00081051 	.word	0x00081051

0008235c <start_bicarpump>:

void start_bicarpump()
{
   8235c:	b598      	push	{r3, r4, r7, lr}
   8235e:	af00      	add	r7, sp, #0
	//printf("start bicar pump\n");
		//cpu3_sv_cntrl_deactivate_pin(BICARBONATE_VALVE);
		PIOD->PIO_WPMR	= 0x50494F00;
   82360:	4b1c      	ldr	r3, [pc, #112]	; (823d4 <start_bicarpump+0x78>)
   82362:	4a1d      	ldr	r2, [pc, #116]	; (823d8 <start_bicarpump+0x7c>)
   82364:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOC->PIO_WPMR  = 0x50494F00;
   82368:	4b1c      	ldr	r3, [pc, #112]	; (823dc <start_bicarpump+0x80>)
   8236a:	4a1b      	ldr	r2, [pc, #108]	; (823d8 <start_bicarpump+0x7c>)
   8236c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOD->PIO_OWER  = 0x0000000C;
   82370:	4b18      	ldr	r3, [pc, #96]	; (823d4 <start_bicarpump+0x78>)
   82372:	220c      	movs	r2, #12
   82374:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOD->PIO_OWDR = 0x000000003;
   82378:	4b16      	ldr	r3, [pc, #88]	; (823d4 <start_bicarpump+0x78>)
   8237a:	2203      	movs	r2, #3
   8237c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		PIOC->PIO_OWER  = 0x000FF000;
   82380:	4b16      	ldr	r3, [pc, #88]	; (823dc <start_bicarpump+0x80>)
   82382:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   82386:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOC->PIO_OWDR  = 0x000001FE;
   8238a:	4b14      	ldr	r3, [pc, #80]	; (823dc <start_bicarpump+0x80>)
   8238c:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   82390:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		PIOB->PIO_CODR  = 0x00204000;			// brake clear
   82394:	4b12      	ldr	r3, [pc, #72]	; (823e0 <start_bicarpump+0x84>)
   82396:	f44f 1201 	mov.w	r2, #2113536	; 0x204000
   8239a:	635a      	str	r2, [r3, #52]	; 0x34
		
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   8239c:	4a0d      	ldr	r2, [pc, #52]	; (823d4 <start_bicarpump+0x78>)
   8239e:	4b11      	ldr	r3, [pc, #68]	; (823e4 <start_bicarpump+0x88>)
   823a0:	681b      	ldr	r3, [r3, #0]
   823a2:	4911      	ldr	r1, [pc, #68]	; (823e8 <start_bicarpump+0x8c>)
   823a4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   823a8:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   823aa:	4a0c      	ldr	r2, [pc, #48]	; (823dc <start_bicarpump+0x80>)
   823ac:	4b0d      	ldr	r3, [pc, #52]	; (823e4 <start_bicarpump+0x88>)
   823ae:	681b      	ldr	r3, [r3, #0]
   823b0:	490d      	ldr	r1, [pc, #52]	; (823e8 <start_bicarpump+0x8c>)
   823b2:	00db      	lsls	r3, r3, #3
   823b4:	440b      	add	r3, r1
   823b6:	685b      	ldr	r3, [r3, #4]
   823b8:	6393      	str	r3, [r2, #56]	; 0x38
		
		cpu3_sv_cntrl_activatepump(BICAR_PUMP);
   823ba:	2002      	movs	r0, #2
   823bc:	4b0b      	ldr	r3, [pc, #44]	; (823ec <start_bicarpump+0x90>)
   823be:	4798      	blx	r3
		bicar_startTimer1(TC0,1,TC1_IRQn,bic_rc);
   823c0:	4b0b      	ldr	r3, [pc, #44]	; (823f0 <start_bicarpump+0x94>)
   823c2:	681b      	ldr	r3, [r3, #0]
   823c4:	221c      	movs	r2, #28
   823c6:	2101      	movs	r1, #1
   823c8:	480a      	ldr	r0, [pc, #40]	; (823f4 <start_bicarpump+0x98>)
   823ca:	4c0b      	ldr	r4, [pc, #44]	; (823f8 <start_bicarpump+0x9c>)
   823cc:	47a0      	blx	r4
}
   823ce:	bf00      	nop
   823d0:	bd98      	pop	{r3, r4, r7, pc}
   823d2:	bf00      	nop
   823d4:	400e1400 	.word	0x400e1400
   823d8:	50494f00 	.word	0x50494f00
   823dc:	400e1200 	.word	0x400e1200
   823e0:	400e1000 	.word	0x400e1000
   823e4:	20070ccc 	.word	0x20070ccc
   823e8:	20070200 	.word	0x20070200
   823ec:	000811a5 	.word	0x000811a5
   823f0:	20071204 	.word	0x20071204
   823f4:	40080000 	.word	0x40080000
   823f8:	000810c1 	.word	0x000810c1

000823fc <stop_pump>:

void stop_pump()
{
   823fc:	b580      	push	{r7, lr}
   823fe:	af00      	add	r7, sp, #0
	CPU3_S_STOP_TIMER(0);
   82400:	2000      	movs	r0, #0
   82402:	4b06      	ldr	r3, [pc, #24]	; (8241c <stop_pump+0x20>)
   82404:	4798      	blx	r3
	CPU3_S_STOP_TIMER(1);
   82406:	2001      	movs	r0, #1
   82408:	4b04      	ldr	r3, [pc, #16]	; (8241c <stop_pump+0x20>)
   8240a:	4798      	blx	r3
	CPU3_S_STOP_TIMER(3);
   8240c:	2003      	movs	r0, #3
   8240e:	4b03      	ldr	r3, [pc, #12]	; (8241c <stop_pump+0x20>)
   82410:	4798      	blx	r3
	CPU3_S_STOP_TIMER(4);
   82412:	2004      	movs	r0, #4
   82414:	4b01      	ldr	r3, [pc, #4]	; (8241c <stop_pump+0x20>)
   82416:	4798      	blx	r3
}
   82418:	bf00      	nop
   8241a:	bd80      	pop	{r7, pc}
   8241c:	00081235 	.word	0x00081235

00082420 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   82420:	b580      	push	{r7, lr}
   82422:	b082      	sub	sp, #8
   82424:	af00      	add	r7, sp, #0
   82426:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82428:	687b      	ldr	r3, [r7, #4]
   8242a:	2b07      	cmp	r3, #7
   8242c:	d831      	bhi.n	82492 <osc_enable+0x72>
   8242e:	a201      	add	r2, pc, #4	; (adr r2, 82434 <osc_enable+0x14>)
   82430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82434:	00082491 	.word	0x00082491
   82438:	00082455 	.word	0x00082455
   8243c:	0008245d 	.word	0x0008245d
   82440:	00082465 	.word	0x00082465
   82444:	0008246d 	.word	0x0008246d
   82448:	00082475 	.word	0x00082475
   8244c:	0008247d 	.word	0x0008247d
   82450:	00082487 	.word	0x00082487
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   82454:	2000      	movs	r0, #0
   82456:	4b11      	ldr	r3, [pc, #68]	; (8249c <osc_enable+0x7c>)
   82458:	4798      	blx	r3
		break;
   8245a:	e01a      	b.n	82492 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   8245c:	2001      	movs	r0, #1
   8245e:	4b0f      	ldr	r3, [pc, #60]	; (8249c <osc_enable+0x7c>)
   82460:	4798      	blx	r3
		break;
   82462:	e016      	b.n	82492 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   82464:	2000      	movs	r0, #0
   82466:	4b0e      	ldr	r3, [pc, #56]	; (824a0 <osc_enable+0x80>)
   82468:	4798      	blx	r3
		break;
   8246a:	e012      	b.n	82492 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   8246c:	2010      	movs	r0, #16
   8246e:	4b0c      	ldr	r3, [pc, #48]	; (824a0 <osc_enable+0x80>)
   82470:	4798      	blx	r3
		break;
   82472:	e00e      	b.n	82492 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   82474:	2020      	movs	r0, #32
   82476:	4b0a      	ldr	r3, [pc, #40]	; (824a0 <osc_enable+0x80>)
   82478:	4798      	blx	r3
		break;
   8247a:	e00a      	b.n	82492 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8247c:	213e      	movs	r1, #62	; 0x3e
   8247e:	2000      	movs	r0, #0
   82480:	4b08      	ldr	r3, [pc, #32]	; (824a4 <osc_enable+0x84>)
   82482:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   82484:	e005      	b.n	82492 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   82486:	213e      	movs	r1, #62	; 0x3e
   82488:	2001      	movs	r0, #1
   8248a:	4b06      	ldr	r3, [pc, #24]	; (824a4 <osc_enable+0x84>)
   8248c:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   8248e:	e000      	b.n	82492 <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
   82490:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
   82492:	bf00      	nop
   82494:	3708      	adds	r7, #8
   82496:	46bd      	mov	sp, r7
   82498:	bd80      	pop	{r7, pc}
   8249a:	bf00      	nop
   8249c:	00082dcd 	.word	0x00082dcd
   824a0:	00082e39 	.word	0x00082e39
   824a4:	00082ed9 	.word	0x00082ed9

000824a8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   824a8:	b580      	push	{r7, lr}
   824aa:	b082      	sub	sp, #8
   824ac:	af00      	add	r7, sp, #0
   824ae:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   824b0:	687b      	ldr	r3, [r7, #4]
   824b2:	2b07      	cmp	r3, #7
   824b4:	d826      	bhi.n	82504 <osc_is_ready+0x5c>
   824b6:	a201      	add	r2, pc, #4	; (adr r2, 824bc <osc_is_ready+0x14>)
   824b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   824bc:	000824dd 	.word	0x000824dd
   824c0:	000824e1 	.word	0x000824e1
   824c4:	000824e1 	.word	0x000824e1
   824c8:	000824f3 	.word	0x000824f3
   824cc:	000824f3 	.word	0x000824f3
   824d0:	000824f3 	.word	0x000824f3
   824d4:	000824f3 	.word	0x000824f3
   824d8:	000824f3 	.word	0x000824f3
	case OSC_SLCK_32K_RC:
		return 1;
   824dc:	2301      	movs	r3, #1
   824de:	e012      	b.n	82506 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   824e0:	4b0b      	ldr	r3, [pc, #44]	; (82510 <osc_is_ready+0x68>)
   824e2:	4798      	blx	r3
   824e4:	4603      	mov	r3, r0
   824e6:	2b00      	cmp	r3, #0
   824e8:	bf14      	ite	ne
   824ea:	2301      	movne	r3, #1
   824ec:	2300      	moveq	r3, #0
   824ee:	b2db      	uxtb	r3, r3
   824f0:	e009      	b.n	82506 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   824f2:	4b08      	ldr	r3, [pc, #32]	; (82514 <osc_is_ready+0x6c>)
   824f4:	4798      	blx	r3
   824f6:	4603      	mov	r3, r0
   824f8:	2b00      	cmp	r3, #0
   824fa:	bf14      	ite	ne
   824fc:	2301      	movne	r3, #1
   824fe:	2300      	moveq	r3, #0
   82500:	b2db      	uxtb	r3, r3
   82502:	e000      	b.n	82506 <osc_is_ready+0x5e>
	}

	return 0;
   82504:	2300      	movs	r3, #0
}
   82506:	4618      	mov	r0, r3
   82508:	3708      	adds	r7, #8
   8250a:	46bd      	mov	sp, r7
   8250c:	bd80      	pop	{r7, pc}
   8250e:	bf00      	nop
   82510:	00082e05 	.word	0x00082e05
   82514:	00082f51 	.word	0x00082f51

00082518 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   82518:	b480      	push	{r7}
   8251a:	b083      	sub	sp, #12
   8251c:	af00      	add	r7, sp, #0
   8251e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82520:	687b      	ldr	r3, [r7, #4]
   82522:	2b07      	cmp	r3, #7
   82524:	d825      	bhi.n	82572 <osc_get_rate+0x5a>
   82526:	a201      	add	r2, pc, #4	; (adr r2, 8252c <osc_get_rate+0x14>)
   82528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8252c:	0008254d 	.word	0x0008254d
   82530:	00082553 	.word	0x00082553
   82534:	00082559 	.word	0x00082559
   82538:	0008255f 	.word	0x0008255f
   8253c:	00082563 	.word	0x00082563
   82540:	00082567 	.word	0x00082567
   82544:	0008256b 	.word	0x0008256b
   82548:	0008256f 	.word	0x0008256f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8254c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   82550:	e010      	b.n	82574 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   82552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82556:	e00d      	b.n	82574 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   82558:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8255c:	e00a      	b.n	82574 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8255e:	4b08      	ldr	r3, [pc, #32]	; (82580 <osc_get_rate+0x68>)
   82560:	e008      	b.n	82574 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   82562:	4b08      	ldr	r3, [pc, #32]	; (82584 <osc_get_rate+0x6c>)
   82564:	e006      	b.n	82574 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   82566:	4b08      	ldr	r3, [pc, #32]	; (82588 <osc_get_rate+0x70>)
   82568:	e004      	b.n	82574 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8256a:	4b07      	ldr	r3, [pc, #28]	; (82588 <osc_get_rate+0x70>)
   8256c:	e002      	b.n	82574 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8256e:	4b06      	ldr	r3, [pc, #24]	; (82588 <osc_get_rate+0x70>)
   82570:	e000      	b.n	82574 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   82572:	2300      	movs	r3, #0
}
   82574:	4618      	mov	r0, r3
   82576:	370c      	adds	r7, #12
   82578:	46bd      	mov	sp, r7
   8257a:	bc80      	pop	{r7}
   8257c:	4770      	bx	lr
   8257e:	bf00      	nop
   82580:	003d0900 	.word	0x003d0900
   82584:	007a1200 	.word	0x007a1200
   82588:	00b71b00 	.word	0x00b71b00

0008258c <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   8258c:	b580      	push	{r7, lr}
   8258e:	b082      	sub	sp, #8
   82590:	af00      	add	r7, sp, #0
   82592:	4603      	mov	r3, r0
   82594:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   82596:	bf00      	nop
   82598:	79fb      	ldrb	r3, [r7, #7]
   8259a:	4618      	mov	r0, r3
   8259c:	4b05      	ldr	r3, [pc, #20]	; (825b4 <osc_wait_ready+0x28>)
   8259e:	4798      	blx	r3
   825a0:	4603      	mov	r3, r0
   825a2:	f083 0301 	eor.w	r3, r3, #1
   825a6:	b2db      	uxtb	r3, r3
   825a8:	2b00      	cmp	r3, #0
   825aa:	d1f5      	bne.n	82598 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   825ac:	bf00      	nop
   825ae:	3708      	adds	r7, #8
   825b0:	46bd      	mov	sp, r7
   825b2:	bd80      	pop	{r7, pc}
   825b4:	000824a9 	.word	0x000824a9

000825b8 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   825b8:	b580      	push	{r7, lr}
   825ba:	b086      	sub	sp, #24
   825bc:	af00      	add	r7, sp, #0
   825be:	60f8      	str	r0, [r7, #12]
   825c0:	607a      	str	r2, [r7, #4]
   825c2:	603b      	str	r3, [r7, #0]
   825c4:	460b      	mov	r3, r1
   825c6:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   825c8:	687b      	ldr	r3, [r7, #4]
   825ca:	2b00      	cmp	r3, #0
   825cc:	d107      	bne.n	825de <pll_config_init+0x26>
   825ce:	683b      	ldr	r3, [r7, #0]
   825d0:	2b00      	cmp	r3, #0
   825d2:	d104      	bne.n	825de <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   825d4:	68fb      	ldr	r3, [r7, #12]
   825d6:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   825da:	601a      	str	r2, [r3, #0]
   825dc:	e019      	b.n	82612 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   825de:	7afb      	ldrb	r3, [r7, #11]
   825e0:	4618      	mov	r0, r3
   825e2:	4b0e      	ldr	r3, [pc, #56]	; (8261c <pll_config_init+0x64>)
   825e4:	4798      	blx	r3
   825e6:	4602      	mov	r2, r0
   825e8:	687b      	ldr	r3, [r7, #4]
   825ea:	fbb2 f3f3 	udiv	r3, r2, r3
   825ee:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   825f0:	697b      	ldr	r3, [r7, #20]
   825f2:	683a      	ldr	r2, [r7, #0]
   825f4:	fb02 f303 	mul.w	r3, r2, r3
   825f8:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   825fa:	683b      	ldr	r3, [r7, #0]
   825fc:	3b01      	subs	r3, #1
   825fe:	041a      	lsls	r2, r3, #16
   82600:	4b07      	ldr	r3, [pc, #28]	; (82620 <pll_config_init+0x68>)
   82602:	4013      	ands	r3, r2
   82604:	687a      	ldr	r2, [r7, #4]
   82606:	b2d2      	uxtb	r2, r2
   82608:	4313      	orrs	r3, r2
   8260a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8260e:	68fb      	ldr	r3, [r7, #12]
   82610:	601a      	str	r2, [r3, #0]
	}
}
   82612:	bf00      	nop
   82614:	3718      	adds	r7, #24
   82616:	46bd      	mov	sp, r7
   82618:	bd80      	pop	{r7, pc}
   8261a:	bf00      	nop
   8261c:	00082519 	.word	0x00082519
   82620:	07ff0000 	.word	0x07ff0000

00082624 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   82624:	b580      	push	{r7, lr}
   82626:	b082      	sub	sp, #8
   82628:	af00      	add	r7, sp, #0
   8262a:	6078      	str	r0, [r7, #4]
   8262c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8262e:	683b      	ldr	r3, [r7, #0]
   82630:	2b00      	cmp	r3, #0
   82632:	d108      	bne.n	82646 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   82634:	4b09      	ldr	r3, [pc, #36]	; (8265c <pll_enable+0x38>)
   82636:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82638:	4a09      	ldr	r2, [pc, #36]	; (82660 <pll_enable+0x3c>)
   8263a:	687b      	ldr	r3, [r7, #4]
   8263c:	681b      	ldr	r3, [r3, #0]
   8263e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82642:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   82644:	e005      	b.n	82652 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   82646:	4a06      	ldr	r2, [pc, #24]	; (82660 <pll_enable+0x3c>)
   82648:	687b      	ldr	r3, [r7, #4]
   8264a:	681b      	ldr	r3, [r3, #0]
   8264c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82650:	61d3      	str	r3, [r2, #28]
	}
}
   82652:	bf00      	nop
   82654:	3708      	adds	r7, #8
   82656:	46bd      	mov	sp, r7
   82658:	bd80      	pop	{r7, pc}
   8265a:	bf00      	nop
   8265c:	00082f69 	.word	0x00082f69
   82660:	400e0600 	.word	0x400e0600

00082664 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   82664:	b580      	push	{r7, lr}
   82666:	b082      	sub	sp, #8
   82668:	af00      	add	r7, sp, #0
   8266a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8266c:	687b      	ldr	r3, [r7, #4]
   8266e:	2b00      	cmp	r3, #0
   82670:	d103      	bne.n	8267a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   82672:	4b05      	ldr	r3, [pc, #20]	; (82688 <pll_is_locked+0x24>)
   82674:	4798      	blx	r3
   82676:	4603      	mov	r3, r0
   82678:	e002      	b.n	82680 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   8267a:	4b04      	ldr	r3, [pc, #16]	; (8268c <pll_is_locked+0x28>)
   8267c:	4798      	blx	r3
   8267e:	4603      	mov	r3, r0
	}
}
   82680:	4618      	mov	r0, r3
   82682:	3708      	adds	r7, #8
   82684:	46bd      	mov	sp, r7
   82686:	bd80      	pop	{r7, pc}
   82688:	00082f81 	.word	0x00082f81
   8268c:	00082f99 	.word	0x00082f99

00082690 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   82690:	b580      	push	{r7, lr}
   82692:	b082      	sub	sp, #8
   82694:	af00      	add	r7, sp, #0
   82696:	4603      	mov	r3, r0
   82698:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   8269a:	79fb      	ldrb	r3, [r7, #7]
   8269c:	3b03      	subs	r3, #3
   8269e:	2b04      	cmp	r3, #4
   826a0:	d808      	bhi.n	826b4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   826a2:	79fb      	ldrb	r3, [r7, #7]
   826a4:	4618      	mov	r0, r3
   826a6:	4b06      	ldr	r3, [pc, #24]	; (826c0 <pll_enable_source+0x30>)
   826a8:	4798      	blx	r3
		osc_wait_ready(e_src);
   826aa:	79fb      	ldrb	r3, [r7, #7]
   826ac:	4618      	mov	r0, r3
   826ae:	4b05      	ldr	r3, [pc, #20]	; (826c4 <pll_enable_source+0x34>)
   826b0:	4798      	blx	r3
		break;
   826b2:	e000      	b.n	826b6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   826b4:	bf00      	nop
	}
}
   826b6:	bf00      	nop
   826b8:	3708      	adds	r7, #8
   826ba:	46bd      	mov	sp, r7
   826bc:	bd80      	pop	{r7, pc}
   826be:	bf00      	nop
   826c0:	00082421 	.word	0x00082421
   826c4:	0008258d 	.word	0x0008258d

000826c8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   826c8:	b580      	push	{r7, lr}
   826ca:	b082      	sub	sp, #8
   826cc:	af00      	add	r7, sp, #0
   826ce:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   826d0:	bf00      	nop
   826d2:	6878      	ldr	r0, [r7, #4]
   826d4:	4b04      	ldr	r3, [pc, #16]	; (826e8 <pll_wait_for_lock+0x20>)
   826d6:	4798      	blx	r3
   826d8:	4603      	mov	r3, r0
   826da:	2b00      	cmp	r3, #0
   826dc:	d0f9      	beq.n	826d2 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   826de:	2300      	movs	r3, #0
}
   826e0:	4618      	mov	r0, r3
   826e2:	3708      	adds	r7, #8
   826e4:	46bd      	mov	sp, r7
   826e6:	bd80      	pop	{r7, pc}
   826e8:	00082665 	.word	0x00082665

000826ec <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   826ec:	b580      	push	{r7, lr}
   826ee:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   826f0:	2006      	movs	r0, #6
   826f2:	4b04      	ldr	r3, [pc, #16]	; (82704 <sysclk_get_main_hz+0x18>)
   826f4:	4798      	blx	r3
   826f6:	4602      	mov	r2, r0
   826f8:	4613      	mov	r3, r2
   826fa:	00db      	lsls	r3, r3, #3
   826fc:	1a9b      	subs	r3, r3, r2
   826fe:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   82700:	4618      	mov	r0, r3
   82702:	bd80      	pop	{r7, pc}
   82704:	00082519 	.word	0x00082519

00082708 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   82708:	b580      	push	{r7, lr}
   8270a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   8270c:	4b02      	ldr	r3, [pc, #8]	; (82718 <sysclk_get_cpu_hz+0x10>)
   8270e:	4798      	blx	r3
   82710:	4603      	mov	r3, r0
   82712:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   82714:	4618      	mov	r0, r3
   82716:	bd80      	pop	{r7, pc}
   82718:	000826ed 	.word	0x000826ed

0008271c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8271c:	b590      	push	{r4, r7, lr}
   8271e:	b083      	sub	sp, #12
   82720:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82722:	4b10      	ldr	r3, [pc, #64]	; (82764 <sysclk_init+0x48>)
   82724:	4798      	blx	r3
   82726:	4603      	mov	r3, r0
   82728:	4618      	mov	r0, r3
   8272a:	4b0f      	ldr	r3, [pc, #60]	; (82768 <sysclk_init+0x4c>)
   8272c:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8272e:	2006      	movs	r0, #6
   82730:	4b0e      	ldr	r3, [pc, #56]	; (8276c <sysclk_init+0x50>)
   82732:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   82734:	1d38      	adds	r0, r7, #4
   82736:	230e      	movs	r3, #14
   82738:	2201      	movs	r2, #1
   8273a:	2106      	movs	r1, #6
   8273c:	4c0c      	ldr	r4, [pc, #48]	; (82770 <sysclk_init+0x54>)
   8273e:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   82740:	1d3b      	adds	r3, r7, #4
   82742:	2100      	movs	r1, #0
   82744:	4618      	mov	r0, r3
   82746:	4b0b      	ldr	r3, [pc, #44]	; (82774 <sysclk_init+0x58>)
   82748:	4798      	blx	r3
		pll_wait_for_lock(0);
   8274a:	2000      	movs	r0, #0
   8274c:	4b0a      	ldr	r3, [pc, #40]	; (82778 <sysclk_init+0x5c>)
   8274e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82750:	2010      	movs	r0, #16
   82752:	4b0a      	ldr	r3, [pc, #40]	; (8277c <sysclk_init+0x60>)
   82754:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82756:	4b0a      	ldr	r3, [pc, #40]	; (82780 <sysclk_init+0x64>)
   82758:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8275a:	bf00      	nop
   8275c:	370c      	adds	r7, #12
   8275e:	46bd      	mov	sp, r7
   82760:	bd90      	pop	{r4, r7, pc}
   82762:	bf00      	nop
   82764:	00082709 	.word	0x00082709
   82768:	0008329d 	.word	0x0008329d
   8276c:	00082691 	.word	0x00082691
   82770:	000825b9 	.word	0x000825b9
   82774:	00082625 	.word	0x00082625
   82778:	000826c9 	.word	0x000826c9
   8277c:	00082d4d 	.word	0x00082d4d
   82780:	00083119 	.word	0x00083119

00082784 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   82784:	b580      	push	{r7, lr}
   82786:	b082      	sub	sp, #8
   82788:	af00      	add	r7, sp, #0
   8278a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   8278c:	6878      	ldr	r0, [r7, #4]
   8278e:	4b03      	ldr	r3, [pc, #12]	; (8279c <sysclk_enable_peripheral_clock+0x18>)
   82790:	4798      	blx	r3
}
   82792:	bf00      	nop
   82794:	3708      	adds	r7, #8
   82796:	46bd      	mov	sp, r7
   82798:	bd80      	pop	{r7, pc}
   8279a:	bf00      	nop
   8279c:	00082fb1 	.word	0x00082fb1

000827a0 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   827a0:	b580      	push	{r7, lr}
   827a2:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   827a4:	200b      	movs	r0, #11
   827a6:	4b06      	ldr	r3, [pc, #24]	; (827c0 <ioport_init+0x20>)
   827a8:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   827aa:	200c      	movs	r0, #12
   827ac:	4b04      	ldr	r3, [pc, #16]	; (827c0 <ioport_init+0x20>)
   827ae:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
   827b0:	200d      	movs	r0, #13
   827b2:	4b03      	ldr	r3, [pc, #12]	; (827c0 <ioport_init+0x20>)
   827b4:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
   827b6:	200e      	movs	r0, #14
   827b8:	4b01      	ldr	r3, [pc, #4]	; (827c0 <ioport_init+0x20>)
   827ba:	4798      	blx	r3
	arch_ioport_init();
}
   827bc:	bf00      	nop
   827be:	bd80      	pop	{r7, pc}
   827c0:	00082785 	.word	0x00082785

000827c4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   827c4:	b580      	push	{r7, lr}
   827c6:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   827c8:	4b17      	ldr	r3, [pc, #92]	; (82828 <board_init+0x64>)
   827ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   827ce:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   827d0:	4b16      	ldr	r3, [pc, #88]	; (8282c <board_init+0x68>)
   827d2:	4798      	blx	r3
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   827d4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   827d8:	203b      	movs	r0, #59	; 0x3b
   827da:	4b15      	ldr	r3, [pc, #84]	; (82830 <board_init+0x6c>)
   827dc:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   827de:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   827e2:	2055      	movs	r0, #85	; 0x55
   827e4:	4b12      	ldr	r3, [pc, #72]	; (82830 <board_init+0x6c>)
   827e6:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   827e8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   827ec:	2056      	movs	r0, #86	; 0x56
   827ee:	4b10      	ldr	r3, [pc, #64]	; (82830 <board_init+0x6c>)
   827f0:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   827f2:	4910      	ldr	r1, [pc, #64]	; (82834 <board_init+0x70>)
   827f4:	2068      	movs	r0, #104	; 0x68
   827f6:	4b0e      	ldr	r3, [pc, #56]	; (82830 <board_init+0x6c>)
   827f8:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   827fa:	490f      	ldr	r1, [pc, #60]	; (82838 <board_init+0x74>)
   827fc:	205c      	movs	r0, #92	; 0x5c
   827fe:	4b0c      	ldr	r3, [pc, #48]	; (82830 <board_init+0x6c>)
   82800:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82802:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   82806:	f44f 7140 	mov.w	r1, #768	; 0x300
   8280a:	480c      	ldr	r0, [pc, #48]	; (8283c <board_init+0x78>)
   8280c:	4b0c      	ldr	r3, [pc, #48]	; (82840 <board_init+0x7c>)
   8280e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   82810:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82814:	202b      	movs	r0, #43	; 0x2b
   82816:	4b06      	ldr	r3, [pc, #24]	; (82830 <board_init+0x6c>)
   82818:	4798      	blx	r3
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8281a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8281e:	202a      	movs	r0, #42	; 0x2a
   82820:	4b03      	ldr	r3, [pc, #12]	; (82830 <board_init+0x6c>)
   82822:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   82824:	bf00      	nop
   82826:	bd80      	pop	{r7, pc}
   82828:	400e1a50 	.word	0x400e1a50
   8282c:	000827a1 	.word	0x000827a1
   82830:	00082a21 	.word	0x00082a21
   82834:	28000079 	.word	0x28000079
   82838:	28000001 	.word	0x28000001
   8283c:	400e0e00 	.word	0x400e0e00
   82840:	00082b5d 	.word	0x00082b5d

00082844 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   82844:	b480      	push	{r7}
   82846:	b085      	sub	sp, #20
   82848:	af00      	add	r7, sp, #0
   8284a:	60f8      	str	r0, [r7, #12]
   8284c:	60b9      	str	r1, [r7, #8]
   8284e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82850:	687b      	ldr	r3, [r7, #4]
   82852:	2b00      	cmp	r3, #0
   82854:	d003      	beq.n	8285e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   82856:	68fb      	ldr	r3, [r7, #12]
   82858:	68ba      	ldr	r2, [r7, #8]
   8285a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   8285c:	e002      	b.n	82864 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8285e:	68fb      	ldr	r3, [r7, #12]
   82860:	68ba      	ldr	r2, [r7, #8]
   82862:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   82864:	bf00      	nop
   82866:	3714      	adds	r7, #20
   82868:	46bd      	mov	sp, r7
   8286a:	bc80      	pop	{r7}
   8286c:	4770      	bx	lr
   8286e:	bf00      	nop

00082870 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   82870:	b480      	push	{r7}
   82872:	b087      	sub	sp, #28
   82874:	af00      	add	r7, sp, #0
   82876:	60f8      	str	r0, [r7, #12]
   82878:	60b9      	str	r1, [r7, #8]
   8287a:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8287c:	68fb      	ldr	r3, [r7, #12]
   8287e:	687a      	ldr	r2, [r7, #4]
   82880:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82882:	68bb      	ldr	r3, [r7, #8]
   82884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82888:	d01f      	beq.n	828ca <pio_set_peripheral+0x5a>
   8288a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8288e:	d805      	bhi.n	8289c <pio_set_peripheral+0x2c>
   82890:	2b00      	cmp	r3, #0
   82892:	d027      	beq.n	828e4 <pio_set_peripheral+0x74>
   82894:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82898:	d00a      	beq.n	828b0 <pio_set_peripheral+0x40>
   8289a:	e01f      	b.n	828dc <pio_set_peripheral+0x6c>
   8289c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   828a0:	d020      	beq.n	828e4 <pio_set_peripheral+0x74>
   828a2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   828a6:	d01d      	beq.n	828e4 <pio_set_peripheral+0x74>
   828a8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   828ac:	d01a      	beq.n	828e4 <pio_set_peripheral+0x74>
   828ae:	e015      	b.n	828dc <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   828b0:	68fb      	ldr	r3, [r7, #12]
   828b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   828b4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   828b6:	68fb      	ldr	r3, [r7, #12]
   828b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   828ba:	687b      	ldr	r3, [r7, #4]
   828bc:	43d9      	mvns	r1, r3
   828be:	697b      	ldr	r3, [r7, #20]
   828c0:	400b      	ands	r3, r1
   828c2:	401a      	ands	r2, r3
   828c4:	68fb      	ldr	r3, [r7, #12]
   828c6:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   828c8:	e008      	b.n	828dc <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   828ca:	68fb      	ldr	r3, [r7, #12]
   828cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   828ce:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   828d0:	687a      	ldr	r2, [r7, #4]
   828d2:	697b      	ldr	r3, [r7, #20]
   828d4:	431a      	orrs	r2, r3
   828d6:	68fb      	ldr	r3, [r7, #12]
   828d8:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   828da:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   828dc:	68fb      	ldr	r3, [r7, #12]
   828de:	687a      	ldr	r2, [r7, #4]
   828e0:	605a      	str	r2, [r3, #4]
   828e2:	e000      	b.n	828e6 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   828e4:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   828e6:	371c      	adds	r7, #28
   828e8:	46bd      	mov	sp, r7
   828ea:	bc80      	pop	{r7}
   828ec:	4770      	bx	lr
   828ee:	bf00      	nop

000828f0 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   828f0:	b580      	push	{r7, lr}
   828f2:	b084      	sub	sp, #16
   828f4:	af00      	add	r7, sp, #0
   828f6:	60f8      	str	r0, [r7, #12]
   828f8:	60b9      	str	r1, [r7, #8]
   828fa:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   828fc:	68b9      	ldr	r1, [r7, #8]
   828fe:	68f8      	ldr	r0, [r7, #12]
   82900:	4b19      	ldr	r3, [pc, #100]	; (82968 <pio_set_input+0x78>)
   82902:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   82904:	687b      	ldr	r3, [r7, #4]
   82906:	f003 0301 	and.w	r3, r3, #1
   8290a:	461a      	mov	r2, r3
   8290c:	68b9      	ldr	r1, [r7, #8]
   8290e:	68f8      	ldr	r0, [r7, #12]
   82910:	4b16      	ldr	r3, [pc, #88]	; (8296c <pio_set_input+0x7c>)
   82912:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82914:	687b      	ldr	r3, [r7, #4]
   82916:	f003 030a 	and.w	r3, r3, #10
   8291a:	2b00      	cmp	r3, #0
   8291c:	d003      	beq.n	82926 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   8291e:	68fb      	ldr	r3, [r7, #12]
   82920:	68ba      	ldr	r2, [r7, #8]
   82922:	621a      	str	r2, [r3, #32]
   82924:	e002      	b.n	8292c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82926:	68fb      	ldr	r3, [r7, #12]
   82928:	68ba      	ldr	r2, [r7, #8]
   8292a:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8292c:	687b      	ldr	r3, [r7, #4]
   8292e:	f003 0302 	and.w	r3, r3, #2
   82932:	2b00      	cmp	r3, #0
   82934:	d004      	beq.n	82940 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   82936:	68fb      	ldr	r3, [r7, #12]
   82938:	68ba      	ldr	r2, [r7, #8]
   8293a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   8293e:	e008      	b.n	82952 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82940:	687b      	ldr	r3, [r7, #4]
   82942:	f003 0308 	and.w	r3, r3, #8
   82946:	2b00      	cmp	r3, #0
   82948:	d003      	beq.n	82952 <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   8294a:	68fb      	ldr	r3, [r7, #12]
   8294c:	68ba      	ldr	r2, [r7, #8]
   8294e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82952:	68fb      	ldr	r3, [r7, #12]
   82954:	68ba      	ldr	r2, [r7, #8]
   82956:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   82958:	68fb      	ldr	r3, [r7, #12]
   8295a:	68ba      	ldr	r2, [r7, #8]
   8295c:	601a      	str	r2, [r3, #0]
}
   8295e:	bf00      	nop
   82960:	3710      	adds	r7, #16
   82962:	46bd      	mov	sp, r7
   82964:	bd80      	pop	{r7, pc}
   82966:	bf00      	nop
   82968:	000829d5 	.word	0x000829d5
   8296c:	00082845 	.word	0x00082845

00082970 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82970:	b580      	push	{r7, lr}
   82972:	b084      	sub	sp, #16
   82974:	af00      	add	r7, sp, #0
   82976:	60f8      	str	r0, [r7, #12]
   82978:	60b9      	str	r1, [r7, #8]
   8297a:	607a      	str	r2, [r7, #4]
   8297c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   8297e:	68b9      	ldr	r1, [r7, #8]
   82980:	68f8      	ldr	r0, [r7, #12]
   82982:	4b12      	ldr	r3, [pc, #72]	; (829cc <pio_set_output+0x5c>)
   82984:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   82986:	69ba      	ldr	r2, [r7, #24]
   82988:	68b9      	ldr	r1, [r7, #8]
   8298a:	68f8      	ldr	r0, [r7, #12]
   8298c:	4b10      	ldr	r3, [pc, #64]	; (829d0 <pio_set_output+0x60>)
   8298e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82990:	683b      	ldr	r3, [r7, #0]
   82992:	2b00      	cmp	r3, #0
   82994:	d003      	beq.n	8299e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   82996:	68fb      	ldr	r3, [r7, #12]
   82998:	68ba      	ldr	r2, [r7, #8]
   8299a:	651a      	str	r2, [r3, #80]	; 0x50
   8299c:	e002      	b.n	829a4 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8299e:	68fb      	ldr	r3, [r7, #12]
   829a0:	68ba      	ldr	r2, [r7, #8]
   829a2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   829a4:	687b      	ldr	r3, [r7, #4]
   829a6:	2b00      	cmp	r3, #0
   829a8:	d003      	beq.n	829b2 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   829aa:	68fb      	ldr	r3, [r7, #12]
   829ac:	68ba      	ldr	r2, [r7, #8]
   829ae:	631a      	str	r2, [r3, #48]	; 0x30
   829b0:	e002      	b.n	829b8 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   829b2:	68fb      	ldr	r3, [r7, #12]
   829b4:	68ba      	ldr	r2, [r7, #8]
   829b6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   829b8:	68fb      	ldr	r3, [r7, #12]
   829ba:	68ba      	ldr	r2, [r7, #8]
   829bc:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   829be:	68fb      	ldr	r3, [r7, #12]
   829c0:	68ba      	ldr	r2, [r7, #8]
   829c2:	601a      	str	r2, [r3, #0]
}
   829c4:	bf00      	nop
   829c6:	3710      	adds	r7, #16
   829c8:	46bd      	mov	sp, r7
   829ca:	bd80      	pop	{r7, pc}
   829cc:	000829d5 	.word	0x000829d5
   829d0:	00082845 	.word	0x00082845

000829d4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   829d4:	b480      	push	{r7}
   829d6:	b083      	sub	sp, #12
   829d8:	af00      	add	r7, sp, #0
   829da:	6078      	str	r0, [r7, #4]
   829dc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   829de:	687b      	ldr	r3, [r7, #4]
   829e0:	683a      	ldr	r2, [r7, #0]
   829e2:	645a      	str	r2, [r3, #68]	; 0x44
}
   829e4:	bf00      	nop
   829e6:	370c      	adds	r7, #12
   829e8:	46bd      	mov	sp, r7
   829ea:	bc80      	pop	{r7}
   829ec:	4770      	bx	lr
   829ee:	bf00      	nop

000829f0 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   829f0:	b480      	push	{r7}
   829f2:	b083      	sub	sp, #12
   829f4:	af00      	add	r7, sp, #0
   829f6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   829f8:	687b      	ldr	r3, [r7, #4]
   829fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   829fc:	4618      	mov	r0, r3
   829fe:	370c      	adds	r7, #12
   82a00:	46bd      	mov	sp, r7
   82a02:	bc80      	pop	{r7}
   82a04:	4770      	bx	lr
   82a06:	bf00      	nop

00082a08 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   82a08:	b480      	push	{r7}
   82a0a:	b083      	sub	sp, #12
   82a0c:	af00      	add	r7, sp, #0
   82a0e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   82a10:	687b      	ldr	r3, [r7, #4]
   82a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   82a14:	4618      	mov	r0, r3
   82a16:	370c      	adds	r7, #12
   82a18:	46bd      	mov	sp, r7
   82a1a:	bc80      	pop	{r7}
   82a1c:	4770      	bx	lr
   82a1e:	bf00      	nop

00082a20 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82a20:	b590      	push	{r4, r7, lr}
   82a22:	b087      	sub	sp, #28
   82a24:	af02      	add	r7, sp, #8
   82a26:	6078      	str	r0, [r7, #4]
   82a28:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82a2a:	687b      	ldr	r3, [r7, #4]
   82a2c:	095b      	lsrs	r3, r3, #5
   82a2e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82a32:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82a36:	025b      	lsls	r3, r3, #9
   82a38:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82a3a:	683b      	ldr	r3, [r7, #0]
   82a3c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82a40:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82a44:	d046      	beq.n	82ad4 <pio_configure_pin+0xb4>
   82a46:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82a4a:	d806      	bhi.n	82a5a <pio_configure_pin+0x3a>
   82a4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82a50:	d00a      	beq.n	82a68 <pio_configure_pin+0x48>
   82a52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82a56:	d022      	beq.n	82a9e <pio_configure_pin+0x7e>
   82a58:	e070      	b.n	82b3c <pio_configure_pin+0x11c>
   82a5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82a5e:	d045      	beq.n	82aec <pio_configure_pin+0xcc>
   82a60:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82a64:	d042      	beq.n	82aec <pio_configure_pin+0xcc>
   82a66:	e069      	b.n	82b3c <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82a68:	687b      	ldr	r3, [r7, #4]
   82a6a:	f003 031f 	and.w	r3, r3, #31
   82a6e:	2201      	movs	r2, #1
   82a70:	fa02 f303 	lsl.w	r3, r2, r3
   82a74:	461a      	mov	r2, r3
   82a76:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82a7a:	68f8      	ldr	r0, [r7, #12]
   82a7c:	4b33      	ldr	r3, [pc, #204]	; (82b4c <pio_configure_pin+0x12c>)
   82a7e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82a80:	687b      	ldr	r3, [r7, #4]
   82a82:	f003 031f 	and.w	r3, r3, #31
   82a86:	2201      	movs	r2, #1
   82a88:	fa02 f303 	lsl.w	r3, r2, r3
   82a8c:	4619      	mov	r1, r3
   82a8e:	683b      	ldr	r3, [r7, #0]
   82a90:	f003 0301 	and.w	r3, r3, #1
   82a94:	461a      	mov	r2, r3
   82a96:	68f8      	ldr	r0, [r7, #12]
   82a98:	4b2d      	ldr	r3, [pc, #180]	; (82b50 <pio_configure_pin+0x130>)
   82a9a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82a9c:	e050      	b.n	82b40 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82a9e:	687b      	ldr	r3, [r7, #4]
   82aa0:	f003 031f 	and.w	r3, r3, #31
   82aa4:	2201      	movs	r2, #1
   82aa6:	fa02 f303 	lsl.w	r3, r2, r3
   82aaa:	461a      	mov	r2, r3
   82aac:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82ab0:	68f8      	ldr	r0, [r7, #12]
   82ab2:	4b26      	ldr	r3, [pc, #152]	; (82b4c <pio_configure_pin+0x12c>)
   82ab4:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82ab6:	687b      	ldr	r3, [r7, #4]
   82ab8:	f003 031f 	and.w	r3, r3, #31
   82abc:	2201      	movs	r2, #1
   82abe:	fa02 f303 	lsl.w	r3, r2, r3
   82ac2:	4619      	mov	r1, r3
   82ac4:	683b      	ldr	r3, [r7, #0]
   82ac6:	f003 0301 	and.w	r3, r3, #1
   82aca:	461a      	mov	r2, r3
   82acc:	68f8      	ldr	r0, [r7, #12]
   82ace:	4b20      	ldr	r3, [pc, #128]	; (82b50 <pio_configure_pin+0x130>)
   82ad0:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82ad2:	e035      	b.n	82b40 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82ad4:	687b      	ldr	r3, [r7, #4]
   82ad6:	f003 031f 	and.w	r3, r3, #31
   82ada:	2201      	movs	r2, #1
   82adc:	fa02 f303 	lsl.w	r3, r2, r3
   82ae0:	683a      	ldr	r2, [r7, #0]
   82ae2:	4619      	mov	r1, r3
   82ae4:	68f8      	ldr	r0, [r7, #12]
   82ae6:	4b1b      	ldr	r3, [pc, #108]	; (82b54 <pio_configure_pin+0x134>)
   82ae8:	4798      	blx	r3
		break;
   82aea:	e029      	b.n	82b40 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82aec:	687b      	ldr	r3, [r7, #4]
   82aee:	f003 031f 	and.w	r3, r3, #31
   82af2:	2201      	movs	r2, #1
   82af4:	fa02 f303 	lsl.w	r3, r2, r3
   82af8:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82afa:	683b      	ldr	r3, [r7, #0]
   82afc:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82b00:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82b04:	bf0c      	ite	eq
   82b06:	2301      	moveq	r3, #1
   82b08:	2300      	movne	r3, #0
   82b0a:	b2db      	uxtb	r3, r3
   82b0c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82b0e:	683b      	ldr	r3, [r7, #0]
   82b10:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82b14:	2b00      	cmp	r3, #0
   82b16:	bf14      	ite	ne
   82b18:	2301      	movne	r3, #1
   82b1a:	2300      	moveq	r3, #0
   82b1c:	b2db      	uxtb	r3, r3
   82b1e:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   82b20:	683b      	ldr	r3, [r7, #0]
   82b22:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82b26:	2b00      	cmp	r3, #0
   82b28:	bf14      	ite	ne
   82b2a:	2301      	movne	r3, #1
   82b2c:	2300      	moveq	r3, #0
   82b2e:	b2db      	uxtb	r3, r3
   82b30:	9300      	str	r3, [sp, #0]
   82b32:	4603      	mov	r3, r0
   82b34:	68f8      	ldr	r0, [r7, #12]
   82b36:	4c08      	ldr	r4, [pc, #32]	; (82b58 <pio_configure_pin+0x138>)
   82b38:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82b3a:	e001      	b.n	82b40 <pio_configure_pin+0x120>

	default:
		return 0;
   82b3c:	2300      	movs	r3, #0
   82b3e:	e000      	b.n	82b42 <pio_configure_pin+0x122>
	}

	return 1;
   82b40:	2301      	movs	r3, #1
}
   82b42:	4618      	mov	r0, r3
   82b44:	3714      	adds	r7, #20
   82b46:	46bd      	mov	sp, r7
   82b48:	bd90      	pop	{r4, r7, pc}
   82b4a:	bf00      	nop
   82b4c:	00082871 	.word	0x00082871
   82b50:	00082845 	.word	0x00082845
   82b54:	000828f1 	.word	0x000828f1
   82b58:	00082971 	.word	0x00082971

00082b5c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82b5c:	b590      	push	{r4, r7, lr}
   82b5e:	b087      	sub	sp, #28
   82b60:	af02      	add	r7, sp, #8
   82b62:	60f8      	str	r0, [r7, #12]
   82b64:	60b9      	str	r1, [r7, #8]
   82b66:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82b68:	687b      	ldr	r3, [r7, #4]
   82b6a:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82b6e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82b72:	d02e      	beq.n	82bd2 <pio_configure_pin_group+0x76>
   82b74:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82b78:	d806      	bhi.n	82b88 <pio_configure_pin_group+0x2c>
   82b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82b7e:	d00a      	beq.n	82b96 <pio_configure_pin_group+0x3a>
   82b80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82b84:	d016      	beq.n	82bb4 <pio_configure_pin_group+0x58>
   82b86:	e04c      	b.n	82c22 <pio_configure_pin_group+0xc6>
   82b88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82b8c:	d027      	beq.n	82bde <pio_configure_pin_group+0x82>
   82b8e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82b92:	d024      	beq.n	82bde <pio_configure_pin_group+0x82>
   82b94:	e045      	b.n	82c22 <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82b96:	68ba      	ldr	r2, [r7, #8]
   82b98:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82b9c:	68f8      	ldr	r0, [r7, #12]
   82b9e:	4b24      	ldr	r3, [pc, #144]	; (82c30 <pio_configure_pin_group+0xd4>)
   82ba0:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82ba2:	687b      	ldr	r3, [r7, #4]
   82ba4:	f003 0301 	and.w	r3, r3, #1
   82ba8:	461a      	mov	r2, r3
   82baa:	68b9      	ldr	r1, [r7, #8]
   82bac:	68f8      	ldr	r0, [r7, #12]
   82bae:	4b21      	ldr	r3, [pc, #132]	; (82c34 <pio_configure_pin_group+0xd8>)
   82bb0:	4798      	blx	r3
		break;
   82bb2:	e038      	b.n	82c26 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82bb4:	68ba      	ldr	r2, [r7, #8]
   82bb6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82bba:	68f8      	ldr	r0, [r7, #12]
   82bbc:	4b1c      	ldr	r3, [pc, #112]	; (82c30 <pio_configure_pin_group+0xd4>)
   82bbe:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82bc0:	687b      	ldr	r3, [r7, #4]
   82bc2:	f003 0301 	and.w	r3, r3, #1
   82bc6:	461a      	mov	r2, r3
   82bc8:	68b9      	ldr	r1, [r7, #8]
   82bca:	68f8      	ldr	r0, [r7, #12]
   82bcc:	4b19      	ldr	r3, [pc, #100]	; (82c34 <pio_configure_pin_group+0xd8>)
   82bce:	4798      	blx	r3
		break;
   82bd0:	e029      	b.n	82c26 <pio_configure_pin_group+0xca>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82bd2:	687a      	ldr	r2, [r7, #4]
   82bd4:	68b9      	ldr	r1, [r7, #8]
   82bd6:	68f8      	ldr	r0, [r7, #12]
   82bd8:	4b17      	ldr	r3, [pc, #92]	; (82c38 <pio_configure_pin_group+0xdc>)
   82bda:	4798      	blx	r3
		break;
   82bdc:	e023      	b.n	82c26 <pio_configure_pin_group+0xca>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82bde:	687b      	ldr	r3, [r7, #4]
   82be0:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82be4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82be8:	bf0c      	ite	eq
   82bea:	2301      	moveq	r3, #1
   82bec:	2300      	movne	r3, #0
   82bee:	b2db      	uxtb	r3, r3
   82bf0:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82bf2:	687b      	ldr	r3, [r7, #4]
   82bf4:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82bf8:	2b00      	cmp	r3, #0
   82bfa:	bf14      	ite	ne
   82bfc:	2301      	movne	r3, #1
   82bfe:	2300      	moveq	r3, #0
   82c00:	b2db      	uxtb	r3, r3
   82c02:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   82c04:	687b      	ldr	r3, [r7, #4]
   82c06:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82c0a:	2b00      	cmp	r3, #0
   82c0c:	bf14      	ite	ne
   82c0e:	2301      	movne	r3, #1
   82c10:	2300      	moveq	r3, #0
   82c12:	b2db      	uxtb	r3, r3
   82c14:	9300      	str	r3, [sp, #0]
   82c16:	460b      	mov	r3, r1
   82c18:	68b9      	ldr	r1, [r7, #8]
   82c1a:	68f8      	ldr	r0, [r7, #12]
   82c1c:	4c07      	ldr	r4, [pc, #28]	; (82c3c <pio_configure_pin_group+0xe0>)
   82c1e:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82c20:	e001      	b.n	82c26 <pio_configure_pin_group+0xca>

	default:
		return 0;
   82c22:	2300      	movs	r3, #0
   82c24:	e000      	b.n	82c28 <pio_configure_pin_group+0xcc>
	}

	return 1;
   82c26:	2301      	movs	r3, #1
}
   82c28:	4618      	mov	r0, r3
   82c2a:	3714      	adds	r7, #20
   82c2c:	46bd      	mov	sp, r7
   82c2e:	bd90      	pop	{r4, r7, pc}
   82c30:	00082871 	.word	0x00082871
   82c34:	00082845 	.word	0x00082845
   82c38:	000828f1 	.word	0x000828f1
   82c3c:	00082971 	.word	0x00082971

00082c40 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82c40:	b580      	push	{r7, lr}
   82c42:	b084      	sub	sp, #16
   82c44:	af00      	add	r7, sp, #0
   82c46:	6078      	str	r0, [r7, #4]
   82c48:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82c4a:	6878      	ldr	r0, [r7, #4]
   82c4c:	4b24      	ldr	r3, [pc, #144]	; (82ce0 <pio_handler_process+0xa0>)
   82c4e:	4798      	blx	r3
   82c50:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   82c52:	6878      	ldr	r0, [r7, #4]
   82c54:	4b23      	ldr	r3, [pc, #140]	; (82ce4 <pio_handler_process+0xa4>)
   82c56:	4798      	blx	r3
   82c58:	4602      	mov	r2, r0
   82c5a:	68fb      	ldr	r3, [r7, #12]
   82c5c:	4013      	ands	r3, r2
   82c5e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   82c60:	68fb      	ldr	r3, [r7, #12]
   82c62:	2b00      	cmp	r3, #0
   82c64:	d037      	beq.n	82cd6 <pio_handler_process+0x96>
		/* Find triggering source */
		i = 0;
   82c66:	2300      	movs	r3, #0
   82c68:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   82c6a:	e031      	b.n	82cd0 <pio_handler_process+0x90>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82c6c:	4a1e      	ldr	r2, [pc, #120]	; (82ce8 <pio_handler_process+0xa8>)
   82c6e:	68bb      	ldr	r3, [r7, #8]
   82c70:	011b      	lsls	r3, r3, #4
   82c72:	4413      	add	r3, r2
   82c74:	681a      	ldr	r2, [r3, #0]
   82c76:	683b      	ldr	r3, [r7, #0]
   82c78:	429a      	cmp	r2, r3
   82c7a:	d126      	bne.n	82cca <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82c7c:	4a1a      	ldr	r2, [pc, #104]	; (82ce8 <pio_handler_process+0xa8>)
   82c7e:	68bb      	ldr	r3, [r7, #8]
   82c80:	011b      	lsls	r3, r3, #4
   82c82:	4413      	add	r3, r2
   82c84:	3304      	adds	r3, #4
   82c86:	681a      	ldr	r2, [r3, #0]
   82c88:	68fb      	ldr	r3, [r7, #12]
   82c8a:	4013      	ands	r3, r2
   82c8c:	2b00      	cmp	r3, #0
   82c8e:	d01c      	beq.n	82cca <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82c90:	4a15      	ldr	r2, [pc, #84]	; (82ce8 <pio_handler_process+0xa8>)
   82c92:	68bb      	ldr	r3, [r7, #8]
   82c94:	011b      	lsls	r3, r3, #4
   82c96:	4413      	add	r3, r2
   82c98:	330c      	adds	r3, #12
   82c9a:	681b      	ldr	r3, [r3, #0]
   82c9c:	4912      	ldr	r1, [pc, #72]	; (82ce8 <pio_handler_process+0xa8>)
   82c9e:	68ba      	ldr	r2, [r7, #8]
   82ca0:	0112      	lsls	r2, r2, #4
   82ca2:	440a      	add	r2, r1
   82ca4:	6810      	ldr	r0, [r2, #0]
   82ca6:	4910      	ldr	r1, [pc, #64]	; (82ce8 <pio_handler_process+0xa8>)
   82ca8:	68ba      	ldr	r2, [r7, #8]
   82caa:	0112      	lsls	r2, r2, #4
   82cac:	440a      	add	r2, r1
   82cae:	3204      	adds	r2, #4
   82cb0:	6812      	ldr	r2, [r2, #0]
   82cb2:	4611      	mov	r1, r2
   82cb4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82cb6:	4a0c      	ldr	r2, [pc, #48]	; (82ce8 <pio_handler_process+0xa8>)
   82cb8:	68bb      	ldr	r3, [r7, #8]
   82cba:	011b      	lsls	r3, r3, #4
   82cbc:	4413      	add	r3, r2
   82cbe:	3304      	adds	r3, #4
   82cc0:	681b      	ldr	r3, [r3, #0]
   82cc2:	43db      	mvns	r3, r3
   82cc4:	68fa      	ldr	r2, [r7, #12]
   82cc6:	4013      	ands	r3, r2
   82cc8:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   82cca:	68bb      	ldr	r3, [r7, #8]
   82ccc:	3301      	adds	r3, #1
   82cce:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82cd0:	68fb      	ldr	r3, [r7, #12]
   82cd2:	2b00      	cmp	r3, #0
   82cd4:	d1ca      	bne.n	82c6c <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   82cd6:	bf00      	nop
   82cd8:	3710      	adds	r7, #16
   82cda:	46bd      	mov	sp, r7
   82cdc:	bd80      	pop	{r7, pc}
   82cde:	bf00      	nop
   82ce0:	000829f1 	.word	0x000829f1
   82ce4:	00082a09 	.word	0x00082a09
   82ce8:	20070d10 	.word	0x20070d10

00082cec <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82cec:	b580      	push	{r7, lr}
   82cee:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   82cf0:	210b      	movs	r1, #11
   82cf2:	4802      	ldr	r0, [pc, #8]	; (82cfc <PIOA_Handler+0x10>)
   82cf4:	4b02      	ldr	r3, [pc, #8]	; (82d00 <PIOA_Handler+0x14>)
   82cf6:	4798      	blx	r3
}
   82cf8:	bf00      	nop
   82cfa:	bd80      	pop	{r7, pc}
   82cfc:	400e0e00 	.word	0x400e0e00
   82d00:	00082c41 	.word	0x00082c41

00082d04 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82d04:	b580      	push	{r7, lr}
   82d06:	af00      	add	r7, sp, #0
	//PIOB_Handler_interrupt(PIOB,25);
    pio_handler_process(PIOB, ID_PIOB);
   82d08:	210c      	movs	r1, #12
   82d0a:	4802      	ldr	r0, [pc, #8]	; (82d14 <PIOB_Handler+0x10>)
   82d0c:	4b02      	ldr	r3, [pc, #8]	; (82d18 <PIOB_Handler+0x14>)
   82d0e:	4798      	blx	r3
}
   82d10:	bf00      	nop
   82d12:	bd80      	pop	{r7, pc}
   82d14:	400e1000 	.word	0x400e1000
   82d18:	00082c41 	.word	0x00082c41

00082d1c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82d1c:	b580      	push	{r7, lr}
   82d1e:	af00      	add	r7, sp, #0
	//PIOC_Handler_interrupt(PIOC);
	pio_handler_process(PIOC, ID_PIOC);
   82d20:	210d      	movs	r1, #13
   82d22:	4802      	ldr	r0, [pc, #8]	; (82d2c <PIOC_Handler+0x10>)
   82d24:	4b02      	ldr	r3, [pc, #8]	; (82d30 <PIOC_Handler+0x14>)
   82d26:	4798      	blx	r3
}
   82d28:	bf00      	nop
   82d2a:	bd80      	pop	{r7, pc}
   82d2c:	400e1200 	.word	0x400e1200
   82d30:	00082c41 	.word	0x00082c41

00082d34 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82d34:	b580      	push	{r7, lr}
   82d36:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   82d38:	210e      	movs	r1, #14
   82d3a:	4802      	ldr	r0, [pc, #8]	; (82d44 <PIOD_Handler+0x10>)
   82d3c:	4b02      	ldr	r3, [pc, #8]	; (82d48 <PIOD_Handler+0x14>)
   82d3e:	4798      	blx	r3
}
   82d40:	bf00      	nop
   82d42:	bd80      	pop	{r7, pc}
   82d44:	400e1400 	.word	0x400e1400
   82d48:	00082c41 	.word	0x00082c41

00082d4c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   82d4c:	b480      	push	{r7}
   82d4e:	b085      	sub	sp, #20
   82d50:	af00      	add	r7, sp, #0
   82d52:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82d54:	491c      	ldr	r1, [pc, #112]	; (82dc8 <pmc_switch_mck_to_pllack+0x7c>)
   82d56:	4b1c      	ldr	r3, [pc, #112]	; (82dc8 <pmc_switch_mck_to_pllack+0x7c>)
   82d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82d5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   82d5e:	687b      	ldr	r3, [r7, #4]
   82d60:	4313      	orrs	r3, r2
   82d62:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82d68:	60fb      	str	r3, [r7, #12]
   82d6a:	e007      	b.n	82d7c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82d6c:	68fb      	ldr	r3, [r7, #12]
   82d6e:	2b00      	cmp	r3, #0
   82d70:	d101      	bne.n	82d76 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   82d72:	2301      	movs	r3, #1
   82d74:	e023      	b.n	82dbe <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   82d76:	68fb      	ldr	r3, [r7, #12]
   82d78:	3b01      	subs	r3, #1
   82d7a:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82d7c:	4b12      	ldr	r3, [pc, #72]	; (82dc8 <pmc_switch_mck_to_pllack+0x7c>)
   82d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82d80:	f003 0308 	and.w	r3, r3, #8
   82d84:	2b00      	cmp	r3, #0
   82d86:	d0f1      	beq.n	82d6c <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82d88:	4a0f      	ldr	r2, [pc, #60]	; (82dc8 <pmc_switch_mck_to_pllack+0x7c>)
   82d8a:	4b0f      	ldr	r3, [pc, #60]	; (82dc8 <pmc_switch_mck_to_pllack+0x7c>)
   82d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82d8e:	f023 0303 	bic.w	r3, r3, #3
   82d92:	f043 0302 	orr.w	r3, r3, #2
   82d96:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82d98:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82d9c:	60fb      	str	r3, [r7, #12]
   82d9e:	e007      	b.n	82db0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82da0:	68fb      	ldr	r3, [r7, #12]
   82da2:	2b00      	cmp	r3, #0
   82da4:	d101      	bne.n	82daa <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   82da6:	2301      	movs	r3, #1
   82da8:	e009      	b.n	82dbe <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   82daa:	68fb      	ldr	r3, [r7, #12]
   82dac:	3b01      	subs	r3, #1
   82dae:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82db0:	4b05      	ldr	r3, [pc, #20]	; (82dc8 <pmc_switch_mck_to_pllack+0x7c>)
   82db2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82db4:	f003 0308 	and.w	r3, r3, #8
   82db8:	2b00      	cmp	r3, #0
   82dba:	d0f1      	beq.n	82da0 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   82dbc:	2300      	movs	r3, #0
}
   82dbe:	4618      	mov	r0, r3
   82dc0:	3714      	adds	r7, #20
   82dc2:	46bd      	mov	sp, r7
   82dc4:	bc80      	pop	{r7}
   82dc6:	4770      	bx	lr
   82dc8:	400e0600 	.word	0x400e0600

00082dcc <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   82dcc:	b480      	push	{r7}
   82dce:	b083      	sub	sp, #12
   82dd0:	af00      	add	r7, sp, #0
   82dd2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   82dd4:	687b      	ldr	r3, [r7, #4]
   82dd6:	2b01      	cmp	r3, #1
   82dd8:	d107      	bne.n	82dea <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   82dda:	4a08      	ldr	r2, [pc, #32]	; (82dfc <pmc_switch_sclk_to_32kxtal+0x30>)
   82ddc:	4b07      	ldr	r3, [pc, #28]	; (82dfc <pmc_switch_sclk_to_32kxtal+0x30>)
   82dde:	689b      	ldr	r3, [r3, #8]
   82de0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82de4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82de8:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   82dea:	4b04      	ldr	r3, [pc, #16]	; (82dfc <pmc_switch_sclk_to_32kxtal+0x30>)
   82dec:	4a04      	ldr	r2, [pc, #16]	; (82e00 <pmc_switch_sclk_to_32kxtal+0x34>)
   82dee:	601a      	str	r2, [r3, #0]
}
   82df0:	bf00      	nop
   82df2:	370c      	adds	r7, #12
   82df4:	46bd      	mov	sp, r7
   82df6:	bc80      	pop	{r7}
   82df8:	4770      	bx	lr
   82dfa:	bf00      	nop
   82dfc:	400e1a10 	.word	0x400e1a10
   82e00:	a5000008 	.word	0xa5000008

00082e04 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   82e04:	b480      	push	{r7}
   82e06:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   82e08:	4b09      	ldr	r3, [pc, #36]	; (82e30 <pmc_osc_is_ready_32kxtal+0x2c>)
   82e0a:	695b      	ldr	r3, [r3, #20]
   82e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   82e10:	2b00      	cmp	r3, #0
   82e12:	d007      	beq.n	82e24 <pmc_osc_is_ready_32kxtal+0x20>
   82e14:	4b07      	ldr	r3, [pc, #28]	; (82e34 <pmc_osc_is_ready_32kxtal+0x30>)
   82e16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82e1c:	2b00      	cmp	r3, #0
   82e1e:	d001      	beq.n	82e24 <pmc_osc_is_ready_32kxtal+0x20>
   82e20:	2301      	movs	r3, #1
   82e22:	e000      	b.n	82e26 <pmc_osc_is_ready_32kxtal+0x22>
   82e24:	2300      	movs	r3, #0
}
   82e26:	4618      	mov	r0, r3
   82e28:	46bd      	mov	sp, r7
   82e2a:	bc80      	pop	{r7}
   82e2c:	4770      	bx	lr
   82e2e:	bf00      	nop
   82e30:	400e1a10 	.word	0x400e1a10
   82e34:	400e0600 	.word	0x400e0600

00082e38 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   82e38:	b480      	push	{r7}
   82e3a:	b085      	sub	sp, #20
   82e3c:	af00      	add	r7, sp, #0
   82e3e:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   82e40:	2300      	movs	r3, #0
   82e42:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   82e44:	4b21      	ldr	r3, [pc, #132]	; (82ecc <pmc_switch_mainck_to_fastrc+0x94>)
   82e46:	6a1b      	ldr	r3, [r3, #32]
   82e48:	f003 0301 	and.w	r3, r3, #1
   82e4c:	2b00      	cmp	r3, #0
   82e4e:	d00e      	beq.n	82e6e <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82e50:	491e      	ldr	r1, [pc, #120]	; (82ecc <pmc_switch_mainck_to_fastrc+0x94>)
   82e52:	4b1e      	ldr	r3, [pc, #120]	; (82ecc <pmc_switch_mainck_to_fastrc+0x94>)
   82e54:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   82e56:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82e5a:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   82e5e:	687a      	ldr	r2, [r7, #4]
   82e60:	4313      	orrs	r3, r2
   82e62:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82e66:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82e6a:	620b      	str	r3, [r1, #32]
   82e6c:	e00b      	b.n	82e86 <pmc_switch_mainck_to_fastrc+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   82e6e:	2301      	movs	r3, #1
   82e70:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82e72:	4916      	ldr	r1, [pc, #88]	; (82ecc <pmc_switch_mainck_to_fastrc+0x94>)
   82e74:	4b15      	ldr	r3, [pc, #84]	; (82ecc <pmc_switch_mainck_to_fastrc+0x94>)
   82e76:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
   82e78:	4b15      	ldr	r3, [pc, #84]	; (82ed0 <pmc_switch_mainck_to_fastrc+0x98>)
   82e7a:	4013      	ands	r3, r2
   82e7c:	687a      	ldr	r2, [r7, #4]
   82e7e:	431a      	orrs	r2, r3
   82e80:	4b14      	ldr	r3, [pc, #80]	; (82ed4 <pmc_switch_mainck_to_fastrc+0x9c>)
   82e82:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82e84:	620b      	str	r3, [r1, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82e86:	bf00      	nop
   82e88:	4b10      	ldr	r3, [pc, #64]	; (82ecc <pmc_switch_mainck_to_fastrc+0x94>)
   82e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82e90:	2b00      	cmp	r3, #0
   82e92:	d0f9      	beq.n	82e88 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   82e94:	4a0d      	ldr	r2, [pc, #52]	; (82ecc <pmc_switch_mainck_to_fastrc+0x94>)
   82e96:	4b0d      	ldr	r3, [pc, #52]	; (82ecc <pmc_switch_mainck_to_fastrc+0x94>)
   82e98:	6a1b      	ldr	r3, [r3, #32]
   82e9a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   82e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82ea2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82ea6:	6213      	str	r3, [r2, #32]
			PMC_CKGR_MOR_KEY_VALUE;

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   82ea8:	68fb      	ldr	r3, [r7, #12]
   82eaa:	2b00      	cmp	r3, #0
   82eac:	d009      	beq.n	82ec2 <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82eae:	4a07      	ldr	r2, [pc, #28]	; (82ecc <pmc_switch_mainck_to_fastrc+0x94>)
   82eb0:	4b06      	ldr	r3, [pc, #24]	; (82ecc <pmc_switch_mainck_to_fastrc+0x94>)
   82eb2:	6a1b      	ldr	r3, [r3, #32]
   82eb4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82eb8:	f023 0301 	bic.w	r3, r3, #1
   82ebc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82ec0:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   82ec2:	bf00      	nop
   82ec4:	3714      	adds	r7, #20
   82ec6:	46bd      	mov	sp, r7
   82ec8:	bc80      	pop	{r7}
   82eca:	4770      	bx	lr
   82ecc:	400e0600 	.word	0x400e0600
   82ed0:	ffc80086 	.word	0xffc80086
   82ed4:	0037ff09 	.word	0x0037ff09

00082ed8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   82ed8:	b480      	push	{r7}
   82eda:	b083      	sub	sp, #12
   82edc:	af00      	add	r7, sp, #0
   82ede:	6078      	str	r0, [r7, #4]
   82ee0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82ee2:	687b      	ldr	r3, [r7, #4]
   82ee4:	2b00      	cmp	r3, #0
   82ee6:	d008      	beq.n	82efa <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82ee8:	4916      	ldr	r1, [pc, #88]	; (82f44 <pmc_switch_mainck_to_xtal+0x6c>)
   82eea:	4b16      	ldr	r3, [pc, #88]	; (82f44 <pmc_switch_mainck_to_xtal+0x6c>)
   82eec:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   82eee:	4a16      	ldr	r2, [pc, #88]	; (82f48 <pmc_switch_mainck_to_xtal+0x70>)
   82ef0:	401a      	ands	r2, r3
   82ef2:	4b16      	ldr	r3, [pc, #88]	; (82f4c <pmc_switch_mainck_to_xtal+0x74>)
   82ef4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82ef6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
	}
}
   82ef8:	e01e      	b.n	82f38 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82efa:	4912      	ldr	r1, [pc, #72]	; (82f44 <pmc_switch_mainck_to_xtal+0x6c>)
   82efc:	4b11      	ldr	r3, [pc, #68]	; (82f44 <pmc_switch_mainck_to_xtal+0x6c>)
   82efe:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   82f00:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82f04:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82f08:	683a      	ldr	r2, [r7, #0]
   82f0a:	0212      	lsls	r2, r2, #8
   82f0c:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   82f0e:	4313      	orrs	r3, r2
   82f10:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82f14:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82f18:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82f1a:	bf00      	nop
   82f1c:	4b09      	ldr	r3, [pc, #36]	; (82f44 <pmc_switch_mainck_to_xtal+0x6c>)
   82f1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82f20:	f003 0301 	and.w	r3, r3, #1
   82f24:	2b00      	cmp	r3, #0
   82f26:	d0f9      	beq.n	82f1c <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   82f28:	4a06      	ldr	r2, [pc, #24]	; (82f44 <pmc_switch_mainck_to_xtal+0x6c>)
   82f2a:	4b06      	ldr	r3, [pc, #24]	; (82f44 <pmc_switch_mainck_to_xtal+0x6c>)
   82f2c:	6a1b      	ldr	r3, [r3, #32]
   82f2e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82f36:	6213      	str	r3, [r2, #32]
	}
}
   82f38:	bf00      	nop
   82f3a:	370c      	adds	r7, #12
   82f3c:	46bd      	mov	sp, r7
   82f3e:	bc80      	pop	{r7}
   82f40:	4770      	bx	lr
   82f42:	bf00      	nop
   82f44:	400e0600 	.word	0x400e0600
   82f48:	fec8fffc 	.word	0xfec8fffc
   82f4c:	01370002 	.word	0x01370002

00082f50 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   82f50:	b480      	push	{r7}
   82f52:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82f54:	4b03      	ldr	r3, [pc, #12]	; (82f64 <pmc_osc_is_ready_mainck+0x14>)
   82f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   82f5c:	4618      	mov	r0, r3
   82f5e:	46bd      	mov	sp, r7
   82f60:	bc80      	pop	{r7}
   82f62:	4770      	bx	lr
   82f64:	400e0600 	.word	0x400e0600

00082f68 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   82f68:	b480      	push	{r7}
   82f6a:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82f6c:	4b03      	ldr	r3, [pc, #12]	; (82f7c <pmc_disable_pllack+0x14>)
   82f6e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82f72:	629a      	str	r2, [r3, #40]	; 0x28
}
   82f74:	bf00      	nop
   82f76:	46bd      	mov	sp, r7
   82f78:	bc80      	pop	{r7}
   82f7a:	4770      	bx	lr
   82f7c:	400e0600 	.word	0x400e0600

00082f80 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   82f80:	b480      	push	{r7}
   82f82:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82f84:	4b03      	ldr	r3, [pc, #12]	; (82f94 <pmc_is_locked_pllack+0x14>)
   82f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82f88:	f003 0302 	and.w	r3, r3, #2
}
   82f8c:	4618      	mov	r0, r3
   82f8e:	46bd      	mov	sp, r7
   82f90:	bc80      	pop	{r7}
   82f92:	4770      	bx	lr
   82f94:	400e0600 	.word	0x400e0600

00082f98 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   82f98:	b480      	push	{r7}
   82f9a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   82f9c:	4b03      	ldr	r3, [pc, #12]	; (82fac <pmc_is_locked_upll+0x14>)
   82f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   82fa4:	4618      	mov	r0, r3
   82fa6:	46bd      	mov	sp, r7
   82fa8:	bc80      	pop	{r7}
   82faa:	4770      	bx	lr
   82fac:	400e0600 	.word	0x400e0600

00082fb0 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   82fb0:	b480      	push	{r7}
   82fb2:	b083      	sub	sp, #12
   82fb4:	af00      	add	r7, sp, #0
   82fb6:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82fb8:	687b      	ldr	r3, [r7, #4]
   82fba:	2b2c      	cmp	r3, #44	; 0x2c
   82fbc:	d901      	bls.n	82fc2 <pmc_enable_periph_clk+0x12>
		return 1;
   82fbe:	2301      	movs	r3, #1
   82fc0:	e02f      	b.n	83022 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   82fc2:	687b      	ldr	r3, [r7, #4]
   82fc4:	2b1f      	cmp	r3, #31
   82fc6:	d813      	bhi.n	82ff0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82fc8:	4b18      	ldr	r3, [pc, #96]	; (8302c <pmc_enable_periph_clk+0x7c>)
   82fca:	699a      	ldr	r2, [r3, #24]
   82fcc:	2101      	movs	r1, #1
   82fce:	687b      	ldr	r3, [r7, #4]
   82fd0:	fa01 f303 	lsl.w	r3, r1, r3
   82fd4:	401a      	ands	r2, r3
   82fd6:	2101      	movs	r1, #1
   82fd8:	687b      	ldr	r3, [r7, #4]
   82fda:	fa01 f303 	lsl.w	r3, r1, r3
   82fde:	429a      	cmp	r2, r3
   82fe0:	d01e      	beq.n	83020 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   82fe2:	4a12      	ldr	r2, [pc, #72]	; (8302c <pmc_enable_periph_clk+0x7c>)
   82fe4:	2101      	movs	r1, #1
   82fe6:	687b      	ldr	r3, [r7, #4]
   82fe8:	fa01 f303 	lsl.w	r3, r1, r3
   82fec:	6113      	str	r3, [r2, #16]
   82fee:	e017      	b.n	83020 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   82ff0:	687b      	ldr	r3, [r7, #4]
   82ff2:	3b20      	subs	r3, #32
   82ff4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82ff6:	4b0d      	ldr	r3, [pc, #52]	; (8302c <pmc_enable_periph_clk+0x7c>)
   82ff8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   82ffc:	2101      	movs	r1, #1
   82ffe:	687b      	ldr	r3, [r7, #4]
   83000:	fa01 f303 	lsl.w	r3, r1, r3
   83004:	401a      	ands	r2, r3
   83006:	2101      	movs	r1, #1
   83008:	687b      	ldr	r3, [r7, #4]
   8300a:	fa01 f303 	lsl.w	r3, r1, r3
   8300e:	429a      	cmp	r2, r3
   83010:	d006      	beq.n	83020 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   83012:	4a06      	ldr	r2, [pc, #24]	; (8302c <pmc_enable_periph_clk+0x7c>)
   83014:	2101      	movs	r1, #1
   83016:	687b      	ldr	r3, [r7, #4]
   83018:	fa01 f303 	lsl.w	r3, r1, r3
   8301c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   83020:	2300      	movs	r3, #0
}
   83022:	4618      	mov	r0, r3
   83024:	370c      	adds	r7, #12
   83026:	46bd      	mov	sp, r7
   83028:	bc80      	pop	{r7}
   8302a:	4770      	bx	lr
   8302c:	400e0600 	.word	0x400e0600

00083030 <pmc_set_writeprotect>:
 * \brief Enable or disable write protect of PMC registers.
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
   83030:	b480      	push	{r7}
   83032:	b083      	sub	sp, #12
   83034:	af00      	add	r7, sp, #0
   83036:	6078      	str	r0, [r7, #4]
	if (ul_enable) {
   83038:	687b      	ldr	r3, [r7, #4]
   8303a:	2b00      	cmp	r3, #0
   8303c:	d004      	beq.n	83048 <pmc_set_writeprotect+0x18>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
   8303e:	4b07      	ldr	r3, [pc, #28]	; (8305c <pmc_set_writeprotect+0x2c>)
   83040:	4a07      	ldr	r2, [pc, #28]	; (83060 <pmc_set_writeprotect+0x30>)
   83042:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
	}
}
   83046:	e003      	b.n	83050 <pmc_set_writeprotect+0x20>
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
   83048:	4b04      	ldr	r3, [pc, #16]	; (8305c <pmc_set_writeprotect+0x2c>)
   8304a:	4a06      	ldr	r2, [pc, #24]	; (83064 <pmc_set_writeprotect+0x34>)
   8304c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
   83050:	bf00      	nop
   83052:	370c      	adds	r7, #12
   83054:	46bd      	mov	sp, r7
   83056:	bc80      	pop	{r7}
   83058:	4770      	bx	lr
   8305a:	bf00      	nop
   8305c:	400e0600 	.word	0x400e0600
   83060:	504d4301 	.word	0x504d4301
   83064:	504d4300 	.word	0x504d4300

00083068 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   83068:	b480      	push	{r7}
   8306a:	af00      	add	r7, sp, #0
	while (1) {
	}
   8306c:	e7fe      	b.n	8306c <Dummy_Handler+0x4>
   8306e:	bf00      	nop

00083070 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   83070:	b580      	push	{r7, lr}
   83072:	b082      	sub	sp, #8
   83074:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   83076:	4b1e      	ldr	r3, [pc, #120]	; (830f0 <Reset_Handler+0x80>)
   83078:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   8307a:	4b1e      	ldr	r3, [pc, #120]	; (830f4 <Reset_Handler+0x84>)
   8307c:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   8307e:	687a      	ldr	r2, [r7, #4]
   83080:	683b      	ldr	r3, [r7, #0]
   83082:	429a      	cmp	r2, r3
   83084:	d00c      	beq.n	830a0 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   83086:	e007      	b.n	83098 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   83088:	683b      	ldr	r3, [r7, #0]
   8308a:	1d1a      	adds	r2, r3, #4
   8308c:	603a      	str	r2, [r7, #0]
   8308e:	687a      	ldr	r2, [r7, #4]
   83090:	1d11      	adds	r1, r2, #4
   83092:	6079      	str	r1, [r7, #4]
   83094:	6812      	ldr	r2, [r2, #0]
   83096:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   83098:	683b      	ldr	r3, [r7, #0]
   8309a:	4a17      	ldr	r2, [pc, #92]	; (830f8 <Reset_Handler+0x88>)
   8309c:	4293      	cmp	r3, r2
   8309e:	d3f3      	bcc.n	83088 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   830a0:	4b16      	ldr	r3, [pc, #88]	; (830fc <Reset_Handler+0x8c>)
   830a2:	603b      	str	r3, [r7, #0]
   830a4:	e004      	b.n	830b0 <Reset_Handler+0x40>
		*pDest++ = 0;
   830a6:	683b      	ldr	r3, [r7, #0]
   830a8:	1d1a      	adds	r2, r3, #4
   830aa:	603a      	str	r2, [r7, #0]
   830ac:	2200      	movs	r2, #0
   830ae:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   830b0:	683b      	ldr	r3, [r7, #0]
   830b2:	4a13      	ldr	r2, [pc, #76]	; (83100 <Reset_Handler+0x90>)
   830b4:	4293      	cmp	r3, r2
   830b6:	d3f6      	bcc.n	830a6 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   830b8:	4b12      	ldr	r3, [pc, #72]	; (83104 <Reset_Handler+0x94>)
   830ba:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   830bc:	4a12      	ldr	r2, [pc, #72]	; (83108 <Reset_Handler+0x98>)
   830be:	687b      	ldr	r3, [r7, #4]
   830c0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   830c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   830c8:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   830ca:	687b      	ldr	r3, [r7, #4]
   830cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   830d0:	d309      	bcc.n	830e6 <Reset_Handler+0x76>
   830d2:	687b      	ldr	r3, [r7, #4]
   830d4:	4a0d      	ldr	r2, [pc, #52]	; (8310c <Reset_Handler+0x9c>)
   830d6:	4293      	cmp	r3, r2
   830d8:	d805      	bhi.n	830e6 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   830da:	4a0b      	ldr	r2, [pc, #44]	; (83108 <Reset_Handler+0x98>)
   830dc:	4b0a      	ldr	r3, [pc, #40]	; (83108 <Reset_Handler+0x98>)
   830de:	689b      	ldr	r3, [r3, #8]
   830e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   830e4:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   830e6:	4b0a      	ldr	r3, [pc, #40]	; (83110 <Reset_Handler+0xa0>)
   830e8:	4798      	blx	r3

	/* Branch to main function */
	main();
   830ea:	4b0a      	ldr	r3, [pc, #40]	; (83114 <Reset_Handler+0xa4>)
   830ec:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   830ee:	e7fe      	b.n	830ee <Reset_Handler+0x7e>
   830f0:	000867ec 	.word	0x000867ec
   830f4:	20070000 	.word	0x20070000
   830f8:	20070c6c 	.word	0x20070c6c
   830fc:	20070c6c 	.word	0x20070c6c
   83100:	20071244 	.word	0x20071244
   83104:	00080000 	.word	0x00080000
   83108:	e000ed00 	.word	0xe000ed00
   8310c:	200fffff 	.word	0x200fffff
   83110:	000837a9 	.word	0x000837a9
   83114:	00081d5d 	.word	0x00081d5d

00083118 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   83118:	b480      	push	{r7}
   8311a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8311c:	4b57      	ldr	r3, [pc, #348]	; (8327c <SystemCoreClockUpdate+0x164>)
   8311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83120:	f003 0303 	and.w	r3, r3, #3
   83124:	2b03      	cmp	r3, #3
   83126:	f200 808a 	bhi.w	8323e <SystemCoreClockUpdate+0x126>
   8312a:	a201      	add	r2, pc, #4	; (adr r2, 83130 <SystemCoreClockUpdate+0x18>)
   8312c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83130:	00083141 	.word	0x00083141
   83134:	00083161 	.word	0x00083161
   83138:	000831b1 	.word	0x000831b1
   8313c:	000831b1 	.word	0x000831b1
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83140:	4b4f      	ldr	r3, [pc, #316]	; (83280 <SystemCoreClockUpdate+0x168>)
   83142:	695b      	ldr	r3, [r3, #20]
   83144:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83148:	2b00      	cmp	r3, #0
   8314a:	d004      	beq.n	83156 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8314c:	4b4d      	ldr	r3, [pc, #308]	; (83284 <SystemCoreClockUpdate+0x16c>)
   8314e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83152:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   83154:	e073      	b.n	8323e <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   83156:	4b4b      	ldr	r3, [pc, #300]	; (83284 <SystemCoreClockUpdate+0x16c>)
   83158:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   8315c:	601a      	str	r2, [r3, #0]
		}
		break;
   8315e:	e06e      	b.n	8323e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83160:	4b46      	ldr	r3, [pc, #280]	; (8327c <SystemCoreClockUpdate+0x164>)
   83162:	6a1b      	ldr	r3, [r3, #32]
   83164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83168:	2b00      	cmp	r3, #0
   8316a:	d003      	beq.n	83174 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8316c:	4b45      	ldr	r3, [pc, #276]	; (83284 <SystemCoreClockUpdate+0x16c>)
   8316e:	4a46      	ldr	r2, [pc, #280]	; (83288 <SystemCoreClockUpdate+0x170>)
   83170:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   83172:	e064      	b.n	8323e <SystemCoreClockUpdate+0x126>
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83174:	4b43      	ldr	r3, [pc, #268]	; (83284 <SystemCoreClockUpdate+0x16c>)
   83176:	4a45      	ldr	r2, [pc, #276]	; (8328c <SystemCoreClockUpdate+0x174>)
   83178:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8317a:	4b40      	ldr	r3, [pc, #256]	; (8327c <SystemCoreClockUpdate+0x164>)
   8317c:	6a1b      	ldr	r3, [r3, #32]
   8317e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83182:	2b10      	cmp	r3, #16
   83184:	d004      	beq.n	83190 <SystemCoreClockUpdate+0x78>
   83186:	2b20      	cmp	r3, #32
   83188:	d008      	beq.n	8319c <SystemCoreClockUpdate+0x84>
   8318a:	2b00      	cmp	r3, #0
   8318c:	d00e      	beq.n	831ac <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   8318e:	e00e      	b.n	831ae <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83190:	4b3c      	ldr	r3, [pc, #240]	; (83284 <SystemCoreClockUpdate+0x16c>)
   83192:	681b      	ldr	r3, [r3, #0]
   83194:	005b      	lsls	r3, r3, #1
   83196:	4a3b      	ldr	r2, [pc, #236]	; (83284 <SystemCoreClockUpdate+0x16c>)
   83198:	6013      	str	r3, [r2, #0]
				break;
   8319a:	e008      	b.n	831ae <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8319c:	4b39      	ldr	r3, [pc, #228]	; (83284 <SystemCoreClockUpdate+0x16c>)
   8319e:	681a      	ldr	r2, [r3, #0]
   831a0:	4613      	mov	r3, r2
   831a2:	005b      	lsls	r3, r3, #1
   831a4:	4413      	add	r3, r2
   831a6:	4a37      	ldr	r2, [pc, #220]	; (83284 <SystemCoreClockUpdate+0x16c>)
   831a8:	6013      	str	r3, [r2, #0]
				break;
   831aa:	e000      	b.n	831ae <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   831ac:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   831ae:	e046      	b.n	8323e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   831b0:	4b32      	ldr	r3, [pc, #200]	; (8327c <SystemCoreClockUpdate+0x164>)
   831b2:	6a1b      	ldr	r3, [r3, #32]
   831b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   831b8:	2b00      	cmp	r3, #0
   831ba:	d003      	beq.n	831c4 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   831bc:	4b31      	ldr	r3, [pc, #196]	; (83284 <SystemCoreClockUpdate+0x16c>)
   831be:	4a32      	ldr	r2, [pc, #200]	; (83288 <SystemCoreClockUpdate+0x170>)
   831c0:	601a      	str	r2, [r3, #0]
   831c2:	e01c      	b.n	831fe <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   831c4:	4b2f      	ldr	r3, [pc, #188]	; (83284 <SystemCoreClockUpdate+0x16c>)
   831c6:	4a31      	ldr	r2, [pc, #196]	; (8328c <SystemCoreClockUpdate+0x174>)
   831c8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   831ca:	4b2c      	ldr	r3, [pc, #176]	; (8327c <SystemCoreClockUpdate+0x164>)
   831cc:	6a1b      	ldr	r3, [r3, #32]
   831ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
   831d2:	2b10      	cmp	r3, #16
   831d4:	d004      	beq.n	831e0 <SystemCoreClockUpdate+0xc8>
   831d6:	2b20      	cmp	r3, #32
   831d8:	d008      	beq.n	831ec <SystemCoreClockUpdate+0xd4>
   831da:	2b00      	cmp	r3, #0
   831dc:	d00e      	beq.n	831fc <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   831de:	e00e      	b.n	831fe <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   831e0:	4b28      	ldr	r3, [pc, #160]	; (83284 <SystemCoreClockUpdate+0x16c>)
   831e2:	681b      	ldr	r3, [r3, #0]
   831e4:	005b      	lsls	r3, r3, #1
   831e6:	4a27      	ldr	r2, [pc, #156]	; (83284 <SystemCoreClockUpdate+0x16c>)
   831e8:	6013      	str	r3, [r2, #0]
				break;
   831ea:	e008      	b.n	831fe <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   831ec:	4b25      	ldr	r3, [pc, #148]	; (83284 <SystemCoreClockUpdate+0x16c>)
   831ee:	681a      	ldr	r2, [r3, #0]
   831f0:	4613      	mov	r3, r2
   831f2:	005b      	lsls	r3, r3, #1
   831f4:	4413      	add	r3, r2
   831f6:	4a23      	ldr	r2, [pc, #140]	; (83284 <SystemCoreClockUpdate+0x16c>)
   831f8:	6013      	str	r3, [r2, #0]
				break;
   831fa:	e000      	b.n	831fe <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   831fc:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   831fe:	4b1f      	ldr	r3, [pc, #124]	; (8327c <SystemCoreClockUpdate+0x164>)
   83200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83202:	f003 0303 	and.w	r3, r3, #3
   83206:	2b02      	cmp	r3, #2
   83208:	d115      	bne.n	83236 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8320a:	4b1c      	ldr	r3, [pc, #112]	; (8327c <SystemCoreClockUpdate+0x164>)
   8320c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   8320e:	4b20      	ldr	r3, [pc, #128]	; (83290 <SystemCoreClockUpdate+0x178>)
   83210:	4013      	ands	r3, r2
   83212:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   83214:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83216:	4a1b      	ldr	r2, [pc, #108]	; (83284 <SystemCoreClockUpdate+0x16c>)
   83218:	6812      	ldr	r2, [r2, #0]
   8321a:	fb02 f303 	mul.w	r3, r2, r3
   8321e:	4a19      	ldr	r2, [pc, #100]	; (83284 <SystemCoreClockUpdate+0x16c>)
   83220:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83222:	4b16      	ldr	r3, [pc, #88]	; (8327c <SystemCoreClockUpdate+0x164>)
   83224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   83226:	b2db      	uxtb	r3, r3
   83228:	4a16      	ldr	r2, [pc, #88]	; (83284 <SystemCoreClockUpdate+0x16c>)
   8322a:	6812      	ldr	r2, [r2, #0]
   8322c:	fbb2 f3f3 	udiv	r3, r2, r3
   83230:	4a14      	ldr	r2, [pc, #80]	; (83284 <SystemCoreClockUpdate+0x16c>)
   83232:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   83234:	e002      	b.n	8323c <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   83236:	4b13      	ldr	r3, [pc, #76]	; (83284 <SystemCoreClockUpdate+0x16c>)
   83238:	4a16      	ldr	r2, [pc, #88]	; (83294 <SystemCoreClockUpdate+0x17c>)
   8323a:	601a      	str	r2, [r3, #0]
		}
		break;
   8323c:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8323e:	4b0f      	ldr	r3, [pc, #60]	; (8327c <SystemCoreClockUpdate+0x164>)
   83240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83242:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83246:	2b70      	cmp	r3, #112	; 0x70
   83248:	d108      	bne.n	8325c <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   8324a:	4b0e      	ldr	r3, [pc, #56]	; (83284 <SystemCoreClockUpdate+0x16c>)
   8324c:	681b      	ldr	r3, [r3, #0]
   8324e:	4a12      	ldr	r2, [pc, #72]	; (83298 <SystemCoreClockUpdate+0x180>)
   83250:	fba2 2303 	umull	r2, r3, r2, r3
   83254:	085b      	lsrs	r3, r3, #1
   83256:	4a0b      	ldr	r2, [pc, #44]	; (83284 <SystemCoreClockUpdate+0x16c>)
   83258:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   8325a:	e00a      	b.n	83272 <SystemCoreClockUpdate+0x15a>
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8325c:	4b07      	ldr	r3, [pc, #28]	; (8327c <SystemCoreClockUpdate+0x164>)
   8325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83260:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83264:	091b      	lsrs	r3, r3, #4
   83266:	4a07      	ldr	r2, [pc, #28]	; (83284 <SystemCoreClockUpdate+0x16c>)
   83268:	6812      	ldr	r2, [r2, #0]
   8326a:	fa22 f303 	lsr.w	r3, r2, r3
   8326e:	4a05      	ldr	r2, [pc, #20]	; (83284 <SystemCoreClockUpdate+0x16c>)
   83270:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   83272:	bf00      	nop
   83274:	46bd      	mov	sp, r7
   83276:	bc80      	pop	{r7}
   83278:	4770      	bx	lr
   8327a:	bf00      	nop
   8327c:	400e0600 	.word	0x400e0600
   83280:	400e1a10 	.word	0x400e1a10
   83284:	20070404 	.word	0x20070404
   83288:	00b71b00 	.word	0x00b71b00
   8328c:	003d0900 	.word	0x003d0900
   83290:	07ff0000 	.word	0x07ff0000
   83294:	0e4e1c00 	.word	0x0e4e1c00
   83298:	aaaaaaab 	.word	0xaaaaaaab

0008329c <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   8329c:	b480      	push	{r7}
   8329e:	b083      	sub	sp, #12
   832a0:	af00      	add	r7, sp, #0
   832a2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   832a4:	687b      	ldr	r3, [r7, #4]
   832a6:	4a25      	ldr	r2, [pc, #148]	; (8333c <system_init_flash+0xa0>)
   832a8:	4293      	cmp	r3, r2
   832aa:	d806      	bhi.n	832ba <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   832ac:	4b24      	ldr	r3, [pc, #144]	; (83340 <system_init_flash+0xa4>)
   832ae:	2200      	movs	r2, #0
   832b0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   832b2:	4b24      	ldr	r3, [pc, #144]	; (83344 <system_init_flash+0xa8>)
   832b4:	2200      	movs	r2, #0
   832b6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   832b8:	e03b      	b.n	83332 <system_init_flash+0x96>
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   832ba:	687b      	ldr	r3, [r7, #4]
   832bc:	4a22      	ldr	r2, [pc, #136]	; (83348 <system_init_flash+0xac>)
   832be:	4293      	cmp	r3, r2
   832c0:	d808      	bhi.n	832d4 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   832c2:	4b1f      	ldr	r3, [pc, #124]	; (83340 <system_init_flash+0xa4>)
   832c4:	f44f 7280 	mov.w	r2, #256	; 0x100
   832c8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   832ca:	4b1e      	ldr	r3, [pc, #120]	; (83344 <system_init_flash+0xa8>)
   832cc:	f44f 7280 	mov.w	r2, #256	; 0x100
   832d0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   832d2:	e02e      	b.n	83332 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   832d4:	687b      	ldr	r3, [r7, #4]
   832d6:	4a1d      	ldr	r2, [pc, #116]	; (8334c <system_init_flash+0xb0>)
   832d8:	4293      	cmp	r3, r2
   832da:	d808      	bhi.n	832ee <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   832dc:	4b18      	ldr	r3, [pc, #96]	; (83340 <system_init_flash+0xa4>)
   832de:	f44f 7200 	mov.w	r2, #512	; 0x200
   832e2:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   832e4:	4b17      	ldr	r3, [pc, #92]	; (83344 <system_init_flash+0xa8>)
   832e6:	f44f 7200 	mov.w	r2, #512	; 0x200
   832ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   832ec:	e021      	b.n	83332 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   832ee:	687b      	ldr	r3, [r7, #4]
   832f0:	4a17      	ldr	r2, [pc, #92]	; (83350 <system_init_flash+0xb4>)
   832f2:	4293      	cmp	r3, r2
   832f4:	d808      	bhi.n	83308 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   832f6:	4b12      	ldr	r3, [pc, #72]	; (83340 <system_init_flash+0xa4>)
   832f8:	f44f 7240 	mov.w	r2, #768	; 0x300
   832fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   832fe:	4b11      	ldr	r3, [pc, #68]	; (83344 <system_init_flash+0xa8>)
   83300:	f44f 7240 	mov.w	r2, #768	; 0x300
   83304:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   83306:	e014      	b.n	83332 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   83308:	687b      	ldr	r3, [r7, #4]
   8330a:	4a12      	ldr	r2, [pc, #72]	; (83354 <system_init_flash+0xb8>)
   8330c:	4293      	cmp	r3, r2
   8330e:	d808      	bhi.n	83322 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   83310:	4b0b      	ldr	r3, [pc, #44]	; (83340 <system_init_flash+0xa4>)
   83312:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83316:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
   83318:	4b0a      	ldr	r3, [pc, #40]	; (83344 <system_init_flash+0xa8>)
   8331a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8331e:	601a      	str	r2, [r3, #0]
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   83320:	e007      	b.n	83332 <system_init_flash+0x96>
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   83322:	4b07      	ldr	r3, [pc, #28]	; (83340 <system_init_flash+0xa4>)
   83324:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   83328:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   8332a:	4b06      	ldr	r3, [pc, #24]	; (83344 <system_init_flash+0xa8>)
   8332c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   83330:	601a      	str	r2, [r3, #0]
	}
}
   83332:	bf00      	nop
   83334:	370c      	adds	r7, #12
   83336:	46bd      	mov	sp, r7
   83338:	bc80      	pop	{r7}
   8333a:	4770      	bx	lr
   8333c:	0121eabf 	.word	0x0121eabf
   83340:	400e0a00 	.word	0x400e0a00
   83344:	400e0c00 	.word	0x400e0c00
   83348:	02faf07f 	.word	0x02faf07f
   8334c:	03d08fff 	.word	0x03d08fff
   83350:	04c4b3ff 	.word	0x04c4b3ff
   83354:	055d4a7f 	.word	0x055d4a7f

00083358 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   83358:	b480      	push	{r7}
   8335a:	b085      	sub	sp, #20
   8335c:	af00      	add	r7, sp, #0
   8335e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   83360:	4b0a      	ldr	r3, [pc, #40]	; (8338c <_sbrk+0x34>)
   83362:	681b      	ldr	r3, [r3, #0]
   83364:	2b00      	cmp	r3, #0
   83366:	d102      	bne.n	8336e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   83368:	4b08      	ldr	r3, [pc, #32]	; (8338c <_sbrk+0x34>)
   8336a:	4a09      	ldr	r2, [pc, #36]	; (83390 <_sbrk+0x38>)
   8336c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8336e:	4b07      	ldr	r3, [pc, #28]	; (8338c <_sbrk+0x34>)
   83370:	681b      	ldr	r3, [r3, #0]
   83372:	60fb      	str	r3, [r7, #12]

	heap += incr;
   83374:	4b05      	ldr	r3, [pc, #20]	; (8338c <_sbrk+0x34>)
   83376:	681a      	ldr	r2, [r3, #0]
   83378:	687b      	ldr	r3, [r7, #4]
   8337a:	4413      	add	r3, r2
   8337c:	4a03      	ldr	r2, [pc, #12]	; (8338c <_sbrk+0x34>)
   8337e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   83380:	68fb      	ldr	r3, [r7, #12]
}
   83382:	4618      	mov	r0, r3
   83384:	3714      	adds	r7, #20
   83386:	46bd      	mov	sp, r7
   83388:	bc80      	pop	{r7}
   8338a:	4770      	bx	lr
   8338c:	20070d80 	.word	0x20070d80
   83390:	20073248 	.word	0x20073248

00083394 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   83394:	b480      	push	{r7}
   83396:	b083      	sub	sp, #12
   83398:	af00      	add	r7, sp, #0
   8339a:	6078      	str	r0, [r7, #4]
	return -1;
   8339c:	f04f 33ff 	mov.w	r3, #4294967295
}
   833a0:	4618      	mov	r0, r3
   833a2:	370c      	adds	r7, #12
   833a4:	46bd      	mov	sp, r7
   833a6:	bc80      	pop	{r7}
   833a8:	4770      	bx	lr
   833aa:	bf00      	nop

000833ac <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   833ac:	b480      	push	{r7}
   833ae:	b083      	sub	sp, #12
   833b0:	af00      	add	r7, sp, #0
   833b2:	6078      	str	r0, [r7, #4]
   833b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   833b6:	683b      	ldr	r3, [r7, #0]
   833b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   833bc:	605a      	str	r2, [r3, #4]

	return 0;
   833be:	2300      	movs	r3, #0
}
   833c0:	4618      	mov	r0, r3
   833c2:	370c      	adds	r7, #12
   833c4:	46bd      	mov	sp, r7
   833c6:	bc80      	pop	{r7}
   833c8:	4770      	bx	lr
   833ca:	bf00      	nop

000833cc <_isatty>:

extern int _isatty(int file)
{
   833cc:	b480      	push	{r7}
   833ce:	b083      	sub	sp, #12
   833d0:	af00      	add	r7, sp, #0
   833d2:	6078      	str	r0, [r7, #4]
	return 1;
   833d4:	2301      	movs	r3, #1
}
   833d6:	4618      	mov	r0, r3
   833d8:	370c      	adds	r7, #12
   833da:	46bd      	mov	sp, r7
   833dc:	bc80      	pop	{r7}
   833de:	4770      	bx	lr

000833e0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   833e0:	b480      	push	{r7}
   833e2:	b085      	sub	sp, #20
   833e4:	af00      	add	r7, sp, #0
   833e6:	60f8      	str	r0, [r7, #12]
   833e8:	60b9      	str	r1, [r7, #8]
   833ea:	607a      	str	r2, [r7, #4]
	return 0;
   833ec:	2300      	movs	r3, #0
}
   833ee:	4618      	mov	r0, r3
   833f0:	3714      	adds	r7, #20
   833f2:	46bd      	mov	sp, r7
   833f4:	bc80      	pop	{r7}
   833f6:	4770      	bx	lr

000833f8 <__aeabi_drsub>:
   833f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   833fc:	e002      	b.n	83404 <__adddf3>
   833fe:	bf00      	nop

00083400 <__aeabi_dsub>:
   83400:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00083404 <__adddf3>:
   83404:	b530      	push	{r4, r5, lr}
   83406:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8340a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8340e:	ea94 0f05 	teq	r4, r5
   83412:	bf08      	it	eq
   83414:	ea90 0f02 	teqeq	r0, r2
   83418:	bf1f      	itttt	ne
   8341a:	ea54 0c00 	orrsne.w	ip, r4, r0
   8341e:	ea55 0c02 	orrsne.w	ip, r5, r2
   83422:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   83426:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8342a:	f000 80e2 	beq.w	835f2 <__adddf3+0x1ee>
   8342e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   83432:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   83436:	bfb8      	it	lt
   83438:	426d      	neglt	r5, r5
   8343a:	dd0c      	ble.n	83456 <__adddf3+0x52>
   8343c:	442c      	add	r4, r5
   8343e:	ea80 0202 	eor.w	r2, r0, r2
   83442:	ea81 0303 	eor.w	r3, r1, r3
   83446:	ea82 0000 	eor.w	r0, r2, r0
   8344a:	ea83 0101 	eor.w	r1, r3, r1
   8344e:	ea80 0202 	eor.w	r2, r0, r2
   83452:	ea81 0303 	eor.w	r3, r1, r3
   83456:	2d36      	cmp	r5, #54	; 0x36
   83458:	bf88      	it	hi
   8345a:	bd30      	pophi	{r4, r5, pc}
   8345c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83460:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83464:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   83468:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8346c:	d002      	beq.n	83474 <__adddf3+0x70>
   8346e:	4240      	negs	r0, r0
   83470:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83474:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   83478:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8347c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   83480:	d002      	beq.n	83488 <__adddf3+0x84>
   83482:	4252      	negs	r2, r2
   83484:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83488:	ea94 0f05 	teq	r4, r5
   8348c:	f000 80a7 	beq.w	835de <__adddf3+0x1da>
   83490:	f1a4 0401 	sub.w	r4, r4, #1
   83494:	f1d5 0e20 	rsbs	lr, r5, #32
   83498:	db0d      	blt.n	834b6 <__adddf3+0xb2>
   8349a:	fa02 fc0e 	lsl.w	ip, r2, lr
   8349e:	fa22 f205 	lsr.w	r2, r2, r5
   834a2:	1880      	adds	r0, r0, r2
   834a4:	f141 0100 	adc.w	r1, r1, #0
   834a8:	fa03 f20e 	lsl.w	r2, r3, lr
   834ac:	1880      	adds	r0, r0, r2
   834ae:	fa43 f305 	asr.w	r3, r3, r5
   834b2:	4159      	adcs	r1, r3
   834b4:	e00e      	b.n	834d4 <__adddf3+0xd0>
   834b6:	f1a5 0520 	sub.w	r5, r5, #32
   834ba:	f10e 0e20 	add.w	lr, lr, #32
   834be:	2a01      	cmp	r2, #1
   834c0:	fa03 fc0e 	lsl.w	ip, r3, lr
   834c4:	bf28      	it	cs
   834c6:	f04c 0c02 	orrcs.w	ip, ip, #2
   834ca:	fa43 f305 	asr.w	r3, r3, r5
   834ce:	18c0      	adds	r0, r0, r3
   834d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   834d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   834d8:	d507      	bpl.n	834ea <__adddf3+0xe6>
   834da:	f04f 0e00 	mov.w	lr, #0
   834de:	f1dc 0c00 	rsbs	ip, ip, #0
   834e2:	eb7e 0000 	sbcs.w	r0, lr, r0
   834e6:	eb6e 0101 	sbc.w	r1, lr, r1
   834ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   834ee:	d31b      	bcc.n	83528 <__adddf3+0x124>
   834f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   834f4:	d30c      	bcc.n	83510 <__adddf3+0x10c>
   834f6:	0849      	lsrs	r1, r1, #1
   834f8:	ea5f 0030 	movs.w	r0, r0, rrx
   834fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   83500:	f104 0401 	add.w	r4, r4, #1
   83504:	ea4f 5244 	mov.w	r2, r4, lsl #21
   83508:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8350c:	f080 809a 	bcs.w	83644 <__adddf3+0x240>
   83510:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83514:	bf08      	it	eq
   83516:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8351a:	f150 0000 	adcs.w	r0, r0, #0
   8351e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83522:	ea41 0105 	orr.w	r1, r1, r5
   83526:	bd30      	pop	{r4, r5, pc}
   83528:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8352c:	4140      	adcs	r0, r0
   8352e:	eb41 0101 	adc.w	r1, r1, r1
   83532:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83536:	f1a4 0401 	sub.w	r4, r4, #1
   8353a:	d1e9      	bne.n	83510 <__adddf3+0x10c>
   8353c:	f091 0f00 	teq	r1, #0
   83540:	bf04      	itt	eq
   83542:	4601      	moveq	r1, r0
   83544:	2000      	moveq	r0, #0
   83546:	fab1 f381 	clz	r3, r1
   8354a:	bf08      	it	eq
   8354c:	3320      	addeq	r3, #32
   8354e:	f1a3 030b 	sub.w	r3, r3, #11
   83552:	f1b3 0220 	subs.w	r2, r3, #32
   83556:	da0c      	bge.n	83572 <__adddf3+0x16e>
   83558:	320c      	adds	r2, #12
   8355a:	dd08      	ble.n	8356e <__adddf3+0x16a>
   8355c:	f102 0c14 	add.w	ip, r2, #20
   83560:	f1c2 020c 	rsb	r2, r2, #12
   83564:	fa01 f00c 	lsl.w	r0, r1, ip
   83568:	fa21 f102 	lsr.w	r1, r1, r2
   8356c:	e00c      	b.n	83588 <__adddf3+0x184>
   8356e:	f102 0214 	add.w	r2, r2, #20
   83572:	bfd8      	it	le
   83574:	f1c2 0c20 	rsble	ip, r2, #32
   83578:	fa01 f102 	lsl.w	r1, r1, r2
   8357c:	fa20 fc0c 	lsr.w	ip, r0, ip
   83580:	bfdc      	itt	le
   83582:	ea41 010c 	orrle.w	r1, r1, ip
   83586:	4090      	lslle	r0, r2
   83588:	1ae4      	subs	r4, r4, r3
   8358a:	bfa2      	ittt	ge
   8358c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   83590:	4329      	orrge	r1, r5
   83592:	bd30      	popge	{r4, r5, pc}
   83594:	ea6f 0404 	mvn.w	r4, r4
   83598:	3c1f      	subs	r4, #31
   8359a:	da1c      	bge.n	835d6 <__adddf3+0x1d2>
   8359c:	340c      	adds	r4, #12
   8359e:	dc0e      	bgt.n	835be <__adddf3+0x1ba>
   835a0:	f104 0414 	add.w	r4, r4, #20
   835a4:	f1c4 0220 	rsb	r2, r4, #32
   835a8:	fa20 f004 	lsr.w	r0, r0, r4
   835ac:	fa01 f302 	lsl.w	r3, r1, r2
   835b0:	ea40 0003 	orr.w	r0, r0, r3
   835b4:	fa21 f304 	lsr.w	r3, r1, r4
   835b8:	ea45 0103 	orr.w	r1, r5, r3
   835bc:	bd30      	pop	{r4, r5, pc}
   835be:	f1c4 040c 	rsb	r4, r4, #12
   835c2:	f1c4 0220 	rsb	r2, r4, #32
   835c6:	fa20 f002 	lsr.w	r0, r0, r2
   835ca:	fa01 f304 	lsl.w	r3, r1, r4
   835ce:	ea40 0003 	orr.w	r0, r0, r3
   835d2:	4629      	mov	r1, r5
   835d4:	bd30      	pop	{r4, r5, pc}
   835d6:	fa21 f004 	lsr.w	r0, r1, r4
   835da:	4629      	mov	r1, r5
   835dc:	bd30      	pop	{r4, r5, pc}
   835de:	f094 0f00 	teq	r4, #0
   835e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   835e6:	bf06      	itte	eq
   835e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   835ec:	3401      	addeq	r4, #1
   835ee:	3d01      	subne	r5, #1
   835f0:	e74e      	b.n	83490 <__adddf3+0x8c>
   835f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   835f6:	bf18      	it	ne
   835f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   835fc:	d029      	beq.n	83652 <__adddf3+0x24e>
   835fe:	ea94 0f05 	teq	r4, r5
   83602:	bf08      	it	eq
   83604:	ea90 0f02 	teqeq	r0, r2
   83608:	d005      	beq.n	83616 <__adddf3+0x212>
   8360a:	ea54 0c00 	orrs.w	ip, r4, r0
   8360e:	bf04      	itt	eq
   83610:	4619      	moveq	r1, r3
   83612:	4610      	moveq	r0, r2
   83614:	bd30      	pop	{r4, r5, pc}
   83616:	ea91 0f03 	teq	r1, r3
   8361a:	bf1e      	ittt	ne
   8361c:	2100      	movne	r1, #0
   8361e:	2000      	movne	r0, #0
   83620:	bd30      	popne	{r4, r5, pc}
   83622:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   83626:	d105      	bne.n	83634 <__adddf3+0x230>
   83628:	0040      	lsls	r0, r0, #1
   8362a:	4149      	adcs	r1, r1
   8362c:	bf28      	it	cs
   8362e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   83632:	bd30      	pop	{r4, r5, pc}
   83634:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   83638:	bf3c      	itt	cc
   8363a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8363e:	bd30      	popcc	{r4, r5, pc}
   83640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83644:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   83648:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8364c:	f04f 0000 	mov.w	r0, #0
   83650:	bd30      	pop	{r4, r5, pc}
   83652:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83656:	bf1a      	itte	ne
   83658:	4619      	movne	r1, r3
   8365a:	4610      	movne	r0, r2
   8365c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   83660:	bf1c      	itt	ne
   83662:	460b      	movne	r3, r1
   83664:	4602      	movne	r2, r0
   83666:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8366a:	bf06      	itte	eq
   8366c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   83670:	ea91 0f03 	teqeq	r1, r3
   83674:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   83678:	bd30      	pop	{r4, r5, pc}
   8367a:	bf00      	nop

0008367c <__aeabi_ui2d>:
   8367c:	f090 0f00 	teq	r0, #0
   83680:	bf04      	itt	eq
   83682:	2100      	moveq	r1, #0
   83684:	4770      	bxeq	lr
   83686:	b530      	push	{r4, r5, lr}
   83688:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8368c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83690:	f04f 0500 	mov.w	r5, #0
   83694:	f04f 0100 	mov.w	r1, #0
   83698:	e750      	b.n	8353c <__adddf3+0x138>
   8369a:	bf00      	nop

0008369c <__aeabi_i2d>:
   8369c:	f090 0f00 	teq	r0, #0
   836a0:	bf04      	itt	eq
   836a2:	2100      	moveq	r1, #0
   836a4:	4770      	bxeq	lr
   836a6:	b530      	push	{r4, r5, lr}
   836a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   836ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   836b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   836b4:	bf48      	it	mi
   836b6:	4240      	negmi	r0, r0
   836b8:	f04f 0100 	mov.w	r1, #0
   836bc:	e73e      	b.n	8353c <__adddf3+0x138>
   836be:	bf00      	nop

000836c0 <__aeabi_f2d>:
   836c0:	0042      	lsls	r2, r0, #1
   836c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   836c6:	ea4f 0131 	mov.w	r1, r1, rrx
   836ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
   836ce:	bf1f      	itttt	ne
   836d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   836d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   836d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   836dc:	4770      	bxne	lr
   836de:	f092 0f00 	teq	r2, #0
   836e2:	bf14      	ite	ne
   836e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   836e8:	4770      	bxeq	lr
   836ea:	b530      	push	{r4, r5, lr}
   836ec:	f44f 7460 	mov.w	r4, #896	; 0x380
   836f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   836f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   836f8:	e720      	b.n	8353c <__adddf3+0x138>
   836fa:	bf00      	nop

000836fc <__aeabi_ul2d>:
   836fc:	ea50 0201 	orrs.w	r2, r0, r1
   83700:	bf08      	it	eq
   83702:	4770      	bxeq	lr
   83704:	b530      	push	{r4, r5, lr}
   83706:	f04f 0500 	mov.w	r5, #0
   8370a:	e00a      	b.n	83722 <__aeabi_l2d+0x16>

0008370c <__aeabi_l2d>:
   8370c:	ea50 0201 	orrs.w	r2, r0, r1
   83710:	bf08      	it	eq
   83712:	4770      	bxeq	lr
   83714:	b530      	push	{r4, r5, lr}
   83716:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8371a:	d502      	bpl.n	83722 <__aeabi_l2d+0x16>
   8371c:	4240      	negs	r0, r0
   8371e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83722:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83726:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8372a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8372e:	f43f aedc 	beq.w	834ea <__adddf3+0xe6>
   83732:	f04f 0203 	mov.w	r2, #3
   83736:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8373a:	bf18      	it	ne
   8373c:	3203      	addne	r2, #3
   8373e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83742:	bf18      	it	ne
   83744:	3203      	addne	r2, #3
   83746:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8374a:	f1c2 0320 	rsb	r3, r2, #32
   8374e:	fa00 fc03 	lsl.w	ip, r0, r3
   83752:	fa20 f002 	lsr.w	r0, r0, r2
   83756:	fa01 fe03 	lsl.w	lr, r1, r3
   8375a:	ea40 000e 	orr.w	r0, r0, lr
   8375e:	fa21 f102 	lsr.w	r1, r1, r2
   83762:	4414      	add	r4, r2
   83764:	e6c1      	b.n	834ea <__adddf3+0xe6>
   83766:	bf00      	nop

00083768 <__aeabi_d2uiz>:
   83768:	004a      	lsls	r2, r1, #1
   8376a:	d211      	bcs.n	83790 <__aeabi_d2uiz+0x28>
   8376c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83770:	d211      	bcs.n	83796 <__aeabi_d2uiz+0x2e>
   83772:	d50d      	bpl.n	83790 <__aeabi_d2uiz+0x28>
   83774:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83778:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8377c:	d40e      	bmi.n	8379c <__aeabi_d2uiz+0x34>
   8377e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83782:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83786:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8378a:	fa23 f002 	lsr.w	r0, r3, r2
   8378e:	4770      	bx	lr
   83790:	f04f 0000 	mov.w	r0, #0
   83794:	4770      	bx	lr
   83796:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8379a:	d102      	bne.n	837a2 <__aeabi_d2uiz+0x3a>
   8379c:	f04f 30ff 	mov.w	r0, #4294967295
   837a0:	4770      	bx	lr
   837a2:	f04f 0000 	mov.w	r0, #0
   837a6:	4770      	bx	lr

000837a8 <__libc_init_array>:
   837a8:	b570      	push	{r4, r5, r6, lr}
   837aa:	4e0f      	ldr	r6, [pc, #60]	; (837e8 <__libc_init_array+0x40>)
   837ac:	4d0f      	ldr	r5, [pc, #60]	; (837ec <__libc_init_array+0x44>)
   837ae:	1b76      	subs	r6, r6, r5
   837b0:	10b6      	asrs	r6, r6, #2
   837b2:	bf18      	it	ne
   837b4:	2400      	movne	r4, #0
   837b6:	d005      	beq.n	837c4 <__libc_init_array+0x1c>
   837b8:	3401      	adds	r4, #1
   837ba:	f855 3b04 	ldr.w	r3, [r5], #4
   837be:	4798      	blx	r3
   837c0:	42a6      	cmp	r6, r4
   837c2:	d1f9      	bne.n	837b8 <__libc_init_array+0x10>
   837c4:	4e0a      	ldr	r6, [pc, #40]	; (837f0 <__libc_init_array+0x48>)
   837c6:	4d0b      	ldr	r5, [pc, #44]	; (837f4 <__libc_init_array+0x4c>)
   837c8:	f002 fffa 	bl	867c0 <_init>
   837cc:	1b76      	subs	r6, r6, r5
   837ce:	10b6      	asrs	r6, r6, #2
   837d0:	bf18      	it	ne
   837d2:	2400      	movne	r4, #0
   837d4:	d006      	beq.n	837e4 <__libc_init_array+0x3c>
   837d6:	3401      	adds	r4, #1
   837d8:	f855 3b04 	ldr.w	r3, [r5], #4
   837dc:	4798      	blx	r3
   837de:	42a6      	cmp	r6, r4
   837e0:	d1f9      	bne.n	837d6 <__libc_init_array+0x2e>
   837e2:	bd70      	pop	{r4, r5, r6, pc}
   837e4:	bd70      	pop	{r4, r5, r6, pc}
   837e6:	bf00      	nop
   837e8:	000867cc 	.word	0x000867cc
   837ec:	000867cc 	.word	0x000867cc
   837f0:	000867d4 	.word	0x000867d4
   837f4:	000867cc 	.word	0x000867cc

000837f8 <iprintf>:
   837f8:	b40f      	push	{r0, r1, r2, r3}
   837fa:	b510      	push	{r4, lr}
   837fc:	4b07      	ldr	r3, [pc, #28]	; (8381c <iprintf+0x24>)
   837fe:	b082      	sub	sp, #8
   83800:	ac04      	add	r4, sp, #16
   83802:	f854 2b04 	ldr.w	r2, [r4], #4
   83806:	6818      	ldr	r0, [r3, #0]
   83808:	4623      	mov	r3, r4
   8380a:	6881      	ldr	r1, [r0, #8]
   8380c:	9401      	str	r4, [sp, #4]
   8380e:	f000 f96f 	bl	83af0 <_vfiprintf_r>
   83812:	b002      	add	sp, #8
   83814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83818:	b004      	add	sp, #16
   8381a:	4770      	bx	lr
   8381c:	20070830 	.word	0x20070830

00083820 <memset>:
   83820:	b470      	push	{r4, r5, r6}
   83822:	0784      	lsls	r4, r0, #30
   83824:	d046      	beq.n	838b4 <memset+0x94>
   83826:	1e54      	subs	r4, r2, #1
   83828:	2a00      	cmp	r2, #0
   8382a:	d041      	beq.n	838b0 <memset+0x90>
   8382c:	b2cd      	uxtb	r5, r1
   8382e:	4603      	mov	r3, r0
   83830:	e002      	b.n	83838 <memset+0x18>
   83832:	1e62      	subs	r2, r4, #1
   83834:	b3e4      	cbz	r4, 838b0 <memset+0x90>
   83836:	4614      	mov	r4, r2
   83838:	f803 5b01 	strb.w	r5, [r3], #1
   8383c:	079a      	lsls	r2, r3, #30
   8383e:	d1f8      	bne.n	83832 <memset+0x12>
   83840:	2c03      	cmp	r4, #3
   83842:	d92e      	bls.n	838a2 <memset+0x82>
   83844:	b2cd      	uxtb	r5, r1
   83846:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8384a:	2c0f      	cmp	r4, #15
   8384c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83850:	d919      	bls.n	83886 <memset+0x66>
   83852:	4626      	mov	r6, r4
   83854:	f103 0210 	add.w	r2, r3, #16
   83858:	3e10      	subs	r6, #16
   8385a:	2e0f      	cmp	r6, #15
   8385c:	f842 5c10 	str.w	r5, [r2, #-16]
   83860:	f842 5c0c 	str.w	r5, [r2, #-12]
   83864:	f842 5c08 	str.w	r5, [r2, #-8]
   83868:	f842 5c04 	str.w	r5, [r2, #-4]
   8386c:	f102 0210 	add.w	r2, r2, #16
   83870:	d8f2      	bhi.n	83858 <memset+0x38>
   83872:	f1a4 0210 	sub.w	r2, r4, #16
   83876:	f022 020f 	bic.w	r2, r2, #15
   8387a:	f004 040f 	and.w	r4, r4, #15
   8387e:	3210      	adds	r2, #16
   83880:	2c03      	cmp	r4, #3
   83882:	4413      	add	r3, r2
   83884:	d90d      	bls.n	838a2 <memset+0x82>
   83886:	461e      	mov	r6, r3
   83888:	4622      	mov	r2, r4
   8388a:	3a04      	subs	r2, #4
   8388c:	2a03      	cmp	r2, #3
   8388e:	f846 5b04 	str.w	r5, [r6], #4
   83892:	d8fa      	bhi.n	8388a <memset+0x6a>
   83894:	1f22      	subs	r2, r4, #4
   83896:	f022 0203 	bic.w	r2, r2, #3
   8389a:	3204      	adds	r2, #4
   8389c:	4413      	add	r3, r2
   8389e:	f004 0403 	and.w	r4, r4, #3
   838a2:	b12c      	cbz	r4, 838b0 <memset+0x90>
   838a4:	b2c9      	uxtb	r1, r1
   838a6:	441c      	add	r4, r3
   838a8:	f803 1b01 	strb.w	r1, [r3], #1
   838ac:	42a3      	cmp	r3, r4
   838ae:	d1fb      	bne.n	838a8 <memset+0x88>
   838b0:	bc70      	pop	{r4, r5, r6}
   838b2:	4770      	bx	lr
   838b4:	4614      	mov	r4, r2
   838b6:	4603      	mov	r3, r0
   838b8:	e7c2      	b.n	83840 <memset+0x20>
   838ba:	bf00      	nop

000838bc <setbuf>:
   838bc:	2900      	cmp	r1, #0
   838be:	bf0c      	ite	eq
   838c0:	2202      	moveq	r2, #2
   838c2:	2200      	movne	r2, #0
   838c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   838c8:	f000 b800 	b.w	838cc <setvbuf>

000838cc <setvbuf>:
   838cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   838d0:	4d51      	ldr	r5, [pc, #324]	; (83a18 <setvbuf+0x14c>)
   838d2:	b083      	sub	sp, #12
   838d4:	682d      	ldr	r5, [r5, #0]
   838d6:	4604      	mov	r4, r0
   838d8:	460f      	mov	r7, r1
   838da:	4690      	mov	r8, r2
   838dc:	461e      	mov	r6, r3
   838de:	b115      	cbz	r5, 838e6 <setvbuf+0x1a>
   838e0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   838e2:	2b00      	cmp	r3, #0
   838e4:	d079      	beq.n	839da <setvbuf+0x10e>
   838e6:	f1b8 0f02 	cmp.w	r8, #2
   838ea:	d004      	beq.n	838f6 <setvbuf+0x2a>
   838ec:	f1b8 0f01 	cmp.w	r8, #1
   838f0:	d87f      	bhi.n	839f2 <setvbuf+0x126>
   838f2:	2e00      	cmp	r6, #0
   838f4:	db7d      	blt.n	839f2 <setvbuf+0x126>
   838f6:	4621      	mov	r1, r4
   838f8:	4628      	mov	r0, r5
   838fa:	f001 f93b 	bl	84b74 <_fflush_r>
   838fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83900:	b141      	cbz	r1, 83914 <setvbuf+0x48>
   83902:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83906:	4299      	cmp	r1, r3
   83908:	d002      	beq.n	83910 <setvbuf+0x44>
   8390a:	4628      	mov	r0, r5
   8390c:	f001 fa8e 	bl	84e2c <_free_r>
   83910:	2300      	movs	r3, #0
   83912:	6323      	str	r3, [r4, #48]	; 0x30
   83914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83918:	2200      	movs	r2, #0
   8391a:	61a2      	str	r2, [r4, #24]
   8391c:	6062      	str	r2, [r4, #4]
   8391e:	061a      	lsls	r2, r3, #24
   83920:	d454      	bmi.n	839cc <setvbuf+0x100>
   83922:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   83926:	f023 0303 	bic.w	r3, r3, #3
   8392a:	f1b8 0f02 	cmp.w	r8, #2
   8392e:	81a3      	strh	r3, [r4, #12]
   83930:	d039      	beq.n	839a6 <setvbuf+0xda>
   83932:	ab01      	add	r3, sp, #4
   83934:	466a      	mov	r2, sp
   83936:	4621      	mov	r1, r4
   83938:	4628      	mov	r0, r5
   8393a:	f001 fd15 	bl	85368 <__swhatbuf_r>
   8393e:	89a3      	ldrh	r3, [r4, #12]
   83940:	4318      	orrs	r0, r3
   83942:	81a0      	strh	r0, [r4, #12]
   83944:	b326      	cbz	r6, 83990 <setvbuf+0xc4>
   83946:	b327      	cbz	r7, 83992 <setvbuf+0xc6>
   83948:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8394a:	2b00      	cmp	r3, #0
   8394c:	d04d      	beq.n	839ea <setvbuf+0x11e>
   8394e:	9b00      	ldr	r3, [sp, #0]
   83950:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   83954:	429e      	cmp	r6, r3
   83956:	bf1c      	itt	ne
   83958:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   8395c:	81a0      	strhne	r0, [r4, #12]
   8395e:	f1b8 0f01 	cmp.w	r8, #1
   83962:	bf08      	it	eq
   83964:	f040 0001 	orreq.w	r0, r0, #1
   83968:	b283      	uxth	r3, r0
   8396a:	bf08      	it	eq
   8396c:	81a0      	strheq	r0, [r4, #12]
   8396e:	f003 0008 	and.w	r0, r3, #8
   83972:	b280      	uxth	r0, r0
   83974:	6027      	str	r7, [r4, #0]
   83976:	6127      	str	r7, [r4, #16]
   83978:	6166      	str	r6, [r4, #20]
   8397a:	b318      	cbz	r0, 839c4 <setvbuf+0xf8>
   8397c:	f013 0001 	ands.w	r0, r3, #1
   83980:	d02f      	beq.n	839e2 <setvbuf+0x116>
   83982:	2000      	movs	r0, #0
   83984:	4276      	negs	r6, r6
   83986:	61a6      	str	r6, [r4, #24]
   83988:	60a0      	str	r0, [r4, #8]
   8398a:	b003      	add	sp, #12
   8398c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83990:	9e00      	ldr	r6, [sp, #0]
   83992:	4630      	mov	r0, r6
   83994:	f001 fd5c 	bl	85450 <malloc>
   83998:	4607      	mov	r7, r0
   8399a:	b368      	cbz	r0, 839f8 <setvbuf+0x12c>
   8399c:	89a3      	ldrh	r3, [r4, #12]
   8399e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   839a2:	81a3      	strh	r3, [r4, #12]
   839a4:	e7d0      	b.n	83948 <setvbuf+0x7c>
   839a6:	2000      	movs	r0, #0
   839a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   839ac:	f043 0302 	orr.w	r3, r3, #2
   839b0:	2500      	movs	r5, #0
   839b2:	2101      	movs	r1, #1
   839b4:	81a3      	strh	r3, [r4, #12]
   839b6:	60a5      	str	r5, [r4, #8]
   839b8:	6022      	str	r2, [r4, #0]
   839ba:	6122      	str	r2, [r4, #16]
   839bc:	6161      	str	r1, [r4, #20]
   839be:	b003      	add	sp, #12
   839c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   839c4:	60a0      	str	r0, [r4, #8]
   839c6:	b003      	add	sp, #12
   839c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   839cc:	6921      	ldr	r1, [r4, #16]
   839ce:	4628      	mov	r0, r5
   839d0:	f001 fa2c 	bl	84e2c <_free_r>
   839d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   839d8:	e7a3      	b.n	83922 <setvbuf+0x56>
   839da:	4628      	mov	r0, r5
   839dc:	f001 f95e 	bl	84c9c <__sinit>
   839e0:	e781      	b.n	838e6 <setvbuf+0x1a>
   839e2:	60a6      	str	r6, [r4, #8]
   839e4:	b003      	add	sp, #12
   839e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   839ea:	4628      	mov	r0, r5
   839ec:	f001 f956 	bl	84c9c <__sinit>
   839f0:	e7ad      	b.n	8394e <setvbuf+0x82>
   839f2:	f04f 30ff 	mov.w	r0, #4294967295
   839f6:	e7e2      	b.n	839be <setvbuf+0xf2>
   839f8:	f8dd 9000 	ldr.w	r9, [sp]
   839fc:	45b1      	cmp	r9, r6
   839fe:	d006      	beq.n	83a0e <setvbuf+0x142>
   83a00:	4648      	mov	r0, r9
   83a02:	f001 fd25 	bl	85450 <malloc>
   83a06:	4607      	mov	r7, r0
   83a08:	b108      	cbz	r0, 83a0e <setvbuf+0x142>
   83a0a:	464e      	mov	r6, r9
   83a0c:	e7c6      	b.n	8399c <setvbuf+0xd0>
   83a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83a12:	f04f 30ff 	mov.w	r0, #4294967295
   83a16:	e7c7      	b.n	839a8 <setvbuf+0xdc>
   83a18:	20070830 	.word	0x20070830

00083a1c <strlen>:
   83a1c:	f020 0103 	bic.w	r1, r0, #3
   83a20:	f010 0003 	ands.w	r0, r0, #3
   83a24:	f1c0 0000 	rsb	r0, r0, #0
   83a28:	f851 3b04 	ldr.w	r3, [r1], #4
   83a2c:	f100 0c04 	add.w	ip, r0, #4
   83a30:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83a34:	f06f 0200 	mvn.w	r2, #0
   83a38:	bf1c      	itt	ne
   83a3a:	fa22 f20c 	lsrne.w	r2, r2, ip
   83a3e:	4313      	orrne	r3, r2
   83a40:	f04f 0c01 	mov.w	ip, #1
   83a44:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83a48:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83a4c:	eba3 020c 	sub.w	r2, r3, ip
   83a50:	ea22 0203 	bic.w	r2, r2, r3
   83a54:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83a58:	bf04      	itt	eq
   83a5a:	f851 3b04 	ldreq.w	r3, [r1], #4
   83a5e:	3004      	addeq	r0, #4
   83a60:	d0f4      	beq.n	83a4c <strlen+0x30>
   83a62:	f1c2 0100 	rsb	r1, r2, #0
   83a66:	ea02 0201 	and.w	r2, r2, r1
   83a6a:	fab2 f282 	clz	r2, r2
   83a6e:	f1c2 021f 	rsb	r2, r2, #31
   83a72:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83a76:	4770      	bx	lr

00083a78 <__sprint_r.part.0>:
   83a78:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   83a7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83a7e:	049c      	lsls	r4, r3, #18
   83a80:	4692      	mov	sl, r2
   83a82:	d52c      	bpl.n	83ade <__sprint_r.part.0+0x66>
   83a84:	6893      	ldr	r3, [r2, #8]
   83a86:	6812      	ldr	r2, [r2, #0]
   83a88:	b33b      	cbz	r3, 83ada <__sprint_r.part.0+0x62>
   83a8a:	460f      	mov	r7, r1
   83a8c:	4680      	mov	r8, r0
   83a8e:	f102 0908 	add.w	r9, r2, #8
   83a92:	e919 0060 	ldmdb	r9, {r5, r6}
   83a96:	08b6      	lsrs	r6, r6, #2
   83a98:	d017      	beq.n	83aca <__sprint_r.part.0+0x52>
   83a9a:	3d04      	subs	r5, #4
   83a9c:	2400      	movs	r4, #0
   83a9e:	e001      	b.n	83aa4 <__sprint_r.part.0+0x2c>
   83aa0:	42a6      	cmp	r6, r4
   83aa2:	d010      	beq.n	83ac6 <__sprint_r.part.0+0x4e>
   83aa4:	463a      	mov	r2, r7
   83aa6:	f855 1f04 	ldr.w	r1, [r5, #4]!
   83aaa:	4640      	mov	r0, r8
   83aac:	f001 f95e 	bl	84d6c <_fputwc_r>
   83ab0:	1c43      	adds	r3, r0, #1
   83ab2:	f104 0401 	add.w	r4, r4, #1
   83ab6:	d1f3      	bne.n	83aa0 <__sprint_r.part.0+0x28>
   83ab8:	2300      	movs	r3, #0
   83aba:	f8ca 3008 	str.w	r3, [sl, #8]
   83abe:	f8ca 3004 	str.w	r3, [sl, #4]
   83ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83ac6:	f8da 3008 	ldr.w	r3, [sl, #8]
   83aca:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   83ace:	f8ca 3008 	str.w	r3, [sl, #8]
   83ad2:	f109 0908 	add.w	r9, r9, #8
   83ad6:	2b00      	cmp	r3, #0
   83ad8:	d1db      	bne.n	83a92 <__sprint_r.part.0+0x1a>
   83ada:	2000      	movs	r0, #0
   83adc:	e7ec      	b.n	83ab8 <__sprint_r.part.0+0x40>
   83ade:	f001 fa8d 	bl	84ffc <__sfvwrite_r>
   83ae2:	2300      	movs	r3, #0
   83ae4:	f8ca 3008 	str.w	r3, [sl, #8]
   83ae8:	f8ca 3004 	str.w	r3, [sl, #4]
   83aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00083af0 <_vfiprintf_r>:
   83af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83af4:	b0ab      	sub	sp, #172	; 0xac
   83af6:	461c      	mov	r4, r3
   83af8:	9100      	str	r1, [sp, #0]
   83afa:	4690      	mov	r8, r2
   83afc:	9304      	str	r3, [sp, #16]
   83afe:	9005      	str	r0, [sp, #20]
   83b00:	b118      	cbz	r0, 83b0a <_vfiprintf_r+0x1a>
   83b02:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83b04:	2b00      	cmp	r3, #0
   83b06:	f000 80de 	beq.w	83cc6 <_vfiprintf_r+0x1d6>
   83b0a:	9800      	ldr	r0, [sp, #0]
   83b0c:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   83b10:	b28a      	uxth	r2, r1
   83b12:	0495      	lsls	r5, r2, #18
   83b14:	d407      	bmi.n	83b26 <_vfiprintf_r+0x36>
   83b16:	6e43      	ldr	r3, [r0, #100]	; 0x64
   83b18:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   83b1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83b20:	8182      	strh	r2, [r0, #12]
   83b22:	6643      	str	r3, [r0, #100]	; 0x64
   83b24:	b292      	uxth	r2, r2
   83b26:	0711      	lsls	r1, r2, #28
   83b28:	f140 80b1 	bpl.w	83c8e <_vfiprintf_r+0x19e>
   83b2c:	9b00      	ldr	r3, [sp, #0]
   83b2e:	691b      	ldr	r3, [r3, #16]
   83b30:	2b00      	cmp	r3, #0
   83b32:	f000 80ac 	beq.w	83c8e <_vfiprintf_r+0x19e>
   83b36:	f002 021a 	and.w	r2, r2, #26
   83b3a:	2a0a      	cmp	r2, #10
   83b3c:	f000 80b5 	beq.w	83caa <_vfiprintf_r+0x1ba>
   83b40:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   83b44:	46d3      	mov	fp, sl
   83b46:	2300      	movs	r3, #0
   83b48:	9302      	str	r3, [sp, #8]
   83b4a:	930f      	str	r3, [sp, #60]	; 0x3c
   83b4c:	930e      	str	r3, [sp, #56]	; 0x38
   83b4e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   83b52:	f898 3000 	ldrb.w	r3, [r8]
   83b56:	4644      	mov	r4, r8
   83b58:	b1fb      	cbz	r3, 83b9a <_vfiprintf_r+0xaa>
   83b5a:	2b25      	cmp	r3, #37	; 0x25
   83b5c:	d102      	bne.n	83b64 <_vfiprintf_r+0x74>
   83b5e:	e01c      	b.n	83b9a <_vfiprintf_r+0xaa>
   83b60:	2b25      	cmp	r3, #37	; 0x25
   83b62:	d003      	beq.n	83b6c <_vfiprintf_r+0x7c>
   83b64:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   83b68:	2b00      	cmp	r3, #0
   83b6a:	d1f9      	bne.n	83b60 <_vfiprintf_r+0x70>
   83b6c:	ebc8 0504 	rsb	r5, r8, r4
   83b70:	b19d      	cbz	r5, 83b9a <_vfiprintf_r+0xaa>
   83b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83b74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83b76:	3301      	adds	r3, #1
   83b78:	442a      	add	r2, r5
   83b7a:	2b07      	cmp	r3, #7
   83b7c:	f8cb 8000 	str.w	r8, [fp]
   83b80:	f8cb 5004 	str.w	r5, [fp, #4]
   83b84:	920f      	str	r2, [sp, #60]	; 0x3c
   83b86:	930e      	str	r3, [sp, #56]	; 0x38
   83b88:	dd7b      	ble.n	83c82 <_vfiprintf_r+0x192>
   83b8a:	2a00      	cmp	r2, #0
   83b8c:	f040 851f 	bne.w	845ce <_vfiprintf_r+0xade>
   83b90:	46d3      	mov	fp, sl
   83b92:	9b02      	ldr	r3, [sp, #8]
   83b94:	920e      	str	r2, [sp, #56]	; 0x38
   83b96:	442b      	add	r3, r5
   83b98:	9302      	str	r3, [sp, #8]
   83b9a:	7823      	ldrb	r3, [r4, #0]
   83b9c:	2b00      	cmp	r3, #0
   83b9e:	f000 843b 	beq.w	84418 <_vfiprintf_r+0x928>
   83ba2:	f04f 0300 	mov.w	r3, #0
   83ba6:	2100      	movs	r1, #0
   83ba8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83bac:	f104 0801 	add.w	r8, r4, #1
   83bb0:	7863      	ldrb	r3, [r4, #1]
   83bb2:	4608      	mov	r0, r1
   83bb4:	460e      	mov	r6, r1
   83bb6:	460c      	mov	r4, r1
   83bb8:	f04f 32ff 	mov.w	r2, #4294967295
   83bbc:	9201      	str	r2, [sp, #4]
   83bbe:	f108 0801 	add.w	r8, r8, #1
   83bc2:	f1a3 0220 	sub.w	r2, r3, #32
   83bc6:	2a58      	cmp	r2, #88	; 0x58
   83bc8:	f200 838b 	bhi.w	842e2 <_vfiprintf_r+0x7f2>
   83bcc:	e8df f012 	tbh	[pc, r2, lsl #1]
   83bd0:	0389033d 	.word	0x0389033d
   83bd4:	03450389 	.word	0x03450389
   83bd8:	03890389 	.word	0x03890389
   83bdc:	03890389 	.word	0x03890389
   83be0:	03890389 	.word	0x03890389
   83be4:	026b007e 	.word	0x026b007e
   83be8:	00860389 	.word	0x00860389
   83bec:	03890270 	.word	0x03890270
   83bf0:	025d01cc 	.word	0x025d01cc
   83bf4:	025d025d 	.word	0x025d025d
   83bf8:	025d025d 	.word	0x025d025d
   83bfc:	025d025d 	.word	0x025d025d
   83c00:	025d025d 	.word	0x025d025d
   83c04:	03890389 	.word	0x03890389
   83c08:	03890389 	.word	0x03890389
   83c0c:	03890389 	.word	0x03890389
   83c10:	03890389 	.word	0x03890389
   83c14:	03890389 	.word	0x03890389
   83c18:	038901d1 	.word	0x038901d1
   83c1c:	03890389 	.word	0x03890389
   83c20:	03890389 	.word	0x03890389
   83c24:	03890389 	.word	0x03890389
   83c28:	03890389 	.word	0x03890389
   83c2c:	021a0389 	.word	0x021a0389
   83c30:	03890389 	.word	0x03890389
   83c34:	03890389 	.word	0x03890389
   83c38:	02e50389 	.word	0x02e50389
   83c3c:	03890389 	.word	0x03890389
   83c40:	03890308 	.word	0x03890308
   83c44:	03890389 	.word	0x03890389
   83c48:	03890389 	.word	0x03890389
   83c4c:	03890389 	.word	0x03890389
   83c50:	03890389 	.word	0x03890389
   83c54:	032b0389 	.word	0x032b0389
   83c58:	03890382 	.word	0x03890382
   83c5c:	03890389 	.word	0x03890389
   83c60:	0382035e 	.word	0x0382035e
   83c64:	03890389 	.word	0x03890389
   83c68:	03890363 	.word	0x03890363
   83c6c:	028d0370 	.word	0x028d0370
   83c70:	02e0008b 	.word	0x02e0008b
   83c74:	02930389 	.word	0x02930389
   83c78:	02b20389 	.word	0x02b20389
   83c7c:	03890389 	.word	0x03890389
   83c80:	034a      	.short	0x034a
   83c82:	f10b 0b08 	add.w	fp, fp, #8
   83c86:	9b02      	ldr	r3, [sp, #8]
   83c88:	442b      	add	r3, r5
   83c8a:	9302      	str	r3, [sp, #8]
   83c8c:	e785      	b.n	83b9a <_vfiprintf_r+0xaa>
   83c8e:	9900      	ldr	r1, [sp, #0]
   83c90:	9805      	ldr	r0, [sp, #20]
   83c92:	f000 fe57 	bl	84944 <__swsetup_r>
   83c96:	2800      	cmp	r0, #0
   83c98:	f040 8545 	bne.w	84726 <_vfiprintf_r+0xc36>
   83c9c:	9b00      	ldr	r3, [sp, #0]
   83c9e:	899a      	ldrh	r2, [r3, #12]
   83ca0:	f002 021a 	and.w	r2, r2, #26
   83ca4:	2a0a      	cmp	r2, #10
   83ca6:	f47f af4b 	bne.w	83b40 <_vfiprintf_r+0x50>
   83caa:	9900      	ldr	r1, [sp, #0]
   83cac:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   83cb0:	2b00      	cmp	r3, #0
   83cb2:	f6ff af45 	blt.w	83b40 <_vfiprintf_r+0x50>
   83cb6:	4623      	mov	r3, r4
   83cb8:	4642      	mov	r2, r8
   83cba:	9805      	ldr	r0, [sp, #20]
   83cbc:	f000 fe0c 	bl	848d8 <__sbprintf>
   83cc0:	b02b      	add	sp, #172	; 0xac
   83cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83cc6:	f000 ffe9 	bl	84c9c <__sinit>
   83cca:	e71e      	b.n	83b0a <_vfiprintf_r+0x1a>
   83ccc:	9a04      	ldr	r2, [sp, #16]
   83cce:	4613      	mov	r3, r2
   83cd0:	6814      	ldr	r4, [r2, #0]
   83cd2:	3304      	adds	r3, #4
   83cd4:	2c00      	cmp	r4, #0
   83cd6:	9304      	str	r3, [sp, #16]
   83cd8:	da02      	bge.n	83ce0 <_vfiprintf_r+0x1f0>
   83cda:	4264      	negs	r4, r4
   83cdc:	f046 0604 	orr.w	r6, r6, #4
   83ce0:	f898 3000 	ldrb.w	r3, [r8]
   83ce4:	e76b      	b.n	83bbe <_vfiprintf_r+0xce>
   83ce6:	f04f 0300 	mov.w	r3, #0
   83cea:	9804      	ldr	r0, [sp, #16]
   83cec:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83cf0:	4603      	mov	r3, r0
   83cf2:	2130      	movs	r1, #48	; 0x30
   83cf4:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   83cf8:	9901      	ldr	r1, [sp, #4]
   83cfa:	2278      	movs	r2, #120	; 0x78
   83cfc:	2900      	cmp	r1, #0
   83cfe:	9406      	str	r4, [sp, #24]
   83d00:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   83d04:	6804      	ldr	r4, [r0, #0]
   83d06:	f103 0304 	add.w	r3, r3, #4
   83d0a:	f04f 0500 	mov.w	r5, #0
   83d0e:	f046 0202 	orr.w	r2, r6, #2
   83d12:	f2c0 850c 	blt.w	8472e <_vfiprintf_r+0xc3e>
   83d16:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   83d1a:	ea54 0205 	orrs.w	r2, r4, r5
   83d1e:	f046 0602 	orr.w	r6, r6, #2
   83d22:	9304      	str	r3, [sp, #16]
   83d24:	f040 84b5 	bne.w	84692 <_vfiprintf_r+0xba2>
   83d28:	48b3      	ldr	r0, [pc, #716]	; (83ff8 <_vfiprintf_r+0x508>)
   83d2a:	9b01      	ldr	r3, [sp, #4]
   83d2c:	2b00      	cmp	r3, #0
   83d2e:	f040 8462 	bne.w	845f6 <_vfiprintf_r+0xb06>
   83d32:	4699      	mov	r9, r3
   83d34:	4657      	mov	r7, sl
   83d36:	2300      	movs	r3, #0
   83d38:	9301      	str	r3, [sp, #4]
   83d3a:	9303      	str	r3, [sp, #12]
   83d3c:	9b01      	ldr	r3, [sp, #4]
   83d3e:	9a03      	ldr	r2, [sp, #12]
   83d40:	4293      	cmp	r3, r2
   83d42:	bfb8      	it	lt
   83d44:	4613      	movlt	r3, r2
   83d46:	461d      	mov	r5, r3
   83d48:	f1b9 0f00 	cmp.w	r9, #0
   83d4c:	d000      	beq.n	83d50 <_vfiprintf_r+0x260>
   83d4e:	3501      	adds	r5, #1
   83d50:	f016 0302 	ands.w	r3, r6, #2
   83d54:	9307      	str	r3, [sp, #28]
   83d56:	bf18      	it	ne
   83d58:	3502      	addne	r5, #2
   83d5a:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   83d5e:	9308      	str	r3, [sp, #32]
   83d60:	f040 82e8 	bne.w	84334 <_vfiprintf_r+0x844>
   83d64:	9b06      	ldr	r3, [sp, #24]
   83d66:	1b5c      	subs	r4, r3, r5
   83d68:	2c00      	cmp	r4, #0
   83d6a:	f340 82e3 	ble.w	84334 <_vfiprintf_r+0x844>
   83d6e:	2c10      	cmp	r4, #16
   83d70:	f340 853c 	ble.w	847ec <_vfiprintf_r+0xcfc>
   83d74:	f8df 9284 	ldr.w	r9, [pc, #644]	; 83ffc <_vfiprintf_r+0x50c>
   83d78:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   83d7c:	46dc      	mov	ip, fp
   83d7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83d80:	46c3      	mov	fp, r8
   83d82:	2310      	movs	r3, #16
   83d84:	46a8      	mov	r8, r5
   83d86:	4670      	mov	r0, lr
   83d88:	464d      	mov	r5, r9
   83d8a:	f8dd 9014 	ldr.w	r9, [sp, #20]
   83d8e:	e007      	b.n	83da0 <_vfiprintf_r+0x2b0>
   83d90:	f100 0e02 	add.w	lr, r0, #2
   83d94:	4608      	mov	r0, r1
   83d96:	f10c 0c08 	add.w	ip, ip, #8
   83d9a:	3c10      	subs	r4, #16
   83d9c:	2c10      	cmp	r4, #16
   83d9e:	dd13      	ble.n	83dc8 <_vfiprintf_r+0x2d8>
   83da0:	1c41      	adds	r1, r0, #1
   83da2:	3210      	adds	r2, #16
   83da4:	2907      	cmp	r1, #7
   83da6:	920f      	str	r2, [sp, #60]	; 0x3c
   83da8:	f8cc 5000 	str.w	r5, [ip]
   83dac:	f8cc 3004 	str.w	r3, [ip, #4]
   83db0:	910e      	str	r1, [sp, #56]	; 0x38
   83db2:	dded      	ble.n	83d90 <_vfiprintf_r+0x2a0>
   83db4:	2a00      	cmp	r2, #0
   83db6:	f040 82a5 	bne.w	84304 <_vfiprintf_r+0x814>
   83dba:	3c10      	subs	r4, #16
   83dbc:	2c10      	cmp	r4, #16
   83dbe:	4610      	mov	r0, r2
   83dc0:	f04f 0e01 	mov.w	lr, #1
   83dc4:	46d4      	mov	ip, sl
   83dc6:	dceb      	bgt.n	83da0 <_vfiprintf_r+0x2b0>
   83dc8:	46a9      	mov	r9, r5
   83dca:	4670      	mov	r0, lr
   83dcc:	4645      	mov	r5, r8
   83dce:	46d8      	mov	r8, fp
   83dd0:	46e3      	mov	fp, ip
   83dd2:	4422      	add	r2, r4
   83dd4:	2807      	cmp	r0, #7
   83dd6:	920f      	str	r2, [sp, #60]	; 0x3c
   83dd8:	f8cb 9000 	str.w	r9, [fp]
   83ddc:	f8cb 4004 	str.w	r4, [fp, #4]
   83de0:	900e      	str	r0, [sp, #56]	; 0x38
   83de2:	f300 836d 	bgt.w	844c0 <_vfiprintf_r+0x9d0>
   83de6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   83dea:	f10b 0b08 	add.w	fp, fp, #8
   83dee:	f100 0e01 	add.w	lr, r0, #1
   83df2:	2b00      	cmp	r3, #0
   83df4:	f040 82a7 	bne.w	84346 <_vfiprintf_r+0x856>
   83df8:	9b07      	ldr	r3, [sp, #28]
   83dfa:	2b00      	cmp	r3, #0
   83dfc:	f000 82ba 	beq.w	84374 <_vfiprintf_r+0x884>
   83e00:	3202      	adds	r2, #2
   83e02:	a90c      	add	r1, sp, #48	; 0x30
   83e04:	2302      	movs	r3, #2
   83e06:	f1be 0f07 	cmp.w	lr, #7
   83e0a:	920f      	str	r2, [sp, #60]	; 0x3c
   83e0c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   83e10:	e88b 000a 	stmia.w	fp, {r1, r3}
   83e14:	f340 8370 	ble.w	844f8 <_vfiprintf_r+0xa08>
   83e18:	2a00      	cmp	r2, #0
   83e1a:	f040 8400 	bne.w	8461e <_vfiprintf_r+0xb2e>
   83e1e:	9b08      	ldr	r3, [sp, #32]
   83e20:	f04f 0e01 	mov.w	lr, #1
   83e24:	2b80      	cmp	r3, #128	; 0x80
   83e26:	4610      	mov	r0, r2
   83e28:	46d3      	mov	fp, sl
   83e2a:	f040 82a7 	bne.w	8437c <_vfiprintf_r+0x88c>
   83e2e:	9b06      	ldr	r3, [sp, #24]
   83e30:	1b5c      	subs	r4, r3, r5
   83e32:	2c00      	cmp	r4, #0
   83e34:	f340 82a2 	ble.w	8437c <_vfiprintf_r+0x88c>
   83e38:	2c10      	cmp	r4, #16
   83e3a:	f340 84f8 	ble.w	8482e <_vfiprintf_r+0xd3e>
   83e3e:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 84000 <_vfiprintf_r+0x510>
   83e42:	46de      	mov	lr, fp
   83e44:	2310      	movs	r3, #16
   83e46:	46c3      	mov	fp, r8
   83e48:	46a8      	mov	r8, r5
   83e4a:	464d      	mov	r5, r9
   83e4c:	f8dd 9014 	ldr.w	r9, [sp, #20]
   83e50:	e007      	b.n	83e62 <_vfiprintf_r+0x372>
   83e52:	f100 0c02 	add.w	ip, r0, #2
   83e56:	4608      	mov	r0, r1
   83e58:	f10e 0e08 	add.w	lr, lr, #8
   83e5c:	3c10      	subs	r4, #16
   83e5e:	2c10      	cmp	r4, #16
   83e60:	dd13      	ble.n	83e8a <_vfiprintf_r+0x39a>
   83e62:	1c41      	adds	r1, r0, #1
   83e64:	3210      	adds	r2, #16
   83e66:	2907      	cmp	r1, #7
   83e68:	920f      	str	r2, [sp, #60]	; 0x3c
   83e6a:	f8ce 5000 	str.w	r5, [lr]
   83e6e:	f8ce 3004 	str.w	r3, [lr, #4]
   83e72:	910e      	str	r1, [sp, #56]	; 0x38
   83e74:	dded      	ble.n	83e52 <_vfiprintf_r+0x362>
   83e76:	2a00      	cmp	r2, #0
   83e78:	f040 830c 	bne.w	84494 <_vfiprintf_r+0x9a4>
   83e7c:	3c10      	subs	r4, #16
   83e7e:	2c10      	cmp	r4, #16
   83e80:	f04f 0c01 	mov.w	ip, #1
   83e84:	4610      	mov	r0, r2
   83e86:	46d6      	mov	lr, sl
   83e88:	dceb      	bgt.n	83e62 <_vfiprintf_r+0x372>
   83e8a:	46a9      	mov	r9, r5
   83e8c:	4645      	mov	r5, r8
   83e8e:	46d8      	mov	r8, fp
   83e90:	46f3      	mov	fp, lr
   83e92:	4422      	add	r2, r4
   83e94:	f1bc 0f07 	cmp.w	ip, #7
   83e98:	920f      	str	r2, [sp, #60]	; 0x3c
   83e9a:	f8cb 9000 	str.w	r9, [fp]
   83e9e:	f8cb 4004 	str.w	r4, [fp, #4]
   83ea2:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   83ea6:	f300 83c8 	bgt.w	8463a <_vfiprintf_r+0xb4a>
   83eaa:	9b01      	ldr	r3, [sp, #4]
   83eac:	9903      	ldr	r1, [sp, #12]
   83eae:	f10b 0b08 	add.w	fp, fp, #8
   83eb2:	1a5c      	subs	r4, r3, r1
   83eb4:	2c00      	cmp	r4, #0
   83eb6:	f10c 0e01 	add.w	lr, ip, #1
   83eba:	4660      	mov	r0, ip
   83ebc:	f300 8264 	bgt.w	84388 <_vfiprintf_r+0x898>
   83ec0:	9903      	ldr	r1, [sp, #12]
   83ec2:	f1be 0f07 	cmp.w	lr, #7
   83ec6:	440a      	add	r2, r1
   83ec8:	920f      	str	r2, [sp, #60]	; 0x3c
   83eca:	f8cb 7000 	str.w	r7, [fp]
   83ece:	f8cb 1004 	str.w	r1, [fp, #4]
   83ed2:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   83ed6:	f340 82c5 	ble.w	84464 <_vfiprintf_r+0x974>
   83eda:	2a00      	cmp	r2, #0
   83edc:	f040 8332 	bne.w	84544 <_vfiprintf_r+0xa54>
   83ee0:	0770      	lsls	r0, r6, #29
   83ee2:	920e      	str	r2, [sp, #56]	; 0x38
   83ee4:	d538      	bpl.n	83f58 <_vfiprintf_r+0x468>
   83ee6:	9b06      	ldr	r3, [sp, #24]
   83ee8:	1b5c      	subs	r4, r3, r5
   83eea:	2c00      	cmp	r4, #0
   83eec:	dd34      	ble.n	83f58 <_vfiprintf_r+0x468>
   83eee:	46d3      	mov	fp, sl
   83ef0:	2c10      	cmp	r4, #16
   83ef2:	f340 8496 	ble.w	84822 <_vfiprintf_r+0xd32>
   83ef6:	f8df 9104 	ldr.w	r9, [pc, #260]	; 83ffc <_vfiprintf_r+0x50c>
   83efa:	990e      	ldr	r1, [sp, #56]	; 0x38
   83efc:	464f      	mov	r7, r9
   83efe:	2610      	movs	r6, #16
   83f00:	f8dd 9014 	ldr.w	r9, [sp, #20]
   83f04:	e006      	b.n	83f14 <_vfiprintf_r+0x424>
   83f06:	1c88      	adds	r0, r1, #2
   83f08:	4619      	mov	r1, r3
   83f0a:	f10b 0b08 	add.w	fp, fp, #8
   83f0e:	3c10      	subs	r4, #16
   83f10:	2c10      	cmp	r4, #16
   83f12:	dd13      	ble.n	83f3c <_vfiprintf_r+0x44c>
   83f14:	1c4b      	adds	r3, r1, #1
   83f16:	3210      	adds	r2, #16
   83f18:	2b07      	cmp	r3, #7
   83f1a:	920f      	str	r2, [sp, #60]	; 0x3c
   83f1c:	f8cb 7000 	str.w	r7, [fp]
   83f20:	f8cb 6004 	str.w	r6, [fp, #4]
   83f24:	930e      	str	r3, [sp, #56]	; 0x38
   83f26:	ddee      	ble.n	83f06 <_vfiprintf_r+0x416>
   83f28:	2a00      	cmp	r2, #0
   83f2a:	f040 8285 	bne.w	84438 <_vfiprintf_r+0x948>
   83f2e:	3c10      	subs	r4, #16
   83f30:	2c10      	cmp	r4, #16
   83f32:	f04f 0001 	mov.w	r0, #1
   83f36:	4611      	mov	r1, r2
   83f38:	46d3      	mov	fp, sl
   83f3a:	dceb      	bgt.n	83f14 <_vfiprintf_r+0x424>
   83f3c:	46b9      	mov	r9, r7
   83f3e:	4422      	add	r2, r4
   83f40:	2807      	cmp	r0, #7
   83f42:	920f      	str	r2, [sp, #60]	; 0x3c
   83f44:	f8cb 9000 	str.w	r9, [fp]
   83f48:	f8cb 4004 	str.w	r4, [fp, #4]
   83f4c:	900e      	str	r0, [sp, #56]	; 0x38
   83f4e:	f340 8292 	ble.w	84476 <_vfiprintf_r+0x986>
   83f52:	2a00      	cmp	r2, #0
   83f54:	f040 840c 	bne.w	84770 <_vfiprintf_r+0xc80>
   83f58:	9b02      	ldr	r3, [sp, #8]
   83f5a:	9a06      	ldr	r2, [sp, #24]
   83f5c:	42aa      	cmp	r2, r5
   83f5e:	bfac      	ite	ge
   83f60:	189b      	addge	r3, r3, r2
   83f62:	195b      	addlt	r3, r3, r5
   83f64:	9302      	str	r3, [sp, #8]
   83f66:	e290      	b.n	8448a <_vfiprintf_r+0x99a>
   83f68:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   83f6c:	f898 3000 	ldrb.w	r3, [r8]
   83f70:	e625      	b.n	83bbe <_vfiprintf_r+0xce>
   83f72:	9406      	str	r4, [sp, #24]
   83f74:	2900      	cmp	r1, #0
   83f76:	f040 8485 	bne.w	84884 <_vfiprintf_r+0xd94>
   83f7a:	f046 0610 	orr.w	r6, r6, #16
   83f7e:	06b3      	lsls	r3, r6, #26
   83f80:	f140 8304 	bpl.w	8458c <_vfiprintf_r+0xa9c>
   83f84:	9904      	ldr	r1, [sp, #16]
   83f86:	3107      	adds	r1, #7
   83f88:	f021 0107 	bic.w	r1, r1, #7
   83f8c:	e9d1 2300 	ldrd	r2, r3, [r1]
   83f90:	4614      	mov	r4, r2
   83f92:	461d      	mov	r5, r3
   83f94:	3108      	adds	r1, #8
   83f96:	9104      	str	r1, [sp, #16]
   83f98:	2a00      	cmp	r2, #0
   83f9a:	f173 0300 	sbcs.w	r3, r3, #0
   83f9e:	f2c0 837c 	blt.w	8469a <_vfiprintf_r+0xbaa>
   83fa2:	9b01      	ldr	r3, [sp, #4]
   83fa4:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   83fa8:	2b00      	cmp	r3, #0
   83faa:	f2c0 830b 	blt.w	845c4 <_vfiprintf_r+0xad4>
   83fae:	ea54 0305 	orrs.w	r3, r4, r5
   83fb2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   83fb6:	f000 80de 	beq.w	84176 <_vfiprintf_r+0x686>
   83fba:	2d00      	cmp	r5, #0
   83fbc:	bf08      	it	eq
   83fbe:	2c0a      	cmpeq	r4, #10
   83fc0:	f0c0 80de 	bcc.w	84180 <_vfiprintf_r+0x690>
   83fc4:	4657      	mov	r7, sl
   83fc6:	4620      	mov	r0, r4
   83fc8:	4629      	mov	r1, r5
   83fca:	220a      	movs	r2, #10
   83fcc:	2300      	movs	r3, #0
   83fce:	f002 f9f3 	bl	863b8 <__aeabi_uldivmod>
   83fd2:	3230      	adds	r2, #48	; 0x30
   83fd4:	f807 2d01 	strb.w	r2, [r7, #-1]!
   83fd8:	4620      	mov	r0, r4
   83fda:	4629      	mov	r1, r5
   83fdc:	2300      	movs	r3, #0
   83fde:	220a      	movs	r2, #10
   83fe0:	f002 f9ea 	bl	863b8 <__aeabi_uldivmod>
   83fe4:	4604      	mov	r4, r0
   83fe6:	460d      	mov	r5, r1
   83fe8:	ea54 0305 	orrs.w	r3, r4, r5
   83fec:	d1eb      	bne.n	83fc6 <_vfiprintf_r+0x4d6>
   83fee:	ebc7 030a 	rsb	r3, r7, sl
   83ff2:	9303      	str	r3, [sp, #12]
   83ff4:	e6a2      	b.n	83d3c <_vfiprintf_r+0x24c>
   83ff6:	bf00      	nop
   83ff8:	00086794 	.word	0x00086794
   83ffc:	000867b0 	.word	0x000867b0
   84000:	00086770 	.word	0x00086770
   84004:	9406      	str	r4, [sp, #24]
   84006:	2900      	cmp	r1, #0
   84008:	f040 8438 	bne.w	8487c <_vfiprintf_r+0xd8c>
   8400c:	f046 0610 	orr.w	r6, r6, #16
   84010:	f016 0320 	ands.w	r3, r6, #32
   84014:	f000 82a1 	beq.w	8455a <_vfiprintf_r+0xa6a>
   84018:	f04f 0200 	mov.w	r2, #0
   8401c:	9b04      	ldr	r3, [sp, #16]
   8401e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   84022:	3307      	adds	r3, #7
   84024:	f023 0307 	bic.w	r3, r3, #7
   84028:	f103 0208 	add.w	r2, r3, #8
   8402c:	e9d3 4500 	ldrd	r4, r5, [r3]
   84030:	9b01      	ldr	r3, [sp, #4]
   84032:	9204      	str	r2, [sp, #16]
   84034:	2b00      	cmp	r3, #0
   84036:	db0a      	blt.n	8404e <_vfiprintf_r+0x55e>
   84038:	ea54 0305 	orrs.w	r3, r4, r5
   8403c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84040:	d105      	bne.n	8404e <_vfiprintf_r+0x55e>
   84042:	9b01      	ldr	r3, [sp, #4]
   84044:	2b00      	cmp	r3, #0
   84046:	f000 8427 	beq.w	84898 <_vfiprintf_r+0xda8>
   8404a:	2400      	movs	r4, #0
   8404c:	2500      	movs	r5, #0
   8404e:	f04f 0900 	mov.w	r9, #0
   84052:	4657      	mov	r7, sl
   84054:	08e2      	lsrs	r2, r4, #3
   84056:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   8405a:	08e9      	lsrs	r1, r5, #3
   8405c:	f004 0307 	and.w	r3, r4, #7
   84060:	460d      	mov	r5, r1
   84062:	4614      	mov	r4, r2
   84064:	3330      	adds	r3, #48	; 0x30
   84066:	ea54 0205 	orrs.w	r2, r4, r5
   8406a:	f807 3d01 	strb.w	r3, [r7, #-1]!
   8406e:	d1f1      	bne.n	84054 <_vfiprintf_r+0x564>
   84070:	07f4      	lsls	r4, r6, #31
   84072:	d5bc      	bpl.n	83fee <_vfiprintf_r+0x4fe>
   84074:	2b30      	cmp	r3, #48	; 0x30
   84076:	d0ba      	beq.n	83fee <_vfiprintf_r+0x4fe>
   84078:	2230      	movs	r2, #48	; 0x30
   8407a:	1e7b      	subs	r3, r7, #1
   8407c:	f807 2c01 	strb.w	r2, [r7, #-1]
   84080:	ebc3 020a 	rsb	r2, r3, sl
   84084:	9203      	str	r2, [sp, #12]
   84086:	461f      	mov	r7, r3
   84088:	e658      	b.n	83d3c <_vfiprintf_r+0x24c>
   8408a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8408e:	2400      	movs	r4, #0
   84090:	f818 3b01 	ldrb.w	r3, [r8], #1
   84094:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   84098:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   8409c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   840a0:	2a09      	cmp	r2, #9
   840a2:	d9f5      	bls.n	84090 <_vfiprintf_r+0x5a0>
   840a4:	e58d      	b.n	83bc2 <_vfiprintf_r+0xd2>
   840a6:	f898 3000 	ldrb.w	r3, [r8]
   840aa:	2101      	movs	r1, #1
   840ac:	202b      	movs	r0, #43	; 0x2b
   840ae:	e586      	b.n	83bbe <_vfiprintf_r+0xce>
   840b0:	f898 3000 	ldrb.w	r3, [r8]
   840b4:	f108 0501 	add.w	r5, r8, #1
   840b8:	2b2a      	cmp	r3, #42	; 0x2a
   840ba:	f000 83cc 	beq.w	84856 <_vfiprintf_r+0xd66>
   840be:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   840c2:	2a09      	cmp	r2, #9
   840c4:	46a8      	mov	r8, r5
   840c6:	bf98      	it	ls
   840c8:	2500      	movls	r5, #0
   840ca:	f200 83b5 	bhi.w	84838 <_vfiprintf_r+0xd48>
   840ce:	f818 3b01 	ldrb.w	r3, [r8], #1
   840d2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   840d6:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   840da:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   840de:	2a09      	cmp	r2, #9
   840e0:	d9f5      	bls.n	840ce <_vfiprintf_r+0x5de>
   840e2:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
   840e6:	9201      	str	r2, [sp, #4]
   840e8:	e56b      	b.n	83bc2 <_vfiprintf_r+0xd2>
   840ea:	9406      	str	r4, [sp, #24]
   840ec:	2900      	cmp	r1, #0
   840ee:	d08f      	beq.n	84010 <_vfiprintf_r+0x520>
   840f0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   840f4:	e78c      	b.n	84010 <_vfiprintf_r+0x520>
   840f6:	f04f 0300 	mov.w	r3, #0
   840fa:	9a04      	ldr	r2, [sp, #16]
   840fc:	9406      	str	r4, [sp, #24]
   840fe:	6817      	ldr	r7, [r2, #0]
   84100:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84104:	1d14      	adds	r4, r2, #4
   84106:	9b01      	ldr	r3, [sp, #4]
   84108:	2f00      	cmp	r7, #0
   8410a:	f000 837f 	beq.w	8480c <_vfiprintf_r+0xd1c>
   8410e:	2b00      	cmp	r3, #0
   84110:	f2c0 8353 	blt.w	847ba <_vfiprintf_r+0xcca>
   84114:	461a      	mov	r2, r3
   84116:	2100      	movs	r1, #0
   84118:	4638      	mov	r0, r7
   8411a:	f001 fc4d 	bl	859b8 <memchr>
   8411e:	2800      	cmp	r0, #0
   84120:	f000 838e 	beq.w	84840 <_vfiprintf_r+0xd50>
   84124:	1bc3      	subs	r3, r0, r7
   84126:	9303      	str	r3, [sp, #12]
   84128:	2300      	movs	r3, #0
   8412a:	9404      	str	r4, [sp, #16]
   8412c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   84130:	9301      	str	r3, [sp, #4]
   84132:	e603      	b.n	83d3c <_vfiprintf_r+0x24c>
   84134:	9406      	str	r4, [sp, #24]
   84136:	2900      	cmp	r1, #0
   84138:	f040 839d 	bne.w	84876 <_vfiprintf_r+0xd86>
   8413c:	f016 0920 	ands.w	r9, r6, #32
   84140:	d134      	bne.n	841ac <_vfiprintf_r+0x6bc>
   84142:	f016 0310 	ands.w	r3, r6, #16
   84146:	d103      	bne.n	84150 <_vfiprintf_r+0x660>
   84148:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   8414c:	f040 831f 	bne.w	8478e <_vfiprintf_r+0xc9e>
   84150:	9a04      	ldr	r2, [sp, #16]
   84152:	2500      	movs	r5, #0
   84154:	4613      	mov	r3, r2
   84156:	6814      	ldr	r4, [r2, #0]
   84158:	9a01      	ldr	r2, [sp, #4]
   8415a:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   8415e:	2a00      	cmp	r2, #0
   84160:	f103 0304 	add.w	r3, r3, #4
   84164:	f2c0 8327 	blt.w	847b6 <_vfiprintf_r+0xcc6>
   84168:	ea54 0205 	orrs.w	r2, r4, r5
   8416c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84170:	9304      	str	r3, [sp, #16]
   84172:	f47f af22 	bne.w	83fba <_vfiprintf_r+0x4ca>
   84176:	9b01      	ldr	r3, [sp, #4]
   84178:	2b00      	cmp	r3, #0
   8417a:	f43f addb 	beq.w	83d34 <_vfiprintf_r+0x244>
   8417e:	2400      	movs	r4, #0
   84180:	af2a      	add	r7, sp, #168	; 0xa8
   84182:	3430      	adds	r4, #48	; 0x30
   84184:	f807 4d41 	strb.w	r4, [r7, #-65]!
   84188:	ebc7 030a 	rsb	r3, r7, sl
   8418c:	9303      	str	r3, [sp, #12]
   8418e:	e5d5      	b.n	83d3c <_vfiprintf_r+0x24c>
   84190:	f046 0620 	orr.w	r6, r6, #32
   84194:	f898 3000 	ldrb.w	r3, [r8]
   84198:	e511      	b.n	83bbe <_vfiprintf_r+0xce>
   8419a:	9406      	str	r4, [sp, #24]
   8419c:	2900      	cmp	r1, #0
   8419e:	f040 8375 	bne.w	8488c <_vfiprintf_r+0xd9c>
   841a2:	f046 0610 	orr.w	r6, r6, #16
   841a6:	f016 0920 	ands.w	r9, r6, #32
   841aa:	d0ca      	beq.n	84142 <_vfiprintf_r+0x652>
   841ac:	f04f 0200 	mov.w	r2, #0
   841b0:	9b04      	ldr	r3, [sp, #16]
   841b2:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   841b6:	3307      	adds	r3, #7
   841b8:	f023 0307 	bic.w	r3, r3, #7
   841bc:	f103 0208 	add.w	r2, r3, #8
   841c0:	e9d3 4500 	ldrd	r4, r5, [r3]
   841c4:	9b01      	ldr	r3, [sp, #4]
   841c6:	9204      	str	r2, [sp, #16]
   841c8:	2b00      	cmp	r3, #0
   841ca:	f2c0 81f9 	blt.w	845c0 <_vfiprintf_r+0xad0>
   841ce:	ea54 0305 	orrs.w	r3, r4, r5
   841d2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   841d6:	f04f 0900 	mov.w	r9, #0
   841da:	f47f aeee 	bne.w	83fba <_vfiprintf_r+0x4ca>
   841de:	e7ca      	b.n	84176 <_vfiprintf_r+0x686>
   841e0:	9406      	str	r4, [sp, #24]
   841e2:	2900      	cmp	r1, #0
   841e4:	f040 8355 	bne.w	84892 <_vfiprintf_r+0xda2>
   841e8:	06b2      	lsls	r2, r6, #26
   841ea:	48b2      	ldr	r0, [pc, #712]	; (844b4 <_vfiprintf_r+0x9c4>)
   841ec:	d541      	bpl.n	84272 <_vfiprintf_r+0x782>
   841ee:	9a04      	ldr	r2, [sp, #16]
   841f0:	3207      	adds	r2, #7
   841f2:	f022 0207 	bic.w	r2, r2, #7
   841f6:	f102 0108 	add.w	r1, r2, #8
   841fa:	9104      	str	r1, [sp, #16]
   841fc:	e9d2 4500 	ldrd	r4, r5, [r2]
   84200:	f016 0901 	ands.w	r9, r6, #1
   84204:	f000 817e 	beq.w	84504 <_vfiprintf_r+0xa14>
   84208:	ea54 0205 	orrs.w	r2, r4, r5
   8420c:	f040 822b 	bne.w	84666 <_vfiprintf_r+0xb76>
   84210:	f04f 0300 	mov.w	r3, #0
   84214:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84218:	9b01      	ldr	r3, [sp, #4]
   8421a:	2b00      	cmp	r3, #0
   8421c:	f2c0 82f3 	blt.w	84806 <_vfiprintf_r+0xd16>
   84220:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84224:	e581      	b.n	83d2a <_vfiprintf_r+0x23a>
   84226:	9a04      	ldr	r2, [sp, #16]
   84228:	f04f 0100 	mov.w	r1, #0
   8422c:	6813      	ldr	r3, [r2, #0]
   8422e:	2501      	movs	r5, #1
   84230:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   84234:	4613      	mov	r3, r2
   84236:	3304      	adds	r3, #4
   84238:	9406      	str	r4, [sp, #24]
   8423a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8423e:	9304      	str	r3, [sp, #16]
   84240:	9503      	str	r5, [sp, #12]
   84242:	af10      	add	r7, sp, #64	; 0x40
   84244:	2300      	movs	r3, #0
   84246:	9301      	str	r3, [sp, #4]
   84248:	e582      	b.n	83d50 <_vfiprintf_r+0x260>
   8424a:	f898 3000 	ldrb.w	r3, [r8]
   8424e:	2800      	cmp	r0, #0
   84250:	f47f acb5 	bne.w	83bbe <_vfiprintf_r+0xce>
   84254:	2101      	movs	r1, #1
   84256:	2020      	movs	r0, #32
   84258:	e4b1      	b.n	83bbe <_vfiprintf_r+0xce>
   8425a:	f046 0601 	orr.w	r6, r6, #1
   8425e:	f898 3000 	ldrb.w	r3, [r8]
   84262:	e4ac      	b.n	83bbe <_vfiprintf_r+0xce>
   84264:	9406      	str	r4, [sp, #24]
   84266:	2900      	cmp	r1, #0
   84268:	f040 832a 	bne.w	848c0 <_vfiprintf_r+0xdd0>
   8426c:	06b2      	lsls	r2, r6, #26
   8426e:	4892      	ldr	r0, [pc, #584]	; (844b8 <_vfiprintf_r+0x9c8>)
   84270:	d4bd      	bmi.n	841ee <_vfiprintf_r+0x6fe>
   84272:	9904      	ldr	r1, [sp, #16]
   84274:	06f7      	lsls	r7, r6, #27
   84276:	460a      	mov	r2, r1
   84278:	f100 819d 	bmi.w	845b6 <_vfiprintf_r+0xac6>
   8427c:	0675      	lsls	r5, r6, #25
   8427e:	f140 819a 	bpl.w	845b6 <_vfiprintf_r+0xac6>
   84282:	3204      	adds	r2, #4
   84284:	880c      	ldrh	r4, [r1, #0]
   84286:	9204      	str	r2, [sp, #16]
   84288:	2500      	movs	r5, #0
   8428a:	e7b9      	b.n	84200 <_vfiprintf_r+0x710>
   8428c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   84290:	f898 3000 	ldrb.w	r3, [r8]
   84294:	e493      	b.n	83bbe <_vfiprintf_r+0xce>
   84296:	f898 3000 	ldrb.w	r3, [r8]
   8429a:	2b6c      	cmp	r3, #108	; 0x6c
   8429c:	bf03      	ittte	eq
   8429e:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   842a2:	f046 0620 	orreq.w	r6, r6, #32
   842a6:	f108 0801 	addeq.w	r8, r8, #1
   842aa:	f046 0610 	orrne.w	r6, r6, #16
   842ae:	e486      	b.n	83bbe <_vfiprintf_r+0xce>
   842b0:	2900      	cmp	r1, #0
   842b2:	f040 8302 	bne.w	848ba <_vfiprintf_r+0xdca>
   842b6:	06b4      	lsls	r4, r6, #26
   842b8:	f140 8220 	bpl.w	846fc <_vfiprintf_r+0xc0c>
   842bc:	9a04      	ldr	r2, [sp, #16]
   842be:	4613      	mov	r3, r2
   842c0:	3304      	adds	r3, #4
   842c2:	9304      	str	r3, [sp, #16]
   842c4:	9b02      	ldr	r3, [sp, #8]
   842c6:	6811      	ldr	r1, [r2, #0]
   842c8:	17dd      	asrs	r5, r3, #31
   842ca:	461a      	mov	r2, r3
   842cc:	462b      	mov	r3, r5
   842ce:	e9c1 2300 	strd	r2, r3, [r1]
   842d2:	e43e      	b.n	83b52 <_vfiprintf_r+0x62>
   842d4:	9406      	str	r4, [sp, #24]
   842d6:	2900      	cmp	r1, #0
   842d8:	f43f ae51 	beq.w	83f7e <_vfiprintf_r+0x48e>
   842dc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   842e0:	e64d      	b.n	83f7e <_vfiprintf_r+0x48e>
   842e2:	9406      	str	r4, [sp, #24]
   842e4:	2900      	cmp	r1, #0
   842e6:	f040 82e5 	bne.w	848b4 <_vfiprintf_r+0xdc4>
   842ea:	2b00      	cmp	r3, #0
   842ec:	f000 8094 	beq.w	84418 <_vfiprintf_r+0x928>
   842f0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   842f4:	f04f 0300 	mov.w	r3, #0
   842f8:	2501      	movs	r5, #1
   842fa:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   842fe:	9503      	str	r5, [sp, #12]
   84300:	af10      	add	r7, sp, #64	; 0x40
   84302:	e79f      	b.n	84244 <_vfiprintf_r+0x754>
   84304:	aa0d      	add	r2, sp, #52	; 0x34
   84306:	9900      	ldr	r1, [sp, #0]
   84308:	4648      	mov	r0, r9
   8430a:	9309      	str	r3, [sp, #36]	; 0x24
   8430c:	f7ff fbb4 	bl	83a78 <__sprint_r.part.0>
   84310:	2800      	cmp	r0, #0
   84312:	f040 8088 	bne.w	84426 <_vfiprintf_r+0x936>
   84316:	980e      	ldr	r0, [sp, #56]	; 0x38
   84318:	46d4      	mov	ip, sl
   8431a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8431c:	f100 0e01 	add.w	lr, r0, #1
   84320:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84322:	e53a      	b.n	83d9a <_vfiprintf_r+0x2aa>
   84324:	aa0d      	add	r2, sp, #52	; 0x34
   84326:	9900      	ldr	r1, [sp, #0]
   84328:	9805      	ldr	r0, [sp, #20]
   8432a:	f7ff fba5 	bl	83a78 <__sprint_r.part.0>
   8432e:	2800      	cmp	r0, #0
   84330:	d179      	bne.n	84426 <_vfiprintf_r+0x936>
   84332:	46d3      	mov	fp, sl
   84334:	980e      	ldr	r0, [sp, #56]	; 0x38
   84336:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   8433a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8433c:	f100 0e01 	add.w	lr, r0, #1
   84340:	2b00      	cmp	r3, #0
   84342:	f43f ad59 	beq.w	83df8 <_vfiprintf_r+0x308>
   84346:	3201      	adds	r2, #1
   84348:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   8434c:	2301      	movs	r3, #1
   8434e:	f1be 0f07 	cmp.w	lr, #7
   84352:	920f      	str	r2, [sp, #60]	; 0x3c
   84354:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   84358:	e88b 000a 	stmia.w	fp, {r1, r3}
   8435c:	f340 80c0 	ble.w	844e0 <_vfiprintf_r+0x9f0>
   84360:	2a00      	cmp	r2, #0
   84362:	f040 814d 	bne.w	84600 <_vfiprintf_r+0xb10>
   84366:	9907      	ldr	r1, [sp, #28]
   84368:	2900      	cmp	r1, #0
   8436a:	f040 80bf 	bne.w	844ec <_vfiprintf_r+0x9fc>
   8436e:	469e      	mov	lr, r3
   84370:	4610      	mov	r0, r2
   84372:	46d3      	mov	fp, sl
   84374:	9b08      	ldr	r3, [sp, #32]
   84376:	2b80      	cmp	r3, #128	; 0x80
   84378:	f43f ad59 	beq.w	83e2e <_vfiprintf_r+0x33e>
   8437c:	9b01      	ldr	r3, [sp, #4]
   8437e:	9903      	ldr	r1, [sp, #12]
   84380:	1a5c      	subs	r4, r3, r1
   84382:	2c00      	cmp	r4, #0
   84384:	f77f ad9c 	ble.w	83ec0 <_vfiprintf_r+0x3d0>
   84388:	2c10      	cmp	r4, #16
   8438a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 844bc <_vfiprintf_r+0x9cc>
   8438e:	dd25      	ble.n	843dc <_vfiprintf_r+0x8ec>
   84390:	46dc      	mov	ip, fp
   84392:	2310      	movs	r3, #16
   84394:	46c3      	mov	fp, r8
   84396:	46a8      	mov	r8, r5
   84398:	464d      	mov	r5, r9
   8439a:	f8dd 9014 	ldr.w	r9, [sp, #20]
   8439e:	e007      	b.n	843b0 <_vfiprintf_r+0x8c0>
   843a0:	f100 0e02 	add.w	lr, r0, #2
   843a4:	4608      	mov	r0, r1
   843a6:	f10c 0c08 	add.w	ip, ip, #8
   843aa:	3c10      	subs	r4, #16
   843ac:	2c10      	cmp	r4, #16
   843ae:	dd11      	ble.n	843d4 <_vfiprintf_r+0x8e4>
   843b0:	1c41      	adds	r1, r0, #1
   843b2:	3210      	adds	r2, #16
   843b4:	2907      	cmp	r1, #7
   843b6:	920f      	str	r2, [sp, #60]	; 0x3c
   843b8:	f8cc 5000 	str.w	r5, [ip]
   843bc:	f8cc 3004 	str.w	r3, [ip, #4]
   843c0:	910e      	str	r1, [sp, #56]	; 0x38
   843c2:	dded      	ble.n	843a0 <_vfiprintf_r+0x8b0>
   843c4:	b9d2      	cbnz	r2, 843fc <_vfiprintf_r+0x90c>
   843c6:	3c10      	subs	r4, #16
   843c8:	2c10      	cmp	r4, #16
   843ca:	f04f 0e01 	mov.w	lr, #1
   843ce:	4610      	mov	r0, r2
   843d0:	46d4      	mov	ip, sl
   843d2:	dced      	bgt.n	843b0 <_vfiprintf_r+0x8c0>
   843d4:	46a9      	mov	r9, r5
   843d6:	4645      	mov	r5, r8
   843d8:	46d8      	mov	r8, fp
   843da:	46e3      	mov	fp, ip
   843dc:	4422      	add	r2, r4
   843de:	f1be 0f07 	cmp.w	lr, #7
   843e2:	920f      	str	r2, [sp, #60]	; 0x3c
   843e4:	f8cb 9000 	str.w	r9, [fp]
   843e8:	f8cb 4004 	str.w	r4, [fp, #4]
   843ec:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   843f0:	dc2e      	bgt.n	84450 <_vfiprintf_r+0x960>
   843f2:	f10b 0b08 	add.w	fp, fp, #8
   843f6:	f10e 0e01 	add.w	lr, lr, #1
   843fa:	e561      	b.n	83ec0 <_vfiprintf_r+0x3d0>
   843fc:	aa0d      	add	r2, sp, #52	; 0x34
   843fe:	9900      	ldr	r1, [sp, #0]
   84400:	4648      	mov	r0, r9
   84402:	9301      	str	r3, [sp, #4]
   84404:	f7ff fb38 	bl	83a78 <__sprint_r.part.0>
   84408:	b968      	cbnz	r0, 84426 <_vfiprintf_r+0x936>
   8440a:	980e      	ldr	r0, [sp, #56]	; 0x38
   8440c:	46d4      	mov	ip, sl
   8440e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84410:	f100 0e01 	add.w	lr, r0, #1
   84414:	9b01      	ldr	r3, [sp, #4]
   84416:	e7c8      	b.n	843aa <_vfiprintf_r+0x8ba>
   84418:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8441a:	b123      	cbz	r3, 84426 <_vfiprintf_r+0x936>
   8441c:	9805      	ldr	r0, [sp, #20]
   8441e:	aa0d      	add	r2, sp, #52	; 0x34
   84420:	9900      	ldr	r1, [sp, #0]
   84422:	f7ff fb29 	bl	83a78 <__sprint_r.part.0>
   84426:	9b00      	ldr	r3, [sp, #0]
   84428:	899b      	ldrh	r3, [r3, #12]
   8442a:	065a      	lsls	r2, r3, #25
   8442c:	f100 817b 	bmi.w	84726 <_vfiprintf_r+0xc36>
   84430:	9802      	ldr	r0, [sp, #8]
   84432:	b02b      	add	sp, #172	; 0xac
   84434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84438:	aa0d      	add	r2, sp, #52	; 0x34
   8443a:	9900      	ldr	r1, [sp, #0]
   8443c:	4648      	mov	r0, r9
   8443e:	f7ff fb1b 	bl	83a78 <__sprint_r.part.0>
   84442:	2800      	cmp	r0, #0
   84444:	d1ef      	bne.n	84426 <_vfiprintf_r+0x936>
   84446:	990e      	ldr	r1, [sp, #56]	; 0x38
   84448:	46d3      	mov	fp, sl
   8444a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8444c:	1c48      	adds	r0, r1, #1
   8444e:	e55e      	b.n	83f0e <_vfiprintf_r+0x41e>
   84450:	2a00      	cmp	r2, #0
   84452:	f040 80fa 	bne.w	8464a <_vfiprintf_r+0xb5a>
   84456:	46d3      	mov	fp, sl
   84458:	9a03      	ldr	r2, [sp, #12]
   8445a:	2301      	movs	r3, #1
   8445c:	921b      	str	r2, [sp, #108]	; 0x6c
   8445e:	920f      	str	r2, [sp, #60]	; 0x3c
   84460:	971a      	str	r7, [sp, #104]	; 0x68
   84462:	930e      	str	r3, [sp, #56]	; 0x38
   84464:	f10b 0b08 	add.w	fp, fp, #8
   84468:	0771      	lsls	r1, r6, #29
   8446a:	d504      	bpl.n	84476 <_vfiprintf_r+0x986>
   8446c:	9b06      	ldr	r3, [sp, #24]
   8446e:	1b5c      	subs	r4, r3, r5
   84470:	2c00      	cmp	r4, #0
   84472:	f73f ad3d 	bgt.w	83ef0 <_vfiprintf_r+0x400>
   84476:	9b02      	ldr	r3, [sp, #8]
   84478:	9906      	ldr	r1, [sp, #24]
   8447a:	42a9      	cmp	r1, r5
   8447c:	bfac      	ite	ge
   8447e:	185b      	addge	r3, r3, r1
   84480:	195b      	addlt	r3, r3, r5
   84482:	9302      	str	r3, [sp, #8]
   84484:	2a00      	cmp	r2, #0
   84486:	f040 80ad 	bne.w	845e4 <_vfiprintf_r+0xaf4>
   8448a:	2300      	movs	r3, #0
   8448c:	930e      	str	r3, [sp, #56]	; 0x38
   8448e:	46d3      	mov	fp, sl
   84490:	f7ff bb5f 	b.w	83b52 <_vfiprintf_r+0x62>
   84494:	aa0d      	add	r2, sp, #52	; 0x34
   84496:	9900      	ldr	r1, [sp, #0]
   84498:	4648      	mov	r0, r9
   8449a:	9307      	str	r3, [sp, #28]
   8449c:	f7ff faec 	bl	83a78 <__sprint_r.part.0>
   844a0:	2800      	cmp	r0, #0
   844a2:	d1c0      	bne.n	84426 <_vfiprintf_r+0x936>
   844a4:	980e      	ldr	r0, [sp, #56]	; 0x38
   844a6:	46d6      	mov	lr, sl
   844a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   844aa:	f100 0c01 	add.w	ip, r0, #1
   844ae:	9b07      	ldr	r3, [sp, #28]
   844b0:	e4d4      	b.n	83e5c <_vfiprintf_r+0x36c>
   844b2:	bf00      	nop
   844b4:	00086780 	.word	0x00086780
   844b8:	00086794 	.word	0x00086794
   844bc:	00086770 	.word	0x00086770
   844c0:	2a00      	cmp	r2, #0
   844c2:	f47f af2f 	bne.w	84324 <_vfiprintf_r+0x834>
   844c6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   844ca:	2b00      	cmp	r3, #0
   844cc:	f000 80f3 	beq.w	846b6 <_vfiprintf_r+0xbc6>
   844d0:	2301      	movs	r3, #1
   844d2:	461a      	mov	r2, r3
   844d4:	469e      	mov	lr, r3
   844d6:	46d3      	mov	fp, sl
   844d8:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   844dc:	931b      	str	r3, [sp, #108]	; 0x6c
   844de:	911a      	str	r1, [sp, #104]	; 0x68
   844e0:	4670      	mov	r0, lr
   844e2:	f10b 0b08 	add.w	fp, fp, #8
   844e6:	f10e 0e01 	add.w	lr, lr, #1
   844ea:	e485      	b.n	83df8 <_vfiprintf_r+0x308>
   844ec:	469e      	mov	lr, r3
   844ee:	46d3      	mov	fp, sl
   844f0:	a90c      	add	r1, sp, #48	; 0x30
   844f2:	2202      	movs	r2, #2
   844f4:	911a      	str	r1, [sp, #104]	; 0x68
   844f6:	921b      	str	r2, [sp, #108]	; 0x6c
   844f8:	4670      	mov	r0, lr
   844fa:	f10b 0b08 	add.w	fp, fp, #8
   844fe:	f10e 0e01 	add.w	lr, lr, #1
   84502:	e737      	b.n	84374 <_vfiprintf_r+0x884>
   84504:	9b01      	ldr	r3, [sp, #4]
   84506:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   8450a:	2b00      	cmp	r3, #0
   8450c:	f2c0 811b 	blt.w	84746 <_vfiprintf_r+0xc56>
   84510:	ea54 0305 	orrs.w	r3, r4, r5
   84514:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84518:	f43f ac07 	beq.w	83d2a <_vfiprintf_r+0x23a>
   8451c:	4657      	mov	r7, sl
   8451e:	0923      	lsrs	r3, r4, #4
   84520:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   84524:	0929      	lsrs	r1, r5, #4
   84526:	f004 020f 	and.w	r2, r4, #15
   8452a:	460d      	mov	r5, r1
   8452c:	461c      	mov	r4, r3
   8452e:	5c83      	ldrb	r3, [r0, r2]
   84530:	f807 3d01 	strb.w	r3, [r7, #-1]!
   84534:	ea54 0305 	orrs.w	r3, r4, r5
   84538:	d1f1      	bne.n	8451e <_vfiprintf_r+0xa2e>
   8453a:	ebc7 030a 	rsb	r3, r7, sl
   8453e:	9303      	str	r3, [sp, #12]
   84540:	f7ff bbfc 	b.w	83d3c <_vfiprintf_r+0x24c>
   84544:	aa0d      	add	r2, sp, #52	; 0x34
   84546:	9900      	ldr	r1, [sp, #0]
   84548:	9805      	ldr	r0, [sp, #20]
   8454a:	f7ff fa95 	bl	83a78 <__sprint_r.part.0>
   8454e:	2800      	cmp	r0, #0
   84550:	f47f af69 	bne.w	84426 <_vfiprintf_r+0x936>
   84554:	46d3      	mov	fp, sl
   84556:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84558:	e786      	b.n	84468 <_vfiprintf_r+0x978>
   8455a:	f016 0210 	ands.w	r2, r6, #16
   8455e:	f000 80b5 	beq.w	846cc <_vfiprintf_r+0xbdc>
   84562:	9904      	ldr	r1, [sp, #16]
   84564:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84568:	460a      	mov	r2, r1
   8456a:	680c      	ldr	r4, [r1, #0]
   8456c:	9901      	ldr	r1, [sp, #4]
   8456e:	3204      	adds	r2, #4
   84570:	2900      	cmp	r1, #0
   84572:	f04f 0500 	mov.w	r5, #0
   84576:	f2c0 8152 	blt.w	8481e <_vfiprintf_r+0xd2e>
   8457a:	ea54 0105 	orrs.w	r1, r4, r5
   8457e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84582:	9204      	str	r2, [sp, #16]
   84584:	f43f ad5d 	beq.w	84042 <_vfiprintf_r+0x552>
   84588:	4699      	mov	r9, r3
   8458a:	e562      	b.n	84052 <_vfiprintf_r+0x562>
   8458c:	9a04      	ldr	r2, [sp, #16]
   8458e:	06f7      	lsls	r7, r6, #27
   84590:	4613      	mov	r3, r2
   84592:	d409      	bmi.n	845a8 <_vfiprintf_r+0xab8>
   84594:	0675      	lsls	r5, r6, #25
   84596:	d507      	bpl.n	845a8 <_vfiprintf_r+0xab8>
   84598:	f9b2 4000 	ldrsh.w	r4, [r2]
   8459c:	3304      	adds	r3, #4
   8459e:	17e5      	asrs	r5, r4, #31
   845a0:	9304      	str	r3, [sp, #16]
   845a2:	4622      	mov	r2, r4
   845a4:	462b      	mov	r3, r5
   845a6:	e4f7      	b.n	83f98 <_vfiprintf_r+0x4a8>
   845a8:	681c      	ldr	r4, [r3, #0]
   845aa:	3304      	adds	r3, #4
   845ac:	17e5      	asrs	r5, r4, #31
   845ae:	9304      	str	r3, [sp, #16]
   845b0:	4622      	mov	r2, r4
   845b2:	462b      	mov	r3, r5
   845b4:	e4f0      	b.n	83f98 <_vfiprintf_r+0x4a8>
   845b6:	6814      	ldr	r4, [r2, #0]
   845b8:	3204      	adds	r2, #4
   845ba:	9204      	str	r2, [sp, #16]
   845bc:	2500      	movs	r5, #0
   845be:	e61f      	b.n	84200 <_vfiprintf_r+0x710>
   845c0:	f04f 0900 	mov.w	r9, #0
   845c4:	ea54 0305 	orrs.w	r3, r4, r5
   845c8:	f47f acf7 	bne.w	83fba <_vfiprintf_r+0x4ca>
   845cc:	e5d8      	b.n	84180 <_vfiprintf_r+0x690>
   845ce:	aa0d      	add	r2, sp, #52	; 0x34
   845d0:	9900      	ldr	r1, [sp, #0]
   845d2:	9805      	ldr	r0, [sp, #20]
   845d4:	f7ff fa50 	bl	83a78 <__sprint_r.part.0>
   845d8:	2800      	cmp	r0, #0
   845da:	f47f af24 	bne.w	84426 <_vfiprintf_r+0x936>
   845de:	46d3      	mov	fp, sl
   845e0:	f7ff bb51 	b.w	83c86 <_vfiprintf_r+0x196>
   845e4:	aa0d      	add	r2, sp, #52	; 0x34
   845e6:	9900      	ldr	r1, [sp, #0]
   845e8:	9805      	ldr	r0, [sp, #20]
   845ea:	f7ff fa45 	bl	83a78 <__sprint_r.part.0>
   845ee:	2800      	cmp	r0, #0
   845f0:	f43f af4b 	beq.w	8448a <_vfiprintf_r+0x99a>
   845f4:	e717      	b.n	84426 <_vfiprintf_r+0x936>
   845f6:	2400      	movs	r4, #0
   845f8:	2500      	movs	r5, #0
   845fa:	f04f 0900 	mov.w	r9, #0
   845fe:	e78d      	b.n	8451c <_vfiprintf_r+0xa2c>
   84600:	aa0d      	add	r2, sp, #52	; 0x34
   84602:	9900      	ldr	r1, [sp, #0]
   84604:	9805      	ldr	r0, [sp, #20]
   84606:	f7ff fa37 	bl	83a78 <__sprint_r.part.0>
   8460a:	2800      	cmp	r0, #0
   8460c:	f47f af0b 	bne.w	84426 <_vfiprintf_r+0x936>
   84610:	980e      	ldr	r0, [sp, #56]	; 0x38
   84612:	46d3      	mov	fp, sl
   84614:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84616:	f100 0e01 	add.w	lr, r0, #1
   8461a:	f7ff bbed 	b.w	83df8 <_vfiprintf_r+0x308>
   8461e:	aa0d      	add	r2, sp, #52	; 0x34
   84620:	9900      	ldr	r1, [sp, #0]
   84622:	9805      	ldr	r0, [sp, #20]
   84624:	f7ff fa28 	bl	83a78 <__sprint_r.part.0>
   84628:	2800      	cmp	r0, #0
   8462a:	f47f aefc 	bne.w	84426 <_vfiprintf_r+0x936>
   8462e:	980e      	ldr	r0, [sp, #56]	; 0x38
   84630:	46d3      	mov	fp, sl
   84632:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84634:	f100 0e01 	add.w	lr, r0, #1
   84638:	e69c      	b.n	84374 <_vfiprintf_r+0x884>
   8463a:	2a00      	cmp	r2, #0
   8463c:	f040 80c8 	bne.w	847d0 <_vfiprintf_r+0xce0>
   84640:	f04f 0e01 	mov.w	lr, #1
   84644:	4610      	mov	r0, r2
   84646:	46d3      	mov	fp, sl
   84648:	e698      	b.n	8437c <_vfiprintf_r+0x88c>
   8464a:	aa0d      	add	r2, sp, #52	; 0x34
   8464c:	9900      	ldr	r1, [sp, #0]
   8464e:	9805      	ldr	r0, [sp, #20]
   84650:	f7ff fa12 	bl	83a78 <__sprint_r.part.0>
   84654:	2800      	cmp	r0, #0
   84656:	f47f aee6 	bne.w	84426 <_vfiprintf_r+0x936>
   8465a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8465c:	46d3      	mov	fp, sl
   8465e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84660:	f103 0e01 	add.w	lr, r3, #1
   84664:	e42c      	b.n	83ec0 <_vfiprintf_r+0x3d0>
   84666:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   8466a:	f04f 0300 	mov.w	r3, #0
   8466e:	2230      	movs	r2, #48	; 0x30
   84670:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   84674:	9a01      	ldr	r2, [sp, #4]
   84676:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8467a:	2a00      	cmp	r2, #0
   8467c:	f046 0302 	orr.w	r3, r6, #2
   84680:	f2c0 80bb 	blt.w	847fa <_vfiprintf_r+0xd0a>
   84684:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84688:	f046 0602 	orr.w	r6, r6, #2
   8468c:	f04f 0900 	mov.w	r9, #0
   84690:	e744      	b.n	8451c <_vfiprintf_r+0xa2c>
   84692:	f04f 0900 	mov.w	r9, #0
   84696:	488c      	ldr	r0, [pc, #560]	; (848c8 <_vfiprintf_r+0xdd8>)
   84698:	e740      	b.n	8451c <_vfiprintf_r+0xa2c>
   8469a:	9b01      	ldr	r3, [sp, #4]
   8469c:	4264      	negs	r4, r4
   8469e:	f04f 092d 	mov.w	r9, #45	; 0x2d
   846a2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   846a6:	2b00      	cmp	r3, #0
   846a8:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   846ac:	f6ff ac85 	blt.w	83fba <_vfiprintf_r+0x4ca>
   846b0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   846b4:	e481      	b.n	83fba <_vfiprintf_r+0x4ca>
   846b6:	9b07      	ldr	r3, [sp, #28]
   846b8:	2b00      	cmp	r3, #0
   846ba:	d063      	beq.n	84784 <_vfiprintf_r+0xc94>
   846bc:	ab0c      	add	r3, sp, #48	; 0x30
   846be:	2202      	movs	r2, #2
   846c0:	931a      	str	r3, [sp, #104]	; 0x68
   846c2:	921b      	str	r2, [sp, #108]	; 0x6c
   846c4:	f04f 0e01 	mov.w	lr, #1
   846c8:	46d3      	mov	fp, sl
   846ca:	e715      	b.n	844f8 <_vfiprintf_r+0xa08>
   846cc:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   846d0:	d03b      	beq.n	8474a <_vfiprintf_r+0xc5a>
   846d2:	9904      	ldr	r1, [sp, #16]
   846d4:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   846d8:	460b      	mov	r3, r1
   846da:	880c      	ldrh	r4, [r1, #0]
   846dc:	9901      	ldr	r1, [sp, #4]
   846de:	3304      	adds	r3, #4
   846e0:	2900      	cmp	r1, #0
   846e2:	f04f 0500 	mov.w	r5, #0
   846e6:	f2c0 808c 	blt.w	84802 <_vfiprintf_r+0xd12>
   846ea:	ea54 0105 	orrs.w	r1, r4, r5
   846ee:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   846f2:	9304      	str	r3, [sp, #16]
   846f4:	f43f aca5 	beq.w	84042 <_vfiprintf_r+0x552>
   846f8:	4691      	mov	r9, r2
   846fa:	e4aa      	b.n	84052 <_vfiprintf_r+0x562>
   846fc:	06f0      	lsls	r0, r6, #27
   846fe:	d40a      	bmi.n	84716 <_vfiprintf_r+0xc26>
   84700:	0671      	lsls	r1, r6, #25
   84702:	d508      	bpl.n	84716 <_vfiprintf_r+0xc26>
   84704:	9a04      	ldr	r2, [sp, #16]
   84706:	6813      	ldr	r3, [r2, #0]
   84708:	3204      	adds	r2, #4
   8470a:	9204      	str	r2, [sp, #16]
   8470c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   84710:	801a      	strh	r2, [r3, #0]
   84712:	f7ff ba1e 	b.w	83b52 <_vfiprintf_r+0x62>
   84716:	9a04      	ldr	r2, [sp, #16]
   84718:	6813      	ldr	r3, [r2, #0]
   8471a:	3204      	adds	r2, #4
   8471c:	9204      	str	r2, [sp, #16]
   8471e:	9a02      	ldr	r2, [sp, #8]
   84720:	601a      	str	r2, [r3, #0]
   84722:	f7ff ba16 	b.w	83b52 <_vfiprintf_r+0x62>
   84726:	f04f 30ff 	mov.w	r0, #4294967295
   8472a:	f7ff bac9 	b.w	83cc0 <_vfiprintf_r+0x1d0>
   8472e:	4616      	mov	r6, r2
   84730:	4865      	ldr	r0, [pc, #404]	; (848c8 <_vfiprintf_r+0xdd8>)
   84732:	ea54 0205 	orrs.w	r2, r4, r5
   84736:	9304      	str	r3, [sp, #16]
   84738:	f04f 0900 	mov.w	r9, #0
   8473c:	f47f aeee 	bne.w	8451c <_vfiprintf_r+0xa2c>
   84740:	2400      	movs	r4, #0
   84742:	2500      	movs	r5, #0
   84744:	e6ea      	b.n	8451c <_vfiprintf_r+0xa2c>
   84746:	9b04      	ldr	r3, [sp, #16]
   84748:	e7f3      	b.n	84732 <_vfiprintf_r+0xc42>
   8474a:	9a04      	ldr	r2, [sp, #16]
   8474c:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   84750:	4613      	mov	r3, r2
   84752:	6814      	ldr	r4, [r2, #0]
   84754:	9a01      	ldr	r2, [sp, #4]
   84756:	3304      	adds	r3, #4
   84758:	2a00      	cmp	r2, #0
   8475a:	f04f 0500 	mov.w	r5, #0
   8475e:	db50      	blt.n	84802 <_vfiprintf_r+0xd12>
   84760:	ea54 0205 	orrs.w	r2, r4, r5
   84764:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84768:	9304      	str	r3, [sp, #16]
   8476a:	f47f ac72 	bne.w	84052 <_vfiprintf_r+0x562>
   8476e:	e468      	b.n	84042 <_vfiprintf_r+0x552>
   84770:	aa0d      	add	r2, sp, #52	; 0x34
   84772:	9900      	ldr	r1, [sp, #0]
   84774:	9805      	ldr	r0, [sp, #20]
   84776:	f7ff f97f 	bl	83a78 <__sprint_r.part.0>
   8477a:	2800      	cmp	r0, #0
   8477c:	f47f ae53 	bne.w	84426 <_vfiprintf_r+0x936>
   84780:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84782:	e678      	b.n	84476 <_vfiprintf_r+0x986>
   84784:	4610      	mov	r0, r2
   84786:	f04f 0e01 	mov.w	lr, #1
   8478a:	46d3      	mov	fp, sl
   8478c:	e5f6      	b.n	8437c <_vfiprintf_r+0x88c>
   8478e:	9904      	ldr	r1, [sp, #16]
   84790:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84794:	460a      	mov	r2, r1
   84796:	880c      	ldrh	r4, [r1, #0]
   84798:	9901      	ldr	r1, [sp, #4]
   8479a:	3204      	adds	r2, #4
   8479c:	2900      	cmp	r1, #0
   8479e:	f04f 0500 	mov.w	r5, #0
   847a2:	db55      	blt.n	84850 <_vfiprintf_r+0xd60>
   847a4:	ea54 0105 	orrs.w	r1, r4, r5
   847a8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   847ac:	9204      	str	r2, [sp, #16]
   847ae:	4699      	mov	r9, r3
   847b0:	f47f ac03 	bne.w	83fba <_vfiprintf_r+0x4ca>
   847b4:	e4df      	b.n	84176 <_vfiprintf_r+0x686>
   847b6:	9304      	str	r3, [sp, #16]
   847b8:	e704      	b.n	845c4 <_vfiprintf_r+0xad4>
   847ba:	4638      	mov	r0, r7
   847bc:	9404      	str	r4, [sp, #16]
   847be:	f7ff f92d 	bl	83a1c <strlen>
   847c2:	2300      	movs	r3, #0
   847c4:	9003      	str	r0, [sp, #12]
   847c6:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   847ca:	9301      	str	r3, [sp, #4]
   847cc:	f7ff bab6 	b.w	83d3c <_vfiprintf_r+0x24c>
   847d0:	aa0d      	add	r2, sp, #52	; 0x34
   847d2:	9900      	ldr	r1, [sp, #0]
   847d4:	9805      	ldr	r0, [sp, #20]
   847d6:	f7ff f94f 	bl	83a78 <__sprint_r.part.0>
   847da:	2800      	cmp	r0, #0
   847dc:	f47f ae23 	bne.w	84426 <_vfiprintf_r+0x936>
   847e0:	980e      	ldr	r0, [sp, #56]	; 0x38
   847e2:	46d3      	mov	fp, sl
   847e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   847e6:	f100 0e01 	add.w	lr, r0, #1
   847ea:	e5c7      	b.n	8437c <_vfiprintf_r+0x88c>
   847ec:	980e      	ldr	r0, [sp, #56]	; 0x38
   847ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   847f0:	3001      	adds	r0, #1
   847f2:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 848d0 <_vfiprintf_r+0xde0>
   847f6:	f7ff baec 	b.w	83dd2 <_vfiprintf_r+0x2e2>
   847fa:	461e      	mov	r6, r3
   847fc:	f04f 0900 	mov.w	r9, #0
   84800:	e68c      	b.n	8451c <_vfiprintf_r+0xa2c>
   84802:	9304      	str	r3, [sp, #16]
   84804:	e423      	b.n	8404e <_vfiprintf_r+0x55e>
   84806:	f04f 0900 	mov.w	r9, #0
   8480a:	e799      	b.n	84740 <_vfiprintf_r+0xc50>
   8480c:	2b06      	cmp	r3, #6
   8480e:	bf28      	it	cs
   84810:	2306      	movcs	r3, #6
   84812:	9303      	str	r3, [sp, #12]
   84814:	9404      	str	r4, [sp, #16]
   84816:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
   8481a:	4f2c      	ldr	r7, [pc, #176]	; (848cc <_vfiprintf_r+0xddc>)
   8481c:	e512      	b.n	84244 <_vfiprintf_r+0x754>
   8481e:	9204      	str	r2, [sp, #16]
   84820:	e415      	b.n	8404e <_vfiprintf_r+0x55e>
   84822:	980e      	ldr	r0, [sp, #56]	; 0x38
   84824:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 848d0 <_vfiprintf_r+0xde0>
   84828:	3001      	adds	r0, #1
   8482a:	f7ff bb88 	b.w	83f3e <_vfiprintf_r+0x44e>
   8482e:	46f4      	mov	ip, lr
   84830:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 848d4 <_vfiprintf_r+0xde4>
   84834:	f7ff bb2d 	b.w	83e92 <_vfiprintf_r+0x3a2>
   84838:	2200      	movs	r2, #0
   8483a:	9201      	str	r2, [sp, #4]
   8483c:	f7ff b9c1 	b.w	83bc2 <_vfiprintf_r+0xd2>
   84840:	9b01      	ldr	r3, [sp, #4]
   84842:	9404      	str	r4, [sp, #16]
   84844:	9303      	str	r3, [sp, #12]
   84846:	9001      	str	r0, [sp, #4]
   84848:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   8484c:	f7ff ba76 	b.w	83d3c <_vfiprintf_r+0x24c>
   84850:	9204      	str	r2, [sp, #16]
   84852:	4699      	mov	r9, r3
   84854:	e6b6      	b.n	845c4 <_vfiprintf_r+0xad4>
   84856:	9a04      	ldr	r2, [sp, #16]
   84858:	6813      	ldr	r3, [r2, #0]
   8485a:	3204      	adds	r2, #4
   8485c:	2b00      	cmp	r3, #0
   8485e:	9301      	str	r3, [sp, #4]
   84860:	9204      	str	r2, [sp, #16]
   84862:	f898 3001 	ldrb.w	r3, [r8, #1]
   84866:	46a8      	mov	r8, r5
   84868:	f6bf a9a9 	bge.w	83bbe <_vfiprintf_r+0xce>
   8486c:	f04f 32ff 	mov.w	r2, #4294967295
   84870:	9201      	str	r2, [sp, #4]
   84872:	f7ff b9a4 	b.w	83bbe <_vfiprintf_r+0xce>
   84876:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8487a:	e45f      	b.n	8413c <_vfiprintf_r+0x64c>
   8487c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84880:	f7ff bbc4 	b.w	8400c <_vfiprintf_r+0x51c>
   84884:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84888:	f7ff bb77 	b.w	83f7a <_vfiprintf_r+0x48a>
   8488c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84890:	e487      	b.n	841a2 <_vfiprintf_r+0x6b2>
   84892:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84896:	e4a7      	b.n	841e8 <_vfiprintf_r+0x6f8>
   84898:	4699      	mov	r9, r3
   8489a:	07f3      	lsls	r3, r6, #31
   8489c:	d505      	bpl.n	848aa <_vfiprintf_r+0xdba>
   8489e:	af2a      	add	r7, sp, #168	; 0xa8
   848a0:	2330      	movs	r3, #48	; 0x30
   848a2:	f807 3d41 	strb.w	r3, [r7, #-65]!
   848a6:	f7ff bba2 	b.w	83fee <_vfiprintf_r+0x4fe>
   848aa:	9b01      	ldr	r3, [sp, #4]
   848ac:	4657      	mov	r7, sl
   848ae:	9303      	str	r3, [sp, #12]
   848b0:	f7ff ba44 	b.w	83d3c <_vfiprintf_r+0x24c>
   848b4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   848b8:	e517      	b.n	842ea <_vfiprintf_r+0x7fa>
   848ba:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   848be:	e4fa      	b.n	842b6 <_vfiprintf_r+0x7c6>
   848c0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   848c4:	e4d2      	b.n	8426c <_vfiprintf_r+0x77c>
   848c6:	bf00      	nop
   848c8:	00086794 	.word	0x00086794
   848cc:	000867a8 	.word	0x000867a8
   848d0:	000867b0 	.word	0x000867b0
   848d4:	00086770 	.word	0x00086770

000848d8 <__sbprintf>:
   848d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   848da:	460c      	mov	r4, r1
   848dc:	8989      	ldrh	r1, [r1, #12]
   848de:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   848e2:	6e65      	ldr	r5, [r4, #100]	; 0x64
   848e4:	f021 0102 	bic.w	r1, r1, #2
   848e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
   848ea:	f8ad 100c 	strh.w	r1, [sp, #12]
   848ee:	69e1      	ldr	r1, [r4, #28]
   848f0:	89e7      	ldrh	r7, [r4, #14]
   848f2:	9519      	str	r5, [sp, #100]	; 0x64
   848f4:	2500      	movs	r5, #0
   848f6:	9107      	str	r1, [sp, #28]
   848f8:	9609      	str	r6, [sp, #36]	; 0x24
   848fa:	9506      	str	r5, [sp, #24]
   848fc:	ae1a      	add	r6, sp, #104	; 0x68
   848fe:	f44f 6580 	mov.w	r5, #1024	; 0x400
   84902:	4669      	mov	r1, sp
   84904:	9600      	str	r6, [sp, #0]
   84906:	9604      	str	r6, [sp, #16]
   84908:	9502      	str	r5, [sp, #8]
   8490a:	9505      	str	r5, [sp, #20]
   8490c:	f8ad 700e 	strh.w	r7, [sp, #14]
   84910:	4606      	mov	r6, r0
   84912:	f7ff f8ed 	bl	83af0 <_vfiprintf_r>
   84916:	1e05      	subs	r5, r0, #0
   84918:	db07      	blt.n	8492a <__sbprintf+0x52>
   8491a:	4630      	mov	r0, r6
   8491c:	4669      	mov	r1, sp
   8491e:	f000 f929 	bl	84b74 <_fflush_r>
   84922:	2800      	cmp	r0, #0
   84924:	bf18      	it	ne
   84926:	f04f 35ff 	movne.w	r5, #4294967295
   8492a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8492e:	065b      	lsls	r3, r3, #25
   84930:	d503      	bpl.n	8493a <__sbprintf+0x62>
   84932:	89a3      	ldrh	r3, [r4, #12]
   84934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84938:	81a3      	strh	r3, [r4, #12]
   8493a:	4628      	mov	r0, r5
   8493c:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   84940:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84942:	bf00      	nop

00084944 <__swsetup_r>:
   84944:	b538      	push	{r3, r4, r5, lr}
   84946:	4b30      	ldr	r3, [pc, #192]	; (84a08 <__swsetup_r+0xc4>)
   84948:	4605      	mov	r5, r0
   8494a:	6818      	ldr	r0, [r3, #0]
   8494c:	460c      	mov	r4, r1
   8494e:	b110      	cbz	r0, 84956 <__swsetup_r+0x12>
   84950:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84952:	2b00      	cmp	r3, #0
   84954:	d038      	beq.n	849c8 <__swsetup_r+0x84>
   84956:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8495a:	b293      	uxth	r3, r2
   8495c:	0718      	lsls	r0, r3, #28
   8495e:	d50c      	bpl.n	8497a <__swsetup_r+0x36>
   84960:	6920      	ldr	r0, [r4, #16]
   84962:	b1a8      	cbz	r0, 84990 <__swsetup_r+0x4c>
   84964:	f013 0201 	ands.w	r2, r3, #1
   84968:	d01e      	beq.n	849a8 <__swsetup_r+0x64>
   8496a:	6963      	ldr	r3, [r4, #20]
   8496c:	2200      	movs	r2, #0
   8496e:	425b      	negs	r3, r3
   84970:	61a3      	str	r3, [r4, #24]
   84972:	60a2      	str	r2, [r4, #8]
   84974:	b1f0      	cbz	r0, 849b4 <__swsetup_r+0x70>
   84976:	2000      	movs	r0, #0
   84978:	bd38      	pop	{r3, r4, r5, pc}
   8497a:	06d9      	lsls	r1, r3, #27
   8497c:	d53b      	bpl.n	849f6 <__swsetup_r+0xb2>
   8497e:	0758      	lsls	r0, r3, #29
   84980:	d425      	bmi.n	849ce <__swsetup_r+0x8a>
   84982:	6920      	ldr	r0, [r4, #16]
   84984:	f042 0308 	orr.w	r3, r2, #8
   84988:	81a3      	strh	r3, [r4, #12]
   8498a:	b29b      	uxth	r3, r3
   8498c:	2800      	cmp	r0, #0
   8498e:	d1e9      	bne.n	84964 <__swsetup_r+0x20>
   84990:	f403 7220 	and.w	r2, r3, #640	; 0x280
   84994:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   84998:	d0e4      	beq.n	84964 <__swsetup_r+0x20>
   8499a:	4628      	mov	r0, r5
   8499c:	4621      	mov	r1, r4
   8499e:	f000 fd13 	bl	853c8 <__smakebuf_r>
   849a2:	89a3      	ldrh	r3, [r4, #12]
   849a4:	6920      	ldr	r0, [r4, #16]
   849a6:	e7dd      	b.n	84964 <__swsetup_r+0x20>
   849a8:	0799      	lsls	r1, r3, #30
   849aa:	bf58      	it	pl
   849ac:	6962      	ldrpl	r2, [r4, #20]
   849ae:	60a2      	str	r2, [r4, #8]
   849b0:	2800      	cmp	r0, #0
   849b2:	d1e0      	bne.n	84976 <__swsetup_r+0x32>
   849b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   849b8:	061a      	lsls	r2, r3, #24
   849ba:	d5dd      	bpl.n	84978 <__swsetup_r+0x34>
   849bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   849c0:	81a3      	strh	r3, [r4, #12]
   849c2:	f04f 30ff 	mov.w	r0, #4294967295
   849c6:	bd38      	pop	{r3, r4, r5, pc}
   849c8:	f000 f968 	bl	84c9c <__sinit>
   849cc:	e7c3      	b.n	84956 <__swsetup_r+0x12>
   849ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
   849d0:	b151      	cbz	r1, 849e8 <__swsetup_r+0xa4>
   849d2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   849d6:	4299      	cmp	r1, r3
   849d8:	d004      	beq.n	849e4 <__swsetup_r+0xa0>
   849da:	4628      	mov	r0, r5
   849dc:	f000 fa26 	bl	84e2c <_free_r>
   849e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   849e4:	2300      	movs	r3, #0
   849e6:	6323      	str	r3, [r4, #48]	; 0x30
   849e8:	6920      	ldr	r0, [r4, #16]
   849ea:	2300      	movs	r3, #0
   849ec:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   849f0:	e884 0009 	stmia.w	r4, {r0, r3}
   849f4:	e7c6      	b.n	84984 <__swsetup_r+0x40>
   849f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   849fa:	2309      	movs	r3, #9
   849fc:	602b      	str	r3, [r5, #0]
   849fe:	f04f 30ff 	mov.w	r0, #4294967295
   84a02:	81a2      	strh	r2, [r4, #12]
   84a04:	bd38      	pop	{r3, r4, r5, pc}
   84a06:	bf00      	nop
   84a08:	20070830 	.word	0x20070830

00084a0c <register_fini>:
   84a0c:	4b02      	ldr	r3, [pc, #8]	; (84a18 <register_fini+0xc>)
   84a0e:	b113      	cbz	r3, 84a16 <register_fini+0xa>
   84a10:	4802      	ldr	r0, [pc, #8]	; (84a1c <register_fini+0x10>)
   84a12:	f000 b805 	b.w	84a20 <atexit>
   84a16:	4770      	bx	lr
   84a18:	00000000 	.word	0x00000000
   84a1c:	00084cb1 	.word	0x00084cb1

00084a20 <atexit>:
   84a20:	2300      	movs	r3, #0
   84a22:	4601      	mov	r1, r0
   84a24:	461a      	mov	r2, r3
   84a26:	4618      	mov	r0, r3
   84a28:	f001 bbce 	b.w	861c8 <__register_exitproc>

00084a2c <__sflush_r>:
   84a2c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   84a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84a34:	b29a      	uxth	r2, r3
   84a36:	460d      	mov	r5, r1
   84a38:	0711      	lsls	r1, r2, #28
   84a3a:	4680      	mov	r8, r0
   84a3c:	d43c      	bmi.n	84ab8 <__sflush_r+0x8c>
   84a3e:	686a      	ldr	r2, [r5, #4]
   84a40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84a44:	2a00      	cmp	r2, #0
   84a46:	81ab      	strh	r3, [r5, #12]
   84a48:	dd73      	ble.n	84b32 <__sflush_r+0x106>
   84a4a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84a4c:	2c00      	cmp	r4, #0
   84a4e:	d04b      	beq.n	84ae8 <__sflush_r+0xbc>
   84a50:	b29b      	uxth	r3, r3
   84a52:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   84a56:	2100      	movs	r1, #0
   84a58:	b292      	uxth	r2, r2
   84a5a:	f8d8 6000 	ldr.w	r6, [r8]
   84a5e:	f8c8 1000 	str.w	r1, [r8]
   84a62:	2a00      	cmp	r2, #0
   84a64:	d069      	beq.n	84b3a <__sflush_r+0x10e>
   84a66:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   84a68:	075f      	lsls	r7, r3, #29
   84a6a:	d505      	bpl.n	84a78 <__sflush_r+0x4c>
   84a6c:	6869      	ldr	r1, [r5, #4]
   84a6e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   84a70:	1a52      	subs	r2, r2, r1
   84a72:	b10b      	cbz	r3, 84a78 <__sflush_r+0x4c>
   84a74:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   84a76:	1ad2      	subs	r2, r2, r3
   84a78:	2300      	movs	r3, #0
   84a7a:	69e9      	ldr	r1, [r5, #28]
   84a7c:	4640      	mov	r0, r8
   84a7e:	47a0      	blx	r4
   84a80:	1c44      	adds	r4, r0, #1
   84a82:	d03c      	beq.n	84afe <__sflush_r+0xd2>
   84a84:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   84a88:	6929      	ldr	r1, [r5, #16]
   84a8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84a8e:	2200      	movs	r2, #0
   84a90:	81ab      	strh	r3, [r5, #12]
   84a92:	04db      	lsls	r3, r3, #19
   84a94:	e885 0006 	stmia.w	r5, {r1, r2}
   84a98:	d449      	bmi.n	84b2e <__sflush_r+0x102>
   84a9a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   84a9c:	f8c8 6000 	str.w	r6, [r8]
   84aa0:	b311      	cbz	r1, 84ae8 <__sflush_r+0xbc>
   84aa2:	f105 0340 	add.w	r3, r5, #64	; 0x40
   84aa6:	4299      	cmp	r1, r3
   84aa8:	d002      	beq.n	84ab0 <__sflush_r+0x84>
   84aaa:	4640      	mov	r0, r8
   84aac:	f000 f9be 	bl	84e2c <_free_r>
   84ab0:	2000      	movs	r0, #0
   84ab2:	6328      	str	r0, [r5, #48]	; 0x30
   84ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84ab8:	692e      	ldr	r6, [r5, #16]
   84aba:	b1ae      	cbz	r6, 84ae8 <__sflush_r+0xbc>
   84abc:	0790      	lsls	r0, r2, #30
   84abe:	682c      	ldr	r4, [r5, #0]
   84ac0:	bf0c      	ite	eq
   84ac2:	696b      	ldreq	r3, [r5, #20]
   84ac4:	2300      	movne	r3, #0
   84ac6:	602e      	str	r6, [r5, #0]
   84ac8:	1ba4      	subs	r4, r4, r6
   84aca:	60ab      	str	r3, [r5, #8]
   84acc:	e00a      	b.n	84ae4 <__sflush_r+0xb8>
   84ace:	4623      	mov	r3, r4
   84ad0:	4632      	mov	r2, r6
   84ad2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   84ad4:	69e9      	ldr	r1, [r5, #28]
   84ad6:	4640      	mov	r0, r8
   84ad8:	47b8      	blx	r7
   84ada:	2800      	cmp	r0, #0
   84adc:	eba4 0400 	sub.w	r4, r4, r0
   84ae0:	4406      	add	r6, r0
   84ae2:	dd04      	ble.n	84aee <__sflush_r+0xc2>
   84ae4:	2c00      	cmp	r4, #0
   84ae6:	dcf2      	bgt.n	84ace <__sflush_r+0xa2>
   84ae8:	2000      	movs	r0, #0
   84aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84aee:	89ab      	ldrh	r3, [r5, #12]
   84af0:	f04f 30ff 	mov.w	r0, #4294967295
   84af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84af8:	81ab      	strh	r3, [r5, #12]
   84afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84afe:	f8d8 2000 	ldr.w	r2, [r8]
   84b02:	2a1d      	cmp	r2, #29
   84b04:	d8f3      	bhi.n	84aee <__sflush_r+0xc2>
   84b06:	4b1a      	ldr	r3, [pc, #104]	; (84b70 <__sflush_r+0x144>)
   84b08:	40d3      	lsrs	r3, r2
   84b0a:	f003 0301 	and.w	r3, r3, #1
   84b0e:	f083 0401 	eor.w	r4, r3, #1
   84b12:	2b00      	cmp	r3, #0
   84b14:	d0eb      	beq.n	84aee <__sflush_r+0xc2>
   84b16:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   84b1a:	6929      	ldr	r1, [r5, #16]
   84b1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84b20:	6029      	str	r1, [r5, #0]
   84b22:	04d9      	lsls	r1, r3, #19
   84b24:	606c      	str	r4, [r5, #4]
   84b26:	81ab      	strh	r3, [r5, #12]
   84b28:	d5b7      	bpl.n	84a9a <__sflush_r+0x6e>
   84b2a:	2a00      	cmp	r2, #0
   84b2c:	d1b5      	bne.n	84a9a <__sflush_r+0x6e>
   84b2e:	6528      	str	r0, [r5, #80]	; 0x50
   84b30:	e7b3      	b.n	84a9a <__sflush_r+0x6e>
   84b32:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   84b34:	2a00      	cmp	r2, #0
   84b36:	dc88      	bgt.n	84a4a <__sflush_r+0x1e>
   84b38:	e7d6      	b.n	84ae8 <__sflush_r+0xbc>
   84b3a:	2301      	movs	r3, #1
   84b3c:	69e9      	ldr	r1, [r5, #28]
   84b3e:	4640      	mov	r0, r8
   84b40:	47a0      	blx	r4
   84b42:	1c43      	adds	r3, r0, #1
   84b44:	4602      	mov	r2, r0
   84b46:	d002      	beq.n	84b4e <__sflush_r+0x122>
   84b48:	89ab      	ldrh	r3, [r5, #12]
   84b4a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84b4c:	e78c      	b.n	84a68 <__sflush_r+0x3c>
   84b4e:	f8d8 3000 	ldr.w	r3, [r8]
   84b52:	2b00      	cmp	r3, #0
   84b54:	d0f8      	beq.n	84b48 <__sflush_r+0x11c>
   84b56:	2b1d      	cmp	r3, #29
   84b58:	d001      	beq.n	84b5e <__sflush_r+0x132>
   84b5a:	2b16      	cmp	r3, #22
   84b5c:	d102      	bne.n	84b64 <__sflush_r+0x138>
   84b5e:	f8c8 6000 	str.w	r6, [r8]
   84b62:	e7c1      	b.n	84ae8 <__sflush_r+0xbc>
   84b64:	89ab      	ldrh	r3, [r5, #12]
   84b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84b6a:	81ab      	strh	r3, [r5, #12]
   84b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84b70:	20400001 	.word	0x20400001

00084b74 <_fflush_r>:
   84b74:	b510      	push	{r4, lr}
   84b76:	4604      	mov	r4, r0
   84b78:	b082      	sub	sp, #8
   84b7a:	b108      	cbz	r0, 84b80 <_fflush_r+0xc>
   84b7c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84b7e:	b153      	cbz	r3, 84b96 <_fflush_r+0x22>
   84b80:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   84b84:	b908      	cbnz	r0, 84b8a <_fflush_r+0x16>
   84b86:	b002      	add	sp, #8
   84b88:	bd10      	pop	{r4, pc}
   84b8a:	4620      	mov	r0, r4
   84b8c:	b002      	add	sp, #8
   84b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84b92:	f7ff bf4b 	b.w	84a2c <__sflush_r>
   84b96:	9101      	str	r1, [sp, #4]
   84b98:	f000 f880 	bl	84c9c <__sinit>
   84b9c:	9901      	ldr	r1, [sp, #4]
   84b9e:	e7ef      	b.n	84b80 <_fflush_r+0xc>

00084ba0 <_cleanup_r>:
   84ba0:	4901      	ldr	r1, [pc, #4]	; (84ba8 <_cleanup_r+0x8>)
   84ba2:	f000 bbaf 	b.w	85304 <_fwalk_reent>
   84ba6:	bf00      	nop
   84ba8:	00086291 	.word	0x00086291

00084bac <__sinit.part.1>:
   84bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84bb0:	4607      	mov	r7, r0
   84bb2:	4835      	ldr	r0, [pc, #212]	; (84c88 <__sinit.part.1+0xdc>)
   84bb4:	687d      	ldr	r5, [r7, #4]
   84bb6:	2400      	movs	r4, #0
   84bb8:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   84bbc:	2304      	movs	r3, #4
   84bbe:	2103      	movs	r1, #3
   84bc0:	63f8      	str	r0, [r7, #60]	; 0x3c
   84bc2:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   84bc6:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   84bca:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   84bce:	b083      	sub	sp, #12
   84bd0:	602c      	str	r4, [r5, #0]
   84bd2:	606c      	str	r4, [r5, #4]
   84bd4:	60ac      	str	r4, [r5, #8]
   84bd6:	666c      	str	r4, [r5, #100]	; 0x64
   84bd8:	81ec      	strh	r4, [r5, #14]
   84bda:	612c      	str	r4, [r5, #16]
   84bdc:	616c      	str	r4, [r5, #20]
   84bde:	61ac      	str	r4, [r5, #24]
   84be0:	81ab      	strh	r3, [r5, #12]
   84be2:	4621      	mov	r1, r4
   84be4:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84be8:	2208      	movs	r2, #8
   84bea:	f7fe fe19 	bl	83820 <memset>
   84bee:	f8df b09c 	ldr.w	fp, [pc, #156]	; 84c8c <__sinit.part.1+0xe0>
   84bf2:	68be      	ldr	r6, [r7, #8]
   84bf4:	f8df a098 	ldr.w	sl, [pc, #152]	; 84c90 <__sinit.part.1+0xe4>
   84bf8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 84c94 <__sinit.part.1+0xe8>
   84bfc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 84c98 <__sinit.part.1+0xec>
   84c00:	2301      	movs	r3, #1
   84c02:	2209      	movs	r2, #9
   84c04:	f8c5 b020 	str.w	fp, [r5, #32]
   84c08:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84c0c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84c10:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84c14:	61ed      	str	r5, [r5, #28]
   84c16:	4621      	mov	r1, r4
   84c18:	81f3      	strh	r3, [r6, #14]
   84c1a:	81b2      	strh	r2, [r6, #12]
   84c1c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   84c20:	6034      	str	r4, [r6, #0]
   84c22:	6074      	str	r4, [r6, #4]
   84c24:	60b4      	str	r4, [r6, #8]
   84c26:	6674      	str	r4, [r6, #100]	; 0x64
   84c28:	6134      	str	r4, [r6, #16]
   84c2a:	6174      	str	r4, [r6, #20]
   84c2c:	61b4      	str	r4, [r6, #24]
   84c2e:	2208      	movs	r2, #8
   84c30:	9301      	str	r3, [sp, #4]
   84c32:	f7fe fdf5 	bl	83820 <memset>
   84c36:	68fd      	ldr	r5, [r7, #12]
   84c38:	2012      	movs	r0, #18
   84c3a:	2202      	movs	r2, #2
   84c3c:	61f6      	str	r6, [r6, #28]
   84c3e:	f8c6 b020 	str.w	fp, [r6, #32]
   84c42:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   84c46:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   84c4a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   84c4e:	4621      	mov	r1, r4
   84c50:	81a8      	strh	r0, [r5, #12]
   84c52:	81ea      	strh	r2, [r5, #14]
   84c54:	602c      	str	r4, [r5, #0]
   84c56:	606c      	str	r4, [r5, #4]
   84c58:	60ac      	str	r4, [r5, #8]
   84c5a:	666c      	str	r4, [r5, #100]	; 0x64
   84c5c:	612c      	str	r4, [r5, #16]
   84c5e:	616c      	str	r4, [r5, #20]
   84c60:	61ac      	str	r4, [r5, #24]
   84c62:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84c66:	2208      	movs	r2, #8
   84c68:	f7fe fdda 	bl	83820 <memset>
   84c6c:	9b01      	ldr	r3, [sp, #4]
   84c6e:	61ed      	str	r5, [r5, #28]
   84c70:	f8c5 b020 	str.w	fp, [r5, #32]
   84c74:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84c78:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84c7c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84c80:	63bb      	str	r3, [r7, #56]	; 0x38
   84c82:	b003      	add	sp, #12
   84c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84c88:	00084ba1 	.word	0x00084ba1
   84c8c:	00085ff9 	.word	0x00085ff9
   84c90:	0008601d 	.word	0x0008601d
   84c94:	00086059 	.word	0x00086059
   84c98:	00086079 	.word	0x00086079

00084c9c <__sinit>:
   84c9c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84c9e:	b103      	cbz	r3, 84ca2 <__sinit+0x6>
   84ca0:	4770      	bx	lr
   84ca2:	f7ff bf83 	b.w	84bac <__sinit.part.1>
   84ca6:	bf00      	nop

00084ca8 <__sfp_lock_acquire>:
   84ca8:	4770      	bx	lr
   84caa:	bf00      	nop

00084cac <__sfp_lock_release>:
   84cac:	4770      	bx	lr
   84cae:	bf00      	nop

00084cb0 <__libc_fini_array>:
   84cb0:	b538      	push	{r3, r4, r5, lr}
   84cb2:	4d07      	ldr	r5, [pc, #28]	; (84cd0 <__libc_fini_array+0x20>)
   84cb4:	4c07      	ldr	r4, [pc, #28]	; (84cd4 <__libc_fini_array+0x24>)
   84cb6:	1b2c      	subs	r4, r5, r4
   84cb8:	10a4      	asrs	r4, r4, #2
   84cba:	d005      	beq.n	84cc8 <__libc_fini_array+0x18>
   84cbc:	3c01      	subs	r4, #1
   84cbe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   84cc2:	4798      	blx	r3
   84cc4:	2c00      	cmp	r4, #0
   84cc6:	d1f9      	bne.n	84cbc <__libc_fini_array+0xc>
   84cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   84ccc:	f001 bd82 	b.w	867d4 <_fini>
   84cd0:	000867e4 	.word	0x000867e4
   84cd4:	000867e0 	.word	0x000867e0

00084cd8 <__fputwc>:
   84cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84cdc:	b082      	sub	sp, #8
   84cde:	4606      	mov	r6, r0
   84ce0:	460f      	mov	r7, r1
   84ce2:	4614      	mov	r4, r2
   84ce4:	f000 fb3a 	bl	8535c <__locale_mb_cur_max>
   84ce8:	2801      	cmp	r0, #1
   84cea:	d032      	beq.n	84d52 <__fputwc+0x7a>
   84cec:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   84cf0:	463a      	mov	r2, r7
   84cf2:	a901      	add	r1, sp, #4
   84cf4:	4630      	mov	r0, r6
   84cf6:	f001 fa19 	bl	8612c <_wcrtomb_r>
   84cfa:	f1b0 3fff 	cmp.w	r0, #4294967295
   84cfe:	4680      	mov	r8, r0
   84d00:	d020      	beq.n	84d44 <__fputwc+0x6c>
   84d02:	b370      	cbz	r0, 84d62 <__fputwc+0x8a>
   84d04:	f89d 1004 	ldrb.w	r1, [sp, #4]
   84d08:	2500      	movs	r5, #0
   84d0a:	e008      	b.n	84d1e <__fputwc+0x46>
   84d0c:	6823      	ldr	r3, [r4, #0]
   84d0e:	1c5a      	adds	r2, r3, #1
   84d10:	6022      	str	r2, [r4, #0]
   84d12:	7019      	strb	r1, [r3, #0]
   84d14:	3501      	adds	r5, #1
   84d16:	4545      	cmp	r5, r8
   84d18:	d223      	bcs.n	84d62 <__fputwc+0x8a>
   84d1a:	ab01      	add	r3, sp, #4
   84d1c:	5d59      	ldrb	r1, [r3, r5]
   84d1e:	68a3      	ldr	r3, [r4, #8]
   84d20:	3b01      	subs	r3, #1
   84d22:	2b00      	cmp	r3, #0
   84d24:	60a3      	str	r3, [r4, #8]
   84d26:	daf1      	bge.n	84d0c <__fputwc+0x34>
   84d28:	69a2      	ldr	r2, [r4, #24]
   84d2a:	4293      	cmp	r3, r2
   84d2c:	db01      	blt.n	84d32 <__fputwc+0x5a>
   84d2e:	290a      	cmp	r1, #10
   84d30:	d1ec      	bne.n	84d0c <__fputwc+0x34>
   84d32:	4622      	mov	r2, r4
   84d34:	4630      	mov	r0, r6
   84d36:	f001 f9a3 	bl	86080 <__swbuf_r>
   84d3a:	1c43      	adds	r3, r0, #1
   84d3c:	d1ea      	bne.n	84d14 <__fputwc+0x3c>
   84d3e:	b002      	add	sp, #8
   84d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84d44:	89a3      	ldrh	r3, [r4, #12]
   84d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84d4a:	81a3      	strh	r3, [r4, #12]
   84d4c:	b002      	add	sp, #8
   84d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84d52:	1e7b      	subs	r3, r7, #1
   84d54:	2bfe      	cmp	r3, #254	; 0xfe
   84d56:	d8c9      	bhi.n	84cec <__fputwc+0x14>
   84d58:	b2f9      	uxtb	r1, r7
   84d5a:	4680      	mov	r8, r0
   84d5c:	f88d 1004 	strb.w	r1, [sp, #4]
   84d60:	e7d2      	b.n	84d08 <__fputwc+0x30>
   84d62:	4638      	mov	r0, r7
   84d64:	b002      	add	sp, #8
   84d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84d6a:	bf00      	nop

00084d6c <_fputwc_r>:
   84d6c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   84d70:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   84d74:	d10a      	bne.n	84d8c <_fputwc_r+0x20>
   84d76:	b410      	push	{r4}
   84d78:	6e54      	ldr	r4, [r2, #100]	; 0x64
   84d7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   84d7e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   84d82:	6654      	str	r4, [r2, #100]	; 0x64
   84d84:	8193      	strh	r3, [r2, #12]
   84d86:	bc10      	pop	{r4}
   84d88:	f7ff bfa6 	b.w	84cd8 <__fputwc>
   84d8c:	f7ff bfa4 	b.w	84cd8 <__fputwc>

00084d90 <_malloc_trim_r>:
   84d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84d92:	460c      	mov	r4, r1
   84d94:	4f22      	ldr	r7, [pc, #136]	; (84e20 <_malloc_trim_r+0x90>)
   84d96:	4606      	mov	r6, r0
   84d98:	f000 ff2e 	bl	85bf8 <__malloc_lock>
   84d9c:	68bb      	ldr	r3, [r7, #8]
   84d9e:	685d      	ldr	r5, [r3, #4]
   84da0:	f025 0503 	bic.w	r5, r5, #3
   84da4:	1b29      	subs	r1, r5, r4
   84da6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   84daa:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   84dae:	f021 010f 	bic.w	r1, r1, #15
   84db2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   84db6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   84dba:	db07      	blt.n	84dcc <_malloc_trim_r+0x3c>
   84dbc:	2100      	movs	r1, #0
   84dbe:	4630      	mov	r0, r6
   84dc0:	f001 f908 	bl	85fd4 <_sbrk_r>
   84dc4:	68bb      	ldr	r3, [r7, #8]
   84dc6:	442b      	add	r3, r5
   84dc8:	4298      	cmp	r0, r3
   84dca:	d004      	beq.n	84dd6 <_malloc_trim_r+0x46>
   84dcc:	4630      	mov	r0, r6
   84dce:	f000 ff15 	bl	85bfc <__malloc_unlock>
   84dd2:	2000      	movs	r0, #0
   84dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84dd6:	4261      	negs	r1, r4
   84dd8:	4630      	mov	r0, r6
   84dda:	f001 f8fb 	bl	85fd4 <_sbrk_r>
   84dde:	3001      	adds	r0, #1
   84de0:	d00d      	beq.n	84dfe <_malloc_trim_r+0x6e>
   84de2:	4b10      	ldr	r3, [pc, #64]	; (84e24 <_malloc_trim_r+0x94>)
   84de4:	68ba      	ldr	r2, [r7, #8]
   84de6:	6819      	ldr	r1, [r3, #0]
   84de8:	1b2d      	subs	r5, r5, r4
   84dea:	f045 0501 	orr.w	r5, r5, #1
   84dee:	4630      	mov	r0, r6
   84df0:	1b09      	subs	r1, r1, r4
   84df2:	6055      	str	r5, [r2, #4]
   84df4:	6019      	str	r1, [r3, #0]
   84df6:	f000 ff01 	bl	85bfc <__malloc_unlock>
   84dfa:	2001      	movs	r0, #1
   84dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84dfe:	2100      	movs	r1, #0
   84e00:	4630      	mov	r0, r6
   84e02:	f001 f8e7 	bl	85fd4 <_sbrk_r>
   84e06:	68ba      	ldr	r2, [r7, #8]
   84e08:	1a83      	subs	r3, r0, r2
   84e0a:	2b0f      	cmp	r3, #15
   84e0c:	ddde      	ble.n	84dcc <_malloc_trim_r+0x3c>
   84e0e:	4c06      	ldr	r4, [pc, #24]	; (84e28 <_malloc_trim_r+0x98>)
   84e10:	4904      	ldr	r1, [pc, #16]	; (84e24 <_malloc_trim_r+0x94>)
   84e12:	6824      	ldr	r4, [r4, #0]
   84e14:	f043 0301 	orr.w	r3, r3, #1
   84e18:	1b00      	subs	r0, r0, r4
   84e1a:	6053      	str	r3, [r2, #4]
   84e1c:	6008      	str	r0, [r1, #0]
   84e1e:	e7d5      	b.n	84dcc <_malloc_trim_r+0x3c>
   84e20:	20070858 	.word	0x20070858
   84e24:	20070d90 	.word	0x20070d90
   84e28:	20070c64 	.word	0x20070c64

00084e2c <_free_r>:
   84e2c:	2900      	cmp	r1, #0
   84e2e:	d045      	beq.n	84ebc <_free_r+0x90>
   84e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84e34:	460d      	mov	r5, r1
   84e36:	4680      	mov	r8, r0
   84e38:	f000 fede 	bl	85bf8 <__malloc_lock>
   84e3c:	f855 7c04 	ldr.w	r7, [r5, #-4]
   84e40:	496a      	ldr	r1, [pc, #424]	; (84fec <_free_r+0x1c0>)
   84e42:	f1a5 0408 	sub.w	r4, r5, #8
   84e46:	f027 0301 	bic.w	r3, r7, #1
   84e4a:	18e2      	adds	r2, r4, r3
   84e4c:	688e      	ldr	r6, [r1, #8]
   84e4e:	6850      	ldr	r0, [r2, #4]
   84e50:	42b2      	cmp	r2, r6
   84e52:	f020 0003 	bic.w	r0, r0, #3
   84e56:	d062      	beq.n	84f1e <_free_r+0xf2>
   84e58:	07fe      	lsls	r6, r7, #31
   84e5a:	6050      	str	r0, [r2, #4]
   84e5c:	d40b      	bmi.n	84e76 <_free_r+0x4a>
   84e5e:	f855 7c08 	ldr.w	r7, [r5, #-8]
   84e62:	f101 0e08 	add.w	lr, r1, #8
   84e66:	1be4      	subs	r4, r4, r7
   84e68:	68a5      	ldr	r5, [r4, #8]
   84e6a:	443b      	add	r3, r7
   84e6c:	4575      	cmp	r5, lr
   84e6e:	d06f      	beq.n	84f50 <_free_r+0x124>
   84e70:	68e7      	ldr	r7, [r4, #12]
   84e72:	60ef      	str	r7, [r5, #12]
   84e74:	60bd      	str	r5, [r7, #8]
   84e76:	1815      	adds	r5, r2, r0
   84e78:	686d      	ldr	r5, [r5, #4]
   84e7a:	07ed      	lsls	r5, r5, #31
   84e7c:	d542      	bpl.n	84f04 <_free_r+0xd8>
   84e7e:	f043 0201 	orr.w	r2, r3, #1
   84e82:	6062      	str	r2, [r4, #4]
   84e84:	50e3      	str	r3, [r4, r3]
   84e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84e8a:	d218      	bcs.n	84ebe <_free_r+0x92>
   84e8c:	08db      	lsrs	r3, r3, #3
   84e8e:	6848      	ldr	r0, [r1, #4]
   84e90:	109d      	asrs	r5, r3, #2
   84e92:	2201      	movs	r2, #1
   84e94:	3301      	adds	r3, #1
   84e96:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   84e9a:	fa02 f505 	lsl.w	r5, r2, r5
   84e9e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   84ea2:	4328      	orrs	r0, r5
   84ea4:	3a08      	subs	r2, #8
   84ea6:	60e2      	str	r2, [r4, #12]
   84ea8:	60a7      	str	r7, [r4, #8]
   84eaa:	6048      	str	r0, [r1, #4]
   84eac:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   84eb0:	60fc      	str	r4, [r7, #12]
   84eb2:	4640      	mov	r0, r8
   84eb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84eb8:	f000 bea0 	b.w	85bfc <__malloc_unlock>
   84ebc:	4770      	bx	lr
   84ebe:	0a5a      	lsrs	r2, r3, #9
   84ec0:	2a04      	cmp	r2, #4
   84ec2:	d853      	bhi.n	84f6c <_free_r+0x140>
   84ec4:	099a      	lsrs	r2, r3, #6
   84ec6:	f102 0739 	add.w	r7, r2, #57	; 0x39
   84eca:	007f      	lsls	r7, r7, #1
   84ecc:	f102 0538 	add.w	r5, r2, #56	; 0x38
   84ed0:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   84ed4:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   84ed8:	3808      	subs	r0, #8
   84eda:	4290      	cmp	r0, r2
   84edc:	4943      	ldr	r1, [pc, #268]	; (84fec <_free_r+0x1c0>)
   84ede:	d04d      	beq.n	84f7c <_free_r+0x150>
   84ee0:	6851      	ldr	r1, [r2, #4]
   84ee2:	f021 0103 	bic.w	r1, r1, #3
   84ee6:	428b      	cmp	r3, r1
   84ee8:	d202      	bcs.n	84ef0 <_free_r+0xc4>
   84eea:	6892      	ldr	r2, [r2, #8]
   84eec:	4290      	cmp	r0, r2
   84eee:	d1f7      	bne.n	84ee0 <_free_r+0xb4>
   84ef0:	68d0      	ldr	r0, [r2, #12]
   84ef2:	60e0      	str	r0, [r4, #12]
   84ef4:	60a2      	str	r2, [r4, #8]
   84ef6:	6084      	str	r4, [r0, #8]
   84ef8:	60d4      	str	r4, [r2, #12]
   84efa:	4640      	mov	r0, r8
   84efc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84f00:	f000 be7c 	b.w	85bfc <__malloc_unlock>
   84f04:	6895      	ldr	r5, [r2, #8]
   84f06:	4f3a      	ldr	r7, [pc, #232]	; (84ff0 <_free_r+0x1c4>)
   84f08:	4403      	add	r3, r0
   84f0a:	42bd      	cmp	r5, r7
   84f0c:	d03f      	beq.n	84f8e <_free_r+0x162>
   84f0e:	68d0      	ldr	r0, [r2, #12]
   84f10:	f043 0201 	orr.w	r2, r3, #1
   84f14:	60e8      	str	r0, [r5, #12]
   84f16:	6085      	str	r5, [r0, #8]
   84f18:	6062      	str	r2, [r4, #4]
   84f1a:	50e3      	str	r3, [r4, r3]
   84f1c:	e7b3      	b.n	84e86 <_free_r+0x5a>
   84f1e:	07ff      	lsls	r7, r7, #31
   84f20:	4403      	add	r3, r0
   84f22:	d407      	bmi.n	84f34 <_free_r+0x108>
   84f24:	f855 5c08 	ldr.w	r5, [r5, #-8]
   84f28:	1b64      	subs	r4, r4, r5
   84f2a:	68e2      	ldr	r2, [r4, #12]
   84f2c:	68a0      	ldr	r0, [r4, #8]
   84f2e:	442b      	add	r3, r5
   84f30:	60c2      	str	r2, [r0, #12]
   84f32:	6090      	str	r0, [r2, #8]
   84f34:	4a2f      	ldr	r2, [pc, #188]	; (84ff4 <_free_r+0x1c8>)
   84f36:	f043 0001 	orr.w	r0, r3, #1
   84f3a:	6812      	ldr	r2, [r2, #0]
   84f3c:	6060      	str	r0, [r4, #4]
   84f3e:	4293      	cmp	r3, r2
   84f40:	608c      	str	r4, [r1, #8]
   84f42:	d3b6      	bcc.n	84eb2 <_free_r+0x86>
   84f44:	4b2c      	ldr	r3, [pc, #176]	; (84ff8 <_free_r+0x1cc>)
   84f46:	4640      	mov	r0, r8
   84f48:	6819      	ldr	r1, [r3, #0]
   84f4a:	f7ff ff21 	bl	84d90 <_malloc_trim_r>
   84f4e:	e7b0      	b.n	84eb2 <_free_r+0x86>
   84f50:	1811      	adds	r1, r2, r0
   84f52:	6849      	ldr	r1, [r1, #4]
   84f54:	07c9      	lsls	r1, r1, #31
   84f56:	d444      	bmi.n	84fe2 <_free_r+0x1b6>
   84f58:	6891      	ldr	r1, [r2, #8]
   84f5a:	4403      	add	r3, r0
   84f5c:	68d2      	ldr	r2, [r2, #12]
   84f5e:	f043 0001 	orr.w	r0, r3, #1
   84f62:	60ca      	str	r2, [r1, #12]
   84f64:	6091      	str	r1, [r2, #8]
   84f66:	6060      	str	r0, [r4, #4]
   84f68:	50e3      	str	r3, [r4, r3]
   84f6a:	e7a2      	b.n	84eb2 <_free_r+0x86>
   84f6c:	2a14      	cmp	r2, #20
   84f6e:	d817      	bhi.n	84fa0 <_free_r+0x174>
   84f70:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   84f74:	007f      	lsls	r7, r7, #1
   84f76:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   84f7a:	e7a9      	b.n	84ed0 <_free_r+0xa4>
   84f7c:	10aa      	asrs	r2, r5, #2
   84f7e:	684b      	ldr	r3, [r1, #4]
   84f80:	2501      	movs	r5, #1
   84f82:	fa05 f202 	lsl.w	r2, r5, r2
   84f86:	4313      	orrs	r3, r2
   84f88:	604b      	str	r3, [r1, #4]
   84f8a:	4602      	mov	r2, r0
   84f8c:	e7b1      	b.n	84ef2 <_free_r+0xc6>
   84f8e:	f043 0201 	orr.w	r2, r3, #1
   84f92:	614c      	str	r4, [r1, #20]
   84f94:	610c      	str	r4, [r1, #16]
   84f96:	60e5      	str	r5, [r4, #12]
   84f98:	60a5      	str	r5, [r4, #8]
   84f9a:	6062      	str	r2, [r4, #4]
   84f9c:	50e3      	str	r3, [r4, r3]
   84f9e:	e788      	b.n	84eb2 <_free_r+0x86>
   84fa0:	2a54      	cmp	r2, #84	; 0x54
   84fa2:	d806      	bhi.n	84fb2 <_free_r+0x186>
   84fa4:	0b1a      	lsrs	r2, r3, #12
   84fa6:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   84faa:	007f      	lsls	r7, r7, #1
   84fac:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   84fb0:	e78e      	b.n	84ed0 <_free_r+0xa4>
   84fb2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84fb6:	d806      	bhi.n	84fc6 <_free_r+0x19a>
   84fb8:	0bda      	lsrs	r2, r3, #15
   84fba:	f102 0778 	add.w	r7, r2, #120	; 0x78
   84fbe:	007f      	lsls	r7, r7, #1
   84fc0:	f102 0577 	add.w	r5, r2, #119	; 0x77
   84fc4:	e784      	b.n	84ed0 <_free_r+0xa4>
   84fc6:	f240 5054 	movw	r0, #1364	; 0x554
   84fca:	4282      	cmp	r2, r0
   84fcc:	d806      	bhi.n	84fdc <_free_r+0x1b0>
   84fce:	0c9a      	lsrs	r2, r3, #18
   84fd0:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   84fd4:	007f      	lsls	r7, r7, #1
   84fd6:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   84fda:	e779      	b.n	84ed0 <_free_r+0xa4>
   84fdc:	27fe      	movs	r7, #254	; 0xfe
   84fde:	257e      	movs	r5, #126	; 0x7e
   84fe0:	e776      	b.n	84ed0 <_free_r+0xa4>
   84fe2:	f043 0201 	orr.w	r2, r3, #1
   84fe6:	6062      	str	r2, [r4, #4]
   84fe8:	50e3      	str	r3, [r4, r3]
   84fea:	e762      	b.n	84eb2 <_free_r+0x86>
   84fec:	20070858 	.word	0x20070858
   84ff0:	20070860 	.word	0x20070860
   84ff4:	20070c60 	.word	0x20070c60
   84ff8:	20070d8c 	.word	0x20070d8c

00084ffc <__sfvwrite_r>:
   84ffc:	6893      	ldr	r3, [r2, #8]
   84ffe:	2b00      	cmp	r3, #0
   85000:	f000 80ab 	beq.w	8515a <__sfvwrite_r+0x15e>
   85004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85008:	898b      	ldrh	r3, [r1, #12]
   8500a:	b085      	sub	sp, #20
   8500c:	460c      	mov	r4, r1
   8500e:	0719      	lsls	r1, r3, #28
   85010:	9002      	str	r0, [sp, #8]
   85012:	4616      	mov	r6, r2
   85014:	d528      	bpl.n	85068 <__sfvwrite_r+0x6c>
   85016:	6922      	ldr	r2, [r4, #16]
   85018:	b332      	cbz	r2, 85068 <__sfvwrite_r+0x6c>
   8501a:	f003 0802 	and.w	r8, r3, #2
   8501e:	fa1f f088 	uxth.w	r0, r8
   85022:	6835      	ldr	r5, [r6, #0]
   85024:	b378      	cbz	r0, 85086 <__sfvwrite_r+0x8a>
   85026:	f04f 0900 	mov.w	r9, #0
   8502a:	46c8      	mov	r8, r9
   8502c:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 85300 <__sfvwrite_r+0x304>
   85030:	f1b8 0f00 	cmp.w	r8, #0
   85034:	f000 808b 	beq.w	8514e <__sfvwrite_r+0x152>
   85038:	45d0      	cmp	r8, sl
   8503a:	4643      	mov	r3, r8
   8503c:	464a      	mov	r2, r9
   8503e:	bf28      	it	cs
   85040:	4653      	movcs	r3, sl
   85042:	69e1      	ldr	r1, [r4, #28]
   85044:	9802      	ldr	r0, [sp, #8]
   85046:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85048:	47b8      	blx	r7
   8504a:	2800      	cmp	r0, #0
   8504c:	f340 80a5 	ble.w	8519a <__sfvwrite_r+0x19e>
   85050:	68b3      	ldr	r3, [r6, #8]
   85052:	4481      	add	r9, r0
   85054:	1a1b      	subs	r3, r3, r0
   85056:	ebc0 0808 	rsb	r8, r0, r8
   8505a:	60b3      	str	r3, [r6, #8]
   8505c:	2b00      	cmp	r3, #0
   8505e:	d1e7      	bne.n	85030 <__sfvwrite_r+0x34>
   85060:	2000      	movs	r0, #0
   85062:	b005      	add	sp, #20
   85064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85068:	4621      	mov	r1, r4
   8506a:	9802      	ldr	r0, [sp, #8]
   8506c:	f7ff fc6a 	bl	84944 <__swsetup_r>
   85070:	2800      	cmp	r0, #0
   85072:	f040 813c 	bne.w	852ee <__sfvwrite_r+0x2f2>
   85076:	89a3      	ldrh	r3, [r4, #12]
   85078:	6835      	ldr	r5, [r6, #0]
   8507a:	f003 0802 	and.w	r8, r3, #2
   8507e:	fa1f f088 	uxth.w	r0, r8
   85082:	2800      	cmp	r0, #0
   85084:	d1cf      	bne.n	85026 <__sfvwrite_r+0x2a>
   85086:	f013 0901 	ands.w	r9, r3, #1
   8508a:	f040 8090 	bne.w	851ae <__sfvwrite_r+0x1b2>
   8508e:	464f      	mov	r7, r9
   85090:	9601      	str	r6, [sp, #4]
   85092:	2f00      	cmp	r7, #0
   85094:	d056      	beq.n	85144 <__sfvwrite_r+0x148>
   85096:	059a      	lsls	r2, r3, #22
   85098:	f8d4 8008 	ldr.w	r8, [r4, #8]
   8509c:	d55f      	bpl.n	8515e <__sfvwrite_r+0x162>
   8509e:	4547      	cmp	r7, r8
   850a0:	46c2      	mov	sl, r8
   850a2:	f0c0 80bf 	bcc.w	85224 <__sfvwrite_r+0x228>
   850a6:	f413 6f90 	tst.w	r3, #1152	; 0x480
   850aa:	f000 80bd 	beq.w	85228 <__sfvwrite_r+0x22c>
   850ae:	6962      	ldr	r2, [r4, #20]
   850b0:	6820      	ldr	r0, [r4, #0]
   850b2:	6921      	ldr	r1, [r4, #16]
   850b4:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   850b8:	ebc1 0a00 	rsb	sl, r1, r0
   850bc:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   850c0:	f10a 0001 	add.w	r0, sl, #1
   850c4:	ea4f 0868 	mov.w	r8, r8, asr #1
   850c8:	4438      	add	r0, r7
   850ca:	4540      	cmp	r0, r8
   850cc:	4642      	mov	r2, r8
   850ce:	bf84      	itt	hi
   850d0:	4680      	movhi	r8, r0
   850d2:	4642      	movhi	r2, r8
   850d4:	055b      	lsls	r3, r3, #21
   850d6:	f140 80f2 	bpl.w	852be <__sfvwrite_r+0x2c2>
   850da:	4611      	mov	r1, r2
   850dc:	9802      	ldr	r0, [sp, #8]
   850de:	f000 f9bf 	bl	85460 <_malloc_r>
   850e2:	4683      	mov	fp, r0
   850e4:	2800      	cmp	r0, #0
   850e6:	f000 8105 	beq.w	852f4 <__sfvwrite_r+0x2f8>
   850ea:	4652      	mov	r2, sl
   850ec:	6921      	ldr	r1, [r4, #16]
   850ee:	f000 fca9 	bl	85a44 <memcpy>
   850f2:	89a3      	ldrh	r3, [r4, #12]
   850f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   850f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   850fc:	81a3      	strh	r3, [r4, #12]
   850fe:	ebca 0308 	rsb	r3, sl, r8
   85102:	eb0b 000a 	add.w	r0, fp, sl
   85106:	f8c4 8014 	str.w	r8, [r4, #20]
   8510a:	46ba      	mov	sl, r7
   8510c:	46b8      	mov	r8, r7
   8510e:	f8c4 b010 	str.w	fp, [r4, #16]
   85112:	6020      	str	r0, [r4, #0]
   85114:	60a3      	str	r3, [r4, #8]
   85116:	4652      	mov	r2, sl
   85118:	4649      	mov	r1, r9
   8511a:	f000 fd09 	bl	85b30 <memmove>
   8511e:	68a0      	ldr	r0, [r4, #8]
   85120:	6823      	ldr	r3, [r4, #0]
   85122:	ebc8 0000 	rsb	r0, r8, r0
   85126:	60a0      	str	r0, [r4, #8]
   85128:	4638      	mov	r0, r7
   8512a:	4453      	add	r3, sl
   8512c:	6023      	str	r3, [r4, #0]
   8512e:	9a01      	ldr	r2, [sp, #4]
   85130:	4481      	add	r9, r0
   85132:	6893      	ldr	r3, [r2, #8]
   85134:	1a3f      	subs	r7, r7, r0
   85136:	1a1b      	subs	r3, r3, r0
   85138:	6093      	str	r3, [r2, #8]
   8513a:	2b00      	cmp	r3, #0
   8513c:	d090      	beq.n	85060 <__sfvwrite_r+0x64>
   8513e:	89a3      	ldrh	r3, [r4, #12]
   85140:	2f00      	cmp	r7, #0
   85142:	d1a8      	bne.n	85096 <__sfvwrite_r+0x9a>
   85144:	f8d5 9000 	ldr.w	r9, [r5]
   85148:	686f      	ldr	r7, [r5, #4]
   8514a:	3508      	adds	r5, #8
   8514c:	e7a1      	b.n	85092 <__sfvwrite_r+0x96>
   8514e:	f8d5 9000 	ldr.w	r9, [r5]
   85152:	f8d5 8004 	ldr.w	r8, [r5, #4]
   85156:	3508      	adds	r5, #8
   85158:	e76a      	b.n	85030 <__sfvwrite_r+0x34>
   8515a:	2000      	movs	r0, #0
   8515c:	4770      	bx	lr
   8515e:	6820      	ldr	r0, [r4, #0]
   85160:	6923      	ldr	r3, [r4, #16]
   85162:	4298      	cmp	r0, r3
   85164:	d803      	bhi.n	8516e <__sfvwrite_r+0x172>
   85166:	6962      	ldr	r2, [r4, #20]
   85168:	4297      	cmp	r7, r2
   8516a:	f080 8083 	bcs.w	85274 <__sfvwrite_r+0x278>
   8516e:	45b8      	cmp	r8, r7
   85170:	bf28      	it	cs
   85172:	46b8      	movcs	r8, r7
   85174:	4649      	mov	r1, r9
   85176:	4642      	mov	r2, r8
   85178:	f000 fcda 	bl	85b30 <memmove>
   8517c:	68a3      	ldr	r3, [r4, #8]
   8517e:	6822      	ldr	r2, [r4, #0]
   85180:	ebc8 0303 	rsb	r3, r8, r3
   85184:	4442      	add	r2, r8
   85186:	60a3      	str	r3, [r4, #8]
   85188:	6022      	str	r2, [r4, #0]
   8518a:	2b00      	cmp	r3, #0
   8518c:	d148      	bne.n	85220 <__sfvwrite_r+0x224>
   8518e:	4621      	mov	r1, r4
   85190:	9802      	ldr	r0, [sp, #8]
   85192:	f7ff fcef 	bl	84b74 <_fflush_r>
   85196:	2800      	cmp	r0, #0
   85198:	d042      	beq.n	85220 <__sfvwrite_r+0x224>
   8519a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8519e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   851a2:	f04f 30ff 	mov.w	r0, #4294967295
   851a6:	81a3      	strh	r3, [r4, #12]
   851a8:	b005      	add	sp, #20
   851aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   851ae:	4680      	mov	r8, r0
   851b0:	4682      	mov	sl, r0
   851b2:	4681      	mov	r9, r0
   851b4:	9001      	str	r0, [sp, #4]
   851b6:	f1b9 0f00 	cmp.w	r9, #0
   851ba:	d029      	beq.n	85210 <__sfvwrite_r+0x214>
   851bc:	9b01      	ldr	r3, [sp, #4]
   851be:	2b00      	cmp	r3, #0
   851c0:	d04b      	beq.n	8525a <__sfvwrite_r+0x25e>
   851c2:	45c8      	cmp	r8, r9
   851c4:	46c3      	mov	fp, r8
   851c6:	bf28      	it	cs
   851c8:	46cb      	movcs	fp, r9
   851ca:	6820      	ldr	r0, [r4, #0]
   851cc:	6923      	ldr	r3, [r4, #16]
   851ce:	465f      	mov	r7, fp
   851d0:	4298      	cmp	r0, r3
   851d2:	6962      	ldr	r2, [r4, #20]
   851d4:	d903      	bls.n	851de <__sfvwrite_r+0x1e2>
   851d6:	68a3      	ldr	r3, [r4, #8]
   851d8:	4413      	add	r3, r2
   851da:	459b      	cmp	fp, r3
   851dc:	dc5c      	bgt.n	85298 <__sfvwrite_r+0x29c>
   851de:	4593      	cmp	fp, r2
   851e0:	db24      	blt.n	8522c <__sfvwrite_r+0x230>
   851e2:	4613      	mov	r3, r2
   851e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   851e6:	4652      	mov	r2, sl
   851e8:	69e1      	ldr	r1, [r4, #28]
   851ea:	9802      	ldr	r0, [sp, #8]
   851ec:	47b8      	blx	r7
   851ee:	1e07      	subs	r7, r0, #0
   851f0:	ddd3      	ble.n	8519a <__sfvwrite_r+0x19e>
   851f2:	ebb8 0807 	subs.w	r8, r8, r7
   851f6:	d027      	beq.n	85248 <__sfvwrite_r+0x24c>
   851f8:	68b3      	ldr	r3, [r6, #8]
   851fa:	44ba      	add	sl, r7
   851fc:	1bdb      	subs	r3, r3, r7
   851fe:	ebc7 0909 	rsb	r9, r7, r9
   85202:	60b3      	str	r3, [r6, #8]
   85204:	2b00      	cmp	r3, #0
   85206:	f43f af2b 	beq.w	85060 <__sfvwrite_r+0x64>
   8520a:	f1b9 0f00 	cmp.w	r9, #0
   8520e:	d1d5      	bne.n	851bc <__sfvwrite_r+0x1c0>
   85210:	2300      	movs	r3, #0
   85212:	f8d5 a000 	ldr.w	sl, [r5]
   85216:	f8d5 9004 	ldr.w	r9, [r5, #4]
   8521a:	9301      	str	r3, [sp, #4]
   8521c:	3508      	adds	r5, #8
   8521e:	e7ca      	b.n	851b6 <__sfvwrite_r+0x1ba>
   85220:	4640      	mov	r0, r8
   85222:	e784      	b.n	8512e <__sfvwrite_r+0x132>
   85224:	46b8      	mov	r8, r7
   85226:	46ba      	mov	sl, r7
   85228:	6820      	ldr	r0, [r4, #0]
   8522a:	e774      	b.n	85116 <__sfvwrite_r+0x11a>
   8522c:	465a      	mov	r2, fp
   8522e:	4651      	mov	r1, sl
   85230:	f000 fc7e 	bl	85b30 <memmove>
   85234:	68a2      	ldr	r2, [r4, #8]
   85236:	6823      	ldr	r3, [r4, #0]
   85238:	ebcb 0202 	rsb	r2, fp, r2
   8523c:	445b      	add	r3, fp
   8523e:	ebb8 0807 	subs.w	r8, r8, r7
   85242:	60a2      	str	r2, [r4, #8]
   85244:	6023      	str	r3, [r4, #0]
   85246:	d1d7      	bne.n	851f8 <__sfvwrite_r+0x1fc>
   85248:	4621      	mov	r1, r4
   8524a:	9802      	ldr	r0, [sp, #8]
   8524c:	f7ff fc92 	bl	84b74 <_fflush_r>
   85250:	2800      	cmp	r0, #0
   85252:	d1a2      	bne.n	8519a <__sfvwrite_r+0x19e>
   85254:	f8cd 8004 	str.w	r8, [sp, #4]
   85258:	e7ce      	b.n	851f8 <__sfvwrite_r+0x1fc>
   8525a:	464a      	mov	r2, r9
   8525c:	210a      	movs	r1, #10
   8525e:	4650      	mov	r0, sl
   85260:	f000 fbaa 	bl	859b8 <memchr>
   85264:	2800      	cmp	r0, #0
   85266:	d03d      	beq.n	852e4 <__sfvwrite_r+0x2e8>
   85268:	3001      	adds	r0, #1
   8526a:	2301      	movs	r3, #1
   8526c:	ebca 0800 	rsb	r8, sl, r0
   85270:	9301      	str	r3, [sp, #4]
   85272:	e7a6      	b.n	851c2 <__sfvwrite_r+0x1c6>
   85274:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   85278:	42bb      	cmp	r3, r7
   8527a:	bf28      	it	cs
   8527c:	463b      	movcs	r3, r7
   8527e:	fb93 f3f2 	sdiv	r3, r3, r2
   85282:	69e1      	ldr	r1, [r4, #28]
   85284:	fb02 f303 	mul.w	r3, r2, r3
   85288:	9802      	ldr	r0, [sp, #8]
   8528a:	464a      	mov	r2, r9
   8528c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8528e:	47b0      	blx	r6
   85290:	2800      	cmp	r0, #0
   85292:	f73f af4c 	bgt.w	8512e <__sfvwrite_r+0x132>
   85296:	e780      	b.n	8519a <__sfvwrite_r+0x19e>
   85298:	461a      	mov	r2, r3
   8529a:	4651      	mov	r1, sl
   8529c:	9303      	str	r3, [sp, #12]
   8529e:	f000 fc47 	bl	85b30 <memmove>
   852a2:	6822      	ldr	r2, [r4, #0]
   852a4:	9b03      	ldr	r3, [sp, #12]
   852a6:	4621      	mov	r1, r4
   852a8:	441a      	add	r2, r3
   852aa:	6022      	str	r2, [r4, #0]
   852ac:	9802      	ldr	r0, [sp, #8]
   852ae:	f7ff fc61 	bl	84b74 <_fflush_r>
   852b2:	9b03      	ldr	r3, [sp, #12]
   852b4:	2800      	cmp	r0, #0
   852b6:	f47f af70 	bne.w	8519a <__sfvwrite_r+0x19e>
   852ba:	461f      	mov	r7, r3
   852bc:	e799      	b.n	851f2 <__sfvwrite_r+0x1f6>
   852be:	9802      	ldr	r0, [sp, #8]
   852c0:	f000 fc9e 	bl	85c00 <_realloc_r>
   852c4:	4683      	mov	fp, r0
   852c6:	2800      	cmp	r0, #0
   852c8:	f47f af19 	bne.w	850fe <__sfvwrite_r+0x102>
   852cc:	9d02      	ldr	r5, [sp, #8]
   852ce:	6921      	ldr	r1, [r4, #16]
   852d0:	4628      	mov	r0, r5
   852d2:	f7ff fdab 	bl	84e2c <_free_r>
   852d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   852da:	220c      	movs	r2, #12
   852dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   852e0:	602a      	str	r2, [r5, #0]
   852e2:	e75c      	b.n	8519e <__sfvwrite_r+0x1a2>
   852e4:	2301      	movs	r3, #1
   852e6:	f109 0801 	add.w	r8, r9, #1
   852ea:	9301      	str	r3, [sp, #4]
   852ec:	e769      	b.n	851c2 <__sfvwrite_r+0x1c6>
   852ee:	f04f 30ff 	mov.w	r0, #4294967295
   852f2:	e6b6      	b.n	85062 <__sfvwrite_r+0x66>
   852f4:	9a02      	ldr	r2, [sp, #8]
   852f6:	230c      	movs	r3, #12
   852f8:	6013      	str	r3, [r2, #0]
   852fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   852fe:	e74e      	b.n	8519e <__sfvwrite_r+0x1a2>
   85300:	7ffffc00 	.word	0x7ffffc00

00085304 <_fwalk_reent>:
   85304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85308:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   8530c:	d01e      	beq.n	8534c <_fwalk_reent+0x48>
   8530e:	4688      	mov	r8, r1
   85310:	4607      	mov	r7, r0
   85312:	f04f 0900 	mov.w	r9, #0
   85316:	6875      	ldr	r5, [r6, #4]
   85318:	68b4      	ldr	r4, [r6, #8]
   8531a:	3d01      	subs	r5, #1
   8531c:	d410      	bmi.n	85340 <_fwalk_reent+0x3c>
   8531e:	89a3      	ldrh	r3, [r4, #12]
   85320:	3d01      	subs	r5, #1
   85322:	2b01      	cmp	r3, #1
   85324:	d908      	bls.n	85338 <_fwalk_reent+0x34>
   85326:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8532a:	3301      	adds	r3, #1
   8532c:	d004      	beq.n	85338 <_fwalk_reent+0x34>
   8532e:	4621      	mov	r1, r4
   85330:	4638      	mov	r0, r7
   85332:	47c0      	blx	r8
   85334:	ea49 0900 	orr.w	r9, r9, r0
   85338:	1c6b      	adds	r3, r5, #1
   8533a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8533e:	d1ee      	bne.n	8531e <_fwalk_reent+0x1a>
   85340:	6836      	ldr	r6, [r6, #0]
   85342:	2e00      	cmp	r6, #0
   85344:	d1e7      	bne.n	85316 <_fwalk_reent+0x12>
   85346:	4648      	mov	r0, r9
   85348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8534c:	46b1      	mov	r9, r6
   8534e:	4648      	mov	r0, r9
   85350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00085354 <__locale_charset>:
   85354:	4800      	ldr	r0, [pc, #0]	; (85358 <__locale_charset+0x4>)
   85356:	4770      	bx	lr
   85358:	20070834 	.word	0x20070834

0008535c <__locale_mb_cur_max>:
   8535c:	4b01      	ldr	r3, [pc, #4]	; (85364 <__locale_mb_cur_max+0x8>)
   8535e:	6818      	ldr	r0, [r3, #0]
   85360:	4770      	bx	lr
   85362:	bf00      	nop
   85364:	20070854 	.word	0x20070854

00085368 <__swhatbuf_r>:
   85368:	b570      	push	{r4, r5, r6, lr}
   8536a:	460e      	mov	r6, r1
   8536c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85370:	b090      	sub	sp, #64	; 0x40
   85372:	2900      	cmp	r1, #0
   85374:	4614      	mov	r4, r2
   85376:	461d      	mov	r5, r3
   85378:	db14      	blt.n	853a4 <__swhatbuf_r+0x3c>
   8537a:	aa01      	add	r2, sp, #4
   8537c:	f000 ffca 	bl	86314 <_fstat_r>
   85380:	2800      	cmp	r0, #0
   85382:	db0f      	blt.n	853a4 <__swhatbuf_r+0x3c>
   85384:	9a02      	ldr	r2, [sp, #8]
   85386:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8538a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8538e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   85392:	fab2 f282 	clz	r2, r2
   85396:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8539a:	0952      	lsrs	r2, r2, #5
   8539c:	602a      	str	r2, [r5, #0]
   8539e:	6023      	str	r3, [r4, #0]
   853a0:	b010      	add	sp, #64	; 0x40
   853a2:	bd70      	pop	{r4, r5, r6, pc}
   853a4:	89b2      	ldrh	r2, [r6, #12]
   853a6:	2000      	movs	r0, #0
   853a8:	f002 0280 	and.w	r2, r2, #128	; 0x80
   853ac:	b292      	uxth	r2, r2
   853ae:	6028      	str	r0, [r5, #0]
   853b0:	b11a      	cbz	r2, 853ba <__swhatbuf_r+0x52>
   853b2:	2340      	movs	r3, #64	; 0x40
   853b4:	6023      	str	r3, [r4, #0]
   853b6:	b010      	add	sp, #64	; 0x40
   853b8:	bd70      	pop	{r4, r5, r6, pc}
   853ba:	4610      	mov	r0, r2
   853bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   853c0:	6023      	str	r3, [r4, #0]
   853c2:	b010      	add	sp, #64	; 0x40
   853c4:	bd70      	pop	{r4, r5, r6, pc}
   853c6:	bf00      	nop

000853c8 <__smakebuf_r>:
   853c8:	898a      	ldrh	r2, [r1, #12]
   853ca:	460b      	mov	r3, r1
   853cc:	0792      	lsls	r2, r2, #30
   853ce:	d506      	bpl.n	853de <__smakebuf_r+0x16>
   853d0:	f101 0243 	add.w	r2, r1, #67	; 0x43
   853d4:	2101      	movs	r1, #1
   853d6:	601a      	str	r2, [r3, #0]
   853d8:	611a      	str	r2, [r3, #16]
   853da:	6159      	str	r1, [r3, #20]
   853dc:	4770      	bx	lr
   853de:	b5f0      	push	{r4, r5, r6, r7, lr}
   853e0:	b083      	sub	sp, #12
   853e2:	ab01      	add	r3, sp, #4
   853e4:	466a      	mov	r2, sp
   853e6:	460c      	mov	r4, r1
   853e8:	4605      	mov	r5, r0
   853ea:	f7ff ffbd 	bl	85368 <__swhatbuf_r>
   853ee:	9900      	ldr	r1, [sp, #0]
   853f0:	4606      	mov	r6, r0
   853f2:	4628      	mov	r0, r5
   853f4:	f000 f834 	bl	85460 <_malloc_r>
   853f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   853fc:	b1d0      	cbz	r0, 85434 <__smakebuf_r+0x6c>
   853fe:	e89d 0006 	ldmia.w	sp, {r1, r2}
   85402:	4f12      	ldr	r7, [pc, #72]	; (8544c <__smakebuf_r+0x84>)
   85404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85408:	63ef      	str	r7, [r5, #60]	; 0x3c
   8540a:	81a3      	strh	r3, [r4, #12]
   8540c:	6020      	str	r0, [r4, #0]
   8540e:	6120      	str	r0, [r4, #16]
   85410:	6161      	str	r1, [r4, #20]
   85412:	b91a      	cbnz	r2, 8541c <__smakebuf_r+0x54>
   85414:	4333      	orrs	r3, r6
   85416:	81a3      	strh	r3, [r4, #12]
   85418:	b003      	add	sp, #12
   8541a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8541c:	4628      	mov	r0, r5
   8541e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85422:	f000 ff8b 	bl	8633c <_isatty_r>
   85426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8542a:	2800      	cmp	r0, #0
   8542c:	d0f2      	beq.n	85414 <__smakebuf_r+0x4c>
   8542e:	f043 0301 	orr.w	r3, r3, #1
   85432:	e7ef      	b.n	85414 <__smakebuf_r+0x4c>
   85434:	059a      	lsls	r2, r3, #22
   85436:	d4ef      	bmi.n	85418 <__smakebuf_r+0x50>
   85438:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8543c:	f043 0302 	orr.w	r3, r3, #2
   85440:	2101      	movs	r1, #1
   85442:	81a3      	strh	r3, [r4, #12]
   85444:	6022      	str	r2, [r4, #0]
   85446:	6122      	str	r2, [r4, #16]
   85448:	6161      	str	r1, [r4, #20]
   8544a:	e7e5      	b.n	85418 <__smakebuf_r+0x50>
   8544c:	00084ba1 	.word	0x00084ba1

00085450 <malloc>:
   85450:	4b02      	ldr	r3, [pc, #8]	; (8545c <malloc+0xc>)
   85452:	4601      	mov	r1, r0
   85454:	6818      	ldr	r0, [r3, #0]
   85456:	f000 b803 	b.w	85460 <_malloc_r>
   8545a:	bf00      	nop
   8545c:	20070830 	.word	0x20070830

00085460 <_malloc_r>:
   85460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85464:	f101 050b 	add.w	r5, r1, #11
   85468:	2d16      	cmp	r5, #22
   8546a:	b083      	sub	sp, #12
   8546c:	4606      	mov	r6, r0
   8546e:	f240 80a0 	bls.w	855b2 <_malloc_r+0x152>
   85472:	f035 0507 	bics.w	r5, r5, #7
   85476:	f100 80c0 	bmi.w	855fa <_malloc_r+0x19a>
   8547a:	42a9      	cmp	r1, r5
   8547c:	f200 80bd 	bhi.w	855fa <_malloc_r+0x19a>
   85480:	f000 fbba 	bl	85bf8 <__malloc_lock>
   85484:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   85488:	f0c0 8290 	bcc.w	859ac <_malloc_r+0x54c>
   8548c:	0a6b      	lsrs	r3, r5, #9
   8548e:	f000 80bb 	beq.w	85608 <_malloc_r+0x1a8>
   85492:	2b04      	cmp	r3, #4
   85494:	f200 8177 	bhi.w	85786 <_malloc_r+0x326>
   85498:	09a8      	lsrs	r0, r5, #6
   8549a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   8549e:	ea4f 014e 	mov.w	r1, lr, lsl #1
   854a2:	3038      	adds	r0, #56	; 0x38
   854a4:	4fbe      	ldr	r7, [pc, #760]	; (857a0 <_malloc_r+0x340>)
   854a6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   854aa:	684c      	ldr	r4, [r1, #4]
   854ac:	3908      	subs	r1, #8
   854ae:	42a1      	cmp	r1, r4
   854b0:	d107      	bne.n	854c2 <_malloc_r+0x62>
   854b2:	e0ae      	b.n	85612 <_malloc_r+0x1b2>
   854b4:	2a00      	cmp	r2, #0
   854b6:	f280 80ae 	bge.w	85616 <_malloc_r+0x1b6>
   854ba:	68e4      	ldr	r4, [r4, #12]
   854bc:	42a1      	cmp	r1, r4
   854be:	f000 80a8 	beq.w	85612 <_malloc_r+0x1b2>
   854c2:	6863      	ldr	r3, [r4, #4]
   854c4:	f023 0303 	bic.w	r3, r3, #3
   854c8:	1b5a      	subs	r2, r3, r5
   854ca:	2a0f      	cmp	r2, #15
   854cc:	ddf2      	ble.n	854b4 <_malloc_r+0x54>
   854ce:	49b4      	ldr	r1, [pc, #720]	; (857a0 <_malloc_r+0x340>)
   854d0:	693c      	ldr	r4, [r7, #16]
   854d2:	f101 0e08 	add.w	lr, r1, #8
   854d6:	4574      	cmp	r4, lr
   854d8:	f000 81a8 	beq.w	8582c <_malloc_r+0x3cc>
   854dc:	6863      	ldr	r3, [r4, #4]
   854de:	f023 0303 	bic.w	r3, r3, #3
   854e2:	1b5a      	subs	r2, r3, r5
   854e4:	2a0f      	cmp	r2, #15
   854e6:	f300 818e 	bgt.w	85806 <_malloc_r+0x3a6>
   854ea:	2a00      	cmp	r2, #0
   854ec:	f8c1 e014 	str.w	lr, [r1, #20]
   854f0:	f8c1 e010 	str.w	lr, [r1, #16]
   854f4:	f280 8093 	bge.w	8561e <_malloc_r+0x1be>
   854f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   854fc:	f080 815c 	bcs.w	857b8 <_malloc_r+0x358>
   85500:	08db      	lsrs	r3, r3, #3
   85502:	684a      	ldr	r2, [r1, #4]
   85504:	ea4f 09a3 	mov.w	r9, r3, asr #2
   85508:	f04f 0c01 	mov.w	ip, #1
   8550c:	3301      	adds	r3, #1
   8550e:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   85512:	fa0c f909 	lsl.w	r9, ip, r9
   85516:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   8551a:	ea49 0202 	orr.w	r2, r9, r2
   8551e:	f1ac 0c08 	sub.w	ip, ip, #8
   85522:	f8c4 c00c 	str.w	ip, [r4, #12]
   85526:	f8c4 8008 	str.w	r8, [r4, #8]
   8552a:	604a      	str	r2, [r1, #4]
   8552c:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   85530:	f8c8 400c 	str.w	r4, [r8, #12]
   85534:	1083      	asrs	r3, r0, #2
   85536:	2401      	movs	r4, #1
   85538:	409c      	lsls	r4, r3
   8553a:	4294      	cmp	r4, r2
   8553c:	d87c      	bhi.n	85638 <_malloc_r+0x1d8>
   8553e:	4214      	tst	r4, r2
   85540:	d106      	bne.n	85550 <_malloc_r+0xf0>
   85542:	f020 0003 	bic.w	r0, r0, #3
   85546:	0064      	lsls	r4, r4, #1
   85548:	4214      	tst	r4, r2
   8554a:	f100 0004 	add.w	r0, r0, #4
   8554e:	d0fa      	beq.n	85546 <_malloc_r+0xe6>
   85550:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   85554:	46cc      	mov	ip, r9
   85556:	4680      	mov	r8, r0
   85558:	f8dc 100c 	ldr.w	r1, [ip, #12]
   8555c:	458c      	cmp	ip, r1
   8555e:	d107      	bne.n	85570 <_malloc_r+0x110>
   85560:	e166      	b.n	85830 <_malloc_r+0x3d0>
   85562:	2a00      	cmp	r2, #0
   85564:	f280 8174 	bge.w	85850 <_malloc_r+0x3f0>
   85568:	68c9      	ldr	r1, [r1, #12]
   8556a:	458c      	cmp	ip, r1
   8556c:	f000 8160 	beq.w	85830 <_malloc_r+0x3d0>
   85570:	684b      	ldr	r3, [r1, #4]
   85572:	f023 0303 	bic.w	r3, r3, #3
   85576:	1b5a      	subs	r2, r3, r5
   85578:	2a0f      	cmp	r2, #15
   8557a:	ddf2      	ble.n	85562 <_malloc_r+0x102>
   8557c:	460c      	mov	r4, r1
   8557e:	68cb      	ldr	r3, [r1, #12]
   85580:	f854 cf08 	ldr.w	ip, [r4, #8]!
   85584:	f045 0801 	orr.w	r8, r5, #1
   85588:	f8c1 8004 	str.w	r8, [r1, #4]
   8558c:	440d      	add	r5, r1
   8558e:	f042 0101 	orr.w	r1, r2, #1
   85592:	f8cc 300c 	str.w	r3, [ip, #12]
   85596:	4630      	mov	r0, r6
   85598:	f8c3 c008 	str.w	ip, [r3, #8]
   8559c:	617d      	str	r5, [r7, #20]
   8559e:	613d      	str	r5, [r7, #16]
   855a0:	f8c5 e00c 	str.w	lr, [r5, #12]
   855a4:	f8c5 e008 	str.w	lr, [r5, #8]
   855a8:	6069      	str	r1, [r5, #4]
   855aa:	50aa      	str	r2, [r5, r2]
   855ac:	f000 fb26 	bl	85bfc <__malloc_unlock>
   855b0:	e01f      	b.n	855f2 <_malloc_r+0x192>
   855b2:	2910      	cmp	r1, #16
   855b4:	d821      	bhi.n	855fa <_malloc_r+0x19a>
   855b6:	f000 fb1f 	bl	85bf8 <__malloc_lock>
   855ba:	2510      	movs	r5, #16
   855bc:	2306      	movs	r3, #6
   855be:	2002      	movs	r0, #2
   855c0:	4f77      	ldr	r7, [pc, #476]	; (857a0 <_malloc_r+0x340>)
   855c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   855c6:	685c      	ldr	r4, [r3, #4]
   855c8:	f1a3 0208 	sub.w	r2, r3, #8
   855cc:	4294      	cmp	r4, r2
   855ce:	f000 8138 	beq.w	85842 <_malloc_r+0x3e2>
   855d2:	6863      	ldr	r3, [r4, #4]
   855d4:	68e1      	ldr	r1, [r4, #12]
   855d6:	f023 0303 	bic.w	r3, r3, #3
   855da:	4423      	add	r3, r4
   855dc:	685a      	ldr	r2, [r3, #4]
   855de:	68a5      	ldr	r5, [r4, #8]
   855e0:	f042 0201 	orr.w	r2, r2, #1
   855e4:	60e9      	str	r1, [r5, #12]
   855e6:	4630      	mov	r0, r6
   855e8:	608d      	str	r5, [r1, #8]
   855ea:	605a      	str	r2, [r3, #4]
   855ec:	f000 fb06 	bl	85bfc <__malloc_unlock>
   855f0:	3408      	adds	r4, #8
   855f2:	4620      	mov	r0, r4
   855f4:	b003      	add	sp, #12
   855f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   855fa:	2400      	movs	r4, #0
   855fc:	4620      	mov	r0, r4
   855fe:	230c      	movs	r3, #12
   85600:	6033      	str	r3, [r6, #0]
   85602:	b003      	add	sp, #12
   85604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85608:	2180      	movs	r1, #128	; 0x80
   8560a:	f04f 0e40 	mov.w	lr, #64	; 0x40
   8560e:	203f      	movs	r0, #63	; 0x3f
   85610:	e748      	b.n	854a4 <_malloc_r+0x44>
   85612:	4670      	mov	r0, lr
   85614:	e75b      	b.n	854ce <_malloc_r+0x6e>
   85616:	4423      	add	r3, r4
   85618:	685a      	ldr	r2, [r3, #4]
   8561a:	68e1      	ldr	r1, [r4, #12]
   8561c:	e7df      	b.n	855de <_malloc_r+0x17e>
   8561e:	4423      	add	r3, r4
   85620:	685a      	ldr	r2, [r3, #4]
   85622:	4630      	mov	r0, r6
   85624:	f042 0201 	orr.w	r2, r2, #1
   85628:	605a      	str	r2, [r3, #4]
   8562a:	3408      	adds	r4, #8
   8562c:	f000 fae6 	bl	85bfc <__malloc_unlock>
   85630:	4620      	mov	r0, r4
   85632:	b003      	add	sp, #12
   85634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85638:	68bc      	ldr	r4, [r7, #8]
   8563a:	6863      	ldr	r3, [r4, #4]
   8563c:	f023 0803 	bic.w	r8, r3, #3
   85640:	45a8      	cmp	r8, r5
   85642:	d304      	bcc.n	8564e <_malloc_r+0x1ee>
   85644:	ebc5 0308 	rsb	r3, r5, r8
   85648:	2b0f      	cmp	r3, #15
   8564a:	f300 808c 	bgt.w	85766 <_malloc_r+0x306>
   8564e:	4b55      	ldr	r3, [pc, #340]	; (857a4 <_malloc_r+0x344>)
   85650:	f8df 9160 	ldr.w	r9, [pc, #352]	; 857b4 <_malloc_r+0x354>
   85654:	681a      	ldr	r2, [r3, #0]
   85656:	f8d9 3000 	ldr.w	r3, [r9]
   8565a:	442a      	add	r2, r5
   8565c:	3301      	adds	r3, #1
   8565e:	eb04 0a08 	add.w	sl, r4, r8
   85662:	f000 8160 	beq.w	85926 <_malloc_r+0x4c6>
   85666:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   8566a:	320f      	adds	r2, #15
   8566c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   85670:	f022 020f 	bic.w	r2, r2, #15
   85674:	4611      	mov	r1, r2
   85676:	4630      	mov	r0, r6
   85678:	9201      	str	r2, [sp, #4]
   8567a:	f000 fcab 	bl	85fd4 <_sbrk_r>
   8567e:	f1b0 3fff 	cmp.w	r0, #4294967295
   85682:	4683      	mov	fp, r0
   85684:	9a01      	ldr	r2, [sp, #4]
   85686:	f000 8158 	beq.w	8593a <_malloc_r+0x4da>
   8568a:	4582      	cmp	sl, r0
   8568c:	f200 80fc 	bhi.w	85888 <_malloc_r+0x428>
   85690:	4b45      	ldr	r3, [pc, #276]	; (857a8 <_malloc_r+0x348>)
   85692:	45da      	cmp	sl, fp
   85694:	6819      	ldr	r1, [r3, #0]
   85696:	4411      	add	r1, r2
   85698:	6019      	str	r1, [r3, #0]
   8569a:	f000 8153 	beq.w	85944 <_malloc_r+0x4e4>
   8569e:	f8d9 0000 	ldr.w	r0, [r9]
   856a2:	f8df e110 	ldr.w	lr, [pc, #272]	; 857b4 <_malloc_r+0x354>
   856a6:	3001      	adds	r0, #1
   856a8:	bf1b      	ittet	ne
   856aa:	ebca 0a0b 	rsbne	sl, sl, fp
   856ae:	4451      	addne	r1, sl
   856b0:	f8ce b000 	streq.w	fp, [lr]
   856b4:	6019      	strne	r1, [r3, #0]
   856b6:	f01b 0107 	ands.w	r1, fp, #7
   856ba:	f000 8117 	beq.w	858ec <_malloc_r+0x48c>
   856be:	f1c1 0008 	rsb	r0, r1, #8
   856c2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   856c6:	4483      	add	fp, r0
   856c8:	3108      	adds	r1, #8
   856ca:	445a      	add	r2, fp
   856cc:	f3c2 020b 	ubfx	r2, r2, #0, #12
   856d0:	ebc2 0901 	rsb	r9, r2, r1
   856d4:	4649      	mov	r1, r9
   856d6:	4630      	mov	r0, r6
   856d8:	9301      	str	r3, [sp, #4]
   856da:	f000 fc7b 	bl	85fd4 <_sbrk_r>
   856de:	1c43      	adds	r3, r0, #1
   856e0:	9b01      	ldr	r3, [sp, #4]
   856e2:	f000 813f 	beq.w	85964 <_malloc_r+0x504>
   856e6:	ebcb 0200 	rsb	r2, fp, r0
   856ea:	444a      	add	r2, r9
   856ec:	f042 0201 	orr.w	r2, r2, #1
   856f0:	6819      	ldr	r1, [r3, #0]
   856f2:	42bc      	cmp	r4, r7
   856f4:	4449      	add	r1, r9
   856f6:	f8c7 b008 	str.w	fp, [r7, #8]
   856fa:	6019      	str	r1, [r3, #0]
   856fc:	f8cb 2004 	str.w	r2, [fp, #4]
   85700:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 857a8 <_malloc_r+0x348>
   85704:	d016      	beq.n	85734 <_malloc_r+0x2d4>
   85706:	f1b8 0f0f 	cmp.w	r8, #15
   8570a:	f240 80fd 	bls.w	85908 <_malloc_r+0x4a8>
   8570e:	6862      	ldr	r2, [r4, #4]
   85710:	f1a8 030c 	sub.w	r3, r8, #12
   85714:	f023 0307 	bic.w	r3, r3, #7
   85718:	f002 0201 	and.w	r2, r2, #1
   8571c:	18e0      	adds	r0, r4, r3
   8571e:	f04f 0e05 	mov.w	lr, #5
   85722:	431a      	orrs	r2, r3
   85724:	2b0f      	cmp	r3, #15
   85726:	6062      	str	r2, [r4, #4]
   85728:	f8c0 e004 	str.w	lr, [r0, #4]
   8572c:	f8c0 e008 	str.w	lr, [r0, #8]
   85730:	f200 811c 	bhi.w	8596c <_malloc_r+0x50c>
   85734:	4b1d      	ldr	r3, [pc, #116]	; (857ac <_malloc_r+0x34c>)
   85736:	68bc      	ldr	r4, [r7, #8]
   85738:	681a      	ldr	r2, [r3, #0]
   8573a:	4291      	cmp	r1, r2
   8573c:	bf88      	it	hi
   8573e:	6019      	strhi	r1, [r3, #0]
   85740:	4b1b      	ldr	r3, [pc, #108]	; (857b0 <_malloc_r+0x350>)
   85742:	681a      	ldr	r2, [r3, #0]
   85744:	4291      	cmp	r1, r2
   85746:	6862      	ldr	r2, [r4, #4]
   85748:	bf88      	it	hi
   8574a:	6019      	strhi	r1, [r3, #0]
   8574c:	f022 0203 	bic.w	r2, r2, #3
   85750:	4295      	cmp	r5, r2
   85752:	eba2 0305 	sub.w	r3, r2, r5
   85756:	d801      	bhi.n	8575c <_malloc_r+0x2fc>
   85758:	2b0f      	cmp	r3, #15
   8575a:	dc04      	bgt.n	85766 <_malloc_r+0x306>
   8575c:	4630      	mov	r0, r6
   8575e:	f000 fa4d 	bl	85bfc <__malloc_unlock>
   85762:	2400      	movs	r4, #0
   85764:	e745      	b.n	855f2 <_malloc_r+0x192>
   85766:	f045 0201 	orr.w	r2, r5, #1
   8576a:	f043 0301 	orr.w	r3, r3, #1
   8576e:	4425      	add	r5, r4
   85770:	6062      	str	r2, [r4, #4]
   85772:	4630      	mov	r0, r6
   85774:	60bd      	str	r5, [r7, #8]
   85776:	3408      	adds	r4, #8
   85778:	606b      	str	r3, [r5, #4]
   8577a:	f000 fa3f 	bl	85bfc <__malloc_unlock>
   8577e:	4620      	mov	r0, r4
   85780:	b003      	add	sp, #12
   85782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85786:	2b14      	cmp	r3, #20
   85788:	d971      	bls.n	8586e <_malloc_r+0x40e>
   8578a:	2b54      	cmp	r3, #84	; 0x54
   8578c:	f200 80a4 	bhi.w	858d8 <_malloc_r+0x478>
   85790:	0b28      	lsrs	r0, r5, #12
   85792:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   85796:	ea4f 014e 	mov.w	r1, lr, lsl #1
   8579a:	306e      	adds	r0, #110	; 0x6e
   8579c:	e682      	b.n	854a4 <_malloc_r+0x44>
   8579e:	bf00      	nop
   857a0:	20070858 	.word	0x20070858
   857a4:	20070d8c 	.word	0x20070d8c
   857a8:	20070d90 	.word	0x20070d90
   857ac:	20070d88 	.word	0x20070d88
   857b0:	20070d84 	.word	0x20070d84
   857b4:	20070c64 	.word	0x20070c64
   857b8:	0a5a      	lsrs	r2, r3, #9
   857ba:	2a04      	cmp	r2, #4
   857bc:	d95e      	bls.n	8587c <_malloc_r+0x41c>
   857be:	2a14      	cmp	r2, #20
   857c0:	f200 80b3 	bhi.w	8592a <_malloc_r+0x4ca>
   857c4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   857c8:	0049      	lsls	r1, r1, #1
   857ca:	325b      	adds	r2, #91	; 0x5b
   857cc:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   857d0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   857d4:	f1ac 0c08 	sub.w	ip, ip, #8
   857d8:	458c      	cmp	ip, r1
   857da:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 859b4 <_malloc_r+0x554>
   857de:	f000 8088 	beq.w	858f2 <_malloc_r+0x492>
   857e2:	684a      	ldr	r2, [r1, #4]
   857e4:	f022 0203 	bic.w	r2, r2, #3
   857e8:	4293      	cmp	r3, r2
   857ea:	d202      	bcs.n	857f2 <_malloc_r+0x392>
   857ec:	6889      	ldr	r1, [r1, #8]
   857ee:	458c      	cmp	ip, r1
   857f0:	d1f7      	bne.n	857e2 <_malloc_r+0x382>
   857f2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   857f6:	687a      	ldr	r2, [r7, #4]
   857f8:	f8c4 c00c 	str.w	ip, [r4, #12]
   857fc:	60a1      	str	r1, [r4, #8]
   857fe:	f8cc 4008 	str.w	r4, [ip, #8]
   85802:	60cc      	str	r4, [r1, #12]
   85804:	e696      	b.n	85534 <_malloc_r+0xd4>
   85806:	f045 0701 	orr.w	r7, r5, #1
   8580a:	f042 0301 	orr.w	r3, r2, #1
   8580e:	4425      	add	r5, r4
   85810:	6067      	str	r7, [r4, #4]
   85812:	4630      	mov	r0, r6
   85814:	614d      	str	r5, [r1, #20]
   85816:	610d      	str	r5, [r1, #16]
   85818:	f8c5 e00c 	str.w	lr, [r5, #12]
   8581c:	f8c5 e008 	str.w	lr, [r5, #8]
   85820:	606b      	str	r3, [r5, #4]
   85822:	50aa      	str	r2, [r5, r2]
   85824:	3408      	adds	r4, #8
   85826:	f000 f9e9 	bl	85bfc <__malloc_unlock>
   8582a:	e6e2      	b.n	855f2 <_malloc_r+0x192>
   8582c:	684a      	ldr	r2, [r1, #4]
   8582e:	e681      	b.n	85534 <_malloc_r+0xd4>
   85830:	f108 0801 	add.w	r8, r8, #1
   85834:	f018 0f03 	tst.w	r8, #3
   85838:	f10c 0c08 	add.w	ip, ip, #8
   8583c:	f47f ae8c 	bne.w	85558 <_malloc_r+0xf8>
   85840:	e030      	b.n	858a4 <_malloc_r+0x444>
   85842:	68dc      	ldr	r4, [r3, #12]
   85844:	42a3      	cmp	r3, r4
   85846:	bf08      	it	eq
   85848:	3002      	addeq	r0, #2
   8584a:	f43f ae40 	beq.w	854ce <_malloc_r+0x6e>
   8584e:	e6c0      	b.n	855d2 <_malloc_r+0x172>
   85850:	460c      	mov	r4, r1
   85852:	440b      	add	r3, r1
   85854:	685a      	ldr	r2, [r3, #4]
   85856:	68c9      	ldr	r1, [r1, #12]
   85858:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8585c:	f042 0201 	orr.w	r2, r2, #1
   85860:	605a      	str	r2, [r3, #4]
   85862:	4630      	mov	r0, r6
   85864:	60e9      	str	r1, [r5, #12]
   85866:	608d      	str	r5, [r1, #8]
   85868:	f000 f9c8 	bl	85bfc <__malloc_unlock>
   8586c:	e6c1      	b.n	855f2 <_malloc_r+0x192>
   8586e:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   85872:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   85876:	ea4f 014e 	mov.w	r1, lr, lsl #1
   8587a:	e613      	b.n	854a4 <_malloc_r+0x44>
   8587c:	099a      	lsrs	r2, r3, #6
   8587e:	f102 0139 	add.w	r1, r2, #57	; 0x39
   85882:	0049      	lsls	r1, r1, #1
   85884:	3238      	adds	r2, #56	; 0x38
   85886:	e7a1      	b.n	857cc <_malloc_r+0x36c>
   85888:	42bc      	cmp	r4, r7
   8588a:	4b4a      	ldr	r3, [pc, #296]	; (859b4 <_malloc_r+0x554>)
   8588c:	f43f af00 	beq.w	85690 <_malloc_r+0x230>
   85890:	689c      	ldr	r4, [r3, #8]
   85892:	6862      	ldr	r2, [r4, #4]
   85894:	f022 0203 	bic.w	r2, r2, #3
   85898:	e75a      	b.n	85750 <_malloc_r+0x2f0>
   8589a:	f859 3908 	ldr.w	r3, [r9], #-8
   8589e:	4599      	cmp	r9, r3
   858a0:	f040 8082 	bne.w	859a8 <_malloc_r+0x548>
   858a4:	f010 0f03 	tst.w	r0, #3
   858a8:	f100 30ff 	add.w	r0, r0, #4294967295
   858ac:	d1f5      	bne.n	8589a <_malloc_r+0x43a>
   858ae:	687b      	ldr	r3, [r7, #4]
   858b0:	ea23 0304 	bic.w	r3, r3, r4
   858b4:	607b      	str	r3, [r7, #4]
   858b6:	0064      	lsls	r4, r4, #1
   858b8:	429c      	cmp	r4, r3
   858ba:	f63f aebd 	bhi.w	85638 <_malloc_r+0x1d8>
   858be:	2c00      	cmp	r4, #0
   858c0:	f43f aeba 	beq.w	85638 <_malloc_r+0x1d8>
   858c4:	421c      	tst	r4, r3
   858c6:	4640      	mov	r0, r8
   858c8:	f47f ae42 	bne.w	85550 <_malloc_r+0xf0>
   858cc:	0064      	lsls	r4, r4, #1
   858ce:	421c      	tst	r4, r3
   858d0:	f100 0004 	add.w	r0, r0, #4
   858d4:	d0fa      	beq.n	858cc <_malloc_r+0x46c>
   858d6:	e63b      	b.n	85550 <_malloc_r+0xf0>
   858d8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   858dc:	d818      	bhi.n	85910 <_malloc_r+0x4b0>
   858de:	0be8      	lsrs	r0, r5, #15
   858e0:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   858e4:	ea4f 014e 	mov.w	r1, lr, lsl #1
   858e8:	3077      	adds	r0, #119	; 0x77
   858ea:	e5db      	b.n	854a4 <_malloc_r+0x44>
   858ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   858f0:	e6eb      	b.n	856ca <_malloc_r+0x26a>
   858f2:	2101      	movs	r1, #1
   858f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   858f8:	1092      	asrs	r2, r2, #2
   858fa:	fa01 f202 	lsl.w	r2, r1, r2
   858fe:	431a      	orrs	r2, r3
   85900:	f8c8 2004 	str.w	r2, [r8, #4]
   85904:	4661      	mov	r1, ip
   85906:	e777      	b.n	857f8 <_malloc_r+0x398>
   85908:	2301      	movs	r3, #1
   8590a:	f8cb 3004 	str.w	r3, [fp, #4]
   8590e:	e725      	b.n	8575c <_malloc_r+0x2fc>
   85910:	f240 5254 	movw	r2, #1364	; 0x554
   85914:	4293      	cmp	r3, r2
   85916:	d820      	bhi.n	8595a <_malloc_r+0x4fa>
   85918:	0ca8      	lsrs	r0, r5, #18
   8591a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   8591e:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85922:	307c      	adds	r0, #124	; 0x7c
   85924:	e5be      	b.n	854a4 <_malloc_r+0x44>
   85926:	3210      	adds	r2, #16
   85928:	e6a4      	b.n	85674 <_malloc_r+0x214>
   8592a:	2a54      	cmp	r2, #84	; 0x54
   8592c:	d826      	bhi.n	8597c <_malloc_r+0x51c>
   8592e:	0b1a      	lsrs	r2, r3, #12
   85930:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   85934:	0049      	lsls	r1, r1, #1
   85936:	326e      	adds	r2, #110	; 0x6e
   85938:	e748      	b.n	857cc <_malloc_r+0x36c>
   8593a:	68bc      	ldr	r4, [r7, #8]
   8593c:	6862      	ldr	r2, [r4, #4]
   8593e:	f022 0203 	bic.w	r2, r2, #3
   85942:	e705      	b.n	85750 <_malloc_r+0x2f0>
   85944:	f3ca 000b 	ubfx	r0, sl, #0, #12
   85948:	2800      	cmp	r0, #0
   8594a:	f47f aea8 	bne.w	8569e <_malloc_r+0x23e>
   8594e:	4442      	add	r2, r8
   85950:	68bb      	ldr	r3, [r7, #8]
   85952:	f042 0201 	orr.w	r2, r2, #1
   85956:	605a      	str	r2, [r3, #4]
   85958:	e6ec      	b.n	85734 <_malloc_r+0x2d4>
   8595a:	21fe      	movs	r1, #254	; 0xfe
   8595c:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   85960:	207e      	movs	r0, #126	; 0x7e
   85962:	e59f      	b.n	854a4 <_malloc_r+0x44>
   85964:	2201      	movs	r2, #1
   85966:	f04f 0900 	mov.w	r9, #0
   8596a:	e6c1      	b.n	856f0 <_malloc_r+0x290>
   8596c:	f104 0108 	add.w	r1, r4, #8
   85970:	4630      	mov	r0, r6
   85972:	f7ff fa5b 	bl	84e2c <_free_r>
   85976:	f8d9 1000 	ldr.w	r1, [r9]
   8597a:	e6db      	b.n	85734 <_malloc_r+0x2d4>
   8597c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85980:	d805      	bhi.n	8598e <_malloc_r+0x52e>
   85982:	0bda      	lsrs	r2, r3, #15
   85984:	f102 0178 	add.w	r1, r2, #120	; 0x78
   85988:	0049      	lsls	r1, r1, #1
   8598a:	3277      	adds	r2, #119	; 0x77
   8598c:	e71e      	b.n	857cc <_malloc_r+0x36c>
   8598e:	f240 5154 	movw	r1, #1364	; 0x554
   85992:	428a      	cmp	r2, r1
   85994:	d805      	bhi.n	859a2 <_malloc_r+0x542>
   85996:	0c9a      	lsrs	r2, r3, #18
   85998:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   8599c:	0049      	lsls	r1, r1, #1
   8599e:	327c      	adds	r2, #124	; 0x7c
   859a0:	e714      	b.n	857cc <_malloc_r+0x36c>
   859a2:	21fe      	movs	r1, #254	; 0xfe
   859a4:	227e      	movs	r2, #126	; 0x7e
   859a6:	e711      	b.n	857cc <_malloc_r+0x36c>
   859a8:	687b      	ldr	r3, [r7, #4]
   859aa:	e784      	b.n	858b6 <_malloc_r+0x456>
   859ac:	08e8      	lsrs	r0, r5, #3
   859ae:	1c43      	adds	r3, r0, #1
   859b0:	005b      	lsls	r3, r3, #1
   859b2:	e605      	b.n	855c0 <_malloc_r+0x160>
   859b4:	20070858 	.word	0x20070858

000859b8 <memchr>:
   859b8:	0783      	lsls	r3, r0, #30
   859ba:	b470      	push	{r4, r5, r6}
   859bc:	b2cd      	uxtb	r5, r1
   859be:	d03d      	beq.n	85a3c <memchr+0x84>
   859c0:	1e53      	subs	r3, r2, #1
   859c2:	b302      	cbz	r2, 85a06 <memchr+0x4e>
   859c4:	7802      	ldrb	r2, [r0, #0]
   859c6:	42aa      	cmp	r2, r5
   859c8:	d01e      	beq.n	85a08 <memchr+0x50>
   859ca:	1c42      	adds	r2, r0, #1
   859cc:	e004      	b.n	859d8 <memchr+0x20>
   859ce:	b1d3      	cbz	r3, 85a06 <memchr+0x4e>
   859d0:	7804      	ldrb	r4, [r0, #0]
   859d2:	3b01      	subs	r3, #1
   859d4:	42ac      	cmp	r4, r5
   859d6:	d017      	beq.n	85a08 <memchr+0x50>
   859d8:	f012 0f03 	tst.w	r2, #3
   859dc:	4610      	mov	r0, r2
   859de:	f102 0201 	add.w	r2, r2, #1
   859e2:	d1f4      	bne.n	859ce <memchr+0x16>
   859e4:	2b03      	cmp	r3, #3
   859e6:	d811      	bhi.n	85a0c <memchr+0x54>
   859e8:	b353      	cbz	r3, 85a40 <memchr+0x88>
   859ea:	7802      	ldrb	r2, [r0, #0]
   859ec:	42aa      	cmp	r2, r5
   859ee:	d00b      	beq.n	85a08 <memchr+0x50>
   859f0:	4403      	add	r3, r0
   859f2:	1c42      	adds	r2, r0, #1
   859f4:	e002      	b.n	859fc <memchr+0x44>
   859f6:	7801      	ldrb	r1, [r0, #0]
   859f8:	42a9      	cmp	r1, r5
   859fa:	d005      	beq.n	85a08 <memchr+0x50>
   859fc:	4293      	cmp	r3, r2
   859fe:	4610      	mov	r0, r2
   85a00:	f102 0201 	add.w	r2, r2, #1
   85a04:	d1f7      	bne.n	859f6 <memchr+0x3e>
   85a06:	2000      	movs	r0, #0
   85a08:	bc70      	pop	{r4, r5, r6}
   85a0a:	4770      	bx	lr
   85a0c:	4604      	mov	r4, r0
   85a0e:	020e      	lsls	r6, r1, #8
   85a10:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   85a14:	432e      	orrs	r6, r5
   85a16:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   85a1a:	6822      	ldr	r2, [r4, #0]
   85a1c:	4620      	mov	r0, r4
   85a1e:	4072      	eors	r2, r6
   85a20:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   85a24:	ea21 0202 	bic.w	r2, r1, r2
   85a28:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   85a2c:	f104 0404 	add.w	r4, r4, #4
   85a30:	d1db      	bne.n	859ea <memchr+0x32>
   85a32:	3b04      	subs	r3, #4
   85a34:	2b03      	cmp	r3, #3
   85a36:	4620      	mov	r0, r4
   85a38:	d8ef      	bhi.n	85a1a <memchr+0x62>
   85a3a:	e7d5      	b.n	859e8 <memchr+0x30>
   85a3c:	4613      	mov	r3, r2
   85a3e:	e7d1      	b.n	859e4 <memchr+0x2c>
   85a40:	4618      	mov	r0, r3
   85a42:	e7e1      	b.n	85a08 <memchr+0x50>

00085a44 <memcpy>:
   85a44:	4684      	mov	ip, r0
   85a46:	ea41 0300 	orr.w	r3, r1, r0
   85a4a:	f013 0303 	ands.w	r3, r3, #3
   85a4e:	d149      	bne.n	85ae4 <memcpy+0xa0>
   85a50:	3a40      	subs	r2, #64	; 0x40
   85a52:	d323      	bcc.n	85a9c <memcpy+0x58>
   85a54:	680b      	ldr	r3, [r1, #0]
   85a56:	6003      	str	r3, [r0, #0]
   85a58:	684b      	ldr	r3, [r1, #4]
   85a5a:	6043      	str	r3, [r0, #4]
   85a5c:	688b      	ldr	r3, [r1, #8]
   85a5e:	6083      	str	r3, [r0, #8]
   85a60:	68cb      	ldr	r3, [r1, #12]
   85a62:	60c3      	str	r3, [r0, #12]
   85a64:	690b      	ldr	r3, [r1, #16]
   85a66:	6103      	str	r3, [r0, #16]
   85a68:	694b      	ldr	r3, [r1, #20]
   85a6a:	6143      	str	r3, [r0, #20]
   85a6c:	698b      	ldr	r3, [r1, #24]
   85a6e:	6183      	str	r3, [r0, #24]
   85a70:	69cb      	ldr	r3, [r1, #28]
   85a72:	61c3      	str	r3, [r0, #28]
   85a74:	6a0b      	ldr	r3, [r1, #32]
   85a76:	6203      	str	r3, [r0, #32]
   85a78:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85a7a:	6243      	str	r3, [r0, #36]	; 0x24
   85a7c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   85a7e:	6283      	str	r3, [r0, #40]	; 0x28
   85a80:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   85a82:	62c3      	str	r3, [r0, #44]	; 0x2c
   85a84:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85a86:	6303      	str	r3, [r0, #48]	; 0x30
   85a88:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85a8a:	6343      	str	r3, [r0, #52]	; 0x34
   85a8c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   85a8e:	6383      	str	r3, [r0, #56]	; 0x38
   85a90:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   85a92:	63c3      	str	r3, [r0, #60]	; 0x3c
   85a94:	3040      	adds	r0, #64	; 0x40
   85a96:	3140      	adds	r1, #64	; 0x40
   85a98:	3a40      	subs	r2, #64	; 0x40
   85a9a:	d2db      	bcs.n	85a54 <memcpy+0x10>
   85a9c:	3230      	adds	r2, #48	; 0x30
   85a9e:	d30b      	bcc.n	85ab8 <memcpy+0x74>
   85aa0:	680b      	ldr	r3, [r1, #0]
   85aa2:	6003      	str	r3, [r0, #0]
   85aa4:	684b      	ldr	r3, [r1, #4]
   85aa6:	6043      	str	r3, [r0, #4]
   85aa8:	688b      	ldr	r3, [r1, #8]
   85aaa:	6083      	str	r3, [r0, #8]
   85aac:	68cb      	ldr	r3, [r1, #12]
   85aae:	60c3      	str	r3, [r0, #12]
   85ab0:	3010      	adds	r0, #16
   85ab2:	3110      	adds	r1, #16
   85ab4:	3a10      	subs	r2, #16
   85ab6:	d2f3      	bcs.n	85aa0 <memcpy+0x5c>
   85ab8:	320c      	adds	r2, #12
   85aba:	d305      	bcc.n	85ac8 <memcpy+0x84>
   85abc:	f851 3b04 	ldr.w	r3, [r1], #4
   85ac0:	f840 3b04 	str.w	r3, [r0], #4
   85ac4:	3a04      	subs	r2, #4
   85ac6:	d2f9      	bcs.n	85abc <memcpy+0x78>
   85ac8:	3204      	adds	r2, #4
   85aca:	d008      	beq.n	85ade <memcpy+0x9a>
   85acc:	07d2      	lsls	r2, r2, #31
   85ace:	bf1c      	itt	ne
   85ad0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85ad4:	f800 3b01 	strbne.w	r3, [r0], #1
   85ad8:	d301      	bcc.n	85ade <memcpy+0x9a>
   85ada:	880b      	ldrh	r3, [r1, #0]
   85adc:	8003      	strh	r3, [r0, #0]
   85ade:	4660      	mov	r0, ip
   85ae0:	4770      	bx	lr
   85ae2:	bf00      	nop
   85ae4:	2a08      	cmp	r2, #8
   85ae6:	d313      	bcc.n	85b10 <memcpy+0xcc>
   85ae8:	078b      	lsls	r3, r1, #30
   85aea:	d0b1      	beq.n	85a50 <memcpy+0xc>
   85aec:	f010 0303 	ands.w	r3, r0, #3
   85af0:	d0ae      	beq.n	85a50 <memcpy+0xc>
   85af2:	f1c3 0304 	rsb	r3, r3, #4
   85af6:	1ad2      	subs	r2, r2, r3
   85af8:	07db      	lsls	r3, r3, #31
   85afa:	bf1c      	itt	ne
   85afc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85b00:	f800 3b01 	strbne.w	r3, [r0], #1
   85b04:	d3a4      	bcc.n	85a50 <memcpy+0xc>
   85b06:	f831 3b02 	ldrh.w	r3, [r1], #2
   85b0a:	f820 3b02 	strh.w	r3, [r0], #2
   85b0e:	e79f      	b.n	85a50 <memcpy+0xc>
   85b10:	3a04      	subs	r2, #4
   85b12:	d3d9      	bcc.n	85ac8 <memcpy+0x84>
   85b14:	3a01      	subs	r2, #1
   85b16:	f811 3b01 	ldrb.w	r3, [r1], #1
   85b1a:	f800 3b01 	strb.w	r3, [r0], #1
   85b1e:	d2f9      	bcs.n	85b14 <memcpy+0xd0>
   85b20:	780b      	ldrb	r3, [r1, #0]
   85b22:	7003      	strb	r3, [r0, #0]
   85b24:	784b      	ldrb	r3, [r1, #1]
   85b26:	7043      	strb	r3, [r0, #1]
   85b28:	788b      	ldrb	r3, [r1, #2]
   85b2a:	7083      	strb	r3, [r0, #2]
   85b2c:	4660      	mov	r0, ip
   85b2e:	4770      	bx	lr

00085b30 <memmove>:
   85b30:	4288      	cmp	r0, r1
   85b32:	b5f0      	push	{r4, r5, r6, r7, lr}
   85b34:	d90d      	bls.n	85b52 <memmove+0x22>
   85b36:	188b      	adds	r3, r1, r2
   85b38:	4298      	cmp	r0, r3
   85b3a:	d20a      	bcs.n	85b52 <memmove+0x22>
   85b3c:	1881      	adds	r1, r0, r2
   85b3e:	2a00      	cmp	r2, #0
   85b40:	d051      	beq.n	85be6 <memmove+0xb6>
   85b42:	1a9a      	subs	r2, r3, r2
   85b44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   85b48:	4293      	cmp	r3, r2
   85b4a:	f801 4d01 	strb.w	r4, [r1, #-1]!
   85b4e:	d1f9      	bne.n	85b44 <memmove+0x14>
   85b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85b52:	2a0f      	cmp	r2, #15
   85b54:	d948      	bls.n	85be8 <memmove+0xb8>
   85b56:	ea41 0300 	orr.w	r3, r1, r0
   85b5a:	079b      	lsls	r3, r3, #30
   85b5c:	d146      	bne.n	85bec <memmove+0xbc>
   85b5e:	4615      	mov	r5, r2
   85b60:	f100 0410 	add.w	r4, r0, #16
   85b64:	f101 0310 	add.w	r3, r1, #16
   85b68:	f853 6c10 	ldr.w	r6, [r3, #-16]
   85b6c:	3d10      	subs	r5, #16
   85b6e:	f844 6c10 	str.w	r6, [r4, #-16]
   85b72:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   85b76:	2d0f      	cmp	r5, #15
   85b78:	f844 6c0c 	str.w	r6, [r4, #-12]
   85b7c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   85b80:	f104 0410 	add.w	r4, r4, #16
   85b84:	f844 6c18 	str.w	r6, [r4, #-24]
   85b88:	f853 6c04 	ldr.w	r6, [r3, #-4]
   85b8c:	f103 0310 	add.w	r3, r3, #16
   85b90:	f844 6c14 	str.w	r6, [r4, #-20]
   85b94:	d8e8      	bhi.n	85b68 <memmove+0x38>
   85b96:	f1a2 0310 	sub.w	r3, r2, #16
   85b9a:	f023 030f 	bic.w	r3, r3, #15
   85b9e:	f002 0e0f 	and.w	lr, r2, #15
   85ba2:	3310      	adds	r3, #16
   85ba4:	f1be 0f03 	cmp.w	lr, #3
   85ba8:	4419      	add	r1, r3
   85baa:	4403      	add	r3, r0
   85bac:	d921      	bls.n	85bf2 <memmove+0xc2>
   85bae:	460e      	mov	r6, r1
   85bb0:	4674      	mov	r4, lr
   85bb2:	1f1d      	subs	r5, r3, #4
   85bb4:	f856 7b04 	ldr.w	r7, [r6], #4
   85bb8:	3c04      	subs	r4, #4
   85bba:	2c03      	cmp	r4, #3
   85bbc:	f845 7f04 	str.w	r7, [r5, #4]!
   85bc0:	d8f8      	bhi.n	85bb4 <memmove+0x84>
   85bc2:	f1ae 0404 	sub.w	r4, lr, #4
   85bc6:	f024 0403 	bic.w	r4, r4, #3
   85bca:	3404      	adds	r4, #4
   85bcc:	4423      	add	r3, r4
   85bce:	4421      	add	r1, r4
   85bd0:	f002 0203 	and.w	r2, r2, #3
   85bd4:	b162      	cbz	r2, 85bf0 <memmove+0xc0>
   85bd6:	3b01      	subs	r3, #1
   85bd8:	440a      	add	r2, r1
   85bda:	f811 4b01 	ldrb.w	r4, [r1], #1
   85bde:	428a      	cmp	r2, r1
   85be0:	f803 4f01 	strb.w	r4, [r3, #1]!
   85be4:	d1f9      	bne.n	85bda <memmove+0xaa>
   85be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85be8:	4603      	mov	r3, r0
   85bea:	e7f3      	b.n	85bd4 <memmove+0xa4>
   85bec:	4603      	mov	r3, r0
   85bee:	e7f2      	b.n	85bd6 <memmove+0xa6>
   85bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85bf2:	4672      	mov	r2, lr
   85bf4:	e7ee      	b.n	85bd4 <memmove+0xa4>
   85bf6:	bf00      	nop

00085bf8 <__malloc_lock>:
   85bf8:	4770      	bx	lr
   85bfa:	bf00      	nop

00085bfc <__malloc_unlock>:
   85bfc:	4770      	bx	lr
   85bfe:	bf00      	nop

00085c00 <_realloc_r>:
   85c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85c04:	4617      	mov	r7, r2
   85c06:	b083      	sub	sp, #12
   85c08:	2900      	cmp	r1, #0
   85c0a:	f000 808f 	beq.w	85d2c <_realloc_r+0x12c>
   85c0e:	460d      	mov	r5, r1
   85c10:	4681      	mov	r9, r0
   85c12:	f107 040b 	add.w	r4, r7, #11
   85c16:	f7ff ffef 	bl	85bf8 <__malloc_lock>
   85c1a:	f855 ec04 	ldr.w	lr, [r5, #-4]
   85c1e:	2c16      	cmp	r4, #22
   85c20:	f02e 0603 	bic.w	r6, lr, #3
   85c24:	f1a5 0808 	sub.w	r8, r5, #8
   85c28:	d83c      	bhi.n	85ca4 <_realloc_r+0xa4>
   85c2a:	2210      	movs	r2, #16
   85c2c:	4614      	mov	r4, r2
   85c2e:	42a7      	cmp	r7, r4
   85c30:	d83d      	bhi.n	85cae <_realloc_r+0xae>
   85c32:	4296      	cmp	r6, r2
   85c34:	da42      	bge.n	85cbc <_realloc_r+0xbc>
   85c36:	4bc6      	ldr	r3, [pc, #792]	; (85f50 <_realloc_r+0x350>)
   85c38:	eb08 0006 	add.w	r0, r8, r6
   85c3c:	6899      	ldr	r1, [r3, #8]
   85c3e:	4288      	cmp	r0, r1
   85c40:	6841      	ldr	r1, [r0, #4]
   85c42:	f000 80d7 	beq.w	85df4 <_realloc_r+0x1f4>
   85c46:	f021 0301 	bic.w	r3, r1, #1
   85c4a:	4403      	add	r3, r0
   85c4c:	685b      	ldr	r3, [r3, #4]
   85c4e:	07db      	lsls	r3, r3, #31
   85c50:	d54c      	bpl.n	85cec <_realloc_r+0xec>
   85c52:	f01e 0f01 	tst.w	lr, #1
   85c56:	f000 809d 	beq.w	85d94 <_realloc_r+0x194>
   85c5a:	4639      	mov	r1, r7
   85c5c:	4648      	mov	r0, r9
   85c5e:	f7ff fbff 	bl	85460 <_malloc_r>
   85c62:	4607      	mov	r7, r0
   85c64:	2800      	cmp	r0, #0
   85c66:	d03a      	beq.n	85cde <_realloc_r+0xde>
   85c68:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85c6c:	f1a0 0208 	sub.w	r2, r0, #8
   85c70:	f023 0301 	bic.w	r3, r3, #1
   85c74:	4443      	add	r3, r8
   85c76:	429a      	cmp	r2, r3
   85c78:	f000 813e 	beq.w	85ef8 <_realloc_r+0x2f8>
   85c7c:	1f32      	subs	r2, r6, #4
   85c7e:	2a24      	cmp	r2, #36	; 0x24
   85c80:	f200 812b 	bhi.w	85eda <_realloc_r+0x2da>
   85c84:	2a13      	cmp	r2, #19
   85c86:	f200 80ff 	bhi.w	85e88 <_realloc_r+0x288>
   85c8a:	4603      	mov	r3, r0
   85c8c:	462a      	mov	r2, r5
   85c8e:	6811      	ldr	r1, [r2, #0]
   85c90:	6019      	str	r1, [r3, #0]
   85c92:	6851      	ldr	r1, [r2, #4]
   85c94:	6059      	str	r1, [r3, #4]
   85c96:	6892      	ldr	r2, [r2, #8]
   85c98:	609a      	str	r2, [r3, #8]
   85c9a:	4629      	mov	r1, r5
   85c9c:	4648      	mov	r0, r9
   85c9e:	f7ff f8c5 	bl	84e2c <_free_r>
   85ca2:	e01c      	b.n	85cde <_realloc_r+0xde>
   85ca4:	f024 0407 	bic.w	r4, r4, #7
   85ca8:	2c00      	cmp	r4, #0
   85caa:	4622      	mov	r2, r4
   85cac:	dabf      	bge.n	85c2e <_realloc_r+0x2e>
   85cae:	230c      	movs	r3, #12
   85cb0:	2000      	movs	r0, #0
   85cb2:	f8c9 3000 	str.w	r3, [r9]
   85cb6:	b003      	add	sp, #12
   85cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85cbc:	462f      	mov	r7, r5
   85cbe:	1b33      	subs	r3, r6, r4
   85cc0:	2b0f      	cmp	r3, #15
   85cc2:	f8d8 2004 	ldr.w	r2, [r8, #4]
   85cc6:	d81d      	bhi.n	85d04 <_realloc_r+0x104>
   85cc8:	f002 0201 	and.w	r2, r2, #1
   85ccc:	4332      	orrs	r2, r6
   85cce:	eb08 0106 	add.w	r1, r8, r6
   85cd2:	f8c8 2004 	str.w	r2, [r8, #4]
   85cd6:	684b      	ldr	r3, [r1, #4]
   85cd8:	f043 0301 	orr.w	r3, r3, #1
   85cdc:	604b      	str	r3, [r1, #4]
   85cde:	4648      	mov	r0, r9
   85ce0:	f7ff ff8c 	bl	85bfc <__malloc_unlock>
   85ce4:	4638      	mov	r0, r7
   85ce6:	b003      	add	sp, #12
   85ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85cec:	f021 0103 	bic.w	r1, r1, #3
   85cf0:	4431      	add	r1, r6
   85cf2:	4291      	cmp	r1, r2
   85cf4:	db20      	blt.n	85d38 <_realloc_r+0x138>
   85cf6:	68c3      	ldr	r3, [r0, #12]
   85cf8:	6882      	ldr	r2, [r0, #8]
   85cfa:	462f      	mov	r7, r5
   85cfc:	60d3      	str	r3, [r2, #12]
   85cfe:	460e      	mov	r6, r1
   85d00:	609a      	str	r2, [r3, #8]
   85d02:	e7dc      	b.n	85cbe <_realloc_r+0xbe>
   85d04:	f002 0201 	and.w	r2, r2, #1
   85d08:	eb08 0104 	add.w	r1, r8, r4
   85d0c:	4314      	orrs	r4, r2
   85d0e:	f043 0201 	orr.w	r2, r3, #1
   85d12:	f8c8 4004 	str.w	r4, [r8, #4]
   85d16:	440b      	add	r3, r1
   85d18:	604a      	str	r2, [r1, #4]
   85d1a:	685a      	ldr	r2, [r3, #4]
   85d1c:	3108      	adds	r1, #8
   85d1e:	f042 0201 	orr.w	r2, r2, #1
   85d22:	605a      	str	r2, [r3, #4]
   85d24:	4648      	mov	r0, r9
   85d26:	f7ff f881 	bl	84e2c <_free_r>
   85d2a:	e7d8      	b.n	85cde <_realloc_r+0xde>
   85d2c:	4611      	mov	r1, r2
   85d2e:	b003      	add	sp, #12
   85d30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85d34:	f7ff bb94 	b.w	85460 <_malloc_r>
   85d38:	f01e 0f01 	tst.w	lr, #1
   85d3c:	d18d      	bne.n	85c5a <_realloc_r+0x5a>
   85d3e:	f855 3c08 	ldr.w	r3, [r5, #-8]
   85d42:	ebc3 0a08 	rsb	sl, r3, r8
   85d46:	f8da 3004 	ldr.w	r3, [sl, #4]
   85d4a:	f023 0c03 	bic.w	ip, r3, #3
   85d4e:	eb01 0e0c 	add.w	lr, r1, ip
   85d52:	4596      	cmp	lr, r2
   85d54:	db26      	blt.n	85da4 <_realloc_r+0x1a4>
   85d56:	4657      	mov	r7, sl
   85d58:	68c3      	ldr	r3, [r0, #12]
   85d5a:	6881      	ldr	r1, [r0, #8]
   85d5c:	1f32      	subs	r2, r6, #4
   85d5e:	60cb      	str	r3, [r1, #12]
   85d60:	6099      	str	r1, [r3, #8]
   85d62:	f857 1f08 	ldr.w	r1, [r7, #8]!
   85d66:	f8da 300c 	ldr.w	r3, [sl, #12]
   85d6a:	2a24      	cmp	r2, #36	; 0x24
   85d6c:	60cb      	str	r3, [r1, #12]
   85d6e:	6099      	str	r1, [r3, #8]
   85d70:	f200 80c9 	bhi.w	85f06 <_realloc_r+0x306>
   85d74:	2a13      	cmp	r2, #19
   85d76:	f240 8092 	bls.w	85e9e <_realloc_r+0x29e>
   85d7a:	682b      	ldr	r3, [r5, #0]
   85d7c:	2a1b      	cmp	r2, #27
   85d7e:	f8ca 3008 	str.w	r3, [sl, #8]
   85d82:	686b      	ldr	r3, [r5, #4]
   85d84:	f8ca 300c 	str.w	r3, [sl, #12]
   85d88:	f200 80cd 	bhi.w	85f26 <_realloc_r+0x326>
   85d8c:	3508      	adds	r5, #8
   85d8e:	f10a 0310 	add.w	r3, sl, #16
   85d92:	e085      	b.n	85ea0 <_realloc_r+0x2a0>
   85d94:	f855 3c08 	ldr.w	r3, [r5, #-8]
   85d98:	ebc3 0a08 	rsb	sl, r3, r8
   85d9c:	f8da 3004 	ldr.w	r3, [sl, #4]
   85da0:	f023 0c03 	bic.w	ip, r3, #3
   85da4:	eb06 030c 	add.w	r3, r6, ip
   85da8:	4293      	cmp	r3, r2
   85daa:	f6ff af56 	blt.w	85c5a <_realloc_r+0x5a>
   85dae:	4657      	mov	r7, sl
   85db0:	f8da 100c 	ldr.w	r1, [sl, #12]
   85db4:	f857 0f08 	ldr.w	r0, [r7, #8]!
   85db8:	1f32      	subs	r2, r6, #4
   85dba:	2a24      	cmp	r2, #36	; 0x24
   85dbc:	60c1      	str	r1, [r0, #12]
   85dbe:	6088      	str	r0, [r1, #8]
   85dc0:	f200 80aa 	bhi.w	85f18 <_realloc_r+0x318>
   85dc4:	2a13      	cmp	r2, #19
   85dc6:	f240 80a5 	bls.w	85f14 <_realloc_r+0x314>
   85dca:	6829      	ldr	r1, [r5, #0]
   85dcc:	2a1b      	cmp	r2, #27
   85dce:	f8ca 1008 	str.w	r1, [sl, #8]
   85dd2:	6869      	ldr	r1, [r5, #4]
   85dd4:	f8ca 100c 	str.w	r1, [sl, #12]
   85dd8:	f200 80bc 	bhi.w	85f54 <_realloc_r+0x354>
   85ddc:	3508      	adds	r5, #8
   85dde:	f10a 0210 	add.w	r2, sl, #16
   85de2:	6829      	ldr	r1, [r5, #0]
   85de4:	461e      	mov	r6, r3
   85de6:	6011      	str	r1, [r2, #0]
   85de8:	6869      	ldr	r1, [r5, #4]
   85dea:	46d0      	mov	r8, sl
   85dec:	6051      	str	r1, [r2, #4]
   85dee:	68ab      	ldr	r3, [r5, #8]
   85df0:	6093      	str	r3, [r2, #8]
   85df2:	e764      	b.n	85cbe <_realloc_r+0xbe>
   85df4:	f021 0b03 	bic.w	fp, r1, #3
   85df8:	f104 0010 	add.w	r0, r4, #16
   85dfc:	44b3      	add	fp, r6
   85dfe:	4583      	cmp	fp, r0
   85e00:	da57      	bge.n	85eb2 <_realloc_r+0x2b2>
   85e02:	f01e 0f01 	tst.w	lr, #1
   85e06:	f47f af28 	bne.w	85c5a <_realloc_r+0x5a>
   85e0a:	f855 1c08 	ldr.w	r1, [r5, #-8]
   85e0e:	ebc1 0a08 	rsb	sl, r1, r8
   85e12:	f8da 1004 	ldr.w	r1, [sl, #4]
   85e16:	f021 0c03 	bic.w	ip, r1, #3
   85e1a:	44e3      	add	fp, ip
   85e1c:	4558      	cmp	r0, fp
   85e1e:	dcc1      	bgt.n	85da4 <_realloc_r+0x1a4>
   85e20:	4657      	mov	r7, sl
   85e22:	f8da 100c 	ldr.w	r1, [sl, #12]
   85e26:	f857 0f08 	ldr.w	r0, [r7, #8]!
   85e2a:	1f32      	subs	r2, r6, #4
   85e2c:	2a24      	cmp	r2, #36	; 0x24
   85e2e:	60c1      	str	r1, [r0, #12]
   85e30:	6088      	str	r0, [r1, #8]
   85e32:	f200 80b1 	bhi.w	85f98 <_realloc_r+0x398>
   85e36:	2a13      	cmp	r2, #19
   85e38:	f240 80a2 	bls.w	85f80 <_realloc_r+0x380>
   85e3c:	6829      	ldr	r1, [r5, #0]
   85e3e:	2a1b      	cmp	r2, #27
   85e40:	f8ca 1008 	str.w	r1, [sl, #8]
   85e44:	6869      	ldr	r1, [r5, #4]
   85e46:	f8ca 100c 	str.w	r1, [sl, #12]
   85e4a:	f200 80ac 	bhi.w	85fa6 <_realloc_r+0x3a6>
   85e4e:	3508      	adds	r5, #8
   85e50:	f10a 0210 	add.w	r2, sl, #16
   85e54:	6829      	ldr	r1, [r5, #0]
   85e56:	6011      	str	r1, [r2, #0]
   85e58:	6869      	ldr	r1, [r5, #4]
   85e5a:	6051      	str	r1, [r2, #4]
   85e5c:	68a9      	ldr	r1, [r5, #8]
   85e5e:	6091      	str	r1, [r2, #8]
   85e60:	ebc4 020b 	rsb	r2, r4, fp
   85e64:	eb0a 0104 	add.w	r1, sl, r4
   85e68:	f042 0201 	orr.w	r2, r2, #1
   85e6c:	6099      	str	r1, [r3, #8]
   85e6e:	604a      	str	r2, [r1, #4]
   85e70:	f8da 3004 	ldr.w	r3, [sl, #4]
   85e74:	4648      	mov	r0, r9
   85e76:	f003 0301 	and.w	r3, r3, #1
   85e7a:	431c      	orrs	r4, r3
   85e7c:	f8ca 4004 	str.w	r4, [sl, #4]
   85e80:	f7ff febc 	bl	85bfc <__malloc_unlock>
   85e84:	4638      	mov	r0, r7
   85e86:	e72e      	b.n	85ce6 <_realloc_r+0xe6>
   85e88:	682b      	ldr	r3, [r5, #0]
   85e8a:	2a1b      	cmp	r2, #27
   85e8c:	6003      	str	r3, [r0, #0]
   85e8e:	686b      	ldr	r3, [r5, #4]
   85e90:	6043      	str	r3, [r0, #4]
   85e92:	d826      	bhi.n	85ee2 <_realloc_r+0x2e2>
   85e94:	f100 0308 	add.w	r3, r0, #8
   85e98:	f105 0208 	add.w	r2, r5, #8
   85e9c:	e6f7      	b.n	85c8e <_realloc_r+0x8e>
   85e9e:	463b      	mov	r3, r7
   85ea0:	682a      	ldr	r2, [r5, #0]
   85ea2:	4676      	mov	r6, lr
   85ea4:	601a      	str	r2, [r3, #0]
   85ea6:	686a      	ldr	r2, [r5, #4]
   85ea8:	46d0      	mov	r8, sl
   85eaa:	605a      	str	r2, [r3, #4]
   85eac:	68aa      	ldr	r2, [r5, #8]
   85eae:	609a      	str	r2, [r3, #8]
   85eb0:	e705      	b.n	85cbe <_realloc_r+0xbe>
   85eb2:	ebc4 0b0b 	rsb	fp, r4, fp
   85eb6:	eb08 0104 	add.w	r1, r8, r4
   85eba:	f04b 0201 	orr.w	r2, fp, #1
   85ebe:	6099      	str	r1, [r3, #8]
   85ec0:	604a      	str	r2, [r1, #4]
   85ec2:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85ec6:	4648      	mov	r0, r9
   85ec8:	f003 0301 	and.w	r3, r3, #1
   85ecc:	431c      	orrs	r4, r3
   85ece:	f845 4c04 	str.w	r4, [r5, #-4]
   85ed2:	f7ff fe93 	bl	85bfc <__malloc_unlock>
   85ed6:	4628      	mov	r0, r5
   85ed8:	e705      	b.n	85ce6 <_realloc_r+0xe6>
   85eda:	4629      	mov	r1, r5
   85edc:	f7ff fe28 	bl	85b30 <memmove>
   85ee0:	e6db      	b.n	85c9a <_realloc_r+0x9a>
   85ee2:	68ab      	ldr	r3, [r5, #8]
   85ee4:	2a24      	cmp	r2, #36	; 0x24
   85ee6:	6083      	str	r3, [r0, #8]
   85ee8:	68eb      	ldr	r3, [r5, #12]
   85eea:	60c3      	str	r3, [r0, #12]
   85eec:	d027      	beq.n	85f3e <_realloc_r+0x33e>
   85eee:	f100 0310 	add.w	r3, r0, #16
   85ef2:	f105 0210 	add.w	r2, r5, #16
   85ef6:	e6ca      	b.n	85c8e <_realloc_r+0x8e>
   85ef8:	f850 3c04 	ldr.w	r3, [r0, #-4]
   85efc:	462f      	mov	r7, r5
   85efe:	f023 0303 	bic.w	r3, r3, #3
   85f02:	441e      	add	r6, r3
   85f04:	e6db      	b.n	85cbe <_realloc_r+0xbe>
   85f06:	4629      	mov	r1, r5
   85f08:	4638      	mov	r0, r7
   85f0a:	4676      	mov	r6, lr
   85f0c:	46d0      	mov	r8, sl
   85f0e:	f7ff fe0f 	bl	85b30 <memmove>
   85f12:	e6d4      	b.n	85cbe <_realloc_r+0xbe>
   85f14:	463a      	mov	r2, r7
   85f16:	e764      	b.n	85de2 <_realloc_r+0x1e2>
   85f18:	4629      	mov	r1, r5
   85f1a:	4638      	mov	r0, r7
   85f1c:	461e      	mov	r6, r3
   85f1e:	46d0      	mov	r8, sl
   85f20:	f7ff fe06 	bl	85b30 <memmove>
   85f24:	e6cb      	b.n	85cbe <_realloc_r+0xbe>
   85f26:	68ab      	ldr	r3, [r5, #8]
   85f28:	2a24      	cmp	r2, #36	; 0x24
   85f2a:	f8ca 3010 	str.w	r3, [sl, #16]
   85f2e:	68eb      	ldr	r3, [r5, #12]
   85f30:	f8ca 3014 	str.w	r3, [sl, #20]
   85f34:	d01a      	beq.n	85f6c <_realloc_r+0x36c>
   85f36:	3510      	adds	r5, #16
   85f38:	f10a 0318 	add.w	r3, sl, #24
   85f3c:	e7b0      	b.n	85ea0 <_realloc_r+0x2a0>
   85f3e:	692a      	ldr	r2, [r5, #16]
   85f40:	f100 0318 	add.w	r3, r0, #24
   85f44:	6102      	str	r2, [r0, #16]
   85f46:	6969      	ldr	r1, [r5, #20]
   85f48:	f105 0218 	add.w	r2, r5, #24
   85f4c:	6141      	str	r1, [r0, #20]
   85f4e:	e69e      	b.n	85c8e <_realloc_r+0x8e>
   85f50:	20070858 	.word	0x20070858
   85f54:	68a9      	ldr	r1, [r5, #8]
   85f56:	2a24      	cmp	r2, #36	; 0x24
   85f58:	f8ca 1010 	str.w	r1, [sl, #16]
   85f5c:	68e9      	ldr	r1, [r5, #12]
   85f5e:	f8ca 1014 	str.w	r1, [sl, #20]
   85f62:	d00f      	beq.n	85f84 <_realloc_r+0x384>
   85f64:	3510      	adds	r5, #16
   85f66:	f10a 0218 	add.w	r2, sl, #24
   85f6a:	e73a      	b.n	85de2 <_realloc_r+0x1e2>
   85f6c:	692a      	ldr	r2, [r5, #16]
   85f6e:	f10a 0320 	add.w	r3, sl, #32
   85f72:	f8ca 2018 	str.w	r2, [sl, #24]
   85f76:	696a      	ldr	r2, [r5, #20]
   85f78:	3518      	adds	r5, #24
   85f7a:	f8ca 201c 	str.w	r2, [sl, #28]
   85f7e:	e78f      	b.n	85ea0 <_realloc_r+0x2a0>
   85f80:	463a      	mov	r2, r7
   85f82:	e767      	b.n	85e54 <_realloc_r+0x254>
   85f84:	6929      	ldr	r1, [r5, #16]
   85f86:	f10a 0220 	add.w	r2, sl, #32
   85f8a:	f8ca 1018 	str.w	r1, [sl, #24]
   85f8e:	6969      	ldr	r1, [r5, #20]
   85f90:	3518      	adds	r5, #24
   85f92:	f8ca 101c 	str.w	r1, [sl, #28]
   85f96:	e724      	b.n	85de2 <_realloc_r+0x1e2>
   85f98:	4629      	mov	r1, r5
   85f9a:	4638      	mov	r0, r7
   85f9c:	9301      	str	r3, [sp, #4]
   85f9e:	f7ff fdc7 	bl	85b30 <memmove>
   85fa2:	9b01      	ldr	r3, [sp, #4]
   85fa4:	e75c      	b.n	85e60 <_realloc_r+0x260>
   85fa6:	68a9      	ldr	r1, [r5, #8]
   85fa8:	2a24      	cmp	r2, #36	; 0x24
   85faa:	f8ca 1010 	str.w	r1, [sl, #16]
   85fae:	68e9      	ldr	r1, [r5, #12]
   85fb0:	f8ca 1014 	str.w	r1, [sl, #20]
   85fb4:	d003      	beq.n	85fbe <_realloc_r+0x3be>
   85fb6:	3510      	adds	r5, #16
   85fb8:	f10a 0218 	add.w	r2, sl, #24
   85fbc:	e74a      	b.n	85e54 <_realloc_r+0x254>
   85fbe:	6929      	ldr	r1, [r5, #16]
   85fc0:	f10a 0220 	add.w	r2, sl, #32
   85fc4:	f8ca 1018 	str.w	r1, [sl, #24]
   85fc8:	6969      	ldr	r1, [r5, #20]
   85fca:	3518      	adds	r5, #24
   85fcc:	f8ca 101c 	str.w	r1, [sl, #28]
   85fd0:	e740      	b.n	85e54 <_realloc_r+0x254>
   85fd2:	bf00      	nop

00085fd4 <_sbrk_r>:
   85fd4:	b538      	push	{r3, r4, r5, lr}
   85fd6:	4c07      	ldr	r4, [pc, #28]	; (85ff4 <_sbrk_r+0x20>)
   85fd8:	2300      	movs	r3, #0
   85fda:	4605      	mov	r5, r0
   85fdc:	4608      	mov	r0, r1
   85fde:	6023      	str	r3, [r4, #0]
   85fe0:	f7fd f9ba 	bl	83358 <_sbrk>
   85fe4:	1c43      	adds	r3, r0, #1
   85fe6:	d000      	beq.n	85fea <_sbrk_r+0x16>
   85fe8:	bd38      	pop	{r3, r4, r5, pc}
   85fea:	6823      	ldr	r3, [r4, #0]
   85fec:	2b00      	cmp	r3, #0
   85fee:	d0fb      	beq.n	85fe8 <_sbrk_r+0x14>
   85ff0:	602b      	str	r3, [r5, #0]
   85ff2:	bd38      	pop	{r3, r4, r5, pc}
   85ff4:	20071240 	.word	0x20071240

00085ff8 <__sread>:
   85ff8:	b510      	push	{r4, lr}
   85ffa:	460c      	mov	r4, r1
   85ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86000:	f000 f9c4 	bl	8638c <_read_r>
   86004:	2800      	cmp	r0, #0
   86006:	db03      	blt.n	86010 <__sread+0x18>
   86008:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8600a:	4403      	add	r3, r0
   8600c:	6523      	str	r3, [r4, #80]	; 0x50
   8600e:	bd10      	pop	{r4, pc}
   86010:	89a3      	ldrh	r3, [r4, #12]
   86012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   86016:	81a3      	strh	r3, [r4, #12]
   86018:	bd10      	pop	{r4, pc}
   8601a:	bf00      	nop

0008601c <__swrite>:
   8601c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86020:	460c      	mov	r4, r1
   86022:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   86026:	461f      	mov	r7, r3
   86028:	05cb      	lsls	r3, r1, #23
   8602a:	4616      	mov	r6, r2
   8602c:	4605      	mov	r5, r0
   8602e:	d507      	bpl.n	86040 <__swrite+0x24>
   86030:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86034:	2302      	movs	r3, #2
   86036:	2200      	movs	r2, #0
   86038:	f000 f992 	bl	86360 <_lseek_r>
   8603c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   86040:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   86044:	81a1      	strh	r1, [r4, #12]
   86046:	463b      	mov	r3, r7
   86048:	4632      	mov	r2, r6
   8604a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8604e:	4628      	mov	r0, r5
   86050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86054:	f000 b8a2 	b.w	8619c <_write_r>

00086058 <__sseek>:
   86058:	b510      	push	{r4, lr}
   8605a:	460c      	mov	r4, r1
   8605c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86060:	f000 f97e 	bl	86360 <_lseek_r>
   86064:	89a3      	ldrh	r3, [r4, #12]
   86066:	1c42      	adds	r2, r0, #1
   86068:	bf0e      	itee	eq
   8606a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8606e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   86072:	6520      	strne	r0, [r4, #80]	; 0x50
   86074:	81a3      	strh	r3, [r4, #12]
   86076:	bd10      	pop	{r4, pc}

00086078 <__sclose>:
   86078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8607c:	f000 b8f6 	b.w	8626c <_close_r>

00086080 <__swbuf_r>:
   86080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86082:	460e      	mov	r6, r1
   86084:	4614      	mov	r4, r2
   86086:	4607      	mov	r7, r0
   86088:	b110      	cbz	r0, 86090 <__swbuf_r+0x10>
   8608a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8608c:	2b00      	cmp	r3, #0
   8608e:	d04a      	beq.n	86126 <__swbuf_r+0xa6>
   86090:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   86094:	69a3      	ldr	r3, [r4, #24]
   86096:	b291      	uxth	r1, r2
   86098:	0708      	lsls	r0, r1, #28
   8609a:	60a3      	str	r3, [r4, #8]
   8609c:	d538      	bpl.n	86110 <__swbuf_r+0x90>
   8609e:	6923      	ldr	r3, [r4, #16]
   860a0:	2b00      	cmp	r3, #0
   860a2:	d035      	beq.n	86110 <__swbuf_r+0x90>
   860a4:	0489      	lsls	r1, r1, #18
   860a6:	b2f5      	uxtb	r5, r6
   860a8:	d515      	bpl.n	860d6 <__swbuf_r+0x56>
   860aa:	6822      	ldr	r2, [r4, #0]
   860ac:	6961      	ldr	r1, [r4, #20]
   860ae:	1ad3      	subs	r3, r2, r3
   860b0:	428b      	cmp	r3, r1
   860b2:	da1c      	bge.n	860ee <__swbuf_r+0x6e>
   860b4:	3301      	adds	r3, #1
   860b6:	68a1      	ldr	r1, [r4, #8]
   860b8:	1c50      	adds	r0, r2, #1
   860ba:	3901      	subs	r1, #1
   860bc:	60a1      	str	r1, [r4, #8]
   860be:	6020      	str	r0, [r4, #0]
   860c0:	7016      	strb	r6, [r2, #0]
   860c2:	6962      	ldr	r2, [r4, #20]
   860c4:	429a      	cmp	r2, r3
   860c6:	d01a      	beq.n	860fe <__swbuf_r+0x7e>
   860c8:	89a3      	ldrh	r3, [r4, #12]
   860ca:	07db      	lsls	r3, r3, #31
   860cc:	d501      	bpl.n	860d2 <__swbuf_r+0x52>
   860ce:	2d0a      	cmp	r5, #10
   860d0:	d015      	beq.n	860fe <__swbuf_r+0x7e>
   860d2:	4628      	mov	r0, r5
   860d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   860d6:	6e61      	ldr	r1, [r4, #100]	; 0x64
   860d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   860dc:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   860e0:	81a2      	strh	r2, [r4, #12]
   860e2:	6822      	ldr	r2, [r4, #0]
   860e4:	6661      	str	r1, [r4, #100]	; 0x64
   860e6:	6961      	ldr	r1, [r4, #20]
   860e8:	1ad3      	subs	r3, r2, r3
   860ea:	428b      	cmp	r3, r1
   860ec:	dbe2      	blt.n	860b4 <__swbuf_r+0x34>
   860ee:	4621      	mov	r1, r4
   860f0:	4638      	mov	r0, r7
   860f2:	f7fe fd3f 	bl	84b74 <_fflush_r>
   860f6:	b940      	cbnz	r0, 8610a <__swbuf_r+0x8a>
   860f8:	6822      	ldr	r2, [r4, #0]
   860fa:	2301      	movs	r3, #1
   860fc:	e7db      	b.n	860b6 <__swbuf_r+0x36>
   860fe:	4621      	mov	r1, r4
   86100:	4638      	mov	r0, r7
   86102:	f7fe fd37 	bl	84b74 <_fflush_r>
   86106:	2800      	cmp	r0, #0
   86108:	d0e3      	beq.n	860d2 <__swbuf_r+0x52>
   8610a:	f04f 30ff 	mov.w	r0, #4294967295
   8610e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86110:	4621      	mov	r1, r4
   86112:	4638      	mov	r0, r7
   86114:	f7fe fc16 	bl	84944 <__swsetup_r>
   86118:	2800      	cmp	r0, #0
   8611a:	d1f6      	bne.n	8610a <__swbuf_r+0x8a>
   8611c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   86120:	6923      	ldr	r3, [r4, #16]
   86122:	b291      	uxth	r1, r2
   86124:	e7be      	b.n	860a4 <__swbuf_r+0x24>
   86126:	f7fe fdb9 	bl	84c9c <__sinit>
   8612a:	e7b1      	b.n	86090 <__swbuf_r+0x10>

0008612c <_wcrtomb_r>:
   8612c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86130:	4605      	mov	r5, r0
   86132:	b086      	sub	sp, #24
   86134:	461e      	mov	r6, r3
   86136:	460c      	mov	r4, r1
   86138:	b1a1      	cbz	r1, 86164 <_wcrtomb_r+0x38>
   8613a:	4b10      	ldr	r3, [pc, #64]	; (8617c <_wcrtomb_r+0x50>)
   8613c:	4617      	mov	r7, r2
   8613e:	f8d3 8000 	ldr.w	r8, [r3]
   86142:	f7ff f907 	bl	85354 <__locale_charset>
   86146:	9600      	str	r6, [sp, #0]
   86148:	4603      	mov	r3, r0
   8614a:	463a      	mov	r2, r7
   8614c:	4621      	mov	r1, r4
   8614e:	4628      	mov	r0, r5
   86150:	47c0      	blx	r8
   86152:	1c43      	adds	r3, r0, #1
   86154:	d103      	bne.n	8615e <_wcrtomb_r+0x32>
   86156:	2200      	movs	r2, #0
   86158:	238a      	movs	r3, #138	; 0x8a
   8615a:	6032      	str	r2, [r6, #0]
   8615c:	602b      	str	r3, [r5, #0]
   8615e:	b006      	add	sp, #24
   86160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86164:	4b05      	ldr	r3, [pc, #20]	; (8617c <_wcrtomb_r+0x50>)
   86166:	681f      	ldr	r7, [r3, #0]
   86168:	f7ff f8f4 	bl	85354 <__locale_charset>
   8616c:	9600      	str	r6, [sp, #0]
   8616e:	4603      	mov	r3, r0
   86170:	4622      	mov	r2, r4
   86172:	a903      	add	r1, sp, #12
   86174:	4628      	mov	r0, r5
   86176:	47b8      	blx	r7
   86178:	e7eb      	b.n	86152 <_wcrtomb_r+0x26>
   8617a:	bf00      	nop
   8617c:	20070c68 	.word	0x20070c68

00086180 <__ascii_wctomb>:
   86180:	b121      	cbz	r1, 8618c <__ascii_wctomb+0xc>
   86182:	2aff      	cmp	r2, #255	; 0xff
   86184:	d804      	bhi.n	86190 <__ascii_wctomb+0x10>
   86186:	700a      	strb	r2, [r1, #0]
   86188:	2001      	movs	r0, #1
   8618a:	4770      	bx	lr
   8618c:	4608      	mov	r0, r1
   8618e:	4770      	bx	lr
   86190:	238a      	movs	r3, #138	; 0x8a
   86192:	6003      	str	r3, [r0, #0]
   86194:	f04f 30ff 	mov.w	r0, #4294967295
   86198:	4770      	bx	lr
   8619a:	bf00      	nop

0008619c <_write_r>:
   8619c:	b570      	push	{r4, r5, r6, lr}
   8619e:	460d      	mov	r5, r1
   861a0:	4c08      	ldr	r4, [pc, #32]	; (861c4 <_write_r+0x28>)
   861a2:	4611      	mov	r1, r2
   861a4:	4606      	mov	r6, r0
   861a6:	461a      	mov	r2, r3
   861a8:	4628      	mov	r0, r5
   861aa:	2300      	movs	r3, #0
   861ac:	6023      	str	r3, [r4, #0]
   861ae:	f7fb f87b 	bl	812a8 <_write>
   861b2:	1c43      	adds	r3, r0, #1
   861b4:	d000      	beq.n	861b8 <_write_r+0x1c>
   861b6:	bd70      	pop	{r4, r5, r6, pc}
   861b8:	6823      	ldr	r3, [r4, #0]
   861ba:	2b00      	cmp	r3, #0
   861bc:	d0fb      	beq.n	861b6 <_write_r+0x1a>
   861be:	6033      	str	r3, [r6, #0]
   861c0:	bd70      	pop	{r4, r5, r6, pc}
   861c2:	bf00      	nop
   861c4:	20071240 	.word	0x20071240

000861c8 <__register_exitproc>:
   861c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   861cc:	4c25      	ldr	r4, [pc, #148]	; (86264 <__register_exitproc+0x9c>)
   861ce:	4606      	mov	r6, r0
   861d0:	6825      	ldr	r5, [r4, #0]
   861d2:	4688      	mov	r8, r1
   861d4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   861d8:	4692      	mov	sl, r2
   861da:	4699      	mov	r9, r3
   861dc:	b3c4      	cbz	r4, 86250 <__register_exitproc+0x88>
   861de:	6860      	ldr	r0, [r4, #4]
   861e0:	281f      	cmp	r0, #31
   861e2:	dc17      	bgt.n	86214 <__register_exitproc+0x4c>
   861e4:	1c41      	adds	r1, r0, #1
   861e6:	b176      	cbz	r6, 86206 <__register_exitproc+0x3e>
   861e8:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   861ec:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   861f0:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   861f4:	2201      	movs	r2, #1
   861f6:	4082      	lsls	r2, r0
   861f8:	4315      	orrs	r5, r2
   861fa:	2e02      	cmp	r6, #2
   861fc:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   86200:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   86204:	d01e      	beq.n	86244 <__register_exitproc+0x7c>
   86206:	1c83      	adds	r3, r0, #2
   86208:	6061      	str	r1, [r4, #4]
   8620a:	2000      	movs	r0, #0
   8620c:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   86210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86214:	4b14      	ldr	r3, [pc, #80]	; (86268 <__register_exitproc+0xa0>)
   86216:	b303      	cbz	r3, 8625a <__register_exitproc+0x92>
   86218:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8621c:	f7ff f918 	bl	85450 <malloc>
   86220:	4604      	mov	r4, r0
   86222:	b1d0      	cbz	r0, 8625a <__register_exitproc+0x92>
   86224:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   86228:	2700      	movs	r7, #0
   8622a:	e884 0088 	stmia.w	r4, {r3, r7}
   8622e:	4638      	mov	r0, r7
   86230:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   86234:	2101      	movs	r1, #1
   86236:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   8623a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   8623e:	2e00      	cmp	r6, #0
   86240:	d0e1      	beq.n	86206 <__register_exitproc+0x3e>
   86242:	e7d1      	b.n	861e8 <__register_exitproc+0x20>
   86244:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   86248:	431a      	orrs	r2, r3
   8624a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   8624e:	e7da      	b.n	86206 <__register_exitproc+0x3e>
   86250:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   86254:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   86258:	e7c1      	b.n	861de <__register_exitproc+0x16>
   8625a:	f04f 30ff 	mov.w	r0, #4294967295
   8625e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86262:	bf00      	nop
   86264:	0008676c 	.word	0x0008676c
   86268:	00085451 	.word	0x00085451

0008626c <_close_r>:
   8626c:	b538      	push	{r3, r4, r5, lr}
   8626e:	4c07      	ldr	r4, [pc, #28]	; (8628c <_close_r+0x20>)
   86270:	2300      	movs	r3, #0
   86272:	4605      	mov	r5, r0
   86274:	4608      	mov	r0, r1
   86276:	6023      	str	r3, [r4, #0]
   86278:	f7fd f88c 	bl	83394 <_close>
   8627c:	1c43      	adds	r3, r0, #1
   8627e:	d000      	beq.n	86282 <_close_r+0x16>
   86280:	bd38      	pop	{r3, r4, r5, pc}
   86282:	6823      	ldr	r3, [r4, #0]
   86284:	2b00      	cmp	r3, #0
   86286:	d0fb      	beq.n	86280 <_close_r+0x14>
   86288:	602b      	str	r3, [r5, #0]
   8628a:	bd38      	pop	{r3, r4, r5, pc}
   8628c:	20071240 	.word	0x20071240

00086290 <_fclose_r>:
   86290:	2900      	cmp	r1, #0
   86292:	d03d      	beq.n	86310 <_fclose_r+0x80>
   86294:	b570      	push	{r4, r5, r6, lr}
   86296:	4605      	mov	r5, r0
   86298:	460c      	mov	r4, r1
   8629a:	b108      	cbz	r0, 862a0 <_fclose_r+0x10>
   8629c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8629e:	b37b      	cbz	r3, 86300 <_fclose_r+0x70>
   862a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   862a4:	b90b      	cbnz	r3, 862aa <_fclose_r+0x1a>
   862a6:	2000      	movs	r0, #0
   862a8:	bd70      	pop	{r4, r5, r6, pc}
   862aa:	4621      	mov	r1, r4
   862ac:	4628      	mov	r0, r5
   862ae:	f7fe fbbd 	bl	84a2c <__sflush_r>
   862b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   862b4:	4606      	mov	r6, r0
   862b6:	b133      	cbz	r3, 862c6 <_fclose_r+0x36>
   862b8:	69e1      	ldr	r1, [r4, #28]
   862ba:	4628      	mov	r0, r5
   862bc:	4798      	blx	r3
   862be:	2800      	cmp	r0, #0
   862c0:	bfb8      	it	lt
   862c2:	f04f 36ff 	movlt.w	r6, #4294967295
   862c6:	89a3      	ldrh	r3, [r4, #12]
   862c8:	061b      	lsls	r3, r3, #24
   862ca:	d41c      	bmi.n	86306 <_fclose_r+0x76>
   862cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   862ce:	b141      	cbz	r1, 862e2 <_fclose_r+0x52>
   862d0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   862d4:	4299      	cmp	r1, r3
   862d6:	d002      	beq.n	862de <_fclose_r+0x4e>
   862d8:	4628      	mov	r0, r5
   862da:	f7fe fda7 	bl	84e2c <_free_r>
   862de:	2300      	movs	r3, #0
   862e0:	6323      	str	r3, [r4, #48]	; 0x30
   862e2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   862e4:	b121      	cbz	r1, 862f0 <_fclose_r+0x60>
   862e6:	4628      	mov	r0, r5
   862e8:	f7fe fda0 	bl	84e2c <_free_r>
   862ec:	2300      	movs	r3, #0
   862ee:	6463      	str	r3, [r4, #68]	; 0x44
   862f0:	f7fe fcda 	bl	84ca8 <__sfp_lock_acquire>
   862f4:	2300      	movs	r3, #0
   862f6:	81a3      	strh	r3, [r4, #12]
   862f8:	f7fe fcd8 	bl	84cac <__sfp_lock_release>
   862fc:	4630      	mov	r0, r6
   862fe:	bd70      	pop	{r4, r5, r6, pc}
   86300:	f7fe fccc 	bl	84c9c <__sinit>
   86304:	e7cc      	b.n	862a0 <_fclose_r+0x10>
   86306:	6921      	ldr	r1, [r4, #16]
   86308:	4628      	mov	r0, r5
   8630a:	f7fe fd8f 	bl	84e2c <_free_r>
   8630e:	e7dd      	b.n	862cc <_fclose_r+0x3c>
   86310:	2000      	movs	r0, #0
   86312:	4770      	bx	lr

00086314 <_fstat_r>:
   86314:	b538      	push	{r3, r4, r5, lr}
   86316:	460b      	mov	r3, r1
   86318:	4c07      	ldr	r4, [pc, #28]	; (86338 <_fstat_r+0x24>)
   8631a:	4605      	mov	r5, r0
   8631c:	4611      	mov	r1, r2
   8631e:	4618      	mov	r0, r3
   86320:	2300      	movs	r3, #0
   86322:	6023      	str	r3, [r4, #0]
   86324:	f7fd f842 	bl	833ac <_fstat>
   86328:	1c43      	adds	r3, r0, #1
   8632a:	d000      	beq.n	8632e <_fstat_r+0x1a>
   8632c:	bd38      	pop	{r3, r4, r5, pc}
   8632e:	6823      	ldr	r3, [r4, #0]
   86330:	2b00      	cmp	r3, #0
   86332:	d0fb      	beq.n	8632c <_fstat_r+0x18>
   86334:	602b      	str	r3, [r5, #0]
   86336:	bd38      	pop	{r3, r4, r5, pc}
   86338:	20071240 	.word	0x20071240

0008633c <_isatty_r>:
   8633c:	b538      	push	{r3, r4, r5, lr}
   8633e:	4c07      	ldr	r4, [pc, #28]	; (8635c <_isatty_r+0x20>)
   86340:	2300      	movs	r3, #0
   86342:	4605      	mov	r5, r0
   86344:	4608      	mov	r0, r1
   86346:	6023      	str	r3, [r4, #0]
   86348:	f7fd f840 	bl	833cc <_isatty>
   8634c:	1c43      	adds	r3, r0, #1
   8634e:	d000      	beq.n	86352 <_isatty_r+0x16>
   86350:	bd38      	pop	{r3, r4, r5, pc}
   86352:	6823      	ldr	r3, [r4, #0]
   86354:	2b00      	cmp	r3, #0
   86356:	d0fb      	beq.n	86350 <_isatty_r+0x14>
   86358:	602b      	str	r3, [r5, #0]
   8635a:	bd38      	pop	{r3, r4, r5, pc}
   8635c:	20071240 	.word	0x20071240

00086360 <_lseek_r>:
   86360:	b570      	push	{r4, r5, r6, lr}
   86362:	460d      	mov	r5, r1
   86364:	4c08      	ldr	r4, [pc, #32]	; (86388 <_lseek_r+0x28>)
   86366:	4611      	mov	r1, r2
   86368:	4606      	mov	r6, r0
   8636a:	461a      	mov	r2, r3
   8636c:	4628      	mov	r0, r5
   8636e:	2300      	movs	r3, #0
   86370:	6023      	str	r3, [r4, #0]
   86372:	f7fd f835 	bl	833e0 <_lseek>
   86376:	1c43      	adds	r3, r0, #1
   86378:	d000      	beq.n	8637c <_lseek_r+0x1c>
   8637a:	bd70      	pop	{r4, r5, r6, pc}
   8637c:	6823      	ldr	r3, [r4, #0]
   8637e:	2b00      	cmp	r3, #0
   86380:	d0fb      	beq.n	8637a <_lseek_r+0x1a>
   86382:	6033      	str	r3, [r6, #0]
   86384:	bd70      	pop	{r4, r5, r6, pc}
   86386:	bf00      	nop
   86388:	20071240 	.word	0x20071240

0008638c <_read_r>:
   8638c:	b570      	push	{r4, r5, r6, lr}
   8638e:	460d      	mov	r5, r1
   86390:	4c08      	ldr	r4, [pc, #32]	; (863b4 <_read_r+0x28>)
   86392:	4611      	mov	r1, r2
   86394:	4606      	mov	r6, r0
   86396:	461a      	mov	r2, r3
   86398:	4628      	mov	r0, r5
   8639a:	2300      	movs	r3, #0
   8639c:	6023      	str	r3, [r4, #0]
   8639e:	f7fa ff59 	bl	81254 <_read>
   863a2:	1c43      	adds	r3, r0, #1
   863a4:	d000      	beq.n	863a8 <_read_r+0x1c>
   863a6:	bd70      	pop	{r4, r5, r6, pc}
   863a8:	6823      	ldr	r3, [r4, #0]
   863aa:	2b00      	cmp	r3, #0
   863ac:	d0fb      	beq.n	863a6 <_read_r+0x1a>
   863ae:	6033      	str	r3, [r6, #0]
   863b0:	bd70      	pop	{r4, r5, r6, pc}
   863b2:	bf00      	nop
   863b4:	20071240 	.word	0x20071240

000863b8 <__aeabi_uldivmod>:
   863b8:	b953      	cbnz	r3, 863d0 <__aeabi_uldivmod+0x18>
   863ba:	b94a      	cbnz	r2, 863d0 <__aeabi_uldivmod+0x18>
   863bc:	2900      	cmp	r1, #0
   863be:	bf08      	it	eq
   863c0:	2800      	cmpeq	r0, #0
   863c2:	bf1c      	itt	ne
   863c4:	f04f 31ff 	movne.w	r1, #4294967295
   863c8:	f04f 30ff 	movne.w	r0, #4294967295
   863cc:	f000 b982 	b.w	866d4 <__aeabi_idiv0>
   863d0:	f1ad 0c08 	sub.w	ip, sp, #8
   863d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   863d8:	f000 f806 	bl	863e8 <__udivmoddi4>
   863dc:	f8dd e004 	ldr.w	lr, [sp, #4]
   863e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   863e4:	b004      	add	sp, #16
   863e6:	4770      	bx	lr

000863e8 <__udivmoddi4>:
   863e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   863ec:	468c      	mov	ip, r1
   863ee:	460c      	mov	r4, r1
   863f0:	4605      	mov	r5, r0
   863f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   863f4:	2b00      	cmp	r3, #0
   863f6:	d14f      	bne.n	86498 <__udivmoddi4+0xb0>
   863f8:	428a      	cmp	r2, r1
   863fa:	4617      	mov	r7, r2
   863fc:	d96b      	bls.n	864d6 <__udivmoddi4+0xee>
   863fe:	fab2 fe82 	clz	lr, r2
   86402:	f1be 0f00 	cmp.w	lr, #0
   86406:	d00b      	beq.n	86420 <__udivmoddi4+0x38>
   86408:	f1ce 0520 	rsb	r5, lr, #32
   8640c:	fa20 f505 	lsr.w	r5, r0, r5
   86410:	fa01 f30e 	lsl.w	r3, r1, lr
   86414:	ea45 0c03 	orr.w	ip, r5, r3
   86418:	fa02 f70e 	lsl.w	r7, r2, lr
   8641c:	fa00 f50e 	lsl.w	r5, r0, lr
   86420:	0c39      	lsrs	r1, r7, #16
   86422:	fbbc f0f1 	udiv	r0, ip, r1
   86426:	b2ba      	uxth	r2, r7
   86428:	fb01 c310 	mls	r3, r1, r0, ip
   8642c:	fb00 f802 	mul.w	r8, r0, r2
   86430:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   86434:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
   86438:	45a0      	cmp	r8, r4
   8643a:	d909      	bls.n	86450 <__udivmoddi4+0x68>
   8643c:	19e4      	adds	r4, r4, r7
   8643e:	f100 33ff 	add.w	r3, r0, #4294967295
   86442:	f080 8128 	bcs.w	86696 <__udivmoddi4+0x2ae>
   86446:	45a0      	cmp	r8, r4
   86448:	f240 8125 	bls.w	86696 <__udivmoddi4+0x2ae>
   8644c:	3802      	subs	r0, #2
   8644e:	443c      	add	r4, r7
   86450:	ebc8 0404 	rsb	r4, r8, r4
   86454:	fbb4 f3f1 	udiv	r3, r4, r1
   86458:	fb01 4c13 	mls	ip, r1, r3, r4
   8645c:	fb03 f202 	mul.w	r2, r3, r2
   86460:	b2ac      	uxth	r4, r5
   86462:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
   86466:	428a      	cmp	r2, r1
   86468:	d909      	bls.n	8647e <__udivmoddi4+0x96>
   8646a:	19c9      	adds	r1, r1, r7
   8646c:	f103 34ff 	add.w	r4, r3, #4294967295
   86470:	f080 810f 	bcs.w	86692 <__udivmoddi4+0x2aa>
   86474:	428a      	cmp	r2, r1
   86476:	f240 810c 	bls.w	86692 <__udivmoddi4+0x2aa>
   8647a:	3b02      	subs	r3, #2
   8647c:	4439      	add	r1, r7
   8647e:	1a8a      	subs	r2, r1, r2
   86480:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   86484:	2100      	movs	r1, #0
   86486:	2e00      	cmp	r6, #0
   86488:	d063      	beq.n	86552 <__udivmoddi4+0x16a>
   8648a:	fa22 f20e 	lsr.w	r2, r2, lr
   8648e:	2300      	movs	r3, #0
   86490:	e886 000c 	stmia.w	r6, {r2, r3}
   86494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86498:	428b      	cmp	r3, r1
   8649a:	d907      	bls.n	864ac <__udivmoddi4+0xc4>
   8649c:	2e00      	cmp	r6, #0
   8649e:	d056      	beq.n	8654e <__udivmoddi4+0x166>
   864a0:	2100      	movs	r1, #0
   864a2:	e886 0011 	stmia.w	r6, {r0, r4}
   864a6:	4608      	mov	r0, r1
   864a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   864ac:	fab3 f183 	clz	r1, r3
   864b0:	2900      	cmp	r1, #0
   864b2:	f040 8093 	bne.w	865dc <__udivmoddi4+0x1f4>
   864b6:	42a3      	cmp	r3, r4
   864b8:	d302      	bcc.n	864c0 <__udivmoddi4+0xd8>
   864ba:	4282      	cmp	r2, r0
   864bc:	f200 80fe 	bhi.w	866bc <__udivmoddi4+0x2d4>
   864c0:	1a85      	subs	r5, r0, r2
   864c2:	eb64 0303 	sbc.w	r3, r4, r3
   864c6:	469c      	mov	ip, r3
   864c8:	2001      	movs	r0, #1
   864ca:	2e00      	cmp	r6, #0
   864cc:	d041      	beq.n	86552 <__udivmoddi4+0x16a>
   864ce:	e886 1020 	stmia.w	r6, {r5, ip}
   864d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   864d6:	b912      	cbnz	r2, 864de <__udivmoddi4+0xf6>
   864d8:	2701      	movs	r7, #1
   864da:	fbb7 f7f2 	udiv	r7, r7, r2
   864de:	fab7 fe87 	clz	lr, r7
   864e2:	f1be 0f00 	cmp.w	lr, #0
   864e6:	d136      	bne.n	86556 <__udivmoddi4+0x16e>
   864e8:	1be4      	subs	r4, r4, r7
   864ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
   864ee:	fa1f f987 	uxth.w	r9, r7
   864f2:	2101      	movs	r1, #1
   864f4:	fbb4 f3f8 	udiv	r3, r4, r8
   864f8:	fb08 4413 	mls	r4, r8, r3, r4
   864fc:	fb09 f203 	mul.w	r2, r9, r3
   86500:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   86504:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
   86508:	42a2      	cmp	r2, r4
   8650a:	d907      	bls.n	8651c <__udivmoddi4+0x134>
   8650c:	19e4      	adds	r4, r4, r7
   8650e:	f103 30ff 	add.w	r0, r3, #4294967295
   86512:	d202      	bcs.n	8651a <__udivmoddi4+0x132>
   86514:	42a2      	cmp	r2, r4
   86516:	f200 80d3 	bhi.w	866c0 <__udivmoddi4+0x2d8>
   8651a:	4603      	mov	r3, r0
   8651c:	1aa4      	subs	r4, r4, r2
   8651e:	fbb4 f0f8 	udiv	r0, r4, r8
   86522:	fb08 4810 	mls	r8, r8, r0, r4
   86526:	fb09 f900 	mul.w	r9, r9, r0
   8652a:	b2ac      	uxth	r4, r5
   8652c:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
   86530:	4591      	cmp	r9, r2
   86532:	d907      	bls.n	86544 <__udivmoddi4+0x15c>
   86534:	19d2      	adds	r2, r2, r7
   86536:	f100 34ff 	add.w	r4, r0, #4294967295
   8653a:	d202      	bcs.n	86542 <__udivmoddi4+0x15a>
   8653c:	4591      	cmp	r9, r2
   8653e:	f200 80ba 	bhi.w	866b6 <__udivmoddi4+0x2ce>
   86542:	4620      	mov	r0, r4
   86544:	ebc9 0202 	rsb	r2, r9, r2
   86548:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   8654c:	e79b      	b.n	86486 <__udivmoddi4+0x9e>
   8654e:	4631      	mov	r1, r6
   86550:	4630      	mov	r0, r6
   86552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86556:	fa07 f70e 	lsl.w	r7, r7, lr
   8655a:	f1ce 0c20 	rsb	ip, lr, #32
   8655e:	fa24 f30c 	lsr.w	r3, r4, ip
   86562:	ea4f 4817 	mov.w	r8, r7, lsr #16
   86566:	fbb3 faf8 	udiv	sl, r3, r8
   8656a:	fa1f f987 	uxth.w	r9, r7
   8656e:	fb08 351a 	mls	r5, r8, sl, r3
   86572:	fa20 fc0c 	lsr.w	ip, r0, ip
   86576:	fa04 f40e 	lsl.w	r4, r4, lr
   8657a:	fb0a fb09 	mul.w	fp, sl, r9
   8657e:	ea4c 0c04 	orr.w	ip, ip, r4
   86582:	ea4f 421c 	mov.w	r2, ip, lsr #16
   86586:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
   8658a:	459b      	cmp	fp, r3
   8658c:	fa00 f50e 	lsl.w	r5, r0, lr
   86590:	d90a      	bls.n	865a8 <__udivmoddi4+0x1c0>
   86592:	19db      	adds	r3, r3, r7
   86594:	f10a 32ff 	add.w	r2, sl, #4294967295
   86598:	f080 808b 	bcs.w	866b2 <__udivmoddi4+0x2ca>
   8659c:	459b      	cmp	fp, r3
   8659e:	f240 8088 	bls.w	866b2 <__udivmoddi4+0x2ca>
   865a2:	f1aa 0a02 	sub.w	sl, sl, #2
   865a6:	443b      	add	r3, r7
   865a8:	ebcb 0303 	rsb	r3, fp, r3
   865ac:	fbb3 f0f8 	udiv	r0, r3, r8
   865b0:	fb08 3310 	mls	r3, r8, r0, r3
   865b4:	fb00 f409 	mul.w	r4, r0, r9
   865b8:	fa1f fc8c 	uxth.w	ip, ip
   865bc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   865c0:	429c      	cmp	r4, r3
   865c2:	d907      	bls.n	865d4 <__udivmoddi4+0x1ec>
   865c4:	19db      	adds	r3, r3, r7
   865c6:	f100 32ff 	add.w	r2, r0, #4294967295
   865ca:	d26e      	bcs.n	866aa <__udivmoddi4+0x2c2>
   865cc:	429c      	cmp	r4, r3
   865ce:	d96c      	bls.n	866aa <__udivmoddi4+0x2c2>
   865d0:	3802      	subs	r0, #2
   865d2:	443b      	add	r3, r7
   865d4:	1b1c      	subs	r4, r3, r4
   865d6:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
   865da:	e78b      	b.n	864f4 <__udivmoddi4+0x10c>
   865dc:	f1c1 0e20 	rsb	lr, r1, #32
   865e0:	408b      	lsls	r3, r1
   865e2:	fa22 fc0e 	lsr.w	ip, r2, lr
   865e6:	ea4c 0c03 	orr.w	ip, ip, r3
   865ea:	fa24 f70e 	lsr.w	r7, r4, lr
   865ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
   865f2:	fbb7 faf9 	udiv	sl, r7, r9
   865f6:	fa1f f38c 	uxth.w	r3, ip
   865fa:	fb09 771a 	mls	r7, r9, sl, r7
   865fe:	fa20 f80e 	lsr.w	r8, r0, lr
   86602:	408c      	lsls	r4, r1
   86604:	fb0a f503 	mul.w	r5, sl, r3
   86608:	ea48 0404 	orr.w	r4, r8, r4
   8660c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   86610:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   86614:	42bd      	cmp	r5, r7
   86616:	fa02 f201 	lsl.w	r2, r2, r1
   8661a:	fa00 fb01 	lsl.w	fp, r0, r1
   8661e:	d909      	bls.n	86634 <__udivmoddi4+0x24c>
   86620:	eb17 070c 	adds.w	r7, r7, ip
   86624:	f10a 30ff 	add.w	r0, sl, #4294967295
   86628:	d241      	bcs.n	866ae <__udivmoddi4+0x2c6>
   8662a:	42bd      	cmp	r5, r7
   8662c:	d93f      	bls.n	866ae <__udivmoddi4+0x2c6>
   8662e:	f1aa 0a02 	sub.w	sl, sl, #2
   86632:	4467      	add	r7, ip
   86634:	1b7f      	subs	r7, r7, r5
   86636:	fbb7 f5f9 	udiv	r5, r7, r9
   8663a:	fb09 7715 	mls	r7, r9, r5, r7
   8663e:	fb05 f303 	mul.w	r3, r5, r3
   86642:	b2a4      	uxth	r4, r4
   86644:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
   86648:	42bb      	cmp	r3, r7
   8664a:	d908      	bls.n	8665e <__udivmoddi4+0x276>
   8664c:	eb17 070c 	adds.w	r7, r7, ip
   86650:	f105 30ff 	add.w	r0, r5, #4294967295
   86654:	d227      	bcs.n	866a6 <__udivmoddi4+0x2be>
   86656:	42bb      	cmp	r3, r7
   86658:	d925      	bls.n	866a6 <__udivmoddi4+0x2be>
   8665a:	3d02      	subs	r5, #2
   8665c:	4467      	add	r7, ip
   8665e:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
   86662:	fba0 8902 	umull	r8, r9, r0, r2
   86666:	1aff      	subs	r7, r7, r3
   86668:	454f      	cmp	r7, r9
   8666a:	4645      	mov	r5, r8
   8666c:	464c      	mov	r4, r9
   8666e:	d314      	bcc.n	8669a <__udivmoddi4+0x2b2>
   86670:	d029      	beq.n	866c6 <__udivmoddi4+0x2de>
   86672:	b366      	cbz	r6, 866ce <__udivmoddi4+0x2e6>
   86674:	ebbb 0305 	subs.w	r3, fp, r5
   86678:	eb67 0704 	sbc.w	r7, r7, r4
   8667c:	fa07 fe0e 	lsl.w	lr, r7, lr
   86680:	40cb      	lsrs	r3, r1
   86682:	40cf      	lsrs	r7, r1
   86684:	ea4e 0303 	orr.w	r3, lr, r3
   86688:	e886 0088 	stmia.w	r6, {r3, r7}
   8668c:	2100      	movs	r1, #0
   8668e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86692:	4623      	mov	r3, r4
   86694:	e6f3      	b.n	8647e <__udivmoddi4+0x96>
   86696:	4618      	mov	r0, r3
   86698:	e6da      	b.n	86450 <__udivmoddi4+0x68>
   8669a:	ebb8 0502 	subs.w	r5, r8, r2
   8669e:	eb69 040c 	sbc.w	r4, r9, ip
   866a2:	3801      	subs	r0, #1
   866a4:	e7e5      	b.n	86672 <__udivmoddi4+0x28a>
   866a6:	4605      	mov	r5, r0
   866a8:	e7d9      	b.n	8665e <__udivmoddi4+0x276>
   866aa:	4610      	mov	r0, r2
   866ac:	e792      	b.n	865d4 <__udivmoddi4+0x1ec>
   866ae:	4682      	mov	sl, r0
   866b0:	e7c0      	b.n	86634 <__udivmoddi4+0x24c>
   866b2:	4692      	mov	sl, r2
   866b4:	e778      	b.n	865a8 <__udivmoddi4+0x1c0>
   866b6:	3802      	subs	r0, #2
   866b8:	443a      	add	r2, r7
   866ba:	e743      	b.n	86544 <__udivmoddi4+0x15c>
   866bc:	4608      	mov	r0, r1
   866be:	e704      	b.n	864ca <__udivmoddi4+0xe2>
   866c0:	3b02      	subs	r3, #2
   866c2:	443c      	add	r4, r7
   866c4:	e72a      	b.n	8651c <__udivmoddi4+0x134>
   866c6:	45c3      	cmp	fp, r8
   866c8:	d3e7      	bcc.n	8669a <__udivmoddi4+0x2b2>
   866ca:	463c      	mov	r4, r7
   866cc:	e7d1      	b.n	86672 <__udivmoddi4+0x28a>
   866ce:	4631      	mov	r1, r6
   866d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000866d4 <__aeabi_idiv0>:
   866d4:	4770      	bx	lr
   866d6:	bf00      	nop

000866d8 <can_bit_time>:
   866d8:	0308 0202 4b03 0209 0303 4302 030a 0303     .....K.....C....
   866e8:	4603 040b 0303 4804 030c 0404 4304 040d     .F.....H.....C..
   866f8:	0404 4d04 040e 0504 4004 040f 0505 4304     ...M.....@.....C
   86708:	0510 0505 4504 0611 0505 4704 0512 0606     .....E.....G....
   86718:	4304 0613 0606 4404 0714 0606 4604 0815     .C.....D.....F..
   86728:	0606 4704 0716 0707 4404 0817 0708 4604     ...G.....D.....F
   86738:	0718 0808 4304 0819 0808 4404               .....C.....D

00086744 <uart_serial_options>:
   86744:	c200 0001 0000 0000 0800 0000 0001 0000     ................
   86754:	6425 2520 0a64 0000 6577 636c 6d6f 0a65     %d %d...welcome.
   86764:	0000 0000 0043 0000                         ....C...

0008676c <_global_impure_ptr>:
   8676c:	0408 2007                                   ... 

00086770 <zeroes.6993>:
   86770:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   86780:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   86790:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
   867a0:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

000867b0 <blanks.6992>:
   867b0:	2020 2020 2020 2020 2020 2020 2020 2020                     

000867c0 <_init>:
   867c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   867c2:	bf00      	nop
   867c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   867c6:	bc08      	pop	{r3}
   867c8:	469e      	mov	lr, r3
   867ca:	4770      	bx	lr

000867cc <__init_array_start>:
   867cc:	00084a0d 	.word	0x00084a0d

000867d0 <__frame_dummy_init_array_entry>:
   867d0:	00080119                                ....

000867d4 <_fini>:
   867d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   867d6:	bf00      	nop
   867d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   867da:	bc08      	pop	{r3}
   867dc:	469e      	mov	lr, r3
   867de:	4770      	bx	lr

000867e0 <__fini_array_start>:
   867e0:	000800f5 	.word	0x000800f5
