
SENSOR_CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000069fc  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000009dc  20070000  000869fc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000178  200709dc  000873d8  000209dc  2**2
                  ALLOC
  3 .stack        00002004  20070b54  00087550  000209dc  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000209dc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020a05  2**0
                  CONTENTS, READONLY
  6 .debug_info   00016bce  00000000  00000000  00020a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036ff  00000000  00000000  0003762c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000739e  00000000  00000000  0003ad2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e10  00000000  00000000  000420c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c20  00000000  00000000  00042ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001f93a  00000000  00000000  00043af9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001f89c  00000000  00000000  00063433  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000686a0  00000000  00000000  00082ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003f38  00000000  00000000  000eb370  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b58 	.word	0x20072b58
   80004:	00084885 	.word	0x00084885
   80008:	0008487d 	.word	0x0008487d
   8000c:	0008487d 	.word	0x0008487d
   80010:	0008487d 	.word	0x0008487d
   80014:	0008487d 	.word	0x0008487d
   80018:	0008487d 	.word	0x0008487d
	...
   8002c:	0008487d 	.word	0x0008487d
   80030:	0008487d 	.word	0x0008487d
   80034:	00000000 	.word	0x00000000
   80038:	0008487d 	.word	0x0008487d
   8003c:	0008487d 	.word	0x0008487d
   80040:	0008487d 	.word	0x0008487d
   80044:	0008487d 	.word	0x0008487d
   80048:	0008487d 	.word	0x0008487d
   8004c:	0008487d 	.word	0x0008487d
   80050:	0008487d 	.word	0x0008487d
   80054:	0008487d 	.word	0x0008487d
   80058:	0008487d 	.word	0x0008487d
   8005c:	0008487d 	.word	0x0008487d
   80060:	0008487d 	.word	0x0008487d
   80064:	0008487d 	.word	0x0008487d
   80068:	00000000 	.word	0x00000000
   8006c:	00084569 	.word	0x00084569
   80070:	00084581 	.word	0x00084581
   80074:	00084599 	.word	0x00084599
   80078:	000845b1 	.word	0x000845b1
	...
   80084:	0008487d 	.word	0x0008487d
   80088:	0008487d 	.word	0x0008487d
   8008c:	0008487d 	.word	0x0008487d
   80090:	0008487d 	.word	0x0008487d
   80094:	0008487d 	.word	0x0008487d
   80098:	0008487d 	.word	0x0008487d
   8009c:	0008487d 	.word	0x0008487d
   800a0:	0008487d 	.word	0x0008487d
   800a4:	00000000 	.word	0x00000000
   800a8:	0008487d 	.word	0x0008487d
   800ac:	0008487d 	.word	0x0008487d
   800b0:	0008487d 	.word	0x0008487d
   800b4:	0008487d 	.word	0x0008487d
   800b8:	0008487d 	.word	0x0008487d
   800bc:	0008487d 	.word	0x0008487d
   800c0:	0008487d 	.word	0x0008487d
   800c4:	0008487d 	.word	0x0008487d
   800c8:	0008487d 	.word	0x0008487d
   800cc:	0008487d 	.word	0x0008487d
   800d0:	0008487d 	.word	0x0008487d
   800d4:	0008487d 	.word	0x0008487d
   800d8:	0008487d 	.word	0x0008487d
   800dc:	0008487d 	.word	0x0008487d
   800e0:	0008487d 	.word	0x0008487d
   800e4:	0008487d 	.word	0x0008487d
   800e8:	0008487d 	.word	0x0008487d
   800ec:	000801d5 	.word	0x000801d5
   800f0:	0008487d 	.word	0x0008487d

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709dc 	.word	0x200709dc
   80110:	00000000 	.word	0x00000000
   80114:	000869fc 	.word	0x000869fc

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	200709e0 	.word	0x200709e0
   80144:	000869fc 	.word	0x000869fc
   80148:	000869fc 	.word	0x000869fc
   8014c:	00000000 	.word	0x00000000

00080150 <_read>:
   80150:	b580      	push	{r7, lr}
   80152:	b086      	sub	sp, #24
   80154:	af00      	add	r7, sp, #0
   80156:	60f8      	str	r0, [r7, #12]
   80158:	60b9      	str	r1, [r7, #8]
   8015a:	607a      	str	r2, [r7, #4]
   8015c:	2300      	movs	r3, #0
   8015e:	617b      	str	r3, [r7, #20]
   80160:	68fb      	ldr	r3, [r7, #12]
   80162:	2b00      	cmp	r3, #0
   80164:	d012      	beq.n	8018c <_read+0x3c>
   80166:	f04f 33ff 	mov.w	r3, #4294967295
   8016a:	e013      	b.n	80194 <_read+0x44>
   8016c:	4b0b      	ldr	r3, [pc, #44]	; (8019c <_read+0x4c>)
   8016e:	681b      	ldr	r3, [r3, #0]
   80170:	4a0b      	ldr	r2, [pc, #44]	; (801a0 <_read+0x50>)
   80172:	6812      	ldr	r2, [r2, #0]
   80174:	68b9      	ldr	r1, [r7, #8]
   80176:	4610      	mov	r0, r2
   80178:	4798      	blx	r3
   8017a:	68bb      	ldr	r3, [r7, #8]
   8017c:	3301      	adds	r3, #1
   8017e:	60bb      	str	r3, [r7, #8]
   80180:	697b      	ldr	r3, [r7, #20]
   80182:	3301      	adds	r3, #1
   80184:	617b      	str	r3, [r7, #20]
   80186:	687b      	ldr	r3, [r7, #4]
   80188:	3b01      	subs	r3, #1
   8018a:	607b      	str	r3, [r7, #4]
   8018c:	687b      	ldr	r3, [r7, #4]
   8018e:	2b00      	cmp	r3, #0
   80190:	dcec      	bgt.n	8016c <_read+0x1c>
   80192:	697b      	ldr	r3, [r7, #20]
   80194:	4618      	mov	r0, r3
   80196:	3718      	adds	r7, #24
   80198:	46bd      	mov	sp, r7
   8019a:	bd80      	pop	{r7, pc}
   8019c:	20070ab0 	.word	0x20070ab0
   801a0:	20070b04 	.word	0x20070b04

000801a4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   801a4:	b480      	push	{r7}
   801a6:	b083      	sub	sp, #12
   801a8:	af00      	add	r7, sp, #0
   801aa:	4603      	mov	r3, r0
   801ac:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   801ae:	4908      	ldr	r1, [pc, #32]	; (801d0 <NVIC_EnableIRQ+0x2c>)
   801b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   801b4:	095b      	lsrs	r3, r3, #5
   801b6:	79fa      	ldrb	r2, [r7, #7]
   801b8:	f002 021f 	and.w	r2, r2, #31
   801bc:	2001      	movs	r0, #1
   801be:	fa00 f202 	lsl.w	r2, r0, r2
   801c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   801c6:	bf00      	nop
   801c8:	370c      	adds	r7, #12
   801ca:	46bd      	mov	sp, r7
   801cc:	bc80      	pop	{r7}
   801ce:	4770      	bx	lr
   801d0:	e000e100 	.word	0xe000e100

000801d4 <CAN0_Handler>:
	{23, (7 + 1), (7 + 1), (6 + 1), (3 + 1), 70},
	{24, (6 + 1), (7 + 1), (7 + 1), (3 + 1), 67},
	{25, (7 + 1), (7 + 1), (7 + 1), (3 + 1), 68}
};

void CAN0_Handler(void)   {
   801d4:	b580      	push	{r7, lr}
   801d6:	b082      	sub	sp, #8
   801d8:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	
	
	ul_status = (CAN0 -> CAN_SR);
   801da:	4b11      	ldr	r3, [pc, #68]	; (80220 <CAN0_Handler+0x4c>)
   801dc:	691b      	ldr	r3, [r3, #16]
   801de:	607b      	str	r3, [r7, #4]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   801e0:	687b      	ldr	r3, [r7, #4]
   801e2:	b2db      	uxtb	r3, r3
   801e4:	2b00      	cmp	r3, #0
   801e6:	d017      	beq.n	80218 <CAN0_Handler+0x44>
		ul_status = CAN0->CAN_MB[1].CAN_MSR ;
   801e8:	4b0d      	ldr	r3, [pc, #52]	; (80220 <CAN0_Handler+0x4c>)
   801ea:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
   801ee:	607b      	str	r3, [r7, #4]
		if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   801f0:	687b      	ldr	r3, [r7, #4]
   801f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   801f6:	2b00      	cmp	r3, #0
   801f8:	d00e      	beq.n	80218 <CAN0_Handler+0x44>
			can0_mailbox.ul_mb_idx = 1;
   801fa:	4b0a      	ldr	r3, [pc, #40]	; (80224 <CAN0_Handler+0x50>)
   801fc:	2201      	movs	r2, #1
   801fe:	601a      	str	r2, [r3, #0]
			can0_mailbox.ul_status = ul_status;
   80200:	4a08      	ldr	r2, [pc, #32]	; (80224 <CAN0_Handler+0x50>)
   80202:	687b      	ldr	r3, [r7, #4]
   80204:	6093      	str	r3, [r2, #8]
			dd_can_mailbox_read(&can0_mailbox);
   80206:	4807      	ldr	r0, [pc, #28]	; (80224 <CAN0_Handler+0x50>)
   80208:	4b07      	ldr	r3, [pc, #28]	; (80228 <CAN0_Handler+0x54>)
   8020a:	4798      	blx	r3
			dd_can_extract_mailbox_data(&can0_mailbox);				
   8020c:	4805      	ldr	r0, [pc, #20]	; (80224 <CAN0_Handler+0x50>)
   8020e:	4b07      	ldr	r3, [pc, #28]	; (8022c <CAN0_Handler+0x58>)
   80210:	4798      	blx	r3
			g_ul_recv_status = 1;
   80212:	4b07      	ldr	r3, [pc, #28]	; (80230 <CAN0_Handler+0x5c>)
   80214:	2201      	movs	r2, #1
   80216:	601a      	str	r2, [r3, #0]
		}
		
	}
}
   80218:	bf00      	nop
   8021a:	3708      	adds	r7, #8
   8021c:	46bd      	mov	sp, r7
   8021e:	bd80      	pop	{r7, pc}
   80220:	400b4000 	.word	0x400b4000
   80224:	20070ab8 	.word	0x20070ab8
   80228:	00080349 	.word	0x00080349
   8022c:	00080235 	.word	0x00080235
   80230:	200709f8 	.word	0x200709f8

00080234 <dd_can_extract_mailbox_data>:

static void dd_can_extract_mailbox_data(can_mb_conf_t *p_mailbox )   {
   80234:	b480      	push	{r7}
   80236:	b085      	sub	sp, #20
   80238:	af00      	add	r7, sp, #0
   8023a:	6078      	str	r0, [r7, #4]
	dd_data_size_type dd_data_size;	
	dd_data_size.four_bytes = (p_mailbox->ul_datal);
   8023c:	687b      	ldr	r3, [r7, #4]
   8023e:	699b      	ldr	r3, [r3, #24]
   80240:	60fb      	str	r3, [r7, #12]
	
	DD_CPU_COMMAND.CPU_SENDER_reg =  dd_data_size.bytes_array[0]  ;
   80242:	7b3a      	ldrb	r2, [r7, #12]
   80244:	4b36      	ldr	r3, [pc, #216]	; (80320 <dd_can_extract_mailbox_data+0xec>)
   80246:	701a      	strb	r2, [r3, #0]
	DD_CPU_COMMAND.CPU_COMMAND_reg = dd_data_size.bytes_array[1]  ;
   80248:	7b7a      	ldrb	r2, [r7, #13]
   8024a:	4b35      	ldr	r3, [pc, #212]	; (80320 <dd_can_extract_mailbox_data+0xec>)
   8024c:	705a      	strb	r2, [r3, #1]
	
	switch(DD_CPU_COMMAND.CPU_SENDER_reg)   {		
   8024e:	4b34      	ldr	r3, [pc, #208]	; (80320 <dd_can_extract_mailbox_data+0xec>)
   80250:	781b      	ldrb	r3, [r3, #0]
   80252:	2b0a      	cmp	r3, #10
   80254:	d000      	beq.n	80258 <dd_can_extract_mailbox_data+0x24>
	          			
	          default:
	          break;			
	       }  
	   default:
	   break;
   80256:	e05c      	b.n	80312 <dd_can_extract_mailbox_data+0xde>
	DD_CPU_COMMAND.CPU_SENDER_reg =  dd_data_size.bytes_array[0]  ;
	DD_CPU_COMMAND.CPU_COMMAND_reg = dd_data_size.bytes_array[1]  ;
	
	switch(DD_CPU_COMMAND.CPU_SENDER_reg)   {		
	   case MASTER_CPU_id :
	       switch(DD_CPU_COMMAND.CPU_COMMAND_reg)    {
   80258:	4b31      	ldr	r3, [pc, #196]	; (80320 <dd_can_extract_mailbox_data+0xec>)
   8025a:	785b      	ldrb	r3, [r3, #1]
   8025c:	3b40      	subs	r3, #64	; 0x40
   8025e:	2b06      	cmp	r3, #6
   80260:	d856      	bhi.n	80310 <dd_can_extract_mailbox_data+0xdc>
   80262:	a201      	add	r2, pc, #4	; (adr r2, 80268 <dd_can_extract_mailbox_data+0x34>)
   80264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80268:	00080285 	.word	0x00080285
   8026c:	00080299 	.word	0x00080299
   80270:	000802ad 	.word	0x000802ad
   80274:	000802c1 	.word	0x000802c1
   80278:	000802d5 	.word	0x000802d5
   8027c:	000802e9 	.word	0x000802e9
   80280:	000802fd 	.word	0x000802fd
		      case Sensor_status_query :
			     master_requested_sensor_data =1;
   80284:	4b27      	ldr	r3, [pc, #156]	; (80324 <dd_can_extract_mailbox_data+0xf0>)
   80286:	2201      	movs	r2, #1
   80288:	701a      	strb	r2, [r3, #0]
				 group_id_reg = 0;	
   8028a:	4b27      	ldr	r3, [pc, #156]	; (80328 <dd_can_extract_mailbox_data+0xf4>)
   8028c:	2200      	movs	r2, #0
   8028e:	701a      	strb	r2, [r3, #0]
				 group_id_reg_id0 = 1;
   80290:	4b26      	ldr	r3, [pc, #152]	; (8032c <dd_can_extract_mailbox_data+0xf8>)
   80292:	2201      	movs	r2, #1
   80294:	701a      	strb	r2, [r3, #0]
			  break;
   80296:	e03c      	b.n	80312 <dd_can_extract_mailbox_data+0xde>
			    
		      case Sensor_status_group_id_1: 
					group_id_reg = SENSOR_GROUP_ID_1;					
   80298:	4b23      	ldr	r3, [pc, #140]	; (80328 <dd_can_extract_mailbox_data+0xf4>)
   8029a:	2201      	movs	r2, #1
   8029c:	701a      	strb	r2, [r3, #0]
		            master_requested_sensor_data =1; 
   8029e:	4b21      	ldr	r3, [pc, #132]	; (80324 <dd_can_extract_mailbox_data+0xf0>)
   802a0:	2201      	movs	r2, #1
   802a2:	701a      	strb	r2, [r3, #0]
					group_id_reg_id1 = 1;
   802a4:	4b22      	ldr	r3, [pc, #136]	; (80330 <dd_can_extract_mailbox_data+0xfc>)
   802a6:	2201      	movs	r2, #1
   802a8:	701a      	strb	r2, [r3, #0]
			  break; 
   802aa:	e032      	b.n	80312 <dd_can_extract_mailbox_data+0xde>
			  case Sensor_status_group_id_2: 
			     group_id_reg =SENSOR_GROUP_ID_2;					
   802ac:	4b1e      	ldr	r3, [pc, #120]	; (80328 <dd_can_extract_mailbox_data+0xf4>)
   802ae:	2202      	movs	r2, #2
   802b0:	701a      	strb	r2, [r3, #0]
		         master_requested_sensor_data =1; 
   802b2:	4b1c      	ldr	r3, [pc, #112]	; (80324 <dd_can_extract_mailbox_data+0xf0>)
   802b4:	2201      	movs	r2, #1
   802b6:	701a      	strb	r2, [r3, #0]
				 group_id_reg_id2 = 1;
   802b8:	4b1e      	ldr	r3, [pc, #120]	; (80334 <dd_can_extract_mailbox_data+0x100>)
   802ba:	2201      	movs	r2, #1
   802bc:	701a      	strb	r2, [r3, #0]
			  break;     
   802be:	e028      	b.n	80312 <dd_can_extract_mailbox_data+0xde>
			  case Sensor_status_group_id_3: 
				group_id_reg = SENSOR_GROUP_ID_3;					
   802c0:	4b19      	ldr	r3, [pc, #100]	; (80328 <dd_can_extract_mailbox_data+0xf4>)
   802c2:	2203      	movs	r2, #3
   802c4:	701a      	strb	r2, [r3, #0]
		        master_requested_sensor_data =1; 
   802c6:	4b17      	ldr	r3, [pc, #92]	; (80324 <dd_can_extract_mailbox_data+0xf0>)
   802c8:	2201      	movs	r2, #1
   802ca:	701a      	strb	r2, [r3, #0]
				group_id_reg_id3 = 1;
   802cc:	4b1a      	ldr	r3, [pc, #104]	; (80338 <dd_can_extract_mailbox_data+0x104>)
   802ce:	2201      	movs	r2, #1
   802d0:	701a      	strb	r2, [r3, #0]
			  break;  
   802d2:	e01e      	b.n	80312 <dd_can_extract_mailbox_data+0xde>
			  case Sensor_status_group_id_4: 
				 group_id_reg = SENSOR_GROUP_ID_4;					
   802d4:	4b14      	ldr	r3, [pc, #80]	; (80328 <dd_can_extract_mailbox_data+0xf4>)
   802d6:	2204      	movs	r2, #4
   802d8:	701a      	strb	r2, [r3, #0]
		         master_requested_sensor_data =1; 
   802da:	4b12      	ldr	r3, [pc, #72]	; (80324 <dd_can_extract_mailbox_data+0xf0>)
   802dc:	2201      	movs	r2, #1
   802de:	701a      	strb	r2, [r3, #0]
				 group_id_reg_id4 = 1;
   802e0:	4b16      	ldr	r3, [pc, #88]	; (8033c <dd_can_extract_mailbox_data+0x108>)
   802e2:	2201      	movs	r2, #1
   802e4:	701a      	strb	r2, [r3, #0]
			  break;    
   802e6:	e014      	b.n	80312 <dd_can_extract_mailbox_data+0xde>
			  case Sensor_status_group_id_5: 
			     group_id_reg = SENSOR_GROUP_ID_5;					
   802e8:	4b0f      	ldr	r3, [pc, #60]	; (80328 <dd_can_extract_mailbox_data+0xf4>)
   802ea:	2205      	movs	r2, #5
   802ec:	701a      	strb	r2, [r3, #0]
		         master_requested_sensor_data =1; 
   802ee:	4b0d      	ldr	r3, [pc, #52]	; (80324 <dd_can_extract_mailbox_data+0xf0>)
   802f0:	2201      	movs	r2, #1
   802f2:	701a      	strb	r2, [r3, #0]
				 group_id_reg_id5 = 1;
   802f4:	4b12      	ldr	r3, [pc, #72]	; (80340 <dd_can_extract_mailbox_data+0x10c>)
   802f6:	2201      	movs	r2, #1
   802f8:	701a      	strb	r2, [r3, #0]
			  break;   
   802fa:	e00a      	b.n	80312 <dd_can_extract_mailbox_data+0xde>
			  case Sensor_status_group_id_6: 
			     group_id_reg =SENSOR_GROUP_ID_6;					
   802fc:	4b0a      	ldr	r3, [pc, #40]	; (80328 <dd_can_extract_mailbox_data+0xf4>)
   802fe:	2206      	movs	r2, #6
   80300:	701a      	strb	r2, [r3, #0]
		         master_requested_sensor_data =1; 
   80302:	4b08      	ldr	r3, [pc, #32]	; (80324 <dd_can_extract_mailbox_data+0xf0>)
   80304:	2201      	movs	r2, #1
   80306:	701a      	strb	r2, [r3, #0]
				 group_id_reg_id6 = 1;
   80308:	4b0e      	ldr	r3, [pc, #56]	; (80344 <dd_can_extract_mailbox_data+0x110>)
   8030a:	2201      	movs	r2, #1
   8030c:	701a      	strb	r2, [r3, #0]
			  break;   
   8030e:	e000      	b.n	80312 <dd_can_extract_mailbox_data+0xde>
	          			
	          default:
	          break;			
   80310:	bf00      	nop
	       }  
	   default:
	   break;
   80312:	bf00      	nop
	}	
}
   80314:	bf00      	nop
   80316:	3714      	adds	r7, #20
   80318:	46bd      	mov	sp, r7
   8031a:	bc80      	pop	{r7}
   8031c:	4770      	bx	lr
   8031e:	bf00      	nop
   80320:	20070ab4 	.word	0x20070ab4
   80324:	200709fc 	.word	0x200709fc
   80328:	20070ad8 	.word	0x20070ad8
   8032c:	2007018c 	.word	0x2007018c
   80330:	2007018d 	.word	0x2007018d
   80334:	2007018e 	.word	0x2007018e
   80338:	2007018f 	.word	0x2007018f
   8033c:	20070190 	.word	0x20070190
   80340:	20070191 	.word	0x20070191
   80344:	20070192 	.word	0x20070192

00080348 <dd_can_mailbox_read>:


static uint32_t dd_can_mailbox_read(can_mb_conf_t *p_mailbox)   {
   80348:	b480      	push	{r7}
   8034a:	b087      	sub	sp, #28
   8034c:	af00      	add	r7, sp, #0
   8034e:	6078      	str	r0, [r7, #4]

	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   80350:	2300      	movs	r3, #0
   80352:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80354:	687b      	ldr	r3, [r7, #4]
   80356:	681b      	ldr	r3, [r3, #0]
   80358:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   8035a:	687b      	ldr	r3, [r7, #4]
   8035c:	689b      	ldr	r3, [r3, #8]
   8035e:	60fb      	str	r3, [r7, #12]
	 /* Check whether there is overwriting happening in Receive with * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	 
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {	ul_retval = CAN_MAILBOX_RX_OVER;	}
   80360:	68fb      	ldr	r3, [r7, #12]
   80362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   80366:	2b00      	cmp	r3, #0
   80368:	d006      	beq.n	80378 <dd_can_mailbox_read+0x30>
   8036a:	68fb      	ldr	r3, [r7, #12]
   8036c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80370:	2b00      	cmp	r3, #0
   80372:	d001      	beq.n	80378 <dd_can_mailbox_read+0x30>
   80374:	2302      	movs	r3, #2
   80376:	617b      	str	r3, [r7, #20]

	/* Read the message family ID. */
	p_mailbox->ul_fid =	CAN0->CAN_MB[uc_index].CAN_MFID & CAN_MFID_MFID_Msk;	
   80378:	4a26      	ldr	r2, [pc, #152]	; (80414 <dd_can_mailbox_read+0xcc>)
   8037a:	7cfb      	ldrb	r3, [r7, #19]
   8037c:	015b      	lsls	r3, r3, #5
   8037e:	4413      	add	r3, r2
   80380:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   80384:	681b      	ldr	r3, [r3, #0]
   80386:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8038a:	687b      	ldr	r3, [r7, #4]
   8038c:	615a      	str	r2, [r3, #20]

	/* Read received data length. */
	p_mailbox->uc_length = (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   8038e:	68fb      	ldr	r3, [r7, #12]
   80390:	0c1b      	lsrs	r3, r3, #16
   80392:	b2db      	uxtb	r3, r3
   80394:	f003 030f 	and.w	r3, r3, #15
   80398:	b2da      	uxtb	r2, r3
   8039a:	687b      	ldr	r3, [r7, #4]
   8039c:	719a      	strb	r2, [r3, #6]
	
	/* Read received data. */
	p_mailbox->ul_datal = CAN0->CAN_MB[uc_index].CAN_MDL;
   8039e:	4a1d      	ldr	r2, [pc, #116]	; (80414 <dd_can_mailbox_read+0xcc>)
   803a0:	7cfb      	ldrb	r3, [r7, #19]
   803a2:	015b      	lsls	r3, r3, #5
   803a4:	4413      	add	r3, r2
   803a6:	f503 7305 	add.w	r3, r3, #532	; 0x214
   803aa:	681a      	ldr	r2, [r3, #0]
   803ac:	687b      	ldr	r3, [r7, #4]
   803ae:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = CAN0->CAN_MB[uc_index].CAN_MDH;
   803b0:	4a18      	ldr	r2, [pc, #96]	; (80414 <dd_can_mailbox_read+0xcc>)
   803b2:	7cfb      	ldrb	r3, [r7, #19]
   803b4:	015b      	lsls	r3, r3, #5
   803b6:	4413      	add	r3, r2
   803b8:	f503 7306 	add.w	r3, r3, #536	; 0x218
   803bc:	681a      	ldr	r2, [r3, #0]
   803be:	687b      	ldr	r3, [r7, #4]
   803c0:	61da      	str	r2, [r3, #28]
	
	
	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   803c2:	4a14      	ldr	r2, [pc, #80]	; (80414 <dd_can_mailbox_read+0xcc>)
   803c4:	7cfb      	ldrb	r3, [r7, #19]
   803c6:	015b      	lsls	r3, r3, #5
   803c8:	4413      	add	r3, r2
   803ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
   803ce:	681a      	ldr	r2, [r3, #0]
   803d0:	687b      	ldr	r3, [r7, #4]
   803d2:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   803d4:	687b      	ldr	r3, [r7, #4]
   803d6:	689b      	ldr	r3, [r3, #8]
   803d8:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;	}
   803da:	68fb      	ldr	r3, [r7, #12]
   803dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   803e0:	2b00      	cmp	r3, #0
   803e2:	d003      	beq.n	803ec <dd_can_mailbox_read+0xa4>
   803e4:	697b      	ldr	r3, [r7, #20]
   803e6:	f043 0304 	orr.w	r3, r3, #4
   803ea:	617b      	str	r3, [r7, #20]
	else { ul_retval |= CAN_MAILBOX_TRANSFER_OK; }		
		
	/* Enable next receive process. */	 // Allows the reception of the next message
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |CAN_MCR_MDLC(p_mailbox->uc_length);    
   803ec:	4909      	ldr	r1, [pc, #36]	; (80414 <dd_can_mailbox_read+0xcc>)
   803ee:	7cfb      	ldrb	r3, [r7, #19]
   803f0:	687a      	ldr	r2, [r7, #4]
   803f2:	7992      	ldrb	r2, [r2, #6]
   803f4:	0412      	lsls	r2, r2, #16
   803f6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   803fa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   803fe:	015b      	lsls	r3, r3, #5
   80400:	440b      	add	r3, r1
   80402:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   80406:	601a      	str	r2, [r3, #0]
	return ul_retval;
   80408:	697b      	ldr	r3, [r7, #20]
}
   8040a:	4618      	mov	r0, r3
   8040c:	371c      	adds	r7, #28
   8040e:	46bd      	mov	sp, r7
   80410:	bc80      	pop	{r7}
   80412:	4770      	bx	lr
   80414:	400b4000 	.word	0x400b4000

00080418 <dd_can_mailbox_write>:

		
uint32_t dd_can_mailbox_write(can_mb_conf_t *p_mailbox)
{
   80418:	b480      	push	{r7}
   8041a:	b085      	sub	sp, #20
   8041c:	af00      	add	r7, sp, #0
   8041e:	6078      	str	r0, [r7, #4]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80420:	687b      	ldr	r3, [r7, #4]
   80422:	681b      	ldr	r3, [r3, #0]
   80424:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   80426:	4a2a      	ldr	r2, [pc, #168]	; (804d0 <dd_can_mailbox_write+0xb8>)
   80428:	7bfb      	ldrb	r3, [r7, #15]
   8042a:	015b      	lsls	r3, r3, #5
   8042c:	4413      	add	r3, r2
   8042e:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80432:	681a      	ldr	r2, [r3, #0]
   80434:	687b      	ldr	r3, [r7, #4]
   80436:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   80438:	687b      	ldr	r3, [r7, #4]
   8043a:	689b      	ldr	r3, [r3, #8]
   8043c:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   8043e:	68bb      	ldr	r3, [r7, #8]
   80440:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   80444:	2b00      	cmp	r3, #0
   80446:	d101      	bne.n	8044c <dd_can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   80448:	2301      	movs	r3, #1
   8044a:	e03b      	b.n	804c4 <dd_can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) { CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id | CAN_MAM_MIDE;	}
   8044c:	687b      	ldr	r3, [r7, #4]
   8044e:	795b      	ldrb	r3, [r3, #5]
   80450:	2b00      	cmp	r3, #0
   80452:	d00b      	beq.n	8046c <dd_can_mailbox_write+0x54>
   80454:	491e      	ldr	r1, [pc, #120]	; (804d0 <dd_can_mailbox_write+0xb8>)
   80456:	7bfb      	ldrb	r3, [r7, #15]
   80458:	687a      	ldr	r2, [r7, #4]
   8045a:	6912      	ldr	r2, [r2, #16]
   8045c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80460:	015b      	lsls	r3, r3, #5
   80462:	440b      	add	r3, r1
   80464:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80468:	601a      	str	r2, [r3, #0]
   8046a:	e008      	b.n	8047e <dd_can_mailbox_write+0x66>
                         else {	CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;}
   8046c:	4918      	ldr	r1, [pc, #96]	; (804d0 <dd_can_mailbox_write+0xb8>)
   8046e:	7bfb      	ldrb	r3, [r7, #15]
   80470:	687a      	ldr	r2, [r7, #4]
   80472:	6912      	ldr	r2, [r2, #16]
   80474:	015b      	lsls	r3, r3, #5
   80476:	440b      	add	r3, r1
   80478:	f503 7302 	add.w	r3, r3, #520	; 0x208
   8047c:	601a      	str	r2, [r3, #0]

	/* Write transmit data into mailbox data register. */
	CAN0->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   8047e:	4914      	ldr	r1, [pc, #80]	; (804d0 <dd_can_mailbox_write+0xb8>)
   80480:	7bfb      	ldrb	r3, [r7, #15]
   80482:	687a      	ldr	r2, [r7, #4]
   80484:	6992      	ldr	r2, [r2, #24]
   80486:	015b      	lsls	r3, r3, #5
   80488:	440b      	add	r3, r1
   8048a:	f503 7305 	add.w	r3, r3, #532	; 0x214
   8048e:	601a      	str	r2, [r3, #0]
	if (p_mailbox->uc_length > 4) {  CAN0->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;	}
   80490:	687b      	ldr	r3, [r7, #4]
   80492:	799b      	ldrb	r3, [r3, #6]
   80494:	2b04      	cmp	r3, #4
   80496:	d908      	bls.n	804aa <dd_can_mailbox_write+0x92>
   80498:	490d      	ldr	r1, [pc, #52]	; (804d0 <dd_can_mailbox_write+0xb8>)
   8049a:	7bfb      	ldrb	r3, [r7, #15]
   8049c:	687a      	ldr	r2, [r7, #4]
   8049e:	69d2      	ldr	r2, [r2, #28]
   804a0:	015b      	lsls	r3, r3, #5
   804a2:	440b      	add	r3, r1
   804a4:	f503 7306 	add.w	r3, r3, #536	; 0x218
   804a8:	601a      	str	r2, [r3, #0]

	/* Write transmit data length into mailbox control register. */
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   804aa:	4909      	ldr	r1, [pc, #36]	; (804d0 <dd_can_mailbox_write+0xb8>)
   804ac:	7bfb      	ldrb	r3, [r7, #15]
   804ae:	687a      	ldr	r2, [r7, #4]
   804b0:	7992      	ldrb	r2, [r2, #6]
   804b2:	0412      	lsls	r2, r2, #16
   804b4:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   804b8:	015b      	lsls	r3, r3, #5
   804ba:	440b      	add	r3, r1
   804bc:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   804c0:	601a      	str	r2, [r3, #0]

	return CAN_MAILBOX_TRANSFER_OK;
   804c2:	2300      	movs	r3, #0
}
   804c4:	4618      	mov	r0, r3
   804c6:	3714      	adds	r7, #20
   804c8:	46bd      	mov	sp, r7
   804ca:	bc80      	pop	{r7}
   804cc:	4770      	bx	lr
   804ce:	bf00      	nop
   804d0:	400b4000 	.word	0x400b4000

000804d4 <dd_can_global_send_transfer_cmd>:

void dd_can_global_send_transfer_cmd(uint8_t uc_mask)
{
   804d4:	b480      	push	{r7}
   804d6:	b085      	sub	sp, #20
   804d8:	af00      	add	r7, sp, #0
   804da:	4603      	mov	r3, r0
   804dc:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_reg;

	ul_reg = CAN0->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   804de:	4b07      	ldr	r3, [pc, #28]	; (804fc <dd_can_global_send_transfer_cmd+0x28>)
   804e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   804e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   804e6:	60fb      	str	r3, [r7, #12]
	CAN0->CAN_TCR = ul_reg | uc_mask;
   804e8:	4904      	ldr	r1, [pc, #16]	; (804fc <dd_can_global_send_transfer_cmd+0x28>)
   804ea:	79fa      	ldrb	r2, [r7, #7]
   804ec:	68fb      	ldr	r3, [r7, #12]
   804ee:	4313      	orrs	r3, r2
   804f0:	624b      	str	r3, [r1, #36]	; 0x24
}
   804f2:	bf00      	nop
   804f4:	3714      	adds	r7, #20
   804f6:	46bd      	mov	sp, r7
   804f8:	bc80      	pop	{r7}
   804fa:	4770      	bx	lr
   804fc:	400b4000 	.word	0x400b4000

00080500 <dd_can_mailbox_conf>:


 void dd_can_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   80500:	b480      	push	{r7}
   80502:	b085      	sub	sp, #20
   80504:	af00      	add	r7, sp, #0
   80506:	6078      	str	r0, [r7, #4]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80508:	687b      	ldr	r3, [r7, #4]
   8050a:	681b      	ldr	r3, [r3, #0]
   8050c:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   8050e:	687b      	ldr	r3, [r7, #4]
   80510:	791b      	ldrb	r3, [r3, #4]
   80512:	2b00      	cmp	r3, #0
   80514:	d12f      	bne.n	80576 <dd_can_mailbox_conf+0x76>
		CAN0->CAN_MB[uc_index].CAN_MMR = 0;
   80516:	4a35      	ldr	r2, [pc, #212]	; (805ec <dd_can_mailbox_conf+0xec>)
   80518:	7bfb      	ldrb	r3, [r7, #15]
   8051a:	3310      	adds	r3, #16
   8051c:	015b      	lsls	r3, r3, #5
   8051e:	4413      	add	r3, r2
   80520:	2200      	movs	r2, #0
   80522:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MAM = 0;
   80524:	4a31      	ldr	r2, [pc, #196]	; (805ec <dd_can_mailbox_conf+0xec>)
   80526:	7bfb      	ldrb	r3, [r7, #15]
   80528:	3310      	adds	r3, #16
   8052a:	015b      	lsls	r3, r3, #5
   8052c:	4413      	add	r3, r2
   8052e:	3304      	adds	r3, #4
   80530:	2200      	movs	r2, #0
   80532:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MID = 0;
   80534:	4a2d      	ldr	r2, [pc, #180]	; (805ec <dd_can_mailbox_conf+0xec>)
   80536:	7bfb      	ldrb	r3, [r7, #15]
   80538:	015b      	lsls	r3, r3, #5
   8053a:	4413      	add	r3, r2
   8053c:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80540:	2200      	movs	r2, #0
   80542:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDL = 0;
   80544:	4a29      	ldr	r2, [pc, #164]	; (805ec <dd_can_mailbox_conf+0xec>)
   80546:	7bfb      	ldrb	r3, [r7, #15]
   80548:	015b      	lsls	r3, r3, #5
   8054a:	4413      	add	r3, r2
   8054c:	f503 7305 	add.w	r3, r3, #532	; 0x214
   80550:	2200      	movs	r2, #0
   80552:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDH = 0;
   80554:	4a25      	ldr	r2, [pc, #148]	; (805ec <dd_can_mailbox_conf+0xec>)
   80556:	7bfb      	ldrb	r3, [r7, #15]
   80558:	015b      	lsls	r3, r3, #5
   8055a:	4413      	add	r3, r2
   8055c:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80560:	2200      	movs	r2, #0
   80562:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MCR = 0;
   80564:	4a21      	ldr	r2, [pc, #132]	; (805ec <dd_can_mailbox_conf+0xec>)
   80566:	7bfb      	ldrb	r3, [r7, #15]
   80568:	015b      	lsls	r3, r3, #5
   8056a:	4413      	add	r3, r2
   8056c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   80570:	2200      	movs	r2, #0
   80572:	601a      	str	r2, [r3, #0]
		return;
   80574:	e035      	b.n	805e2 <dd_can_mailbox_conf+0xe2>
	}
	
	/* Set the priority in Transmit mode. */                                                                   
	CAN0->CAN_MB[uc_index].CAN_MMR = (CAN0->CAN_MB[uc_index].CAN_MMR &  ~CAN_MMR_PRIOR_Msk) | (p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);  
   80576:	481d      	ldr	r0, [pc, #116]	; (805ec <dd_can_mailbox_conf+0xec>)
   80578:	7bfb      	ldrb	r3, [r7, #15]
   8057a:	491c      	ldr	r1, [pc, #112]	; (805ec <dd_can_mailbox_conf+0xec>)
   8057c:	7bfa      	ldrb	r2, [r7, #15]
   8057e:	3210      	adds	r2, #16
   80580:	0152      	lsls	r2, r2, #5
   80582:	440a      	add	r2, r1
   80584:	6812      	ldr	r2, [r2, #0]
   80586:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   8058a:	6879      	ldr	r1, [r7, #4]
   8058c:	79c9      	ldrb	r1, [r1, #7]
   8058e:	0409      	lsls	r1, r1, #16
   80590:	430a      	orrs	r2, r1
   80592:	3310      	adds	r3, #16
   80594:	015b      	lsls	r3, r3, #5
   80596:	4403      	add	r3, r0
   80598:	601a      	str	r2, [r3, #0]
	/* Set the message ID and message acceptance mask for the mailbox in * other modes. */	
		CAN0 ->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   8059a:	4914      	ldr	r1, [pc, #80]	; (805ec <dd_can_mailbox_conf+0xec>)
   8059c:	7bfb      	ldrb	r3, [r7, #15]
   8059e:	687a      	ldr	r2, [r7, #4]
   805a0:	68d2      	ldr	r2, [r2, #12]
   805a2:	3310      	adds	r3, #16
   805a4:	015b      	lsls	r3, r3, #5
   805a6:	440b      	add	r3, r1
   805a8:	3304      	adds	r3, #4
   805aa:	601a      	str	r2, [r3, #0]
		CAN0 ->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;	
   805ac:	490f      	ldr	r1, [pc, #60]	; (805ec <dd_can_mailbox_conf+0xec>)
   805ae:	7bfb      	ldrb	r3, [r7, #15]
   805b0:	687a      	ldr	r2, [r7, #4]
   805b2:	6912      	ldr	r2, [r2, #16]
   805b4:	015b      	lsls	r3, r3, #5
   805b6:	440b      	add	r3, r1
   805b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805bc:	601a      	str	r2, [r3, #0]

	/* Set up mailbox in one of the five different modes. */                                                      
	CAN0 ->CAN_MB[uc_index].CAN_MMR = (CAN0 ->CAN_MB[uc_index].CAN_MMR & ~CAN_MMR_MOT_Msk) | (p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);		
   805be:	480b      	ldr	r0, [pc, #44]	; (805ec <dd_can_mailbox_conf+0xec>)
   805c0:	7bfb      	ldrb	r3, [r7, #15]
   805c2:	490a      	ldr	r1, [pc, #40]	; (805ec <dd_can_mailbox_conf+0xec>)
   805c4:	7bfa      	ldrb	r2, [r7, #15]
   805c6:	3210      	adds	r2, #16
   805c8:	0152      	lsls	r2, r2, #5
   805ca:	440a      	add	r2, r1
   805cc:	6812      	ldr	r2, [r2, #0]
   805ce:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
   805d2:	6879      	ldr	r1, [r7, #4]
   805d4:	7909      	ldrb	r1, [r1, #4]
   805d6:	0609      	lsls	r1, r1, #24
   805d8:	430a      	orrs	r2, r1
   805da:	3310      	adds	r3, #16
   805dc:	015b      	lsls	r3, r3, #5
   805de:	4403      	add	r3, r0
   805e0:	601a      	str	r2, [r3, #0]
}
   805e2:	3714      	adds	r7, #20
   805e4:	46bd      	mov	sp, r7
   805e6:	bc80      	pop	{r7}
   805e8:	4770      	bx	lr
   805ea:	bf00      	nop
   805ec:	400b4000 	.word	0x400b4000

000805f0 <SENSOR_DD_INIT_CAN>:
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}


void SENSOR_DD_INIT_CAN()     {
   805f0:	b580      	push	{r7, lr}
   805f2:	b08e      	sub	sp, #56	; 0x38
   805f4:	af00      	add	r7, sp, #0
	can_bit_timing_t  *p_bit_time ;	
	p_bit_time = (can_bit_timing_t *)&can_bit_time[6];
   805f6:	4b53      	ldr	r3, [pc, #332]	; (80744 <SENSOR_DD_INIT_CAN+0x154>)
   805f8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_flag;
	uint32_t ul_tick;
	uint8_t uc_prescale = 120;	
   805fa:	2378      	movs	r3, #120	; 0x78
   805fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t ul_sysclk;	
	CAN0 ->CAN_WPMR = 0x43414E00;  //Can write protection disabled
   80600:	4b51      	ldr	r3, [pc, #324]	; (80748 <SENSOR_DD_INIT_CAN+0x158>)
   80602:	4a52      	ldr	r2, [pc, #328]	; (8074c <SENSOR_DD_INIT_CAN+0x15c>)
   80604:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	CAN0 ->CAN_MR &= ~CAN_MR_CANEN ;  //0xFFFFFFFE; // DISABLE CAN0	
   80608:	4a4f      	ldr	r2, [pc, #316]	; (80748 <SENSOR_DD_INIT_CAN+0x158>)
   8060a:	4b4f      	ldr	r3, [pc, #316]	; (80748 <SENSOR_DD_INIT_CAN+0x158>)
   8060c:	681b      	ldr	r3, [r3, #0]
   8060e:	f023 0301 	bic.w	r3, r3, #1
   80612:	6013      	str	r3, [r2, #0]
	CAN0->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) | CAN_BR_PROPAG(p_bit_time->uc_prog - 1) | CAN_BR_SJW(p_bit_time->uc_sjw - 1) |	CAN_BR_BRP(uc_prescale - 1);
   80614:	494c      	ldr	r1, [pc, #304]	; (80748 <SENSOR_DD_INIT_CAN+0x158>)
   80616:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80618:	78db      	ldrb	r3, [r3, #3]
   8061a:	3b01      	subs	r3, #1
   8061c:	f003 0207 	and.w	r2, r3, #7
   80620:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80622:	789b      	ldrb	r3, [r3, #2]
   80624:	3b01      	subs	r3, #1
   80626:	011b      	lsls	r3, r3, #4
   80628:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8062c:	431a      	orrs	r2, r3
   8062e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80630:	785b      	ldrb	r3, [r3, #1]
   80632:	3b01      	subs	r3, #1
   80634:	021b      	lsls	r3, r3, #8
   80636:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   8063a:	431a      	orrs	r2, r3
   8063c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8063e:	791b      	ldrb	r3, [r3, #4]
   80640:	3b01      	subs	r3, #1
   80642:	031b      	lsls	r3, r3, #12
   80644:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   80648:	431a      	orrs	r2, r3
   8064a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   8064e:	3b01      	subs	r3, #1
   80650:	041b      	lsls	r3, r3, #16
   80652:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   80656:	4313      	orrs	r3, r2
   80658:	614b      	str	r3, [r1, #20]
	can_mb_conf_t mb_config_t;
	
	//RESET ALL MAIL BOX 	
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */	
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   8065a:	2300      	movs	r3, #0
   8065c:	723b      	strb	r3, [r7, #8]
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   8065e:	2300      	movs	r3, #0
   80660:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   80664:	e00b      	b.n	8067e <SENSOR_DD_INIT_CAN+0x8e>
		mb_config_t.ul_mb_idx = i;
   80666:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   8066a:	607b      	str	r3, [r7, #4]
		dd_can_mailbox_conf(&mb_config_t);
   8066c:	1d3b      	adds	r3, r7, #4
   8066e:	4618      	mov	r0, r3
   80670:	4b37      	ldr	r3, [pc, #220]	; (80750 <SENSOR_DD_INIT_CAN+0x160>)
   80672:	4798      	blx	r3
	
	//RESET ALL MAIL BOX 	
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */	
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   80674:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80678:	3301      	adds	r3, #1
   8067a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   8067e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80682:	2b07      	cmp	r3, #7
   80684:	d9ef      	bls.n	80666 <SENSOR_DD_INIT_CAN+0x76>
		mb_config_t.ul_mb_idx = i;
		dd_can_mailbox_conf(&mb_config_t);
	}
	// ALL MAIL BOX HAS BEEN RESET		
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
   80686:	4a30      	ldr	r2, [pc, #192]	; (80748 <SENSOR_DD_INIT_CAN+0x158>)
   80688:	4b2f      	ldr	r3, [pc, #188]	; (80748 <SENSOR_DD_INIT_CAN+0x158>)
   8068a:	681b      	ldr	r3, [r3, #0]
   8068c:	f043 0301 	orr.w	r3, r3, #1
   80690:	6013      	str	r3, [r2, #0]
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   80692:	2300      	movs	r3, #0
   80694:	637b      	str	r3, [r7, #52]	; 0x34
	ul_tick = 0;
   80696:	2300      	movs	r3, #0
   80698:	633b      	str	r3, [r7, #48]	; 0x30
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   8069a:	e005      	b.n	806a8 <SENSOR_DD_INIT_CAN+0xb8>
		ul_flag = (CAN0->CAN_SR);		
   8069c:	4b2a      	ldr	r3, [pc, #168]	; (80748 <SENSOR_DD_INIT_CAN+0x158>)
   8069e:	691b      	ldr	r3, [r3, #16]
   806a0:	637b      	str	r3, [r7, #52]	; 0x34
		ul_tick++;
   806a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   806a4:	3301      	adds	r3, #1
   806a6:	633b      	str	r3, [r7, #48]	; 0x30
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   806a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   806aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   806ae:	2b00      	cmp	r3, #0
   806b0:	d103      	bne.n	806ba <SENSOR_DD_INIT_CAN+0xca>
   806b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   806b4:	4a27      	ldr	r2, [pc, #156]	; (80754 <SENSOR_DD_INIT_CAN+0x164>)
   806b6:	4293      	cmp	r3, r2
   806b8:	d9f0      	bls.n	8069c <SENSOR_DD_INIT_CAN+0xac>
		ul_flag = (CAN0->CAN_SR);		
		ul_tick++;
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) { puts("CAN initialization (sync) ERROR" STRING_EOL);	} 
   806ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   806bc:	4a26      	ldr	r2, [pc, #152]	; (80758 <SENSOR_DD_INIT_CAN+0x168>)
   806be:	4293      	cmp	r3, r2
   806c0:	d103      	bne.n	806ca <SENSOR_DD_INIT_CAN+0xda>
   806c2:	4826      	ldr	r0, [pc, #152]	; (8075c <SENSOR_DD_INIT_CAN+0x16c>)
   806c4:	4b26      	ldr	r3, [pc, #152]	; (80760 <SENSOR_DD_INIT_CAN+0x170>)
   806c6:	4798      	blx	r3
   806c8:	e002      	b.n	806d0 <SENSOR_DD_INIT_CAN+0xe0>
	else {	puts("CAN initialization is completed." STRING_EOL);
   806ca:	4826      	ldr	r0, [pc, #152]	; (80764 <SENSOR_DD_INIT_CAN+0x174>)
   806cc:	4b24      	ldr	r3, [pc, #144]	; (80760 <SENSOR_DD_INIT_CAN+0x170>)
   806ce:	4798      	blx	r3
	}	
	//NVIC-> ISER reset_mailbox_conf(&can0_mailbox);
	can0_mailbox.ul_mb_idx =   MAILBOX_1;
   806d0:	4b25      	ldr	r3, [pc, #148]	; (80768 <SENSOR_DD_INIT_CAN+0x178>)
   806d2:	2201      	movs	r2, #1
   806d4:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE ;
   806d6:	4b24      	ldr	r3, [pc, #144]	; (80768 <SENSOR_DD_INIT_CAN+0x178>)
   806d8:	2201      	movs	r2, #1
   806da:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 0;
   806dc:	4b22      	ldr	r3, [pc, #136]	; (80768 <SENSOR_DD_INIT_CAN+0x178>)
   806de:	2200      	movs	r2, #0
   806e0:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   806e2:	4b21      	ldr	r3, [pc, #132]	; (80768 <SENSOR_DD_INIT_CAN+0x178>)
   806e4:	2200      	movs	r2, #0
   806e6:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =  CAN_MFID_MFID_VA_dd(CAN_MASK);
   806e8:	4b1f      	ldr	r3, [pc, #124]	; (80768 <SENSOR_DD_INIT_CAN+0x178>)
   806ea:	4a20      	ldr	r2, [pc, #128]	; (8076c <SENSOR_DD_INIT_CAN+0x17c>)
   806ec:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(SENSOR_CPU_id) ;
   806ee:	4b1e      	ldr	r3, [pc, #120]	; (80768 <SENSOR_DD_INIT_CAN+0x178>)
   806f0:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
   806f4:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);
   806f6:	481c      	ldr	r0, [pc, #112]	; (80768 <SENSOR_DD_INIT_CAN+0x178>)
   806f8:	4b15      	ldr	r3, [pc, #84]	; (80750 <SENSOR_DD_INIT_CAN+0x160>)
   806fa:	4798      	blx	r3
	NVIC_EnableIRQ(CAN0_IRQn);
   806fc:	202b      	movs	r0, #43	; 0x2b
   806fe:	4b1c      	ldr	r3, [pc, #112]	; (80770 <SENSOR_DD_INIT_CAN+0x180>)
   80700:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   80702:	4b11      	ldr	r3, [pc, #68]	; (80748 <SENSOR_DD_INIT_CAN+0x158>)
   80704:	2202      	movs	r2, #2
   80706:	605a      	str	r2, [r3, #4]
	
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   80708:	4b17      	ldr	r3, [pc, #92]	; (80768 <SENSOR_DD_INIT_CAN+0x178>)
   8070a:	2200      	movs	r2, #0
   8070c:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   8070e:	4b16      	ldr	r3, [pc, #88]	; (80768 <SENSOR_DD_INIT_CAN+0x178>)
   80710:	2203      	movs	r2, #3
   80712:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   80714:	4b14      	ldr	r3, [pc, #80]	; (80768 <SENSOR_DD_INIT_CAN+0x178>)
   80716:	2201      	movs	r2, #1
   80718:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8071a:	4b13      	ldr	r3, [pc, #76]	; (80768 <SENSOR_DD_INIT_CAN+0x178>)
   8071c:	2200      	movs	r2, #0
   8071e:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =CAN_MFID_MFID_VA_dd(CAN_MASK) ;
   80720:	4b11      	ldr	r3, [pc, #68]	; (80768 <SENSOR_DD_INIT_CAN+0x178>)
   80722:	4a12      	ldr	r2, [pc, #72]	; (8076c <SENSOR_DD_INIT_CAN+0x17c>)
   80724:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id);
   80726:	4b10      	ldr	r3, [pc, #64]	; (80768 <SENSOR_DD_INIT_CAN+0x178>)
   80728:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   8072c:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   8072e:	480e      	ldr	r0, [pc, #56]	; (80768 <SENSOR_DD_INIT_CAN+0x178>)
   80730:	4b07      	ldr	r3, [pc, #28]	; (80750 <SENSOR_DD_INIT_CAN+0x160>)
   80732:	4798      	blx	r3
	
	dd_CLEAR_OUTPUT_DATA(PIOA, CAN_STB_PIN);
   80734:	2102      	movs	r1, #2
   80736:	480f      	ldr	r0, [pc, #60]	; (80774 <SENSOR_DD_INIT_CAN+0x184>)
   80738:	4b0f      	ldr	r3, [pc, #60]	; (80778 <SENSOR_DD_INIT_CAN+0x188>)
   8073a:	4798      	blx	r3
	
}
   8073c:	bf00      	nop
   8073e:	3738      	adds	r7, #56	; 0x38
   80740:	46bd      	mov	sp, r7
   80742:	bd80      	pop	{r7, pc}
   80744:	0008689c 	.word	0x0008689c
   80748:	400b4000 	.word	0x400b4000
   8074c:	43414e00 	.word	0x43414e00
   80750:	00080501 	.word	0x00080501
   80754:	0001869f 	.word	0x0001869f
   80758:	000186a0 	.word	0x000186a0
   8075c:	000868e4 	.word	0x000868e4
   80760:	00084e21 	.word	0x00084e21
   80764:	00086908 	.word	0x00086908
   80768:	20070ab8 	.word	0x20070ab8
   8076c:	1ffc0000 	.word	0x1ffc0000
   80770:	000801a5 	.word	0x000801a5
   80774:	400e0e00 	.word	0x400e0e00
   80778:	00081179 	.word	0x00081179

0008077c <SENSOR_D_INIT_CLOCK>:
   8077c:	b580      	push	{r7, lr}
   8077e:	af00      	add	r7, sp, #0
   80780:	4b14      	ldr	r3, [pc, #80]	; (807d4 <SENSOR_D_INIT_CLOCK+0x58>)
   80782:	4798      	blx	r3
   80784:	4b14      	ldr	r3, [pc, #80]	; (807d8 <SENSOR_D_INIT_CLOCK+0x5c>)
   80786:	4a15      	ldr	r2, [pc, #84]	; (807dc <SENSOR_D_INIT_CLOCK+0x60>)
   80788:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   8078c:	200b      	movs	r0, #11
   8078e:	4b14      	ldr	r3, [pc, #80]	; (807e0 <SENSOR_D_INIT_CLOCK+0x64>)
   80790:	4798      	blx	r3
   80792:	200c      	movs	r0, #12
   80794:	4b12      	ldr	r3, [pc, #72]	; (807e0 <SENSOR_D_INIT_CLOCK+0x64>)
   80796:	4798      	blx	r3
   80798:	200d      	movs	r0, #13
   8079a:	4b11      	ldr	r3, [pc, #68]	; (807e0 <SENSOR_D_INIT_CLOCK+0x64>)
   8079c:	4798      	blx	r3
   8079e:	200e      	movs	r0, #14
   807a0:	4b0f      	ldr	r3, [pc, #60]	; (807e0 <SENSOR_D_INIT_CLOCK+0x64>)
   807a2:	4798      	blx	r3
   807a4:	2018      	movs	r0, #24
   807a6:	4b0e      	ldr	r3, [pc, #56]	; (807e0 <SENSOR_D_INIT_CLOCK+0x64>)
   807a8:	4798      	blx	r3
   807aa:	202b      	movs	r0, #43	; 0x2b
   807ac:	4b0c      	ldr	r3, [pc, #48]	; (807e0 <SENSOR_D_INIT_CLOCK+0x64>)
   807ae:	4798      	blx	r3
   807b0:	2005      	movs	r0, #5
   807b2:	4b0b      	ldr	r3, [pc, #44]	; (807e0 <SENSOR_D_INIT_CLOCK+0x64>)
   807b4:	4798      	blx	r3
   807b6:	2008      	movs	r0, #8
   807b8:	4b09      	ldr	r3, [pc, #36]	; (807e0 <SENSOR_D_INIT_CLOCK+0x64>)
   807ba:	4798      	blx	r3
   807bc:	201b      	movs	r0, #27
   807be:	4b08      	ldr	r3, [pc, #32]	; (807e0 <SENSOR_D_INIT_CLOCK+0x64>)
   807c0:	4798      	blx	r3
   807c2:	2021      	movs	r0, #33	; 0x21
   807c4:	4b06      	ldr	r3, [pc, #24]	; (807e0 <SENSOR_D_INIT_CLOCK+0x64>)
   807c6:	4798      	blx	r3
   807c8:	4b03      	ldr	r3, [pc, #12]	; (807d8 <SENSOR_D_INIT_CLOCK+0x5c>)
   807ca:	4a06      	ldr	r2, [pc, #24]	; (807e4 <SENSOR_D_INIT_CLOCK+0x68>)
   807cc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   807d0:	bf00      	nop
   807d2:	bd80      	pop	{r7, pc}
   807d4:	00084079 	.word	0x00084079
   807d8:	400e0600 	.word	0x400e0600
   807dc:	504d4300 	.word	0x504d4300
   807e0:	000807e9 	.word	0x000807e9
   807e4:	504d4301 	.word	0x504d4301

000807e8 <dd_pmc_enable_periph_clk>:
   807e8:	b480      	push	{r7}
   807ea:	b083      	sub	sp, #12
   807ec:	af00      	add	r7, sp, #0
   807ee:	6078      	str	r0, [r7, #4]
   807f0:	687b      	ldr	r3, [r7, #4]
   807f2:	2b2c      	cmp	r3, #44	; 0x2c
   807f4:	d901      	bls.n	807fa <dd_pmc_enable_periph_clk+0x12>
   807f6:	2301      	movs	r3, #1
   807f8:	e02f      	b.n	8085a <dd_pmc_enable_periph_clk+0x72>
   807fa:	687b      	ldr	r3, [r7, #4]
   807fc:	2b1f      	cmp	r3, #31
   807fe:	d813      	bhi.n	80828 <dd_pmc_enable_periph_clk+0x40>
   80800:	4b18      	ldr	r3, [pc, #96]	; (80864 <dd_pmc_enable_periph_clk+0x7c>)
   80802:	699a      	ldr	r2, [r3, #24]
   80804:	2101      	movs	r1, #1
   80806:	687b      	ldr	r3, [r7, #4]
   80808:	fa01 f303 	lsl.w	r3, r1, r3
   8080c:	401a      	ands	r2, r3
   8080e:	2101      	movs	r1, #1
   80810:	687b      	ldr	r3, [r7, #4]
   80812:	fa01 f303 	lsl.w	r3, r1, r3
   80816:	429a      	cmp	r2, r3
   80818:	d01e      	beq.n	80858 <dd_pmc_enable_periph_clk+0x70>
   8081a:	4a12      	ldr	r2, [pc, #72]	; (80864 <dd_pmc_enable_periph_clk+0x7c>)
   8081c:	2101      	movs	r1, #1
   8081e:	687b      	ldr	r3, [r7, #4]
   80820:	fa01 f303 	lsl.w	r3, r1, r3
   80824:	6113      	str	r3, [r2, #16]
   80826:	e017      	b.n	80858 <dd_pmc_enable_periph_clk+0x70>
   80828:	687b      	ldr	r3, [r7, #4]
   8082a:	3b20      	subs	r3, #32
   8082c:	607b      	str	r3, [r7, #4]
   8082e:	4b0d      	ldr	r3, [pc, #52]	; (80864 <dd_pmc_enable_periph_clk+0x7c>)
   80830:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80834:	2101      	movs	r1, #1
   80836:	687b      	ldr	r3, [r7, #4]
   80838:	fa01 f303 	lsl.w	r3, r1, r3
   8083c:	401a      	ands	r2, r3
   8083e:	2101      	movs	r1, #1
   80840:	687b      	ldr	r3, [r7, #4]
   80842:	fa01 f303 	lsl.w	r3, r1, r3
   80846:	429a      	cmp	r2, r3
   80848:	d006      	beq.n	80858 <dd_pmc_enable_periph_clk+0x70>
   8084a:	4a06      	ldr	r2, [pc, #24]	; (80864 <dd_pmc_enable_periph_clk+0x7c>)
   8084c:	2101      	movs	r1, #1
   8084e:	687b      	ldr	r3, [r7, #4]
   80850:	fa01 f303 	lsl.w	r3, r1, r3
   80854:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
   80858:	2300      	movs	r3, #0
   8085a:	4618      	mov	r0, r3
   8085c:	370c      	adds	r7, #12
   8085e:	46bd      	mov	sp, r7
   80860:	bc80      	pop	{r7}
   80862:	4770      	bx	lr
   80864:	400e0600 	.word	0x400e0600

00080868 <DD_CS1_TS_INIT>:
 */ 
 #include "DD_CS1_TS.h"
 extern uint8_t command_data_array[20];
 
 
 void DD_CS1_TS_INIT() {
   80868:	b580      	push	{r7, lr}
   8086a:	b082      	sub	sp, #8
   8086c:	af00      	add	r7, sp, #0
	 dd_spi_set_clock_polarity(0, SPI_CLK_POLARITY_1);
   8086e:	2101      	movs	r1, #1
   80870:	2000      	movs	r0, #0
   80872:	4b13      	ldr	r3, [pc, #76]	; (808c0 <DD_CS1_TS_INIT+0x58>)
   80874:	4798      	blx	r3
	 dd_spi_set_clock_phase(0, SPI_CLK_PHASE_0);
   80876:	2100      	movs	r1, #0
   80878:	2000      	movs	r0, #0
   8087a:	4b12      	ldr	r3, [pc, #72]	; (808c4 <DD_CS1_TS_INIT+0x5c>)
   8087c:	4798      	blx	r3
	 
	 command_data_array[0] = MAX31865_WRITE_CONFIGURATION; //0b00000110;
   8087e:	4b12      	ldr	r3, [pc, #72]	; (808c8 <DD_CS1_TS_INIT+0x60>)
   80880:	2280      	movs	r2, #128	; 0x80
   80882:	701a      	strb	r2, [r3, #0]
	 command_data_array[1] = MAXIM31865_CONFIGURATION_VBIAS | MAXIM31865_CONFIGURATION_AUTO_CONVERTION | MAXIM31865_CONFIGURATION_FAULT_STATUS_CLEAR | MAXIM31865_CONFIGURATION_50HZ_FILTER ;
   80884:	4b10      	ldr	r3, [pc, #64]	; (808c8 <DD_CS1_TS_INIT+0x60>)
   80886:	22c3      	movs	r2, #195	; 0xc3
   80888:	705a      	strb	r2, [r3, #1]
	 
	 DD_SPI_PCS_DECODER_ACTIVE();
   8088a:	4b10      	ldr	r3, [pc, #64]	; (808cc <DD_CS1_TS_INIT+0x64>)
   8088c:	4798      	blx	r3
	 DD_CS1_TS_CHIP_SELECT();
   8088e:	4b10      	ldr	r3, [pc, #64]	; (808d0 <DD_CS1_TS_INIT+0x68>)
   80890:	4798      	blx	r3
	 dd_spi_set_peripheral_chip_select_value(ISOLTR_1_CS_ID); //(ISOLTR_1_CS_ID);
   80892:	2001      	movs	r0, #1
   80894:	4b0f      	ldr	r3, [pc, #60]	; (808d4 <DD_CS1_TS_INIT+0x6c>)
   80896:	4798      	blx	r3
	 dd_spi_master_transfer(&command_data_array, 2,0 ); //ISOLTR_1_CS_ID
   80898:	2200      	movs	r2, #0
   8089a:	2102      	movs	r1, #2
   8089c:	480a      	ldr	r0, [pc, #40]	; (808c8 <DD_CS1_TS_INIT+0x60>)
   8089e:	4b0e      	ldr	r3, [pc, #56]	; (808d8 <DD_CS1_TS_INIT+0x70>)
   808a0:	4798      	blx	r3
	 
	 for(unsigned int count=0; count<1000; count++ )   {
   808a2:	2300      	movs	r3, #0
   808a4:	607b      	str	r3, [r7, #4]
   808a6:	e002      	b.n	808ae <DD_CS1_TS_INIT+0x46>
   808a8:	687b      	ldr	r3, [r7, #4]
   808aa:	3301      	adds	r3, #1
   808ac:	607b      	str	r3, [r7, #4]
   808ae:	687b      	ldr	r3, [r7, #4]
   808b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   808b4:	d3f8      	bcc.n	808a8 <DD_CS1_TS_INIT+0x40>
		 ;
	 }
   808b6:	bf00      	nop
   808b8:	3708      	adds	r7, #8
   808ba:	46bd      	mov	sp, r7
   808bc:	bd80      	pop	{r7, pc}
   808be:	bf00      	nop
   808c0:	00081605 	.word	0x00081605
   808c4:	00081659 	.word	0x00081659
   808c8:	20070ae8 	.word	0x20070ae8
   808cc:	00081ba9 	.word	0x00081ba9
   808d0:	00081ab5 	.word	0x00081ab5
   808d4:	0008170d 	.word	0x0008170d
   808d8:	00081745 	.word	0x00081745

000808dc <DD_CS2_TS_INIT>:
 */ 
 #include "DD_CS2_TS.h"
 extern uint8_t command_data_array[20];
 
 
 void DD_CS2_TS_INIT() {
   808dc:	b580      	push	{r7, lr}
   808de:	b082      	sub	sp, #8
   808e0:	af00      	add	r7, sp, #0
	 dd_spi_set_clock_polarity(0, SPI_CLK_POLARITY_1);
   808e2:	2101      	movs	r1, #1
   808e4:	2000      	movs	r0, #0
   808e6:	4b13      	ldr	r3, [pc, #76]	; (80934 <DD_CS2_TS_INIT+0x58>)
   808e8:	4798      	blx	r3
	 dd_spi_set_clock_phase(0, SPI_CLK_PHASE_0);
   808ea:	2100      	movs	r1, #0
   808ec:	2000      	movs	r0, #0
   808ee:	4b12      	ldr	r3, [pc, #72]	; (80938 <DD_CS2_TS_INIT+0x5c>)
   808f0:	4798      	blx	r3
	 
	 command_data_array[0] = MAX31865_WRITE_CONFIGURATION; //0b00000110;
   808f2:	4b12      	ldr	r3, [pc, #72]	; (8093c <DD_CS2_TS_INIT+0x60>)
   808f4:	2280      	movs	r2, #128	; 0x80
   808f6:	701a      	strb	r2, [r3, #0]
	 command_data_array[1] = MAXIM31865_CONFIGURATION_VBIAS | MAXIM31865_CONFIGURATION_AUTO_CONVERTION | MAXIM31865_CONFIGURATION_FAULT_STATUS_CLEAR | MAXIM31865_CONFIGURATION_50HZ_FILTER ;
   808f8:	4b10      	ldr	r3, [pc, #64]	; (8093c <DD_CS2_TS_INIT+0x60>)
   808fa:	22c3      	movs	r2, #195	; 0xc3
   808fc:	705a      	strb	r2, [r3, #1]
	 
	 DD_SPI_PCS_DECODER_ACTIVE();
   808fe:	4b10      	ldr	r3, [pc, #64]	; (80940 <DD_CS2_TS_INIT+0x64>)
   80900:	4798      	blx	r3
	 DD_CS2_TS_CHIP_SELECT();
   80902:	4b10      	ldr	r3, [pc, #64]	; (80944 <DD_CS2_TS_INIT+0x68>)
   80904:	4798      	blx	r3
	 dd_spi_set_peripheral_chip_select_value(ISOLTR_1_CS_ID); //(ISOLTR_1_CS_ID);
   80906:	2001      	movs	r0, #1
   80908:	4b0f      	ldr	r3, [pc, #60]	; (80948 <DD_CS2_TS_INIT+0x6c>)
   8090a:	4798      	blx	r3
	 dd_spi_master_transfer(&command_data_array, 2,0 ); //ISOLTR_1_CS_ID
   8090c:	2200      	movs	r2, #0
   8090e:	2102      	movs	r1, #2
   80910:	480a      	ldr	r0, [pc, #40]	; (8093c <DD_CS2_TS_INIT+0x60>)
   80912:	4b0e      	ldr	r3, [pc, #56]	; (8094c <DD_CS2_TS_INIT+0x70>)
   80914:	4798      	blx	r3
	 
	 for(unsigned int count=0; count<1000; count++ )   {
   80916:	2300      	movs	r3, #0
   80918:	607b      	str	r3, [r7, #4]
   8091a:	e002      	b.n	80922 <DD_CS2_TS_INIT+0x46>
   8091c:	687b      	ldr	r3, [r7, #4]
   8091e:	3301      	adds	r3, #1
   80920:	607b      	str	r3, [r7, #4]
   80922:	687b      	ldr	r3, [r7, #4]
   80924:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   80928:	d3f8      	bcc.n	8091c <DD_CS2_TS_INIT+0x40>
		 ;
	 }
   8092a:	bf00      	nop
   8092c:	3708      	adds	r7, #8
   8092e:	46bd      	mov	sp, r7
   80930:	bd80      	pop	{r7, pc}
   80932:	bf00      	nop
   80934:	00081605 	.word	0x00081605
   80938:	00081659 	.word	0x00081659
   8093c:	20070ae8 	.word	0x20070ae8
   80940:	00081ba9 	.word	0x00081ba9
   80944:	00081ad1 	.word	0x00081ad1
   80948:	0008170d 	.word	0x0008170d
   8094c:	00081745 	.word	0x00081745

00080950 <DD_CS3_TS_INIT>:

 #include "DD_CS3_TS.h"
 extern uint8_t command_data_array[20];
 
 
 void DD_CS3_TS_INIT() {
   80950:	b580      	push	{r7, lr}
   80952:	b082      	sub	sp, #8
   80954:	af00      	add	r7, sp, #0
	 dd_spi_set_clock_polarity(1, SPI_CLK_POLARITY_1);
   80956:	2101      	movs	r1, #1
   80958:	2001      	movs	r0, #1
   8095a:	4b13      	ldr	r3, [pc, #76]	; (809a8 <DD_CS3_TS_INIT+0x58>)
   8095c:	4798      	blx	r3
	 dd_spi_set_clock_phase(1, SPI_CLK_PHASE_0);
   8095e:	2100      	movs	r1, #0
   80960:	2001      	movs	r0, #1
   80962:	4b12      	ldr	r3, [pc, #72]	; (809ac <DD_CS3_TS_INIT+0x5c>)
   80964:	4798      	blx	r3
	 
	 command_data_array[0] = MAX31865_WRITE_CONFIGURATION; //0b00000110;
   80966:	4b12      	ldr	r3, [pc, #72]	; (809b0 <DD_CS3_TS_INIT+0x60>)
   80968:	2280      	movs	r2, #128	; 0x80
   8096a:	701a      	strb	r2, [r3, #0]
	 command_data_array[1] = MAXIM31865_CONFIGURATION_VBIAS | MAXIM31865_CONFIGURATION_AUTO_CONVERTION | MAXIM31865_CONFIGURATION_FAULT_STATUS_CLEAR | MAXIM31865_CONFIGURATION_50HZ_FILTER ;
   8096c:	4b10      	ldr	r3, [pc, #64]	; (809b0 <DD_CS3_TS_INIT+0x60>)
   8096e:	22c3      	movs	r2, #195	; 0xc3
   80970:	705a      	strb	r2, [r3, #1]
	 
	 DD_SPI_PCS_DECODER_ACTIVE();
   80972:	4b10      	ldr	r3, [pc, #64]	; (809b4 <DD_CS3_TS_INIT+0x64>)
   80974:	4798      	blx	r3
	 DD_CS3_TS_CHIP_SELECT();
   80976:	4b10      	ldr	r3, [pc, #64]	; (809b8 <DD_CS3_TS_INIT+0x68>)
   80978:	4798      	blx	r3
	 dd_spi_set_peripheral_chip_select_value(ISOLTR_2_CS_ID); //(ISOLTR_1_CS_ID);
   8097a:	2002      	movs	r0, #2
   8097c:	4b0f      	ldr	r3, [pc, #60]	; (809bc <DD_CS3_TS_INIT+0x6c>)
   8097e:	4798      	blx	r3
	 dd_spi_master_transfer(&command_data_array, 2,0 ); //ISOLTR_1_CS_ID
   80980:	2200      	movs	r2, #0
   80982:	2102      	movs	r1, #2
   80984:	480a      	ldr	r0, [pc, #40]	; (809b0 <DD_CS3_TS_INIT+0x60>)
   80986:	4b0e      	ldr	r3, [pc, #56]	; (809c0 <DD_CS3_TS_INIT+0x70>)
   80988:	4798      	blx	r3
	 
	 for(unsigned int count=0; count<1000; count++ )   {
   8098a:	2300      	movs	r3, #0
   8098c:	607b      	str	r3, [r7, #4]
   8098e:	e002      	b.n	80996 <DD_CS3_TS_INIT+0x46>
   80990:	687b      	ldr	r3, [r7, #4]
   80992:	3301      	adds	r3, #1
   80994:	607b      	str	r3, [r7, #4]
   80996:	687b      	ldr	r3, [r7, #4]
   80998:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8099c:	d3f8      	bcc.n	80990 <DD_CS3_TS_INIT+0x40>
		 ;
	 }
   8099e:	bf00      	nop
   809a0:	3708      	adds	r7, #8
   809a2:	46bd      	mov	sp, r7
   809a4:	bd80      	pop	{r7, pc}
   809a6:	bf00      	nop
   809a8:	00081605 	.word	0x00081605
   809ac:	00081659 	.word	0x00081659
   809b0:	20070ae8 	.word	0x20070ae8
   809b4:	00081ba9 	.word	0x00081ba9
   809b8:	00081ae9 	.word	0x00081ae9
   809bc:	0008170d 	.word	0x0008170d
   809c0:	00081745 	.word	0x00081745

000809c4 <SENSOR_D_INIT_PIO>:
   809c4:	b580      	push	{r7, lr}
   809c6:	af00      	add	r7, sp, #0
   809c8:	4b11      	ldr	r3, [pc, #68]	; (80a10 <SENSOR_D_INIT_PIO+0x4c>)
   809ca:	4a12      	ldr	r2, [pc, #72]	; (80a14 <SENSOR_D_INIT_PIO+0x50>)
   809cc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   809d0:	4b11      	ldr	r3, [pc, #68]	; (80a18 <SENSOR_D_INIT_PIO+0x54>)
   809d2:	4a10      	ldr	r2, [pc, #64]	; (80a14 <SENSOR_D_INIT_PIO+0x50>)
   809d4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   809d8:	4b10      	ldr	r3, [pc, #64]	; (80a1c <SENSOR_D_INIT_PIO+0x58>)
   809da:	4a0e      	ldr	r2, [pc, #56]	; (80a14 <SENSOR_D_INIT_PIO+0x50>)
   809dc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   809e0:	4b0f      	ldr	r3, [pc, #60]	; (80a20 <SENSOR_D_INIT_PIO+0x5c>)
   809e2:	4a0c      	ldr	r2, [pc, #48]	; (80a14 <SENSOR_D_INIT_PIO+0x50>)
   809e4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   809e8:	4b0e      	ldr	r3, [pc, #56]	; (80a24 <SENSOR_D_INIT_PIO+0x60>)
   809ea:	4798      	blx	r3
   809ec:	4b0e      	ldr	r3, [pc, #56]	; (80a28 <SENSOR_D_INIT_PIO+0x64>)
   809ee:	4798      	blx	r3
   809f0:	4b0e      	ldr	r3, [pc, #56]	; (80a2c <SENSOR_D_INIT_PIO+0x68>)
   809f2:	4798      	blx	r3
   809f4:	4b0e      	ldr	r3, [pc, #56]	; (80a30 <SENSOR_D_INIT_PIO+0x6c>)
   809f6:	4798      	blx	r3
   809f8:	4b0e      	ldr	r3, [pc, #56]	; (80a34 <SENSOR_D_INIT_PIO+0x70>)
   809fa:	4798      	blx	r3
   809fc:	4b04      	ldr	r3, [pc, #16]	; (80a10 <SENSOR_D_INIT_PIO+0x4c>)
   809fe:	2200      	movs	r2, #0
   80a00:	671a      	str	r2, [r3, #112]	; 0x70
   80a02:	4b05      	ldr	r3, [pc, #20]	; (80a18 <SENSOR_D_INIT_PIO+0x54>)
   80a04:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   80a08:	671a      	str	r2, [r3, #112]	; 0x70
   80a0a:	bf00      	nop
   80a0c:	bd80      	pop	{r7, pc}
   80a0e:	bf00      	nop
   80a10:	400e0e00 	.word	0x400e0e00
   80a14:	50494f00 	.word	0x50494f00
   80a18:	400e1000 	.word	0x400e1000
   80a1c:	400e1200 	.word	0x400e1200
   80a20:	400e1400 	.word	0x400e1400
   80a24:	00080c95 	.word	0x00080c95
   80a28:	00080f6d 	.word	0x00080f6d
   80a2c:	00081015 	.word	0x00081015
   80a30:	00080b5d 	.word	0x00080b5d
   80a34:	00080a39 	.word	0x00080a39

00080a38 <dd_PRESSURE_SENSOR_GPIO_PINS>:
   80a38:	b580      	push	{r7, lr}
   80a3a:	af00      	add	r7, sp, #0
   80a3c:	2108      	movs	r1, #8
   80a3e:	483c      	ldr	r0, [pc, #240]	; (80b30 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a40:	4b3c      	ldr	r3, [pc, #240]	; (80b34 <dd_PRESSURE_SENSOR_GPIO_PINS+0xfc>)
   80a42:	4798      	blx	r3
   80a44:	2108      	movs	r1, #8
   80a46:	483a      	ldr	r0, [pc, #232]	; (80b30 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a48:	4b3b      	ldr	r3, [pc, #236]	; (80b38 <dd_PRESSURE_SENSOR_GPIO_PINS+0x100>)
   80a4a:	4798      	blx	r3
   80a4c:	2108      	movs	r1, #8
   80a4e:	4838      	ldr	r0, [pc, #224]	; (80b30 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a50:	4b3a      	ldr	r3, [pc, #232]	; (80b3c <dd_PRESSURE_SENSOR_GPIO_PINS+0x104>)
   80a52:	4798      	blx	r3
   80a54:	2108      	movs	r1, #8
   80a56:	4836      	ldr	r0, [pc, #216]	; (80b30 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a58:	4b39      	ldr	r3, [pc, #228]	; (80b40 <dd_PRESSURE_SENSOR_GPIO_PINS+0x108>)
   80a5a:	4798      	blx	r3
   80a5c:	2108      	movs	r1, #8
   80a5e:	4834      	ldr	r0, [pc, #208]	; (80b30 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a60:	4b38      	ldr	r3, [pc, #224]	; (80b44 <dd_PRESSURE_SENSOR_GPIO_PINS+0x10c>)
   80a62:	4798      	blx	r3
   80a64:	2107      	movs	r1, #7
   80a66:	4832      	ldr	r0, [pc, #200]	; (80b30 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a68:	4b32      	ldr	r3, [pc, #200]	; (80b34 <dd_PRESSURE_SENSOR_GPIO_PINS+0xfc>)
   80a6a:	4798      	blx	r3
   80a6c:	2107      	movs	r1, #7
   80a6e:	4830      	ldr	r0, [pc, #192]	; (80b30 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a70:	4b31      	ldr	r3, [pc, #196]	; (80b38 <dd_PRESSURE_SENSOR_GPIO_PINS+0x100>)
   80a72:	4798      	blx	r3
   80a74:	2107      	movs	r1, #7
   80a76:	482e      	ldr	r0, [pc, #184]	; (80b30 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a78:	4b30      	ldr	r3, [pc, #192]	; (80b3c <dd_PRESSURE_SENSOR_GPIO_PINS+0x104>)
   80a7a:	4798      	blx	r3
   80a7c:	2107      	movs	r1, #7
   80a7e:	482c      	ldr	r0, [pc, #176]	; (80b30 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a80:	4b2f      	ldr	r3, [pc, #188]	; (80b40 <dd_PRESSURE_SENSOR_GPIO_PINS+0x108>)
   80a82:	4798      	blx	r3
   80a84:	2107      	movs	r1, #7
   80a86:	482a      	ldr	r0, [pc, #168]	; (80b30 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a88:	4b2e      	ldr	r3, [pc, #184]	; (80b44 <dd_PRESSURE_SENSOR_GPIO_PINS+0x10c>)
   80a8a:	4798      	blx	r3
   80a8c:	2106      	movs	r1, #6
   80a8e:	4828      	ldr	r0, [pc, #160]	; (80b30 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a90:	4b28      	ldr	r3, [pc, #160]	; (80b34 <dd_PRESSURE_SENSOR_GPIO_PINS+0xfc>)
   80a92:	4798      	blx	r3
   80a94:	2106      	movs	r1, #6
   80a96:	4826      	ldr	r0, [pc, #152]	; (80b30 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a98:	4b27      	ldr	r3, [pc, #156]	; (80b38 <dd_PRESSURE_SENSOR_GPIO_PINS+0x100>)
   80a9a:	4798      	blx	r3
   80a9c:	2106      	movs	r1, #6
   80a9e:	4824      	ldr	r0, [pc, #144]	; (80b30 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80aa0:	4b26      	ldr	r3, [pc, #152]	; (80b3c <dd_PRESSURE_SENSOR_GPIO_PINS+0x104>)
   80aa2:	4798      	blx	r3
   80aa4:	2106      	movs	r1, #6
   80aa6:	4822      	ldr	r0, [pc, #136]	; (80b30 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80aa8:	4b25      	ldr	r3, [pc, #148]	; (80b40 <dd_PRESSURE_SENSOR_GPIO_PINS+0x108>)
   80aaa:	4798      	blx	r3
   80aac:	2106      	movs	r1, #6
   80aae:	4820      	ldr	r0, [pc, #128]	; (80b30 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80ab0:	4b24      	ldr	r3, [pc, #144]	; (80b44 <dd_PRESSURE_SENSOR_GPIO_PINS+0x10c>)
   80ab2:	4798      	blx	r3
   80ab4:	2102      	movs	r1, #2
   80ab6:	4824      	ldr	r0, [pc, #144]	; (80b48 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80ab8:	4b1e      	ldr	r3, [pc, #120]	; (80b34 <dd_PRESSURE_SENSOR_GPIO_PINS+0xfc>)
   80aba:	4798      	blx	r3
   80abc:	2102      	movs	r1, #2
   80abe:	4822      	ldr	r0, [pc, #136]	; (80b48 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80ac0:	4b22      	ldr	r3, [pc, #136]	; (80b4c <dd_PRESSURE_SENSOR_GPIO_PINS+0x114>)
   80ac2:	4798      	blx	r3
   80ac4:	2102      	movs	r1, #2
   80ac6:	4820      	ldr	r0, [pc, #128]	; (80b48 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80ac8:	4b21      	ldr	r3, [pc, #132]	; (80b50 <dd_PRESSURE_SENSOR_GPIO_PINS+0x118>)
   80aca:	4798      	blx	r3
   80acc:	2102      	movs	r1, #2
   80ace:	481e      	ldr	r0, [pc, #120]	; (80b48 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80ad0:	4b20      	ldr	r3, [pc, #128]	; (80b54 <dd_PRESSURE_SENSOR_GPIO_PINS+0x11c>)
   80ad2:	4798      	blx	r3
   80ad4:	2102      	movs	r1, #2
   80ad6:	481c      	ldr	r0, [pc, #112]	; (80b48 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80ad8:	4b1f      	ldr	r3, [pc, #124]	; (80b58 <dd_PRESSURE_SENSOR_GPIO_PINS+0x120>)
   80ada:	4798      	blx	r3
   80adc:	2101      	movs	r1, #1
   80ade:	481a      	ldr	r0, [pc, #104]	; (80b48 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80ae0:	4b14      	ldr	r3, [pc, #80]	; (80b34 <dd_PRESSURE_SENSOR_GPIO_PINS+0xfc>)
   80ae2:	4798      	blx	r3
   80ae4:	2101      	movs	r1, #1
   80ae6:	4818      	ldr	r0, [pc, #96]	; (80b48 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80ae8:	4b18      	ldr	r3, [pc, #96]	; (80b4c <dd_PRESSURE_SENSOR_GPIO_PINS+0x114>)
   80aea:	4798      	blx	r3
   80aec:	2101      	movs	r1, #1
   80aee:	4816      	ldr	r0, [pc, #88]	; (80b48 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80af0:	4b17      	ldr	r3, [pc, #92]	; (80b50 <dd_PRESSURE_SENSOR_GPIO_PINS+0x118>)
   80af2:	4798      	blx	r3
   80af4:	2101      	movs	r1, #1
   80af6:	4814      	ldr	r0, [pc, #80]	; (80b48 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80af8:	4b16      	ldr	r3, [pc, #88]	; (80b54 <dd_PRESSURE_SENSOR_GPIO_PINS+0x11c>)
   80afa:	4798      	blx	r3
   80afc:	2101      	movs	r1, #1
   80afe:	4812      	ldr	r0, [pc, #72]	; (80b48 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80b00:	4b15      	ldr	r3, [pc, #84]	; (80b58 <dd_PRESSURE_SENSOR_GPIO_PINS+0x120>)
   80b02:	4798      	blx	r3
   80b04:	2100      	movs	r1, #0
   80b06:	4810      	ldr	r0, [pc, #64]	; (80b48 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80b08:	4b0a      	ldr	r3, [pc, #40]	; (80b34 <dd_PRESSURE_SENSOR_GPIO_PINS+0xfc>)
   80b0a:	4798      	blx	r3
   80b0c:	2100      	movs	r1, #0
   80b0e:	480e      	ldr	r0, [pc, #56]	; (80b48 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80b10:	4b0e      	ldr	r3, [pc, #56]	; (80b4c <dd_PRESSURE_SENSOR_GPIO_PINS+0x114>)
   80b12:	4798      	blx	r3
   80b14:	2100      	movs	r1, #0
   80b16:	480c      	ldr	r0, [pc, #48]	; (80b48 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80b18:	4b0d      	ldr	r3, [pc, #52]	; (80b50 <dd_PRESSURE_SENSOR_GPIO_PINS+0x118>)
   80b1a:	4798      	blx	r3
   80b1c:	2100      	movs	r1, #0
   80b1e:	480a      	ldr	r0, [pc, #40]	; (80b48 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80b20:	4b0c      	ldr	r3, [pc, #48]	; (80b54 <dd_PRESSURE_SENSOR_GPIO_PINS+0x11c>)
   80b22:	4798      	blx	r3
   80b24:	2100      	movs	r1, #0
   80b26:	4808      	ldr	r0, [pc, #32]	; (80b48 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80b28:	4b0b      	ldr	r3, [pc, #44]	; (80b58 <dd_PRESSURE_SENSOR_GPIO_PINS+0x120>)
   80b2a:	4798      	blx	r3
   80b2c:	bf00      	nop
   80b2e:	bd80      	pop	{r7, pc}
   80b30:	400e1200 	.word	0x400e1200
   80b34:	000810c5 	.word	0x000810c5
   80b38:	0008110d 	.word	0x0008110d
   80b3c:	0008119d 	.word	0x0008119d
   80b40:	00081155 	.word	0x00081155
   80b44:	000811e5 	.word	0x000811e5
   80b48:	400e1400 	.word	0x400e1400
   80b4c:	00081131 	.word	0x00081131
   80b50:	00081179 	.word	0x00081179
   80b54:	00081085 	.word	0x00081085
   80b58:	0008120d 	.word	0x0008120d

00080b5c <dd_TEMP_SENSOR_PINS_INIT>:
   80b5c:	b580      	push	{r7, lr}
   80b5e:	af00      	add	r7, sp, #0
   80b60:	210f      	movs	r1, #15
   80b62:	4846      	ldr	r0, [pc, #280]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b64:	4b46      	ldr	r3, [pc, #280]	; (80c80 <dd_TEMP_SENSOR_PINS_INIT+0x124>)
   80b66:	4798      	blx	r3
   80b68:	2110      	movs	r1, #16
   80b6a:	4844      	ldr	r0, [pc, #272]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b6c:	4b44      	ldr	r3, [pc, #272]	; (80c80 <dd_TEMP_SENSOR_PINS_INIT+0x124>)
   80b6e:	4798      	blx	r3
   80b70:	2114      	movs	r1, #20
   80b72:	4842      	ldr	r0, [pc, #264]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b74:	4b42      	ldr	r3, [pc, #264]	; (80c80 <dd_TEMP_SENSOR_PINS_INIT+0x124>)
   80b76:	4798      	blx	r3
   80b78:	2111      	movs	r1, #17
   80b7a:	4840      	ldr	r0, [pc, #256]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b7c:	4b40      	ldr	r3, [pc, #256]	; (80c80 <dd_TEMP_SENSOR_PINS_INIT+0x124>)
   80b7e:	4798      	blx	r3
   80b80:	2112      	movs	r1, #18
   80b82:	483e      	ldr	r0, [pc, #248]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b84:	4b3e      	ldr	r3, [pc, #248]	; (80c80 <dd_TEMP_SENSOR_PINS_INIT+0x124>)
   80b86:	4798      	blx	r3
   80b88:	2113      	movs	r1, #19
   80b8a:	483c      	ldr	r0, [pc, #240]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b8c:	4b3c      	ldr	r3, [pc, #240]	; (80c80 <dd_TEMP_SENSOR_PINS_INIT+0x124>)
   80b8e:	4798      	blx	r3
   80b90:	210e      	movs	r1, #14
   80b92:	483a      	ldr	r0, [pc, #232]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b94:	4b3a      	ldr	r3, [pc, #232]	; (80c80 <dd_TEMP_SENSOR_PINS_INIT+0x124>)
   80b96:	4798      	blx	r3
   80b98:	210f      	movs	r1, #15
   80b9a:	4838      	ldr	r0, [pc, #224]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b9c:	4b39      	ldr	r3, [pc, #228]	; (80c84 <dd_TEMP_SENSOR_PINS_INIT+0x128>)
   80b9e:	4798      	blx	r3
   80ba0:	2110      	movs	r1, #16
   80ba2:	4836      	ldr	r0, [pc, #216]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80ba4:	4b37      	ldr	r3, [pc, #220]	; (80c84 <dd_TEMP_SENSOR_PINS_INIT+0x128>)
   80ba6:	4798      	blx	r3
   80ba8:	2114      	movs	r1, #20
   80baa:	4834      	ldr	r0, [pc, #208]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bac:	4b35      	ldr	r3, [pc, #212]	; (80c84 <dd_TEMP_SENSOR_PINS_INIT+0x128>)
   80bae:	4798      	blx	r3
   80bb0:	2111      	movs	r1, #17
   80bb2:	4832      	ldr	r0, [pc, #200]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bb4:	4b33      	ldr	r3, [pc, #204]	; (80c84 <dd_TEMP_SENSOR_PINS_INIT+0x128>)
   80bb6:	4798      	blx	r3
   80bb8:	2112      	movs	r1, #18
   80bba:	4830      	ldr	r0, [pc, #192]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bbc:	4b31      	ldr	r3, [pc, #196]	; (80c84 <dd_TEMP_SENSOR_PINS_INIT+0x128>)
   80bbe:	4798      	blx	r3
   80bc0:	2113      	movs	r1, #19
   80bc2:	482e      	ldr	r0, [pc, #184]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bc4:	4b2f      	ldr	r3, [pc, #188]	; (80c84 <dd_TEMP_SENSOR_PINS_INIT+0x128>)
   80bc6:	4798      	blx	r3
   80bc8:	210e      	movs	r1, #14
   80bca:	482c      	ldr	r0, [pc, #176]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bcc:	4b2d      	ldr	r3, [pc, #180]	; (80c84 <dd_TEMP_SENSOR_PINS_INIT+0x128>)
   80bce:	4798      	blx	r3
   80bd0:	210f      	movs	r1, #15
   80bd2:	482a      	ldr	r0, [pc, #168]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bd4:	4b2c      	ldr	r3, [pc, #176]	; (80c88 <dd_TEMP_SENSOR_PINS_INIT+0x12c>)
   80bd6:	4798      	blx	r3
   80bd8:	2110      	movs	r1, #16
   80bda:	4828      	ldr	r0, [pc, #160]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bdc:	4b2a      	ldr	r3, [pc, #168]	; (80c88 <dd_TEMP_SENSOR_PINS_INIT+0x12c>)
   80bde:	4798      	blx	r3
   80be0:	2114      	movs	r1, #20
   80be2:	4826      	ldr	r0, [pc, #152]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80be4:	4b28      	ldr	r3, [pc, #160]	; (80c88 <dd_TEMP_SENSOR_PINS_INIT+0x12c>)
   80be6:	4798      	blx	r3
   80be8:	2111      	movs	r1, #17
   80bea:	4824      	ldr	r0, [pc, #144]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bec:	4b26      	ldr	r3, [pc, #152]	; (80c88 <dd_TEMP_SENSOR_PINS_INIT+0x12c>)
   80bee:	4798      	blx	r3
   80bf0:	2112      	movs	r1, #18
   80bf2:	4822      	ldr	r0, [pc, #136]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bf4:	4b24      	ldr	r3, [pc, #144]	; (80c88 <dd_TEMP_SENSOR_PINS_INIT+0x12c>)
   80bf6:	4798      	blx	r3
   80bf8:	2113      	movs	r1, #19
   80bfa:	4820      	ldr	r0, [pc, #128]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bfc:	4b22      	ldr	r3, [pc, #136]	; (80c88 <dd_TEMP_SENSOR_PINS_INIT+0x12c>)
   80bfe:	4798      	blx	r3
   80c00:	210e      	movs	r1, #14
   80c02:	481e      	ldr	r0, [pc, #120]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c04:	4b20      	ldr	r3, [pc, #128]	; (80c88 <dd_TEMP_SENSOR_PINS_INIT+0x12c>)
   80c06:	4798      	blx	r3
   80c08:	210f      	movs	r1, #15
   80c0a:	481c      	ldr	r0, [pc, #112]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c0c:	4b1f      	ldr	r3, [pc, #124]	; (80c8c <dd_TEMP_SENSOR_PINS_INIT+0x130>)
   80c0e:	4798      	blx	r3
   80c10:	2110      	movs	r1, #16
   80c12:	481a      	ldr	r0, [pc, #104]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c14:	4b1d      	ldr	r3, [pc, #116]	; (80c8c <dd_TEMP_SENSOR_PINS_INIT+0x130>)
   80c16:	4798      	blx	r3
   80c18:	2114      	movs	r1, #20
   80c1a:	4818      	ldr	r0, [pc, #96]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c1c:	4b1b      	ldr	r3, [pc, #108]	; (80c8c <dd_TEMP_SENSOR_PINS_INIT+0x130>)
   80c1e:	4798      	blx	r3
   80c20:	2111      	movs	r1, #17
   80c22:	4816      	ldr	r0, [pc, #88]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c24:	4b19      	ldr	r3, [pc, #100]	; (80c8c <dd_TEMP_SENSOR_PINS_INIT+0x130>)
   80c26:	4798      	blx	r3
   80c28:	2112      	movs	r1, #18
   80c2a:	4814      	ldr	r0, [pc, #80]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c2c:	4b17      	ldr	r3, [pc, #92]	; (80c8c <dd_TEMP_SENSOR_PINS_INIT+0x130>)
   80c2e:	4798      	blx	r3
   80c30:	2113      	movs	r1, #19
   80c32:	4812      	ldr	r0, [pc, #72]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c34:	4b15      	ldr	r3, [pc, #84]	; (80c8c <dd_TEMP_SENSOR_PINS_INIT+0x130>)
   80c36:	4798      	blx	r3
   80c38:	210e      	movs	r1, #14
   80c3a:	4810      	ldr	r0, [pc, #64]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c3c:	4b13      	ldr	r3, [pc, #76]	; (80c8c <dd_TEMP_SENSOR_PINS_INIT+0x130>)
   80c3e:	4798      	blx	r3
   80c40:	210f      	movs	r1, #15
   80c42:	480e      	ldr	r0, [pc, #56]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c44:	4b12      	ldr	r3, [pc, #72]	; (80c90 <dd_TEMP_SENSOR_PINS_INIT+0x134>)
   80c46:	4798      	blx	r3
   80c48:	2110      	movs	r1, #16
   80c4a:	480c      	ldr	r0, [pc, #48]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c4c:	4b10      	ldr	r3, [pc, #64]	; (80c90 <dd_TEMP_SENSOR_PINS_INIT+0x134>)
   80c4e:	4798      	blx	r3
   80c50:	2114      	movs	r1, #20
   80c52:	480a      	ldr	r0, [pc, #40]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c54:	4b0e      	ldr	r3, [pc, #56]	; (80c90 <dd_TEMP_SENSOR_PINS_INIT+0x134>)
   80c56:	4798      	blx	r3
   80c58:	2111      	movs	r1, #17
   80c5a:	4808      	ldr	r0, [pc, #32]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c5c:	4b0c      	ldr	r3, [pc, #48]	; (80c90 <dd_TEMP_SENSOR_PINS_INIT+0x134>)
   80c5e:	4798      	blx	r3
   80c60:	2112      	movs	r1, #18
   80c62:	4806      	ldr	r0, [pc, #24]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c64:	4b0a      	ldr	r3, [pc, #40]	; (80c90 <dd_TEMP_SENSOR_PINS_INIT+0x134>)
   80c66:	4798      	blx	r3
   80c68:	2113      	movs	r1, #19
   80c6a:	4804      	ldr	r0, [pc, #16]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c6c:	4b08      	ldr	r3, [pc, #32]	; (80c90 <dd_TEMP_SENSOR_PINS_INIT+0x134>)
   80c6e:	4798      	blx	r3
   80c70:	210e      	movs	r1, #14
   80c72:	4802      	ldr	r0, [pc, #8]	; (80c7c <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c74:	4b06      	ldr	r3, [pc, #24]	; (80c90 <dd_TEMP_SENSOR_PINS_INIT+0x134>)
   80c76:	4798      	blx	r3
   80c78:	bf00      	nop
   80c7a:	bd80      	pop	{r7, pc}
   80c7c:	400e0e00 	.word	0x400e0e00
   80c80:	000810c5 	.word	0x000810c5
   80c84:	00081131 	.word	0x00081131
   80c88:	00081179 	.word	0x00081179
   80c8c:	00081085 	.word	0x00081085
   80c90:	0008120d 	.word	0x0008120d

00080c94 <dd_SPI_pins_INIT>:
   80c94:	b580      	push	{r7, lr}
   80c96:	af00      	add	r7, sp, #0
   80c98:	211a      	movs	r1, #26
   80c9a:	4891      	ldr	r0, [pc, #580]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80c9c:	4b91      	ldr	r3, [pc, #580]	; (80ee4 <dd_SPI_pins_INIT+0x250>)
   80c9e:	4798      	blx	r3
   80ca0:	2119      	movs	r1, #25
   80ca2:	488f      	ldr	r0, [pc, #572]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80ca4:	4b8f      	ldr	r3, [pc, #572]	; (80ee4 <dd_SPI_pins_INIT+0x250>)
   80ca6:	4798      	blx	r3
   80ca8:	211b      	movs	r1, #27
   80caa:	488d      	ldr	r0, [pc, #564]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80cac:	4b8d      	ldr	r3, [pc, #564]	; (80ee4 <dd_SPI_pins_INIT+0x250>)
   80cae:	4798      	blx	r3
   80cb0:	211c      	movs	r1, #28
   80cb2:	488b      	ldr	r0, [pc, #556]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80cb4:	4b8b      	ldr	r3, [pc, #556]	; (80ee4 <dd_SPI_pins_INIT+0x250>)
   80cb6:	4798      	blx	r3
   80cb8:	211d      	movs	r1, #29
   80cba:	4889      	ldr	r0, [pc, #548]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80cbc:	4b89      	ldr	r3, [pc, #548]	; (80ee4 <dd_SPI_pins_INIT+0x250>)
   80cbe:	4798      	blx	r3
   80cc0:	2115      	movs	r1, #21
   80cc2:	4889      	ldr	r0, [pc, #548]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80cc4:	4b87      	ldr	r3, [pc, #540]	; (80ee4 <dd_SPI_pins_INIT+0x250>)
   80cc6:	4798      	blx	r3
   80cc8:	2117      	movs	r1, #23
   80cca:	4887      	ldr	r0, [pc, #540]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80ccc:	4b85      	ldr	r3, [pc, #532]	; (80ee4 <dd_SPI_pins_INIT+0x250>)
   80cce:	4798      	blx	r3
   80cd0:	2106      	movs	r1, #6
   80cd2:	4883      	ldr	r0, [pc, #524]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80cd4:	4b85      	ldr	r3, [pc, #532]	; (80eec <dd_SPI_pins_INIT+0x258>)
   80cd6:	4798      	blx	r3
   80cd8:	2106      	movs	r1, #6
   80cda:	4881      	ldr	r0, [pc, #516]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80cdc:	4b84      	ldr	r3, [pc, #528]	; (80ef0 <dd_SPI_pins_INIT+0x25c>)
   80cde:	4798      	blx	r3
   80ce0:	2106      	movs	r1, #6
   80ce2:	487f      	ldr	r0, [pc, #508]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80ce4:	4b83      	ldr	r3, [pc, #524]	; (80ef4 <dd_SPI_pins_INIT+0x260>)
   80ce6:	4798      	blx	r3
   80ce8:	2106      	movs	r1, #6
   80cea:	487d      	ldr	r0, [pc, #500]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80cec:	4b82      	ldr	r3, [pc, #520]	; (80ef8 <dd_SPI_pins_INIT+0x264>)
   80cee:	4798      	blx	r3
   80cf0:	2106      	movs	r1, #6
   80cf2:	487b      	ldr	r0, [pc, #492]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80cf4:	4b81      	ldr	r3, [pc, #516]	; (80efc <dd_SPI_pins_INIT+0x268>)
   80cf6:	4798      	blx	r3
   80cf8:	2105      	movs	r1, #5
   80cfa:	4879      	ldr	r0, [pc, #484]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80cfc:	4b7b      	ldr	r3, [pc, #492]	; (80eec <dd_SPI_pins_INIT+0x258>)
   80cfe:	4798      	blx	r3
   80d00:	2105      	movs	r1, #5
   80d02:	4877      	ldr	r0, [pc, #476]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80d04:	4b7a      	ldr	r3, [pc, #488]	; (80ef0 <dd_SPI_pins_INIT+0x25c>)
   80d06:	4798      	blx	r3
   80d08:	2105      	movs	r1, #5
   80d0a:	4875      	ldr	r0, [pc, #468]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80d0c:	4b79      	ldr	r3, [pc, #484]	; (80ef4 <dd_SPI_pins_INIT+0x260>)
   80d0e:	4798      	blx	r3
   80d10:	2105      	movs	r1, #5
   80d12:	4873      	ldr	r0, [pc, #460]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80d14:	4b78      	ldr	r3, [pc, #480]	; (80ef8 <dd_SPI_pins_INIT+0x264>)
   80d16:	4798      	blx	r3
   80d18:	2105      	movs	r1, #5
   80d1a:	4871      	ldr	r0, [pc, #452]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80d1c:	4b77      	ldr	r3, [pc, #476]	; (80efc <dd_SPI_pins_INIT+0x268>)
   80d1e:	4798      	blx	r3
   80d20:	2104      	movs	r1, #4
   80d22:	486f      	ldr	r0, [pc, #444]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80d24:	4b71      	ldr	r3, [pc, #452]	; (80eec <dd_SPI_pins_INIT+0x258>)
   80d26:	4798      	blx	r3
   80d28:	2104      	movs	r1, #4
   80d2a:	486d      	ldr	r0, [pc, #436]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80d2c:	4b70      	ldr	r3, [pc, #448]	; (80ef0 <dd_SPI_pins_INIT+0x25c>)
   80d2e:	4798      	blx	r3
   80d30:	2104      	movs	r1, #4
   80d32:	486b      	ldr	r0, [pc, #428]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80d34:	4b6f      	ldr	r3, [pc, #444]	; (80ef4 <dd_SPI_pins_INIT+0x260>)
   80d36:	4798      	blx	r3
   80d38:	2104      	movs	r1, #4
   80d3a:	4869      	ldr	r0, [pc, #420]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80d3c:	4b6e      	ldr	r3, [pc, #440]	; (80ef8 <dd_SPI_pins_INIT+0x264>)
   80d3e:	4798      	blx	r3
   80d40:	2104      	movs	r1, #4
   80d42:	4867      	ldr	r0, [pc, #412]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80d44:	4b6d      	ldr	r3, [pc, #436]	; (80efc <dd_SPI_pins_INIT+0x268>)
   80d46:	4798      	blx	r3
   80d48:	2103      	movs	r1, #3
   80d4a:	4865      	ldr	r0, [pc, #404]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80d4c:	4b67      	ldr	r3, [pc, #412]	; (80eec <dd_SPI_pins_INIT+0x258>)
   80d4e:	4798      	blx	r3
   80d50:	2103      	movs	r1, #3
   80d52:	4863      	ldr	r0, [pc, #396]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80d54:	4b66      	ldr	r3, [pc, #408]	; (80ef0 <dd_SPI_pins_INIT+0x25c>)
   80d56:	4798      	blx	r3
   80d58:	2103      	movs	r1, #3
   80d5a:	4861      	ldr	r0, [pc, #388]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80d5c:	4b65      	ldr	r3, [pc, #404]	; (80ef4 <dd_SPI_pins_INIT+0x260>)
   80d5e:	4798      	blx	r3
   80d60:	2103      	movs	r1, #3
   80d62:	485f      	ldr	r0, [pc, #380]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80d64:	4b64      	ldr	r3, [pc, #400]	; (80ef8 <dd_SPI_pins_INIT+0x264>)
   80d66:	4798      	blx	r3
   80d68:	2103      	movs	r1, #3
   80d6a:	485d      	ldr	r0, [pc, #372]	; (80ee0 <dd_SPI_pins_INIT+0x24c>)
   80d6c:	4b63      	ldr	r3, [pc, #396]	; (80efc <dd_SPI_pins_INIT+0x268>)
   80d6e:	4798      	blx	r3
   80d70:	2100      	movs	r1, #0
   80d72:	485d      	ldr	r0, [pc, #372]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80d74:	4b5d      	ldr	r3, [pc, #372]	; (80eec <dd_SPI_pins_INIT+0x258>)
   80d76:	4798      	blx	r3
   80d78:	2100      	movs	r1, #0
   80d7a:	485b      	ldr	r0, [pc, #364]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80d7c:	4b5c      	ldr	r3, [pc, #368]	; (80ef0 <dd_SPI_pins_INIT+0x25c>)
   80d7e:	4798      	blx	r3
   80d80:	2100      	movs	r1, #0
   80d82:	4859      	ldr	r0, [pc, #356]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80d84:	4b5b      	ldr	r3, [pc, #364]	; (80ef4 <dd_SPI_pins_INIT+0x260>)
   80d86:	4798      	blx	r3
   80d88:	2100      	movs	r1, #0
   80d8a:	4857      	ldr	r0, [pc, #348]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80d8c:	4b5c      	ldr	r3, [pc, #368]	; (80f00 <dd_SPI_pins_INIT+0x26c>)
   80d8e:	4798      	blx	r3
   80d90:	2100      	movs	r1, #0
   80d92:	4855      	ldr	r0, [pc, #340]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80d94:	4b59      	ldr	r3, [pc, #356]	; (80efc <dd_SPI_pins_INIT+0x268>)
   80d96:	4798      	blx	r3
   80d98:	2101      	movs	r1, #1
   80d9a:	4853      	ldr	r0, [pc, #332]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80d9c:	4b53      	ldr	r3, [pc, #332]	; (80eec <dd_SPI_pins_INIT+0x258>)
   80d9e:	4798      	blx	r3
   80da0:	2101      	movs	r1, #1
   80da2:	4851      	ldr	r0, [pc, #324]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80da4:	4b52      	ldr	r3, [pc, #328]	; (80ef0 <dd_SPI_pins_INIT+0x25c>)
   80da6:	4798      	blx	r3
   80da8:	2101      	movs	r1, #1
   80daa:	484f      	ldr	r0, [pc, #316]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80dac:	4b51      	ldr	r3, [pc, #324]	; (80ef4 <dd_SPI_pins_INIT+0x260>)
   80dae:	4798      	blx	r3
   80db0:	2101      	movs	r1, #1
   80db2:	484d      	ldr	r0, [pc, #308]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80db4:	4b52      	ldr	r3, [pc, #328]	; (80f00 <dd_SPI_pins_INIT+0x26c>)
   80db6:	4798      	blx	r3
   80db8:	2101      	movs	r1, #1
   80dba:	484b      	ldr	r0, [pc, #300]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80dbc:	4b4f      	ldr	r3, [pc, #316]	; (80efc <dd_SPI_pins_INIT+0x268>)
   80dbe:	4798      	blx	r3
   80dc0:	2102      	movs	r1, #2
   80dc2:	4849      	ldr	r0, [pc, #292]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80dc4:	4b49      	ldr	r3, [pc, #292]	; (80eec <dd_SPI_pins_INIT+0x258>)
   80dc6:	4798      	blx	r3
   80dc8:	2102      	movs	r1, #2
   80dca:	4847      	ldr	r0, [pc, #284]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80dcc:	4b48      	ldr	r3, [pc, #288]	; (80ef0 <dd_SPI_pins_INIT+0x25c>)
   80dce:	4798      	blx	r3
   80dd0:	2102      	movs	r1, #2
   80dd2:	4845      	ldr	r0, [pc, #276]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80dd4:	4b47      	ldr	r3, [pc, #284]	; (80ef4 <dd_SPI_pins_INIT+0x260>)
   80dd6:	4798      	blx	r3
   80dd8:	2102      	movs	r1, #2
   80dda:	4843      	ldr	r0, [pc, #268]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80ddc:	4b48      	ldr	r3, [pc, #288]	; (80f00 <dd_SPI_pins_INIT+0x26c>)
   80dde:	4798      	blx	r3
   80de0:	2102      	movs	r1, #2
   80de2:	4841      	ldr	r0, [pc, #260]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80de4:	4b45      	ldr	r3, [pc, #276]	; (80efc <dd_SPI_pins_INIT+0x268>)
   80de6:	4798      	blx	r3
   80de8:	2103      	movs	r1, #3
   80dea:	483f      	ldr	r0, [pc, #252]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80dec:	4b3f      	ldr	r3, [pc, #252]	; (80eec <dd_SPI_pins_INIT+0x258>)
   80dee:	4798      	blx	r3
   80df0:	2103      	movs	r1, #3
   80df2:	483d      	ldr	r0, [pc, #244]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80df4:	4b3e      	ldr	r3, [pc, #248]	; (80ef0 <dd_SPI_pins_INIT+0x25c>)
   80df6:	4798      	blx	r3
   80df8:	2103      	movs	r1, #3
   80dfa:	483b      	ldr	r0, [pc, #236]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80dfc:	4b3d      	ldr	r3, [pc, #244]	; (80ef4 <dd_SPI_pins_INIT+0x260>)
   80dfe:	4798      	blx	r3
   80e00:	2103      	movs	r1, #3
   80e02:	4839      	ldr	r0, [pc, #228]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e04:	4b3d      	ldr	r3, [pc, #244]	; (80efc <dd_SPI_pins_INIT+0x268>)
   80e06:	4798      	blx	r3
   80e08:	2103      	movs	r1, #3
   80e0a:	4837      	ldr	r0, [pc, #220]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e0c:	4b3c      	ldr	r3, [pc, #240]	; (80f00 <dd_SPI_pins_INIT+0x26c>)
   80e0e:	4798      	blx	r3
   80e10:	2104      	movs	r1, #4
   80e12:	4835      	ldr	r0, [pc, #212]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e14:	4b35      	ldr	r3, [pc, #212]	; (80eec <dd_SPI_pins_INIT+0x258>)
   80e16:	4798      	blx	r3
   80e18:	2104      	movs	r1, #4
   80e1a:	4833      	ldr	r0, [pc, #204]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e1c:	4b34      	ldr	r3, [pc, #208]	; (80ef0 <dd_SPI_pins_INIT+0x25c>)
   80e1e:	4798      	blx	r3
   80e20:	2104      	movs	r1, #4
   80e22:	4831      	ldr	r0, [pc, #196]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e24:	4b33      	ldr	r3, [pc, #204]	; (80ef4 <dd_SPI_pins_INIT+0x260>)
   80e26:	4798      	blx	r3
   80e28:	2104      	movs	r1, #4
   80e2a:	482f      	ldr	r0, [pc, #188]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e2c:	4b33      	ldr	r3, [pc, #204]	; (80efc <dd_SPI_pins_INIT+0x268>)
   80e2e:	4798      	blx	r3
   80e30:	2104      	movs	r1, #4
   80e32:	482d      	ldr	r0, [pc, #180]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e34:	4b32      	ldr	r3, [pc, #200]	; (80f00 <dd_SPI_pins_INIT+0x26c>)
   80e36:	4798      	blx	r3
   80e38:	2105      	movs	r1, #5
   80e3a:	482b      	ldr	r0, [pc, #172]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e3c:	4b2b      	ldr	r3, [pc, #172]	; (80eec <dd_SPI_pins_INIT+0x258>)
   80e3e:	4798      	blx	r3
   80e40:	2105      	movs	r1, #5
   80e42:	4829      	ldr	r0, [pc, #164]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e44:	4b2a      	ldr	r3, [pc, #168]	; (80ef0 <dd_SPI_pins_INIT+0x25c>)
   80e46:	4798      	blx	r3
   80e48:	2105      	movs	r1, #5
   80e4a:	4827      	ldr	r0, [pc, #156]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e4c:	4b29      	ldr	r3, [pc, #164]	; (80ef4 <dd_SPI_pins_INIT+0x260>)
   80e4e:	4798      	blx	r3
   80e50:	2105      	movs	r1, #5
   80e52:	4825      	ldr	r0, [pc, #148]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e54:	4b29      	ldr	r3, [pc, #164]	; (80efc <dd_SPI_pins_INIT+0x268>)
   80e56:	4798      	blx	r3
   80e58:	2105      	movs	r1, #5
   80e5a:	4823      	ldr	r0, [pc, #140]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e5c:	4b28      	ldr	r3, [pc, #160]	; (80f00 <dd_SPI_pins_INIT+0x26c>)
   80e5e:	4798      	blx	r3
   80e60:	2106      	movs	r1, #6
   80e62:	4821      	ldr	r0, [pc, #132]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e64:	4b21      	ldr	r3, [pc, #132]	; (80eec <dd_SPI_pins_INIT+0x258>)
   80e66:	4798      	blx	r3
   80e68:	2106      	movs	r1, #6
   80e6a:	481f      	ldr	r0, [pc, #124]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e6c:	4b20      	ldr	r3, [pc, #128]	; (80ef0 <dd_SPI_pins_INIT+0x25c>)
   80e6e:	4798      	blx	r3
   80e70:	2106      	movs	r1, #6
   80e72:	481d      	ldr	r0, [pc, #116]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e74:	4b1f      	ldr	r3, [pc, #124]	; (80ef4 <dd_SPI_pins_INIT+0x260>)
   80e76:	4798      	blx	r3
   80e78:	2106      	movs	r1, #6
   80e7a:	481b      	ldr	r0, [pc, #108]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e7c:	4b1f      	ldr	r3, [pc, #124]	; (80efc <dd_SPI_pins_INIT+0x268>)
   80e7e:	4798      	blx	r3
   80e80:	2106      	movs	r1, #6
   80e82:	4819      	ldr	r0, [pc, #100]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e84:	4b1e      	ldr	r3, [pc, #120]	; (80f00 <dd_SPI_pins_INIT+0x26c>)
   80e86:	4798      	blx	r3
   80e88:	2107      	movs	r1, #7
   80e8a:	4817      	ldr	r0, [pc, #92]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e8c:	4b17      	ldr	r3, [pc, #92]	; (80eec <dd_SPI_pins_INIT+0x258>)
   80e8e:	4798      	blx	r3
   80e90:	2107      	movs	r1, #7
   80e92:	4815      	ldr	r0, [pc, #84]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e94:	4b16      	ldr	r3, [pc, #88]	; (80ef0 <dd_SPI_pins_INIT+0x25c>)
   80e96:	4798      	blx	r3
   80e98:	2107      	movs	r1, #7
   80e9a:	4813      	ldr	r0, [pc, #76]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80e9c:	4b15      	ldr	r3, [pc, #84]	; (80ef4 <dd_SPI_pins_INIT+0x260>)
   80e9e:	4798      	blx	r3
   80ea0:	2107      	movs	r1, #7
   80ea2:	4811      	ldr	r0, [pc, #68]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80ea4:	4b15      	ldr	r3, [pc, #84]	; (80efc <dd_SPI_pins_INIT+0x268>)
   80ea6:	4798      	blx	r3
   80ea8:	2107      	movs	r1, #7
   80eaa:	480f      	ldr	r0, [pc, #60]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80eac:	4b14      	ldr	r3, [pc, #80]	; (80f00 <dd_SPI_pins_INIT+0x26c>)
   80eae:	4798      	blx	r3
   80eb0:	2108      	movs	r1, #8
   80eb2:	480d      	ldr	r0, [pc, #52]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80eb4:	4b0d      	ldr	r3, [pc, #52]	; (80eec <dd_SPI_pins_INIT+0x258>)
   80eb6:	4798      	blx	r3
   80eb8:	2108      	movs	r1, #8
   80eba:	480b      	ldr	r0, [pc, #44]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80ebc:	4b0c      	ldr	r3, [pc, #48]	; (80ef0 <dd_SPI_pins_INIT+0x25c>)
   80ebe:	4798      	blx	r3
   80ec0:	2108      	movs	r1, #8
   80ec2:	4809      	ldr	r0, [pc, #36]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80ec4:	4b0b      	ldr	r3, [pc, #44]	; (80ef4 <dd_SPI_pins_INIT+0x260>)
   80ec6:	4798      	blx	r3
   80ec8:	2108      	movs	r1, #8
   80eca:	4807      	ldr	r0, [pc, #28]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80ecc:	4b0b      	ldr	r3, [pc, #44]	; (80efc <dd_SPI_pins_INIT+0x268>)
   80ece:	4798      	blx	r3
   80ed0:	2108      	movs	r1, #8
   80ed2:	4805      	ldr	r0, [pc, #20]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80ed4:	4b0a      	ldr	r3, [pc, #40]	; (80f00 <dd_SPI_pins_INIT+0x26c>)
   80ed6:	4798      	blx	r3
   80ed8:	210e      	movs	r1, #14
   80eda:	4803      	ldr	r0, [pc, #12]	; (80ee8 <dd_SPI_pins_INIT+0x254>)
   80edc:	e012      	b.n	80f04 <dd_SPI_pins_INIT+0x270>
   80ede:	bf00      	nop
   80ee0:	400e0e00 	.word	0x400e0e00
   80ee4:	000810e9 	.word	0x000810e9
   80ee8:	400e1000 	.word	0x400e1000
   80eec:	000810c5 	.word	0x000810c5
   80ef0:	0008110d 	.word	0x0008110d
   80ef4:	0008119d 	.word	0x0008119d
   80ef8:	00081155 	.word	0x00081155
   80efc:	000811e5 	.word	0x000811e5
   80f00:	00081179 	.word	0x00081179
   80f04:	4b13      	ldr	r3, [pc, #76]	; (80f54 <dd_SPI_pins_INIT+0x2c0>)
   80f06:	4798      	blx	r3
   80f08:	210e      	movs	r1, #14
   80f0a:	4813      	ldr	r0, [pc, #76]	; (80f58 <dd_SPI_pins_INIT+0x2c4>)
   80f0c:	4b13      	ldr	r3, [pc, #76]	; (80f5c <dd_SPI_pins_INIT+0x2c8>)
   80f0e:	4798      	blx	r3
   80f10:	210e      	movs	r1, #14
   80f12:	4811      	ldr	r0, [pc, #68]	; (80f58 <dd_SPI_pins_INIT+0x2c4>)
   80f14:	4b12      	ldr	r3, [pc, #72]	; (80f60 <dd_SPI_pins_INIT+0x2cc>)
   80f16:	4798      	blx	r3
   80f18:	210e      	movs	r1, #14
   80f1a:	480f      	ldr	r0, [pc, #60]	; (80f58 <dd_SPI_pins_INIT+0x2c4>)
   80f1c:	4b11      	ldr	r3, [pc, #68]	; (80f64 <dd_SPI_pins_INIT+0x2d0>)
   80f1e:	4798      	blx	r3
   80f20:	210e      	movs	r1, #14
   80f22:	480d      	ldr	r0, [pc, #52]	; (80f58 <dd_SPI_pins_INIT+0x2c4>)
   80f24:	4b10      	ldr	r3, [pc, #64]	; (80f68 <dd_SPI_pins_INIT+0x2d4>)
   80f26:	4798      	blx	r3
   80f28:	210f      	movs	r1, #15
   80f2a:	480b      	ldr	r0, [pc, #44]	; (80f58 <dd_SPI_pins_INIT+0x2c4>)
   80f2c:	4b09      	ldr	r3, [pc, #36]	; (80f54 <dd_SPI_pins_INIT+0x2c0>)
   80f2e:	4798      	blx	r3
   80f30:	210f      	movs	r1, #15
   80f32:	4809      	ldr	r0, [pc, #36]	; (80f58 <dd_SPI_pins_INIT+0x2c4>)
   80f34:	4b09      	ldr	r3, [pc, #36]	; (80f5c <dd_SPI_pins_INIT+0x2c8>)
   80f36:	4798      	blx	r3
   80f38:	210f      	movs	r1, #15
   80f3a:	4807      	ldr	r0, [pc, #28]	; (80f58 <dd_SPI_pins_INIT+0x2c4>)
   80f3c:	4b08      	ldr	r3, [pc, #32]	; (80f60 <dd_SPI_pins_INIT+0x2cc>)
   80f3e:	4798      	blx	r3
   80f40:	210f      	movs	r1, #15
   80f42:	4805      	ldr	r0, [pc, #20]	; (80f58 <dd_SPI_pins_INIT+0x2c4>)
   80f44:	4b07      	ldr	r3, [pc, #28]	; (80f64 <dd_SPI_pins_INIT+0x2d0>)
   80f46:	4798      	blx	r3
   80f48:	210f      	movs	r1, #15
   80f4a:	4803      	ldr	r0, [pc, #12]	; (80f58 <dd_SPI_pins_INIT+0x2c4>)
   80f4c:	4b06      	ldr	r3, [pc, #24]	; (80f68 <dd_SPI_pins_INIT+0x2d4>)
   80f4e:	4798      	blx	r3
   80f50:	bf00      	nop
   80f52:	bd80      	pop	{r7, pc}
   80f54:	000810c5 	.word	0x000810c5
   80f58:	400e1000 	.word	0x400e1000
   80f5c:	0008110d 	.word	0x0008110d
   80f60:	0008119d 	.word	0x0008119d
   80f64:	000811e5 	.word	0x000811e5
   80f68:	00081179 	.word	0x00081179

00080f6c <dd_CAN_pins_INIT>:
   80f6c:	b580      	push	{r7, lr}
   80f6e:	af00      	add	r7, sp, #0
   80f70:	2101      	movs	r1, #1
   80f72:	481e      	ldr	r0, [pc, #120]	; (80fec <dd_CAN_pins_INIT+0x80>)
   80f74:	4b1e      	ldr	r3, [pc, #120]	; (80ff0 <dd_CAN_pins_INIT+0x84>)
   80f76:	4798      	blx	r3
   80f78:	2101      	movs	r1, #1
   80f7a:	481c      	ldr	r0, [pc, #112]	; (80fec <dd_CAN_pins_INIT+0x80>)
   80f7c:	4b1d      	ldr	r3, [pc, #116]	; (80ff4 <dd_CAN_pins_INIT+0x88>)
   80f7e:	4798      	blx	r3
   80f80:	2101      	movs	r1, #1
   80f82:	481a      	ldr	r0, [pc, #104]	; (80fec <dd_CAN_pins_INIT+0x80>)
   80f84:	4b1c      	ldr	r3, [pc, #112]	; (80ff8 <dd_CAN_pins_INIT+0x8c>)
   80f86:	4798      	blx	r3
   80f88:	2101      	movs	r1, #1
   80f8a:	4818      	ldr	r0, [pc, #96]	; (80fec <dd_CAN_pins_INIT+0x80>)
   80f8c:	4b1b      	ldr	r3, [pc, #108]	; (80ffc <dd_CAN_pins_INIT+0x90>)
   80f8e:	4798      	blx	r3
   80f90:	2101      	movs	r1, #1
   80f92:	4816      	ldr	r0, [pc, #88]	; (80fec <dd_CAN_pins_INIT+0x80>)
   80f94:	4b1a      	ldr	r3, [pc, #104]	; (81000 <dd_CAN_pins_INIT+0x94>)
   80f96:	4798      	blx	r3
   80f98:	2100      	movs	r1, #0
   80f9a:	4814      	ldr	r0, [pc, #80]	; (80fec <dd_CAN_pins_INIT+0x80>)
   80f9c:	4b14      	ldr	r3, [pc, #80]	; (80ff0 <dd_CAN_pins_INIT+0x84>)
   80f9e:	4798      	blx	r3
   80fa0:	2100      	movs	r1, #0
   80fa2:	4812      	ldr	r0, [pc, #72]	; (80fec <dd_CAN_pins_INIT+0x80>)
   80fa4:	4b13      	ldr	r3, [pc, #76]	; (80ff4 <dd_CAN_pins_INIT+0x88>)
   80fa6:	4798      	blx	r3
   80fa8:	2100      	movs	r1, #0
   80faa:	4810      	ldr	r0, [pc, #64]	; (80fec <dd_CAN_pins_INIT+0x80>)
   80fac:	4b12      	ldr	r3, [pc, #72]	; (80ff8 <dd_CAN_pins_INIT+0x8c>)
   80fae:	4798      	blx	r3
   80fb0:	2100      	movs	r1, #0
   80fb2:	480e      	ldr	r0, [pc, #56]	; (80fec <dd_CAN_pins_INIT+0x80>)
   80fb4:	4b11      	ldr	r3, [pc, #68]	; (80ffc <dd_CAN_pins_INIT+0x90>)
   80fb6:	4798      	blx	r3
   80fb8:	2100      	movs	r1, #0
   80fba:	480c      	ldr	r0, [pc, #48]	; (80fec <dd_CAN_pins_INIT+0x80>)
   80fbc:	4b10      	ldr	r3, [pc, #64]	; (81000 <dd_CAN_pins_INIT+0x94>)
   80fbe:	4798      	blx	r3
   80fc0:	2102      	movs	r1, #2
   80fc2:	480a      	ldr	r0, [pc, #40]	; (80fec <dd_CAN_pins_INIT+0x80>)
   80fc4:	4b0f      	ldr	r3, [pc, #60]	; (81004 <dd_CAN_pins_INIT+0x98>)
   80fc6:	4798      	blx	r3
   80fc8:	2102      	movs	r1, #2
   80fca:	4808      	ldr	r0, [pc, #32]	; (80fec <dd_CAN_pins_INIT+0x80>)
   80fcc:	4b0e      	ldr	r3, [pc, #56]	; (81008 <dd_CAN_pins_INIT+0x9c>)
   80fce:	4798      	blx	r3
   80fd0:	2102      	movs	r1, #2
   80fd2:	4806      	ldr	r0, [pc, #24]	; (80fec <dd_CAN_pins_INIT+0x80>)
   80fd4:	4b08      	ldr	r3, [pc, #32]	; (80ff8 <dd_CAN_pins_INIT+0x8c>)
   80fd6:	4798      	blx	r3
   80fd8:	2102      	movs	r1, #2
   80fda:	4804      	ldr	r0, [pc, #16]	; (80fec <dd_CAN_pins_INIT+0x80>)
   80fdc:	4b0b      	ldr	r3, [pc, #44]	; (8100c <dd_CAN_pins_INIT+0xa0>)
   80fde:	4798      	blx	r3
   80fe0:	2102      	movs	r1, #2
   80fe2:	4802      	ldr	r0, [pc, #8]	; (80fec <dd_CAN_pins_INIT+0x80>)
   80fe4:	4b0a      	ldr	r3, [pc, #40]	; (81010 <dd_CAN_pins_INIT+0xa4>)
   80fe6:	4798      	blx	r3
   80fe8:	bf00      	nop
   80fea:	bd80      	pop	{r7, pc}
   80fec:	400e0e00 	.word	0x400e0e00
   80ff0:	000810e9 	.word	0x000810e9
   80ff4:	00081131 	.word	0x00081131
   80ff8:	00081179 	.word	0x00081179
   80ffc:	0008120d 	.word	0x0008120d
   81000:	000811c1 	.word	0x000811c1
   81004:	000810c5 	.word	0x000810c5
   81008:	0008110d 	.word	0x0008110d
   8100c:	000811e5 	.word	0x000811e5
   81010:	0008119d 	.word	0x0008119d

00081014 <dd_UART_pins_init>:
   81014:	b580      	push	{r7, lr}
   81016:	af00      	add	r7, sp, #0
   81018:	2108      	movs	r1, #8
   8101a:	4814      	ldr	r0, [pc, #80]	; (8106c <dd_UART_pins_init+0x58>)
   8101c:	4b14      	ldr	r3, [pc, #80]	; (81070 <dd_UART_pins_init+0x5c>)
   8101e:	4798      	blx	r3
   81020:	2108      	movs	r1, #8
   81022:	4812      	ldr	r0, [pc, #72]	; (8106c <dd_UART_pins_init+0x58>)
   81024:	4b13      	ldr	r3, [pc, #76]	; (81074 <dd_UART_pins_init+0x60>)
   81026:	4798      	blx	r3
   81028:	2108      	movs	r1, #8
   8102a:	4810      	ldr	r0, [pc, #64]	; (8106c <dd_UART_pins_init+0x58>)
   8102c:	4b12      	ldr	r3, [pc, #72]	; (81078 <dd_UART_pins_init+0x64>)
   8102e:	4798      	blx	r3
   81030:	2108      	movs	r1, #8
   81032:	480e      	ldr	r0, [pc, #56]	; (8106c <dd_UART_pins_init+0x58>)
   81034:	4b11      	ldr	r3, [pc, #68]	; (8107c <dd_UART_pins_init+0x68>)
   81036:	4798      	blx	r3
   81038:	2108      	movs	r1, #8
   8103a:	480c      	ldr	r0, [pc, #48]	; (8106c <dd_UART_pins_init+0x58>)
   8103c:	4b10      	ldr	r3, [pc, #64]	; (81080 <dd_UART_pins_init+0x6c>)
   8103e:	4798      	blx	r3
   81040:	2109      	movs	r1, #9
   81042:	480a      	ldr	r0, [pc, #40]	; (8106c <dd_UART_pins_init+0x58>)
   81044:	4b0a      	ldr	r3, [pc, #40]	; (81070 <dd_UART_pins_init+0x5c>)
   81046:	4798      	blx	r3
   81048:	2109      	movs	r1, #9
   8104a:	4808      	ldr	r0, [pc, #32]	; (8106c <dd_UART_pins_init+0x58>)
   8104c:	4b09      	ldr	r3, [pc, #36]	; (81074 <dd_UART_pins_init+0x60>)
   8104e:	4798      	blx	r3
   81050:	2109      	movs	r1, #9
   81052:	4806      	ldr	r0, [pc, #24]	; (8106c <dd_UART_pins_init+0x58>)
   81054:	4b08      	ldr	r3, [pc, #32]	; (81078 <dd_UART_pins_init+0x64>)
   81056:	4798      	blx	r3
   81058:	2109      	movs	r1, #9
   8105a:	4804      	ldr	r0, [pc, #16]	; (8106c <dd_UART_pins_init+0x58>)
   8105c:	4b07      	ldr	r3, [pc, #28]	; (8107c <dd_UART_pins_init+0x68>)
   8105e:	4798      	blx	r3
   81060:	2109      	movs	r1, #9
   81062:	4802      	ldr	r0, [pc, #8]	; (8106c <dd_UART_pins_init+0x58>)
   81064:	4b06      	ldr	r3, [pc, #24]	; (81080 <dd_UART_pins_init+0x6c>)
   81066:	4798      	blx	r3
   81068:	bf00      	nop
   8106a:	bd80      	pop	{r7, pc}
   8106c:	400e0e00 	.word	0x400e0e00
   81070:	000810e9 	.word	0x000810e9
   81074:	00081131 	.word	0x00081131
   81078:	00081179 	.word	0x00081179
   8107c:	0008120d 	.word	0x0008120d
   81080:	000811c1 	.word	0x000811c1

00081084 <dd_PIO_INTERRUPT_DISABLE>:
   81084:	b480      	push	{r7}
   81086:	b083      	sub	sp, #12
   81088:	af00      	add	r7, sp, #0
   8108a:	6078      	str	r0, [r7, #4]
   8108c:	6039      	str	r1, [r7, #0]
   8108e:	687b      	ldr	r3, [r7, #4]
   81090:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   81092:	2101      	movs	r1, #1
   81094:	683b      	ldr	r3, [r7, #0]
   81096:	fa01 f303 	lsl.w	r3, r1, r3
   8109a:	401a      	ands	r2, r3
   8109c:	2101      	movs	r1, #1
   8109e:	683b      	ldr	r3, [r7, #0]
   810a0:	fa01 f303 	lsl.w	r3, r1, r3
   810a4:	429a      	cmp	r2, r3
   810a6:	d106      	bne.n	810b6 <dd_PIO_INTERRUPT_DISABLE+0x32>
   810a8:	2201      	movs	r2, #1
   810aa:	683b      	ldr	r3, [r7, #0]
   810ac:	fa02 f303 	lsl.w	r3, r2, r3
   810b0:	461a      	mov	r2, r3
   810b2:	687b      	ldr	r3, [r7, #4]
   810b4:	645a      	str	r2, [r3, #68]	; 0x44
   810b6:	2300      	movs	r3, #0
   810b8:	4618      	mov	r0, r3
   810ba:	370c      	adds	r7, #12
   810bc:	46bd      	mov	sp, r7
   810be:	bc80      	pop	{r7}
   810c0:	4770      	bx	lr
   810c2:	bf00      	nop

000810c4 <dd_enable_PIO>:
   810c4:	b480      	push	{r7}
   810c6:	b083      	sub	sp, #12
   810c8:	af00      	add	r7, sp, #0
   810ca:	6078      	str	r0, [r7, #4]
   810cc:	6039      	str	r1, [r7, #0]
   810ce:	2201      	movs	r2, #1
   810d0:	683b      	ldr	r3, [r7, #0]
   810d2:	fa02 f303 	lsl.w	r3, r2, r3
   810d6:	461a      	mov	r2, r3
   810d8:	687b      	ldr	r3, [r7, #4]
   810da:	601a      	str	r2, [r3, #0]
   810dc:	2300      	movs	r3, #0
   810de:	4618      	mov	r0, r3
   810e0:	370c      	adds	r7, #12
   810e2:	46bd      	mov	sp, r7
   810e4:	bc80      	pop	{r7}
   810e6:	4770      	bx	lr

000810e8 <dd_disable_PIO>:
   810e8:	b480      	push	{r7}
   810ea:	b083      	sub	sp, #12
   810ec:	af00      	add	r7, sp, #0
   810ee:	6078      	str	r0, [r7, #4]
   810f0:	6039      	str	r1, [r7, #0]
   810f2:	2201      	movs	r2, #1
   810f4:	683b      	ldr	r3, [r7, #0]
   810f6:	fa02 f303 	lsl.w	r3, r2, r3
   810fa:	461a      	mov	r2, r3
   810fc:	687b      	ldr	r3, [r7, #4]
   810fe:	605a      	str	r2, [r3, #4]
   81100:	2300      	movs	r3, #0
   81102:	4618      	mov	r0, r3
   81104:	370c      	adds	r7, #12
   81106:	46bd      	mov	sp, r7
   81108:	bc80      	pop	{r7}
   8110a:	4770      	bx	lr

0008110c <dd_enable_OUTPUT>:
   8110c:	b480      	push	{r7}
   8110e:	b083      	sub	sp, #12
   81110:	af00      	add	r7, sp, #0
   81112:	6078      	str	r0, [r7, #4]
   81114:	6039      	str	r1, [r7, #0]
   81116:	2201      	movs	r2, #1
   81118:	683b      	ldr	r3, [r7, #0]
   8111a:	fa02 f303 	lsl.w	r3, r2, r3
   8111e:	461a      	mov	r2, r3
   81120:	687b      	ldr	r3, [r7, #4]
   81122:	611a      	str	r2, [r3, #16]
   81124:	2300      	movs	r3, #0
   81126:	4618      	mov	r0, r3
   81128:	370c      	adds	r7, #12
   8112a:	46bd      	mov	sp, r7
   8112c:	bc80      	pop	{r7}
   8112e:	4770      	bx	lr

00081130 <dd_disable_OUTPUT>:
   81130:	b480      	push	{r7}
   81132:	b083      	sub	sp, #12
   81134:	af00      	add	r7, sp, #0
   81136:	6078      	str	r0, [r7, #4]
   81138:	6039      	str	r1, [r7, #0]
   8113a:	2201      	movs	r2, #1
   8113c:	683b      	ldr	r3, [r7, #0]
   8113e:	fa02 f303 	lsl.w	r3, r2, r3
   81142:	461a      	mov	r2, r3
   81144:	687b      	ldr	r3, [r7, #4]
   81146:	615a      	str	r2, [r3, #20]
   81148:	2300      	movs	r3, #0
   8114a:	4618      	mov	r0, r3
   8114c:	370c      	adds	r7, #12
   8114e:	46bd      	mov	sp, r7
   81150:	bc80      	pop	{r7}
   81152:	4770      	bx	lr

00081154 <dd_SET_OUTPUT_DATA>:
   81154:	b480      	push	{r7}
   81156:	b083      	sub	sp, #12
   81158:	af00      	add	r7, sp, #0
   8115a:	6078      	str	r0, [r7, #4]
   8115c:	6039      	str	r1, [r7, #0]
   8115e:	2201      	movs	r2, #1
   81160:	683b      	ldr	r3, [r7, #0]
   81162:	fa02 f303 	lsl.w	r3, r2, r3
   81166:	461a      	mov	r2, r3
   81168:	687b      	ldr	r3, [r7, #4]
   8116a:	631a      	str	r2, [r3, #48]	; 0x30
   8116c:	2300      	movs	r3, #0
   8116e:	4618      	mov	r0, r3
   81170:	370c      	adds	r7, #12
   81172:	46bd      	mov	sp, r7
   81174:	bc80      	pop	{r7}
   81176:	4770      	bx	lr

00081178 <dd_CLEAR_OUTPUT_DATA>:
   81178:	b480      	push	{r7}
   8117a:	b083      	sub	sp, #12
   8117c:	af00      	add	r7, sp, #0
   8117e:	6078      	str	r0, [r7, #4]
   81180:	6039      	str	r1, [r7, #0]
   81182:	2201      	movs	r2, #1
   81184:	683b      	ldr	r3, [r7, #0]
   81186:	fa02 f303 	lsl.w	r3, r2, r3
   8118a:	461a      	mov	r2, r3
   8118c:	687b      	ldr	r3, [r7, #4]
   8118e:	635a      	str	r2, [r3, #52]	; 0x34
   81190:	2300      	movs	r3, #0
   81192:	4618      	mov	r0, r3
   81194:	370c      	adds	r7, #12
   81196:	46bd      	mov	sp, r7
   81198:	bc80      	pop	{r7}
   8119a:	4770      	bx	lr

0008119c <dd_enable_PULLUP>:
   8119c:	b480      	push	{r7}
   8119e:	b083      	sub	sp, #12
   811a0:	af00      	add	r7, sp, #0
   811a2:	6078      	str	r0, [r7, #4]
   811a4:	6039      	str	r1, [r7, #0]
   811a6:	2201      	movs	r2, #1
   811a8:	683b      	ldr	r3, [r7, #0]
   811aa:	fa02 f303 	lsl.w	r3, r2, r3
   811ae:	461a      	mov	r2, r3
   811b0:	687b      	ldr	r3, [r7, #4]
   811b2:	665a      	str	r2, [r3, #100]	; 0x64
   811b4:	2300      	movs	r3, #0
   811b6:	4618      	mov	r0, r3
   811b8:	370c      	adds	r7, #12
   811ba:	46bd      	mov	sp, r7
   811bc:	bc80      	pop	{r7}
   811be:	4770      	bx	lr

000811c0 <dd_disable_PULLUP>:
   811c0:	b480      	push	{r7}
   811c2:	b083      	sub	sp, #12
   811c4:	af00      	add	r7, sp, #0
   811c6:	6078      	str	r0, [r7, #4]
   811c8:	6039      	str	r1, [r7, #0]
   811ca:	2201      	movs	r2, #1
   811cc:	683b      	ldr	r3, [r7, #0]
   811ce:	fa02 f303 	lsl.w	r3, r2, r3
   811d2:	461a      	mov	r2, r3
   811d4:	687b      	ldr	r3, [r7, #4]
   811d6:	661a      	str	r2, [r3, #96]	; 0x60
   811d8:	2300      	movs	r3, #0
   811da:	4618      	mov	r0, r3
   811dc:	370c      	adds	r7, #12
   811de:	46bd      	mov	sp, r7
   811e0:	bc80      	pop	{r7}
   811e2:	4770      	bx	lr

000811e4 <dd_enable_OUTPUT_WRITE>:
   811e4:	b480      	push	{r7}
   811e6:	b083      	sub	sp, #12
   811e8:	af00      	add	r7, sp, #0
   811ea:	6078      	str	r0, [r7, #4]
   811ec:	6039      	str	r1, [r7, #0]
   811ee:	2201      	movs	r2, #1
   811f0:	683b      	ldr	r3, [r7, #0]
   811f2:	fa02 f303 	lsl.w	r3, r2, r3
   811f6:	461a      	mov	r2, r3
   811f8:	687b      	ldr	r3, [r7, #4]
   811fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   811fe:	2300      	movs	r3, #0
   81200:	4618      	mov	r0, r3
   81202:	370c      	adds	r7, #12
   81204:	46bd      	mov	sp, r7
   81206:	bc80      	pop	{r7}
   81208:	4770      	bx	lr
   8120a:	bf00      	nop

0008120c <dd_disable_OUTPUT_WRITE>:
   8120c:	b480      	push	{r7}
   8120e:	b083      	sub	sp, #12
   81210:	af00      	add	r7, sp, #0
   81212:	6078      	str	r0, [r7, #4]
   81214:	6039      	str	r1, [r7, #0]
   81216:	2201      	movs	r2, #1
   81218:	683b      	ldr	r3, [r7, #0]
   8121a:	fa02 f303 	lsl.w	r3, r2, r3
   8121e:	461a      	mov	r2, r3
   81220:	687b      	ldr	r3, [r7, #4]
   81222:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
   81226:	2300      	movs	r3, #0
   81228:	4618      	mov	r0, r3
   8122a:	370c      	adds	r7, #12
   8122c:	46bd      	mov	sp, r7
   8122e:	bc80      	pop	{r7}
   81230:	4770      	bx	lr
   81232:	bf00      	nop

00081234 <DD_PS1_INIT>:
 *  Author: Electrical
 */ 
#include "DD_PS1.h"

extern uint8_t command_data_array[20];
void DD_PS1_INIT()   {
   81234:	b580      	push	{r7, lr}
   81236:	b084      	sub	sp, #16
   81238:	af00      	add	r7, sp, #0
	 DD_SPI_PCS_DECODER_DEACTIVE();
   8123a:	4b2a      	ldr	r3, [pc, #168]	; (812e4 <DD_PS1_INIT+0xb0>)
   8123c:	4798      	blx	r3
	 DD_DISABLE_ISOLATORS_MISO_PIN();
   8123e:	4b2a      	ldr	r3, [pc, #168]	; (812e8 <DD_PS1_INIT+0xb4>)
   81240:	4798      	blx	r3
	
	 DD_SPI_PCS_DECODER_ACTIVE();
   81242:	4b2a      	ldr	r3, [pc, #168]	; (812ec <DD_PS1_INIT+0xb8>)
   81244:	4798      	blx	r3
	 command_data_array[0] = ADS1120_RESET;		
   81246:	4b2a      	ldr	r3, [pc, #168]	; (812f0 <DD_PS1_INIT+0xbc>)
   81248:	2206      	movs	r2, #6
   8124a:	701a      	strb	r2, [r3, #0]
 	 dd_spi_set_peripheral_chip_select_value(PS1_CS_N_ID); 	  
   8124c:	2005      	movs	r0, #5
   8124e:	4b29      	ldr	r3, [pc, #164]	; (812f4 <DD_PS1_INIT+0xc0>)
   81250:	4798      	blx	r3
 	 dd_spi_master_transfer(&command_data_array, 1, PS1_CS_N_ID);
   81252:	2205      	movs	r2, #5
   81254:	2101      	movs	r1, #1
   81256:	4826      	ldr	r0, [pc, #152]	; (812f0 <DD_PS1_INIT+0xbc>)
   81258:	4b27      	ldr	r3, [pc, #156]	; (812f8 <DD_PS1_INIT+0xc4>)
   8125a:	4798      	blx	r3
	  
	   for(unsigned int count=0; count<10000000; count++ )   {
   8125c:	2300      	movs	r3, #0
   8125e:	60fb      	str	r3, [r7, #12]
   81260:	e002      	b.n	81268 <DD_PS1_INIT+0x34>
   81262:	68fb      	ldr	r3, [r7, #12]
   81264:	3301      	adds	r3, #1
   81266:	60fb      	str	r3, [r7, #12]
   81268:	68fb      	ldr	r3, [r7, #12]
   8126a:	4a24      	ldr	r2, [pc, #144]	; (812fc <DD_PS1_INIT+0xc8>)
   8126c:	4293      	cmp	r3, r2
   8126e:	d9f8      	bls.n	81262 <DD_PS1_INIT+0x2e>
		   ;
	   }	  
	
	  
	  
	  command_data_array[0] = ADS1120_WREG_COMMAND | ADS1120_WREG_START_REG_ADR(0) | ADS1120_WREG_NO_OF_BYTES(3) ; //0x43;
   81270:	4b1f      	ldr	r3, [pc, #124]	; (812f0 <DD_PS1_INIT+0xbc>)
   81272:	2243      	movs	r2, #67	; 0x43
   81274:	701a      	strb	r2, [r3, #0]
	  command_data_array[1] = ADS1120_CONFIG_REG0_MUX(ADS1120_MUX_AIN1_AIN2) |  ADS1120_CONFIG_REG0_GAIN(ADS1120_DEVICE_GAIN_1) | ADS1120_CONFIG_REG0_PGA_BYPASS ;                                          //0b00110001;
   81276:	4b1e      	ldr	r3, [pc, #120]	; (812f0 <DD_PS1_INIT+0xbc>)
   81278:	2231      	movs	r2, #49	; 0x31
   8127a:	705a      	strb	r2, [r3, #1]
	  command_data_array[2] = ADS1120_CONFIG_REG1_CM | ADS1120_CONFIG_REG1_MODE(ADS1120_MODE_MORMAL) | ADS1120_CONFIG_REG1_DR(ADS1120_DR_20_SPS);//0b00000100;
   8127c:	4b1c      	ldr	r3, [pc, #112]	; (812f0 <DD_PS1_INIT+0xbc>)
   8127e:	2204      	movs	r2, #4
   81280:	709a      	strb	r2, [r3, #2]
	  command_data_array[3] = ADS1120_CONFIG_REG2_50_60(ADS1120_50_REJECTION) | ADS1120_CONFIG_REG2_VREF(ADS1120_AVDD_AVSS); //0b11100000;
   81282:	4b1b      	ldr	r3, [pc, #108]	; (812f0 <DD_PS1_INIT+0xbc>)
   81284:	22e0      	movs	r2, #224	; 0xe0
   81286:	70da      	strb	r2, [r3, #3]
	  command_data_array[4] = 0;                       //0b00000000;
   81288:	4b19      	ldr	r3, [pc, #100]	; (812f0 <DD_PS1_INIT+0xbc>)
   8128a:	2200      	movs	r2, #0
   8128c:	711a      	strb	r2, [r3, #4]
	  dd_spi_set_peripheral_chip_select_value(PS1_CS_N_ID); 
   8128e:	2005      	movs	r0, #5
   81290:	4b18      	ldr	r3, [pc, #96]	; (812f4 <DD_PS1_INIT+0xc0>)
   81292:	4798      	blx	r3
	  dd_spi_master_transfer(&command_data_array, 5, PS1_CS_N_ID);
   81294:	2205      	movs	r2, #5
   81296:	2105      	movs	r1, #5
   81298:	4815      	ldr	r0, [pc, #84]	; (812f0 <DD_PS1_INIT+0xbc>)
   8129a:	4b17      	ldr	r3, [pc, #92]	; (812f8 <DD_PS1_INIT+0xc4>)
   8129c:	4798      	blx	r3
	  
	  for(unsigned int count=0; count<100000; count++ )   {
   8129e:	2300      	movs	r3, #0
   812a0:	60bb      	str	r3, [r7, #8]
   812a2:	e002      	b.n	812aa <DD_PS1_INIT+0x76>
   812a4:	68bb      	ldr	r3, [r7, #8]
   812a6:	3301      	adds	r3, #1
   812a8:	60bb      	str	r3, [r7, #8]
   812aa:	68bb      	ldr	r3, [r7, #8]
   812ac:	4a14      	ldr	r2, [pc, #80]	; (81300 <DD_PS1_INIT+0xcc>)
   812ae:	4293      	cmp	r3, r2
   812b0:	d9f8      	bls.n	812a4 <DD_PS1_INIT+0x70>
		  ;
	  }
	  
	  command_data_array[0] = ADS1120_START_OR_SYNC;
   812b2:	4b0f      	ldr	r3, [pc, #60]	; (812f0 <DD_PS1_INIT+0xbc>)
   812b4:	2208      	movs	r2, #8
   812b6:	701a      	strb	r2, [r3, #0]
	  dd_spi_set_peripheral_chip_select_value(PS1_CS_N_ID); 
   812b8:	2005      	movs	r0, #5
   812ba:	4b0e      	ldr	r3, [pc, #56]	; (812f4 <DD_PS1_INIT+0xc0>)
   812bc:	4798      	blx	r3
	  dd_spi_master_transfer(&command_data_array, 1, PS1_CS_N_ID);	
   812be:	2205      	movs	r2, #5
   812c0:	2101      	movs	r1, #1
   812c2:	480b      	ldr	r0, [pc, #44]	; (812f0 <DD_PS1_INIT+0xbc>)
   812c4:	4b0c      	ldr	r3, [pc, #48]	; (812f8 <DD_PS1_INIT+0xc4>)
   812c6:	4798      	blx	r3
	   for(unsigned int count=0; count<100000; count++ )   {
   812c8:	2300      	movs	r3, #0
   812ca:	607b      	str	r3, [r7, #4]
   812cc:	e002      	b.n	812d4 <DD_PS1_INIT+0xa0>
   812ce:	687b      	ldr	r3, [r7, #4]
   812d0:	3301      	adds	r3, #1
   812d2:	607b      	str	r3, [r7, #4]
   812d4:	687b      	ldr	r3, [r7, #4]
   812d6:	4a0a      	ldr	r2, [pc, #40]	; (81300 <DD_PS1_INIT+0xcc>)
   812d8:	4293      	cmp	r3, r2
   812da:	d9f8      	bls.n	812ce <DD_PS1_INIT+0x9a>
		   ;
	   }
   812dc:	bf00      	nop
   812de:	3710      	adds	r7, #16
   812e0:	46bd      	mov	sp, r7
   812e2:	bd80      	pop	{r7, pc}
   812e4:	00081bc5 	.word	0x00081bc5
   812e8:	00081be1 	.word	0x00081be1
   812ec:	00081ba9 	.word	0x00081ba9
   812f0:	20070ae8 	.word	0x20070ae8
   812f4:	0008170d 	.word	0x0008170d
   812f8:	00081745 	.word	0x00081745
   812fc:	0098967f 	.word	0x0098967f
   81300:	0001869f 	.word	0x0001869f

00081304 <DD_PS2_INIT>:
 *  Author: Electrical
 */ 
#include "DD_PS2.h"

extern uint8_t command_data_array[20];
void DD_PS2_INIT()   {
   81304:	b580      	push	{r7, lr}
   81306:	b084      	sub	sp, #16
   81308:	af00      	add	r7, sp, #0
	 DD_SPI_PCS_DECODER_DEACTIVE();
   8130a:	4b2a      	ldr	r3, [pc, #168]	; (813b4 <DD_PS2_INIT+0xb0>)
   8130c:	4798      	blx	r3
	 DD_DISABLE_ISOLATORS_MISO_PIN();
   8130e:	4b2a      	ldr	r3, [pc, #168]	; (813b8 <DD_PS2_INIT+0xb4>)
   81310:	4798      	blx	r3
	
	DD_SPI_PCS_DECODER_ACTIVE();
   81312:	4b2a      	ldr	r3, [pc, #168]	; (813bc <DD_PS2_INIT+0xb8>)
   81314:	4798      	blx	r3
	command_data_array[0] = ADS1120_RESET;
   81316:	4b2a      	ldr	r3, [pc, #168]	; (813c0 <DD_PS2_INIT+0xbc>)
   81318:	2206      	movs	r2, #6
   8131a:	701a      	strb	r2, [r3, #0]
	dd_spi_set_peripheral_chip_select_value(PS2_CS_N_ID);
   8131c:	2006      	movs	r0, #6
   8131e:	4b29      	ldr	r3, [pc, #164]	; (813c4 <DD_PS2_INIT+0xc0>)
   81320:	4798      	blx	r3
	dd_spi_master_transfer(&command_data_array, 1, PS2_CS_N_ID);
   81322:	2206      	movs	r2, #6
   81324:	2101      	movs	r1, #1
   81326:	4826      	ldr	r0, [pc, #152]	; (813c0 <DD_PS2_INIT+0xbc>)
   81328:	4b27      	ldr	r3, [pc, #156]	; (813c8 <DD_PS2_INIT+0xc4>)
   8132a:	4798      	blx	r3
	
	for(unsigned int count=0; count<10000000; count++ )   {
   8132c:	2300      	movs	r3, #0
   8132e:	60fb      	str	r3, [r7, #12]
   81330:	e002      	b.n	81338 <DD_PS2_INIT+0x34>
   81332:	68fb      	ldr	r3, [r7, #12]
   81334:	3301      	adds	r3, #1
   81336:	60fb      	str	r3, [r7, #12]
   81338:	68fb      	ldr	r3, [r7, #12]
   8133a:	4a24      	ldr	r2, [pc, #144]	; (813cc <DD_PS2_INIT+0xc8>)
   8133c:	4293      	cmp	r3, r2
   8133e:	d9f8      	bls.n	81332 <DD_PS2_INIT+0x2e>
		;
	}
	
	
	
	command_data_array[0] = ADS1120_WREG_COMMAND | ADS1120_WREG_START_REG_ADR(0) | ADS1120_WREG_NO_OF_BYTES(3) ; //0x43;
   81340:	4b1f      	ldr	r3, [pc, #124]	; (813c0 <DD_PS2_INIT+0xbc>)
   81342:	2243      	movs	r2, #67	; 0x43
   81344:	701a      	strb	r2, [r3, #0]
	command_data_array[1] = ADS1120_CONFIG_REG0_MUX(ADS1120_MUX_AIN1_AIN2) |  ADS1120_CONFIG_REG0_GAIN(ADS1120_DEVICE_GAIN_1) | ADS1120_CONFIG_REG0_PGA_BYPASS ;                                          //0b00110001;
   81346:	4b1e      	ldr	r3, [pc, #120]	; (813c0 <DD_PS2_INIT+0xbc>)
   81348:	2231      	movs	r2, #49	; 0x31
   8134a:	705a      	strb	r2, [r3, #1]
	command_data_array[2] = ADS1120_CONFIG_REG1_CM | ADS1120_CONFIG_REG1_MODE(ADS1120_MODE_MORMAL) | ADS1120_CONFIG_REG1_DR(ADS1120_DR_20_SPS);//0b00000100;
   8134c:	4b1c      	ldr	r3, [pc, #112]	; (813c0 <DD_PS2_INIT+0xbc>)
   8134e:	2204      	movs	r2, #4
   81350:	709a      	strb	r2, [r3, #2]
	command_data_array[3] = ADS1120_CONFIG_REG2_50_60(ADS1120_50_REJECTION) | ADS1120_CONFIG_REG2_VREF(ADS1120_AVDD_AVSS); //0b11100000;
   81352:	4b1b      	ldr	r3, [pc, #108]	; (813c0 <DD_PS2_INIT+0xbc>)
   81354:	22e0      	movs	r2, #224	; 0xe0
   81356:	70da      	strb	r2, [r3, #3]
	command_data_array[4] = 0;                       //0b00000000;
   81358:	4b19      	ldr	r3, [pc, #100]	; (813c0 <DD_PS2_INIT+0xbc>)
   8135a:	2200      	movs	r2, #0
   8135c:	711a      	strb	r2, [r3, #4]
	dd_spi_set_peripheral_chip_select_value(PS2_CS_N_ID);
   8135e:	2006      	movs	r0, #6
   81360:	4b18      	ldr	r3, [pc, #96]	; (813c4 <DD_PS2_INIT+0xc0>)
   81362:	4798      	blx	r3
	dd_spi_master_transfer(&command_data_array, 5, PS2_CS_N_ID);
   81364:	2206      	movs	r2, #6
   81366:	2105      	movs	r1, #5
   81368:	4815      	ldr	r0, [pc, #84]	; (813c0 <DD_PS2_INIT+0xbc>)
   8136a:	4b17      	ldr	r3, [pc, #92]	; (813c8 <DD_PS2_INIT+0xc4>)
   8136c:	4798      	blx	r3
	
	for(unsigned int count=0; count<10000000; count++ )   {
   8136e:	2300      	movs	r3, #0
   81370:	60bb      	str	r3, [r7, #8]
   81372:	e002      	b.n	8137a <DD_PS2_INIT+0x76>
   81374:	68bb      	ldr	r3, [r7, #8]
   81376:	3301      	adds	r3, #1
   81378:	60bb      	str	r3, [r7, #8]
   8137a:	68bb      	ldr	r3, [r7, #8]
   8137c:	4a13      	ldr	r2, [pc, #76]	; (813cc <DD_PS2_INIT+0xc8>)
   8137e:	4293      	cmp	r3, r2
   81380:	d9f8      	bls.n	81374 <DD_PS2_INIT+0x70>
		;
	}
	
	command_data_array[0] = ADS1120_START_OR_SYNC;
   81382:	4b0f      	ldr	r3, [pc, #60]	; (813c0 <DD_PS2_INIT+0xbc>)
   81384:	2208      	movs	r2, #8
   81386:	701a      	strb	r2, [r3, #0]
	dd_spi_set_peripheral_chip_select_value(PS2_CS_N_ID);
   81388:	2006      	movs	r0, #6
   8138a:	4b0e      	ldr	r3, [pc, #56]	; (813c4 <DD_PS2_INIT+0xc0>)
   8138c:	4798      	blx	r3
	dd_spi_master_transfer(&command_data_array, 1, PS2_CS_N_ID);
   8138e:	2206      	movs	r2, #6
   81390:	2101      	movs	r1, #1
   81392:	480b      	ldr	r0, [pc, #44]	; (813c0 <DD_PS2_INIT+0xbc>)
   81394:	4b0c      	ldr	r3, [pc, #48]	; (813c8 <DD_PS2_INIT+0xc4>)
   81396:	4798      	blx	r3
	for(unsigned int count=0; count<10000000; count++ )   {
   81398:	2300      	movs	r3, #0
   8139a:	607b      	str	r3, [r7, #4]
   8139c:	e002      	b.n	813a4 <DD_PS2_INIT+0xa0>
   8139e:	687b      	ldr	r3, [r7, #4]
   813a0:	3301      	adds	r3, #1
   813a2:	607b      	str	r3, [r7, #4]
   813a4:	687b      	ldr	r3, [r7, #4]
   813a6:	4a09      	ldr	r2, [pc, #36]	; (813cc <DD_PS2_INIT+0xc8>)
   813a8:	4293      	cmp	r3, r2
   813aa:	d9f8      	bls.n	8139e <DD_PS2_INIT+0x9a>
		;
	}
   813ac:	bf00      	nop
   813ae:	3710      	adds	r7, #16
   813b0:	46bd      	mov	sp, r7
   813b2:	bd80      	pop	{r7, pc}
   813b4:	00081bc5 	.word	0x00081bc5
   813b8:	00081be1 	.word	0x00081be1
   813bc:	00081ba9 	.word	0x00081ba9
   813c0:	20070ae8 	.word	0x20070ae8
   813c4:	0008170d 	.word	0x0008170d
   813c8:	00081745 	.word	0x00081745
   813cc:	0098967f 	.word	0x0098967f

000813d0 <DD_PS3_INIT>:
 */ 

#include "DD_PS3.h"

extern uint8_t command_data_array[20];
void DD_PS3_INIT()   {
   813d0:	b580      	push	{r7, lr}
   813d2:	b084      	sub	sp, #16
   813d4:	af00      	add	r7, sp, #0
	 DD_SPI_PCS_DECODER_DEACTIVE();
   813d6:	4b2a      	ldr	r3, [pc, #168]	; (81480 <DD_PS3_INIT+0xb0>)
   813d8:	4798      	blx	r3
	 DD_DISABLE_ISOLATORS_MISO_PIN();
   813da:	4b2a      	ldr	r3, [pc, #168]	; (81484 <DD_PS3_INIT+0xb4>)
   813dc:	4798      	blx	r3
	
	DD_SPI_PCS_DECODER_ACTIVE();
   813de:	4b2a      	ldr	r3, [pc, #168]	; (81488 <DD_PS3_INIT+0xb8>)
   813e0:	4798      	blx	r3
	command_data_array[0] = ADS1120_RESET;
   813e2:	4b2a      	ldr	r3, [pc, #168]	; (8148c <DD_PS3_INIT+0xbc>)
   813e4:	2206      	movs	r2, #6
   813e6:	701a      	strb	r2, [r3, #0]
	dd_spi_set_peripheral_chip_select_value(PS3_CS_N_ID);
   813e8:	2007      	movs	r0, #7
   813ea:	4b29      	ldr	r3, [pc, #164]	; (81490 <DD_PS3_INIT+0xc0>)
   813ec:	4798      	blx	r3
	dd_spi_master_transfer(&command_data_array, 1, PS3_CS_N_ID);
   813ee:	2207      	movs	r2, #7
   813f0:	2101      	movs	r1, #1
   813f2:	4826      	ldr	r0, [pc, #152]	; (8148c <DD_PS3_INIT+0xbc>)
   813f4:	4b27      	ldr	r3, [pc, #156]	; (81494 <DD_PS3_INIT+0xc4>)
   813f6:	4798      	blx	r3
	
	for(unsigned int count=0; count<10000000; count++ )   {
   813f8:	2300      	movs	r3, #0
   813fa:	60fb      	str	r3, [r7, #12]
   813fc:	e002      	b.n	81404 <DD_PS3_INIT+0x34>
   813fe:	68fb      	ldr	r3, [r7, #12]
   81400:	3301      	adds	r3, #1
   81402:	60fb      	str	r3, [r7, #12]
   81404:	68fb      	ldr	r3, [r7, #12]
   81406:	4a24      	ldr	r2, [pc, #144]	; (81498 <DD_PS3_INIT+0xc8>)
   81408:	4293      	cmp	r3, r2
   8140a:	d9f8      	bls.n	813fe <DD_PS3_INIT+0x2e>
		;
	}
	
	
	
	command_data_array[0] = ADS1120_WREG_COMMAND | ADS1120_WREG_START_REG_ADR(0) | ADS1120_WREG_NO_OF_BYTES(3) ; //0x43;
   8140c:	4b1f      	ldr	r3, [pc, #124]	; (8148c <DD_PS3_INIT+0xbc>)
   8140e:	2243      	movs	r2, #67	; 0x43
   81410:	701a      	strb	r2, [r3, #0]
	command_data_array[1] = ADS1120_CONFIG_REG0_MUX(ADS1120_MUX_AIN1_AIN2) |  ADS1120_CONFIG_REG0_GAIN(ADS1120_DEVICE_GAIN_1) | ADS1120_CONFIG_REG0_PGA_BYPASS ;                                          //0b00110001;
   81412:	4b1e      	ldr	r3, [pc, #120]	; (8148c <DD_PS3_INIT+0xbc>)
   81414:	2231      	movs	r2, #49	; 0x31
   81416:	705a      	strb	r2, [r3, #1]
	command_data_array[2] = ADS1120_CONFIG_REG1_CM | ADS1120_CONFIG_REG1_MODE(ADS1120_MODE_MORMAL) | ADS1120_CONFIG_REG1_DR(ADS1120_DR_20_SPS);//0b00000100;
   81418:	4b1c      	ldr	r3, [pc, #112]	; (8148c <DD_PS3_INIT+0xbc>)
   8141a:	2204      	movs	r2, #4
   8141c:	709a      	strb	r2, [r3, #2]
	command_data_array[3] = ADS1120_CONFIG_REG2_50_60(ADS1120_50_REJECTION) | ADS1120_CONFIG_REG2_VREF(ADS1120_AVDD_AVSS); //0b11100000;
   8141e:	4b1b      	ldr	r3, [pc, #108]	; (8148c <DD_PS3_INIT+0xbc>)
   81420:	22e0      	movs	r2, #224	; 0xe0
   81422:	70da      	strb	r2, [r3, #3]
	command_data_array[4] = 0;                       //0b00000000;
   81424:	4b19      	ldr	r3, [pc, #100]	; (8148c <DD_PS3_INIT+0xbc>)
   81426:	2200      	movs	r2, #0
   81428:	711a      	strb	r2, [r3, #4]
	dd_spi_set_peripheral_chip_select_value(PS3_CS_N_ID);
   8142a:	2007      	movs	r0, #7
   8142c:	4b18      	ldr	r3, [pc, #96]	; (81490 <DD_PS3_INIT+0xc0>)
   8142e:	4798      	blx	r3
	dd_spi_master_transfer(&command_data_array, 5, PS3_CS_N_ID);
   81430:	2207      	movs	r2, #7
   81432:	2105      	movs	r1, #5
   81434:	4815      	ldr	r0, [pc, #84]	; (8148c <DD_PS3_INIT+0xbc>)
   81436:	4b17      	ldr	r3, [pc, #92]	; (81494 <DD_PS3_INIT+0xc4>)
   81438:	4798      	blx	r3
	
	for(unsigned int count=0; count<10000000; count++ )   {
   8143a:	2300      	movs	r3, #0
   8143c:	60bb      	str	r3, [r7, #8]
   8143e:	e002      	b.n	81446 <DD_PS3_INIT+0x76>
   81440:	68bb      	ldr	r3, [r7, #8]
   81442:	3301      	adds	r3, #1
   81444:	60bb      	str	r3, [r7, #8]
   81446:	68bb      	ldr	r3, [r7, #8]
   81448:	4a13      	ldr	r2, [pc, #76]	; (81498 <DD_PS3_INIT+0xc8>)
   8144a:	4293      	cmp	r3, r2
   8144c:	d9f8      	bls.n	81440 <DD_PS3_INIT+0x70>
		;
	}
	
	command_data_array[0] = ADS1120_START_OR_SYNC;
   8144e:	4b0f      	ldr	r3, [pc, #60]	; (8148c <DD_PS3_INIT+0xbc>)
   81450:	2208      	movs	r2, #8
   81452:	701a      	strb	r2, [r3, #0]
	dd_spi_set_peripheral_chip_select_value(PS3_CS_N_ID);
   81454:	2007      	movs	r0, #7
   81456:	4b0e      	ldr	r3, [pc, #56]	; (81490 <DD_PS3_INIT+0xc0>)
   81458:	4798      	blx	r3
	dd_spi_master_transfer(&command_data_array, 1, PS3_CS_N_ID);
   8145a:	2207      	movs	r2, #7
   8145c:	2101      	movs	r1, #1
   8145e:	480b      	ldr	r0, [pc, #44]	; (8148c <DD_PS3_INIT+0xbc>)
   81460:	4b0c      	ldr	r3, [pc, #48]	; (81494 <DD_PS3_INIT+0xc4>)
   81462:	4798      	blx	r3
	for(unsigned int count=0; count<10000000; count++ )   {
   81464:	2300      	movs	r3, #0
   81466:	607b      	str	r3, [r7, #4]
   81468:	e002      	b.n	81470 <DD_PS3_INIT+0xa0>
   8146a:	687b      	ldr	r3, [r7, #4]
   8146c:	3301      	adds	r3, #1
   8146e:	607b      	str	r3, [r7, #4]
   81470:	687b      	ldr	r3, [r7, #4]
   81472:	4a09      	ldr	r2, [pc, #36]	; (81498 <DD_PS3_INIT+0xc8>)
   81474:	4293      	cmp	r3, r2
   81476:	d9f8      	bls.n	8146a <DD_PS3_INIT+0x9a>
		;
	}
   81478:	bf00      	nop
   8147a:	3710      	adds	r7, #16
   8147c:	46bd      	mov	sp, r7
   8147e:	bd80      	pop	{r7, pc}
   81480:	00081bc5 	.word	0x00081bc5
   81484:	00081be1 	.word	0x00081be1
   81488:	00081ba9 	.word	0x00081ba9
   8148c:	20070ae8 	.word	0x20070ae8
   81490:	0008170d 	.word	0x0008170d
   81494:	00081745 	.word	0x00081745
   81498:	0098967f 	.word	0x0098967f

0008149c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   8149c:	b480      	push	{r7}
   8149e:	b083      	sub	sp, #12
   814a0:	af00      	add	r7, sp, #0
   814a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   814a4:	687b      	ldr	r3, [r7, #4]
   814a6:	2b07      	cmp	r3, #7
   814a8:	d825      	bhi.n	814f6 <osc_get_rate+0x5a>
   814aa:	a201      	add	r2, pc, #4	; (adr r2, 814b0 <osc_get_rate+0x14>)
   814ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   814b0:	000814d1 	.word	0x000814d1
   814b4:	000814d7 	.word	0x000814d7
   814b8:	000814dd 	.word	0x000814dd
   814bc:	000814e3 	.word	0x000814e3
   814c0:	000814e7 	.word	0x000814e7
   814c4:	000814eb 	.word	0x000814eb
   814c8:	000814ef 	.word	0x000814ef
   814cc:	000814f3 	.word	0x000814f3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   814d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   814d4:	e010      	b.n	814f8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   814d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   814da:	e00d      	b.n	814f8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   814dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   814e0:	e00a      	b.n	814f8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   814e2:	4b08      	ldr	r3, [pc, #32]	; (81504 <osc_get_rate+0x68>)
   814e4:	e008      	b.n	814f8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   814e6:	4b08      	ldr	r3, [pc, #32]	; (81508 <osc_get_rate+0x6c>)
   814e8:	e006      	b.n	814f8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   814ea:	4b08      	ldr	r3, [pc, #32]	; (8150c <osc_get_rate+0x70>)
   814ec:	e004      	b.n	814f8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   814ee:	4b07      	ldr	r3, [pc, #28]	; (8150c <osc_get_rate+0x70>)
   814f0:	e002      	b.n	814f8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   814f2:	4b06      	ldr	r3, [pc, #24]	; (8150c <osc_get_rate+0x70>)
   814f4:	e000      	b.n	814f8 <osc_get_rate+0x5c>
	}

	return 0;
   814f6:	2300      	movs	r3, #0
}
   814f8:	4618      	mov	r0, r3
   814fa:	370c      	adds	r7, #12
   814fc:	46bd      	mov	sp, r7
   814fe:	bc80      	pop	{r7}
   81500:	4770      	bx	lr
   81502:	bf00      	nop
   81504:	003d0900 	.word	0x003d0900
   81508:	007a1200 	.word	0x007a1200
   8150c:	00b71b00 	.word	0x00b71b00

00081510 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81510:	b580      	push	{r7, lr}
   81512:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   81514:	2006      	movs	r0, #6
   81516:	4b04      	ldr	r3, [pc, #16]	; (81528 <sysclk_get_main_hz+0x18>)
   81518:	4798      	blx	r3
   8151a:	4602      	mov	r2, r0
   8151c:	4613      	mov	r3, r2
   8151e:	00db      	lsls	r3, r3, #3
   81520:	1a9b      	subs	r3, r3, r2
   81522:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81524:	4618      	mov	r0, r3
   81526:	bd80      	pop	{r7, pc}
   81528:	0008149d 	.word	0x0008149d

0008152c <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   8152c:	b580      	push	{r7, lr}
   8152e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   81530:	4b02      	ldr	r3, [pc, #8]	; (8153c <sysclk_get_peripheral_hz+0x10>)
   81532:	4798      	blx	r3
   81534:	4603      	mov	r3, r0
   81536:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   81538:	4618      	mov	r0, r3
   8153a:	bd80      	pop	{r7, pc}
   8153c:	00081511 	.word	0x00081511

00081540 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81540:	b580      	push	{r7, lr}
   81542:	b082      	sub	sp, #8
   81544:	af00      	add	r7, sp, #0
   81546:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81548:	6878      	ldr	r0, [r7, #4]
   8154a:	4b03      	ldr	r3, [pc, #12]	; (81558 <sysclk_enable_peripheral_clock+0x18>)
   8154c:	4798      	blx	r3
}
   8154e:	bf00      	nop
   81550:	3708      	adds	r7, #8
   81552:	46bd      	mov	sp, r7
   81554:	bd80      	pop	{r7, pc}
   81556:	bf00      	nop
   81558:	000847fd 	.word	0x000847fd

0008155c <dd_spi_set_transfer_delay>:
void dd_spi_set_delay_between_chip_select(uint32_t ul_delay) {
	SPI0->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
	SPI0->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
}

void dd_spi_set_transfer_delay(CHIP_SEL_GROUP_TYPE ul_pcs_group_id, uint8_t uc_dlybs, uint8_t uc_dlybct)  {
   8155c:	b490      	push	{r4, r7}
   8155e:	b082      	sub	sp, #8
   81560:	af00      	add	r7, sp, #0
   81562:	4603      	mov	r3, r0
   81564:	71fb      	strb	r3, [r7, #7]
   81566:	460b      	mov	r3, r1
   81568:	71bb      	strb	r3, [r7, #6]
   8156a:	4613      	mov	r3, r2
   8156c:	717b      	strb	r3, [r7, #5]
	SPI0->SPI_CSR[ul_pcs_group_id] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   8156e:	4911      	ldr	r1, [pc, #68]	; (815b4 <dd_spi_set_transfer_delay+0x58>)
   81570:	79fb      	ldrb	r3, [r7, #7]
   81572:	4810      	ldr	r0, [pc, #64]	; (815b4 <dd_spi_set_transfer_delay+0x58>)
   81574:	79fa      	ldrb	r2, [r7, #7]
   81576:	320c      	adds	r2, #12
   81578:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   8157c:	b292      	uxth	r2, r2
   8157e:	330c      	adds	r3, #12
   81580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_DLYBS(uc_dlybs) | SPI_CSR_DLYBCT(uc_dlybct);
   81584:	4c0b      	ldr	r4, [pc, #44]	; (815b4 <dd_spi_set_transfer_delay+0x58>)
   81586:	79fb      	ldrb	r3, [r7, #7]
   81588:	490a      	ldr	r1, [pc, #40]	; (815b4 <dd_spi_set_transfer_delay+0x58>)
   8158a:	79fa      	ldrb	r2, [r7, #7]
   8158c:	320c      	adds	r2, #12
   8158e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   81592:	79ba      	ldrb	r2, [r7, #6]
   81594:	0412      	lsls	r2, r2, #16
   81596:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   8159a:	7978      	ldrb	r0, [r7, #5]
   8159c:	0600      	lsls	r0, r0, #24
   8159e:	4302      	orrs	r2, r0
   815a0:	430a      	orrs	r2, r1
   815a2:	330c      	adds	r3, #12
   815a4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
   815a8:	bf00      	nop
   815aa:	3708      	adds	r7, #8
   815ac:	46bd      	mov	sp, r7
   815ae:	bc90      	pop	{r4, r7}
   815b0:	4770      	bx	lr
   815b2:	bf00      	nop
   815b4:	40008000 	.word	0x40008000

000815b8 <dd_spi_set_bits_per_transfer>:

void dd_spi_set_bits_per_transfer(CHIP_SEL_GROUP_TYPE ul_pcs_group_id, uint32_t ul_bits)
{
   815b8:	b480      	push	{r7}
   815ba:	b083      	sub	sp, #12
   815bc:	af00      	add	r7, sp, #0
   815be:	4603      	mov	r3, r0
   815c0:	6039      	str	r1, [r7, #0]
   815c2:	71fb      	strb	r3, [r7, #7]
	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_BITS_Msk);
   815c4:	490e      	ldr	r1, [pc, #56]	; (81600 <dd_spi_set_bits_per_transfer+0x48>)
   815c6:	79fb      	ldrb	r3, [r7, #7]
   815c8:	480d      	ldr	r0, [pc, #52]	; (81600 <dd_spi_set_bits_per_transfer+0x48>)
   815ca:	79fa      	ldrb	r2, [r7, #7]
   815cc:	320c      	adds	r2, #12
   815ce:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   815d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
   815d6:	330c      	adds	r3, #12
   815d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= ul_bits;
   815dc:	4808      	ldr	r0, [pc, #32]	; (81600 <dd_spi_set_bits_per_transfer+0x48>)
   815de:	79fb      	ldrb	r3, [r7, #7]
   815e0:	4907      	ldr	r1, [pc, #28]	; (81600 <dd_spi_set_bits_per_transfer+0x48>)
   815e2:	79fa      	ldrb	r2, [r7, #7]
   815e4:	320c      	adds	r2, #12
   815e6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   815ea:	683a      	ldr	r2, [r7, #0]
   815ec:	430a      	orrs	r2, r1
   815ee:	330c      	adds	r3, #12
   815f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   815f4:	bf00      	nop
   815f6:	370c      	adds	r7, #12
   815f8:	46bd      	mov	sp, r7
   815fa:	bc80      	pop	{r7}
   815fc:	4770      	bx	lr
   815fe:	bf00      	nop
   81600:	40008000 	.word	0x40008000

00081604 <dd_spi_set_clock_polarity>:
		SPI0->SPI_WPMR =  (0x53504900);
	}
	
}

void dd_spi_set_clock_polarity(CHIP_SEL_GROUP_TYPE ul_pcs_group_id, uint32_t ul_polarity)   {
   81604:	b480      	push	{r7}
   81606:	b083      	sub	sp, #12
   81608:	af00      	add	r7, sp, #0
   8160a:	4603      	mov	r3, r0
   8160c:	6039      	str	r1, [r7, #0]
   8160e:	71fb      	strb	r3, [r7, #7]
	
	if (ul_polarity) {
   81610:	683b      	ldr	r3, [r7, #0]
   81612:	2b00      	cmp	r3, #0
   81614:	d00c      	beq.n	81630 <dd_spi_set_clock_polarity+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
   81616:	490f      	ldr	r1, [pc, #60]	; (81654 <dd_spi_set_clock_polarity+0x50>)
   81618:	79fb      	ldrb	r3, [r7, #7]
   8161a:	480e      	ldr	r0, [pc, #56]	; (81654 <dd_spi_set_clock_polarity+0x50>)
   8161c:	79fa      	ldrb	r2, [r7, #7]
   8161e:	320c      	adds	r2, #12
   81620:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   81624:	f042 0201 	orr.w	r2, r2, #1
   81628:	330c      	adds	r3, #12
   8162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
	}	
}
   8162e:	e00b      	b.n	81648 <dd_spi_set_clock_polarity+0x44>
void dd_spi_set_clock_polarity(CHIP_SEL_GROUP_TYPE ul_pcs_group_id, uint32_t ul_polarity)   {
	
	if (ul_polarity) {
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
   81630:	4908      	ldr	r1, [pc, #32]	; (81654 <dd_spi_set_clock_polarity+0x50>)
   81632:	79fb      	ldrb	r3, [r7, #7]
   81634:	4807      	ldr	r0, [pc, #28]	; (81654 <dd_spi_set_clock_polarity+0x50>)
   81636:	79fa      	ldrb	r2, [r7, #7]
   81638:	320c      	adds	r2, #12
   8163a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   8163e:	f022 0201 	bic.w	r2, r2, #1
   81642:	330c      	adds	r3, #12
   81644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}	
}
   81648:	bf00      	nop
   8164a:	370c      	adds	r7, #12
   8164c:	46bd      	mov	sp, r7
   8164e:	bc80      	pop	{r7}
   81650:	4770      	bx	lr
   81652:	bf00      	nop
   81654:	40008000 	.word	0x40008000

00081658 <dd_spi_set_clock_phase>:

void dd_spi_set_clock_phase(CHIP_SEL_GROUP_TYPE ul_pcs_group_id, uint32_t ul_phase)
{
   81658:	b480      	push	{r7}
   8165a:	b083      	sub	sp, #12
   8165c:	af00      	add	r7, sp, #0
   8165e:	4603      	mov	r3, r0
   81660:	6039      	str	r1, [r7, #0]
   81662:	71fb      	strb	r3, [r7, #7]
	if (ul_phase) {
   81664:	683b      	ldr	r3, [r7, #0]
   81666:	2b00      	cmp	r3, #0
   81668:	d00c      	beq.n	81684 <dd_spi_set_clock_phase+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
   8166a:	490f      	ldr	r1, [pc, #60]	; (816a8 <dd_spi_set_clock_phase+0x50>)
   8166c:	79fb      	ldrb	r3, [r7, #7]
   8166e:	480e      	ldr	r0, [pc, #56]	; (816a8 <dd_spi_set_clock_phase+0x50>)
   81670:	79fa      	ldrb	r2, [r7, #7]
   81672:	320c      	adds	r2, #12
   81674:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   81678:	f042 0202 	orr.w	r2, r2, #2
   8167c:	330c      	adds	r3, #12
   8167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
	}
}
   81682:	e00b      	b.n	8169c <dd_spi_set_clock_phase+0x44>
void dd_spi_set_clock_phase(CHIP_SEL_GROUP_TYPE ul_pcs_group_id, uint32_t ul_phase)
{
	if (ul_phase) {
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
   81684:	4908      	ldr	r1, [pc, #32]	; (816a8 <dd_spi_set_clock_phase+0x50>)
   81686:	79fb      	ldrb	r3, [r7, #7]
   81688:	4807      	ldr	r0, [pc, #28]	; (816a8 <dd_spi_set_clock_phase+0x50>)
   8168a:	79fa      	ldrb	r2, [r7, #7]
   8168c:	320c      	adds	r2, #12
   8168e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   81692:	f022 0202 	bic.w	r2, r2, #2
   81696:	330c      	adds	r3, #12
   81698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
   8169c:	bf00      	nop
   8169e:	370c      	adds	r7, #12
   816a0:	46bd      	mov	sp, r7
   816a2:	bc80      	pop	{r7}
   816a4:	4770      	bx	lr
   816a6:	bf00      	nop
   816a8:	40008000 	.word	0x40008000

000816ac <dd_spi_set_baudrate_div>:

int16_t dd_spi_set_baudrate_div(CHIP_SEL_GROUP_TYPE ul_pcs_group_id,uint8_t uc_baudrate_divider)
{
   816ac:	b480      	push	{r7}
   816ae:	b083      	sub	sp, #12
   816b0:	af00      	add	r7, sp, #0
   816b2:	4603      	mov	r3, r0
   816b4:	460a      	mov	r2, r1
   816b6:	71fb      	strb	r3, [r7, #7]
   816b8:	4613      	mov	r3, r2
   816ba:	71bb      	strb	r3, [r7, #6]
	/* Programming the SCBR field to 0 is forbidden */
	if (!uc_baudrate_divider)
   816bc:	79bb      	ldrb	r3, [r7, #6]
   816be:	2b00      	cmp	r3, #0
   816c0:	d102      	bne.n	816c8 <dd_spi_set_baudrate_div+0x1c>
	return -1;
   816c2:	f04f 33ff 	mov.w	r3, #4294967295
   816c6:	e01a      	b.n	816fe <dd_spi_set_baudrate_div+0x52>

	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_SCBR_Msk);
   816c8:	490f      	ldr	r1, [pc, #60]	; (81708 <dd_spi_set_baudrate_div+0x5c>)
   816ca:	79fb      	ldrb	r3, [r7, #7]
   816cc:	480e      	ldr	r0, [pc, #56]	; (81708 <dd_spi_set_baudrate_div+0x5c>)
   816ce:	79fa      	ldrb	r2, [r7, #7]
   816d0:	320c      	adds	r2, #12
   816d2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   816d6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
   816da:	330c      	adds	r3, #12
   816dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_SCBR(uc_baudrate_divider);
   816e0:	4809      	ldr	r0, [pc, #36]	; (81708 <dd_spi_set_baudrate_div+0x5c>)
   816e2:	79fb      	ldrb	r3, [r7, #7]
   816e4:	4908      	ldr	r1, [pc, #32]	; (81708 <dd_spi_set_baudrate_div+0x5c>)
   816e6:	79fa      	ldrb	r2, [r7, #7]
   816e8:	320c      	adds	r2, #12
   816ea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   816ee:	79ba      	ldrb	r2, [r7, #6]
   816f0:	0212      	lsls	r2, r2, #8
   816f2:	b292      	uxth	r2, r2
   816f4:	430a      	orrs	r2, r1
   816f6:	330c      	adds	r3, #12
   816f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	return 0;
   816fc:	2300      	movs	r3, #0
}
   816fe:	4618      	mov	r0, r3
   81700:	370c      	adds	r7, #12
   81702:	46bd      	mov	sp, r7
   81704:	bc80      	pop	{r7}
   81706:	4770      	bx	lr
   81708:	40008000 	.word	0x40008000

0008170c <dd_spi_set_peripheral_chip_select_value>:

void dd_spi_set_peripheral_chip_select_value(SPI_DECODER_MUX_ID_TYPE pcs_ul_value)
{
   8170c:	b480      	push	{r7}
   8170e:	b083      	sub	sp, #12
   81710:	af00      	add	r7, sp, #0
   81712:	4603      	mov	r3, r0
   81714:	71fb      	strb	r3, [r7, #7]
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
   81716:	4a0a      	ldr	r2, [pc, #40]	; (81740 <dd_spi_set_peripheral_chip_select_value+0x34>)
   81718:	4b09      	ldr	r3, [pc, #36]	; (81740 <dd_spi_set_peripheral_chip_select_value+0x34>)
   8171a:	685b      	ldr	r3, [r3, #4]
   8171c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   81720:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR |= ((SPI_MR_PCS_Msk & ((pcs_ul_value) << SPI_MR_PCS_Pos)));
   81722:	4907      	ldr	r1, [pc, #28]	; (81740 <dd_spi_set_peripheral_chip_select_value+0x34>)
   81724:	4b06      	ldr	r3, [pc, #24]	; (81740 <dd_spi_set_peripheral_chip_select_value+0x34>)
   81726:	685a      	ldr	r2, [r3, #4]
   81728:	79fb      	ldrb	r3, [r7, #7]
   8172a:	041b      	lsls	r3, r3, #16
   8172c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   81730:	4313      	orrs	r3, r2
   81732:	604b      	str	r3, [r1, #4]
}
   81734:	bf00      	nop
   81736:	370c      	adds	r7, #12
   81738:	46bd      	mov	sp, r7
   8173a:	bc80      	pop	{r7}
   8173c:	4770      	bx	lr
   8173e:	bf00      	nop
   81740:	40008000 	.word	0x40008000

00081744 <dd_spi_master_transfer>:


void dd_spi_master_transfer(void *p_buf, uint32_t size, SPI_DECODER_MUX_ID_TYPE uc_pcs)  {
   81744:	b580      	push	{r7, lr}
   81746:	b086      	sub	sp, #24
   81748:	af00      	add	r7, sp, #0
   8174a:	60f8      	str	r0, [r7, #12]
   8174c:	60b9      	str	r1, [r7, #8]
   8174e:	4613      	mov	r3, r2
   81750:	71fb      	strb	r3, [r7, #7]
	uint8_t uc__temp_pcs;
	static uint8_t data;

	uint8_t *p_buffer;

	p_buffer = p_buf;
   81752:	68fb      	ldr	r3, [r7, #12]
   81754:	613b      	str	r3, [r7, #16]

	for (i = 0; i < size; i++) {		
   81756:	2300      	movs	r3, #0
   81758:	617b      	str	r3, [r7, #20]
   8175a:	e01b      	b.n	81794 <dd_spi_master_transfer+0x50>
			dd_spi_write(p_buffer[i], uc_pcs,0); 	
   8175c:	693a      	ldr	r2, [r7, #16]
   8175e:	697b      	ldr	r3, [r7, #20]
   81760:	4413      	add	r3, r2
   81762:	781b      	ldrb	r3, [r3, #0]
   81764:	79f9      	ldrb	r1, [r7, #7]
   81766:	2200      	movs	r2, #0
   81768:	4618      	mov	r0, r3
   8176a:	4b0e      	ldr	r3, [pc, #56]	; (817a4 <dd_spi_master_transfer+0x60>)
   8176c:	4798      	blx	r3
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);		  
   8176e:	bf00      	nop
   81770:	4b0d      	ldr	r3, [pc, #52]	; (817a8 <dd_spi_master_transfer+0x64>)
   81772:	691b      	ldr	r3, [r3, #16]
   81774:	f003 0301 	and.w	r3, r3, #1
   81778:	2b00      	cmp	r3, #0
   8177a:	d0f9      	beq.n	81770 <dd_spi_master_transfer+0x2c>
		dd_spi_read(&data);
   8177c:	480b      	ldr	r0, [pc, #44]	; (817ac <dd_spi_master_transfer+0x68>)
   8177e:	4b0c      	ldr	r3, [pc, #48]	; (817b0 <dd_spi_master_transfer+0x6c>)
   81780:	4798      	blx	r3
		p_buffer[i] = data;
   81782:	693a      	ldr	r2, [r7, #16]
   81784:	697b      	ldr	r3, [r7, #20]
   81786:	4413      	add	r3, r2
   81788:	4a08      	ldr	r2, [pc, #32]	; (817ac <dd_spi_master_transfer+0x68>)
   8178a:	7812      	ldrb	r2, [r2, #0]
   8178c:	701a      	strb	r2, [r3, #0]

	uint8_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {		
   8178e:	697b      	ldr	r3, [r7, #20]
   81790:	3301      	adds	r3, #1
   81792:	617b      	str	r3, [r7, #20]
   81794:	697a      	ldr	r2, [r7, #20]
   81796:	68bb      	ldr	r3, [r7, #8]
   81798:	429a      	cmp	r2, r3
   8179a:	d3df      	bcc.n	8175c <dd_spi_master_transfer+0x18>
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);		  
		dd_spi_read(&data);
		p_buffer[i] = data;
	}
}
   8179c:	bf00      	nop
   8179e:	3718      	adds	r7, #24
   817a0:	46bd      	mov	sp, r7
   817a2:	bd80      	pop	{r7, pc}
   817a4:	00081821 	.word	0x00081821
   817a8:	40008000 	.word	0x40008000
   817ac:	200709fe 	.word	0x200709fe
   817b0:	00081891 	.word	0x00081891

000817b4 <dd_spi_master_read>:

void dd_spi_master_read(void *p_buf, uint32_t size, SPI_DECODER_MUX_ID_TYPE uc_pcs )   {
   817b4:	b580      	push	{r7, lr}
   817b6:	b088      	sub	sp, #32
   817b8:	af00      	add	r7, sp, #0
   817ba:	60f8      	str	r0, [r7, #12]
   817bc:	60b9      	str	r1, [r7, #8]
   817be:	4613      	mov	r3, r2
   817c0:	71fb      	strb	r3, [r7, #7]
	//uint8_t uc_pcs;
	uint8_t data;

	uint8_t *p_buffer;

	p_buffer = p_buf;
   817c2:	68fb      	ldr	r3, [r7, #12]
   817c4:	61bb      	str	r3, [r7, #24]
	
	for (i = 0; i < size ; i++) {  
   817c6:	2300      	movs	r3, #0
   817c8:	61fb      	str	r3, [r7, #28]
   817ca:	e01a      	b.n	81802 <dd_spi_master_read+0x4e>
		  
		dd_spi_write(p_buffer[0], uc_pcs, 0);
   817cc:	69bb      	ldr	r3, [r7, #24]
   817ce:	781b      	ldrb	r3, [r3, #0]
   817d0:	79f9      	ldrb	r1, [r7, #7]
   817d2:	2200      	movs	r2, #0
   817d4:	4618      	mov	r0, r3
   817d6:	4b0f      	ldr	r3, [pc, #60]	; (81814 <dd_spi_master_read+0x60>)
   817d8:	4798      	blx	r3
		/* Wait transfer done. */
		while ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
   817da:	bf00      	nop
   817dc:	4b0e      	ldr	r3, [pc, #56]	; (81818 <dd_spi_master_read+0x64>)
   817de:	691b      	ldr	r3, [r3, #16]
   817e0:	f003 0301 	and.w	r3, r3, #1
   817e4:	2b00      	cmp	r3, #0
   817e6:	d0f9      	beq.n	817dc <dd_spi_master_read+0x28>

		  
		dd_spi_read(&data);
   817e8:	f107 0317 	add.w	r3, r7, #23
   817ec:	4618      	mov	r0, r3
   817ee:	4b0b      	ldr	r3, [pc, #44]	; (8181c <dd_spi_master_read+0x68>)
   817f0:	4798      	blx	r3

		

		p_buffer[i] = data;
   817f2:	69ba      	ldr	r2, [r7, #24]
   817f4:	69fb      	ldr	r3, [r7, #28]
   817f6:	4413      	add	r3, r2
   817f8:	7dfa      	ldrb	r2, [r7, #23]
   817fa:	701a      	strb	r2, [r3, #0]

	uint8_t *p_buffer;

	p_buffer = p_buf;
	
	for (i = 0; i < size ; i++) {  
   817fc:	69fb      	ldr	r3, [r7, #28]
   817fe:	3301      	adds	r3, #1
   81800:	61fb      	str	r3, [r7, #28]
   81802:	69fa      	ldr	r2, [r7, #28]
   81804:	68bb      	ldr	r3, [r7, #8]
   81806:	429a      	cmp	r2, r3
   81808:	d3e0      	bcc.n	817cc <dd_spi_master_read+0x18>
		

		p_buffer[i] = data;
		
	}
}
   8180a:	bf00      	nop
   8180c:	3720      	adds	r7, #32
   8180e:	46bd      	mov	sp, r7
   81810:	bd80      	pop	{r7, pc}
   81812:	bf00      	nop
   81814:	00081821 	.word	0x00081821
   81818:	40008000 	.word	0x40008000
   8181c:	00081891 	.word	0x00081891

00081820 <dd_spi_write>:





spi_status_t  dd_spi_write(uint8_t us_data, SPI_DECODER_MUX_ID_TYPE uc_pcs, uint8_t uc_last) {
   81820:	b480      	push	{r7}
   81822:	b085      	sub	sp, #20
   81824:	af00      	add	r7, sp, #0
   81826:	4603      	mov	r3, r0
   81828:	71fb      	strb	r3, [r7, #7]
   8182a:	460b      	mov	r3, r1
   8182c:	71bb      	strb	r3, [r7, #6]
   8182e:	4613      	mov	r3, r2
   81830:	717b      	strb	r3, [r7, #5]
	uint32_t timeout = SPI_TIMEOUT;
   81832:	f643 2398 	movw	r3, #15000	; 0x3a98
   81836:	60fb      	str	r3, [r7, #12]
	uint32_t value;
	uint8_t cs_reg;
	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   81838:	e006      	b.n	81848 <dd_spi_write+0x28>
		if (!timeout--) {
   8183a:	68fb      	ldr	r3, [r7, #12]
   8183c:	1e5a      	subs	r2, r3, #1
   8183e:	60fa      	str	r2, [r7, #12]
   81840:	2b00      	cmp	r3, #0
   81842:	d101      	bne.n	81848 <dd_spi_write+0x28>
			return SPI_ERROR_TIMEOUT;
   81844:	2301      	movs	r3, #1
   81846:	e01b      	b.n	81880 <dd_spi_write+0x60>

spi_status_t  dd_spi_write(uint8_t us_data, SPI_DECODER_MUX_ID_TYPE uc_pcs, uint8_t uc_last) {
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;
	uint8_t cs_reg;
	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   81848:	4b10      	ldr	r3, [pc, #64]	; (8188c <dd_spi_write+0x6c>)
   8184a:	691b      	ldr	r3, [r3, #16]
   8184c:	f003 0302 	and.w	r3, r3, #2
   81850:	2b00      	cmp	r3, #0
   81852:	d0f2      	beq.n	8183a <dd_spi_write+0x1a>
	}
	//cs_reg = ((~(1u<<(uc_pcs)))& 0xF)                
	//value = SPI_MR_PCS(uc_pcs);
	//(SPI0->SPI_MR)|= value;
	
	if (uc_last) {(SPI0->SPI_CR) |= SPI_CR_LASTXFER; }
   81854:	797b      	ldrb	r3, [r7, #5]
   81856:	2b00      	cmp	r3, #0
   81858:	d006      	beq.n	81868 <dd_spi_write+0x48>
   8185a:	4a0c      	ldr	r2, [pc, #48]	; (8188c <dd_spi_write+0x6c>)
   8185c:	4b0b      	ldr	r3, [pc, #44]	; (8188c <dd_spi_write+0x6c>)
   8185e:	681b      	ldr	r3, [r3, #0]
   81860:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   81864:	6013      	str	r3, [r2, #0]
   81866:	e005      	b.n	81874 <dd_spi_write+0x54>
	else {  (SPI0->SPI_CR) &= (~SPI_CR_LASTXFER);   }
   81868:	4a08      	ldr	r2, [pc, #32]	; (8188c <dd_spi_write+0x6c>)
   8186a:	4b08      	ldr	r3, [pc, #32]	; (8188c <dd_spi_write+0x6c>)
   8186c:	681b      	ldr	r3, [r3, #0]
   8186e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   81872:	6013      	str	r3, [r2, #0]
	
	value = SPI_TDR_TD(us_data);
   81874:	79fb      	ldrb	r3, [r7, #7]
   81876:	60bb      	str	r3, [r7, #8]
	SPI0->SPI_TDR = value;
   81878:	4a04      	ldr	r2, [pc, #16]	; (8188c <dd_spi_write+0x6c>)
   8187a:	68bb      	ldr	r3, [r7, #8]
   8187c:	60d3      	str	r3, [r2, #12]
	return SPI_OK;
   8187e:	2300      	movs	r3, #0
}
   81880:	4618      	mov	r0, r3
   81882:	3714      	adds	r7, #20
   81884:	46bd      	mov	sp, r7
   81886:	bc80      	pop	{r7}
   81888:	4770      	bx	lr
   8188a:	bf00      	nop
   8188c:	40008000 	.word	0x40008000

00081890 <dd_spi_read>:


spi_status_t dd_spi_read(uint8_t *us_data) {
   81890:	b480      	push	{r7}
   81892:	b085      	sub	sp, #20
   81894:	af00      	add	r7, sp, #0
   81896:	6078      	str	r0, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
   81898:	f643 2398 	movw	r3, #15000	; 0x3a98
   8189c:	60fb      	str	r3, [r7, #12]
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   8189e:	e006      	b.n	818ae <dd_spi_read+0x1e>
		if (!timeout--) {
   818a0:	68fb      	ldr	r3, [r7, #12]
   818a2:	1e5a      	subs	r2, r3, #1
   818a4:	60fa      	str	r2, [r7, #12]
   818a6:	2b00      	cmp	r3, #0
   818a8:	d101      	bne.n	818ae <dd_spi_read+0x1e>
			return SPI_ERROR_TIMEOUT;
   818aa:	2301      	movs	r3, #1
   818ac:	e00f      	b.n	818ce <dd_spi_read+0x3e>

spi_status_t dd_spi_read(uint8_t *us_data) {
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   818ae:	4b0a      	ldr	r3, [pc, #40]	; (818d8 <dd_spi_read+0x48>)
   818b0:	691b      	ldr	r3, [r3, #16]
   818b2:	f003 0301 	and.w	r3, r3, #1
   818b6:	2b00      	cmp	r3, #0
   818b8:	d0f2      	beq.n	818a0 <dd_spi_read+0x10>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = SPI0->SPI_RDR;	
   818ba:	4b07      	ldr	r3, [pc, #28]	; (818d8 <dd_spi_read+0x48>)
   818bc:	689b      	ldr	r3, [r3, #8]
   818be:	4a07      	ldr	r2, [pc, #28]	; (818dc <dd_spi_read+0x4c>)
   818c0:	6013      	str	r3, [r2, #0]
	*us_data =  (reg_value & SPI_RDR_RD_Msk);
   818c2:	4b06      	ldr	r3, [pc, #24]	; (818dc <dd_spi_read+0x4c>)
   818c4:	681b      	ldr	r3, [r3, #0]
   818c6:	b2da      	uxtb	r2, r3
   818c8:	687b      	ldr	r3, [r7, #4]
   818ca:	701a      	strb	r2, [r3, #0]
// 		}
// 		else
// 		{
// 			return SPI_OK;
// 		}
	return SPI_OK;
   818cc:	2300      	movs	r3, #0
}
   818ce:	4618      	mov	r0, r3
   818d0:	3714      	adds	r7, #20
   818d2:	46bd      	mov	sp, r7
   818d4:	bc80      	pop	{r7}
   818d6:	4770      	bx	lr
   818d8:	40008000 	.word	0x40008000
   818dc:	20070a00 	.word	0x20070a00

000818e0 <SENSOR_DD_INIT_SPI>:

void SENSOR_DD_INIT_SPI(void)   {
   818e0:	b580      	push	{r7, lr}
   818e2:	af00      	add	r7, sp, #0
	
	//dd_spi_set_writeprotect(0);	
	SPI0->SPI_WPMR =  0x53504900;
   818e4:	4b59      	ldr	r3, [pc, #356]	; (81a4c <SENSOR_DD_INIT_SPI+0x16c>)
   818e6:	4a5a      	ldr	r2, [pc, #360]	; (81a50 <SENSOR_DD_INIT_SPI+0x170>)
   818e8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	 
	 puts(STRING_HEADER);	
   818ec:	4859      	ldr	r0, [pc, #356]	; (81a54 <SENSOR_DD_INIT_SPI+0x174>)
   818ee:	4b5a      	ldr	r3, [pc, #360]	; (81a58 <SENSOR_DD_INIT_SPI+0x178>)
   818f0:	4798      	blx	r3
	 
	 sysclk_enable_peripheral_clock(ID_SPI0);
   818f2:	2018      	movs	r0, #24
   818f4:	4b59      	ldr	r3, [pc, #356]	; (81a5c <SENSOR_DD_INIT_SPI+0x17c>)
   818f6:	4798      	blx	r3
	 		
	SPI0->SPI_CR = SPI_CR_SPIDIS;
   818f8:	4b54      	ldr	r3, [pc, #336]	; (81a4c <SENSOR_DD_INIT_SPI+0x16c>)
   818fa:	2202      	movs	r2, #2
   818fc:	601a      	str	r2, [r3, #0]
	SPI0->SPI_CR = SPI_CR_SWRST;		
   818fe:	4b53      	ldr	r3, [pc, #332]	; (81a4c <SENSOR_DD_INIT_SPI+0x16c>)
   81900:	2280      	movs	r2, #128	; 0x80
   81902:	601a      	str	r2, [r3, #0]
	SPI0->SPI_CR = SPI_CR_LASTXFER;	
   81904:	4b51      	ldr	r3, [pc, #324]	; (81a4c <SENSOR_DD_INIT_SPI+0x16c>)
   81906:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   8190a:	601a      	str	r2, [r3, #0]
	
	
	SPI0->SPI_MR |= SPI_MR_MSTR;	
   8190c:	4a4f      	ldr	r2, [pc, #316]	; (81a4c <SENSOR_DD_INIT_SPI+0x16c>)
   8190e:	4b4f      	ldr	r3, [pc, #316]	; (81a4c <SENSOR_DD_INIT_SPI+0x16c>)
   81910:	685b      	ldr	r3, [r3, #4]
   81912:	f043 0301 	orr.w	r3, r3, #1
   81916:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR |= SPI_MR_MODFDIS ;	
   81918:	4a4c      	ldr	r2, [pc, #304]	; (81a4c <SENSOR_DD_INIT_SPI+0x16c>)
   8191a:	4b4c      	ldr	r3, [pc, #304]	; (81a4c <SENSOR_DD_INIT_SPI+0x16c>)
   8191c:	685b      	ldr	r3, [r3, #4]
   8191e:	f043 0310 	orr.w	r3, r3, #16
   81922:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR |= SPI_MR_PCSDEC;
   81924:	4a49      	ldr	r2, [pc, #292]	; (81a4c <SENSOR_DD_INIT_SPI+0x16c>)
   81926:	4b49      	ldr	r3, [pc, #292]	; (81a4c <SENSOR_DD_INIT_SPI+0x16c>)
   81928:	685b      	ldr	r3, [r3, #4]
   8192a:	f043 0304 	orr.w	r3, r3, #4
   8192e:	6053      	str	r3, [r2, #4]
	
	//chip selection procedure done here
	//SPI0->SPI_MR &= ~SPI_MR_PS; // SPI SET FIXED PERIPHERAL.	
	//SPI0->SPI_MR &= (~SPI_MR_PCSDEC); // The chip selects are directly connected to a peripheral device.	
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
   81930:	4a46      	ldr	r2, [pc, #280]	; (81a4c <SENSOR_DD_INIT_SPI+0x16c>)
   81932:	4b46      	ldr	r3, [pc, #280]	; (81a4c <SENSOR_DD_INIT_SPI+0x16c>)
   81934:	685b      	ldr	r3, [r3, #4]
   81936:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   8193a:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR |= SPI_MR_PCS(SPI_CHIP_PCS);	
   8193c:	4943      	ldr	r1, [pc, #268]	; (81a4c <SENSOR_DD_INIT_SPI+0x16c>)
   8193e:	4b43      	ldr	r3, [pc, #268]	; (81a4c <SENSOR_DD_INIT_SPI+0x16c>)
   81940:	685a      	ldr	r2, [r3, #4]
   81942:	4b47      	ldr	r3, [pc, #284]	; (81a60 <SENSOR_DD_INIT_SPI+0x180>)
   81944:	781b      	ldrb	r3, [r3, #0]
   81946:	4618      	mov	r0, r3
   81948:	2301      	movs	r3, #1
   8194a:	4083      	lsls	r3, r0
   8194c:	43db      	mvns	r3, r3
   8194e:	041b      	lsls	r3, r3, #16
   81950:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   81954:	4313      	orrs	r3, r2
   81956:	604b      	str	r3, [r1, #4]
	
	//spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);	
	dd_spi_set_clock_polarity(0, SPI_CLK_POLARITY_0);
   81958:	2100      	movs	r1, #0
   8195a:	2000      	movs	r0, #0
   8195c:	4b41      	ldr	r3, [pc, #260]	; (81a64 <SENSOR_DD_INIT_SPI+0x184>)
   8195e:	4798      	blx	r3
	dd_spi_set_clock_phase(0, SPI_CLK_PHASE_1);	
   81960:	2101      	movs	r1, #1
   81962:	2000      	movs	r0, #0
   81964:	4b40      	ldr	r3, [pc, #256]	; (81a68 <SENSOR_DD_INIT_SPI+0x188>)
   81966:	4798      	blx	r3
	dd_spi_set_bits_per_transfer(0,SPI_CSR_BITS_8_BIT);	
   81968:	2100      	movs	r1, #0
   8196a:	2000      	movs	r0, #0
   8196c:	4b3f      	ldr	r3, [pc, #252]	; (81a6c <SENSOR_DD_INIT_SPI+0x18c>)
   8196e:	4798      	blx	r3
	dd_spi_set_baudrate_div(0, (sysclk_get_peripheral_hz()/ gs_ul_spi_clock));	
   81970:	4b3f      	ldr	r3, [pc, #252]	; (81a70 <SENSOR_DD_INIT_SPI+0x190>)
   81972:	4798      	blx	r3
   81974:	4602      	mov	r2, r0
   81976:	4b3f      	ldr	r3, [pc, #252]	; (81a74 <SENSOR_DD_INIT_SPI+0x194>)
   81978:	681b      	ldr	r3, [r3, #0]
   8197a:	fbb2 f3f3 	udiv	r3, r2, r3
   8197e:	b2db      	uxtb	r3, r3
   81980:	4619      	mov	r1, r3
   81982:	2000      	movs	r0, #0
   81984:	4b3c      	ldr	r3, [pc, #240]	; (81a78 <SENSOR_DD_INIT_SPI+0x198>)
   81986:	4798      	blx	r3
	dd_spi_set_transfer_delay(0, SPI_DLYBS,SPI_DLYBCT);
   81988:	2240      	movs	r2, #64	; 0x40
   8198a:	2100      	movs	r1, #0
   8198c:	2000      	movs	r0, #0
   8198e:	4b3b      	ldr	r3, [pc, #236]	; (81a7c <SENSOR_DD_INIT_SPI+0x19c>)
   81990:	4798      	blx	r3
	
	dd_spi_set_clock_polarity(1, SPI_CLK_POLARITY_0);
   81992:	2100      	movs	r1, #0
   81994:	2001      	movs	r0, #1
   81996:	4b33      	ldr	r3, [pc, #204]	; (81a64 <SENSOR_DD_INIT_SPI+0x184>)
   81998:	4798      	blx	r3
	dd_spi_set_clock_phase(1, SPI_CLK_PHASE_1);
   8199a:	2101      	movs	r1, #1
   8199c:	2001      	movs	r0, #1
   8199e:	4b32      	ldr	r3, [pc, #200]	; (81a68 <SENSOR_DD_INIT_SPI+0x188>)
   819a0:	4798      	blx	r3
	dd_spi_set_bits_per_transfer(1,SPI_CSR_BITS_8_BIT);
   819a2:	2100      	movs	r1, #0
   819a4:	2001      	movs	r0, #1
   819a6:	4b31      	ldr	r3, [pc, #196]	; (81a6c <SENSOR_DD_INIT_SPI+0x18c>)
   819a8:	4798      	blx	r3
	dd_spi_set_baudrate_div(1, (sysclk_get_peripheral_hz()/ gs_ul_spi_clock));
   819aa:	4b31      	ldr	r3, [pc, #196]	; (81a70 <SENSOR_DD_INIT_SPI+0x190>)
   819ac:	4798      	blx	r3
   819ae:	4602      	mov	r2, r0
   819b0:	4b30      	ldr	r3, [pc, #192]	; (81a74 <SENSOR_DD_INIT_SPI+0x194>)
   819b2:	681b      	ldr	r3, [r3, #0]
   819b4:	fbb2 f3f3 	udiv	r3, r2, r3
   819b8:	b2db      	uxtb	r3, r3
   819ba:	4619      	mov	r1, r3
   819bc:	2001      	movs	r0, #1
   819be:	4b2e      	ldr	r3, [pc, #184]	; (81a78 <SENSOR_DD_INIT_SPI+0x198>)
   819c0:	4798      	blx	r3
	dd_spi_set_transfer_delay(1, SPI_DLYBS,SPI_DLYBCT);
   819c2:	2240      	movs	r2, #64	; 0x40
   819c4:	2100      	movs	r1, #0
   819c6:	2001      	movs	r0, #1
   819c8:	4b2c      	ldr	r3, [pc, #176]	; (81a7c <SENSOR_DD_INIT_SPI+0x19c>)
   819ca:	4798      	blx	r3
	
	dd_spi_set_clock_polarity(2, SPI_CLK_POLARITY_0);
   819cc:	2100      	movs	r1, #0
   819ce:	2002      	movs	r0, #2
   819d0:	4b24      	ldr	r3, [pc, #144]	; (81a64 <SENSOR_DD_INIT_SPI+0x184>)
   819d2:	4798      	blx	r3
	dd_spi_set_clock_phase(2, SPI_CLK_PHASE_1);
   819d4:	2101      	movs	r1, #1
   819d6:	2002      	movs	r0, #2
   819d8:	4b23      	ldr	r3, [pc, #140]	; (81a68 <SENSOR_DD_INIT_SPI+0x188>)
   819da:	4798      	blx	r3
	dd_spi_set_bits_per_transfer(2,SPI_CSR_BITS_8_BIT);
   819dc:	2100      	movs	r1, #0
   819de:	2002      	movs	r0, #2
   819e0:	4b22      	ldr	r3, [pc, #136]	; (81a6c <SENSOR_DD_INIT_SPI+0x18c>)
   819e2:	4798      	blx	r3
	dd_spi_set_baudrate_div(2, (sysclk_get_peripheral_hz()/ gs_ul_spi_clock));
   819e4:	4b22      	ldr	r3, [pc, #136]	; (81a70 <SENSOR_DD_INIT_SPI+0x190>)
   819e6:	4798      	blx	r3
   819e8:	4602      	mov	r2, r0
   819ea:	4b22      	ldr	r3, [pc, #136]	; (81a74 <SENSOR_DD_INIT_SPI+0x194>)
   819ec:	681b      	ldr	r3, [r3, #0]
   819ee:	fbb2 f3f3 	udiv	r3, r2, r3
   819f2:	b2db      	uxtb	r3, r3
   819f4:	4619      	mov	r1, r3
   819f6:	2002      	movs	r0, #2
   819f8:	4b1f      	ldr	r3, [pc, #124]	; (81a78 <SENSOR_DD_INIT_SPI+0x198>)
   819fa:	4798      	blx	r3
	dd_spi_set_transfer_delay(2, SPI_DLYBS,SPI_DLYBCT);
   819fc:	2240      	movs	r2, #64	; 0x40
   819fe:	2100      	movs	r1, #0
   81a00:	2002      	movs	r0, #2
   81a02:	4b1e      	ldr	r3, [pc, #120]	; (81a7c <SENSOR_DD_INIT_SPI+0x19c>)
   81a04:	4798      	blx	r3
	
	dd_spi_set_clock_polarity(3, SPI_CLK_POLARITY_0);
   81a06:	2100      	movs	r1, #0
   81a08:	2003      	movs	r0, #3
   81a0a:	4b16      	ldr	r3, [pc, #88]	; (81a64 <SENSOR_DD_INIT_SPI+0x184>)
   81a0c:	4798      	blx	r3
	dd_spi_set_clock_phase(3, SPI_CLK_PHASE_1);
   81a0e:	2101      	movs	r1, #1
   81a10:	2003      	movs	r0, #3
   81a12:	4b15      	ldr	r3, [pc, #84]	; (81a68 <SENSOR_DD_INIT_SPI+0x188>)
   81a14:	4798      	blx	r3
	dd_spi_set_bits_per_transfer(3,SPI_CSR_BITS_8_BIT);
   81a16:	2100      	movs	r1, #0
   81a18:	2003      	movs	r0, #3
   81a1a:	4b14      	ldr	r3, [pc, #80]	; (81a6c <SENSOR_DD_INIT_SPI+0x18c>)
   81a1c:	4798      	blx	r3
	dd_spi_set_baudrate_div(3, (sysclk_get_peripheral_hz()/ gs_ul_spi_clock));
   81a1e:	4b14      	ldr	r3, [pc, #80]	; (81a70 <SENSOR_DD_INIT_SPI+0x190>)
   81a20:	4798      	blx	r3
   81a22:	4602      	mov	r2, r0
   81a24:	4b13      	ldr	r3, [pc, #76]	; (81a74 <SENSOR_DD_INIT_SPI+0x194>)
   81a26:	681b      	ldr	r3, [r3, #0]
   81a28:	fbb2 f3f3 	udiv	r3, r2, r3
   81a2c:	b2db      	uxtb	r3, r3
   81a2e:	4619      	mov	r1, r3
   81a30:	2003      	movs	r0, #3
   81a32:	4b11      	ldr	r3, [pc, #68]	; (81a78 <SENSOR_DD_INIT_SPI+0x198>)
   81a34:	4798      	blx	r3
	dd_spi_set_transfer_delay(3, SPI_DLYBS,SPI_DLYBCT);
   81a36:	2240      	movs	r2, #64	; 0x40
   81a38:	2100      	movs	r1, #0
   81a3a:	2003      	movs	r0, #3
   81a3c:	4b0f      	ldr	r3, [pc, #60]	; (81a7c <SENSOR_DD_INIT_SPI+0x19c>)
   81a3e:	4798      	blx	r3
	
	
	
	SPI0->SPI_CR = SPI_CR_SPIEN;		
   81a40:	4b02      	ldr	r3, [pc, #8]	; (81a4c <SENSOR_DD_INIT_SPI+0x16c>)
   81a42:	2201      	movs	r2, #1
   81a44:	601a      	str	r2, [r3, #0]
}
   81a46:	bf00      	nop
   81a48:	bd80      	pop	{r7, pc}
   81a4a:	bf00      	nop
   81a4c:	40008000 	.word	0x40008000
   81a50:	53504900 	.word	0x53504900
   81a54:	0008692c 	.word	0x0008692c
   81a58:	00084e21 	.word	0x00084e21
   81a5c:	00081541 	.word	0x00081541
   81a60:	200709fd 	.word	0x200709fd
   81a64:	00081605 	.word	0x00081605
   81a68:	00081659 	.word	0x00081659
   81a6c:	000815b9 	.word	0x000815b9
   81a70:	0008152d 	.word	0x0008152d
   81a74:	20070194 	.word	0x20070194
   81a78:	000816ad 	.word	0x000816ad
   81a7c:	0008155d 	.word	0x0008155d

00081a80 <DD_TS1_CHIP_SELECT>:


/************************************************************************/
/* ISOLATER 1 CHIP MULTIPLEXER PB3, PB4 PINS                                                                     */
/************************************************************************/
void DD_TS1_CHIP_SELECT()   {
   81a80:	b480      	push	{r7}
   81a82:	af00      	add	r7, sp, #0
	(PIOB->PIO_CODR) = ((0x1u << 3) | (0x1u << 4)); 
   81a84:	4b03      	ldr	r3, [pc, #12]	; (81a94 <DD_TS1_CHIP_SELECT+0x14>)
   81a86:	2218      	movs	r2, #24
   81a88:	635a      	str	r2, [r3, #52]	; 0x34
}
   81a8a:	bf00      	nop
   81a8c:	46bd      	mov	sp, r7
   81a8e:	bc80      	pop	{r7}
   81a90:	4770      	bx	lr
   81a92:	bf00      	nop
   81a94:	400e1000 	.word	0x400e1000

00081a98 <DD_TS2_CHIP_SELECT>:

void DD_TS2_CHIP_SELECT()   {
   81a98:	b480      	push	{r7}
   81a9a:	af00      	add	r7, sp, #0
	    PIOB->PIO_SODR = (0x1u << 3) ;
   81a9c:	4b04      	ldr	r3, [pc, #16]	; (81ab0 <DD_TS2_CHIP_SELECT+0x18>)
   81a9e:	2208      	movs	r2, #8
   81aa0:	631a      	str	r2, [r3, #48]	; 0x30
	    PIOB->PIO_CODR = (0x1u << 4) ;
   81aa2:	4b03      	ldr	r3, [pc, #12]	; (81ab0 <DD_TS2_CHIP_SELECT+0x18>)
   81aa4:	2210      	movs	r2, #16
   81aa6:	635a      	str	r2, [r3, #52]	; 0x34
}
   81aa8:	bf00      	nop
   81aaa:	46bd      	mov	sp, r7
   81aac:	bc80      	pop	{r7}
   81aae:	4770      	bx	lr
   81ab0:	400e1000 	.word	0x400e1000

00081ab4 <DD_CS1_TS_CHIP_SELECT>:



void DD_CS1_TS_CHIP_SELECT()   {
   81ab4:	b480      	push	{r7}
   81ab6:	af00      	add	r7, sp, #0
	
	  (PIOB->PIO_CODR) = (0x1u << 3); 
   81ab8:	4b04      	ldr	r3, [pc, #16]	; (81acc <DD_CS1_TS_CHIP_SELECT+0x18>)
   81aba:	2208      	movs	r2, #8
   81abc:	635a      	str	r2, [r3, #52]	; 0x34
	  (PIOB->PIO_SODR) = (0x1u << 4);
   81abe:	4b03      	ldr	r3, [pc, #12]	; (81acc <DD_CS1_TS_CHIP_SELECT+0x18>)
   81ac0:	2210      	movs	r2, #16
   81ac2:	631a      	str	r2, [r3, #48]	; 0x30
}
   81ac4:	bf00      	nop
   81ac6:	46bd      	mov	sp, r7
   81ac8:	bc80      	pop	{r7}
   81aca:	4770      	bx	lr
   81acc:	400e1000 	.word	0x400e1000

00081ad0 <DD_CS2_TS_CHIP_SELECT>:

void DD_CS2_TS_CHIP_SELECT ()   {	
   81ad0:	b480      	push	{r7}
   81ad2:	af00      	add	r7, sp, #0

	 (PIOB->PIO_SODR) = ((0x1u << 3) | (0x1u << 4));
   81ad4:	4b03      	ldr	r3, [pc, #12]	; (81ae4 <DD_CS2_TS_CHIP_SELECT+0x14>)
   81ad6:	2218      	movs	r2, #24
   81ad8:	631a      	str	r2, [r3, #48]	; 0x30

}
   81ada:	bf00      	nop
   81adc:	46bd      	mov	sp, r7
   81ade:	bc80      	pop	{r7}
   81ae0:	4770      	bx	lr
   81ae2:	bf00      	nop
   81ae4:	400e1000 	.word	0x400e1000

00081ae8 <DD_CS3_TS_CHIP_SELECT>:

/************************************************************************/
/* ISOLATER 2 CHIP MULTIPLEXER PB5, PB6 PINS                                                                     */
/************************************************************************/

void DD_CS3_TS_CHIP_SELECT()   {
   81ae8:	b480      	push	{r7}
   81aea:	af00      	add	r7, sp, #0
	(PIOB->PIO_CODR) = ((0x1u << 5) | (0x1u << 6));
   81aec:	4b03      	ldr	r3, [pc, #12]	; (81afc <DD_CS3_TS_CHIP_SELECT+0x14>)
   81aee:	2260      	movs	r2, #96	; 0x60
   81af0:	635a      	str	r2, [r3, #52]	; 0x34
}
   81af2:	bf00      	nop
   81af4:	46bd      	mov	sp, r7
   81af6:	bc80      	pop	{r7}
   81af8:	4770      	bx	lr
   81afa:	bf00      	nop
   81afc:	400e1000 	.word	0x400e1000

00081b00 <DD_TS3_CHIP_SELECT>:

void DD_TS3_CHIP_SELECT()   {
   81b00:	b480      	push	{r7}
   81b02:	af00      	add	r7, sp, #0
	PIOB->PIO_SODR = (0x1u << 5) ;
   81b04:	4b04      	ldr	r3, [pc, #16]	; (81b18 <DD_TS3_CHIP_SELECT+0x18>)
   81b06:	2220      	movs	r2, #32
   81b08:	631a      	str	r2, [r3, #48]	; 0x30
PIOB->PIO_CODR = (0x1u << 6) ;
   81b0a:	4b03      	ldr	r3, [pc, #12]	; (81b18 <DD_TS3_CHIP_SELECT+0x18>)
   81b0c:	2240      	movs	r2, #64	; 0x40
   81b0e:	635a      	str	r2, [r3, #52]	; 0x34
}
   81b10:	bf00      	nop
   81b12:	46bd      	mov	sp, r7
   81b14:	bc80      	pop	{r7}
   81b16:	4770      	bx	lr
   81b18:	400e1000 	.word	0x400e1000

00081b1c <DD_TS_MUX_CHIP_SELECT>:

void  DD_TS_MUX_CHIP_SELECT()   {
   81b1c:	b480      	push	{r7}
   81b1e:	af00      	add	r7, sp, #0
		
	PIOB->PIO_CODR = (0x1u << 5);
   81b20:	4b04      	ldr	r3, [pc, #16]	; (81b34 <DD_TS_MUX_CHIP_SELECT+0x18>)
   81b22:	2220      	movs	r2, #32
   81b24:	635a      	str	r2, [r3, #52]	; 0x34
    PIOB->PIO_SODR = (0x1u << 6);	
   81b26:	4b03      	ldr	r3, [pc, #12]	; (81b34 <DD_TS_MUX_CHIP_SELECT+0x18>)
   81b28:	2240      	movs	r2, #64	; 0x40
   81b2a:	631a      	str	r2, [r3, #48]	; 0x30
}
   81b2c:	bf00      	nop
   81b2e:	46bd      	mov	sp, r7
   81b30:	bc80      	pop	{r7}
   81b32:	4770      	bx	lr
   81b34:	400e1000 	.word	0x400e1000

00081b38 <DD_CON_ADC_CHIP_SELECT>:
void DD_CONDUCTIVITY_DIGITAL_POT_CS()   {
	
	PIOB->PIO_CODR = ((0x1u << 7) | (0x1u << 8));	
}

void DD_CON_ADC_CHIP_SELECT()   {	
   81b38:	b480      	push	{r7}
   81b3a:	af00      	add	r7, sp, #0
	 PIOB->PIO_SODR = (0x1u << 7) ;
   81b3c:	4b05      	ldr	r3, [pc, #20]	; (81b54 <DD_CON_ADC_CHIP_SELECT+0x1c>)
   81b3e:	2280      	movs	r2, #128	; 0x80
   81b40:	631a      	str	r2, [r3, #48]	; 0x30
	 PIOB->PIO_CODR = (0x1u << 8);	
   81b42:	4b04      	ldr	r3, [pc, #16]	; (81b54 <DD_CON_ADC_CHIP_SELECT+0x1c>)
   81b44:	f44f 7280 	mov.w	r2, #256	; 0x100
   81b48:	635a      	str	r2, [r3, #52]	; 0x34
}
   81b4a:	bf00      	nop
   81b4c:	46bd      	mov	sp, r7
   81b4e:	bc80      	pop	{r7}
   81b50:	4770      	bx	lr
   81b52:	bf00      	nop
   81b54:	400e1000 	.word	0x400e1000

00081b58 <DD_AN_MUX_CHIPSEL_2>:

void DD_AN_MUX_CHIPSEL_2()   {
   81b58:	b480      	push	{r7}
   81b5a:	af00      	add	r7, sp, #0
	PIOB->PIO_CODR = (0x1u << 7) ;
   81b5c:	4b05      	ldr	r3, [pc, #20]	; (81b74 <DD_AN_MUX_CHIPSEL_2+0x1c>)
   81b5e:	2280      	movs	r2, #128	; 0x80
   81b60:	635a      	str	r2, [r3, #52]	; 0x34
	PIOB->PIO_SODR = (0x1u << 8) ;
   81b62:	4b04      	ldr	r3, [pc, #16]	; (81b74 <DD_AN_MUX_CHIPSEL_2+0x1c>)
   81b64:	f44f 7280 	mov.w	r2, #256	; 0x100
   81b68:	631a      	str	r2, [r3, #48]	; 0x30
}
   81b6a:	bf00      	nop
   81b6c:	46bd      	mov	sp, r7
   81b6e:	bc80      	pop	{r7}
   81b70:	4770      	bx	lr
   81b72:	bf00      	nop
   81b74:	400e1000 	.word	0x400e1000

00081b78 <DD_AN_MUX_CHIPSEL_3>:

void DD_AN_MUX_CHIPSEL_3()   {
   81b78:	b480      	push	{r7}
   81b7a:	af00      	add	r7, sp, #0
	PIOB->PIO_SODR = (0x1u << 7) | (0x1u << 8) ;	
   81b7c:	4b03      	ldr	r3, [pc, #12]	; (81b8c <DD_AN_MUX_CHIPSEL_3+0x14>)
   81b7e:	f44f 72c0 	mov.w	r2, #384	; 0x180
   81b82:	631a      	str	r2, [r3, #48]	; 0x30
}
   81b84:	bf00      	nop
   81b86:	46bd      	mov	sp, r7
   81b88:	bc80      	pop	{r7}
   81b8a:	4770      	bx	lr
   81b8c:	400e1000 	.word	0x400e1000

00081b90 <DD_AN_MUX_CHIPSEL_4>:

// ISOLATER 4 CHIP MULTIPLEXER PB14, PB15 PINS

void DD_AN_MUX_CHIPSEL_4()   {
   81b90:	b480      	push	{r7}
   81b92:	af00      	add	r7, sp, #0
	PIOB->PIO_CODR = (0x1u << 14) | (0x1u << 15) ;	
   81b94:	4b03      	ldr	r3, [pc, #12]	; (81ba4 <DD_AN_MUX_CHIPSEL_4+0x14>)
   81b96:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   81b9a:	635a      	str	r2, [r3, #52]	; 0x34
}
   81b9c:	bf00      	nop
   81b9e:	46bd      	mov	sp, r7
   81ba0:	bc80      	pop	{r7}
   81ba2:	4770      	bx	lr
   81ba4:	400e1000 	.word	0x400e1000

00081ba8 <DD_SPI_PCS_DECODER_ACTIVE>:

/************************************************************************/
/*                                                                      */
/************************************************************************/

void DD_SPI_PCS_DECODER_ACTIVE()   {
   81ba8:	b480      	push	{r7}
   81baa:	af00      	add	r7, sp, #0
	PIOB->PIO_CODR =( (0x1u << 0) | (0x1u << 1) );
   81bac:	4b04      	ldr	r3, [pc, #16]	; (81bc0 <DD_SPI_PCS_DECODER_ACTIVE+0x18>)
   81bae:	2203      	movs	r2, #3
   81bb0:	635a      	str	r2, [r3, #52]	; 0x34
	PIOB->PIO_SODR = (0x1u << 2) ;	
   81bb2:	4b03      	ldr	r3, [pc, #12]	; (81bc0 <DD_SPI_PCS_DECODER_ACTIVE+0x18>)
   81bb4:	2204      	movs	r2, #4
   81bb6:	631a      	str	r2, [r3, #48]	; 0x30
}
   81bb8:	bf00      	nop
   81bba:	46bd      	mov	sp, r7
   81bbc:	bc80      	pop	{r7}
   81bbe:	4770      	bx	lr
   81bc0:	400e1000 	.word	0x400e1000

00081bc4 <DD_SPI_PCS_DECODER_DEACTIVE>:

void DD_SPI_PCS_DECODER_DEACTIVE()   {
   81bc4:	b480      	push	{r7}
   81bc6:	af00      	add	r7, sp, #0
	PIOB->PIO_SODR =( (0x1u << 0) | (0x1u << 1) );
   81bc8:	4b04      	ldr	r3, [pc, #16]	; (81bdc <DD_SPI_PCS_DECODER_DEACTIVE+0x18>)
   81bca:	2203      	movs	r2, #3
   81bcc:	631a      	str	r2, [r3, #48]	; 0x30
	PIOB->PIO_CODR = (0x1u << 2) ;
   81bce:	4b03      	ldr	r3, [pc, #12]	; (81bdc <DD_SPI_PCS_DECODER_DEACTIVE+0x18>)
   81bd0:	2204      	movs	r2, #4
   81bd2:	635a      	str	r2, [r3, #52]	; 0x34
}
   81bd4:	bf00      	nop
   81bd6:	46bd      	mov	sp, r7
   81bd8:	bc80      	pop	{r7}
   81bda:	4770      	bx	lr
   81bdc:	400e1000 	.word	0x400e1000

00081be0 <DD_DISABLE_ISOLATORS_MISO_PIN>:

 void DD_DISABLE_ISOLATORS_MISO_PIN(){
   81be0:	b580      	push	{r7, lr}
   81be2:	af00      	add	r7, sp, #0
	
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_1_DISABLE_PIN);
   81be4:	2106      	movs	r1, #6
   81be6:	4808      	ldr	r0, [pc, #32]	; (81c08 <DD_DISABLE_ISOLATORS_MISO_PIN+0x28>)
   81be8:	4b08      	ldr	r3, [pc, #32]	; (81c0c <DD_DISABLE_ISOLATORS_MISO_PIN+0x2c>)
   81bea:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_2_DISABLE_PIN);
   81bec:	2105      	movs	r1, #5
   81bee:	4806      	ldr	r0, [pc, #24]	; (81c08 <DD_DISABLE_ISOLATORS_MISO_PIN+0x28>)
   81bf0:	4b06      	ldr	r3, [pc, #24]	; (81c0c <DD_DISABLE_ISOLATORS_MISO_PIN+0x2c>)
   81bf2:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_3_DISABLE_PIN);
   81bf4:	2104      	movs	r1, #4
   81bf6:	4804      	ldr	r0, [pc, #16]	; (81c08 <DD_DISABLE_ISOLATORS_MISO_PIN+0x28>)
   81bf8:	4b04      	ldr	r3, [pc, #16]	; (81c0c <DD_DISABLE_ISOLATORS_MISO_PIN+0x2c>)
   81bfa:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_4_DISABLE_PIN);
   81bfc:	2103      	movs	r1, #3
   81bfe:	4802      	ldr	r0, [pc, #8]	; (81c08 <DD_DISABLE_ISOLATORS_MISO_PIN+0x28>)
   81c00:	4b02      	ldr	r3, [pc, #8]	; (81c0c <DD_DISABLE_ISOLATORS_MISO_PIN+0x2c>)
   81c02:	4798      	blx	r3
}
   81c04:	bf00      	nop
   81c06:	bd80      	pop	{r7, pc}
   81c08:	400e0e00 	.word	0x400e0e00
   81c0c:	00081155 	.word	0x00081155

00081c10 <DD_ENABLE_ISOLATOR_1>:

void DD_ENABLE_ISOLATOR_1(){	
   81c10:	b580      	push	{r7, lr}
   81c12:	af00      	add	r7, sp, #0
	dd_CLEAR_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_1_DISABLE_PIN);
   81c14:	2106      	movs	r1, #6
   81c16:	4808      	ldr	r0, [pc, #32]	; (81c38 <DD_ENABLE_ISOLATOR_1+0x28>)
   81c18:	4b08      	ldr	r3, [pc, #32]	; (81c3c <DD_ENABLE_ISOLATOR_1+0x2c>)
   81c1a:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_2_DISABLE_PIN);
   81c1c:	2105      	movs	r1, #5
   81c1e:	4806      	ldr	r0, [pc, #24]	; (81c38 <DD_ENABLE_ISOLATOR_1+0x28>)
   81c20:	4b07      	ldr	r3, [pc, #28]	; (81c40 <DD_ENABLE_ISOLATOR_1+0x30>)
   81c22:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_3_DISABLE_PIN);
   81c24:	2104      	movs	r1, #4
   81c26:	4804      	ldr	r0, [pc, #16]	; (81c38 <DD_ENABLE_ISOLATOR_1+0x28>)
   81c28:	4b05      	ldr	r3, [pc, #20]	; (81c40 <DD_ENABLE_ISOLATOR_1+0x30>)
   81c2a:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_4_DISABLE_PIN);
   81c2c:	2103      	movs	r1, #3
   81c2e:	4802      	ldr	r0, [pc, #8]	; (81c38 <DD_ENABLE_ISOLATOR_1+0x28>)
   81c30:	4b03      	ldr	r3, [pc, #12]	; (81c40 <DD_ENABLE_ISOLATOR_1+0x30>)
   81c32:	4798      	blx	r3
}
   81c34:	bf00      	nop
   81c36:	bd80      	pop	{r7, pc}
   81c38:	400e0e00 	.word	0x400e0e00
   81c3c:	00081179 	.word	0x00081179
   81c40:	00081155 	.word	0x00081155

00081c44 <DD_ENABLE_ISOLATOR_2>:

void DD_ENABLE_ISOLATOR_2(){
   81c44:	b580      	push	{r7, lr}
   81c46:	af00      	add	r7, sp, #0
	
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_1_DISABLE_PIN);
   81c48:	2106      	movs	r1, #6
   81c4a:	4808      	ldr	r0, [pc, #32]	; (81c6c <DD_ENABLE_ISOLATOR_2+0x28>)
   81c4c:	4b08      	ldr	r3, [pc, #32]	; (81c70 <DD_ENABLE_ISOLATOR_2+0x2c>)
   81c4e:	4798      	blx	r3
	dd_CLEAR_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_2_DISABLE_PIN);
   81c50:	2105      	movs	r1, #5
   81c52:	4806      	ldr	r0, [pc, #24]	; (81c6c <DD_ENABLE_ISOLATOR_2+0x28>)
   81c54:	4b07      	ldr	r3, [pc, #28]	; (81c74 <DD_ENABLE_ISOLATOR_2+0x30>)
   81c56:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_3_DISABLE_PIN);
   81c58:	2104      	movs	r1, #4
   81c5a:	4804      	ldr	r0, [pc, #16]	; (81c6c <DD_ENABLE_ISOLATOR_2+0x28>)
   81c5c:	4b04      	ldr	r3, [pc, #16]	; (81c70 <DD_ENABLE_ISOLATOR_2+0x2c>)
   81c5e:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_4_DISABLE_PIN);
   81c60:	2103      	movs	r1, #3
   81c62:	4802      	ldr	r0, [pc, #8]	; (81c6c <DD_ENABLE_ISOLATOR_2+0x28>)
   81c64:	4b02      	ldr	r3, [pc, #8]	; (81c70 <DD_ENABLE_ISOLATOR_2+0x2c>)
   81c66:	4798      	blx	r3
}
   81c68:	bf00      	nop
   81c6a:	bd80      	pop	{r7, pc}
   81c6c:	400e0e00 	.word	0x400e0e00
   81c70:	00081155 	.word	0x00081155
   81c74:	00081179 	.word	0x00081179

00081c78 <DD_ENABLE_ISOLATOR_3>:

void DD_ENABLE_ISOLATOR_3(){
   81c78:	b580      	push	{r7, lr}
   81c7a:	af00      	add	r7, sp, #0
	
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_1_DISABLE_PIN);
   81c7c:	2106      	movs	r1, #6
   81c7e:	4808      	ldr	r0, [pc, #32]	; (81ca0 <DD_ENABLE_ISOLATOR_3+0x28>)
   81c80:	4b08      	ldr	r3, [pc, #32]	; (81ca4 <DD_ENABLE_ISOLATOR_3+0x2c>)
   81c82:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_2_DISABLE_PIN);
   81c84:	2105      	movs	r1, #5
   81c86:	4806      	ldr	r0, [pc, #24]	; (81ca0 <DD_ENABLE_ISOLATOR_3+0x28>)
   81c88:	4b06      	ldr	r3, [pc, #24]	; (81ca4 <DD_ENABLE_ISOLATOR_3+0x2c>)
   81c8a:	4798      	blx	r3
	dd_CLEAR_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_3_DISABLE_PIN);
   81c8c:	2104      	movs	r1, #4
   81c8e:	4804      	ldr	r0, [pc, #16]	; (81ca0 <DD_ENABLE_ISOLATOR_3+0x28>)
   81c90:	4b05      	ldr	r3, [pc, #20]	; (81ca8 <DD_ENABLE_ISOLATOR_3+0x30>)
   81c92:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_4_DISABLE_PIN);
   81c94:	2103      	movs	r1, #3
   81c96:	4802      	ldr	r0, [pc, #8]	; (81ca0 <DD_ENABLE_ISOLATOR_3+0x28>)
   81c98:	4b02      	ldr	r3, [pc, #8]	; (81ca4 <DD_ENABLE_ISOLATOR_3+0x2c>)
   81c9a:	4798      	blx	r3
}
   81c9c:	bf00      	nop
   81c9e:	bd80      	pop	{r7, pc}
   81ca0:	400e0e00 	.word	0x400e0e00
   81ca4:	00081155 	.word	0x00081155
   81ca8:	00081179 	.word	0x00081179

00081cac <DD_INIT_ALL_SENSORS>:
}




uint16_t DD_INIT_ALL_SENSORS()   {
   81cac:	b580      	push	{r7, lr}
   81cae:	b084      	sub	sp, #16
   81cb0:	af00      	add	r7, sp, #0
	 DD_SPI_PCS_DECODER_DEACTIVE();
   81cb2:	4b2d      	ldr	r3, [pc, #180]	; (81d68 <DD_INIT_ALL_SENSORS+0xbc>)
   81cb4:	4798      	blx	r3
	 DD_DISABLE_ISOLATORS_MISO_PIN();
   81cb6:	4b2d      	ldr	r3, [pc, #180]	; (81d6c <DD_INIT_ALL_SENSORS+0xc0>)
   81cb8:	4798      	blx	r3
	 for(int i=0; i<10000;i++) {}
   81cba:	2300      	movs	r3, #0
   81cbc:	60fb      	str	r3, [r7, #12]
   81cbe:	e002      	b.n	81cc6 <DD_INIT_ALL_SENSORS+0x1a>
   81cc0:	68fb      	ldr	r3, [r7, #12]
   81cc2:	3301      	adds	r3, #1
   81cc4:	60fb      	str	r3, [r7, #12]
   81cc6:	68fb      	ldr	r3, [r7, #12]
   81cc8:	f242 720f 	movw	r2, #9999	; 0x270f
   81ccc:	4293      	cmp	r3, r2
   81cce:	ddf7      	ble.n	81cc0 <DD_INIT_ALL_SENSORS+0x14>
	 	 
 	  DD_PS1_INIT();
   81cd0:	4b27      	ldr	r3, [pc, #156]	; (81d70 <DD_INIT_ALL_SENSORS+0xc4>)
   81cd2:	4798      	blx	r3
	  DD_PS2_INIT();
   81cd4:	4b27      	ldr	r3, [pc, #156]	; (81d74 <DD_INIT_ALL_SENSORS+0xc8>)
   81cd6:	4798      	blx	r3
	  DD_PS3_INIT();
   81cd8:	4b27      	ldr	r3, [pc, #156]	; (81d78 <DD_INIT_ALL_SENSORS+0xcc>)
   81cda:	4798      	blx	r3

/************************************************************************/
/* ISOLATOR 1 INITIALIZATION DONE HERE                                                                     
/************************************************************************/
	DD_SPI_PCS_DECODER_ACTIVE();
   81cdc:	4b27      	ldr	r3, [pc, #156]	; (81d7c <DD_INIT_ALL_SENSORS+0xd0>)
   81cde:	4798      	blx	r3
    DD_DISABLE_ISOLATORS_MISO_PIN();
   81ce0:	4b22      	ldr	r3, [pc, #136]	; (81d6c <DD_INIT_ALL_SENSORS+0xc0>)
   81ce2:	4798      	blx	r3
	DD_ENABLE_ISOLATOR_1();	
   81ce4:	4b26      	ldr	r3, [pc, #152]	; (81d80 <DD_INIT_ALL_SENSORS+0xd4>)
   81ce6:	4798      	blx	r3
	 for(int i=0; i < 10000;i++) {}
   81ce8:	2300      	movs	r3, #0
   81cea:	60bb      	str	r3, [r7, #8]
   81cec:	e002      	b.n	81cf4 <DD_INIT_ALL_SENSORS+0x48>
   81cee:	68bb      	ldr	r3, [r7, #8]
   81cf0:	3301      	adds	r3, #1
   81cf2:	60bb      	str	r3, [r7, #8]
   81cf4:	68bb      	ldr	r3, [r7, #8]
   81cf6:	f242 720f 	movw	r2, #9999	; 0x270f
   81cfa:	4293      	cmp	r3, r2
   81cfc:	ddf7      	ble.n	81cee <DD_INIT_ALL_SENSORS+0x42>

	DD_TS1_INIT();
   81cfe:	4b21      	ldr	r3, [pc, #132]	; (81d84 <DD_INIT_ALL_SENSORS+0xd8>)
   81d00:	4798      	blx	r3
    DD_TS2_INIT();	
   81d02:	4b21      	ldr	r3, [pc, #132]	; (81d88 <DD_INIT_ALL_SENSORS+0xdc>)
   81d04:	4798      	blx	r3
    DD_CS1_TS_INIT();
   81d06:	4b21      	ldr	r3, [pc, #132]	; (81d8c <DD_INIT_ALL_SENSORS+0xe0>)
   81d08:	4798      	blx	r3
    DD_CS2_TS_INIT();
   81d0a:	4b21      	ldr	r3, [pc, #132]	; (81d90 <DD_INIT_ALL_SENSORS+0xe4>)
   81d0c:	4798      	blx	r3
	
    DD_SPI_PCS_DECODER_DEACTIVE();
   81d0e:	4b16      	ldr	r3, [pc, #88]	; (81d68 <DD_INIT_ALL_SENSORS+0xbc>)
   81d10:	4798      	blx	r3
	DD_DISABLE_ISOLATORS_MISO_PIN();	
   81d12:	4b16      	ldr	r3, [pc, #88]	; (81d6c <DD_INIT_ALL_SENSORS+0xc0>)
   81d14:	4798      	blx	r3
/************************************************************************/
/* isolator 2 DEVICE INITIALIZATION DONE HERE                                                                     */
/************************************************************************/
 	
 	DD_SPI_PCS_DECODER_ACTIVE();	
   81d16:	4b19      	ldr	r3, [pc, #100]	; (81d7c <DD_INIT_ALL_SENSORS+0xd0>)
   81d18:	4798      	blx	r3
	DD_DISABLE_ISOLATORS_MISO_PIN();
   81d1a:	4b14      	ldr	r3, [pc, #80]	; (81d6c <DD_INIT_ALL_SENSORS+0xc0>)
   81d1c:	4798      	blx	r3
	DD_ENABLE_ISOLATOR_2();	
   81d1e:	4b1d      	ldr	r3, [pc, #116]	; (81d94 <DD_INIT_ALL_SENSORS+0xe8>)
   81d20:	4798      	blx	r3
	for(int i=0; i<10000;i++) {}
   81d22:	2300      	movs	r3, #0
   81d24:	607b      	str	r3, [r7, #4]
   81d26:	e002      	b.n	81d2e <DD_INIT_ALL_SENSORS+0x82>
   81d28:	687b      	ldr	r3, [r7, #4]
   81d2a:	3301      	adds	r3, #1
   81d2c:	607b      	str	r3, [r7, #4]
   81d2e:	687b      	ldr	r3, [r7, #4]
   81d30:	f242 720f 	movw	r2, #9999	; 0x270f
   81d34:	4293      	cmp	r3, r2
   81d36:	ddf7      	ble.n	81d28 <DD_INIT_ALL_SENSORS+0x7c>
	
	DD_CS3_TS_INIT();
   81d38:	4b17      	ldr	r3, [pc, #92]	; (81d98 <DD_INIT_ALL_SENSORS+0xec>)
   81d3a:	4798      	blx	r3
	DD_TS3_INIT(); 	
   81d3c:	4b17      	ldr	r3, [pc, #92]	; (81d9c <DD_INIT_ALL_SENSORS+0xf0>)
   81d3e:	4798      	blx	r3
// 	DD_SPARE_TS_CHIP_SELECT();
	
	DD_SPI_PCS_DECODER_DEACTIVE();
   81d40:	4b09      	ldr	r3, [pc, #36]	; (81d68 <DD_INIT_ALL_SENSORS+0xbc>)
   81d42:	4798      	blx	r3
 	DD_DISABLE_ISOLATORS_MISO_PIN();
   81d44:	4b09      	ldr	r3, [pc, #36]	; (81d6c <DD_INIT_ALL_SENSORS+0xc0>)
   81d46:	4798      	blx	r3
	 for(int i=0; i<10000;i++) {}
   81d48:	2300      	movs	r3, #0
   81d4a:	603b      	str	r3, [r7, #0]
   81d4c:	e002      	b.n	81d54 <DD_INIT_ALL_SENSORS+0xa8>
   81d4e:	683b      	ldr	r3, [r7, #0]
   81d50:	3301      	adds	r3, #1
   81d52:	603b      	str	r3, [r7, #0]
   81d54:	683b      	ldr	r3, [r7, #0]
   81d56:	f242 720f 	movw	r2, #9999	; 0x270f
   81d5a:	4293      	cmp	r3, r2
   81d5c:	ddf7      	ble.n	81d4e <DD_INIT_ALL_SENSORS+0xa2>
	  command_data_array[0] = DAC2_GAIN_X10 | CS3_GAIN_X100  ;
	  DD_AN_MUX_CHIPSEL_3();
	  dd_spi_set_peripheral_chip_select_value(ISOLTR_4_CS_ID);
	  dd_spi_master_transfer(&command_data_array, 1, ISOLTR_4_CS_ID );	 */
	 
	 return 0;
   81d5e:	2300      	movs	r3, #0
}
   81d60:	4618      	mov	r0, r3
   81d62:	3710      	adds	r7, #16
   81d64:	46bd      	mov	sp, r7
   81d66:	bd80      	pop	{r7, pc}
   81d68:	00081bc5 	.word	0x00081bc5
   81d6c:	00081be1 	.word	0x00081be1
   81d70:	00081235 	.word	0x00081235
   81d74:	00081305 	.word	0x00081305
   81d78:	000813d1 	.word	0x000813d1
   81d7c:	00081ba9 	.word	0x00081ba9
   81d80:	00081c11 	.word	0x00081c11
   81d84:	00082e29 	.word	0x00082e29
   81d88:	00082ea1 	.word	0x00082ea1
   81d8c:	00080869 	.word	0x00080869
   81d90:	000808dd 	.word	0x000808dd
   81d94:	00081c45 	.word	0x00081c45
   81d98:	00080951 	.word	0x00080951
   81d9c:	00082f19 	.word	0x00082f19

00081da0 <DD_READ_SENSORS>:



sensor_status_t DD_READ_SENSORS(sv_sensortype ID_SENSOR, uint16_t *sensor_status )   {
   81da0:	b580      	push	{r7, lr}
   81da2:	b0a0      	sub	sp, #128	; 0x80
   81da4:	af00      	add	r7, sp, #0
   81da6:	4603      	mov	r3, r0
   81da8:	6039      	str	r1, [r7, #0]
   81daa:	71fb      	strb	r3, [r7, #7]
	uint16_t  work_reg ;
	*sensor_status=0;
   81dac:	683b      	ldr	r3, [r7, #0]
   81dae:	2200      	movs	r2, #0
   81db0:	801a      	strh	r2, [r3, #0]
	uint8_t conductivity_mux_reg_1, conductivity_mux_reg_2, conductivity_mux_reg_3;
	uint16_t CONDUCTIVITY_SENSOR_RMS_VOLTAGE;
	uint32_t timeout = SENSOR_TIMEOUT;
   81db2:	f643 2398 	movw	r3, #15000	; 0x3a98
   81db6:	67fb      	str	r3, [r7, #124]	; 0x7c
	
	switch(ID_SENSOR)
   81db8:	79fb      	ldrb	r3, [r7, #7]
   81dba:	3b01      	subs	r3, #1
   81dbc:	2b11      	cmp	r3, #17
   81dbe:	f201 8024 	bhi.w	82e0a <DD_READ_SENSORS+0x106a>
   81dc2:	a201      	add	r2, pc, #4	; (adr r2, 81dc8 <DD_READ_SENSORS+0x28>)
   81dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81dc8:	00081e11 	.word	0x00081e11
   81dcc:	00081e87 	.word	0x00081e87
   81dd0:	00081ef5 	.word	0x00081ef5
   81dd4:	00081f61 	.word	0x00081f61
   81dd8:	00081f8f 	.word	0x00081f8f
   81ddc:	00082009 	.word	0x00082009
   81de0:	000820bd 	.word	0x000820bd
   81de4:	00082131 	.word	0x00082131
   81de8:	000821a7 	.word	0x000821a7
   81dec:	0008221d 	.word	0x0008221d
   81df0:	00082293 	.word	0x00082293
   81df4:	000825b1 	.word	0x000825b1
   81df8:	00082709 	.word	0x00082709
   81dfc:	00082853 	.word	0x00082853
   81e00:	000829cd 	.word	0x000829cd
   81e04:	00082b45 	.word	0x00082b45
   81e08:	00082c8f 	.word	0x00082c8f
   81e0c:	00082e0b 	.word	0x00082e0b
	{
		case SV_PS1_ID:
		   dd_SET_OUTPUT_DATA(PIOC, PD_PS1_SEN_PIN); 
   81e10:	2108      	movs	r1, #8
   81e12:	489c      	ldr	r0, [pc, #624]	; (82084 <DD_READ_SENSORS+0x2e4>)
   81e14:	4b9c      	ldr	r3, [pc, #624]	; (82088 <DD_READ_SENSORS+0x2e8>)
   81e16:	4798      	blx	r3
		   DD_DISABLE_ISOLATORS_MISO_PIN();
   81e18:	4b9c      	ldr	r3, [pc, #624]	; (8208c <DD_READ_SENSORS+0x2ec>)
   81e1a:	4798      	blx	r3
		   command_data_array[0] = ADS1120_RDATA;
   81e1c:	4b9c      	ldr	r3, [pc, #624]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81e1e:	2210      	movs	r2, #16
   81e20:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   81e22:	4b9b      	ldr	r3, [pc, #620]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81e24:	2200      	movs	r2, #0
   81e26:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   81e28:	4b99      	ldr	r3, [pc, #612]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81e2a:	2200      	movs	r2, #0
   81e2c:	709a      	strb	r2, [r3, #2]
		   while (PS1_DRDY_N_status) {
   81e2e:	e007      	b.n	81e40 <DD_READ_SENSORS+0xa0>
			   if (!timeout--) {
   81e30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   81e32:	1e5a      	subs	r2, r3, #1
   81e34:	67fa      	str	r2, [r7, #124]	; 0x7c
   81e36:	2b00      	cmp	r3, #0
   81e38:	d102      	bne.n	81e40 <DD_READ_SENSORS+0xa0>
				   return SENSOR_NOT_READY;
   81e3a:	2301      	movs	r3, #1
   81e3c:	f000 bfe6 	b.w	82e0c <DD_READ_SENSORS+0x106c>
		   dd_SET_OUTPUT_DATA(PIOC, PD_PS1_SEN_PIN); 
		   DD_DISABLE_ISOLATORS_MISO_PIN();
		   command_data_array[0] = ADS1120_RDATA;
		   command_data_array[1] = 0;
		   command_data_array[2] = 0;
		   while (PS1_DRDY_N_status) {
   81e40:	4b94      	ldr	r3, [pc, #592]	; (82094 <DD_READ_SENSORS+0x2f4>)
   81e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81e44:	089b      	lsrs	r3, r3, #2
   81e46:	f003 0301 	and.w	r3, r3, #1
   81e4a:	2b00      	cmp	r3, #0
   81e4c:	d1f0      	bne.n	81e30 <DD_READ_SENSORS+0x90>
			   if (!timeout--) {
				   return SENSOR_NOT_READY;
			   }
		   }		   
		   DD_SPI_PCS_DECODER_ACTIVE();	   		   		   
   81e4e:	4b92      	ldr	r3, [pc, #584]	; (82098 <DD_READ_SENSORS+0x2f8>)
   81e50:	4798      	blx	r3
		   dd_spi_set_peripheral_chip_select_value(PS1_CS_N_ID);
   81e52:	2005      	movs	r0, #5
   81e54:	4b91      	ldr	r3, [pc, #580]	; (8209c <DD_READ_SENSORS+0x2fc>)
   81e56:	4798      	blx	r3
		  // for (int i = 0; i <100 ; i++);	
		   dd_spi_master_read(&command_data_array, 3, PS1_CS_N_ID);
   81e58:	2205      	movs	r2, #5
   81e5a:	2103      	movs	r1, #3
   81e5c:	488c      	ldr	r0, [pc, #560]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81e5e:	4b90      	ldr	r3, [pc, #576]	; (820a0 <DD_READ_SENSORS+0x300>)
   81e60:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[1];
   81e62:	4b8b      	ldr	r3, [pc, #556]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81e64:	785a      	ldrb	r2, [r3, #1]
   81e66:	4b8f      	ldr	r3, [pc, #572]	; (820a4 <DD_READ_SENSORS+0x304>)
   81e68:	705a      	strb	r2, [r3, #1]
		   spi_data.bytearray[0]=command_data_array[2];
   81e6a:	4b89      	ldr	r3, [pc, #548]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81e6c:	789a      	ldrb	r2, [r3, #2]
   81e6e:	4b8d      	ldr	r3, [pc, #564]	; (820a4 <DD_READ_SENSORS+0x304>)
   81e70:	701a      	strb	r2, [r3, #0]
		   *sensor_status = spi_data.Twobyte;
   81e72:	4b8c      	ldr	r3, [pc, #560]	; (820a4 <DD_READ_SENSORS+0x304>)
   81e74:	881b      	ldrh	r3, [r3, #0]
   81e76:	b29a      	uxth	r2, r3
   81e78:	683b      	ldr	r3, [r7, #0]
   81e7a:	801a      	strh	r2, [r3, #0]
		   DD_DISABLE_ISOLATORS_MISO_PIN();
   81e7c:	4b83      	ldr	r3, [pc, #524]	; (8208c <DD_READ_SENSORS+0x2ec>)
   81e7e:	4798      	blx	r3
	       return SENSOR_READ_OK;		  
   81e80:	2300      	movs	r3, #0
   81e82:	f000 bfc3 	b.w	82e0c <DD_READ_SENSORS+0x106c>
		break;
				
		case SV_PS2_ID:
		   DD_DISABLE_ISOLATORS_MISO_PIN();
   81e86:	4b81      	ldr	r3, [pc, #516]	; (8208c <DD_READ_SENSORS+0x2ec>)
   81e88:	4798      	blx	r3
		   command_data_array[0] = ADS1120_RDATA;
   81e8a:	4b81      	ldr	r3, [pc, #516]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81e8c:	2210      	movs	r2, #16
   81e8e:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   81e90:	4b7f      	ldr	r3, [pc, #508]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81e92:	2200      	movs	r2, #0
   81e94:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   81e96:	4b7e      	ldr	r3, [pc, #504]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81e98:	2200      	movs	r2, #0
   81e9a:	709a      	strb	r2, [r3, #2]
		   
		    while (PS2_DRDY_N_status) {
   81e9c:	e007      	b.n	81eae <DD_READ_SENSORS+0x10e>
			    if (!timeout--) {
   81e9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   81ea0:	1e5a      	subs	r2, r3, #1
   81ea2:	67fa      	str	r2, [r7, #124]	; 0x7c
   81ea4:	2b00      	cmp	r3, #0
   81ea6:	d102      	bne.n	81eae <DD_READ_SENSORS+0x10e>
				    return SENSOR_NOT_READY;
   81ea8:	2301      	movs	r3, #1
   81eaa:	f000 bfaf 	b.w	82e0c <DD_READ_SENSORS+0x106c>
		   DD_DISABLE_ISOLATORS_MISO_PIN();
		   command_data_array[0] = ADS1120_RDATA;
		   command_data_array[1] = 0;
		   command_data_array[2] = 0;
		   
		    while (PS2_DRDY_N_status) {
   81eae:	4b79      	ldr	r3, [pc, #484]	; (82094 <DD_READ_SENSORS+0x2f4>)
   81eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81eb2:	085b      	lsrs	r3, r3, #1
   81eb4:	f003 0301 	and.w	r3, r3, #1
   81eb8:	2b00      	cmp	r3, #0
   81eba:	d1f0      	bne.n	81e9e <DD_READ_SENSORS+0xfe>
			    if (!timeout--) {
				    return SENSOR_NOT_READY;
			    }
		    }		   
		 
		    DD_SPI_PCS_DECODER_ACTIVE();
   81ebc:	4b76      	ldr	r3, [pc, #472]	; (82098 <DD_READ_SENSORS+0x2f8>)
   81ebe:	4798      	blx	r3
			dd_spi_set_peripheral_chip_select_value(PS2_CS_N_ID);
   81ec0:	2006      	movs	r0, #6
   81ec2:	4b76      	ldr	r3, [pc, #472]	; (8209c <DD_READ_SENSORS+0x2fc>)
   81ec4:	4798      	blx	r3
			//for (int i = 0; i <100 ; i++);	
			dd_spi_master_read(&command_data_array, 3, PS2_CS_N_ID);
   81ec6:	2206      	movs	r2, #6
   81ec8:	2103      	movs	r1, #3
   81eca:	4871      	ldr	r0, [pc, #452]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81ecc:	4b74      	ldr	r3, [pc, #464]	; (820a0 <DD_READ_SENSORS+0x300>)
   81ece:	4798      	blx	r3
			spi_data.bytearray[1]=command_data_array[1];
   81ed0:	4b6f      	ldr	r3, [pc, #444]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81ed2:	785a      	ldrb	r2, [r3, #1]
   81ed4:	4b73      	ldr	r3, [pc, #460]	; (820a4 <DD_READ_SENSORS+0x304>)
   81ed6:	705a      	strb	r2, [r3, #1]
			spi_data.bytearray[0]=command_data_array[2];
   81ed8:	4b6d      	ldr	r3, [pc, #436]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81eda:	789a      	ldrb	r2, [r3, #2]
   81edc:	4b71      	ldr	r3, [pc, #452]	; (820a4 <DD_READ_SENSORS+0x304>)
   81ede:	701a      	strb	r2, [r3, #0]
			*sensor_status = spi_data.Twobyte;
   81ee0:	4b70      	ldr	r3, [pc, #448]	; (820a4 <DD_READ_SENSORS+0x304>)
   81ee2:	881b      	ldrh	r3, [r3, #0]
   81ee4:	b29a      	uxth	r2, r3
   81ee6:	683b      	ldr	r3, [r7, #0]
   81ee8:	801a      	strh	r2, [r3, #0]
			DD_DISABLE_ISOLATORS_MISO_PIN();  
   81eea:	4b68      	ldr	r3, [pc, #416]	; (8208c <DD_READ_SENSORS+0x2ec>)
   81eec:	4798      	blx	r3
		    return SENSOR_READ_OK;
   81eee:	2300      	movs	r3, #0
   81ef0:	f000 bf8c 	b.w	82e0c <DD_READ_SENSORS+0x106c>
		break;
		
		case SV_PS3_ID:
		   DD_DISABLE_ISOLATORS_MISO_PIN();
   81ef4:	4b65      	ldr	r3, [pc, #404]	; (8208c <DD_READ_SENSORS+0x2ec>)
   81ef6:	4798      	blx	r3
		   command_data_array[0] = ADS1120_RDATA;
   81ef8:	4b65      	ldr	r3, [pc, #404]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81efa:	2210      	movs	r2, #16
   81efc:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   81efe:	4b64      	ldr	r3, [pc, #400]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81f00:	2200      	movs	r2, #0
   81f02:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   81f04:	4b62      	ldr	r3, [pc, #392]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81f06:	2200      	movs	r2, #0
   81f08:	709a      	strb	r2, [r3, #2]
		   
		   while (PS3_DRDY_N_status) {
   81f0a:	e007      	b.n	81f1c <DD_READ_SENSORS+0x17c>
			   if (!timeout--) {
   81f0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   81f0e:	1e5a      	subs	r2, r3, #1
   81f10:	67fa      	str	r2, [r7, #124]	; 0x7c
   81f12:	2b00      	cmp	r3, #0
   81f14:	d102      	bne.n	81f1c <DD_READ_SENSORS+0x17c>
				   return SENSOR_NOT_READY;
   81f16:	2301      	movs	r3, #1
   81f18:	f000 bf78 	b.w	82e0c <DD_READ_SENSORS+0x106c>
		   DD_DISABLE_ISOLATORS_MISO_PIN();
		   command_data_array[0] = ADS1120_RDATA;
		   command_data_array[1] = 0;
		   command_data_array[2] = 0;
		   
		   while (PS3_DRDY_N_status) {
   81f1c:	4b5d      	ldr	r3, [pc, #372]	; (82094 <DD_READ_SENSORS+0x2f4>)
   81f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81f20:	f003 0301 	and.w	r3, r3, #1
   81f24:	2b00      	cmp	r3, #0
   81f26:	d1f1      	bne.n	81f0c <DD_READ_SENSORS+0x16c>
			   if (!timeout--) {
				   return SENSOR_NOT_READY;
			   }
		   }
		DD_SPI_PCS_DECODER_ACTIVE();
   81f28:	4b5b      	ldr	r3, [pc, #364]	; (82098 <DD_READ_SENSORS+0x2f8>)
   81f2a:	4798      	blx	r3
		dd_spi_set_peripheral_chip_select_value(PS3_CS_N_ID);
   81f2c:	2007      	movs	r0, #7
   81f2e:	4b5b      	ldr	r3, [pc, #364]	; (8209c <DD_READ_SENSORS+0x2fc>)
   81f30:	4798      	blx	r3
	    //for (int i = 0; i <100 ; i++);	
		dd_spi_master_read(&command_data_array, 3, PS3_CS_N_ID);
   81f32:	2207      	movs	r2, #7
   81f34:	2103      	movs	r1, #3
   81f36:	4856      	ldr	r0, [pc, #344]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81f38:	4b59      	ldr	r3, [pc, #356]	; (820a0 <DD_READ_SENSORS+0x300>)
   81f3a:	4798      	blx	r3
	    spi_data.bytearray[1]=command_data_array[1];
   81f3c:	4b54      	ldr	r3, [pc, #336]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81f3e:	785a      	ldrb	r2, [r3, #1]
   81f40:	4b58      	ldr	r3, [pc, #352]	; (820a4 <DD_READ_SENSORS+0x304>)
   81f42:	705a      	strb	r2, [r3, #1]
		spi_data.bytearray[0]=command_data_array[2];
   81f44:	4b52      	ldr	r3, [pc, #328]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81f46:	789a      	ldrb	r2, [r3, #2]
   81f48:	4b56      	ldr	r3, [pc, #344]	; (820a4 <DD_READ_SENSORS+0x304>)
   81f4a:	701a      	strb	r2, [r3, #0]
	    *sensor_status = spi_data.Twobyte;
   81f4c:	4b55      	ldr	r3, [pc, #340]	; (820a4 <DD_READ_SENSORS+0x304>)
   81f4e:	881b      	ldrh	r3, [r3, #0]
   81f50:	b29a      	uxth	r2, r3
   81f52:	683b      	ldr	r3, [r7, #0]
   81f54:	801a      	strh	r2, [r3, #0]
		DD_DISABLE_ISOLATORS_MISO_PIN();
   81f56:	4b4d      	ldr	r3, [pc, #308]	; (8208c <DD_READ_SENSORS+0x2ec>)
   81f58:	4798      	blx	r3
		return SENSOR_READ_OK;   		  
   81f5a:	2300      	movs	r3, #0
   81f5c:	f000 bf56 	b.w	82e0c <DD_READ_SENSORS+0x106c>
		   		
		break;
		
		case SV_THERMOCOUPLE_ID:
		 DD_SPI_PCS_DECODER_DEACTIVE();
   81f60:	4b51      	ldr	r3, [pc, #324]	; (820a8 <DD_READ_SENSORS+0x308>)
   81f62:	4798      	blx	r3
		
		   DD_DISABLE_ISOLATORS_MISO_PIN();
   81f64:	4b49      	ldr	r3, [pc, #292]	; (8208c <DD_READ_SENSORS+0x2ec>)
   81f66:	4798      	blx	r3
		    DD_SPI_PCS_DECODER_ACTIVE();
   81f68:	4b4b      	ldr	r3, [pc, #300]	; (82098 <DD_READ_SENSORS+0x2f8>)
   81f6a:	4798      	blx	r3
		   command_data_array[0] = 0;
   81f6c:	4b48      	ldr	r3, [pc, #288]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81f6e:	2200      	movs	r2, #0
   81f70:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   81f72:	4b47      	ldr	r3, [pc, #284]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81f74:	2200      	movs	r2, #0
   81f76:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   81f78:	4b45      	ldr	r3, [pc, #276]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81f7a:	2200      	movs	r2, #0
   81f7c:	709a      	strb	r2, [r3, #2]
		    while (THERMOCOUPLE_DRDY_PIN) {
			    if (!timeout--) {
   81f7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   81f80:	1e5a      	subs	r2, r3, #1
   81f82:	67fa      	str	r2, [r7, #124]	; 0x7c
   81f84:	2b00      	cmp	r3, #0
   81f86:	d1fa      	bne.n	81f7e <DD_READ_SENSORS+0x1de>
				    return SENSOR_NOT_READY;
   81f88:	2301      	movs	r3, #1
   81f8a:	f000 bf3f 	b.w	82e0c <DD_READ_SENSORS+0x106c>
			DD_DISABLE_ISOLATORS_MISO_PIN();	
			return SENSOR_READ_OK;	   		
		break;
		
		case SV_TS1_ID:
		   command_data_array[0] = 1;
   81f8e:	4b40      	ldr	r3, [pc, #256]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81f90:	2201      	movs	r2, #1
   81f92:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   81f94:	4b3e      	ldr	r3, [pc, #248]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81f96:	2200      	movs	r2, #0
   81f98:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   81f9a:	4b3d      	ldr	r3, [pc, #244]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81f9c:	2200      	movs	r2, #0
   81f9e:	709a      	strb	r2, [r3, #2]
		   
		    while (DRDY_TS1_status) {
   81fa0:	e007      	b.n	81fb2 <DD_READ_SENSORS+0x212>
			    if (!timeout--) {
   81fa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   81fa4:	1e5a      	subs	r2, r3, #1
   81fa6:	67fa      	str	r2, [r7, #124]	; 0x7c
   81fa8:	2b00      	cmp	r3, #0
   81faa:	d102      	bne.n	81fb2 <DD_READ_SENSORS+0x212>
				    return SENSOR_NOT_READY;
   81fac:	2301      	movs	r3, #1
   81fae:	f000 bf2d 	b.w	82e0c <DD_READ_SENSORS+0x106c>
		case SV_TS1_ID:
		   command_data_array[0] = 1;
		   command_data_array[1] = 0;
		   command_data_array[2] = 0;
		   
		    while (DRDY_TS1_status) {
   81fb2:	4b3e      	ldr	r3, [pc, #248]	; (820ac <DD_READ_SENSORS+0x30c>)
   81fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81fb6:	0bdb      	lsrs	r3, r3, #15
   81fb8:	f003 0301 	and.w	r3, r3, #1
   81fbc:	2b00      	cmp	r3, #0
   81fbe:	d1f0      	bne.n	81fa2 <DD_READ_SENSORS+0x202>
			    if (!timeout--) {
				    return SENSOR_NOT_READY;
			    }
		    } 
		   
			   DD_SPI_PCS_DECODER_ACTIVE();
   81fc0:	4b35      	ldr	r3, [pc, #212]	; (82098 <DD_READ_SENSORS+0x2f8>)
   81fc2:	4798      	blx	r3
			   DD_DISABLE_ISOLATORS_MISO_PIN();
   81fc4:	4b31      	ldr	r3, [pc, #196]	; (8208c <DD_READ_SENSORS+0x2ec>)
   81fc6:	4798      	blx	r3
			   DD_ENABLE_ISOLATOR_1();			   
   81fc8:	4b39      	ldr	r3, [pc, #228]	; (820b0 <DD_READ_SENSORS+0x310>)
   81fca:	4798      	blx	r3
			   DD_TS1_CHIP_SELECT();			  	   
   81fcc:	4b39      	ldr	r3, [pc, #228]	; (820b4 <DD_READ_SENSORS+0x314>)
   81fce:	4798      	blx	r3
			   dd_spi_set_peripheral_chip_select_value(ISOLTR_1_CS_ID);
   81fd0:	2001      	movs	r0, #1
   81fd2:	4b32      	ldr	r3, [pc, #200]	; (8209c <DD_READ_SENSORS+0x2fc>)
   81fd4:	4798      	blx	r3
			   dd_spi_master_read(&command_data_array, 3, ISOLTR_1_CS_ID);			   
   81fd6:	2201      	movs	r2, #1
   81fd8:	2103      	movs	r1, #3
   81fda:	482d      	ldr	r0, [pc, #180]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81fdc:	4b30      	ldr	r3, [pc, #192]	; (820a0 <DD_READ_SENSORS+0x300>)
   81fde:	4798      	blx	r3
			   spi_data.bytearray[1]=command_data_array[1];
   81fe0:	4b2b      	ldr	r3, [pc, #172]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81fe2:	785a      	ldrb	r2, [r3, #1]
   81fe4:	4b2f      	ldr	r3, [pc, #188]	; (820a4 <DD_READ_SENSORS+0x304>)
   81fe6:	705a      	strb	r2, [r3, #1]
			   spi_data.bytearray[0]=command_data_array[2];
   81fe8:	4b29      	ldr	r3, [pc, #164]	; (82090 <DD_READ_SENSORS+0x2f0>)
   81fea:	789a      	ldrb	r2, [r3, #2]
   81fec:	4b2d      	ldr	r3, [pc, #180]	; (820a4 <DD_READ_SENSORS+0x304>)
   81fee:	701a      	strb	r2, [r3, #0]
			   *sensor_status = spi_data.Twobyte; 			
   81ff0:	4b2c      	ldr	r3, [pc, #176]	; (820a4 <DD_READ_SENSORS+0x304>)
   81ff2:	881b      	ldrh	r3, [r3, #0]
   81ff4:	b29a      	uxth	r2, r3
   81ff6:	683b      	ldr	r3, [r7, #0]
   81ff8:	801a      	strh	r2, [r3, #0]
			  // for(unsigned int count=0; count<1000; count++ )   { ;}
 			   DD_SPI_PCS_DECODER_DEACTIVE();
   81ffa:	4b2b      	ldr	r3, [pc, #172]	; (820a8 <DD_READ_SENSORS+0x308>)
   81ffc:	4798      	blx	r3
 			   DD_DISABLE_ISOLATORS_MISO_PIN();	
   81ffe:	4b23      	ldr	r3, [pc, #140]	; (8208c <DD_READ_SENSORS+0x2ec>)
   82000:	4798      	blx	r3
			   return SENSOR_READ_OK;		   	
   82002:	2300      	movs	r3, #0
   82004:	f000 bf02 	b.w	82e0c <DD_READ_SENSORS+0x106c>
		break;
		
		case SV_TS2_ID:
		   command_data_array[0] = 1;
   82008:	4b21      	ldr	r3, [pc, #132]	; (82090 <DD_READ_SENSORS+0x2f0>)
   8200a:	2201      	movs	r2, #1
   8200c:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   8200e:	4b20      	ldr	r3, [pc, #128]	; (82090 <DD_READ_SENSORS+0x2f0>)
   82010:	2200      	movs	r2, #0
   82012:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   82014:	4b1e      	ldr	r3, [pc, #120]	; (82090 <DD_READ_SENSORS+0x2f0>)
   82016:	2200      	movs	r2, #0
   82018:	709a      	strb	r2, [r3, #2]
		   
		   while (DRDY_TS2_status) {
   8201a:	e007      	b.n	8202c <DD_READ_SENSORS+0x28c>
			   if (!timeout--) {
   8201c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   8201e:	1e5a      	subs	r2, r3, #1
   82020:	67fa      	str	r2, [r7, #124]	; 0x7c
   82022:	2b00      	cmp	r3, #0
   82024:	d102      	bne.n	8202c <DD_READ_SENSORS+0x28c>
				   return SENSOR_NOT_READY;
   82026:	2301      	movs	r3, #1
   82028:	f000 bef0 	b.w	82e0c <DD_READ_SENSORS+0x106c>
		case SV_TS2_ID:
		   command_data_array[0] = 1;
		   command_data_array[1] = 0;
		   command_data_array[2] = 0;
		   
		   while (DRDY_TS2_status) {
   8202c:	4b1f      	ldr	r3, [pc, #124]	; (820ac <DD_READ_SENSORS+0x30c>)
   8202e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82030:	0c1b      	lsrs	r3, r3, #16
   82032:	f003 0301 	and.w	r3, r3, #1
   82036:	2b00      	cmp	r3, #0
   82038:	d1f0      	bne.n	8201c <DD_READ_SENSORS+0x27c>
				   return SENSOR_NOT_READY;
			   }
		   }
		   
		   
		   DD_SPI_PCS_DECODER_ACTIVE();
   8203a:	4b17      	ldr	r3, [pc, #92]	; (82098 <DD_READ_SENSORS+0x2f8>)
   8203c:	4798      	blx	r3
		   DD_DISABLE_ISOLATORS_MISO_PIN();
   8203e:	4b13      	ldr	r3, [pc, #76]	; (8208c <DD_READ_SENSORS+0x2ec>)
   82040:	4798      	blx	r3
		   DD_ENABLE_ISOLATOR_1();			   
   82042:	4b1b      	ldr	r3, [pc, #108]	; (820b0 <DD_READ_SENSORS+0x310>)
   82044:	4798      	blx	r3
		   DD_TS2_CHIP_SELECT();	
   82046:	4b1c      	ldr	r3, [pc, #112]	; (820b8 <DD_READ_SENSORS+0x318>)
   82048:	4798      	blx	r3
		   dd_spi_set_peripheral_chip_select_value(ISOLTR_1_CS_ID);
   8204a:	2001      	movs	r0, #1
   8204c:	4b13      	ldr	r3, [pc, #76]	; (8209c <DD_READ_SENSORS+0x2fc>)
   8204e:	4798      	blx	r3
		   dd_spi_master_read(&command_data_array, 3,ISOLTR_1_CS_ID );
   82050:	2201      	movs	r2, #1
   82052:	2103      	movs	r1, #3
   82054:	480e      	ldr	r0, [pc, #56]	; (82090 <DD_READ_SENSORS+0x2f0>)
   82056:	4b12      	ldr	r3, [pc, #72]	; (820a0 <DD_READ_SENSORS+0x300>)
   82058:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[1];
   8205a:	4b0d      	ldr	r3, [pc, #52]	; (82090 <DD_READ_SENSORS+0x2f0>)
   8205c:	785a      	ldrb	r2, [r3, #1]
   8205e:	4b11      	ldr	r3, [pc, #68]	; (820a4 <DD_READ_SENSORS+0x304>)
   82060:	705a      	strb	r2, [r3, #1]
		   spi_data.bytearray[0]=command_data_array[2];
   82062:	4b0b      	ldr	r3, [pc, #44]	; (82090 <DD_READ_SENSORS+0x2f0>)
   82064:	789a      	ldrb	r2, [r3, #2]
   82066:	4b0f      	ldr	r3, [pc, #60]	; (820a4 <DD_READ_SENSORS+0x304>)
   82068:	701a      	strb	r2, [r3, #0]
		   *sensor_status = spi_data.Twobyte;		   
   8206a:	4b0e      	ldr	r3, [pc, #56]	; (820a4 <DD_READ_SENSORS+0x304>)
   8206c:	881b      	ldrh	r3, [r3, #0]
   8206e:	b29a      	uxth	r2, r3
   82070:	683b      	ldr	r3, [r7, #0]
   82072:	801a      	strh	r2, [r3, #0]
 		   DD_SPI_PCS_DECODER_DEACTIVE();
   82074:	4b0c      	ldr	r3, [pc, #48]	; (820a8 <DD_READ_SENSORS+0x308>)
   82076:	4798      	blx	r3
		   DD_DISABLE_ISOLATORS_MISO_PIN();	
   82078:	4b04      	ldr	r3, [pc, #16]	; (8208c <DD_READ_SENSORS+0x2ec>)
   8207a:	4798      	blx	r3
		   return SENSOR_READ_OK;		    
   8207c:	2300      	movs	r3, #0
   8207e:	f000 bec5 	b.w	82e0c <DD_READ_SENSORS+0x106c>
   82082:	bf00      	nop
   82084:	400e1200 	.word	0x400e1200
   82088:	00081155 	.word	0x00081155
   8208c:	00081be1 	.word	0x00081be1
   82090:	20070ae8 	.word	0x20070ae8
   82094:	400e1400 	.word	0x400e1400
   82098:	00081ba9 	.word	0x00081ba9
   8209c:	0008170d 	.word	0x0008170d
   820a0:	000817b5 	.word	0x000817b5
   820a4:	20070ae4 	.word	0x20070ae4
   820a8:	00081bc5 	.word	0x00081bc5
   820ac:	400e0e00 	.word	0x400e0e00
   820b0:	00081c11 	.word	0x00081c11
   820b4:	00081a81 	.word	0x00081a81
   820b8:	00081a99 	.word	0x00081a99
		break;
		
		case SV_CS1_TS_ID:
		   command_data_array[0] = 1;
   820bc:	4b9d      	ldr	r3, [pc, #628]	; (82334 <DD_READ_SENSORS+0x594>)
   820be:	2201      	movs	r2, #1
   820c0:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   820c2:	4b9c      	ldr	r3, [pc, #624]	; (82334 <DD_READ_SENSORS+0x594>)
   820c4:	2200      	movs	r2, #0
   820c6:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   820c8:	4b9a      	ldr	r3, [pc, #616]	; (82334 <DD_READ_SENSORS+0x594>)
   820ca:	2200      	movs	r2, #0
   820cc:	709a      	strb	r2, [r3, #2]
		   
		   while (DRDY_CS1_TS_status) {
   820ce:	e007      	b.n	820e0 <DD_READ_SENSORS+0x340>
			   if (!timeout--) {
   820d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   820d2:	1e5a      	subs	r2, r3, #1
   820d4:	67fa      	str	r2, [r7, #124]	; 0x7c
   820d6:	2b00      	cmp	r3, #0
   820d8:	d102      	bne.n	820e0 <DD_READ_SENSORS+0x340>
				   return SENSOR_NOT_READY;
   820da:	2301      	movs	r3, #1
   820dc:	f000 be96 	b.w	82e0c <DD_READ_SENSORS+0x106c>
		case SV_CS1_TS_ID:
		   command_data_array[0] = 1;
		   command_data_array[1] = 0;
		   command_data_array[2] = 0;
		   
		   while (DRDY_CS1_TS_status) {
   820e0:	4b95      	ldr	r3, [pc, #596]	; (82338 <DD_READ_SENSORS+0x598>)
   820e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   820e4:	0c5b      	lsrs	r3, r3, #17
   820e6:	f003 0301 	and.w	r3, r3, #1
   820ea:	2b00      	cmp	r3, #0
   820ec:	d1f0      	bne.n	820d0 <DD_READ_SENSORS+0x330>
			   if (!timeout--) {
				   return SENSOR_NOT_READY;
			   }
		   }		   
		   
			   DD_SPI_PCS_DECODER_ACTIVE();
   820ee:	4b93      	ldr	r3, [pc, #588]	; (8233c <DD_READ_SENSORS+0x59c>)
   820f0:	4798      	blx	r3
			   DD_ENABLE_ISOLATOR_1();
   820f2:	4b93      	ldr	r3, [pc, #588]	; (82340 <DD_READ_SENSORS+0x5a0>)
   820f4:	4798      	blx	r3
			   DD_CS1_TS_CHIP_SELECT();
   820f6:	4b93      	ldr	r3, [pc, #588]	; (82344 <DD_READ_SENSORS+0x5a4>)
   820f8:	4798      	blx	r3
			   dd_spi_set_peripheral_chip_select_value(ISOLTR_1_CS_ID);
   820fa:	2001      	movs	r0, #1
   820fc:	4b92      	ldr	r3, [pc, #584]	; (82348 <DD_READ_SENSORS+0x5a8>)
   820fe:	4798      	blx	r3
			   dd_spi_master_read(&command_data_array, 3, ISOLTR_1_CS_ID);
   82100:	2201      	movs	r2, #1
   82102:	2103      	movs	r1, #3
   82104:	488b      	ldr	r0, [pc, #556]	; (82334 <DD_READ_SENSORS+0x594>)
   82106:	4b91      	ldr	r3, [pc, #580]	; (8234c <DD_READ_SENSORS+0x5ac>)
   82108:	4798      	blx	r3
			   spi_data.bytearray[1]=command_data_array[1];
   8210a:	4b8a      	ldr	r3, [pc, #552]	; (82334 <DD_READ_SENSORS+0x594>)
   8210c:	785a      	ldrb	r2, [r3, #1]
   8210e:	4b90      	ldr	r3, [pc, #576]	; (82350 <DD_READ_SENSORS+0x5b0>)
   82110:	705a      	strb	r2, [r3, #1]
			   spi_data.bytearray[0]=command_data_array[2];
   82112:	4b88      	ldr	r3, [pc, #544]	; (82334 <DD_READ_SENSORS+0x594>)
   82114:	789a      	ldrb	r2, [r3, #2]
   82116:	4b8e      	ldr	r3, [pc, #568]	; (82350 <DD_READ_SENSORS+0x5b0>)
   82118:	701a      	strb	r2, [r3, #0]
			   sensor_status = spi_data.Twobyte;
   8211a:	4b8d      	ldr	r3, [pc, #564]	; (82350 <DD_READ_SENSORS+0x5b0>)
   8211c:	881b      	ldrh	r3, [r3, #0]
   8211e:	b29b      	uxth	r3, r3
   82120:	603b      	str	r3, [r7, #0]
		   
		   DD_SPI_PCS_DECODER_DEACTIVE();
   82122:	4b8c      	ldr	r3, [pc, #560]	; (82354 <DD_READ_SENSORS+0x5b4>)
   82124:	4798      	blx	r3
		   DD_DISABLE_ISOLATORS_MISO_PIN();	
   82126:	4b8c      	ldr	r3, [pc, #560]	; (82358 <DD_READ_SENSORS+0x5b8>)
   82128:	4798      	blx	r3
		   return SENSOR_READ_OK;	    
   8212a:	2300      	movs	r3, #0
   8212c:	f000 be6e 	b.w	82e0c <DD_READ_SENSORS+0x106c>
		break;
		
		case SV_CS2_TS_ID:
		   command_data_array[0] = 1;
   82130:	4b80      	ldr	r3, [pc, #512]	; (82334 <DD_READ_SENSORS+0x594>)
   82132:	2201      	movs	r2, #1
   82134:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   82136:	4b7f      	ldr	r3, [pc, #508]	; (82334 <DD_READ_SENSORS+0x594>)
   82138:	2200      	movs	r2, #0
   8213a:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   8213c:	4b7d      	ldr	r3, [pc, #500]	; (82334 <DD_READ_SENSORS+0x594>)
   8213e:	2200      	movs	r2, #0
   82140:	709a      	strb	r2, [r3, #2]
		   
		   while (DRDY_CS2_TS_status) {
   82142:	e007      	b.n	82154 <DD_READ_SENSORS+0x3b4>
			   if (!timeout--) {
   82144:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   82146:	1e5a      	subs	r2, r3, #1
   82148:	67fa      	str	r2, [r7, #124]	; 0x7c
   8214a:	2b00      	cmp	r3, #0
   8214c:	d102      	bne.n	82154 <DD_READ_SENSORS+0x3b4>
				   return SENSOR_NOT_READY;
   8214e:	2301      	movs	r3, #1
   82150:	f000 be5c 	b.w	82e0c <DD_READ_SENSORS+0x106c>
		case SV_CS2_TS_ID:
		   command_data_array[0] = 1;
		   command_data_array[1] = 0;
		   command_data_array[2] = 0;
		   
		   while (DRDY_CS2_TS_status) {
   82154:	4b78      	ldr	r3, [pc, #480]	; (82338 <DD_READ_SENSORS+0x598>)
   82156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82158:	0c9b      	lsrs	r3, r3, #18
   8215a:	f003 0301 	and.w	r3, r3, #1
   8215e:	2b00      	cmp	r3, #0
   82160:	d1f0      	bne.n	82144 <DD_READ_SENSORS+0x3a4>
			   if (!timeout--) {
				   return SENSOR_NOT_READY;
			   }
		   }	   
		  
			   DD_SPI_PCS_DECODER_ACTIVE();
   82162:	4b76      	ldr	r3, [pc, #472]	; (8233c <DD_READ_SENSORS+0x59c>)
   82164:	4798      	blx	r3
			   DD_ENABLE_ISOLATOR_1();
   82166:	4b76      	ldr	r3, [pc, #472]	; (82340 <DD_READ_SENSORS+0x5a0>)
   82168:	4798      	blx	r3
			   DD_CS2_TS_CHIP_SELECT();
   8216a:	4b7c      	ldr	r3, [pc, #496]	; (8235c <DD_READ_SENSORS+0x5bc>)
   8216c:	4798      	blx	r3
			   dd_spi_set_peripheral_chip_select_value(ISOLTR_1_CS_ID);
   8216e:	2001      	movs	r0, #1
   82170:	4b75      	ldr	r3, [pc, #468]	; (82348 <DD_READ_SENSORS+0x5a8>)
   82172:	4798      	blx	r3
			   dd_spi_master_read(&command_data_array, 3, ISOLTR_1_CS_ID);
   82174:	2201      	movs	r2, #1
   82176:	2103      	movs	r1, #3
   82178:	486e      	ldr	r0, [pc, #440]	; (82334 <DD_READ_SENSORS+0x594>)
   8217a:	4b74      	ldr	r3, [pc, #464]	; (8234c <DD_READ_SENSORS+0x5ac>)
   8217c:	4798      	blx	r3
			   spi_data.bytearray[1]=command_data_array[1];
   8217e:	4b6d      	ldr	r3, [pc, #436]	; (82334 <DD_READ_SENSORS+0x594>)
   82180:	785a      	ldrb	r2, [r3, #1]
   82182:	4b73      	ldr	r3, [pc, #460]	; (82350 <DD_READ_SENSORS+0x5b0>)
   82184:	705a      	strb	r2, [r3, #1]
			   spi_data.bytearray[0]=command_data_array[2];
   82186:	4b6b      	ldr	r3, [pc, #428]	; (82334 <DD_READ_SENSORS+0x594>)
   82188:	789a      	ldrb	r2, [r3, #2]
   8218a:	4b71      	ldr	r3, [pc, #452]	; (82350 <DD_READ_SENSORS+0x5b0>)
   8218c:	701a      	strb	r2, [r3, #0]
			   *sensor_status = spi_data.Twobyte;
   8218e:	4b70      	ldr	r3, [pc, #448]	; (82350 <DD_READ_SENSORS+0x5b0>)
   82190:	881b      	ldrh	r3, [r3, #0]
   82192:	b29a      	uxth	r2, r3
   82194:	683b      	ldr	r3, [r7, #0]
   82196:	801a      	strh	r2, [r3, #0]
		   
		   DD_SPI_PCS_DECODER_DEACTIVE();
   82198:	4b6e      	ldr	r3, [pc, #440]	; (82354 <DD_READ_SENSORS+0x5b4>)
   8219a:	4798      	blx	r3
		   DD_DISABLE_ISOLATORS_MISO_PIN();	
   8219c:	4b6e      	ldr	r3, [pc, #440]	; (82358 <DD_READ_SENSORS+0x5b8>)
   8219e:	4798      	blx	r3
		   
		   return SENSOR_READ_OK;	 
   821a0:	2300      	movs	r3, #0
   821a2:	f000 be33 	b.w	82e0c <DD_READ_SENSORS+0x106c>
		break;	
		
		
		case SV_TS3_ID:
		   command_data_array[0] = 1;
   821a6:	4b63      	ldr	r3, [pc, #396]	; (82334 <DD_READ_SENSORS+0x594>)
   821a8:	2201      	movs	r2, #1
   821aa:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   821ac:	4b61      	ldr	r3, [pc, #388]	; (82334 <DD_READ_SENSORS+0x594>)
   821ae:	2200      	movs	r2, #0
   821b0:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   821b2:	4b60      	ldr	r3, [pc, #384]	; (82334 <DD_READ_SENSORS+0x594>)
   821b4:	2200      	movs	r2, #0
   821b6:	709a      	strb	r2, [r3, #2]
		   
		   while (DRDY_TS3_status) {
   821b8:	e007      	b.n	821ca <DD_READ_SENSORS+0x42a>
			   if (!timeout--) {
   821ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   821bc:	1e5a      	subs	r2, r3, #1
   821be:	67fa      	str	r2, [r7, #124]	; 0x7c
   821c0:	2b00      	cmp	r3, #0
   821c2:	d102      	bne.n	821ca <DD_READ_SENSORS+0x42a>
				   return SENSOR_NOT_READY;
   821c4:	2301      	movs	r3, #1
   821c6:	f000 be21 	b.w	82e0c <DD_READ_SENSORS+0x106c>
		case SV_TS3_ID:
		   command_data_array[0] = 1;
		   command_data_array[1] = 0;
		   command_data_array[2] = 0;
		   
		   while (DRDY_TS3_status) {
   821ca:	4b5b      	ldr	r3, [pc, #364]	; (82338 <DD_READ_SENSORS+0x598>)
   821cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   821ce:	0d1b      	lsrs	r3, r3, #20
   821d0:	f003 0301 	and.w	r3, r3, #1
   821d4:	2b00      	cmp	r3, #0
   821d6:	d1f0      	bne.n	821ba <DD_READ_SENSORS+0x41a>
				   return SENSOR_NOT_READY;
			   }
		   }
		   
		   
			   DD_SPI_PCS_DECODER_ACTIVE();
   821d8:	4b58      	ldr	r3, [pc, #352]	; (8233c <DD_READ_SENSORS+0x59c>)
   821da:	4798      	blx	r3
			   DD_TS3_CHIP_SELECT();
   821dc:	4b60      	ldr	r3, [pc, #384]	; (82360 <DD_READ_SENSORS+0x5c0>)
   821de:	4798      	blx	r3
			   DD_ENABLE_ISOLATOR_2();
   821e0:	4b60      	ldr	r3, [pc, #384]	; (82364 <DD_READ_SENSORS+0x5c4>)
   821e2:	4798      	blx	r3
			   dd_spi_set_peripheral_chip_select_value(ISOLTR_2_CS_ID);
   821e4:	2002      	movs	r0, #2
   821e6:	4b58      	ldr	r3, [pc, #352]	; (82348 <DD_READ_SENSORS+0x5a8>)
   821e8:	4798      	blx	r3
			   dd_spi_master_read(&command_data_array, 3,ISOLTR_2_CS_ID);
   821ea:	2202      	movs	r2, #2
   821ec:	2103      	movs	r1, #3
   821ee:	4851      	ldr	r0, [pc, #324]	; (82334 <DD_READ_SENSORS+0x594>)
   821f0:	4b56      	ldr	r3, [pc, #344]	; (8234c <DD_READ_SENSORS+0x5ac>)
   821f2:	4798      	blx	r3
			   spi_data.bytearray[1]=command_data_array[1];
   821f4:	4b4f      	ldr	r3, [pc, #316]	; (82334 <DD_READ_SENSORS+0x594>)
   821f6:	785a      	ldrb	r2, [r3, #1]
   821f8:	4b55      	ldr	r3, [pc, #340]	; (82350 <DD_READ_SENSORS+0x5b0>)
   821fa:	705a      	strb	r2, [r3, #1]
			   spi_data.bytearray[0]=command_data_array[2];
   821fc:	4b4d      	ldr	r3, [pc, #308]	; (82334 <DD_READ_SENSORS+0x594>)
   821fe:	789a      	ldrb	r2, [r3, #2]
   82200:	4b53      	ldr	r3, [pc, #332]	; (82350 <DD_READ_SENSORS+0x5b0>)
   82202:	701a      	strb	r2, [r3, #0]
			   *sensor_status = spi_data.Twobyte;
   82204:	4b52      	ldr	r3, [pc, #328]	; (82350 <DD_READ_SENSORS+0x5b0>)
   82206:	881b      	ldrh	r3, [r3, #0]
   82208:	b29a      	uxth	r2, r3
   8220a:	683b      	ldr	r3, [r7, #0]
   8220c:	801a      	strh	r2, [r3, #0]
		   
		    DD_SPI_PCS_DECODER_DEACTIVE();
   8220e:	4b51      	ldr	r3, [pc, #324]	; (82354 <DD_READ_SENSORS+0x5b4>)
   82210:	4798      	blx	r3
		    DD_DISABLE_ISOLATORS_MISO_PIN();    
   82212:	4b51      	ldr	r3, [pc, #324]	; (82358 <DD_READ_SENSORS+0x5b8>)
   82214:	4798      	blx	r3
			
			return SENSOR_READ_OK;
   82216:	2300      	movs	r3, #0
   82218:	f000 bdf8 	b.w	82e0c <DD_READ_SENSORS+0x106c>
		break;
		
		case SV_CS3_TS_ID:
		   command_data_array[0] = 1;
   8221c:	4b45      	ldr	r3, [pc, #276]	; (82334 <DD_READ_SENSORS+0x594>)
   8221e:	2201      	movs	r2, #1
   82220:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   82222:	4b44      	ldr	r3, [pc, #272]	; (82334 <DD_READ_SENSORS+0x594>)
   82224:	2200      	movs	r2, #0
   82226:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   82228:	4b42      	ldr	r3, [pc, #264]	; (82334 <DD_READ_SENSORS+0x594>)
   8222a:	2200      	movs	r2, #0
   8222c:	709a      	strb	r2, [r3, #2]
		   
		   while (DRDY_CS3_TS_status) {
   8222e:	e007      	b.n	82240 <DD_READ_SENSORS+0x4a0>
			   if (!timeout--) {
   82230:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   82232:	1e5a      	subs	r2, r3, #1
   82234:	67fa      	str	r2, [r7, #124]	; 0x7c
   82236:	2b00      	cmp	r3, #0
   82238:	d102      	bne.n	82240 <DD_READ_SENSORS+0x4a0>
				   return SENSOR_NOT_READY;
   8223a:	2301      	movs	r3, #1
   8223c:	f000 bde6 	b.w	82e0c <DD_READ_SENSORS+0x106c>
		case SV_CS3_TS_ID:
		   command_data_array[0] = 1;
		   command_data_array[1] = 0;
		   command_data_array[2] = 0;
		   
		   while (DRDY_CS3_TS_status) {
   82240:	4b3d      	ldr	r3, [pc, #244]	; (82338 <DD_READ_SENSORS+0x598>)
   82242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82244:	0cdb      	lsrs	r3, r3, #19
   82246:	f003 0301 	and.w	r3, r3, #1
   8224a:	2b00      	cmp	r3, #0
   8224c:	d1f0      	bne.n	82230 <DD_READ_SENSORS+0x490>
			   if (!timeout--) {
				   return SENSOR_NOT_READY;
			   }
		   }	   
		   
			   DD_SPI_PCS_DECODER_ACTIVE();
   8224e:	4b3b      	ldr	r3, [pc, #236]	; (8233c <DD_READ_SENSORS+0x59c>)
   82250:	4798      	blx	r3
			   DD_CS3_TS_CHIP_SELECT();
   82252:	4b45      	ldr	r3, [pc, #276]	; (82368 <DD_READ_SENSORS+0x5c8>)
   82254:	4798      	blx	r3
			   DD_ENABLE_ISOLATOR_2();
   82256:	4b43      	ldr	r3, [pc, #268]	; (82364 <DD_READ_SENSORS+0x5c4>)
   82258:	4798      	blx	r3
			   dd_spi_set_peripheral_chip_select_value(ISOLTR_2_CS_ID);
   8225a:	2002      	movs	r0, #2
   8225c:	4b3a      	ldr	r3, [pc, #232]	; (82348 <DD_READ_SENSORS+0x5a8>)
   8225e:	4798      	blx	r3
			   dd_spi_master_read(&command_data_array, 3, ISOLTR_2_CS_ID);
   82260:	2202      	movs	r2, #2
   82262:	2103      	movs	r1, #3
   82264:	4833      	ldr	r0, [pc, #204]	; (82334 <DD_READ_SENSORS+0x594>)
   82266:	4b39      	ldr	r3, [pc, #228]	; (8234c <DD_READ_SENSORS+0x5ac>)
   82268:	4798      	blx	r3
			   spi_data.bytearray[1]=command_data_array[1];
   8226a:	4b32      	ldr	r3, [pc, #200]	; (82334 <DD_READ_SENSORS+0x594>)
   8226c:	785a      	ldrb	r2, [r3, #1]
   8226e:	4b38      	ldr	r3, [pc, #224]	; (82350 <DD_READ_SENSORS+0x5b0>)
   82270:	705a      	strb	r2, [r3, #1]
			   spi_data.bytearray[0]=command_data_array[2];
   82272:	4b30      	ldr	r3, [pc, #192]	; (82334 <DD_READ_SENSORS+0x594>)
   82274:	789a      	ldrb	r2, [r3, #2]
   82276:	4b36      	ldr	r3, [pc, #216]	; (82350 <DD_READ_SENSORS+0x5b0>)
   82278:	701a      	strb	r2, [r3, #0]
			   *sensor_status = spi_data.Twobyte;
   8227a:	4b35      	ldr	r3, [pc, #212]	; (82350 <DD_READ_SENSORS+0x5b0>)
   8227c:	881b      	ldrh	r3, [r3, #0]
   8227e:	b29a      	uxth	r2, r3
   82280:	683b      	ldr	r3, [r7, #0]
   82282:	801a      	strh	r2, [r3, #0]
		   
		   DD_SPI_PCS_DECODER_DEACTIVE();
   82284:	4b33      	ldr	r3, [pc, #204]	; (82354 <DD_READ_SENSORS+0x5b4>)
   82286:	4798      	blx	r3
		   DD_DISABLE_ISOLATORS_MISO_PIN();		  
   82288:	4b33      	ldr	r3, [pc, #204]	; (82358 <DD_READ_SENSORS+0x5b8>)
   8228a:	4798      	blx	r3
		   
		   return SENSOR_READ_OK; 
   8228c:	2300      	movs	r3, #0
   8228e:	f000 bdbd 	b.w	82e0c <DD_READ_SENSORS+0x106c>
		break;
		return SENSOR_READ_OK;
		
		case SV_CS1_ID:
		  
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   82292:	4b28      	ldr	r3, [pc, #160]	; (82334 <DD_READ_SENSORS+0x594>)
   82294:	2200      	movs	r2, #0
   82296:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  		   
   82298:	4b26      	ldr	r3, [pc, #152]	; (82334 <DD_READ_SENSORS+0x594>)
   8229a:	2200      	movs	r2, #0
   8229c:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   8229e:	4b27      	ldr	r3, [pc, #156]	; (8233c <DD_READ_SENSORS+0x59c>)
   822a0:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   822a2:	4b32      	ldr	r3, [pc, #200]	; (8236c <DD_READ_SENSORS+0x5cc>)
   822a4:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   822a6:	4b2c      	ldr	r3, [pc, #176]	; (82358 <DD_READ_SENSORS+0x5b8>)
   822a8:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   822aa:	4b31      	ldr	r3, [pc, #196]	; (82370 <DD_READ_SENSORS+0x5d0>)
   822ac:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   822ae:	2003      	movs	r0, #3
   822b0:	4b25      	ldr	r3, [pc, #148]	; (82348 <DD_READ_SENSORS+0x5a8>)
   822b2:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   822b4:	2203      	movs	r2, #3
   822b6:	2102      	movs	r1, #2
   822b8:	481e      	ldr	r0, [pc, #120]	; (82334 <DD_READ_SENSORS+0x594>)
   822ba:	4b24      	ldr	r3, [pc, #144]	; (8234c <DD_READ_SENSORS+0x5ac>)
   822bc:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   { ; }
   822be:	2300      	movs	r3, #0
   822c0:	67bb      	str	r3, [r7, #120]	; 0x78
   822c2:	e002      	b.n	822ca <DD_READ_SENSORS+0x52a>
   822c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   822c6:	3301      	adds	r3, #1
   822c8:	67bb      	str	r3, [r7, #120]	; 0x78
   822ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   822cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   822d0:	d3f8      	bcc.n	822c4 <DD_READ_SENSORS+0x524>
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   822d2:	4b18      	ldr	r3, [pc, #96]	; (82334 <DD_READ_SENSORS+0x594>)
   822d4:	2200      	movs	r2, #0
   822d6:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   822d8:	4b16      	ldr	r3, [pc, #88]	; (82334 <DD_READ_SENSORS+0x594>)
   822da:	2200      	movs	r2, #0
   822dc:	705a      	strb	r2, [r3, #1]
		    dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   822de:	2203      	movs	r2, #3
   822e0:	2102      	movs	r1, #2
   822e2:	4814      	ldr	r0, [pc, #80]	; (82334 <DD_READ_SENSORS+0x594>)
   822e4:	4b19      	ldr	r3, [pc, #100]	; (8234c <DD_READ_SENSORS+0x5ac>)
   822e6:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   822e8:	4b12      	ldr	r3, [pc, #72]	; (82334 <DD_READ_SENSORS+0x594>)
   822ea:	781a      	ldrb	r2, [r3, #0]
   822ec:	4b18      	ldr	r3, [pc, #96]	; (82350 <DD_READ_SENSORS+0x5b0>)
   822ee:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   822f0:	4b10      	ldr	r3, [pc, #64]	; (82334 <DD_READ_SENSORS+0x594>)
   822f2:	785a      	ldrb	r2, [r3, #1]
   822f4:	4b16      	ldr	r3, [pc, #88]	; (82350 <DD_READ_SENSORS+0x5b0>)
   822f6:	701a      	strb	r2, [r3, #0]
           CONDUCTIVITY_SENSOR_RMS_VOLTAGE = spi_data.Twobyte;		
   822f8:	4b15      	ldr	r3, [pc, #84]	; (82350 <DD_READ_SENSORS+0x5b0>)
   822fa:	881b      	ldrh	r3, [r3, #0]
   822fc:	83fb      	strh	r3, [r7, #30]
		   
		      
		    conductivity_mux_reg_1  &= ~CS1_GAIN_Msk ;
   822fe:	7f7b      	ldrb	r3, [r7, #29]
   82300:	f023 0307 	bic.w	r3, r3, #7
   82304:	777b      	strb	r3, [r7, #29]
			conductivity_mux_reg_1 |=  CS1_GAIN_X100;
   82306:	7f7b      	ldrb	r3, [r7, #29]
   82308:	f043 0301 	orr.w	r3, r3, #1
   8230c:	777b      	strb	r3, [r7, #29]
	        command_data_array[0] = conductivity_mux_reg_1; 
   8230e:	4a09      	ldr	r2, [pc, #36]	; (82334 <DD_READ_SENSORS+0x594>)
   82310:	7f7b      	ldrb	r3, [r7, #29]
   82312:	7013      	strb	r3, [r2, #0]
			GAIN_FACTOR = 100;			
   82314:	4b17      	ldr	r3, [pc, #92]	; (82374 <DD_READ_SENSORS+0x5d4>)
   82316:	2264      	movs	r2, #100	; 0x64
   82318:	801a      	strh	r2, [r3, #0]
				 
	        dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);	 	 
   8231a:	2003      	movs	r0, #3
   8231c:	4b0a      	ldr	r3, [pc, #40]	; (82348 <DD_READ_SENSORS+0x5a8>)
   8231e:	4798      	blx	r3
	        DD_AN_MUX_CHIPSEL_2();
   82320:	4b15      	ldr	r3, [pc, #84]	; (82378 <DD_READ_SENSORS+0x5d8>)
   82322:	4798      	blx	r3
	        dd_spi_master_transfer(&command_data_array, 1, ISOLTR_3_CS_ID);
   82324:	2203      	movs	r2, #3
   82326:	2101      	movs	r1, #1
   82328:	4802      	ldr	r0, [pc, #8]	; (82334 <DD_READ_SENSORS+0x594>)
   8232a:	4b14      	ldr	r3, [pc, #80]	; (8237c <DD_READ_SENSORS+0x5dc>)
   8232c:	4798      	blx	r3
			for(unsigned int count=0; count<500000; count++ )   {
   8232e:	2300      	movs	r3, #0
   82330:	677b      	str	r3, [r7, #116]	; 0x74
   82332:	e028      	b.n	82386 <DD_READ_SENSORS+0x5e6>
   82334:	20070ae8 	.word	0x20070ae8
   82338:	400e0e00 	.word	0x400e0e00
   8233c:	00081ba9 	.word	0x00081ba9
   82340:	00081c11 	.word	0x00081c11
   82344:	00081ab5 	.word	0x00081ab5
   82348:	0008170d 	.word	0x0008170d
   8234c:	000817b5 	.word	0x000817b5
   82350:	20070ae4 	.word	0x20070ae4
   82354:	00081bc5 	.word	0x00081bc5
   82358:	00081be1 	.word	0x00081be1
   8235c:	00081ad1 	.word	0x00081ad1
   82360:	00081b01 	.word	0x00081b01
   82364:	00081c45 	.word	0x00081c45
   82368:	00081ae9 	.word	0x00081ae9
   8236c:	00081b39 	.word	0x00081b39
   82370:	00081c79 	.word	0x00081c79
   82374:	20070afc 	.word	0x20070afc
   82378:	00081b59 	.word	0x00081b59
   8237c:	00081745 	.word	0x00081745
   82380:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   82382:	3301      	adds	r3, #1
   82384:	677b      	str	r3, [r7, #116]	; 0x74
   82386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   82388:	4a96      	ldr	r2, [pc, #600]	; (825e4 <DD_READ_SENSORS+0x844>)
   8238a:	4293      	cmp	r3, r2
   8238c:	d9f8      	bls.n	82380 <DD_READ_SENSORS+0x5e0>
		                      ;
	                        }
			
			command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CS1_SEN_RMS_CURRENT);
   8238e:	4b96      	ldr	r3, [pc, #600]	; (825e8 <DD_READ_SENSORS+0x848>)
   82390:	2208      	movs	r2, #8
   82392:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  		   
   82394:	4b94      	ldr	r3, [pc, #592]	; (825e8 <DD_READ_SENSORS+0x848>)
   82396:	2200      	movs	r2, #0
   82398:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   8239a:	4b94      	ldr	r3, [pc, #592]	; (825ec <DD_READ_SENSORS+0x84c>)
   8239c:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   8239e:	4b94      	ldr	r3, [pc, #592]	; (825f0 <DD_READ_SENSORS+0x850>)
   823a0:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   823a2:	4b94      	ldr	r3, [pc, #592]	; (825f4 <DD_READ_SENSORS+0x854>)
   823a4:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   823a6:	4b94      	ldr	r3, [pc, #592]	; (825f8 <DD_READ_SENSORS+0x858>)
   823a8:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   823aa:	2003      	movs	r0, #3
   823ac:	4b93      	ldr	r3, [pc, #588]	; (825fc <DD_READ_SENSORS+0x85c>)
   823ae:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   823b0:	2203      	movs	r2, #3
   823b2:	2102      	movs	r1, #2
   823b4:	488c      	ldr	r0, [pc, #560]	; (825e8 <DD_READ_SENSORS+0x848>)
   823b6:	4b92      	ldr	r3, [pc, #584]	; (82600 <DD_READ_SENSORS+0x860>)
   823b8:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   823ba:	2300      	movs	r3, #0
   823bc:	673b      	str	r3, [r7, #112]	; 0x70
   823be:	e002      	b.n	823c6 <DD_READ_SENSORS+0x626>
   823c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   823c2:	3301      	adds	r3, #1
   823c4:	673b      	str	r3, [r7, #112]	; 0x70
   823c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   823c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   823cc:	d3f8      	bcc.n	823c0 <DD_READ_SENSORS+0x620>
		      ;
	        }
			
			
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CS1_SEN_RMS_CURRENT);
   823ce:	4b86      	ldr	r3, [pc, #536]	; (825e8 <DD_READ_SENSORS+0x848>)
   823d0:	2208      	movs	r2, #8
   823d2:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   823d4:	4b84      	ldr	r3, [pc, #528]	; (825e8 <DD_READ_SENSORS+0x848>)
   823d6:	2200      	movs	r2, #0
   823d8:	705a      	strb	r2, [r3, #1]
		   dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   823da:	2203      	movs	r2, #3
   823dc:	2102      	movs	r1, #2
   823de:	4882      	ldr	r0, [pc, #520]	; (825e8 <DD_READ_SENSORS+0x848>)
   823e0:	4b87      	ldr	r3, [pc, #540]	; (82600 <DD_READ_SENSORS+0x860>)
   823e2:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   823e4:	4b80      	ldr	r3, [pc, #512]	; (825e8 <DD_READ_SENSORS+0x848>)
   823e6:	781a      	ldrb	r2, [r3, #0]
   823e8:	4b86      	ldr	r3, [pc, #536]	; (82604 <DD_READ_SENSORS+0x864>)
   823ea:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];	
   823ec:	4b7e      	ldr	r3, [pc, #504]	; (825e8 <DD_READ_SENSORS+0x848>)
   823ee:	785a      	ldrb	r2, [r3, #1]
   823f0:	4b84      	ldr	r3, [pc, #528]	; (82604 <DD_READ_SENSORS+0x864>)
   823f2:	701a      	strb	r2, [r3, #0]
		   
		    uint16_t CS1_SEN_RMS_CURRENT;		
            CS1_SEN_RMS_CURRENT = spi_data.Twobyte;	
   823f4:	4b83      	ldr	r3, [pc, #524]	; (82604 <DD_READ_SENSORS+0x864>)
   823f6:	881b      	ldrh	r3, [r3, #0]
   823f8:	837b      	strh	r3, [r7, #26]
		   	*sensor_status = (CS1_SEN_RMS_CURRENT*1000)/ CONDUCTIVITY_SENSOR_RMS_VOLTAGE;
   823fa:	8b7b      	ldrh	r3, [r7, #26]
   823fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82400:	fb02 f203 	mul.w	r2, r2, r3
   82404:	8bfb      	ldrh	r3, [r7, #30]
   82406:	fb92 f3f3 	sdiv	r3, r2, r3
   8240a:	b29a      	uxth	r2, r3
   8240c:	683b      	ldr	r3, [r7, #0]
   8240e:	801a      	strh	r2, [r3, #0]
            if(*sensor_status < 500)   {
   82410:	683b      	ldr	r3, [r7, #0]
   82412:	881b      	ldrh	r3, [r3, #0]
   82414:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   82418:	f080 80c4 	bcs.w	825a4 <DD_READ_SENSORS+0x804>
				
				       conductivity_mux_reg_1  &= ~CS1_GAIN_Msk ;
   8241c:	7f7b      	ldrb	r3, [r7, #29]
   8241e:	f023 0307 	bic.w	r3, r3, #7
   82422:	777b      	strb	r3, [r7, #29]
			           conductivity_mux_reg_1 |=  CS1_GAIN_X1000;
   82424:	7f7b      	ldrb	r3, [r7, #29]
   82426:	f043 0302 	orr.w	r3, r3, #2
   8242a:	777b      	strb	r3, [r7, #29]
	                   command_data_array[0] = conductivity_mux_reg_1; 
   8242c:	4a6e      	ldr	r2, [pc, #440]	; (825e8 <DD_READ_SENSORS+0x848>)
   8242e:	7f7b      	ldrb	r3, [r7, #29]
   82430:	7013      	strb	r3, [r2, #0]
			           GAIN_FACTOR = 1000;			
   82432:	4b75      	ldr	r3, [pc, #468]	; (82608 <DD_READ_SENSORS+0x868>)
   82434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82438:	801a      	strh	r2, [r3, #0]
				 
	                   dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);	 	 
   8243a:	2003      	movs	r0, #3
   8243c:	4b6f      	ldr	r3, [pc, #444]	; (825fc <DD_READ_SENSORS+0x85c>)
   8243e:	4798      	blx	r3
	                   DD_AN_MUX_CHIPSEL_2();
   82440:	4b72      	ldr	r3, [pc, #456]	; (8260c <DD_READ_SENSORS+0x86c>)
   82442:	4798      	blx	r3
	                   dd_spi_master_transfer(&command_data_array, 1, ISOLTR_3_CS_ID);
   82444:	2203      	movs	r2, #3
   82446:	2101      	movs	r1, #1
   82448:	4867      	ldr	r0, [pc, #412]	; (825e8 <DD_READ_SENSORS+0x848>)
   8244a:	4b71      	ldr	r3, [pc, #452]	; (82610 <DD_READ_SENSORS+0x870>)
   8244c:	4798      	blx	r3
					   for(unsigned int count=0; count<50000; count++ )   {
   8244e:	2300      	movs	r3, #0
   82450:	66fb      	str	r3, [r7, #108]	; 0x6c
   82452:	e002      	b.n	8245a <DD_READ_SENSORS+0x6ba>
   82454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   82456:	3301      	adds	r3, #1
   82458:	66fb      	str	r3, [r7, #108]	; 0x6c
   8245a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   8245c:	f24c 324f 	movw	r2, #49999	; 0xc34f
   82460:	4293      	cmp	r3, r2
   82462:	d9f7      	bls.n	82454 <DD_READ_SENSORS+0x6b4>
		                ;
	                     }
			
			           command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CS1_SEN_RMS_CURRENT);
   82464:	4b60      	ldr	r3, [pc, #384]	; (825e8 <DD_READ_SENSORS+0x848>)
   82466:	2208      	movs	r2, #8
   82468:	701a      	strb	r2, [r3, #0]
		               command_data_array[1] = 0;  		   
   8246a:	4b5f      	ldr	r3, [pc, #380]	; (825e8 <DD_READ_SENSORS+0x848>)
   8246c:	2200      	movs	r2, #0
   8246e:	705a      	strb	r2, [r3, #1]
                       DD_SPI_PCS_DECODER_ACTIVE();
   82470:	4b5e      	ldr	r3, [pc, #376]	; (825ec <DD_READ_SENSORS+0x84c>)
   82472:	4798      	blx	r3
                       DD_CON_ADC_CHIP_SELECT();
   82474:	4b5e      	ldr	r3, [pc, #376]	; (825f0 <DD_READ_SENSORS+0x850>)
   82476:	4798      	blx	r3
			           DD_DISABLE_ISOLATORS_MISO_PIN();
   82478:	4b5e      	ldr	r3, [pc, #376]	; (825f4 <DD_READ_SENSORS+0x854>)
   8247a:	4798      	blx	r3
                       DD_ENABLE_ISOLATOR_3();
   8247c:	4b5e      	ldr	r3, [pc, #376]	; (825f8 <DD_READ_SENSORS+0x858>)
   8247e:	4798      	blx	r3
                       dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   82480:	2003      	movs	r0, #3
   82482:	4b5e      	ldr	r3, [pc, #376]	; (825fc <DD_READ_SENSORS+0x85c>)
   82484:	4798      	blx	r3
                       dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   82486:	2203      	movs	r2, #3
   82488:	2102      	movs	r1, #2
   8248a:	4857      	ldr	r0, [pc, #348]	; (825e8 <DD_READ_SENSORS+0x848>)
   8248c:	4b5c      	ldr	r3, [pc, #368]	; (82600 <DD_READ_SENSORS+0x860>)
   8248e:	4798      	blx	r3
			           for(unsigned int count=0; count<1000; count++ )   {
   82490:	2300      	movs	r3, #0
   82492:	66bb      	str	r3, [r7, #104]	; 0x68
   82494:	e002      	b.n	8249c <DD_READ_SENSORS+0x6fc>
   82496:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   82498:	3301      	adds	r3, #1
   8249a:	66bb      	str	r3, [r7, #104]	; 0x68
   8249c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   8249e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   824a2:	d3f8      	bcc.n	82496 <DD_READ_SENSORS+0x6f6>
		                      ;
	                   }
					    command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CS1_SEN_RMS_CURRENT);
   824a4:	4b50      	ldr	r3, [pc, #320]	; (825e8 <DD_READ_SENSORS+0x848>)
   824a6:	2208      	movs	r2, #8
   824a8:	701a      	strb	r2, [r3, #0]
		                command_data_array[1] = 0;  
   824aa:	4b4f      	ldr	r3, [pc, #316]	; (825e8 <DD_READ_SENSORS+0x848>)
   824ac:	2200      	movs	r2, #0
   824ae:	705a      	strb	r2, [r3, #1]
		                dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   824b0:	2203      	movs	r2, #3
   824b2:	2102      	movs	r1, #2
   824b4:	484c      	ldr	r0, [pc, #304]	; (825e8 <DD_READ_SENSORS+0x848>)
   824b6:	4b52      	ldr	r3, [pc, #328]	; (82600 <DD_READ_SENSORS+0x860>)
   824b8:	4798      	blx	r3
		                spi_data.bytearray[1]=command_data_array[0];
   824ba:	4b4b      	ldr	r3, [pc, #300]	; (825e8 <DD_READ_SENSORS+0x848>)
   824bc:	781a      	ldrb	r2, [r3, #0]
   824be:	4b51      	ldr	r3, [pc, #324]	; (82604 <DD_READ_SENSORS+0x864>)
   824c0:	705a      	strb	r2, [r3, #1]
                        spi_data.bytearray[0]=command_data_array[1];			
   824c2:	4b49      	ldr	r3, [pc, #292]	; (825e8 <DD_READ_SENSORS+0x848>)
   824c4:	785a      	ldrb	r2, [r3, #1]
   824c6:	4b4f      	ldr	r3, [pc, #316]	; (82604 <DD_READ_SENSORS+0x864>)
   824c8:	701a      	strb	r2, [r3, #0]
                        CS1_SEN_RMS_CURRENT = spi_data.Twobyte;	
   824ca:	4b4e      	ldr	r3, [pc, #312]	; (82604 <DD_READ_SENSORS+0x864>)
   824cc:	881b      	ldrh	r3, [r3, #0]
   824ce:	837b      	strh	r3, [r7, #26]
		            	*sensor_status = (CS1_SEN_RMS_CURRENT*1000)/ CONDUCTIVITY_SENSOR_RMS_VOLTAGE;
   824d0:	8b7b      	ldrh	r3, [r7, #26]
   824d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   824d6:	fb02 f203 	mul.w	r2, r2, r3
   824da:	8bfb      	ldrh	r3, [r7, #30]
   824dc:	fb92 f3f3 	sdiv	r3, r2, r3
   824e0:	b29a      	uxth	r2, r3
   824e2:	683b      	ldr	r3, [r7, #0]
   824e4:	801a      	strh	r2, [r3, #0]
						
					     if(*sensor_status < 1000)   {
   824e6:	683b      	ldr	r3, [r7, #0]
   824e8:	881b      	ldrh	r3, [r3, #0]
   824ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   824ee:	d259      	bcs.n	825a4 <DD_READ_SENSORS+0x804>
				
				            conductivity_mux_reg_1  &= ~CS1_GAIN_Msk ;
   824f0:	7f7b      	ldrb	r3, [r7, #29]
   824f2:	f023 0307 	bic.w	r3, r3, #7
   824f6:	777b      	strb	r3, [r7, #29]
			                conductivity_mux_reg_1 |=  CS1_GAIN_X10000;
   824f8:	7f7b      	ldrb	r3, [r7, #29]
   824fa:	f043 0304 	orr.w	r3, r3, #4
   824fe:	777b      	strb	r3, [r7, #29]
	                         command_data_array[0] = conductivity_mux_reg_1; 
   82500:	4a39      	ldr	r2, [pc, #228]	; (825e8 <DD_READ_SENSORS+0x848>)
   82502:	7f7b      	ldrb	r3, [r7, #29]
   82504:	7013      	strb	r3, [r2, #0]
			                GAIN_FACTOR = 100000;			
   82506:	4b40      	ldr	r3, [pc, #256]	; (82608 <DD_READ_SENSORS+0x868>)
   82508:	f248 62a0 	movw	r2, #34464	; 0x86a0
   8250c:	801a      	strh	r2, [r3, #0]
				 
	                        dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);	 	 
   8250e:	2003      	movs	r0, #3
   82510:	4b3a      	ldr	r3, [pc, #232]	; (825fc <DD_READ_SENSORS+0x85c>)
   82512:	4798      	blx	r3
	                        DD_AN_MUX_CHIPSEL_2();
   82514:	4b3d      	ldr	r3, [pc, #244]	; (8260c <DD_READ_SENSORS+0x86c>)
   82516:	4798      	blx	r3
	                        dd_spi_master_transfer(&command_data_array, 1, ISOLTR_3_CS_ID);
   82518:	2203      	movs	r2, #3
   8251a:	2101      	movs	r1, #1
   8251c:	4832      	ldr	r0, [pc, #200]	; (825e8 <DD_READ_SENSORS+0x848>)
   8251e:	4b3c      	ldr	r3, [pc, #240]	; (82610 <DD_READ_SENSORS+0x870>)
   82520:	4798      	blx	r3
							
						//DELAY NEED TO BE INSERTED
			
			
			                command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CS1_SEN_RMS_CURRENT);
   82522:	4b31      	ldr	r3, [pc, #196]	; (825e8 <DD_READ_SENSORS+0x848>)
   82524:	2208      	movs	r2, #8
   82526:	701a      	strb	r2, [r3, #0]
		                    command_data_array[1] = 0;  		   
   82528:	4b2f      	ldr	r3, [pc, #188]	; (825e8 <DD_READ_SENSORS+0x848>)
   8252a:	2200      	movs	r2, #0
   8252c:	705a      	strb	r2, [r3, #1]
                            DD_SPI_PCS_DECODER_ACTIVE();
   8252e:	4b2f      	ldr	r3, [pc, #188]	; (825ec <DD_READ_SENSORS+0x84c>)
   82530:	4798      	blx	r3
                            DD_CON_ADC_CHIP_SELECT();
   82532:	4b2f      	ldr	r3, [pc, #188]	; (825f0 <DD_READ_SENSORS+0x850>)
   82534:	4798      	blx	r3
			                DD_DISABLE_ISOLATORS_MISO_PIN();
   82536:	4b2f      	ldr	r3, [pc, #188]	; (825f4 <DD_READ_SENSORS+0x854>)
   82538:	4798      	blx	r3
                            DD_ENABLE_ISOLATOR_3();
   8253a:	4b2f      	ldr	r3, [pc, #188]	; (825f8 <DD_READ_SENSORS+0x858>)
   8253c:	4798      	blx	r3
                            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   8253e:	2003      	movs	r0, #3
   82540:	4b2e      	ldr	r3, [pc, #184]	; (825fc <DD_READ_SENSORS+0x85c>)
   82542:	4798      	blx	r3
                            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   82544:	2203      	movs	r2, #3
   82546:	2102      	movs	r1, #2
   82548:	4827      	ldr	r0, [pc, #156]	; (825e8 <DD_READ_SENSORS+0x848>)
   8254a:	4b2d      	ldr	r3, [pc, #180]	; (82600 <DD_READ_SENSORS+0x860>)
   8254c:	4798      	blx	r3
			                for(unsigned int count=0; count<1000; count++ )   {
   8254e:	2300      	movs	r3, #0
   82550:	667b      	str	r3, [r7, #100]	; 0x64
   82552:	e002      	b.n	8255a <DD_READ_SENSORS+0x7ba>
   82554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   82556:	3301      	adds	r3, #1
   82558:	667b      	str	r3, [r7, #100]	; 0x64
   8255a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   8255c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82560:	d3f8      	bcc.n	82554 <DD_READ_SENSORS+0x7b4>
		                      ;
	                        }
					        command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CS1_SEN_RMS_CURRENT);
   82562:	4b21      	ldr	r3, [pc, #132]	; (825e8 <DD_READ_SENSORS+0x848>)
   82564:	2208      	movs	r2, #8
   82566:	701a      	strb	r2, [r3, #0]
		                   command_data_array[1] = 0;  
   82568:	4b1f      	ldr	r3, [pc, #124]	; (825e8 <DD_READ_SENSORS+0x848>)
   8256a:	2200      	movs	r2, #0
   8256c:	705a      	strb	r2, [r3, #1]
		                   dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   8256e:	2203      	movs	r2, #3
   82570:	2102      	movs	r1, #2
   82572:	481d      	ldr	r0, [pc, #116]	; (825e8 <DD_READ_SENSORS+0x848>)
   82574:	4b22      	ldr	r3, [pc, #136]	; (82600 <DD_READ_SENSORS+0x860>)
   82576:	4798      	blx	r3
		                   spi_data.bytearray[1]=command_data_array[0];
   82578:	4b1b      	ldr	r3, [pc, #108]	; (825e8 <DD_READ_SENSORS+0x848>)
   8257a:	781a      	ldrb	r2, [r3, #0]
   8257c:	4b21      	ldr	r3, [pc, #132]	; (82604 <DD_READ_SENSORS+0x864>)
   8257e:	705a      	strb	r2, [r3, #1]
                           spi_data.bytearray[0]=command_data_array[1];			
   82580:	4b19      	ldr	r3, [pc, #100]	; (825e8 <DD_READ_SENSORS+0x848>)
   82582:	785a      	ldrb	r2, [r3, #1]
   82584:	4b1f      	ldr	r3, [pc, #124]	; (82604 <DD_READ_SENSORS+0x864>)
   82586:	701a      	strb	r2, [r3, #0]
                           CS1_SEN_RMS_CURRENT = spi_data.Twobyte;	
   82588:	4b1e      	ldr	r3, [pc, #120]	; (82604 <DD_READ_SENSORS+0x864>)
   8258a:	881b      	ldrh	r3, [r3, #0]
   8258c:	837b      	strh	r3, [r7, #26]
		            	   *sensor_status = (CS1_SEN_RMS_CURRENT*1000)/ CONDUCTIVITY_SENSOR_RMS_VOLTAGE;
   8258e:	8b7b      	ldrh	r3, [r7, #26]
   82590:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82594:	fb02 f203 	mul.w	r2, r2, r3
   82598:	8bfb      	ldrh	r3, [r7, #30]
   8259a:	fb92 f3f3 	sdiv	r3, r2, r3
   8259e:	b29a      	uxth	r2, r3
   825a0:	683b      	ldr	r3, [r7, #0]
   825a2:	801a      	strh	r2, [r3, #0]
			  }
			
			
		   
				
            DD_SPI_PCS_DECODER_DEACTIVE();
   825a4:	4b1b      	ldr	r3, [pc, #108]	; (82614 <DD_READ_SENSORS+0x874>)
   825a6:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();
   825a8:	4b12      	ldr	r3, [pc, #72]	; (825f4 <DD_READ_SENSORS+0x854>)
   825aa:	4798      	blx	r3
	        
		   
		break;
   825ac:	f000 bc2e 	b.w	82e0c <DD_READ_SENSORS+0x106c>

   
		
		case SV_CS2_ID:
		 command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   825b0:	4b0d      	ldr	r3, [pc, #52]	; (825e8 <DD_READ_SENSORS+0x848>)
   825b2:	2200      	movs	r2, #0
   825b4:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  		   
   825b6:	4b0c      	ldr	r3, [pc, #48]	; (825e8 <DD_READ_SENSORS+0x848>)
   825b8:	2200      	movs	r2, #0
   825ba:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   825bc:	4b0b      	ldr	r3, [pc, #44]	; (825ec <DD_READ_SENSORS+0x84c>)
   825be:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   825c0:	4b0b      	ldr	r3, [pc, #44]	; (825f0 <DD_READ_SENSORS+0x850>)
   825c2:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   825c4:	4b0b      	ldr	r3, [pc, #44]	; (825f4 <DD_READ_SENSORS+0x854>)
   825c6:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   825c8:	4b0b      	ldr	r3, [pc, #44]	; (825f8 <DD_READ_SENSORS+0x858>)
   825ca:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   825cc:	2003      	movs	r0, #3
   825ce:	4b0b      	ldr	r3, [pc, #44]	; (825fc <DD_READ_SENSORS+0x85c>)
   825d0:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   825d2:	2203      	movs	r2, #3
   825d4:	2102      	movs	r1, #2
   825d6:	4804      	ldr	r0, [pc, #16]	; (825e8 <DD_READ_SENSORS+0x848>)
   825d8:	4b09      	ldr	r3, [pc, #36]	; (82600 <DD_READ_SENSORS+0x860>)
   825da:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   825dc:	2300      	movs	r3, #0
   825de:	663b      	str	r3, [r7, #96]	; 0x60
   825e0:	e01d      	b.n	8261e <DD_READ_SENSORS+0x87e>
   825e2:	bf00      	nop
   825e4:	0007a11f 	.word	0x0007a11f
   825e8:	20070ae8 	.word	0x20070ae8
   825ec:	00081ba9 	.word	0x00081ba9
   825f0:	00081b39 	.word	0x00081b39
   825f4:	00081be1 	.word	0x00081be1
   825f8:	00081c79 	.word	0x00081c79
   825fc:	0008170d 	.word	0x0008170d
   82600:	000817b5 	.word	0x000817b5
   82604:	20070ae4 	.word	0x20070ae4
   82608:	20070afc 	.word	0x20070afc
   8260c:	00081b59 	.word	0x00081b59
   82610:	00081745 	.word	0x00081745
   82614:	00081bc5 	.word	0x00081bc5
   82618:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   8261a:	3301      	adds	r3, #1
   8261c:	663b      	str	r3, [r7, #96]	; 0x60
   8261e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   82620:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82624:	d3f8      	bcc.n	82618 <DD_READ_SENSORS+0x878>
		      ;
	        }
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   82626:	4b97      	ldr	r3, [pc, #604]	; (82884 <DD_READ_SENSORS+0xae4>)
   82628:	2200      	movs	r2, #0
   8262a:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   8262c:	4b95      	ldr	r3, [pc, #596]	; (82884 <DD_READ_SENSORS+0xae4>)
   8262e:	2200      	movs	r2, #0
   82630:	705a      	strb	r2, [r3, #1]
		    dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   82632:	2203      	movs	r2, #3
   82634:	2102      	movs	r1, #2
   82636:	4893      	ldr	r0, [pc, #588]	; (82884 <DD_READ_SENSORS+0xae4>)
   82638:	4b93      	ldr	r3, [pc, #588]	; (82888 <DD_READ_SENSORS+0xae8>)
   8263a:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   8263c:	4b91      	ldr	r3, [pc, #580]	; (82884 <DD_READ_SENSORS+0xae4>)
   8263e:	781a      	ldrb	r2, [r3, #0]
   82640:	4b92      	ldr	r3, [pc, #584]	; (8288c <DD_READ_SENSORS+0xaec>)
   82642:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   82644:	4b8f      	ldr	r3, [pc, #572]	; (82884 <DD_READ_SENSORS+0xae4>)
   82646:	785a      	ldrb	r2, [r3, #1]
   82648:	4b90      	ldr	r3, [pc, #576]	; (8288c <DD_READ_SENSORS+0xaec>)
   8264a:	701a      	strb	r2, [r3, #0]
           CONDUCTIVITY_SENSOR_RMS_VOLTAGE = spi_data.Twobyte;		
   8264c:	4b8f      	ldr	r3, [pc, #572]	; (8288c <DD_READ_SENSORS+0xaec>)
   8264e:	881b      	ldrh	r3, [r3, #0]
   82650:	83fb      	strh	r3, [r7, #30]
		   
		      
		    conductivity_mux_reg_1  &= ~CS2_GAIN_Msk ;
   82652:	7f7b      	ldrb	r3, [r7, #29]
   82654:	f023 0338 	bic.w	r3, r3, #56	; 0x38
   82658:	777b      	strb	r3, [r7, #29]
			conductivity_mux_reg_1 |=  CS2_GAIN_X10000;
   8265a:	7f7b      	ldrb	r3, [r7, #29]
   8265c:	f043 0320 	orr.w	r3, r3, #32
   82660:	777b      	strb	r3, [r7, #29]
	        command_data_array[0] = conductivity_mux_reg_1; 			
   82662:	4a88      	ldr	r2, [pc, #544]	; (82884 <DD_READ_SENSORS+0xae4>)
   82664:	7f7b      	ldrb	r3, [r7, #29]
   82666:	7013      	strb	r3, [r2, #0]
				 
	        dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);	 	 
   82668:	2003      	movs	r0, #3
   8266a:	4b89      	ldr	r3, [pc, #548]	; (82890 <DD_READ_SENSORS+0xaf0>)
   8266c:	4798      	blx	r3
	        DD_AN_MUX_CHIPSEL_2();
   8266e:	4b89      	ldr	r3, [pc, #548]	; (82894 <DD_READ_SENSORS+0xaf4>)
   82670:	4798      	blx	r3
	        dd_spi_master_transfer(&command_data_array, 1, ISOLTR_3_CS_ID);
   82672:	2203      	movs	r2, #3
   82674:	2101      	movs	r1, #1
   82676:	4883      	ldr	r0, [pc, #524]	; (82884 <DD_READ_SENSORS+0xae4>)
   82678:	4b87      	ldr	r3, [pc, #540]	; (82898 <DD_READ_SENSORS+0xaf8>)
   8267a:	4798      	blx	r3
			
			command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CS2_SEN_RMS_CURRENT);
   8267c:	4b81      	ldr	r3, [pc, #516]	; (82884 <DD_READ_SENSORS+0xae4>)
   8267e:	2210      	movs	r2, #16
   82680:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  		   
   82682:	4b80      	ldr	r3, [pc, #512]	; (82884 <DD_READ_SENSORS+0xae4>)
   82684:	2200      	movs	r2, #0
   82686:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   82688:	4b84      	ldr	r3, [pc, #528]	; (8289c <DD_READ_SENSORS+0xafc>)
   8268a:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   8268c:	4b84      	ldr	r3, [pc, #528]	; (828a0 <DD_READ_SENSORS+0xb00>)
   8268e:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   82690:	4b84      	ldr	r3, [pc, #528]	; (828a4 <DD_READ_SENSORS+0xb04>)
   82692:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   82694:	4b84      	ldr	r3, [pc, #528]	; (828a8 <DD_READ_SENSORS+0xb08>)
   82696:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   82698:	2003      	movs	r0, #3
   8269a:	4b7d      	ldr	r3, [pc, #500]	; (82890 <DD_READ_SENSORS+0xaf0>)
   8269c:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   8269e:	2203      	movs	r2, #3
   826a0:	2102      	movs	r1, #2
   826a2:	4878      	ldr	r0, [pc, #480]	; (82884 <DD_READ_SENSORS+0xae4>)
   826a4:	4b78      	ldr	r3, [pc, #480]	; (82888 <DD_READ_SENSORS+0xae8>)
   826a6:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   826a8:	2300      	movs	r3, #0
   826aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   826ac:	e002      	b.n	826b4 <DD_READ_SENSORS+0x914>
   826ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   826b0:	3301      	adds	r3, #1
   826b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   826b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   826b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   826ba:	d3f8      	bcc.n	826ae <DD_READ_SENSORS+0x90e>
		      ;
	        }
			uint16_t CS2_SEN_RMS_CURRENT;
			
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CS2_SEN_RMS_CURRENT);
   826bc:	4b71      	ldr	r3, [pc, #452]	; (82884 <DD_READ_SENSORS+0xae4>)
   826be:	2210      	movs	r2, #16
   826c0:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   826c2:	4b70      	ldr	r3, [pc, #448]	; (82884 <DD_READ_SENSORS+0xae4>)
   826c4:	2200      	movs	r2, #0
   826c6:	705a      	strb	r2, [r3, #1]
		   dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   826c8:	2203      	movs	r2, #3
   826ca:	2102      	movs	r1, #2
   826cc:	486d      	ldr	r0, [pc, #436]	; (82884 <DD_READ_SENSORS+0xae4>)
   826ce:	4b6e      	ldr	r3, [pc, #440]	; (82888 <DD_READ_SENSORS+0xae8>)
   826d0:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   826d2:	4b6c      	ldr	r3, [pc, #432]	; (82884 <DD_READ_SENSORS+0xae4>)
   826d4:	781a      	ldrb	r2, [r3, #0]
   826d6:	4b6d      	ldr	r3, [pc, #436]	; (8288c <DD_READ_SENSORS+0xaec>)
   826d8:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   826da:	4b6a      	ldr	r3, [pc, #424]	; (82884 <DD_READ_SENSORS+0xae4>)
   826dc:	785a      	ldrb	r2, [r3, #1]
   826de:	4b6b      	ldr	r3, [pc, #428]	; (8288c <DD_READ_SENSORS+0xaec>)
   826e0:	701a      	strb	r2, [r3, #0]
           CS2_SEN_RMS_CURRENT = spi_data.Twobyte;	
   826e2:	4b6a      	ldr	r3, [pc, #424]	; (8288c <DD_READ_SENSORS+0xaec>)
   826e4:	881b      	ldrh	r3, [r3, #0]
   826e6:	833b      	strh	r3, [r7, #24]
		   	*sensor_status = (CS2_SEN_RMS_CURRENT*1000)/ CONDUCTIVITY_SENSOR_RMS_VOLTAGE;
   826e8:	8b3b      	ldrh	r3, [r7, #24]
   826ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   826ee:	fb02 f203 	mul.w	r2, r2, r3
   826f2:	8bfb      	ldrh	r3, [r7, #30]
   826f4:	fb92 f3f3 	sdiv	r3, r2, r3
   826f8:	b29a      	uxth	r2, r3
   826fa:	683b      	ldr	r3, [r7, #0]
   826fc:	801a      	strh	r2, [r3, #0]
            
            DD_SPI_PCS_DECODER_DEACTIVE();
   826fe:	4b6b      	ldr	r3, [pc, #428]	; (828ac <DD_READ_SENSORS+0xb0c>)
   82700:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();
   82702:	4b68      	ldr	r3, [pc, #416]	; (828a4 <DD_READ_SENSORS+0xb04>)
   82704:	4798      	blx	r3
			
		break;
   82706:	e381      	b.n	82e0c <DD_READ_SENSORS+0x106c>

  
		  
		
		case SV_CS3_ID:
		 command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   82708:	4b5e      	ldr	r3, [pc, #376]	; (82884 <DD_READ_SENSORS+0xae4>)
   8270a:	2200      	movs	r2, #0
   8270c:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  		   
   8270e:	4b5d      	ldr	r3, [pc, #372]	; (82884 <DD_READ_SENSORS+0xae4>)
   82710:	2200      	movs	r2, #0
   82712:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   82714:	4b61      	ldr	r3, [pc, #388]	; (8289c <DD_READ_SENSORS+0xafc>)
   82716:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   82718:	4b61      	ldr	r3, [pc, #388]	; (828a0 <DD_READ_SENSORS+0xb00>)
   8271a:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   8271c:	4b61      	ldr	r3, [pc, #388]	; (828a4 <DD_READ_SENSORS+0xb04>)
   8271e:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   82720:	4b61      	ldr	r3, [pc, #388]	; (828a8 <DD_READ_SENSORS+0xb08>)
   82722:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   82724:	2003      	movs	r0, #3
   82726:	4b5a      	ldr	r3, [pc, #360]	; (82890 <DD_READ_SENSORS+0xaf0>)
   82728:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   8272a:	2203      	movs	r2, #3
   8272c:	2102      	movs	r1, #2
   8272e:	4855      	ldr	r0, [pc, #340]	; (82884 <DD_READ_SENSORS+0xae4>)
   82730:	4b55      	ldr	r3, [pc, #340]	; (82888 <DD_READ_SENSORS+0xae8>)
   82732:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   82734:	2300      	movs	r3, #0
   82736:	65bb      	str	r3, [r7, #88]	; 0x58
   82738:	e002      	b.n	82740 <DD_READ_SENSORS+0x9a0>
   8273a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   8273c:	3301      	adds	r3, #1
   8273e:	65bb      	str	r3, [r7, #88]	; 0x58
   82740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   82742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82746:	d3f8      	bcc.n	8273a <DD_READ_SENSORS+0x99a>
		      ;
	        }
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   82748:	4b4e      	ldr	r3, [pc, #312]	; (82884 <DD_READ_SENSORS+0xae4>)
   8274a:	2200      	movs	r2, #0
   8274c:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   8274e:	4b4d      	ldr	r3, [pc, #308]	; (82884 <DD_READ_SENSORS+0xae4>)
   82750:	2200      	movs	r2, #0
   82752:	705a      	strb	r2, [r3, #1]
		    dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   82754:	2203      	movs	r2, #3
   82756:	2102      	movs	r1, #2
   82758:	484a      	ldr	r0, [pc, #296]	; (82884 <DD_READ_SENSORS+0xae4>)
   8275a:	4b4b      	ldr	r3, [pc, #300]	; (82888 <DD_READ_SENSORS+0xae8>)
   8275c:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   8275e:	4b49      	ldr	r3, [pc, #292]	; (82884 <DD_READ_SENSORS+0xae4>)
   82760:	781a      	ldrb	r2, [r3, #0]
   82762:	4b4a      	ldr	r3, [pc, #296]	; (8288c <DD_READ_SENSORS+0xaec>)
   82764:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   82766:	4b47      	ldr	r3, [pc, #284]	; (82884 <DD_READ_SENSORS+0xae4>)
   82768:	785a      	ldrb	r2, [r3, #1]
   8276a:	4b48      	ldr	r3, [pc, #288]	; (8288c <DD_READ_SENSORS+0xaec>)
   8276c:	701a      	strb	r2, [r3, #0]
           CONDUCTIVITY_SENSOR_RMS_VOLTAGE = spi_data.Twobyte;				    
   8276e:	4b47      	ldr	r3, [pc, #284]	; (8288c <DD_READ_SENSORS+0xaec>)
   82770:	881b      	ldrh	r3, [r3, #0]
   82772:	83fb      	strh	r3, [r7, #30]
			DD_SPI_PCS_DECODER_DEACTIVE();
   82774:	4b4d      	ldr	r3, [pc, #308]	; (828ac <DD_READ_SENSORS+0xb0c>)
   82776:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();
   82778:	4b4a      	ldr	r3, [pc, #296]	; (828a4 <DD_READ_SENSORS+0xb04>)
   8277a:	4798      	blx	r3
			
			
			
			
			conductivity_mux_reg_3  &= ~CS3_GAIN_Msk ;
   8277c:	7dfb      	ldrb	r3, [r7, #23]
   8277e:	f003 030f 	and.w	r3, r3, #15
   82782:	75fb      	strb	r3, [r7, #23]
			conductivity_mux_reg_3 |=  CS3_GAIN_X500;
   82784:	7dfb      	ldrb	r3, [r7, #23]
   82786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8278a:	75fb      	strb	r3, [r7, #23]
	        command_data_array[0] = conductivity_mux_reg_3;
   8278c:	4a3d      	ldr	r2, [pc, #244]	; (82884 <DD_READ_SENSORS+0xae4>)
   8278e:	7dfb      	ldrb	r3, [r7, #23]
   82790:	7013      	strb	r3, [r2, #0]
			 	
			//DD_ENABLE_ISOLATOR_4();
			DD_SPI_PCS_DECODER_ACTIVE();				 
   82792:	4b42      	ldr	r3, [pc, #264]	; (8289c <DD_READ_SENSORS+0xafc>)
   82794:	4798      	blx	r3
	        dd_spi_set_peripheral_chip_select_value(ISOLTR_4_CS_ID);	 	 
   82796:	2004      	movs	r0, #4
   82798:	4b3d      	ldr	r3, [pc, #244]	; (82890 <DD_READ_SENSORS+0xaf0>)
   8279a:	4798      	blx	r3
	        DD_AN_MUX_CHIPSEL_4();
   8279c:	4b44      	ldr	r3, [pc, #272]	; (828b0 <DD_READ_SENSORS+0xb10>)
   8279e:	4798      	blx	r3
	        dd_spi_master_transfer(&command_data_array, 1, ISOLTR_4_CS_ID);
   827a0:	2204      	movs	r2, #4
   827a2:	2101      	movs	r1, #1
   827a4:	4837      	ldr	r0, [pc, #220]	; (82884 <DD_READ_SENSORS+0xae4>)
   827a6:	4b3c      	ldr	r3, [pc, #240]	; (82898 <DD_READ_SENSORS+0xaf8>)
   827a8:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   827aa:	2300      	movs	r3, #0
   827ac:	657b      	str	r3, [r7, #84]	; 0x54
   827ae:	e002      	b.n	827b6 <DD_READ_SENSORS+0xa16>
   827b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   827b2:	3301      	adds	r3, #1
   827b4:	657b      	str	r3, [r7, #84]	; 0x54
   827b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   827b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   827bc:	d3f8      	bcc.n	827b0 <DD_READ_SENSORS+0xa10>
		      ;
	        }
			DD_SPI_PCS_DECODER_DEACTIVE();
   827be:	4b3b      	ldr	r3, [pc, #236]	; (828ac <DD_READ_SENSORS+0xb0c>)
   827c0:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();	
   827c2:	4b38      	ldr	r3, [pc, #224]	; (828a4 <DD_READ_SENSORS+0xb04>)
   827c4:	4798      	blx	r3
			
			
			command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CS3_SEN_RMS_CURRENT);
   827c6:	4b2f      	ldr	r3, [pc, #188]	; (82884 <DD_READ_SENSORS+0xae4>)
   827c8:	2238      	movs	r2, #56	; 0x38
   827ca:	701a      	strb	r2, [r3, #0]
		    command_data_array[1] = 0;  		   
   827cc:	4b2d      	ldr	r3, [pc, #180]	; (82884 <DD_READ_SENSORS+0xae4>)
   827ce:	2200      	movs	r2, #0
   827d0:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   827d2:	4b32      	ldr	r3, [pc, #200]	; (8289c <DD_READ_SENSORS+0xafc>)
   827d4:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   827d6:	4b32      	ldr	r3, [pc, #200]	; (828a0 <DD_READ_SENSORS+0xb00>)
   827d8:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   827da:	4b32      	ldr	r3, [pc, #200]	; (828a4 <DD_READ_SENSORS+0xb04>)
   827dc:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   827de:	4b32      	ldr	r3, [pc, #200]	; (828a8 <DD_READ_SENSORS+0xb08>)
   827e0:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   827e2:	2003      	movs	r0, #3
   827e4:	4b2a      	ldr	r3, [pc, #168]	; (82890 <DD_READ_SENSORS+0xaf0>)
   827e6:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   827e8:	2203      	movs	r2, #3
   827ea:	2102      	movs	r1, #2
   827ec:	4825      	ldr	r0, [pc, #148]	; (82884 <DD_READ_SENSORS+0xae4>)
   827ee:	4b26      	ldr	r3, [pc, #152]	; (82888 <DD_READ_SENSORS+0xae8>)
   827f0:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   827f2:	2300      	movs	r3, #0
   827f4:	653b      	str	r3, [r7, #80]	; 0x50
   827f6:	e002      	b.n	827fe <DD_READ_SENSORS+0xa5e>
   827f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   827fa:	3301      	adds	r3, #1
   827fc:	653b      	str	r3, [r7, #80]	; 0x50
   827fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   82800:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82804:	d3f8      	bcc.n	827f8 <DD_READ_SENSORS+0xa58>
		      ;
	        }
			uint16_t CS3_SEN_RMS_CURRENT;
			
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CS3_SEN_RMS_CURRENT);
   82806:	4b1f      	ldr	r3, [pc, #124]	; (82884 <DD_READ_SENSORS+0xae4>)
   82808:	2238      	movs	r2, #56	; 0x38
   8280a:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   8280c:	4b1d      	ldr	r3, [pc, #116]	; (82884 <DD_READ_SENSORS+0xae4>)
   8280e:	2200      	movs	r2, #0
   82810:	705a      	strb	r2, [r3, #1]
		   dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   82812:	2203      	movs	r2, #3
   82814:	2102      	movs	r1, #2
   82816:	481b      	ldr	r0, [pc, #108]	; (82884 <DD_READ_SENSORS+0xae4>)
   82818:	4b1b      	ldr	r3, [pc, #108]	; (82888 <DD_READ_SENSORS+0xae8>)
   8281a:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   8281c:	4b19      	ldr	r3, [pc, #100]	; (82884 <DD_READ_SENSORS+0xae4>)
   8281e:	781a      	ldrb	r2, [r3, #0]
   82820:	4b1a      	ldr	r3, [pc, #104]	; (8288c <DD_READ_SENSORS+0xaec>)
   82822:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   82824:	4b17      	ldr	r3, [pc, #92]	; (82884 <DD_READ_SENSORS+0xae4>)
   82826:	785a      	ldrb	r2, [r3, #1]
   82828:	4b18      	ldr	r3, [pc, #96]	; (8288c <DD_READ_SENSORS+0xaec>)
   8282a:	701a      	strb	r2, [r3, #0]
           CS3_SEN_RMS_CURRENT = spi_data.Twobyte;	
   8282c:	4b17      	ldr	r3, [pc, #92]	; (8288c <DD_READ_SENSORS+0xaec>)
   8282e:	881b      	ldrh	r3, [r3, #0]
   82830:	82bb      	strh	r3, [r7, #20]
		   *sensor_status = (CS3_SEN_RMS_CURRENT*10000)/ CONDUCTIVITY_SENSOR_RMS_VOLTAGE;            
   82832:	8abb      	ldrh	r3, [r7, #20]
   82834:	f242 7210 	movw	r2, #10000	; 0x2710
   82838:	fb02 f203 	mul.w	r2, r2, r3
   8283c:	8bfb      	ldrh	r3, [r7, #30]
   8283e:	fb92 f3f3 	sdiv	r3, r2, r3
   82842:	b29a      	uxth	r2, r3
   82844:	683b      	ldr	r3, [r7, #0]
   82846:	801a      	strh	r2, [r3, #0]
            DD_SPI_PCS_DECODER_DEACTIVE();
   82848:	4b18      	ldr	r3, [pc, #96]	; (828ac <DD_READ_SENSORS+0xb0c>)
   8284a:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();
   8284c:	4b15      	ldr	r3, [pc, #84]	; (828a4 <DD_READ_SENSORS+0xb04>)
   8284e:	4798      	blx	r3
		
		    
		break;
   82850:	e2dc      	b.n	82e0c <DD_READ_SENSORS+0x106c>
		
		case SV_DAC1_ID:
	        command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   82852:	4b0c      	ldr	r3, [pc, #48]	; (82884 <DD_READ_SENSORS+0xae4>)
   82854:	2200      	movs	r2, #0
   82856:	701a      	strb	r2, [r3, #0]
		    command_data_array[1] = 0;  		   
   82858:	4b0a      	ldr	r3, [pc, #40]	; (82884 <DD_READ_SENSORS+0xae4>)
   8285a:	2200      	movs	r2, #0
   8285c:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   8285e:	4b0f      	ldr	r3, [pc, #60]	; (8289c <DD_READ_SENSORS+0xafc>)
   82860:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   82862:	4b0f      	ldr	r3, [pc, #60]	; (828a0 <DD_READ_SENSORS+0xb00>)
   82864:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   82866:	4b0f      	ldr	r3, [pc, #60]	; (828a4 <DD_READ_SENSORS+0xb04>)
   82868:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   8286a:	4b0f      	ldr	r3, [pc, #60]	; (828a8 <DD_READ_SENSORS+0xb08>)
   8286c:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   8286e:	2003      	movs	r0, #3
   82870:	4b07      	ldr	r3, [pc, #28]	; (82890 <DD_READ_SENSORS+0xaf0>)
   82872:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   82874:	2203      	movs	r2, #3
   82876:	2102      	movs	r1, #2
   82878:	4802      	ldr	r0, [pc, #8]	; (82884 <DD_READ_SENSORS+0xae4>)
   8287a:	4b03      	ldr	r3, [pc, #12]	; (82888 <DD_READ_SENSORS+0xae8>)
   8287c:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   8287e:	2300      	movs	r3, #0
   82880:	64fb      	str	r3, [r7, #76]	; 0x4c
   82882:	e01a      	b.n	828ba <DD_READ_SENSORS+0xb1a>
   82884:	20070ae8 	.word	0x20070ae8
   82888:	000817b5 	.word	0x000817b5
   8288c:	20070ae4 	.word	0x20070ae4
   82890:	0008170d 	.word	0x0008170d
   82894:	00081b59 	.word	0x00081b59
   82898:	00081745 	.word	0x00081745
   8289c:	00081ba9 	.word	0x00081ba9
   828a0:	00081b39 	.word	0x00081b39
   828a4:	00081be1 	.word	0x00081be1
   828a8:	00081c79 	.word	0x00081c79
   828ac:	00081bc5 	.word	0x00081bc5
   828b0:	00081b91 	.word	0x00081b91
   828b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   828b6:	3301      	adds	r3, #1
   828b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   828ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   828bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   828c0:	d3f8      	bcc.n	828b4 <DD_READ_SENSORS+0xb14>
		      ;
	        }
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   828c2:	4b95      	ldr	r3, [pc, #596]	; (82b18 <DD_READ_SENSORS+0xd78>)
   828c4:	2200      	movs	r2, #0
   828c6:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   828c8:	4b93      	ldr	r3, [pc, #588]	; (82b18 <DD_READ_SENSORS+0xd78>)
   828ca:	2200      	movs	r2, #0
   828cc:	705a      	strb	r2, [r3, #1]
		    dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   828ce:	2203      	movs	r2, #3
   828d0:	2102      	movs	r1, #2
   828d2:	4891      	ldr	r0, [pc, #580]	; (82b18 <DD_READ_SENSORS+0xd78>)
   828d4:	4b91      	ldr	r3, [pc, #580]	; (82b1c <DD_READ_SENSORS+0xd7c>)
   828d6:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   828d8:	4b8f      	ldr	r3, [pc, #572]	; (82b18 <DD_READ_SENSORS+0xd78>)
   828da:	781a      	ldrb	r2, [r3, #0]
   828dc:	4b90      	ldr	r3, [pc, #576]	; (82b20 <DD_READ_SENSORS+0xd80>)
   828de:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   828e0:	4b8d      	ldr	r3, [pc, #564]	; (82b18 <DD_READ_SENSORS+0xd78>)
   828e2:	785a      	ldrb	r2, [r3, #1]
   828e4:	4b8e      	ldr	r3, [pc, #568]	; (82b20 <DD_READ_SENSORS+0xd80>)
   828e6:	701a      	strb	r2, [r3, #0]
           CONDUCTIVITY_SENSOR_RMS_VOLTAGE = spi_data.Twobyte;				    
   828e8:	4b8d      	ldr	r3, [pc, #564]	; (82b20 <DD_READ_SENSORS+0xd80>)
   828ea:	881b      	ldrh	r3, [r3, #0]
   828ec:	83fb      	strh	r3, [r7, #30]
			DD_SPI_PCS_DECODER_DEACTIVE();
   828ee:	4b8d      	ldr	r3, [pc, #564]	; (82b24 <DD_READ_SENSORS+0xd84>)
   828f0:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();
   828f2:	4b8d      	ldr	r3, [pc, #564]	; (82b28 <DD_READ_SENSORS+0xd88>)
   828f4:	4798      	blx	r3
			
			
			
			
			conductivity_mux_reg_2  &= ~DAC1_GAIN_Msk ;
   828f6:	7cfb      	ldrb	r3, [r7, #19]
   828f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   828fc:	74fb      	strb	r3, [r7, #19]
			conductivity_mux_reg_2 |= DAC1_GAIN_X100;
   828fe:	7cfb      	ldrb	r3, [r7, #19]
   82900:	f043 0310 	orr.w	r3, r3, #16
   82904:	74fb      	strb	r3, [r7, #19]
	        command_data_array[0] = conductivity_mux_reg_2;
   82906:	4a84      	ldr	r2, [pc, #528]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82908:	7cfb      	ldrb	r3, [r7, #19]
   8290a:	7013      	strb	r3, [r2, #0]
			 	
			//DD_ENABLE_ISOLATOR_4();
			DD_SPI_PCS_DECODER_ACTIVE();				 
   8290c:	4b87      	ldr	r3, [pc, #540]	; (82b2c <DD_READ_SENSORS+0xd8c>)
   8290e:	4798      	blx	r3
	        dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);	 	 
   82910:	2003      	movs	r0, #3
   82912:	4b87      	ldr	r3, [pc, #540]	; (82b30 <DD_READ_SENSORS+0xd90>)
   82914:	4798      	blx	r3
	        DD_AN_MUX_CHIPSEL_3();
   82916:	4b87      	ldr	r3, [pc, #540]	; (82b34 <DD_READ_SENSORS+0xd94>)
   82918:	4798      	blx	r3
	        dd_spi_master_transfer(&command_data_array, 1, ISOLTR_3_CS_ID);
   8291a:	2203      	movs	r2, #3
   8291c:	2101      	movs	r1, #1
   8291e:	487e      	ldr	r0, [pc, #504]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82920:	4b85      	ldr	r3, [pc, #532]	; (82b38 <DD_READ_SENSORS+0xd98>)
   82922:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   82924:	2300      	movs	r3, #0
   82926:	64bb      	str	r3, [r7, #72]	; 0x48
   82928:	e002      	b.n	82930 <DD_READ_SENSORS+0xb90>
   8292a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   8292c:	3301      	adds	r3, #1
   8292e:	64bb      	str	r3, [r7, #72]	; 0x48
   82930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   82932:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82936:	d3f8      	bcc.n	8292a <DD_READ_SENSORS+0xb8a>
		      ;
	        }
			DD_SPI_PCS_DECODER_DEACTIVE();
   82938:	4b7a      	ldr	r3, [pc, #488]	; (82b24 <DD_READ_SENSORS+0xd84>)
   8293a:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();	
   8293c:	4b7a      	ldr	r3, [pc, #488]	; (82b28 <DD_READ_SENSORS+0xd88>)
   8293e:	4798      	blx	r3
			
			
			command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_DAC1_SEN_RMS_CURRENT);
   82940:	4b75      	ldr	r3, [pc, #468]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82942:	2228      	movs	r2, #40	; 0x28
   82944:	701a      	strb	r2, [r3, #0]
		    command_data_array[1] = 0;  		   
   82946:	4b74      	ldr	r3, [pc, #464]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82948:	2200      	movs	r2, #0
   8294a:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   8294c:	4b77      	ldr	r3, [pc, #476]	; (82b2c <DD_READ_SENSORS+0xd8c>)
   8294e:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   82950:	4b7a      	ldr	r3, [pc, #488]	; (82b3c <DD_READ_SENSORS+0xd9c>)
   82952:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   82954:	4b74      	ldr	r3, [pc, #464]	; (82b28 <DD_READ_SENSORS+0xd88>)
   82956:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   82958:	4b79      	ldr	r3, [pc, #484]	; (82b40 <DD_READ_SENSORS+0xda0>)
   8295a:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   8295c:	2003      	movs	r0, #3
   8295e:	4b74      	ldr	r3, [pc, #464]	; (82b30 <DD_READ_SENSORS+0xd90>)
   82960:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   82962:	2203      	movs	r2, #3
   82964:	2102      	movs	r1, #2
   82966:	486c      	ldr	r0, [pc, #432]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82968:	4b6c      	ldr	r3, [pc, #432]	; (82b1c <DD_READ_SENSORS+0xd7c>)
   8296a:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   8296c:	2300      	movs	r3, #0
   8296e:	647b      	str	r3, [r7, #68]	; 0x44
   82970:	e002      	b.n	82978 <DD_READ_SENSORS+0xbd8>
   82972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   82974:	3301      	adds	r3, #1
   82976:	647b      	str	r3, [r7, #68]	; 0x44
   82978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   8297a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8297e:	d3f8      	bcc.n	82972 <DD_READ_SENSORS+0xbd2>
		      ;
	        }
			uint16_t DAC1_SEN_RMS_CURRENT;
			
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_DAC1_SEN_RMS_CURRENT);
   82980:	4b65      	ldr	r3, [pc, #404]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82982:	2228      	movs	r2, #40	; 0x28
   82984:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   82986:	4b64      	ldr	r3, [pc, #400]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82988:	2200      	movs	r2, #0
   8298a:	705a      	strb	r2, [r3, #1]
		   dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   8298c:	2203      	movs	r2, #3
   8298e:	2102      	movs	r1, #2
   82990:	4861      	ldr	r0, [pc, #388]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82992:	4b62      	ldr	r3, [pc, #392]	; (82b1c <DD_READ_SENSORS+0xd7c>)
   82994:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   82996:	4b60      	ldr	r3, [pc, #384]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82998:	781a      	ldrb	r2, [r3, #0]
   8299a:	4b61      	ldr	r3, [pc, #388]	; (82b20 <DD_READ_SENSORS+0xd80>)
   8299c:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   8299e:	4b5e      	ldr	r3, [pc, #376]	; (82b18 <DD_READ_SENSORS+0xd78>)
   829a0:	785a      	ldrb	r2, [r3, #1]
   829a2:	4b5f      	ldr	r3, [pc, #380]	; (82b20 <DD_READ_SENSORS+0xd80>)
   829a4:	701a      	strb	r2, [r3, #0]
           DAC1_SEN_RMS_CURRENT = spi_data.Twobyte;	
   829a6:	4b5e      	ldr	r3, [pc, #376]	; (82b20 <DD_READ_SENSORS+0xd80>)
   829a8:	881b      	ldrh	r3, [r3, #0]
   829aa:	823b      	strh	r3, [r7, #16]
		   *sensor_status = (DAC1_SEN_RMS_CURRENT*10000)/ CONDUCTIVITY_SENSOR_RMS_VOLTAGE;            
   829ac:	8a3b      	ldrh	r3, [r7, #16]
   829ae:	f242 7210 	movw	r2, #10000	; 0x2710
   829b2:	fb02 f203 	mul.w	r2, r2, r3
   829b6:	8bfb      	ldrh	r3, [r7, #30]
   829b8:	fb92 f3f3 	sdiv	r3, r2, r3
   829bc:	b29a      	uxth	r2, r3
   829be:	683b      	ldr	r3, [r7, #0]
   829c0:	801a      	strh	r2, [r3, #0]
            DD_SPI_PCS_DECODER_DEACTIVE();
   829c2:	4b58      	ldr	r3, [pc, #352]	; (82b24 <DD_READ_SENSORS+0xd84>)
   829c4:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();
   829c6:	4b58      	ldr	r3, [pc, #352]	; (82b28 <DD_READ_SENSORS+0xd88>)
   829c8:	4798      	blx	r3
		break;
   829ca:	e21f      	b.n	82e0c <DD_READ_SENSORS+0x106c>
		
		case SV_DAA_ID:
		command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   829cc:	4b52      	ldr	r3, [pc, #328]	; (82b18 <DD_READ_SENSORS+0xd78>)
   829ce:	2200      	movs	r2, #0
   829d0:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  		   
   829d2:	4b51      	ldr	r3, [pc, #324]	; (82b18 <DD_READ_SENSORS+0xd78>)
   829d4:	2200      	movs	r2, #0
   829d6:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   829d8:	4b54      	ldr	r3, [pc, #336]	; (82b2c <DD_READ_SENSORS+0xd8c>)
   829da:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   829dc:	4b57      	ldr	r3, [pc, #348]	; (82b3c <DD_READ_SENSORS+0xd9c>)
   829de:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   829e0:	4b51      	ldr	r3, [pc, #324]	; (82b28 <DD_READ_SENSORS+0xd88>)
   829e2:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   829e4:	4b56      	ldr	r3, [pc, #344]	; (82b40 <DD_READ_SENSORS+0xda0>)
   829e6:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   829e8:	2003      	movs	r0, #3
   829ea:	4b51      	ldr	r3, [pc, #324]	; (82b30 <DD_READ_SENSORS+0xd90>)
   829ec:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   829ee:	2203      	movs	r2, #3
   829f0:	2102      	movs	r1, #2
   829f2:	4849      	ldr	r0, [pc, #292]	; (82b18 <DD_READ_SENSORS+0xd78>)
   829f4:	4b49      	ldr	r3, [pc, #292]	; (82b1c <DD_READ_SENSORS+0xd7c>)
   829f6:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   829f8:	2300      	movs	r3, #0
   829fa:	643b      	str	r3, [r7, #64]	; 0x40
   829fc:	e002      	b.n	82a04 <DD_READ_SENSORS+0xc64>
   829fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   82a00:	3301      	adds	r3, #1
   82a02:	643b      	str	r3, [r7, #64]	; 0x40
   82a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   82a06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82a0a:	d3f8      	bcc.n	829fe <DD_READ_SENSORS+0xc5e>
		      ;
	        }
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   82a0c:	4b42      	ldr	r3, [pc, #264]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82a0e:	2200      	movs	r2, #0
   82a10:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   82a12:	4b41      	ldr	r3, [pc, #260]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82a14:	2200      	movs	r2, #0
   82a16:	705a      	strb	r2, [r3, #1]
		    dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   82a18:	2203      	movs	r2, #3
   82a1a:	2102      	movs	r1, #2
   82a1c:	483e      	ldr	r0, [pc, #248]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82a1e:	4b3f      	ldr	r3, [pc, #252]	; (82b1c <DD_READ_SENSORS+0xd7c>)
   82a20:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   82a22:	4b3d      	ldr	r3, [pc, #244]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82a24:	781a      	ldrb	r2, [r3, #0]
   82a26:	4b3e      	ldr	r3, [pc, #248]	; (82b20 <DD_READ_SENSORS+0xd80>)
   82a28:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   82a2a:	4b3b      	ldr	r3, [pc, #236]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82a2c:	785a      	ldrb	r2, [r3, #1]
   82a2e:	4b3c      	ldr	r3, [pc, #240]	; (82b20 <DD_READ_SENSORS+0xd80>)
   82a30:	701a      	strb	r2, [r3, #0]
           CONDUCTIVITY_SENSOR_RMS_VOLTAGE = spi_data.Twobyte;				    
   82a32:	4b3b      	ldr	r3, [pc, #236]	; (82b20 <DD_READ_SENSORS+0xd80>)
   82a34:	881b      	ldrh	r3, [r3, #0]
   82a36:	83fb      	strh	r3, [r7, #30]
			DD_SPI_PCS_DECODER_DEACTIVE();
   82a38:	4b3a      	ldr	r3, [pc, #232]	; (82b24 <DD_READ_SENSORS+0xd84>)
   82a3a:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();
   82a3c:	4b3a      	ldr	r3, [pc, #232]	; (82b28 <DD_READ_SENSORS+0xd88>)
   82a3e:	4798      	blx	r3
			
			
			
			
			conductivity_mux_reg_2  &= ~DAA_GAIN_2_Msk ;
   82a40:	7cfb      	ldrb	r3, [r7, #19]
   82a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   82a46:	74fb      	strb	r3, [r7, #19]
			conductivity_mux_reg_2 |=  DAA_GAIN_X10000;
   82a48:	7cfb      	ldrb	r3, [r7, #19]
   82a4a:	f043 0301 	orr.w	r3, r3, #1
   82a4e:	74fb      	strb	r3, [r7, #19]
	        command_data_array[0] = conductivity_mux_reg_2;
   82a50:	4a31      	ldr	r2, [pc, #196]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82a52:	7cfb      	ldrb	r3, [r7, #19]
   82a54:	7013      	strb	r3, [r2, #0]
			 	
			//DD_ENABLE_ISOLATOR_4();
			DD_SPI_PCS_DECODER_ACTIVE();				 
   82a56:	4b35      	ldr	r3, [pc, #212]	; (82b2c <DD_READ_SENSORS+0xd8c>)
   82a58:	4798      	blx	r3
	        dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);	 	 
   82a5a:	2003      	movs	r0, #3
   82a5c:	4b34      	ldr	r3, [pc, #208]	; (82b30 <DD_READ_SENSORS+0xd90>)
   82a5e:	4798      	blx	r3
	        DD_AN_MUX_CHIPSEL_3();
   82a60:	4b34      	ldr	r3, [pc, #208]	; (82b34 <DD_READ_SENSORS+0xd94>)
   82a62:	4798      	blx	r3
	        dd_spi_master_transfer(&command_data_array, 1, ISOLTR_3_CS_ID);
   82a64:	2203      	movs	r2, #3
   82a66:	2101      	movs	r1, #1
   82a68:	482b      	ldr	r0, [pc, #172]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82a6a:	4b33      	ldr	r3, [pc, #204]	; (82b38 <DD_READ_SENSORS+0xd98>)
   82a6c:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   82a6e:	2300      	movs	r3, #0
   82a70:	63fb      	str	r3, [r7, #60]	; 0x3c
   82a72:	e002      	b.n	82a7a <DD_READ_SENSORS+0xcda>
   82a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   82a76:	3301      	adds	r3, #1
   82a78:	63fb      	str	r3, [r7, #60]	; 0x3c
   82a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   82a7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82a80:	d3f8      	bcc.n	82a74 <DD_READ_SENSORS+0xcd4>
		      ;
	        }
			DD_SPI_PCS_DECODER_DEACTIVE();
   82a82:	4b28      	ldr	r3, [pc, #160]	; (82b24 <DD_READ_SENSORS+0xd84>)
   82a84:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();	
   82a86:	4b28      	ldr	r3, [pc, #160]	; (82b28 <DD_READ_SENSORS+0xd88>)
   82a88:	4798      	blx	r3
			
			
			command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_DAA_SEN_RMS_CURRENT);
   82a8a:	4b23      	ldr	r3, [pc, #140]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82a8c:	2218      	movs	r2, #24
   82a8e:	701a      	strb	r2, [r3, #0]
		    command_data_array[1] = 0;  		   
   82a90:	4b21      	ldr	r3, [pc, #132]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82a92:	2200      	movs	r2, #0
   82a94:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   82a96:	4b25      	ldr	r3, [pc, #148]	; (82b2c <DD_READ_SENSORS+0xd8c>)
   82a98:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   82a9a:	4b28      	ldr	r3, [pc, #160]	; (82b3c <DD_READ_SENSORS+0xd9c>)
   82a9c:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   82a9e:	4b22      	ldr	r3, [pc, #136]	; (82b28 <DD_READ_SENSORS+0xd88>)
   82aa0:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   82aa2:	4b27      	ldr	r3, [pc, #156]	; (82b40 <DD_READ_SENSORS+0xda0>)
   82aa4:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   82aa6:	2003      	movs	r0, #3
   82aa8:	4b21      	ldr	r3, [pc, #132]	; (82b30 <DD_READ_SENSORS+0xd90>)
   82aaa:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   82aac:	2203      	movs	r2, #3
   82aae:	2102      	movs	r1, #2
   82ab0:	4819      	ldr	r0, [pc, #100]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82ab2:	4b1a      	ldr	r3, [pc, #104]	; (82b1c <DD_READ_SENSORS+0xd7c>)
   82ab4:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   82ab6:	2300      	movs	r3, #0
   82ab8:	63bb      	str	r3, [r7, #56]	; 0x38
   82aba:	e002      	b.n	82ac2 <DD_READ_SENSORS+0xd22>
   82abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   82abe:	3301      	adds	r3, #1
   82ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   82ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   82ac4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82ac8:	d3f8      	bcc.n	82abc <DD_READ_SENSORS+0xd1c>
		      ;
	        }
			uint16_t DAA_SEN_RMS_CURRENT;
			
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_DAC2_SEN_RMS_CURRENT);
   82aca:	4b13      	ldr	r3, [pc, #76]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82acc:	2230      	movs	r2, #48	; 0x30
   82ace:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   82ad0:	4b11      	ldr	r3, [pc, #68]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82ad2:	2200      	movs	r2, #0
   82ad4:	705a      	strb	r2, [r3, #1]
		   dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   82ad6:	2203      	movs	r2, #3
   82ad8:	2102      	movs	r1, #2
   82ada:	480f      	ldr	r0, [pc, #60]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82adc:	4b0f      	ldr	r3, [pc, #60]	; (82b1c <DD_READ_SENSORS+0xd7c>)
   82ade:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   82ae0:	4b0d      	ldr	r3, [pc, #52]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82ae2:	781a      	ldrb	r2, [r3, #0]
   82ae4:	4b0e      	ldr	r3, [pc, #56]	; (82b20 <DD_READ_SENSORS+0xd80>)
   82ae6:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   82ae8:	4b0b      	ldr	r3, [pc, #44]	; (82b18 <DD_READ_SENSORS+0xd78>)
   82aea:	785a      	ldrb	r2, [r3, #1]
   82aec:	4b0c      	ldr	r3, [pc, #48]	; (82b20 <DD_READ_SENSORS+0xd80>)
   82aee:	701a      	strb	r2, [r3, #0]
           DAA_SEN_RMS_CURRENT = spi_data.Twobyte;	
   82af0:	4b0b      	ldr	r3, [pc, #44]	; (82b20 <DD_READ_SENSORS+0xd80>)
   82af2:	881b      	ldrh	r3, [r3, #0]
   82af4:	81fb      	strh	r3, [r7, #14]
		   *sensor_status = (DAA_SEN_RMS_CURRENT*10000)/ CONDUCTIVITY_SENSOR_RMS_VOLTAGE;            
   82af6:	89fb      	ldrh	r3, [r7, #14]
   82af8:	f242 7210 	movw	r2, #10000	; 0x2710
   82afc:	fb02 f203 	mul.w	r2, r2, r3
   82b00:	8bfb      	ldrh	r3, [r7, #30]
   82b02:	fb92 f3f3 	sdiv	r3, r2, r3
   82b06:	b29a      	uxth	r2, r3
   82b08:	683b      	ldr	r3, [r7, #0]
   82b0a:	801a      	strh	r2, [r3, #0]
            DD_SPI_PCS_DECODER_DEACTIVE();
   82b0c:	4b05      	ldr	r3, [pc, #20]	; (82b24 <DD_READ_SENSORS+0xd84>)
   82b0e:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();
   82b10:	4b05      	ldr	r3, [pc, #20]	; (82b28 <DD_READ_SENSORS+0xd88>)
   82b12:	4798      	blx	r3
	
		break;
   82b14:	e17a      	b.n	82e0c <DD_READ_SENSORS+0x106c>
   82b16:	bf00      	nop
   82b18:	20070ae8 	.word	0x20070ae8
   82b1c:	000817b5 	.word	0x000817b5
   82b20:	20070ae4 	.word	0x20070ae4
   82b24:	00081bc5 	.word	0x00081bc5
   82b28:	00081be1 	.word	0x00081be1
   82b2c:	00081ba9 	.word	0x00081ba9
   82b30:	0008170d 	.word	0x0008170d
   82b34:	00081b79 	.word	0x00081b79
   82b38:	00081745 	.word	0x00081745
   82b3c:	00081b39 	.word	0x00081b39
   82b40:	00081c79 	.word	0x00081c79
		
		case SV_DAB_ID:
	command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   82b44:	4b8e      	ldr	r3, [pc, #568]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82b46:	2200      	movs	r2, #0
   82b48:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  		   
   82b4a:	4b8d      	ldr	r3, [pc, #564]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82b4c:	2200      	movs	r2, #0
   82b4e:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   82b50:	4b8c      	ldr	r3, [pc, #560]	; (82d84 <DD_READ_SENSORS+0xfe4>)
   82b52:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   82b54:	4b8c      	ldr	r3, [pc, #560]	; (82d88 <DD_READ_SENSORS+0xfe8>)
   82b56:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   82b58:	4b8c      	ldr	r3, [pc, #560]	; (82d8c <DD_READ_SENSORS+0xfec>)
   82b5a:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   82b5c:	4b8c      	ldr	r3, [pc, #560]	; (82d90 <DD_READ_SENSORS+0xff0>)
   82b5e:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   82b60:	2003      	movs	r0, #3
   82b62:	4b8c      	ldr	r3, [pc, #560]	; (82d94 <DD_READ_SENSORS+0xff4>)
   82b64:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   82b66:	2203      	movs	r2, #3
   82b68:	2102      	movs	r1, #2
   82b6a:	4885      	ldr	r0, [pc, #532]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82b6c:	4b8a      	ldr	r3, [pc, #552]	; (82d98 <DD_READ_SENSORS+0xff8>)
   82b6e:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   82b70:	2300      	movs	r3, #0
   82b72:	637b      	str	r3, [r7, #52]	; 0x34
   82b74:	e002      	b.n	82b7c <DD_READ_SENSORS+0xddc>
   82b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   82b78:	3301      	adds	r3, #1
   82b7a:	637b      	str	r3, [r7, #52]	; 0x34
   82b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   82b7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82b82:	d3f8      	bcc.n	82b76 <DD_READ_SENSORS+0xdd6>
		      ;
	        }
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   82b84:	4b7e      	ldr	r3, [pc, #504]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82b86:	2200      	movs	r2, #0
   82b88:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   82b8a:	4b7d      	ldr	r3, [pc, #500]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82b8c:	2200      	movs	r2, #0
   82b8e:	705a      	strb	r2, [r3, #1]
		    dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   82b90:	2203      	movs	r2, #3
   82b92:	2102      	movs	r1, #2
   82b94:	487a      	ldr	r0, [pc, #488]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82b96:	4b80      	ldr	r3, [pc, #512]	; (82d98 <DD_READ_SENSORS+0xff8>)
   82b98:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   82b9a:	4b79      	ldr	r3, [pc, #484]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82b9c:	781a      	ldrb	r2, [r3, #0]
   82b9e:	4b7f      	ldr	r3, [pc, #508]	; (82d9c <DD_READ_SENSORS+0xffc>)
   82ba0:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   82ba2:	4b77      	ldr	r3, [pc, #476]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82ba4:	785a      	ldrb	r2, [r3, #1]
   82ba6:	4b7d      	ldr	r3, [pc, #500]	; (82d9c <DD_READ_SENSORS+0xffc>)
   82ba8:	701a      	strb	r2, [r3, #0]
           CONDUCTIVITY_SENSOR_RMS_VOLTAGE = spi_data.Twobyte;				    
   82baa:	4b7c      	ldr	r3, [pc, #496]	; (82d9c <DD_READ_SENSORS+0xffc>)
   82bac:	881b      	ldrh	r3, [r3, #0]
   82bae:	83fb      	strh	r3, [r7, #30]
			DD_SPI_PCS_DECODER_DEACTIVE();
   82bb0:	4b7b      	ldr	r3, [pc, #492]	; (82da0 <DD_READ_SENSORS+0x1000>)
   82bb2:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();
   82bb4:	4b75      	ldr	r3, [pc, #468]	; (82d8c <DD_READ_SENSORS+0xfec>)
   82bb6:	4798      	blx	r3
			
			
			
			
			conductivity_mux_reg_2  &= ~DAB_GAIN_Msk ;
   82bb8:	7cfb      	ldrb	r3, [r7, #19]
   82bba:	f023 030e 	bic.w	r3, r3, #14
   82bbe:	74fb      	strb	r3, [r7, #19]
			conductivity_mux_reg_2 |=  DAB_GAIN_X10000;
   82bc0:	7cfb      	ldrb	r3, [r7, #19]
   82bc2:	f043 0308 	orr.w	r3, r3, #8
   82bc6:	74fb      	strb	r3, [r7, #19]
	        command_data_array[0] = conductivity_mux_reg_2;
   82bc8:	4a6d      	ldr	r2, [pc, #436]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82bca:	7cfb      	ldrb	r3, [r7, #19]
   82bcc:	7013      	strb	r3, [r2, #0]
			 	
			//DD_ENABLE_ISOLATOR_4();
			DD_SPI_PCS_DECODER_ACTIVE();				 
   82bce:	4b6d      	ldr	r3, [pc, #436]	; (82d84 <DD_READ_SENSORS+0xfe4>)
   82bd0:	4798      	blx	r3
	        dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);	 	 
   82bd2:	2003      	movs	r0, #3
   82bd4:	4b6f      	ldr	r3, [pc, #444]	; (82d94 <DD_READ_SENSORS+0xff4>)
   82bd6:	4798      	blx	r3
	        DD_AN_MUX_CHIPSEL_3();
   82bd8:	4b72      	ldr	r3, [pc, #456]	; (82da4 <DD_READ_SENSORS+0x1004>)
   82bda:	4798      	blx	r3
	        dd_spi_master_transfer(&command_data_array, 1, ISOLTR_3_CS_ID);
   82bdc:	2203      	movs	r2, #3
   82bde:	2101      	movs	r1, #1
   82be0:	4867      	ldr	r0, [pc, #412]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82be2:	4b71      	ldr	r3, [pc, #452]	; (82da8 <DD_READ_SENSORS+0x1008>)
   82be4:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   82be6:	2300      	movs	r3, #0
   82be8:	633b      	str	r3, [r7, #48]	; 0x30
   82bea:	e002      	b.n	82bf2 <DD_READ_SENSORS+0xe52>
   82bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   82bee:	3301      	adds	r3, #1
   82bf0:	633b      	str	r3, [r7, #48]	; 0x30
   82bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   82bf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82bf8:	d3f8      	bcc.n	82bec <DD_READ_SENSORS+0xe4c>
		      ;
	        }
			DD_SPI_PCS_DECODER_DEACTIVE();
   82bfa:	4b69      	ldr	r3, [pc, #420]	; (82da0 <DD_READ_SENSORS+0x1000>)
   82bfc:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();	
   82bfe:	4b63      	ldr	r3, [pc, #396]	; (82d8c <DD_READ_SENSORS+0xfec>)
   82c00:	4798      	blx	r3
			
			
			command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_DAB_SEN_RMS_CURRENT);
   82c02:	4b5f      	ldr	r3, [pc, #380]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82c04:	2220      	movs	r2, #32
   82c06:	701a      	strb	r2, [r3, #0]
		    command_data_array[1] = 0;  		   
   82c08:	4b5d      	ldr	r3, [pc, #372]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82c0a:	2200      	movs	r2, #0
   82c0c:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   82c0e:	4b5d      	ldr	r3, [pc, #372]	; (82d84 <DD_READ_SENSORS+0xfe4>)
   82c10:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   82c12:	4b5d      	ldr	r3, [pc, #372]	; (82d88 <DD_READ_SENSORS+0xfe8>)
   82c14:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   82c16:	4b5d      	ldr	r3, [pc, #372]	; (82d8c <DD_READ_SENSORS+0xfec>)
   82c18:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   82c1a:	4b5d      	ldr	r3, [pc, #372]	; (82d90 <DD_READ_SENSORS+0xff0>)
   82c1c:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   82c1e:	2003      	movs	r0, #3
   82c20:	4b5c      	ldr	r3, [pc, #368]	; (82d94 <DD_READ_SENSORS+0xff4>)
   82c22:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   82c24:	2203      	movs	r2, #3
   82c26:	2102      	movs	r1, #2
   82c28:	4855      	ldr	r0, [pc, #340]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82c2a:	4b5b      	ldr	r3, [pc, #364]	; (82d98 <DD_READ_SENSORS+0xff8>)
   82c2c:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   82c2e:	2300      	movs	r3, #0
   82c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   82c32:	e002      	b.n	82c3a <DD_READ_SENSORS+0xe9a>
   82c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82c36:	3301      	adds	r3, #1
   82c38:	62fb      	str	r3, [r7, #44]	; 0x2c
   82c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82c40:	d3f8      	bcc.n	82c34 <DD_READ_SENSORS+0xe94>
		      ;
	        }
			uint16_t DAB_SEN_RMS_CURRENT;
			
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_DAB_SEN_RMS_CURRENT);
   82c42:	4b4f      	ldr	r3, [pc, #316]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82c44:	2220      	movs	r2, #32
   82c46:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   82c48:	4b4d      	ldr	r3, [pc, #308]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82c4a:	2200      	movs	r2, #0
   82c4c:	705a      	strb	r2, [r3, #1]
		   dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   82c4e:	2203      	movs	r2, #3
   82c50:	2102      	movs	r1, #2
   82c52:	484b      	ldr	r0, [pc, #300]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82c54:	4b50      	ldr	r3, [pc, #320]	; (82d98 <DD_READ_SENSORS+0xff8>)
   82c56:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   82c58:	4b49      	ldr	r3, [pc, #292]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82c5a:	781a      	ldrb	r2, [r3, #0]
   82c5c:	4b4f      	ldr	r3, [pc, #316]	; (82d9c <DD_READ_SENSORS+0xffc>)
   82c5e:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   82c60:	4b47      	ldr	r3, [pc, #284]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82c62:	785a      	ldrb	r2, [r3, #1]
   82c64:	4b4d      	ldr	r3, [pc, #308]	; (82d9c <DD_READ_SENSORS+0xffc>)
   82c66:	701a      	strb	r2, [r3, #0]
           DAB_SEN_RMS_CURRENT = spi_data.Twobyte;	
   82c68:	4b4c      	ldr	r3, [pc, #304]	; (82d9c <DD_READ_SENSORS+0xffc>)
   82c6a:	881b      	ldrh	r3, [r3, #0]
   82c6c:	81bb      	strh	r3, [r7, #12]
		   *sensor_status = (DAB_SEN_RMS_CURRENT*10000)/ CONDUCTIVITY_SENSOR_RMS_VOLTAGE;            
   82c6e:	89bb      	ldrh	r3, [r7, #12]
   82c70:	f242 7210 	movw	r2, #10000	; 0x2710
   82c74:	fb02 f203 	mul.w	r2, r2, r3
   82c78:	8bfb      	ldrh	r3, [r7, #30]
   82c7a:	fb92 f3f3 	sdiv	r3, r2, r3
   82c7e:	b29a      	uxth	r2, r3
   82c80:	683b      	ldr	r3, [r7, #0]
   82c82:	801a      	strh	r2, [r3, #0]
            DD_SPI_PCS_DECODER_DEACTIVE();
   82c84:	4b46      	ldr	r3, [pc, #280]	; (82da0 <DD_READ_SENSORS+0x1000>)
   82c86:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();
   82c88:	4b40      	ldr	r3, [pc, #256]	; (82d8c <DD_READ_SENSORS+0xfec>)
   82c8a:	4798      	blx	r3
		   
		break;
   82c8c:	e0be      	b.n	82e0c <DD_READ_SENSORS+0x106c>
		
		case SV_DAC2_ID:
		command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   82c8e:	4b3c      	ldr	r3, [pc, #240]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82c90:	2200      	movs	r2, #0
   82c92:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  		   
   82c94:	4b3a      	ldr	r3, [pc, #232]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82c96:	2200      	movs	r2, #0
   82c98:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   82c9a:	4b3a      	ldr	r3, [pc, #232]	; (82d84 <DD_READ_SENSORS+0xfe4>)
   82c9c:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   82c9e:	4b3a      	ldr	r3, [pc, #232]	; (82d88 <DD_READ_SENSORS+0xfe8>)
   82ca0:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   82ca2:	4b3a      	ldr	r3, [pc, #232]	; (82d8c <DD_READ_SENSORS+0xfec>)
   82ca4:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   82ca6:	4b3a      	ldr	r3, [pc, #232]	; (82d90 <DD_READ_SENSORS+0xff0>)
   82ca8:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   82caa:	2003      	movs	r0, #3
   82cac:	4b39      	ldr	r3, [pc, #228]	; (82d94 <DD_READ_SENSORS+0xff4>)
   82cae:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   82cb0:	2203      	movs	r2, #3
   82cb2:	2102      	movs	r1, #2
   82cb4:	4832      	ldr	r0, [pc, #200]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82cb6:	4b38      	ldr	r3, [pc, #224]	; (82d98 <DD_READ_SENSORS+0xff8>)
   82cb8:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   82cba:	2300      	movs	r3, #0
   82cbc:	62bb      	str	r3, [r7, #40]	; 0x28
   82cbe:	e002      	b.n	82cc6 <DD_READ_SENSORS+0xf26>
   82cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   82cc2:	3301      	adds	r3, #1
   82cc4:	62bb      	str	r3, [r7, #40]	; 0x28
   82cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   82cc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82ccc:	d3f8      	bcc.n	82cc0 <DD_READ_SENSORS+0xf20>
		      ;
	        }
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   82cce:	4b2c      	ldr	r3, [pc, #176]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82cd0:	2200      	movs	r2, #0
   82cd2:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   82cd4:	4b2a      	ldr	r3, [pc, #168]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82cd6:	2200      	movs	r2, #0
   82cd8:	705a      	strb	r2, [r3, #1]
		    dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   82cda:	2203      	movs	r2, #3
   82cdc:	2102      	movs	r1, #2
   82cde:	4828      	ldr	r0, [pc, #160]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82ce0:	4b2d      	ldr	r3, [pc, #180]	; (82d98 <DD_READ_SENSORS+0xff8>)
   82ce2:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   82ce4:	4b26      	ldr	r3, [pc, #152]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82ce6:	781a      	ldrb	r2, [r3, #0]
   82ce8:	4b2c      	ldr	r3, [pc, #176]	; (82d9c <DD_READ_SENSORS+0xffc>)
   82cea:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   82cec:	4b24      	ldr	r3, [pc, #144]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82cee:	785a      	ldrb	r2, [r3, #1]
   82cf0:	4b2a      	ldr	r3, [pc, #168]	; (82d9c <DD_READ_SENSORS+0xffc>)
   82cf2:	701a      	strb	r2, [r3, #0]
           CONDUCTIVITY_SENSOR_RMS_VOLTAGE = spi_data.Twobyte;				    
   82cf4:	4b29      	ldr	r3, [pc, #164]	; (82d9c <DD_READ_SENSORS+0xffc>)
   82cf6:	881b      	ldrh	r3, [r3, #0]
   82cf8:	83fb      	strh	r3, [r7, #30]
			DD_SPI_PCS_DECODER_DEACTIVE();
   82cfa:	4b29      	ldr	r3, [pc, #164]	; (82da0 <DD_READ_SENSORS+0x1000>)
   82cfc:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();
   82cfe:	4b23      	ldr	r3, [pc, #140]	; (82d8c <DD_READ_SENSORS+0xfec>)
   82d00:	4798      	blx	r3
			
			
			
			
			conductivity_mux_reg_3  &= ~DAC2_GAIN_Msk ;
   82d02:	7dfb      	ldrb	r3, [r7, #23]
   82d04:	f023 030f 	bic.w	r3, r3, #15
   82d08:	75fb      	strb	r3, [r7, #23]
			conductivity_mux_reg_3 |=  DAC2_GAIN_X500;
   82d0a:	7dfb      	ldrb	r3, [r7, #23]
   82d0c:	f043 0304 	orr.w	r3, r3, #4
   82d10:	75fb      	strb	r3, [r7, #23]
	        command_data_array[0] = conductivity_mux_reg_3;
   82d12:	4a1b      	ldr	r2, [pc, #108]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82d14:	7dfb      	ldrb	r3, [r7, #23]
   82d16:	7013      	strb	r3, [r2, #0]
			 	
			//DD_ENABLE_ISOLATOR_4();
			DD_SPI_PCS_DECODER_ACTIVE();				 
   82d18:	4b1a      	ldr	r3, [pc, #104]	; (82d84 <DD_READ_SENSORS+0xfe4>)
   82d1a:	4798      	blx	r3
	        dd_spi_set_peripheral_chip_select_value(ISOLTR_4_CS_ID);	 	 
   82d1c:	2004      	movs	r0, #4
   82d1e:	4b1d      	ldr	r3, [pc, #116]	; (82d94 <DD_READ_SENSORS+0xff4>)
   82d20:	4798      	blx	r3
	        DD_AN_MUX_CHIPSEL_4();
   82d22:	4b22      	ldr	r3, [pc, #136]	; (82dac <DD_READ_SENSORS+0x100c>)
   82d24:	4798      	blx	r3
	        dd_spi_master_transfer(&command_data_array, 1, ISOLTR_4_CS_ID);
   82d26:	2204      	movs	r2, #4
   82d28:	2101      	movs	r1, #1
   82d2a:	4815      	ldr	r0, [pc, #84]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82d2c:	4b1e      	ldr	r3, [pc, #120]	; (82da8 <DD_READ_SENSORS+0x1008>)
   82d2e:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   82d30:	2300      	movs	r3, #0
   82d32:	627b      	str	r3, [r7, #36]	; 0x24
   82d34:	e002      	b.n	82d3c <DD_READ_SENSORS+0xf9c>
   82d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82d38:	3301      	adds	r3, #1
   82d3a:	627b      	str	r3, [r7, #36]	; 0x24
   82d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82d3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82d42:	d3f8      	bcc.n	82d36 <DD_READ_SENSORS+0xf96>
		      ;
	        }
			DD_SPI_PCS_DECODER_DEACTIVE();
   82d44:	4b16      	ldr	r3, [pc, #88]	; (82da0 <DD_READ_SENSORS+0x1000>)
   82d46:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();	
   82d48:	4b10      	ldr	r3, [pc, #64]	; (82d8c <DD_READ_SENSORS+0xfec>)
   82d4a:	4798      	blx	r3
			
			
			command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_DAC2_SEN_RMS_CURRENT);
   82d4c:	4b0c      	ldr	r3, [pc, #48]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82d4e:	2230      	movs	r2, #48	; 0x30
   82d50:	701a      	strb	r2, [r3, #0]
		    command_data_array[1] = 0;  		   
   82d52:	4b0b      	ldr	r3, [pc, #44]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82d54:	2200      	movs	r2, #0
   82d56:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   82d58:	4b0a      	ldr	r3, [pc, #40]	; (82d84 <DD_READ_SENSORS+0xfe4>)
   82d5a:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   82d5c:	4b0a      	ldr	r3, [pc, #40]	; (82d88 <DD_READ_SENSORS+0xfe8>)
   82d5e:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   82d60:	4b0a      	ldr	r3, [pc, #40]	; (82d8c <DD_READ_SENSORS+0xfec>)
   82d62:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   82d64:	4b0a      	ldr	r3, [pc, #40]	; (82d90 <DD_READ_SENSORS+0xff0>)
   82d66:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   82d68:	2003      	movs	r0, #3
   82d6a:	4b0a      	ldr	r3, [pc, #40]	; (82d94 <DD_READ_SENSORS+0xff4>)
   82d6c:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   82d6e:	2203      	movs	r2, #3
   82d70:	2102      	movs	r1, #2
   82d72:	4803      	ldr	r0, [pc, #12]	; (82d80 <DD_READ_SENSORS+0xfe0>)
   82d74:	4b08      	ldr	r3, [pc, #32]	; (82d98 <DD_READ_SENSORS+0xff8>)
   82d76:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   82d78:	2300      	movs	r3, #0
   82d7a:	623b      	str	r3, [r7, #32]
   82d7c:	e01b      	b.n	82db6 <DD_READ_SENSORS+0x1016>
   82d7e:	bf00      	nop
   82d80:	20070ae8 	.word	0x20070ae8
   82d84:	00081ba9 	.word	0x00081ba9
   82d88:	00081b39 	.word	0x00081b39
   82d8c:	00081be1 	.word	0x00081be1
   82d90:	00081c79 	.word	0x00081c79
   82d94:	0008170d 	.word	0x0008170d
   82d98:	000817b5 	.word	0x000817b5
   82d9c:	20070ae4 	.word	0x20070ae4
   82da0:	00081bc5 	.word	0x00081bc5
   82da4:	00081b79 	.word	0x00081b79
   82da8:	00081745 	.word	0x00081745
   82dac:	00081b91 	.word	0x00081b91
   82db0:	6a3b      	ldr	r3, [r7, #32]
   82db2:	3301      	adds	r3, #1
   82db4:	623b      	str	r3, [r7, #32]
   82db6:	6a3b      	ldr	r3, [r7, #32]
   82db8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82dbc:	d3f8      	bcc.n	82db0 <DD_READ_SENSORS+0x1010>
		      ;
	        }
			uint16_t DAC2_SEN_RMS_CURRENT;
			
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_DAC2_SEN_RMS_CURRENT);
   82dbe:	4b15      	ldr	r3, [pc, #84]	; (82e14 <DD_READ_SENSORS+0x1074>)
   82dc0:	2230      	movs	r2, #48	; 0x30
   82dc2:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   82dc4:	4b13      	ldr	r3, [pc, #76]	; (82e14 <DD_READ_SENSORS+0x1074>)
   82dc6:	2200      	movs	r2, #0
   82dc8:	705a      	strb	r2, [r3, #1]
		   dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   82dca:	2203      	movs	r2, #3
   82dcc:	2102      	movs	r1, #2
   82dce:	4811      	ldr	r0, [pc, #68]	; (82e14 <DD_READ_SENSORS+0x1074>)
   82dd0:	4b11      	ldr	r3, [pc, #68]	; (82e18 <DD_READ_SENSORS+0x1078>)
   82dd2:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   82dd4:	4b0f      	ldr	r3, [pc, #60]	; (82e14 <DD_READ_SENSORS+0x1074>)
   82dd6:	781a      	ldrb	r2, [r3, #0]
   82dd8:	4b10      	ldr	r3, [pc, #64]	; (82e1c <DD_READ_SENSORS+0x107c>)
   82dda:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   82ddc:	4b0d      	ldr	r3, [pc, #52]	; (82e14 <DD_READ_SENSORS+0x1074>)
   82dde:	785a      	ldrb	r2, [r3, #1]
   82de0:	4b0e      	ldr	r3, [pc, #56]	; (82e1c <DD_READ_SENSORS+0x107c>)
   82de2:	701a      	strb	r2, [r3, #0]
           DAC2_SEN_RMS_CURRENT = spi_data.Twobyte;	
   82de4:	4b0d      	ldr	r3, [pc, #52]	; (82e1c <DD_READ_SENSORS+0x107c>)
   82de6:	881b      	ldrh	r3, [r3, #0]
   82de8:	817b      	strh	r3, [r7, #10]
		   *sensor_status = (DAC2_SEN_RMS_CURRENT*10000)/ CONDUCTIVITY_SENSOR_RMS_VOLTAGE;            
   82dea:	897b      	ldrh	r3, [r7, #10]
   82dec:	f242 7210 	movw	r2, #10000	; 0x2710
   82df0:	fb02 f203 	mul.w	r2, r2, r3
   82df4:	8bfb      	ldrh	r3, [r7, #30]
   82df6:	fb92 f3f3 	sdiv	r3, r2, r3
   82dfa:	b29a      	uxth	r2, r3
   82dfc:	683b      	ldr	r3, [r7, #0]
   82dfe:	801a      	strh	r2, [r3, #0]
            DD_SPI_PCS_DECODER_DEACTIVE();
   82e00:	4b07      	ldr	r3, [pc, #28]	; (82e20 <DD_READ_SENSORS+0x1080>)
   82e02:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();
   82e04:	4b07      	ldr	r3, [pc, #28]	; (82e24 <DD_READ_SENSORS+0x1084>)
   82e06:	4798      	blx	r3
		break;
   82e08:	e000      	b.n	82e0c <DD_READ_SENSORS+0x106c>
		
		case SV_FLOW_SENSOR_ID:		
		break;
				
		default:
		break;
   82e0a:	bf00      	nop
		
	}	
		
   82e0c:	4618      	mov	r0, r3
   82e0e:	3780      	adds	r7, #128	; 0x80
   82e10:	46bd      	mov	sp, r7
   82e12:	bd80      	pop	{r7, pc}
   82e14:	20070ae8 	.word	0x20070ae8
   82e18:	000817b5 	.word	0x000817b5
   82e1c:	20070ae4 	.word	0x20070ae4
   82e20:	00081bc5 	.word	0x00081bc5
   82e24:	00081be1 	.word	0x00081be1

00082e28 <DD_TS1_INIT>:
 */ 
    #include "DD_TS1.h"
	extern uint8_t command_data_array[20]; 
	
	
void DD_TS1_INIT() {		
   82e28:	b580      	push	{r7, lr}
   82e2a:	b082      	sub	sp, #8
   82e2c:	af00      	add	r7, sp, #0
 	  dd_spi_set_clock_polarity(0, SPI_CLK_POLARITY_1);
   82e2e:	2101      	movs	r1, #1
   82e30:	2000      	movs	r0, #0
   82e32:	4b13      	ldr	r3, [pc, #76]	; (82e80 <DD_TS1_INIT+0x58>)
   82e34:	4798      	blx	r3
 	  dd_spi_set_clock_phase(0, SPI_CLK_PHASE_0);
   82e36:	2100      	movs	r1, #0
   82e38:	2000      	movs	r0, #0
   82e3a:	4b12      	ldr	r3, [pc, #72]	; (82e84 <DD_TS1_INIT+0x5c>)
   82e3c:	4798      	blx	r3
	  
	  command_data_array[0] = MAX31865_WRITE_CONFIGURATION; //0b00000110;
   82e3e:	4b12      	ldr	r3, [pc, #72]	; (82e88 <DD_TS1_INIT+0x60>)
   82e40:	2280      	movs	r2, #128	; 0x80
   82e42:	701a      	strb	r2, [r3, #0]
	  command_data_array[1] = MAXIM31865_CONFIGURATION_VBIAS | MAXIM31865_CONFIGURATION_AUTO_CONVERTION | MAXIM31865_CONFIGURATION_FAULT_STATUS_CLEAR | MAXIM31865_CONFIGURATION_50HZ_FILTER ;
   82e44:	4b10      	ldr	r3, [pc, #64]	; (82e88 <DD_TS1_INIT+0x60>)
   82e46:	22c3      	movs	r2, #195	; 0xc3
   82e48:	705a      	strb	r2, [r3, #1]
     
	  DD_SPI_PCS_DECODER_ACTIVE();
   82e4a:	4b10      	ldr	r3, [pc, #64]	; (82e8c <DD_TS1_INIT+0x64>)
   82e4c:	4798      	blx	r3
	  DD_TS1_CHIP_SELECT();
   82e4e:	4b10      	ldr	r3, [pc, #64]	; (82e90 <DD_TS1_INIT+0x68>)
   82e50:	4798      	blx	r3
	  dd_spi_set_peripheral_chip_select_value(ISOLTR_1_CS_ID); //(ISOLTR_1_CS_ID);
   82e52:	2001      	movs	r0, #1
   82e54:	4b0f      	ldr	r3, [pc, #60]	; (82e94 <DD_TS1_INIT+0x6c>)
   82e56:	4798      	blx	r3
	  dd_spi_master_transfer(&command_data_array, 2,0 ); //ISOLTR_1_CS_ID
   82e58:	2200      	movs	r2, #0
   82e5a:	2102      	movs	r1, #2
   82e5c:	480a      	ldr	r0, [pc, #40]	; (82e88 <DD_TS1_INIT+0x60>)
   82e5e:	4b0e      	ldr	r3, [pc, #56]	; (82e98 <DD_TS1_INIT+0x70>)
   82e60:	4798      	blx	r3
	  
	  for(unsigned int count=0; count<10000000; count++ )   {
   82e62:	2300      	movs	r3, #0
   82e64:	607b      	str	r3, [r7, #4]
   82e66:	e002      	b.n	82e6e <DD_TS1_INIT+0x46>
   82e68:	687b      	ldr	r3, [r7, #4]
   82e6a:	3301      	adds	r3, #1
   82e6c:	607b      	str	r3, [r7, #4]
   82e6e:	687b      	ldr	r3, [r7, #4]
   82e70:	4a0a      	ldr	r2, [pc, #40]	; (82e9c <DD_TS1_INIT+0x74>)
   82e72:	4293      	cmp	r3, r2
   82e74:	d9f8      	bls.n	82e68 <DD_TS1_INIT+0x40>
		  ;
	  } 	  
}
   82e76:	bf00      	nop
   82e78:	3708      	adds	r7, #8
   82e7a:	46bd      	mov	sp, r7
   82e7c:	bd80      	pop	{r7, pc}
   82e7e:	bf00      	nop
   82e80:	00081605 	.word	0x00081605
   82e84:	00081659 	.word	0x00081659
   82e88:	20070ae8 	.word	0x20070ae8
   82e8c:	00081ba9 	.word	0x00081ba9
   82e90:	00081a81 	.word	0x00081a81
   82e94:	0008170d 	.word	0x0008170d
   82e98:	00081745 	.word	0x00081745
   82e9c:	0098967f 	.word	0x0098967f

00082ea0 <DD_TS2_INIT>:

 #include "DD_TS2.h"
 extern uint8_t command_data_array[20];
 
 
 void DD_TS2_INIT() {
   82ea0:	b580      	push	{r7, lr}
   82ea2:	b082      	sub	sp, #8
   82ea4:	af00      	add	r7, sp, #0
	 dd_spi_set_clock_polarity(0, SPI_CLK_POLARITY_1);
   82ea6:	2101      	movs	r1, #1
   82ea8:	2000      	movs	r0, #0
   82eaa:	4b13      	ldr	r3, [pc, #76]	; (82ef8 <DD_TS2_INIT+0x58>)
   82eac:	4798      	blx	r3
	 dd_spi_set_clock_phase(0, SPI_CLK_PHASE_0);
   82eae:	2100      	movs	r1, #0
   82eb0:	2000      	movs	r0, #0
   82eb2:	4b12      	ldr	r3, [pc, #72]	; (82efc <DD_TS2_INIT+0x5c>)
   82eb4:	4798      	blx	r3
	 
	 command_data_array[0] = MAX31865_WRITE_CONFIGURATION; //0b00000110;
   82eb6:	4b12      	ldr	r3, [pc, #72]	; (82f00 <DD_TS2_INIT+0x60>)
   82eb8:	2280      	movs	r2, #128	; 0x80
   82eba:	701a      	strb	r2, [r3, #0]
	 command_data_array[1] = MAXIM31865_CONFIGURATION_VBIAS | MAXIM31865_CONFIGURATION_AUTO_CONVERTION | MAXIM31865_CONFIGURATION_FAULT_STATUS_CLEAR | MAXIM31865_CONFIGURATION_50HZ_FILTER ;
   82ebc:	4b10      	ldr	r3, [pc, #64]	; (82f00 <DD_TS2_INIT+0x60>)
   82ebe:	22c3      	movs	r2, #195	; 0xc3
   82ec0:	705a      	strb	r2, [r3, #1]
	 
	 DD_SPI_PCS_DECODER_ACTIVE();
   82ec2:	4b10      	ldr	r3, [pc, #64]	; (82f04 <DD_TS2_INIT+0x64>)
   82ec4:	4798      	blx	r3
	 DD_TS2_CHIP_SELECT();
   82ec6:	4b10      	ldr	r3, [pc, #64]	; (82f08 <DD_TS2_INIT+0x68>)
   82ec8:	4798      	blx	r3
	 dd_spi_set_peripheral_chip_select_value(ISOLTR_1_CS_ID); //(ISOLTR_1_CS_ID);
   82eca:	2001      	movs	r0, #1
   82ecc:	4b0f      	ldr	r3, [pc, #60]	; (82f0c <DD_TS2_INIT+0x6c>)
   82ece:	4798      	blx	r3
	 dd_spi_master_transfer(&command_data_array, 2,0 ); //ISOLTR_1_CS_ID
   82ed0:	2200      	movs	r2, #0
   82ed2:	2102      	movs	r1, #2
   82ed4:	480a      	ldr	r0, [pc, #40]	; (82f00 <DD_TS2_INIT+0x60>)
   82ed6:	4b0e      	ldr	r3, [pc, #56]	; (82f10 <DD_TS2_INIT+0x70>)
   82ed8:	4798      	blx	r3
	 
	 for(unsigned int count=0; count<10000000; count++ )   {
   82eda:	2300      	movs	r3, #0
   82edc:	607b      	str	r3, [r7, #4]
   82ede:	e002      	b.n	82ee6 <DD_TS2_INIT+0x46>
   82ee0:	687b      	ldr	r3, [r7, #4]
   82ee2:	3301      	adds	r3, #1
   82ee4:	607b      	str	r3, [r7, #4]
   82ee6:	687b      	ldr	r3, [r7, #4]
   82ee8:	4a0a      	ldr	r2, [pc, #40]	; (82f14 <DD_TS2_INIT+0x74>)
   82eea:	4293      	cmp	r3, r2
   82eec:	d9f8      	bls.n	82ee0 <DD_TS2_INIT+0x40>
		 ;
	 }
	 
   82eee:	bf00      	nop
   82ef0:	3708      	adds	r7, #8
   82ef2:	46bd      	mov	sp, r7
   82ef4:	bd80      	pop	{r7, pc}
   82ef6:	bf00      	nop
   82ef8:	00081605 	.word	0x00081605
   82efc:	00081659 	.word	0x00081659
   82f00:	20070ae8 	.word	0x20070ae8
   82f04:	00081ba9 	.word	0x00081ba9
   82f08:	00081a99 	.word	0x00081a99
   82f0c:	0008170d 	.word	0x0008170d
   82f10:	00081745 	.word	0x00081745
   82f14:	0098967f 	.word	0x0098967f

00082f18 <DD_TS3_INIT>:

 #include "DD_TS3.h"
 extern uint8_t command_data_array[20];
 
 
 void DD_TS3_INIT() {
   82f18:	b580      	push	{r7, lr}
   82f1a:	b084      	sub	sp, #16
   82f1c:	af00      	add	r7, sp, #0
	 dd_spi_set_clock_polarity(1, SPI_CLK_POLARITY_1);
   82f1e:	2101      	movs	r1, #1
   82f20:	2001      	movs	r0, #1
   82f22:	4b2e      	ldr	r3, [pc, #184]	; (82fdc <DD_TS3_INIT+0xc4>)
   82f24:	4798      	blx	r3
	 dd_spi_set_clock_phase(1, SPI_CLK_PHASE_0);
   82f26:	2100      	movs	r1, #0
   82f28:	2001      	movs	r0, #1
   82f2a:	4b2d      	ldr	r3, [pc, #180]	; (82fe0 <DD_TS3_INIT+0xc8>)
   82f2c:	4798      	blx	r3
	 
	 command_data_array[0] = MAX31865_WRITE_CONFIGURATION; //0b00000110;
   82f2e:	4b2d      	ldr	r3, [pc, #180]	; (82fe4 <DD_TS3_INIT+0xcc>)
   82f30:	2280      	movs	r2, #128	; 0x80
   82f32:	701a      	strb	r2, [r3, #0]
	 command_data_array[1] = MAXIM31865_CONFIGURATION_VBIAS | MAXIM31865_CONFIGURATION_AUTO_CONVERTION | MAXIM31865_CONFIGURATION_FAULT_STATUS_CLEAR | MAXIM31865_CONFIGURATION_50HZ_FILTER ;
   82f34:	4b2b      	ldr	r3, [pc, #172]	; (82fe4 <DD_TS3_INIT+0xcc>)
   82f36:	22c3      	movs	r2, #195	; 0xc3
   82f38:	705a      	strb	r2, [r3, #1]
	 
	 DD_SPI_PCS_DECODER_ACTIVE();
   82f3a:	4b2b      	ldr	r3, [pc, #172]	; (82fe8 <DD_TS3_INIT+0xd0>)
   82f3c:	4798      	blx	r3
	 DD_TS3_CHIP_SELECT();
   82f3e:	4b2b      	ldr	r3, [pc, #172]	; (82fec <DD_TS3_INIT+0xd4>)
   82f40:	4798      	blx	r3
	 dd_spi_set_peripheral_chip_select_value(ISOLTR_2_CS_ID); 
   82f42:	2002      	movs	r0, #2
   82f44:	4b2a      	ldr	r3, [pc, #168]	; (82ff0 <DD_TS3_INIT+0xd8>)
   82f46:	4798      	blx	r3
	 dd_spi_master_transfer(&command_data_array, 2,0 ); 
   82f48:	2200      	movs	r2, #0
   82f4a:	2102      	movs	r1, #2
   82f4c:	4825      	ldr	r0, [pc, #148]	; (82fe4 <DD_TS3_INIT+0xcc>)
   82f4e:	4b29      	ldr	r3, [pc, #164]	; (82ff4 <DD_TS3_INIT+0xdc>)
   82f50:	4798      	blx	r3
	 
	 for(unsigned int count=0; count<10000000; count++ )   {
   82f52:	2300      	movs	r3, #0
   82f54:	60fb      	str	r3, [r7, #12]
   82f56:	e002      	b.n	82f5e <DD_TS3_INIT+0x46>
   82f58:	68fb      	ldr	r3, [r7, #12]
   82f5a:	3301      	adds	r3, #1
   82f5c:	60fb      	str	r3, [r7, #12]
   82f5e:	68fb      	ldr	r3, [r7, #12]
   82f60:	4a25      	ldr	r2, [pc, #148]	; (82ff8 <DD_TS3_INIT+0xe0>)
   82f62:	4293      	cmp	r3, r2
   82f64:	d9f8      	bls.n	82f58 <DD_TS3_INIT+0x40>
		 ;
	 }
	 
	 dd_spi_set_clock_polarity(1, SPI_CLK_POLARITY_0);
   82f66:	2100      	movs	r1, #0
   82f68:	2001      	movs	r0, #1
   82f6a:	4b1c      	ldr	r3, [pc, #112]	; (82fdc <DD_TS3_INIT+0xc4>)
   82f6c:	4798      	blx	r3
	 dd_spi_set_clock_phase(1, SPI_CLK_PHASE_0);
   82f6e:	2100      	movs	r1, #0
   82f70:	2001      	movs	r0, #1
   82f72:	4b1b      	ldr	r3, [pc, #108]	; (82fe0 <DD_TS3_INIT+0xc8>)
   82f74:	4798      	blx	r3
	  for(unsigned int count=0; count<10000000; count++ )   {
   82f76:	2300      	movs	r3, #0
   82f78:	60bb      	str	r3, [r7, #8]
   82f7a:	e002      	b.n	82f82 <DD_TS3_INIT+0x6a>
   82f7c:	68bb      	ldr	r3, [r7, #8]
   82f7e:	3301      	adds	r3, #1
   82f80:	60bb      	str	r3, [r7, #8]
   82f82:	68bb      	ldr	r3, [r7, #8]
   82f84:	4a1c      	ldr	r2, [pc, #112]	; (82ff8 <DD_TS3_INIT+0xe0>)
   82f86:	4293      	cmp	r3, r2
   82f88:	d9f8      	bls.n	82f7c <DD_TS3_INIT+0x64>
		 ;
	 }
	 
	 command_data_array[0] = 0; //MAXIM_IC_TO_PT100 ;	 
   82f8a:	4b16      	ldr	r3, [pc, #88]	; (82fe4 <DD_TS3_INIT+0xcc>)
   82f8c:	2200      	movs	r2, #0
   82f8e:	701a      	strb	r2, [r3, #0]
	 dd_spi_set_peripheral_chip_select_value(ISOLTR_2_CS_ID);	 	 
   82f90:	2002      	movs	r0, #2
   82f92:	4b17      	ldr	r3, [pc, #92]	; (82ff0 <DD_TS3_INIT+0xd8>)
   82f94:	4798      	blx	r3
	 DD_TS_MUX_CHIP_SELECT();
   82f96:	4b19      	ldr	r3, [pc, #100]	; (82ffc <DD_TS3_INIT+0xe4>)
   82f98:	4798      	blx	r3
	 dd_spi_master_transfer(&command_data_array, 1, ISOLTR_2_CS_ID);
   82f9a:	2202      	movs	r2, #2
   82f9c:	2101      	movs	r1, #1
   82f9e:	4811      	ldr	r0, [pc, #68]	; (82fe4 <DD_TS3_INIT+0xcc>)
   82fa0:	4b14      	ldr	r3, [pc, #80]	; (82ff4 <DD_TS3_INIT+0xdc>)
   82fa2:	4798      	blx	r3
	 
	 for(unsigned int count=0; count<10000000; count++ )   {
   82fa4:	2300      	movs	r3, #0
   82fa6:	607b      	str	r3, [r7, #4]
   82fa8:	e002      	b.n	82fb0 <DD_TS3_INIT+0x98>
   82faa:	687b      	ldr	r3, [r7, #4]
   82fac:	3301      	adds	r3, #1
   82fae:	607b      	str	r3, [r7, #4]
   82fb0:	687b      	ldr	r3, [r7, #4]
   82fb2:	4a11      	ldr	r2, [pc, #68]	; (82ff8 <DD_TS3_INIT+0xe0>)
   82fb4:	4293      	cmp	r3, r2
   82fb6:	d9f8      	bls.n	82faa <DD_TS3_INIT+0x92>
		 ;
	 }
	 
	 command_data_array[0] = 0X00; //MAXIM_IC_TO_PT100 ;	 
   82fb8:	4b0a      	ldr	r3, [pc, #40]	; (82fe4 <DD_TS3_INIT+0xcc>)
   82fba:	2200      	movs	r2, #0
   82fbc:	701a      	strb	r2, [r3, #0]
	 dd_spi_set_peripheral_chip_select_value(ISOLTR_2_CS_ID);	 	 
   82fbe:	2002      	movs	r0, #2
   82fc0:	4b0b      	ldr	r3, [pc, #44]	; (82ff0 <DD_TS3_INIT+0xd8>)
   82fc2:	4798      	blx	r3
	 DD_TS_MUX_CHIP_SELECT();
   82fc4:	4b0d      	ldr	r3, [pc, #52]	; (82ffc <DD_TS3_INIT+0xe4>)
   82fc6:	4798      	blx	r3
	 dd_spi_master_transfer(&command_data_array, 1, ISOLTR_2_CS_ID);
   82fc8:	2202      	movs	r2, #2
   82fca:	2101      	movs	r1, #1
   82fcc:	4805      	ldr	r0, [pc, #20]	; (82fe4 <DD_TS3_INIT+0xcc>)
   82fce:	4b09      	ldr	r3, [pc, #36]	; (82ff4 <DD_TS3_INIT+0xdc>)
   82fd0:	4798      	blx	r3
   82fd2:	bf00      	nop
   82fd4:	3710      	adds	r7, #16
   82fd6:	46bd      	mov	sp, r7
   82fd8:	bd80      	pop	{r7, pc}
   82fda:	bf00      	nop
   82fdc:	00081605 	.word	0x00081605
   82fe0:	00081659 	.word	0x00081659
   82fe4:	20070ae8 	.word	0x20070ae8
   82fe8:	00081ba9 	.word	0x00081ba9
   82fec:	00081b01 	.word	0x00081b01
   82ff0:	0008170d 	.word	0x0008170d
   82ff4:	00081745 	.word	0x00081745
   82ff8:	0098967f 	.word	0x0098967f
   82ffc:	00081b1d 	.word	0x00081b1d

00083000 <SV_SEND_CAN_MAILBOX>:
extern volatile uint8_t group_id_reg_id6;
#define DONE 0
#define CAN_MID_MIDvA_dd(value) ((0x1FFC0000 & ((value) << 18)))
uint8_t const No_of_group_id = 6;

static void SV_SEND_CAN_MAILBOX(SV_CAN_MAILBOX_SENSOR_DATA_REG_TYPE*  SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE)   {
   83000:	b580      	push	{r7, lr}
   83002:	b084      	sub	sp, #16
   83004:	af00      	add	r7, sp, #0
   83006:	6078      	str	r0, [r7, #4]
	sv_data_size_type  sv_data_size;
	sv_data_size.bytearray[0] =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->CPU_SENDER_type_reg;
   83008:	687b      	ldr	r3, [r7, #4]
   8300a:	781b      	ldrb	r3, [r3, #0]
   8300c:	723b      	strb	r3, [r7, #8]
	sv_data_size.bytearray[1] =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_GROUP_ID_type_reg;
   8300e:	687b      	ldr	r3, [r7, #4]
   83010:	785b      	ldrb	r3, [r3, #1]
   83012:	727b      	strb	r3, [r7, #9]
	
	sv_data_size.Twobyte[1]   =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_1;	
   83014:	687b      	ldr	r3, [r7, #4]
   83016:	885b      	ldrh	r3, [r3, #2]
   83018:	817b      	strh	r3, [r7, #10]
	sv_data_size.Twobyte[2]   =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_2;
   8301a:	687b      	ldr	r3, [r7, #4]
   8301c:	889b      	ldrh	r3, [r3, #4]
   8301e:	81bb      	strh	r3, [r7, #12]
	sv_data_size.Twobyte[3]   =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_3;
   83020:	687b      	ldr	r3, [r7, #4]
   83022:	88db      	ldrh	r3, [r3, #6]
   83024:	81fb      	strh	r3, [r7, #14]
	
	can0_mailbox.ul_datal     =sv_data_size.fourbyte[0];
   83026:	68bb      	ldr	r3, [r7, #8]
   83028:	4a14      	ldr	r2, [pc, #80]	; (8307c <SV_SEND_CAN_MAILBOX+0x7c>)
   8302a:	6193      	str	r3, [r2, #24]
	can0_mailbox.ul_datah     =sv_data_size.fourbyte[1];
   8302c:	68fb      	ldr	r3, [r7, #12]
   8302e:	4a13      	ldr	r2, [pc, #76]	; (8307c <SV_SEND_CAN_MAILBOX+0x7c>)
   83030:	61d3      	str	r3, [r2, #28]
	can0_mailbox.uc_length = 8;
   83032:	4b12      	ldr	r3, [pc, #72]	; (8307c <SV_SEND_CAN_MAILBOX+0x7c>)
   83034:	2208      	movs	r2, #8
   83036:	719a      	strb	r2, [r3, #6]
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   83038:	4b10      	ldr	r3, [pc, #64]	; (8307c <SV_SEND_CAN_MAILBOX+0x7c>)
   8303a:	2200      	movs	r2, #0
   8303c:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   8303e:	4b0f      	ldr	r3, [pc, #60]	; (8307c <SV_SEND_CAN_MAILBOX+0x7c>)
   83040:	2203      	movs	r2, #3
   83042:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   83044:	4b0d      	ldr	r3, [pc, #52]	; (8307c <SV_SEND_CAN_MAILBOX+0x7c>)
   83046:	2201      	movs	r2, #1
   83048:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8304a:	4b0c      	ldr	r3, [pc, #48]	; (8307c <SV_SEND_CAN_MAILBOX+0x7c>)
   8304c:	2200      	movs	r2, #0
   8304e:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = CAN_MFID_MFID_VA_dd(CAN_MASK);
   83050:	4b0a      	ldr	r3, [pc, #40]	; (8307c <SV_SEND_CAN_MAILBOX+0x7c>)
   83052:	4a0b      	ldr	r2, [pc, #44]	; (83080 <SV_SEND_CAN_MAILBOX+0x80>)
   83054:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id);
   83056:	4b09      	ldr	r3, [pc, #36]	; (8307c <SV_SEND_CAN_MAILBOX+0x7c>)
   83058:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   8305c:	611a      	str	r2, [r3, #16]
//	dd_can_mailbox_write(&can0_mailbox);	
	while (CAN_MAILBOX_NOT_READY == dd_can_mailbox_write(&can0_mailbox));	
   8305e:	bf00      	nop
   83060:	4806      	ldr	r0, [pc, #24]	; (8307c <SV_SEND_CAN_MAILBOX+0x7c>)
   83062:	4b08      	ldr	r3, [pc, #32]	; (83084 <SV_SEND_CAN_MAILBOX+0x84>)
   83064:	4798      	blx	r3
   83066:	4603      	mov	r3, r0
   83068:	2b01      	cmp	r3, #1
   8306a:	d0f9      	beq.n	83060 <SV_SEND_CAN_MAILBOX+0x60>
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);	
   8306c:	2001      	movs	r0, #1
   8306e:	4b06      	ldr	r3, [pc, #24]	; (83088 <SV_SEND_CAN_MAILBOX+0x88>)
   83070:	4798      	blx	r3
}
   83072:	bf00      	nop
   83074:	3710      	adds	r7, #16
   83076:	46bd      	mov	sp, r7
   83078:	bd80      	pop	{r7, pc}
   8307a:	bf00      	nop
   8307c:	20070ab8 	.word	0x20070ab8
   83080:	1ffc0000 	.word	0x1ffc0000
   83084:	00080419 	.word	0x00080419
   83088:	000804d5 	.word	0x000804d5

0008308c <SV_put_sensor_data1>:
	 
	// #endif
}


bool SV_put_sensor_data1(SV_Sensor_status_type* sensor_struct)   {
   8308c:	b580      	push	{r7, lr}
   8308e:	b08c      	sub	sp, #48	; 0x30
   83090:	af00      	add	r7, sp, #0
   83092:	6078      	str	r0, [r7, #4]
	
	SV_CAN_MAILBOX_SENSOR_DATA_REG_TYPE  SV_CAN_MAILBOX_SENSOR_DATA_REG;
	//	#if 0
	if(group_id_reg_id0 == 1 )   
   83094:	4b95      	ldr	r3, [pc, #596]	; (832ec <SV_put_sensor_data1+0x260>)
   83096:	781b      	ldrb	r3, [r3, #0]
   83098:	b2db      	uxtb	r3, r3
   8309a:	2b01      	cmp	r3, #1
   8309c:	d16e      	bne.n	8317c <SV_put_sensor_data1+0xf0>
	//	
	{
		SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   8309e:	2303      	movs	r3, #3
   830a0:	733b      	strb	r3, [r7, #12]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_1 ;
   830a2:	2301      	movs	r3, #1
   830a4:	737b      	strb	r3, [r7, #13]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->ps1status;
   830a6:	687b      	ldr	r3, [r7, #4]
   830a8:	881b      	ldrh	r3, [r3, #0]
   830aa:	81fb      	strh	r3, [r7, #14]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->ps2status;
   830ac:	687b      	ldr	r3, [r7, #4]
   830ae:	885b      	ldrh	r3, [r3, #2]
   830b0:	823b      	strh	r3, [r7, #16]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->ps3status;
   830b2:	687b      	ldr	r3, [r7, #4]
   830b4:	889b      	ldrh	r3, [r3, #4]
   830b6:	827b      	strh	r3, [r7, #18]
		SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   830b8:	f107 030c 	add.w	r3, r7, #12
   830bc:	4618      	mov	r0, r3
   830be:	4b8c      	ldr	r3, [pc, #560]	; (832f0 <SV_put_sensor_data1+0x264>)
   830c0:	4798      	blx	r3
		
		SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   830c2:	2303      	movs	r3, #3
   830c4:	733b      	strb	r3, [r7, #12]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_2 ;
   830c6:	2302      	movs	r3, #2
   830c8:	737b      	strb	r3, [r7, #13]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->thermocouple_status ;//100; //sensor_struct->thermocouple_status;
   830ca:	687b      	ldr	r3, [r7, #4]
   830cc:	88db      	ldrh	r3, [r3, #6]
   830ce:	81fb      	strh	r3, [r7, #14]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->Temp1status ;
   830d0:	687b      	ldr	r3, [r7, #4]
   830d2:	891b      	ldrh	r3, [r3, #8]
   830d4:	823b      	strh	r3, [r7, #16]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->Temp2status;
   830d6:	687b      	ldr	r3, [r7, #4]
   830d8:	895b      	ldrh	r3, [r3, #10]
   830da:	827b      	strh	r3, [r7, #18]
		SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   830dc:	f107 030c 	add.w	r3, r7, #12
   830e0:	4618      	mov	r0, r3
   830e2:	4b83      	ldr	r3, [pc, #524]	; (832f0 <SV_put_sensor_data1+0x264>)
   830e4:	4798      	blx	r3
		
		
		SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   830e6:	2303      	movs	r3, #3
   830e8:	733b      	strb	r3, [r7, #12]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_3 ;
   830ea:	2303      	movs	r3, #3
   830ec:	737b      	strb	r3, [r7, #13]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   =sensor_struct->CS1_Tempstatus;//sensor_struct->Temp3status;
   830ee:	687b      	ldr	r3, [r7, #4]
   830f0:	899b      	ldrh	r3, [r3, #12]
   830f2:	81fb      	strh	r3, [r7, #14]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  =sensor_struct->CS2_Tempstatus;
   830f4:	687b      	ldr	r3, [r7, #4]
   830f6:	89db      	ldrh	r3, [r3, #14]
   830f8:	823b      	strh	r3, [r7, #16]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->Temp3status;
   830fa:	687b      	ldr	r3, [r7, #4]
   830fc:	8a1b      	ldrh	r3, [r3, #16]
   830fe:	827b      	strh	r3, [r7, #18]
		SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   83100:	f107 030c 	add.w	r3, r7, #12
   83104:	4618      	mov	r0, r3
   83106:	4b7a      	ldr	r3, [pc, #488]	; (832f0 <SV_put_sensor_data1+0x264>)
   83108:	4798      	blx	r3
		
		SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   8310a:	2303      	movs	r3, #3
   8310c:	733b      	strb	r3, [r7, #12]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_4;
   8310e:	2304      	movs	r3, #4
   83110:	737b      	strb	r3, [r7, #13]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->CS3_Tempstatus;
   83112:	687b      	ldr	r3, [r7, #4]
   83114:	8a5b      	ldrh	r3, [r3, #18]
   83116:	81fb      	strh	r3, [r7, #14]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->CS1status ;
   83118:	687b      	ldr	r3, [r7, #4]
   8311a:	8a9b      	ldrh	r3, [r3, #20]
   8311c:	823b      	strh	r3, [r7, #16]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->CS2status;
   8311e:	687b      	ldr	r3, [r7, #4]
   83120:	8adb      	ldrh	r3, [r3, #22]
   83122:	827b      	strh	r3, [r7, #18]
		SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   83124:	f107 030c 	add.w	r3, r7, #12
   83128:	4618      	mov	r0, r3
   8312a:	4b71      	ldr	r3, [pc, #452]	; (832f0 <SV_put_sensor_data1+0x264>)
   8312c:	4798      	blx	r3
		
		SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   8312e:	2303      	movs	r3, #3
   83130:	733b      	strb	r3, [r7, #12]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_5 ;
   83132:	2305      	movs	r3, #5
   83134:	737b      	strb	r3, [r7, #13]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->CS3status;
   83136:	687b      	ldr	r3, [r7, #4]
   83138:	8b1b      	ldrh	r3, [r3, #24]
   8313a:	81fb      	strh	r3, [r7, #14]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->DAC1status ;
   8313c:	687b      	ldr	r3, [r7, #4]
   8313e:	8b5b      	ldrh	r3, [r3, #26]
   83140:	823b      	strh	r3, [r7, #16]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->DAAstatus;
   83142:	687b      	ldr	r3, [r7, #4]
   83144:	8b9b      	ldrh	r3, [r3, #28]
   83146:	827b      	strh	r3, [r7, #18]
		SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   83148:	f107 030c 	add.w	r3, r7, #12
   8314c:	4618      	mov	r0, r3
   8314e:	4b68      	ldr	r3, [pc, #416]	; (832f0 <SV_put_sensor_data1+0x264>)
   83150:	4798      	blx	r3
		
		SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   83152:	2303      	movs	r3, #3
   83154:	733b      	strb	r3, [r7, #12]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_6 ;
   83156:	2306      	movs	r3, #6
   83158:	737b      	strb	r3, [r7, #13]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->DABstatus;
   8315a:	687b      	ldr	r3, [r7, #4]
   8315c:	8bdb      	ldrh	r3, [r3, #30]
   8315e:	81fb      	strh	r3, [r7, #14]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->DAC2status ;
   83160:	687b      	ldr	r3, [r7, #4]
   83162:	8c1b      	ldrh	r3, [r3, #32]
   83164:	823b      	strh	r3, [r7, #16]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->flow_sensor_status;
   83166:	687b      	ldr	r3, [r7, #4]
   83168:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   8316a:	827b      	strh	r3, [r7, #18]
		SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   8316c:	f107 030c 	add.w	r3, r7, #12
   83170:	4618      	mov	r0, r3
   83172:	4b5f      	ldr	r3, [pc, #380]	; (832f0 <SV_put_sensor_data1+0x264>)
   83174:	4798      	blx	r3
		group_id_reg_id0 = 0;
   83176:	4b5d      	ldr	r3, [pc, #372]	; (832ec <SV_put_sensor_data1+0x260>)
   83178:	2200      	movs	r2, #0
   8317a:	701a      	strb	r2, [r3, #0]
	}
						   for(unsigned int count=0; count<500000; count++ )   {
   8317c:	2300      	movs	r3, #0
   8317e:	62fb      	str	r3, [r7, #44]	; 0x2c
   83180:	e002      	b.n	83188 <SV_put_sensor_data1+0xfc>
   83182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83184:	3301      	adds	r3, #1
   83186:	62fb      	str	r3, [r7, #44]	; 0x2c
   83188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8318a:	4a5a      	ldr	r2, [pc, #360]	; (832f4 <SV_put_sensor_data1+0x268>)
   8318c:	4293      	cmp	r3, r2
   8318e:	d9f8      	bls.n	83182 <SV_put_sensor_data1+0xf6>
		                ;
	                     }
		
		if(group_id_reg_id1 == 1 ) 
   83190:	4b59      	ldr	r3, [pc, #356]	; (832f8 <SV_put_sensor_data1+0x26c>)
   83192:	781b      	ldrb	r3, [r3, #0]
   83194:	b2db      	uxtb	r3, r3
   83196:	2b01      	cmp	r3, #1
   83198:	d114      	bne.n	831c4 <SV_put_sensor_data1+0x138>
		{
			
		
		SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   8319a:	2303      	movs	r3, #3
   8319c:	733b      	strb	r3, [r7, #12]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_1 ;
   8319e:	2301      	movs	r3, #1
   831a0:	737b      	strb	r3, [r7, #13]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->ps1status;
   831a2:	687b      	ldr	r3, [r7, #4]
   831a4:	881b      	ldrh	r3, [r3, #0]
   831a6:	81fb      	strh	r3, [r7, #14]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->ps2status;
   831a8:	687b      	ldr	r3, [r7, #4]
   831aa:	885b      	ldrh	r3, [r3, #2]
   831ac:	823b      	strh	r3, [r7, #16]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->ps3status;
   831ae:	687b      	ldr	r3, [r7, #4]
   831b0:	889b      	ldrh	r3, [r3, #4]
   831b2:	827b      	strh	r3, [r7, #18]
		SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   831b4:	f107 030c 	add.w	r3, r7, #12
   831b8:	4618      	mov	r0, r3
   831ba:	4b4d      	ldr	r3, [pc, #308]	; (832f0 <SV_put_sensor_data1+0x264>)
   831bc:	4798      	blx	r3
		group_id_reg_id1 = 0;
   831be:	4b4e      	ldr	r3, [pc, #312]	; (832f8 <SV_put_sensor_data1+0x26c>)
   831c0:	2200      	movs	r2, #0
   831c2:	701a      	strb	r2, [r3, #0]
		}
							   for(unsigned int count=0; count<500000; count++ )   {
   831c4:	2300      	movs	r3, #0
   831c6:	62bb      	str	r3, [r7, #40]	; 0x28
   831c8:	e002      	b.n	831d0 <SV_put_sensor_data1+0x144>
   831ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   831cc:	3301      	adds	r3, #1
   831ce:	62bb      	str	r3, [r7, #40]	; 0x28
   831d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   831d2:	4a48      	ldr	r2, [pc, #288]	; (832f4 <SV_put_sensor_data1+0x268>)
   831d4:	4293      	cmp	r3, r2
   831d6:	d9f8      	bls.n	831ca <SV_put_sensor_data1+0x13e>
		                ;
	                     }
		
		if(group_id_reg_id2 == 1 )
   831d8:	4b48      	ldr	r3, [pc, #288]	; (832fc <SV_put_sensor_data1+0x270>)
   831da:	781b      	ldrb	r3, [r3, #0]
   831dc:	b2db      	uxtb	r3, r3
   831de:	2b01      	cmp	r3, #1
   831e0:	d114      	bne.n	8320c <SV_put_sensor_data1+0x180>
		{
		SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   831e2:	2303      	movs	r3, #3
   831e4:	733b      	strb	r3, [r7, #12]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_2 ;
   831e6:	2302      	movs	r3, #2
   831e8:	737b      	strb	r3, [r7, #13]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->thermocouple_status ;//100; //sensor_struct->thermocouple_status;
   831ea:	687b      	ldr	r3, [r7, #4]
   831ec:	88db      	ldrh	r3, [r3, #6]
   831ee:	81fb      	strh	r3, [r7, #14]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->Temp1status ;
   831f0:	687b      	ldr	r3, [r7, #4]
   831f2:	891b      	ldrh	r3, [r3, #8]
   831f4:	823b      	strh	r3, [r7, #16]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->Temp2status;
   831f6:	687b      	ldr	r3, [r7, #4]
   831f8:	895b      	ldrh	r3, [r3, #10]
   831fa:	827b      	strh	r3, [r7, #18]
		SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   831fc:	f107 030c 	add.w	r3, r7, #12
   83200:	4618      	mov	r0, r3
   83202:	4b3b      	ldr	r3, [pc, #236]	; (832f0 <SV_put_sensor_data1+0x264>)
   83204:	4798      	blx	r3
		group_id_reg_id2 = 0;
   83206:	4b3d      	ldr	r3, [pc, #244]	; (832fc <SV_put_sensor_data1+0x270>)
   83208:	2200      	movs	r2, #0
   8320a:	701a      	strb	r2, [r3, #0]
		}
							   for(unsigned int count=0; count<500000; count++ )   {
   8320c:	2300      	movs	r3, #0
   8320e:	627b      	str	r3, [r7, #36]	; 0x24
   83210:	e002      	b.n	83218 <SV_put_sensor_data1+0x18c>
   83212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83214:	3301      	adds	r3, #1
   83216:	627b      	str	r3, [r7, #36]	; 0x24
   83218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8321a:	4a36      	ldr	r2, [pc, #216]	; (832f4 <SV_put_sensor_data1+0x268>)
   8321c:	4293      	cmp	r3, r2
   8321e:	d9f8      	bls.n	83212 <SV_put_sensor_data1+0x186>
		                ;
	                     }
		
		if(group_id_reg_id3 == 1 )
   83220:	4b37      	ldr	r3, [pc, #220]	; (83300 <SV_put_sensor_data1+0x274>)
   83222:	781b      	ldrb	r3, [r3, #0]
   83224:	b2db      	uxtb	r3, r3
   83226:	2b01      	cmp	r3, #1
   83228:	d114      	bne.n	83254 <SV_put_sensor_data1+0x1c8>
		{
		SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   8322a:	2303      	movs	r3, #3
   8322c:	733b      	strb	r3, [r7, #12]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_3 ;
   8322e:	2303      	movs	r3, #3
   83230:	737b      	strb	r3, [r7, #13]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   =sensor_struct->CS1_Tempstatus;//sensor_struct->Temp3status;
   83232:	687b      	ldr	r3, [r7, #4]
   83234:	899b      	ldrh	r3, [r3, #12]
   83236:	81fb      	strh	r3, [r7, #14]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  =sensor_struct->CS2_Tempstatus;
   83238:	687b      	ldr	r3, [r7, #4]
   8323a:	89db      	ldrh	r3, [r3, #14]
   8323c:	823b      	strh	r3, [r7, #16]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->Temp3status;
   8323e:	687b      	ldr	r3, [r7, #4]
   83240:	8a1b      	ldrh	r3, [r3, #16]
   83242:	827b      	strh	r3, [r7, #18]
		SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   83244:	f107 030c 	add.w	r3, r7, #12
   83248:	4618      	mov	r0, r3
   8324a:	4b29      	ldr	r3, [pc, #164]	; (832f0 <SV_put_sensor_data1+0x264>)
   8324c:	4798      	blx	r3
		group_id_reg_id3 = 0;
   8324e:	4b2c      	ldr	r3, [pc, #176]	; (83300 <SV_put_sensor_data1+0x274>)
   83250:	2200      	movs	r2, #0
   83252:	701a      	strb	r2, [r3, #0]
		}
		
							   for(unsigned int count=0; count<500000; count++ )   {
   83254:	2300      	movs	r3, #0
   83256:	623b      	str	r3, [r7, #32]
   83258:	e002      	b.n	83260 <SV_put_sensor_data1+0x1d4>
   8325a:	6a3b      	ldr	r3, [r7, #32]
   8325c:	3301      	adds	r3, #1
   8325e:	623b      	str	r3, [r7, #32]
   83260:	6a3b      	ldr	r3, [r7, #32]
   83262:	4a24      	ldr	r2, [pc, #144]	; (832f4 <SV_put_sensor_data1+0x268>)
   83264:	4293      	cmp	r3, r2
   83266:	d9f8      	bls.n	8325a <SV_put_sensor_data1+0x1ce>
		                ;
	                     }
		if(group_id_reg_id4 == 1 )
   83268:	4b26      	ldr	r3, [pc, #152]	; (83304 <SV_put_sensor_data1+0x278>)
   8326a:	781b      	ldrb	r3, [r3, #0]
   8326c:	b2db      	uxtb	r3, r3
   8326e:	2b01      	cmp	r3, #1
   83270:	d114      	bne.n	8329c <SV_put_sensor_data1+0x210>
		{
		
		SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   83272:	2303      	movs	r3, #3
   83274:	733b      	strb	r3, [r7, #12]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_4 ;
   83276:	2304      	movs	r3, #4
   83278:	737b      	strb	r3, [r7, #13]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->CS3_Tempstatus;
   8327a:	687b      	ldr	r3, [r7, #4]
   8327c:	8a5b      	ldrh	r3, [r3, #18]
   8327e:	81fb      	strh	r3, [r7, #14]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->CS1status ;
   83280:	687b      	ldr	r3, [r7, #4]
   83282:	8a9b      	ldrh	r3, [r3, #20]
   83284:	823b      	strh	r3, [r7, #16]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->CS2status;
   83286:	687b      	ldr	r3, [r7, #4]
   83288:	8adb      	ldrh	r3, [r3, #22]
   8328a:	827b      	strh	r3, [r7, #18]
		SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   8328c:	f107 030c 	add.w	r3, r7, #12
   83290:	4618      	mov	r0, r3
   83292:	4b17      	ldr	r3, [pc, #92]	; (832f0 <SV_put_sensor_data1+0x264>)
   83294:	4798      	blx	r3
		group_id_reg_id4 = 0;
   83296:	4b1b      	ldr	r3, [pc, #108]	; (83304 <SV_put_sensor_data1+0x278>)
   83298:	2200      	movs	r2, #0
   8329a:	701a      	strb	r2, [r3, #0]
		}					   for(unsigned int count=0; count<500000; count++ )   {
   8329c:	2300      	movs	r3, #0
   8329e:	61fb      	str	r3, [r7, #28]
   832a0:	e002      	b.n	832a8 <SV_put_sensor_data1+0x21c>
   832a2:	69fb      	ldr	r3, [r7, #28]
   832a4:	3301      	adds	r3, #1
   832a6:	61fb      	str	r3, [r7, #28]
   832a8:	69fb      	ldr	r3, [r7, #28]
   832aa:	4a12      	ldr	r2, [pc, #72]	; (832f4 <SV_put_sensor_data1+0x268>)
   832ac:	4293      	cmp	r3, r2
   832ae:	d9f8      	bls.n	832a2 <SV_put_sensor_data1+0x216>
		                ;
	                     }
		if(group_id_reg_id5 == 1 )
   832b0:	4b15      	ldr	r3, [pc, #84]	; (83308 <SV_put_sensor_data1+0x27c>)
   832b2:	781b      	ldrb	r3, [r3, #0]
   832b4:	b2db      	uxtb	r3, r3
   832b6:	2b01      	cmp	r3, #1
   832b8:	d114      	bne.n	832e4 <SV_put_sensor_data1+0x258>
		{
		SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   832ba:	2303      	movs	r3, #3
   832bc:	733b      	strb	r3, [r7, #12]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_5 ;
   832be:	2305      	movs	r3, #5
   832c0:	737b      	strb	r3, [r7, #13]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->CS3status;
   832c2:	687b      	ldr	r3, [r7, #4]
   832c4:	8b1b      	ldrh	r3, [r3, #24]
   832c6:	81fb      	strh	r3, [r7, #14]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->DAC1status ;
   832c8:	687b      	ldr	r3, [r7, #4]
   832ca:	8b5b      	ldrh	r3, [r3, #26]
   832cc:	823b      	strh	r3, [r7, #16]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->DAAstatus;
   832ce:	687b      	ldr	r3, [r7, #4]
   832d0:	8b9b      	ldrh	r3, [r3, #28]
   832d2:	827b      	strh	r3, [r7, #18]
		SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   832d4:	f107 030c 	add.w	r3, r7, #12
   832d8:	4618      	mov	r0, r3
   832da:	4b05      	ldr	r3, [pc, #20]	; (832f0 <SV_put_sensor_data1+0x264>)
   832dc:	4798      	blx	r3
		group_id_reg_id5 = 0;
   832de:	4b0a      	ldr	r3, [pc, #40]	; (83308 <SV_put_sensor_data1+0x27c>)
   832e0:	2200      	movs	r2, #0
   832e2:	701a      	strb	r2, [r3, #0]
		}
							   for(unsigned int count=0; count<500000; count++ )   {
   832e4:	2300      	movs	r3, #0
   832e6:	61bb      	str	r3, [r7, #24]
   832e8:	e013      	b.n	83312 <SV_put_sensor_data1+0x286>
   832ea:	bf00      	nop
   832ec:	2007018c 	.word	0x2007018c
   832f0:	00083001 	.word	0x00083001
   832f4:	0007a11f 	.word	0x0007a11f
   832f8:	2007018d 	.word	0x2007018d
   832fc:	2007018e 	.word	0x2007018e
   83300:	2007018f 	.word	0x2007018f
   83304:	20070190 	.word	0x20070190
   83308:	20070191 	.word	0x20070191
   8330c:	69bb      	ldr	r3, [r7, #24]
   8330e:	3301      	adds	r3, #1
   83310:	61bb      	str	r3, [r7, #24]
   83312:	69bb      	ldr	r3, [r7, #24]
   83314:	4a15      	ldr	r2, [pc, #84]	; (8336c <SV_put_sensor_data1+0x2e0>)
   83316:	4293      	cmp	r3, r2
   83318:	d9f8      	bls.n	8330c <SV_put_sensor_data1+0x280>
		                ;
	                     }
		if(group_id_reg_id6 == 1 )
   8331a:	4b15      	ldr	r3, [pc, #84]	; (83370 <SV_put_sensor_data1+0x2e4>)
   8331c:	781b      	ldrb	r3, [r3, #0]
   8331e:	b2db      	uxtb	r3, r3
   83320:	2b01      	cmp	r3, #1
   83322:	d114      	bne.n	8334e <SV_put_sensor_data1+0x2c2>
		{
		SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   83324:	2303      	movs	r3, #3
   83326:	733b      	strb	r3, [r7, #12]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_6 ;
   83328:	2306      	movs	r3, #6
   8332a:	737b      	strb	r3, [r7, #13]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->DABstatus;
   8332c:	687b      	ldr	r3, [r7, #4]
   8332e:	8bdb      	ldrh	r3, [r3, #30]
   83330:	81fb      	strh	r3, [r7, #14]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->DAC2status ;
   83332:	687b      	ldr	r3, [r7, #4]
   83334:	8c1b      	ldrh	r3, [r3, #32]
   83336:	823b      	strh	r3, [r7, #16]
		SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->flow_sensor_status;
   83338:	687b      	ldr	r3, [r7, #4]
   8333a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   8333c:	827b      	strh	r3, [r7, #18]
		SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   8333e:	f107 030c 	add.w	r3, r7, #12
   83342:	4618      	mov	r0, r3
   83344:	4b0b      	ldr	r3, [pc, #44]	; (83374 <SV_put_sensor_data1+0x2e8>)
   83346:	4798      	blx	r3
		group_id_reg_id6 = 0;
   83348:	4b09      	ldr	r3, [pc, #36]	; (83370 <SV_put_sensor_data1+0x2e4>)
   8334a:	2200      	movs	r2, #0
   8334c:	701a      	strb	r2, [r3, #0]
		}
							   for(unsigned int count=0; count<500000; count++ )   {
   8334e:	2300      	movs	r3, #0
   83350:	617b      	str	r3, [r7, #20]
   83352:	e002      	b.n	8335a <SV_put_sensor_data1+0x2ce>
   83354:	697b      	ldr	r3, [r7, #20]
   83356:	3301      	adds	r3, #1
   83358:	617b      	str	r3, [r7, #20]
   8335a:	697b      	ldr	r3, [r7, #20]
   8335c:	4a03      	ldr	r2, [pc, #12]	; (8336c <SV_put_sensor_data1+0x2e0>)
   8335e:	4293      	cmp	r3, r2
   83360:	d9f8      	bls.n	83354 <SV_put_sensor_data1+0x2c8>
		                ;
	                     }
	
		
		return DONE;
   83362:	2300      	movs	r3, #0
	
	
	// #endif
}
   83364:	4618      	mov	r0, r3
   83366:	3730      	adds	r7, #48	; 0x30
   83368:	46bd      	mov	sp, r7
   8336a:	bd80      	pop	{r7, pc}
   8336c:	0007a11f 	.word	0x0007a11f
   83370:	20070192 	.word	0x20070192
   83374:	00083001 	.word	0x00083001

00083378 <SV_get_sensor_data>:

void SV_get_sensor_data(SV_Sensor_status_type* sensor_struct)   {
   83378:	b580      	push	{r7, lr}
   8337a:	b08e      	sub	sp, #56	; 0x38
   8337c:	af00      	add	r7, sp, #0
   8337e:	6078      	str	r0, [r7, #4]
	 uint16_t sensor_data;
	
	  SV_Sensor_status_type sensor_struct1;
	  uint16_t temp_sensor_data =0;
   83380:	2300      	movs	r3, #0
   83382:	86fb      	strh	r3, [r7, #54]	; 0x36
	  uint16_t sensor_status_flag;
	   
	   
 	    sensor_status_flag	= DD_READ_SENSORS(SV_PS1_ID, &sensor_data );	
   83384:	f107 0332 	add.w	r3, r7, #50	; 0x32
   83388:	4619      	mov	r1, r3
   8338a:	2001      	movs	r0, #1
   8338c:	4b6f      	ldr	r3, [pc, #444]	; (8354c <SV_get_sensor_data+0x1d4>)
   8338e:	4798      	blx	r3
   83390:	4603      	mov	r3, r0
   83392:	86bb      	strh	r3, [r7, #52]	; 0x34
		 if(sensor_status_flag == SENSOR_READ_OK)	{			 
   83394:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   83396:	2b00      	cmp	r3, #0
   83398:	d104      	bne.n	833a4 <SV_get_sensor_data+0x2c>
			sensor_struct1.ps1status = sensor_data;
   8339a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   8339c:	81bb      	strh	r3, [r7, #12]
			sensor_struct->ps1status = sensor_struct1.ps1status	; 
   8339e:	89ba      	ldrh	r2, [r7, #12]
   833a0:	687b      	ldr	r3, [r7, #4]
   833a2:	801a      	strh	r2, [r3, #0]
		 }
		 else {}		
	   
	   sensor_status_flag			= DD_READ_SENSORS(SV_PS2_ID,&sensor_data);	   
   833a4:	f107 0332 	add.w	r3, r7, #50	; 0x32
   833a8:	4619      	mov	r1, r3
   833aa:	2002      	movs	r0, #2
   833ac:	4b67      	ldr	r3, [pc, #412]	; (8354c <SV_get_sensor_data+0x1d4>)
   833ae:	4798      	blx	r3
   833b0:	4603      	mov	r3, r0
   833b2:	86bb      	strh	r3, [r7, #52]	; 0x34
	    if(sensor_status_flag == SENSOR_READ_OK)	{
   833b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   833b6:	2b00      	cmp	r3, #0
   833b8:	d104      	bne.n	833c4 <SV_get_sensor_data+0x4c>
		    sensor_struct1.ps2status = sensor_data;
   833ba:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   833bc:	81fb      	strh	r3, [r7, #14]
		    sensor_struct->ps2status = sensor_struct1.ps2status	;
   833be:	89fa      	ldrh	r2, [r7, #14]
   833c0:	687b      	ldr	r3, [r7, #4]
   833c2:	805a      	strh	r2, [r3, #2]
	    }
	    else {}
			
		sensor_status_flag			= DD_READ_SENSORS(SV_PS3_ID, &sensor_data);
   833c4:	f107 0332 	add.w	r3, r7, #50	; 0x32
   833c8:	4619      	mov	r1, r3
   833ca:	2003      	movs	r0, #3
   833cc:	4b5f      	ldr	r3, [pc, #380]	; (8354c <SV_get_sensor_data+0x1d4>)
   833ce:	4798      	blx	r3
   833d0:	4603      	mov	r3, r0
   833d2:	86bb      	strh	r3, [r7, #52]	; 0x34
		 if(sensor_status_flag == SENSOR_READ_OK)	{
   833d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   833d6:	2b00      	cmp	r3, #0
   833d8:	d104      	bne.n	833e4 <SV_get_sensor_data+0x6c>
			 sensor_struct1.ps3status = sensor_data;
   833da:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   833dc:	823b      	strh	r3, [r7, #16]
			 sensor_struct->ps3status = sensor_struct1.ps3status	;
   833de:	8a3a      	ldrh	r2, [r7, #16]
   833e0:	687b      	ldr	r3, [r7, #4]
   833e2:	809a      	strh	r2, [r3, #4]
		 }
		 else {}
	  
   	      sensor_status_flag		= DD_READ_SENSORS(SV_TS1_ID, &sensor_data);
   833e4:	f107 0332 	add.w	r3, r7, #50	; 0x32
   833e8:	4619      	mov	r1, r3
   833ea:	2005      	movs	r0, #5
   833ec:	4b57      	ldr	r3, [pc, #348]	; (8354c <SV_get_sensor_data+0x1d4>)
   833ee:	4798      	blx	r3
   833f0:	4603      	mov	r3, r0
   833f2:	86bb      	strh	r3, [r7, #52]	; 0x34
		  if(sensor_status_flag == SENSOR_READ_OK)	{
   833f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   833f6:	2b00      	cmp	r3, #0
   833f8:	d104      	bne.n	83404 <SV_get_sensor_data+0x8c>
			  sensor_struct1.Temp1status = sensor_data;
   833fa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   833fc:	82bb      	strh	r3, [r7, #20]
			  sensor_struct->Temp1status = sensor_struct1.Temp1status	;
   833fe:	8aba      	ldrh	r2, [r7, #20]
   83400:	687b      	ldr	r3, [r7, #4]
   83402:	811a      	strh	r2, [r3, #8]
		  }
		  else {}
	 
  	   
 	  sensor_status_flag			= DD_READ_SENSORS(SV_TS2_ID, &sensor_data); 
   83404:	f107 0332 	add.w	r3, r7, #50	; 0x32
   83408:	4619      	mov	r1, r3
   8340a:	2006      	movs	r0, #6
   8340c:	4b4f      	ldr	r3, [pc, #316]	; (8354c <SV_get_sensor_data+0x1d4>)
   8340e:	4798      	blx	r3
   83410:	4603      	mov	r3, r0
   83412:	86bb      	strh	r3, [r7, #52]	; 0x34
	    if(sensor_status_flag == SENSOR_READ_OK)	{
   83414:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   83416:	2b00      	cmp	r3, #0
   83418:	d104      	bne.n	83424 <SV_get_sensor_data+0xac>
		    sensor_struct1.Temp2status = sensor_data;
   8341a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   8341c:	82fb      	strh	r3, [r7, #22]
		    sensor_struct->Temp2status = sensor_struct1.Temp2status	;
   8341e:	8afa      	ldrh	r2, [r7, #22]
   83420:	687b      	ldr	r3, [r7, #4]
   83422:	815a      	strh	r2, [r3, #10]
	    }
	    else {}	   
	 	  
 	  
 	  sensor_status_flag		= DD_READ_SENSORS(SV_CS1_TS_ID, &sensor_data);
   83424:	f107 0332 	add.w	r3, r7, #50	; 0x32
   83428:	4619      	mov	r1, r3
   8342a:	2007      	movs	r0, #7
   8342c:	4b47      	ldr	r3, [pc, #284]	; (8354c <SV_get_sensor_data+0x1d4>)
   8342e:	4798      	blx	r3
   83430:	4603      	mov	r3, r0
   83432:	86bb      	strh	r3, [r7, #52]	; 0x34
	    if(sensor_status_flag == SENSOR_READ_OK)	{
   83434:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   83436:	2b00      	cmp	r3, #0
   83438:	d104      	bne.n	83444 <SV_get_sensor_data+0xcc>
		    sensor_struct1.CS1_Tempstatus = sensor_data;
   8343a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   8343c:	833b      	strh	r3, [r7, #24]
		    sensor_struct->CS1_Tempstatus = sensor_struct1.CS1_Tempstatus	;
   8343e:	8b3a      	ldrh	r2, [r7, #24]
   83440:	687b      	ldr	r3, [r7, #4]
   83442:	819a      	strh	r2, [r3, #12]
	    }
	    else {}
	    
 	  
  	  sensor_status_flag   	= DD_READ_SENSORS(SV_CS2_TS_ID, &sensor_data);
   83444:	f107 0332 	add.w	r3, r7, #50	; 0x32
   83448:	4619      	mov	r1, r3
   8344a:	2008      	movs	r0, #8
   8344c:	4b3f      	ldr	r3, [pc, #252]	; (8354c <SV_get_sensor_data+0x1d4>)
   8344e:	4798      	blx	r3
   83450:	4603      	mov	r3, r0
   83452:	86bb      	strh	r3, [r7, #52]	; 0x34
		if(sensor_status_flag == SENSOR_READ_OK)	{
   83454:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   83456:	2b00      	cmp	r3, #0
   83458:	d104      	bne.n	83464 <SV_get_sensor_data+0xec>
			sensor_struct1.CS2_Tempstatus = sensor_data;
   8345a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   8345c:	837b      	strh	r3, [r7, #26]
			sensor_struct->CS2_Tempstatus = sensor_struct1.CS2_Tempstatus	;
   8345e:	8b7a      	ldrh	r2, [r7, #26]
   83460:	687b      	ldr	r3, [r7, #4]
   83462:	81da      	strh	r2, [r3, #14]
		}
		else {}
			
	 sensor_status_flag   	= DD_READ_SENSORS(SV_CS3_TS_ID, &sensor_data);
   83464:	f107 0332 	add.w	r3, r7, #50	; 0x32
   83468:	4619      	mov	r1, r3
   8346a:	200a      	movs	r0, #10
   8346c:	4b37      	ldr	r3, [pc, #220]	; (8354c <SV_get_sensor_data+0x1d4>)
   8346e:	4798      	blx	r3
   83470:	4603      	mov	r3, r0
   83472:	86bb      	strh	r3, [r7, #52]	; 0x34
	 if(sensor_status_flag == SENSOR_READ_OK)	{
   83474:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   83476:	2b00      	cmp	r3, #0
   83478:	d104      	bne.n	83484 <SV_get_sensor_data+0x10c>
		 sensor_struct1.CS3_Tempstatus = sensor_data;
   8347a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   8347c:	83fb      	strh	r3, [r7, #30]
		 sensor_struct->CS3_Tempstatus = sensor_struct1.CS3_Tempstatus	;
   8347e:	8bfa      	ldrh	r2, [r7, #30]
   83480:	687b      	ldr	r3, [r7, #4]
   83482:	825a      	strh	r2, [r3, #18]
	 else {}
  	   
	   
 	 
	   
  	   sensor_struct1.Temp3status			= DD_READ_SENSORS(SV_TS3_ID, &sensor_data);
   83484:	f107 0332 	add.w	r3, r7, #50	; 0x32
   83488:	4619      	mov	r1, r3
   8348a:	2009      	movs	r0, #9
   8348c:	4b2f      	ldr	r3, [pc, #188]	; (8354c <SV_get_sensor_data+0x1d4>)
   8348e:	4798      	blx	r3
   83490:	4603      	mov	r3, r0
   83492:	b29b      	uxth	r3, r3
   83494:	83bb      	strh	r3, [r7, #28]
 	   sensor_struct->Temp3status         = sensor_data	;	
   83496:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   83498:	687b      	ldr	r3, [r7, #4]
   8349a:	821a      	strh	r2, [r3, #16]
     sensor_struct1.CS1status			= DD_READ_SENSORS(SV_CS1_ID, &sensor_data);	
   8349c:	f107 0332 	add.w	r3, r7, #50	; 0x32
   834a0:	4619      	mov	r1, r3
   834a2:	200b      	movs	r0, #11
   834a4:	4b29      	ldr	r3, [pc, #164]	; (8354c <SV_get_sensor_data+0x1d4>)
   834a6:	4798      	blx	r3
   834a8:	4603      	mov	r3, r0
   834aa:	b29b      	uxth	r3, r3
   834ac:	843b      	strh	r3, [r7, #32]
     sensor_struct->CS1status           = sensor_data		;
   834ae:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   834b0:	687b      	ldr	r3, [r7, #4]
   834b2:	829a      	strh	r2, [r3, #20]
	  	
 	sensor_struct1.CS2status			= DD_READ_SENSORS(SV_CS2_ID, &sensor_data);	
   834b4:	f107 0332 	add.w	r3, r7, #50	; 0x32
   834b8:	4619      	mov	r1, r3
   834ba:	200c      	movs	r0, #12
   834bc:	4b23      	ldr	r3, [pc, #140]	; (8354c <SV_get_sensor_data+0x1d4>)
   834be:	4798      	blx	r3
   834c0:	4603      	mov	r3, r0
   834c2:	b29b      	uxth	r3, r3
   834c4:	847b      	strh	r3, [r7, #34]	; 0x22
     sensor_struct->CS2status           = sensor_data	;	
   834c6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   834c8:	687b      	ldr	r3, [r7, #4]
   834ca:	82da      	strh	r2, [r3, #22]
	
	sensor_struct1.CS3status			= DD_READ_SENSORS(SV_CS3_ID, &sensor_data);	
   834cc:	f107 0332 	add.w	r3, r7, #50	; 0x32
   834d0:	4619      	mov	r1, r3
   834d2:	200d      	movs	r0, #13
   834d4:	4b1d      	ldr	r3, [pc, #116]	; (8354c <SV_get_sensor_data+0x1d4>)
   834d6:	4798      	blx	r3
   834d8:	4603      	mov	r3, r0
   834da:	b29b      	uxth	r3, r3
   834dc:	84bb      	strh	r3, [r7, #36]	; 0x24
    sensor_struct->CS3status           = sensor_data		;	
   834de:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   834e0:	687b      	ldr	r3, [r7, #4]
   834e2:	831a      	strh	r2, [r3, #24]
	
	 sensor_struct1.DAC2status			= DD_READ_SENSORS(SV_DAC2_ID, &sensor_data);
   834e4:	f107 0332 	add.w	r3, r7, #50	; 0x32
   834e8:	4619      	mov	r1, r3
   834ea:	2011      	movs	r0, #17
   834ec:	4b17      	ldr	r3, [pc, #92]	; (8354c <SV_get_sensor_data+0x1d4>)
   834ee:	4798      	blx	r3
   834f0:	4603      	mov	r3, r0
   834f2:	b29b      	uxth	r3, r3
   834f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
	 sensor_struct->DAC2status           = sensor_data	;	
   834f6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   834f8:	687b      	ldr	r3, [r7, #4]
   834fa:	841a      	strh	r2, [r3, #32]
     sensor_struct1.DAAstatus			= DD_READ_SENSORS(SV_DAA_ID, &sensor_data);
   834fc:	f107 0332 	add.w	r3, r7, #50	; 0x32
   83500:	4619      	mov	r1, r3
   83502:	200f      	movs	r0, #15
   83504:	4b11      	ldr	r3, [pc, #68]	; (8354c <SV_get_sensor_data+0x1d4>)
   83506:	4798      	blx	r3
   83508:	4603      	mov	r3, r0
   8350a:	b29b      	uxth	r3, r3
   8350c:	853b      	strh	r3, [r7, #40]	; 0x28
	 sensor_struct->DAAstatus            = sensor_struct1.DAAstatus	;	
   8350e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   83510:	687b      	ldr	r3, [r7, #4]
   83512:	839a      	strh	r2, [r3, #28]
	 
	 sensor_struct1.DABstatus			= DD_READ_SENSORS(SV_DAB_ID, &sensor_data);
   83514:	f107 0332 	add.w	r3, r7, #50	; 0x32
   83518:	4619      	mov	r1, r3
   8351a:	2010      	movs	r0, #16
   8351c:	4b0b      	ldr	r3, [pc, #44]	; (8354c <SV_get_sensor_data+0x1d4>)
   8351e:	4798      	blx	r3
   83520:	4603      	mov	r3, r0
   83522:	b29b      	uxth	r3, r3
   83524:	857b      	strh	r3, [r7, #42]	; 0x2a
	 sensor_struct->DABstatus            = sensor_data	;	
   83526:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   83528:	687b      	ldr	r3, [r7, #4]
   8352a:	83da      	strh	r2, [r3, #30]
	 
	 sensor_struct1.DAC1status       	= DD_READ_SENSORS(SV_DAC1_ID, &sensor_data);
   8352c:	f107 0332 	add.w	r3, r7, #50	; 0x32
   83530:	4619      	mov	r1, r3
   83532:	200e      	movs	r0, #14
   83534:	4b05      	ldr	r3, [pc, #20]	; (8354c <SV_get_sensor_data+0x1d4>)
   83536:	4798      	blx	r3
   83538:	4603      	mov	r3, r0
   8353a:	b29b      	uxth	r3, r3
   8353c:	84fb      	strh	r3, [r7, #38]	; 0x26
	 sensor_struct->DAC1status           = sensor_data ;  
   8353e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   83540:	687b      	ldr	r3, [r7, #4]
   83542:	835a      	strh	r2, [r3, #26]
				
		
		
		
	/*sensor_struct->flow_sensor_status   = sensor_struct1.flow_sensor_status	;	*/
   83544:	bf00      	nop
   83546:	3738      	adds	r7, #56	; 0x38
   83548:	46bd      	mov	sp, r7
   8354a:	bd80      	pop	{r7, pc}
   8354c:	00081da1 	.word	0x00081da1

00083550 <SV_SYSTEM_INIT>:
#include "SV_SYS.h"
//#include "Platform/Service/SV_SYS//SV_TIMER.h"



void SV_SYSTEM_INIT()   {
   83550:	b580      	push	{r7, lr}
   83552:	af00      	add	r7, sp, #0
	
	SENSOR_D_INIT_CLOCK();
   83554:	4b06      	ldr	r3, [pc, #24]	; (83570 <SV_SYSTEM_INIT+0x20>)
   83556:	4798      	blx	r3
	SENSOR_D_INIT_UART();
   83558:	4b06      	ldr	r3, [pc, #24]	; (83574 <SV_SYSTEM_INIT+0x24>)
   8355a:	4798      	blx	r3
	SENSOR_D_INIT_PIO();
   8355c:	4b06      	ldr	r3, [pc, #24]	; (83578 <SV_SYSTEM_INIT+0x28>)
   8355e:	4798      	blx	r3
	SENSOR_DD_INIT_SPI();
   83560:	4b06      	ldr	r3, [pc, #24]	; (8357c <SV_SYSTEM_INIT+0x2c>)
   83562:	4798      	blx	r3
	SENSOR_DD_INIT_CAN();	
   83564:	4b06      	ldr	r3, [pc, #24]	; (83580 <SV_SYSTEM_INIT+0x30>)
   83566:	4798      	blx	r3
	DD_INIT_ALL_SENSORS();
   83568:	4b06      	ldr	r3, [pc, #24]	; (83584 <SV_SYSTEM_INIT+0x34>)
   8356a:	4798      	blx	r3
   8356c:	bf00      	nop
   8356e:	bd80      	pop	{r7, pc}
   83570:	0008077d 	.word	0x0008077d
   83574:	00083d35 	.word	0x00083d35
   83578:	000809c5 	.word	0x000809c5
   8357c:	000818e1 	.word	0x000818e1
   83580:	000805f1 	.word	0x000805f1
   83584:	00081cad 	.word	0x00081cad

00083588 <_write>:
   83588:	b580      	push	{r7, lr}
   8358a:	b086      	sub	sp, #24
   8358c:	af00      	add	r7, sp, #0
   8358e:	60f8      	str	r0, [r7, #12]
   83590:	60b9      	str	r1, [r7, #8]
   83592:	607a      	str	r2, [r7, #4]
   83594:	2300      	movs	r3, #0
   83596:	617b      	str	r3, [r7, #20]
   83598:	68fb      	ldr	r3, [r7, #12]
   8359a:	2b01      	cmp	r3, #1
   8359c:	d01e      	beq.n	835dc <_write+0x54>
   8359e:	68fb      	ldr	r3, [r7, #12]
   835a0:	2b02      	cmp	r3, #2
   835a2:	d01b      	beq.n	835dc <_write+0x54>
   835a4:	68fb      	ldr	r3, [r7, #12]
   835a6:	2b03      	cmp	r3, #3
   835a8:	d018      	beq.n	835dc <_write+0x54>
   835aa:	f04f 33ff 	mov.w	r3, #4294967295
   835ae:	e019      	b.n	835e4 <_write+0x5c>
   835b0:	4b0e      	ldr	r3, [pc, #56]	; (835ec <_write+0x64>)
   835b2:	681a      	ldr	r2, [r3, #0]
   835b4:	4b0e      	ldr	r3, [pc, #56]	; (835f0 <_write+0x68>)
   835b6:	6818      	ldr	r0, [r3, #0]
   835b8:	68bb      	ldr	r3, [r7, #8]
   835ba:	1c59      	adds	r1, r3, #1
   835bc:	60b9      	str	r1, [r7, #8]
   835be:	781b      	ldrb	r3, [r3, #0]
   835c0:	4619      	mov	r1, r3
   835c2:	4790      	blx	r2
   835c4:	4603      	mov	r3, r0
   835c6:	2b00      	cmp	r3, #0
   835c8:	da02      	bge.n	835d0 <_write+0x48>
   835ca:	f04f 33ff 	mov.w	r3, #4294967295
   835ce:	e009      	b.n	835e4 <_write+0x5c>
   835d0:	697b      	ldr	r3, [r7, #20]
   835d2:	3301      	adds	r3, #1
   835d4:	617b      	str	r3, [r7, #20]
   835d6:	687b      	ldr	r3, [r7, #4]
   835d8:	3b01      	subs	r3, #1
   835da:	607b      	str	r3, [r7, #4]
   835dc:	687b      	ldr	r3, [r7, #4]
   835de:	2b00      	cmp	r3, #0
   835e0:	d1e6      	bne.n	835b0 <_write+0x28>
   835e2:	697b      	ldr	r3, [r7, #20]
   835e4:	4618      	mov	r0, r3
   835e6:	3718      	adds	r7, #24
   835e8:	46bd      	mov	sp, r7
   835ea:	bd80      	pop	{r7, pc}
   835ec:	20070b00 	.word	0x20070b00
   835f0:	20070b04 	.word	0x20070b04

000835f4 <usart_set_async_baudrate>:
   835f4:	b480      	push	{r7}
   835f6:	b089      	sub	sp, #36	; 0x24
   835f8:	af00      	add	r7, sp, #0
   835fa:	60f8      	str	r0, [r7, #12]
   835fc:	60b9      	str	r1, [r7, #8]
   835fe:	607a      	str	r2, [r7, #4]
   83600:	68bb      	ldr	r3, [r7, #8]
   83602:	011a      	lsls	r2, r3, #4
   83604:	687b      	ldr	r3, [r7, #4]
   83606:	429a      	cmp	r2, r3
   83608:	d802      	bhi.n	83610 <usart_set_async_baudrate+0x1c>
   8360a:	2310      	movs	r3, #16
   8360c:	61fb      	str	r3, [r7, #28]
   8360e:	e001      	b.n	83614 <usart_set_async_baudrate+0x20>
   83610:	2308      	movs	r3, #8
   83612:	61fb      	str	r3, [r7, #28]
   83614:	687b      	ldr	r3, [r7, #4]
   83616:	00da      	lsls	r2, r3, #3
   83618:	69fb      	ldr	r3, [r7, #28]
   8361a:	68b9      	ldr	r1, [r7, #8]
   8361c:	fb01 f303 	mul.w	r3, r1, r3
   83620:	085b      	lsrs	r3, r3, #1
   83622:	441a      	add	r2, r3
   83624:	69fb      	ldr	r3, [r7, #28]
   83626:	68b9      	ldr	r1, [r7, #8]
   83628:	fb01 f303 	mul.w	r3, r1, r3
   8362c:	fbb2 f3f3 	udiv	r3, r2, r3
   83630:	61bb      	str	r3, [r7, #24]
   83632:	69bb      	ldr	r3, [r7, #24]
   83634:	08db      	lsrs	r3, r3, #3
   83636:	617b      	str	r3, [r7, #20]
   83638:	69bb      	ldr	r3, [r7, #24]
   8363a:	f003 0307 	and.w	r3, r3, #7
   8363e:	613b      	str	r3, [r7, #16]
   83640:	697b      	ldr	r3, [r7, #20]
   83642:	2b00      	cmp	r3, #0
   83644:	d003      	beq.n	8364e <usart_set_async_baudrate+0x5a>
   83646:	697b      	ldr	r3, [r7, #20]
   83648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8364c:	d301      	bcc.n	83652 <usart_set_async_baudrate+0x5e>
   8364e:	2301      	movs	r3, #1
   83650:	e00f      	b.n	83672 <usart_set_async_baudrate+0x7e>
   83652:	69fb      	ldr	r3, [r7, #28]
   83654:	2b08      	cmp	r3, #8
   83656:	d105      	bne.n	83664 <usart_set_async_baudrate+0x70>
   83658:	68fb      	ldr	r3, [r7, #12]
   8365a:	685b      	ldr	r3, [r3, #4]
   8365c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   83660:	68fb      	ldr	r3, [r7, #12]
   83662:	605a      	str	r2, [r3, #4]
   83664:	693b      	ldr	r3, [r7, #16]
   83666:	041a      	lsls	r2, r3, #16
   83668:	697b      	ldr	r3, [r7, #20]
   8366a:	431a      	orrs	r2, r3
   8366c:	68fb      	ldr	r3, [r7, #12]
   8366e:	621a      	str	r2, [r3, #32]
   83670:	2300      	movs	r3, #0
   83672:	4618      	mov	r0, r3
   83674:	3724      	adds	r7, #36	; 0x24
   83676:	46bd      	mov	sp, r7
   83678:	bc80      	pop	{r7}
   8367a:	4770      	bx	lr

0008367c <usart_reset>:
   8367c:	b580      	push	{r7, lr}
   8367e:	b082      	sub	sp, #8
   83680:	af00      	add	r7, sp, #0
   83682:	6078      	str	r0, [r7, #4]
   83684:	6878      	ldr	r0, [r7, #4]
   83686:	4b0d      	ldr	r3, [pc, #52]	; (836bc <usart_reset+0x40>)
   83688:	4798      	blx	r3
   8368a:	687b      	ldr	r3, [r7, #4]
   8368c:	2200      	movs	r2, #0
   8368e:	605a      	str	r2, [r3, #4]
   83690:	687b      	ldr	r3, [r7, #4]
   83692:	2200      	movs	r2, #0
   83694:	625a      	str	r2, [r3, #36]	; 0x24
   83696:	687b      	ldr	r3, [r7, #4]
   83698:	2200      	movs	r2, #0
   8369a:	629a      	str	r2, [r3, #40]	; 0x28
   8369c:	6878      	ldr	r0, [r7, #4]
   8369e:	4b08      	ldr	r3, [pc, #32]	; (836c0 <usart_reset+0x44>)
   836a0:	4798      	blx	r3
   836a2:	6878      	ldr	r0, [r7, #4]
   836a4:	4b07      	ldr	r3, [pc, #28]	; (836c4 <usart_reset+0x48>)
   836a6:	4798      	blx	r3
   836a8:	6878      	ldr	r0, [r7, #4]
   836aa:	4b07      	ldr	r3, [pc, #28]	; (836c8 <usart_reset+0x4c>)
   836ac:	4798      	blx	r3
   836ae:	6878      	ldr	r0, [r7, #4]
   836b0:	4b06      	ldr	r3, [pc, #24]	; (836cc <usart_reset+0x50>)
   836b2:	4798      	blx	r3
   836b4:	bf00      	nop
   836b6:	3708      	adds	r7, #8
   836b8:	46bd      	mov	sp, r7
   836ba:	bd80      	pop	{r7, pc}
   836bc:	00083851 	.word	0x00083851
   836c0:	0008376d 	.word	0x0008376d
   836c4:	0008379d 	.word	0x0008379d
   836c8:	000837b5 	.word	0x000837b5
   836cc:	000837d1 	.word	0x000837d1

000836d0 <usart_init_rs232>:
   836d0:	b580      	push	{r7, lr}
   836d2:	b084      	sub	sp, #16
   836d4:	af00      	add	r7, sp, #0
   836d6:	60f8      	str	r0, [r7, #12]
   836d8:	60b9      	str	r1, [r7, #8]
   836da:	607a      	str	r2, [r7, #4]
   836dc:	68f8      	ldr	r0, [r7, #12]
   836de:	4b1a      	ldr	r3, [pc, #104]	; (83748 <usart_init_rs232+0x78>)
   836e0:	4798      	blx	r3
   836e2:	4b1a      	ldr	r3, [pc, #104]	; (8374c <usart_init_rs232+0x7c>)
   836e4:	2200      	movs	r2, #0
   836e6:	601a      	str	r2, [r3, #0]
   836e8:	68bb      	ldr	r3, [r7, #8]
   836ea:	2b00      	cmp	r3, #0
   836ec:	d009      	beq.n	83702 <usart_init_rs232+0x32>
   836ee:	68bb      	ldr	r3, [r7, #8]
   836f0:	681b      	ldr	r3, [r3, #0]
   836f2:	687a      	ldr	r2, [r7, #4]
   836f4:	4619      	mov	r1, r3
   836f6:	68f8      	ldr	r0, [r7, #12]
   836f8:	4b15      	ldr	r3, [pc, #84]	; (83750 <usart_init_rs232+0x80>)
   836fa:	4798      	blx	r3
   836fc:	4603      	mov	r3, r0
   836fe:	2b00      	cmp	r3, #0
   83700:	d001      	beq.n	83706 <usart_init_rs232+0x36>
   83702:	2301      	movs	r3, #1
   83704:	e01b      	b.n	8373e <usart_init_rs232+0x6e>
   83706:	68bb      	ldr	r3, [r7, #8]
   83708:	685a      	ldr	r2, [r3, #4]
   8370a:	68bb      	ldr	r3, [r7, #8]
   8370c:	689b      	ldr	r3, [r3, #8]
   8370e:	431a      	orrs	r2, r3
   83710:	68bb      	ldr	r3, [r7, #8]
   83712:	691b      	ldr	r3, [r3, #16]
   83714:	431a      	orrs	r2, r3
   83716:	68bb      	ldr	r3, [r7, #8]
   83718:	68db      	ldr	r3, [r3, #12]
   8371a:	431a      	orrs	r2, r3
   8371c:	4b0b      	ldr	r3, [pc, #44]	; (8374c <usart_init_rs232+0x7c>)
   8371e:	681b      	ldr	r3, [r3, #0]
   83720:	4313      	orrs	r3, r2
   83722:	4a0a      	ldr	r2, [pc, #40]	; (8374c <usart_init_rs232+0x7c>)
   83724:	6013      	str	r3, [r2, #0]
   83726:	4b09      	ldr	r3, [pc, #36]	; (8374c <usart_init_rs232+0x7c>)
   83728:	681b      	ldr	r3, [r3, #0]
   8372a:	4a08      	ldr	r2, [pc, #32]	; (8374c <usart_init_rs232+0x7c>)
   8372c:	6013      	str	r3, [r2, #0]
   8372e:	68fb      	ldr	r3, [r7, #12]
   83730:	685a      	ldr	r2, [r3, #4]
   83732:	4b06      	ldr	r3, [pc, #24]	; (8374c <usart_init_rs232+0x7c>)
   83734:	681b      	ldr	r3, [r3, #0]
   83736:	431a      	orrs	r2, r3
   83738:	68fb      	ldr	r3, [r7, #12]
   8373a:	605a      	str	r2, [r3, #4]
   8373c:	2300      	movs	r3, #0
   8373e:	4618      	mov	r0, r3
   83740:	3710      	adds	r7, #16
   83742:	46bd      	mov	sp, r7
   83744:	bd80      	pop	{r7, pc}
   83746:	bf00      	nop
   83748:	0008367d 	.word	0x0008367d
   8374c:	20070a04 	.word	0x20070a04
   83750:	000835f5 	.word	0x000835f5

00083754 <usart_enable_tx>:
   83754:	b480      	push	{r7}
   83756:	b083      	sub	sp, #12
   83758:	af00      	add	r7, sp, #0
   8375a:	6078      	str	r0, [r7, #4]
   8375c:	687b      	ldr	r3, [r7, #4]
   8375e:	2240      	movs	r2, #64	; 0x40
   83760:	601a      	str	r2, [r3, #0]
   83762:	bf00      	nop
   83764:	370c      	adds	r7, #12
   83766:	46bd      	mov	sp, r7
   83768:	bc80      	pop	{r7}
   8376a:	4770      	bx	lr

0008376c <usart_reset_tx>:
   8376c:	b480      	push	{r7}
   8376e:	b083      	sub	sp, #12
   83770:	af00      	add	r7, sp, #0
   83772:	6078      	str	r0, [r7, #4]
   83774:	687b      	ldr	r3, [r7, #4]
   83776:	2288      	movs	r2, #136	; 0x88
   83778:	601a      	str	r2, [r3, #0]
   8377a:	bf00      	nop
   8377c:	370c      	adds	r7, #12
   8377e:	46bd      	mov	sp, r7
   83780:	bc80      	pop	{r7}
   83782:	4770      	bx	lr

00083784 <usart_enable_rx>:
   83784:	b480      	push	{r7}
   83786:	b083      	sub	sp, #12
   83788:	af00      	add	r7, sp, #0
   8378a:	6078      	str	r0, [r7, #4]
   8378c:	687b      	ldr	r3, [r7, #4]
   8378e:	2210      	movs	r2, #16
   83790:	601a      	str	r2, [r3, #0]
   83792:	bf00      	nop
   83794:	370c      	adds	r7, #12
   83796:	46bd      	mov	sp, r7
   83798:	bc80      	pop	{r7}
   8379a:	4770      	bx	lr

0008379c <usart_reset_rx>:
   8379c:	b480      	push	{r7}
   8379e:	b083      	sub	sp, #12
   837a0:	af00      	add	r7, sp, #0
   837a2:	6078      	str	r0, [r7, #4]
   837a4:	687b      	ldr	r3, [r7, #4]
   837a6:	2224      	movs	r2, #36	; 0x24
   837a8:	601a      	str	r2, [r3, #0]
   837aa:	bf00      	nop
   837ac:	370c      	adds	r7, #12
   837ae:	46bd      	mov	sp, r7
   837b0:	bc80      	pop	{r7}
   837b2:	4770      	bx	lr

000837b4 <usart_reset_status>:
   837b4:	b480      	push	{r7}
   837b6:	b083      	sub	sp, #12
   837b8:	af00      	add	r7, sp, #0
   837ba:	6078      	str	r0, [r7, #4]
   837bc:	687b      	ldr	r3, [r7, #4]
   837be:	f44f 7280 	mov.w	r2, #256	; 0x100
   837c2:	601a      	str	r2, [r3, #0]
   837c4:	bf00      	nop
   837c6:	370c      	adds	r7, #12
   837c8:	46bd      	mov	sp, r7
   837ca:	bc80      	pop	{r7}
   837cc:	4770      	bx	lr
   837ce:	bf00      	nop

000837d0 <usart_drive_RTS_pin_high>:
   837d0:	b480      	push	{r7}
   837d2:	b083      	sub	sp, #12
   837d4:	af00      	add	r7, sp, #0
   837d6:	6078      	str	r0, [r7, #4]
   837d8:	687b      	ldr	r3, [r7, #4]
   837da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   837de:	601a      	str	r2, [r3, #0]
   837e0:	bf00      	nop
   837e2:	370c      	adds	r7, #12
   837e4:	46bd      	mov	sp, r7
   837e6:	bc80      	pop	{r7}
   837e8:	4770      	bx	lr
   837ea:	bf00      	nop

000837ec <usart_write>:
   837ec:	b480      	push	{r7}
   837ee:	b083      	sub	sp, #12
   837f0:	af00      	add	r7, sp, #0
   837f2:	6078      	str	r0, [r7, #4]
   837f4:	6039      	str	r1, [r7, #0]
   837f6:	687b      	ldr	r3, [r7, #4]
   837f8:	695b      	ldr	r3, [r3, #20]
   837fa:	f003 0302 	and.w	r3, r3, #2
   837fe:	2b00      	cmp	r3, #0
   83800:	d101      	bne.n	83806 <usart_write+0x1a>
   83802:	2301      	movs	r3, #1
   83804:	e005      	b.n	83812 <usart_write+0x26>
   83806:	683b      	ldr	r3, [r7, #0]
   83808:	f3c3 0208 	ubfx	r2, r3, #0, #9
   8380c:	687b      	ldr	r3, [r7, #4]
   8380e:	61da      	str	r2, [r3, #28]
   83810:	2300      	movs	r3, #0
   83812:	4618      	mov	r0, r3
   83814:	370c      	adds	r7, #12
   83816:	46bd      	mov	sp, r7
   83818:	bc80      	pop	{r7}
   8381a:	4770      	bx	lr

0008381c <usart_read>:
   8381c:	b480      	push	{r7}
   8381e:	b083      	sub	sp, #12
   83820:	af00      	add	r7, sp, #0
   83822:	6078      	str	r0, [r7, #4]
   83824:	6039      	str	r1, [r7, #0]
   83826:	687b      	ldr	r3, [r7, #4]
   83828:	695b      	ldr	r3, [r3, #20]
   8382a:	f003 0301 	and.w	r3, r3, #1
   8382e:	2b00      	cmp	r3, #0
   83830:	d101      	bne.n	83836 <usart_read+0x1a>
   83832:	2301      	movs	r3, #1
   83834:	e006      	b.n	83844 <usart_read+0x28>
   83836:	687b      	ldr	r3, [r7, #4]
   83838:	699b      	ldr	r3, [r3, #24]
   8383a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   8383e:	683b      	ldr	r3, [r7, #0]
   83840:	601a      	str	r2, [r3, #0]
   83842:	2300      	movs	r3, #0
   83844:	4618      	mov	r0, r3
   83846:	370c      	adds	r7, #12
   83848:	46bd      	mov	sp, r7
   8384a:	bc80      	pop	{r7}
   8384c:	4770      	bx	lr
   8384e:	bf00      	nop

00083850 <usart_disable_writeprotect>:
   83850:	b480      	push	{r7}
   83852:	b083      	sub	sp, #12
   83854:	af00      	add	r7, sp, #0
   83856:	6078      	str	r0, [r7, #4]
   83858:	687b      	ldr	r3, [r7, #4]
   8385a:	4a04      	ldr	r2, [pc, #16]	; (8386c <usart_disable_writeprotect+0x1c>)
   8385c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   83860:	bf00      	nop
   83862:	370c      	adds	r7, #12
   83864:	46bd      	mov	sp, r7
   83866:	bc80      	pop	{r7}
   83868:	4770      	bx	lr
   8386a:	bf00      	nop
   8386c:	55534100 	.word	0x55534100

00083870 <uart_init>:
   83870:	b480      	push	{r7}
   83872:	b085      	sub	sp, #20
   83874:	af00      	add	r7, sp, #0
   83876:	6078      	str	r0, [r7, #4]
   83878:	6039      	str	r1, [r7, #0]
   8387a:	2300      	movs	r3, #0
   8387c:	60fb      	str	r3, [r7, #12]
   8387e:	687b      	ldr	r3, [r7, #4]
   83880:	22ac      	movs	r2, #172	; 0xac
   83882:	601a      	str	r2, [r3, #0]
   83884:	683b      	ldr	r3, [r7, #0]
   83886:	681a      	ldr	r2, [r3, #0]
   83888:	683b      	ldr	r3, [r7, #0]
   8388a:	685b      	ldr	r3, [r3, #4]
   8388c:	fbb2 f3f3 	udiv	r3, r2, r3
   83890:	091b      	lsrs	r3, r3, #4
   83892:	60fb      	str	r3, [r7, #12]
   83894:	68fb      	ldr	r3, [r7, #12]
   83896:	2b00      	cmp	r3, #0
   83898:	d003      	beq.n	838a2 <uart_init+0x32>
   8389a:	68fb      	ldr	r3, [r7, #12]
   8389c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   838a0:	d301      	bcc.n	838a6 <uart_init+0x36>
   838a2:	2301      	movs	r3, #1
   838a4:	e00f      	b.n	838c6 <uart_init+0x56>
   838a6:	687b      	ldr	r3, [r7, #4]
   838a8:	68fa      	ldr	r2, [r7, #12]
   838aa:	621a      	str	r2, [r3, #32]
   838ac:	683b      	ldr	r3, [r7, #0]
   838ae:	689a      	ldr	r2, [r3, #8]
   838b0:	687b      	ldr	r3, [r7, #4]
   838b2:	605a      	str	r2, [r3, #4]
   838b4:	687b      	ldr	r3, [r7, #4]
   838b6:	f240 2202 	movw	r2, #514	; 0x202
   838ba:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   838be:	687b      	ldr	r3, [r7, #4]
   838c0:	2250      	movs	r2, #80	; 0x50
   838c2:	601a      	str	r2, [r3, #0]
   838c4:	2300      	movs	r3, #0
   838c6:	4618      	mov	r0, r3
   838c8:	3714      	adds	r7, #20
   838ca:	46bd      	mov	sp, r7
   838cc:	bc80      	pop	{r7}
   838ce:	4770      	bx	lr

000838d0 <uart_write>:
   838d0:	b480      	push	{r7}
   838d2:	b083      	sub	sp, #12
   838d4:	af00      	add	r7, sp, #0
   838d6:	6078      	str	r0, [r7, #4]
   838d8:	460b      	mov	r3, r1
   838da:	70fb      	strb	r3, [r7, #3]
   838dc:	687b      	ldr	r3, [r7, #4]
   838de:	695b      	ldr	r3, [r3, #20]
   838e0:	f003 0302 	and.w	r3, r3, #2
   838e4:	2b00      	cmp	r3, #0
   838e6:	d101      	bne.n	838ec <uart_write+0x1c>
   838e8:	2301      	movs	r3, #1
   838ea:	e003      	b.n	838f4 <uart_write+0x24>
   838ec:	78fa      	ldrb	r2, [r7, #3]
   838ee:	687b      	ldr	r3, [r7, #4]
   838f0:	61da      	str	r2, [r3, #28]
   838f2:	2300      	movs	r3, #0
   838f4:	4618      	mov	r0, r3
   838f6:	370c      	adds	r7, #12
   838f8:	46bd      	mov	sp, r7
   838fa:	bc80      	pop	{r7}
   838fc:	4770      	bx	lr
   838fe:	bf00      	nop

00083900 <uart_read>:
   83900:	b480      	push	{r7}
   83902:	b083      	sub	sp, #12
   83904:	af00      	add	r7, sp, #0
   83906:	6078      	str	r0, [r7, #4]
   83908:	6039      	str	r1, [r7, #0]
   8390a:	687b      	ldr	r3, [r7, #4]
   8390c:	695b      	ldr	r3, [r3, #20]
   8390e:	f003 0301 	and.w	r3, r3, #1
   83912:	2b00      	cmp	r3, #0
   83914:	d101      	bne.n	8391a <uart_read+0x1a>
   83916:	2301      	movs	r3, #1
   83918:	e005      	b.n	83926 <uart_read+0x26>
   8391a:	687b      	ldr	r3, [r7, #4]
   8391c:	699b      	ldr	r3, [r3, #24]
   8391e:	b2da      	uxtb	r2, r3
   83920:	683b      	ldr	r3, [r7, #0]
   83922:	701a      	strb	r2, [r3, #0]
   83924:	2300      	movs	r3, #0
   83926:	4618      	mov	r0, r3
   83928:	370c      	adds	r7, #12
   8392a:	46bd      	mov	sp, r7
   8392c:	bc80      	pop	{r7}
   8392e:	4770      	bx	lr

00083930 <osc_get_rate>:
   83930:	b480      	push	{r7}
   83932:	b083      	sub	sp, #12
   83934:	af00      	add	r7, sp, #0
   83936:	6078      	str	r0, [r7, #4]
   83938:	687b      	ldr	r3, [r7, #4]
   8393a:	2b07      	cmp	r3, #7
   8393c:	d825      	bhi.n	8398a <osc_get_rate+0x5a>
   8393e:	a201      	add	r2, pc, #4	; (adr r2, 83944 <osc_get_rate+0x14>)
   83940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83944:	00083965 	.word	0x00083965
   83948:	0008396b 	.word	0x0008396b
   8394c:	00083971 	.word	0x00083971
   83950:	00083977 	.word	0x00083977
   83954:	0008397b 	.word	0x0008397b
   83958:	0008397f 	.word	0x0008397f
   8395c:	00083983 	.word	0x00083983
   83960:	00083987 	.word	0x00083987
   83964:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83968:	e010      	b.n	8398c <osc_get_rate+0x5c>
   8396a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8396e:	e00d      	b.n	8398c <osc_get_rate+0x5c>
   83970:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83974:	e00a      	b.n	8398c <osc_get_rate+0x5c>
   83976:	4b08      	ldr	r3, [pc, #32]	; (83998 <osc_get_rate+0x68>)
   83978:	e008      	b.n	8398c <osc_get_rate+0x5c>
   8397a:	4b08      	ldr	r3, [pc, #32]	; (8399c <osc_get_rate+0x6c>)
   8397c:	e006      	b.n	8398c <osc_get_rate+0x5c>
   8397e:	4b08      	ldr	r3, [pc, #32]	; (839a0 <osc_get_rate+0x70>)
   83980:	e004      	b.n	8398c <osc_get_rate+0x5c>
   83982:	4b07      	ldr	r3, [pc, #28]	; (839a0 <osc_get_rate+0x70>)
   83984:	e002      	b.n	8398c <osc_get_rate+0x5c>
   83986:	4b06      	ldr	r3, [pc, #24]	; (839a0 <osc_get_rate+0x70>)
   83988:	e000      	b.n	8398c <osc_get_rate+0x5c>
   8398a:	2300      	movs	r3, #0
   8398c:	4618      	mov	r0, r3
   8398e:	370c      	adds	r7, #12
   83990:	46bd      	mov	sp, r7
   83992:	bc80      	pop	{r7}
   83994:	4770      	bx	lr
   83996:	bf00      	nop
   83998:	003d0900 	.word	0x003d0900
   8399c:	007a1200 	.word	0x007a1200
   839a0:	00b71b00 	.word	0x00b71b00

000839a4 <sysclk_get_main_hz>:
   839a4:	b580      	push	{r7, lr}
   839a6:	af00      	add	r7, sp, #0
   839a8:	2006      	movs	r0, #6
   839aa:	4b04      	ldr	r3, [pc, #16]	; (839bc <sysclk_get_main_hz+0x18>)
   839ac:	4798      	blx	r3
   839ae:	4602      	mov	r2, r0
   839b0:	4613      	mov	r3, r2
   839b2:	00db      	lsls	r3, r3, #3
   839b4:	1a9b      	subs	r3, r3, r2
   839b6:	005b      	lsls	r3, r3, #1
   839b8:	4618      	mov	r0, r3
   839ba:	bd80      	pop	{r7, pc}
   839bc:	00083931 	.word	0x00083931

000839c0 <sysclk_get_peripheral_hz>:
   839c0:	b580      	push	{r7, lr}
   839c2:	af00      	add	r7, sp, #0
   839c4:	4b02      	ldr	r3, [pc, #8]	; (839d0 <sysclk_get_peripheral_hz+0x10>)
   839c6:	4798      	blx	r3
   839c8:	4603      	mov	r3, r0
   839ca:	085b      	lsrs	r3, r3, #1
   839cc:	4618      	mov	r0, r3
   839ce:	bd80      	pop	{r7, pc}
   839d0:	000839a5 	.word	0x000839a5

000839d4 <sysclk_enable_peripheral_clock>:
   839d4:	b580      	push	{r7, lr}
   839d6:	b082      	sub	sp, #8
   839d8:	af00      	add	r7, sp, #0
   839da:	6078      	str	r0, [r7, #4]
   839dc:	6878      	ldr	r0, [r7, #4]
   839de:	4b03      	ldr	r3, [pc, #12]	; (839ec <sysclk_enable_peripheral_clock+0x18>)
   839e0:	4798      	blx	r3
   839e2:	bf00      	nop
   839e4:	3708      	adds	r7, #8
   839e6:	46bd      	mov	sp, r7
   839e8:	bd80      	pop	{r7, pc}
   839ea:	bf00      	nop
   839ec:	000847fd 	.word	0x000847fd

000839f0 <usart_serial_init>:
   839f0:	b580      	push	{r7, lr}
   839f2:	b08c      	sub	sp, #48	; 0x30
   839f4:	af00      	add	r7, sp, #0
   839f6:	6078      	str	r0, [r7, #4]
   839f8:	6039      	str	r1, [r7, #0]
   839fa:	4b40      	ldr	r3, [pc, #256]	; (83afc <usart_serial_init+0x10c>)
   839fc:	4798      	blx	r3
   839fe:	4603      	mov	r3, r0
   83a00:	627b      	str	r3, [r7, #36]	; 0x24
   83a02:	683b      	ldr	r3, [r7, #0]
   83a04:	681b      	ldr	r3, [r3, #0]
   83a06:	62bb      	str	r3, [r7, #40]	; 0x28
   83a08:	683b      	ldr	r3, [r7, #0]
   83a0a:	689b      	ldr	r3, [r3, #8]
   83a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   83a0e:	683b      	ldr	r3, [r7, #0]
   83a10:	681b      	ldr	r3, [r3, #0]
   83a12:	60fb      	str	r3, [r7, #12]
   83a14:	683b      	ldr	r3, [r7, #0]
   83a16:	685b      	ldr	r3, [r3, #4]
   83a18:	613b      	str	r3, [r7, #16]
   83a1a:	683b      	ldr	r3, [r7, #0]
   83a1c:	689b      	ldr	r3, [r3, #8]
   83a1e:	617b      	str	r3, [r7, #20]
   83a20:	683b      	ldr	r3, [r7, #0]
   83a22:	68db      	ldr	r3, [r3, #12]
   83a24:	61bb      	str	r3, [r7, #24]
   83a26:	2300      	movs	r3, #0
   83a28:	61fb      	str	r3, [r7, #28]
   83a2a:	687b      	ldr	r3, [r7, #4]
   83a2c:	4a34      	ldr	r2, [pc, #208]	; (83b00 <usart_serial_init+0x110>)
   83a2e:	4293      	cmp	r3, r2
   83a30:	d108      	bne.n	83a44 <usart_serial_init+0x54>
   83a32:	2008      	movs	r0, #8
   83a34:	4b33      	ldr	r3, [pc, #204]	; (83b04 <usart_serial_init+0x114>)
   83a36:	4798      	blx	r3
   83a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
   83a3c:	4619      	mov	r1, r3
   83a3e:	6878      	ldr	r0, [r7, #4]
   83a40:	4b31      	ldr	r3, [pc, #196]	; (83b08 <usart_serial_init+0x118>)
   83a42:	4798      	blx	r3
   83a44:	687b      	ldr	r3, [r7, #4]
   83a46:	4a31      	ldr	r2, [pc, #196]	; (83b0c <usart_serial_init+0x11c>)
   83a48:	4293      	cmp	r3, r2
   83a4a:	d111      	bne.n	83a70 <usart_serial_init+0x80>
   83a4c:	2011      	movs	r0, #17
   83a4e:	4b2d      	ldr	r3, [pc, #180]	; (83b04 <usart_serial_init+0x114>)
   83a50:	4798      	blx	r3
   83a52:	4b2a      	ldr	r3, [pc, #168]	; (83afc <usart_serial_init+0x10c>)
   83a54:	4798      	blx	r3
   83a56:	4602      	mov	r2, r0
   83a58:	f107 030c 	add.w	r3, r7, #12
   83a5c:	4619      	mov	r1, r3
   83a5e:	6878      	ldr	r0, [r7, #4]
   83a60:	4b2b      	ldr	r3, [pc, #172]	; (83b10 <usart_serial_init+0x120>)
   83a62:	4798      	blx	r3
   83a64:	6878      	ldr	r0, [r7, #4]
   83a66:	4b2b      	ldr	r3, [pc, #172]	; (83b14 <usart_serial_init+0x124>)
   83a68:	4798      	blx	r3
   83a6a:	6878      	ldr	r0, [r7, #4]
   83a6c:	4b2a      	ldr	r3, [pc, #168]	; (83b18 <usart_serial_init+0x128>)
   83a6e:	4798      	blx	r3
   83a70:	687b      	ldr	r3, [r7, #4]
   83a72:	4a2a      	ldr	r2, [pc, #168]	; (83b1c <usart_serial_init+0x12c>)
   83a74:	4293      	cmp	r3, r2
   83a76:	d111      	bne.n	83a9c <usart_serial_init+0xac>
   83a78:	2012      	movs	r0, #18
   83a7a:	4b22      	ldr	r3, [pc, #136]	; (83b04 <usart_serial_init+0x114>)
   83a7c:	4798      	blx	r3
   83a7e:	4b1f      	ldr	r3, [pc, #124]	; (83afc <usart_serial_init+0x10c>)
   83a80:	4798      	blx	r3
   83a82:	4602      	mov	r2, r0
   83a84:	f107 030c 	add.w	r3, r7, #12
   83a88:	4619      	mov	r1, r3
   83a8a:	6878      	ldr	r0, [r7, #4]
   83a8c:	4b20      	ldr	r3, [pc, #128]	; (83b10 <usart_serial_init+0x120>)
   83a8e:	4798      	blx	r3
   83a90:	6878      	ldr	r0, [r7, #4]
   83a92:	4b20      	ldr	r3, [pc, #128]	; (83b14 <usart_serial_init+0x124>)
   83a94:	4798      	blx	r3
   83a96:	6878      	ldr	r0, [r7, #4]
   83a98:	4b1f      	ldr	r3, [pc, #124]	; (83b18 <usart_serial_init+0x128>)
   83a9a:	4798      	blx	r3
   83a9c:	687b      	ldr	r3, [r7, #4]
   83a9e:	4a20      	ldr	r2, [pc, #128]	; (83b20 <usart_serial_init+0x130>)
   83aa0:	4293      	cmp	r3, r2
   83aa2:	d111      	bne.n	83ac8 <usart_serial_init+0xd8>
   83aa4:	2013      	movs	r0, #19
   83aa6:	4b17      	ldr	r3, [pc, #92]	; (83b04 <usart_serial_init+0x114>)
   83aa8:	4798      	blx	r3
   83aaa:	4b14      	ldr	r3, [pc, #80]	; (83afc <usart_serial_init+0x10c>)
   83aac:	4798      	blx	r3
   83aae:	4602      	mov	r2, r0
   83ab0:	f107 030c 	add.w	r3, r7, #12
   83ab4:	4619      	mov	r1, r3
   83ab6:	6878      	ldr	r0, [r7, #4]
   83ab8:	4b15      	ldr	r3, [pc, #84]	; (83b10 <usart_serial_init+0x120>)
   83aba:	4798      	blx	r3
   83abc:	6878      	ldr	r0, [r7, #4]
   83abe:	4b15      	ldr	r3, [pc, #84]	; (83b14 <usart_serial_init+0x124>)
   83ac0:	4798      	blx	r3
   83ac2:	6878      	ldr	r0, [r7, #4]
   83ac4:	4b14      	ldr	r3, [pc, #80]	; (83b18 <usart_serial_init+0x128>)
   83ac6:	4798      	blx	r3
   83ac8:	687b      	ldr	r3, [r7, #4]
   83aca:	4a16      	ldr	r2, [pc, #88]	; (83b24 <usart_serial_init+0x134>)
   83acc:	4293      	cmp	r3, r2
   83ace:	d111      	bne.n	83af4 <usart_serial_init+0x104>
   83ad0:	2014      	movs	r0, #20
   83ad2:	4b0c      	ldr	r3, [pc, #48]	; (83b04 <usart_serial_init+0x114>)
   83ad4:	4798      	blx	r3
   83ad6:	4b09      	ldr	r3, [pc, #36]	; (83afc <usart_serial_init+0x10c>)
   83ad8:	4798      	blx	r3
   83ada:	4602      	mov	r2, r0
   83adc:	f107 030c 	add.w	r3, r7, #12
   83ae0:	4619      	mov	r1, r3
   83ae2:	6878      	ldr	r0, [r7, #4]
   83ae4:	4b0a      	ldr	r3, [pc, #40]	; (83b10 <usart_serial_init+0x120>)
   83ae6:	4798      	blx	r3
   83ae8:	6878      	ldr	r0, [r7, #4]
   83aea:	4b0a      	ldr	r3, [pc, #40]	; (83b14 <usart_serial_init+0x124>)
   83aec:	4798      	blx	r3
   83aee:	6878      	ldr	r0, [r7, #4]
   83af0:	4b09      	ldr	r3, [pc, #36]	; (83b18 <usart_serial_init+0x128>)
   83af2:	4798      	blx	r3
   83af4:	bf00      	nop
   83af6:	3730      	adds	r7, #48	; 0x30
   83af8:	46bd      	mov	sp, r7
   83afa:	bd80      	pop	{r7, pc}
   83afc:	000839c1 	.word	0x000839c1
   83b00:	400e0800 	.word	0x400e0800
   83b04:	000839d5 	.word	0x000839d5
   83b08:	00083871 	.word	0x00083871
   83b0c:	40098000 	.word	0x40098000
   83b10:	000836d1 	.word	0x000836d1
   83b14:	00083755 	.word	0x00083755
   83b18:	00083785 	.word	0x00083785
   83b1c:	4009c000 	.word	0x4009c000
   83b20:	400a0000 	.word	0x400a0000
   83b24:	400a4000 	.word	0x400a4000

00083b28 <usart_serial_putchar>:
   83b28:	b580      	push	{r7, lr}
   83b2a:	b082      	sub	sp, #8
   83b2c:	af00      	add	r7, sp, #0
   83b2e:	6078      	str	r0, [r7, #4]
   83b30:	460b      	mov	r3, r1
   83b32:	70fb      	strb	r3, [r7, #3]
   83b34:	687b      	ldr	r3, [r7, #4]
   83b36:	4a27      	ldr	r2, [pc, #156]	; (83bd4 <usart_serial_putchar+0xac>)
   83b38:	4293      	cmp	r3, r2
   83b3a:	d10a      	bne.n	83b52 <usart_serial_putchar+0x2a>
   83b3c:	bf00      	nop
   83b3e:	78fb      	ldrb	r3, [r7, #3]
   83b40:	4619      	mov	r1, r3
   83b42:	6878      	ldr	r0, [r7, #4]
   83b44:	4b24      	ldr	r3, [pc, #144]	; (83bd8 <usart_serial_putchar+0xb0>)
   83b46:	4798      	blx	r3
   83b48:	4603      	mov	r3, r0
   83b4a:	2b00      	cmp	r3, #0
   83b4c:	d1f7      	bne.n	83b3e <usart_serial_putchar+0x16>
   83b4e:	2301      	movs	r3, #1
   83b50:	e03c      	b.n	83bcc <usart_serial_putchar+0xa4>
   83b52:	687b      	ldr	r3, [r7, #4]
   83b54:	4a21      	ldr	r2, [pc, #132]	; (83bdc <usart_serial_putchar+0xb4>)
   83b56:	4293      	cmp	r3, r2
   83b58:	d10a      	bne.n	83b70 <usart_serial_putchar+0x48>
   83b5a:	bf00      	nop
   83b5c:	78fb      	ldrb	r3, [r7, #3]
   83b5e:	4619      	mov	r1, r3
   83b60:	6878      	ldr	r0, [r7, #4]
   83b62:	4b1f      	ldr	r3, [pc, #124]	; (83be0 <usart_serial_putchar+0xb8>)
   83b64:	4798      	blx	r3
   83b66:	4603      	mov	r3, r0
   83b68:	2b00      	cmp	r3, #0
   83b6a:	d1f7      	bne.n	83b5c <usart_serial_putchar+0x34>
   83b6c:	2301      	movs	r3, #1
   83b6e:	e02d      	b.n	83bcc <usart_serial_putchar+0xa4>
   83b70:	687b      	ldr	r3, [r7, #4]
   83b72:	4a1c      	ldr	r2, [pc, #112]	; (83be4 <usart_serial_putchar+0xbc>)
   83b74:	4293      	cmp	r3, r2
   83b76:	d10a      	bne.n	83b8e <usart_serial_putchar+0x66>
   83b78:	bf00      	nop
   83b7a:	78fb      	ldrb	r3, [r7, #3]
   83b7c:	4619      	mov	r1, r3
   83b7e:	6878      	ldr	r0, [r7, #4]
   83b80:	4b17      	ldr	r3, [pc, #92]	; (83be0 <usart_serial_putchar+0xb8>)
   83b82:	4798      	blx	r3
   83b84:	4603      	mov	r3, r0
   83b86:	2b00      	cmp	r3, #0
   83b88:	d1f7      	bne.n	83b7a <usart_serial_putchar+0x52>
   83b8a:	2301      	movs	r3, #1
   83b8c:	e01e      	b.n	83bcc <usart_serial_putchar+0xa4>
   83b8e:	687b      	ldr	r3, [r7, #4]
   83b90:	4a15      	ldr	r2, [pc, #84]	; (83be8 <usart_serial_putchar+0xc0>)
   83b92:	4293      	cmp	r3, r2
   83b94:	d10a      	bne.n	83bac <usart_serial_putchar+0x84>
   83b96:	bf00      	nop
   83b98:	78fb      	ldrb	r3, [r7, #3]
   83b9a:	4619      	mov	r1, r3
   83b9c:	6878      	ldr	r0, [r7, #4]
   83b9e:	4b10      	ldr	r3, [pc, #64]	; (83be0 <usart_serial_putchar+0xb8>)
   83ba0:	4798      	blx	r3
   83ba2:	4603      	mov	r3, r0
   83ba4:	2b00      	cmp	r3, #0
   83ba6:	d1f7      	bne.n	83b98 <usart_serial_putchar+0x70>
   83ba8:	2301      	movs	r3, #1
   83baa:	e00f      	b.n	83bcc <usart_serial_putchar+0xa4>
   83bac:	687b      	ldr	r3, [r7, #4]
   83bae:	4a0f      	ldr	r2, [pc, #60]	; (83bec <usart_serial_putchar+0xc4>)
   83bb0:	4293      	cmp	r3, r2
   83bb2:	d10a      	bne.n	83bca <usart_serial_putchar+0xa2>
   83bb4:	bf00      	nop
   83bb6:	78fb      	ldrb	r3, [r7, #3]
   83bb8:	4619      	mov	r1, r3
   83bba:	6878      	ldr	r0, [r7, #4]
   83bbc:	4b08      	ldr	r3, [pc, #32]	; (83be0 <usart_serial_putchar+0xb8>)
   83bbe:	4798      	blx	r3
   83bc0:	4603      	mov	r3, r0
   83bc2:	2b00      	cmp	r3, #0
   83bc4:	d1f7      	bne.n	83bb6 <usart_serial_putchar+0x8e>
   83bc6:	2301      	movs	r3, #1
   83bc8:	e000      	b.n	83bcc <usart_serial_putchar+0xa4>
   83bca:	2300      	movs	r3, #0
   83bcc:	4618      	mov	r0, r3
   83bce:	3708      	adds	r7, #8
   83bd0:	46bd      	mov	sp, r7
   83bd2:	bd80      	pop	{r7, pc}
   83bd4:	400e0800 	.word	0x400e0800
   83bd8:	000838d1 	.word	0x000838d1
   83bdc:	40098000 	.word	0x40098000
   83be0:	000837ed 	.word	0x000837ed
   83be4:	4009c000 	.word	0x4009c000
   83be8:	400a0000 	.word	0x400a0000
   83bec:	400a4000 	.word	0x400a4000

00083bf0 <usart_serial_getchar>:
   83bf0:	b580      	push	{r7, lr}
   83bf2:	b084      	sub	sp, #16
   83bf4:	af00      	add	r7, sp, #0
   83bf6:	6078      	str	r0, [r7, #4]
   83bf8:	6039      	str	r1, [r7, #0]
   83bfa:	2300      	movs	r3, #0
   83bfc:	60fb      	str	r3, [r7, #12]
   83bfe:	687b      	ldr	r3, [r7, #4]
   83c00:	4a2b      	ldr	r2, [pc, #172]	; (83cb0 <usart_serial_getchar+0xc0>)
   83c02:	4293      	cmp	r3, r2
   83c04:	d107      	bne.n	83c16 <usart_serial_getchar+0x26>
   83c06:	bf00      	nop
   83c08:	6839      	ldr	r1, [r7, #0]
   83c0a:	6878      	ldr	r0, [r7, #4]
   83c0c:	4b29      	ldr	r3, [pc, #164]	; (83cb4 <usart_serial_getchar+0xc4>)
   83c0e:	4798      	blx	r3
   83c10:	4603      	mov	r3, r0
   83c12:	2b00      	cmp	r3, #0
   83c14:	d1f8      	bne.n	83c08 <usart_serial_getchar+0x18>
   83c16:	687b      	ldr	r3, [r7, #4]
   83c18:	4a27      	ldr	r2, [pc, #156]	; (83cb8 <usart_serial_getchar+0xc8>)
   83c1a:	4293      	cmp	r3, r2
   83c1c:	d10d      	bne.n	83c3a <usart_serial_getchar+0x4a>
   83c1e:	bf00      	nop
   83c20:	f107 030c 	add.w	r3, r7, #12
   83c24:	4619      	mov	r1, r3
   83c26:	6878      	ldr	r0, [r7, #4]
   83c28:	4b24      	ldr	r3, [pc, #144]	; (83cbc <usart_serial_getchar+0xcc>)
   83c2a:	4798      	blx	r3
   83c2c:	4603      	mov	r3, r0
   83c2e:	2b00      	cmp	r3, #0
   83c30:	d1f6      	bne.n	83c20 <usart_serial_getchar+0x30>
   83c32:	68fb      	ldr	r3, [r7, #12]
   83c34:	b2da      	uxtb	r2, r3
   83c36:	683b      	ldr	r3, [r7, #0]
   83c38:	701a      	strb	r2, [r3, #0]
   83c3a:	687b      	ldr	r3, [r7, #4]
   83c3c:	4a20      	ldr	r2, [pc, #128]	; (83cc0 <usart_serial_getchar+0xd0>)
   83c3e:	4293      	cmp	r3, r2
   83c40:	d10d      	bne.n	83c5e <usart_serial_getchar+0x6e>
   83c42:	bf00      	nop
   83c44:	f107 030c 	add.w	r3, r7, #12
   83c48:	4619      	mov	r1, r3
   83c4a:	6878      	ldr	r0, [r7, #4]
   83c4c:	4b1b      	ldr	r3, [pc, #108]	; (83cbc <usart_serial_getchar+0xcc>)
   83c4e:	4798      	blx	r3
   83c50:	4603      	mov	r3, r0
   83c52:	2b00      	cmp	r3, #0
   83c54:	d1f6      	bne.n	83c44 <usart_serial_getchar+0x54>
   83c56:	68fb      	ldr	r3, [r7, #12]
   83c58:	b2da      	uxtb	r2, r3
   83c5a:	683b      	ldr	r3, [r7, #0]
   83c5c:	701a      	strb	r2, [r3, #0]
   83c5e:	687b      	ldr	r3, [r7, #4]
   83c60:	4a18      	ldr	r2, [pc, #96]	; (83cc4 <usart_serial_getchar+0xd4>)
   83c62:	4293      	cmp	r3, r2
   83c64:	d10d      	bne.n	83c82 <usart_serial_getchar+0x92>
   83c66:	bf00      	nop
   83c68:	f107 030c 	add.w	r3, r7, #12
   83c6c:	4619      	mov	r1, r3
   83c6e:	6878      	ldr	r0, [r7, #4]
   83c70:	4b12      	ldr	r3, [pc, #72]	; (83cbc <usart_serial_getchar+0xcc>)
   83c72:	4798      	blx	r3
   83c74:	4603      	mov	r3, r0
   83c76:	2b00      	cmp	r3, #0
   83c78:	d1f6      	bne.n	83c68 <usart_serial_getchar+0x78>
   83c7a:	68fb      	ldr	r3, [r7, #12]
   83c7c:	b2da      	uxtb	r2, r3
   83c7e:	683b      	ldr	r3, [r7, #0]
   83c80:	701a      	strb	r2, [r3, #0]
   83c82:	687b      	ldr	r3, [r7, #4]
   83c84:	4a10      	ldr	r2, [pc, #64]	; (83cc8 <usart_serial_getchar+0xd8>)
   83c86:	4293      	cmp	r3, r2
   83c88:	d10d      	bne.n	83ca6 <usart_serial_getchar+0xb6>
   83c8a:	bf00      	nop
   83c8c:	f107 030c 	add.w	r3, r7, #12
   83c90:	4619      	mov	r1, r3
   83c92:	6878      	ldr	r0, [r7, #4]
   83c94:	4b09      	ldr	r3, [pc, #36]	; (83cbc <usart_serial_getchar+0xcc>)
   83c96:	4798      	blx	r3
   83c98:	4603      	mov	r3, r0
   83c9a:	2b00      	cmp	r3, #0
   83c9c:	d1f6      	bne.n	83c8c <usart_serial_getchar+0x9c>
   83c9e:	68fb      	ldr	r3, [r7, #12]
   83ca0:	b2da      	uxtb	r2, r3
   83ca2:	683b      	ldr	r3, [r7, #0]
   83ca4:	701a      	strb	r2, [r3, #0]
   83ca6:	bf00      	nop
   83ca8:	3710      	adds	r7, #16
   83caa:	46bd      	mov	sp, r7
   83cac:	bd80      	pop	{r7, pc}
   83cae:	bf00      	nop
   83cb0:	400e0800 	.word	0x400e0800
   83cb4:	00083901 	.word	0x00083901
   83cb8:	40098000 	.word	0x40098000
   83cbc:	0008381d 	.word	0x0008381d
   83cc0:	4009c000 	.word	0x4009c000
   83cc4:	400a0000 	.word	0x400a0000
   83cc8:	400a4000 	.word	0x400a4000

00083ccc <stdio_serial_init>:
   83ccc:	b580      	push	{r7, lr}
   83cce:	b082      	sub	sp, #8
   83cd0:	af00      	add	r7, sp, #0
   83cd2:	6078      	str	r0, [r7, #4]
   83cd4:	6039      	str	r1, [r7, #0]
   83cd6:	4a0f      	ldr	r2, [pc, #60]	; (83d14 <stdio_serial_init+0x48>)
   83cd8:	687b      	ldr	r3, [r7, #4]
   83cda:	6013      	str	r3, [r2, #0]
   83cdc:	4b0e      	ldr	r3, [pc, #56]	; (83d18 <stdio_serial_init+0x4c>)
   83cde:	4a0f      	ldr	r2, [pc, #60]	; (83d1c <stdio_serial_init+0x50>)
   83ce0:	601a      	str	r2, [r3, #0]
   83ce2:	4b0f      	ldr	r3, [pc, #60]	; (83d20 <stdio_serial_init+0x54>)
   83ce4:	4a0f      	ldr	r2, [pc, #60]	; (83d24 <stdio_serial_init+0x58>)
   83ce6:	601a      	str	r2, [r3, #0]
   83ce8:	6839      	ldr	r1, [r7, #0]
   83cea:	6878      	ldr	r0, [r7, #4]
   83cec:	4b0e      	ldr	r3, [pc, #56]	; (83d28 <stdio_serial_init+0x5c>)
   83cee:	4798      	blx	r3
   83cf0:	4b0e      	ldr	r3, [pc, #56]	; (83d2c <stdio_serial_init+0x60>)
   83cf2:	681b      	ldr	r3, [r3, #0]
   83cf4:	689b      	ldr	r3, [r3, #8]
   83cf6:	2100      	movs	r1, #0
   83cf8:	4618      	mov	r0, r3
   83cfa:	4b0d      	ldr	r3, [pc, #52]	; (83d30 <stdio_serial_init+0x64>)
   83cfc:	4798      	blx	r3
   83cfe:	4b0b      	ldr	r3, [pc, #44]	; (83d2c <stdio_serial_init+0x60>)
   83d00:	681b      	ldr	r3, [r3, #0]
   83d02:	685b      	ldr	r3, [r3, #4]
   83d04:	2100      	movs	r1, #0
   83d06:	4618      	mov	r0, r3
   83d08:	4b09      	ldr	r3, [pc, #36]	; (83d30 <stdio_serial_init+0x64>)
   83d0a:	4798      	blx	r3
   83d0c:	bf00      	nop
   83d0e:	3708      	adds	r7, #8
   83d10:	46bd      	mov	sp, r7
   83d12:	bd80      	pop	{r7, pc}
   83d14:	20070b04 	.word	0x20070b04
   83d18:	20070b00 	.word	0x20070b00
   83d1c:	00083b29 	.word	0x00083b29
   83d20:	20070ab0 	.word	0x20070ab0
   83d24:	00083bf1 	.word	0x00083bf1
   83d28:	000839f1 	.word	0x000839f1
   83d2c:	200705c8 	.word	0x200705c8
   83d30:	00084e31 	.word	0x00084e31

00083d34 <SENSOR_D_INIT_UART>:
   83d34:	b580      	push	{r7, lr}
   83d36:	b084      	sub	sp, #16
   83d38:	af00      	add	r7, sp, #0
   83d3a:	463b      	mov	r3, r7
   83d3c:	2200      	movs	r2, #0
   83d3e:	601a      	str	r2, [r3, #0]
   83d40:	605a      	str	r2, [r3, #4]
   83d42:	609a      	str	r2, [r3, #8]
   83d44:	60da      	str	r2, [r3, #12]
   83d46:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   83d4a:	603b      	str	r3, [r7, #0]
   83d4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83d50:	60bb      	str	r3, [r7, #8]
   83d52:	463b      	mov	r3, r7
   83d54:	4619      	mov	r1, r3
   83d56:	4805      	ldr	r0, [pc, #20]	; (83d6c <SENSOR_D_INIT_UART+0x38>)
   83d58:	4b05      	ldr	r3, [pc, #20]	; (83d70 <SENSOR_D_INIT_UART+0x3c>)
   83d5a:	4798      	blx	r3
   83d5c:	4805      	ldr	r0, [pc, #20]	; (83d74 <SENSOR_D_INIT_UART+0x40>)
   83d5e:	4b06      	ldr	r3, [pc, #24]	; (83d78 <SENSOR_D_INIT_UART+0x44>)
   83d60:	4798      	blx	r3
   83d62:	bf00      	nop
   83d64:	3710      	adds	r7, #16
   83d66:	46bd      	mov	sp, r7
   83d68:	bd80      	pop	{r7, pc}
   83d6a:	bf00      	nop
   83d6c:	400e0800 	.word	0x400e0800
   83d70:	00083ccd 	.word	0x00083ccd
   83d74:	0008697c 	.word	0x0008697c
   83d78:	00084e21 	.word	0x00084e21

00083d7c <osc_enable>:
   83d7c:	b580      	push	{r7, lr}
   83d7e:	b082      	sub	sp, #8
   83d80:	af00      	add	r7, sp, #0
   83d82:	6078      	str	r0, [r7, #4]
   83d84:	687b      	ldr	r3, [r7, #4]
   83d86:	2b07      	cmp	r3, #7
   83d88:	d831      	bhi.n	83dee <osc_enable+0x72>
   83d8a:	a201      	add	r2, pc, #4	; (adr r2, 83d90 <osc_enable+0x14>)
   83d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83d90:	00083ded 	.word	0x00083ded
   83d94:	00083db1 	.word	0x00083db1
   83d98:	00083db9 	.word	0x00083db9
   83d9c:	00083dc1 	.word	0x00083dc1
   83da0:	00083dc9 	.word	0x00083dc9
   83da4:	00083dd1 	.word	0x00083dd1
   83da8:	00083dd9 	.word	0x00083dd9
   83dac:	00083de3 	.word	0x00083de3
   83db0:	2000      	movs	r0, #0
   83db2:	4b11      	ldr	r3, [pc, #68]	; (83df8 <osc_enable+0x7c>)
   83db4:	4798      	blx	r3
   83db6:	e01a      	b.n	83dee <osc_enable+0x72>
   83db8:	2001      	movs	r0, #1
   83dba:	4b0f      	ldr	r3, [pc, #60]	; (83df8 <osc_enable+0x7c>)
   83dbc:	4798      	blx	r3
   83dbe:	e016      	b.n	83dee <osc_enable+0x72>
   83dc0:	2000      	movs	r0, #0
   83dc2:	4b0e      	ldr	r3, [pc, #56]	; (83dfc <osc_enable+0x80>)
   83dc4:	4798      	blx	r3
   83dc6:	e012      	b.n	83dee <osc_enable+0x72>
   83dc8:	2010      	movs	r0, #16
   83dca:	4b0c      	ldr	r3, [pc, #48]	; (83dfc <osc_enable+0x80>)
   83dcc:	4798      	blx	r3
   83dce:	e00e      	b.n	83dee <osc_enable+0x72>
   83dd0:	2020      	movs	r0, #32
   83dd2:	4b0a      	ldr	r3, [pc, #40]	; (83dfc <osc_enable+0x80>)
   83dd4:	4798      	blx	r3
   83dd6:	e00a      	b.n	83dee <osc_enable+0x72>
   83dd8:	213e      	movs	r1, #62	; 0x3e
   83dda:	2000      	movs	r0, #0
   83ddc:	4b08      	ldr	r3, [pc, #32]	; (83e00 <osc_enable+0x84>)
   83dde:	4798      	blx	r3
   83de0:	e005      	b.n	83dee <osc_enable+0x72>
   83de2:	213e      	movs	r1, #62	; 0x3e
   83de4:	2001      	movs	r0, #1
   83de6:	4b06      	ldr	r3, [pc, #24]	; (83e00 <osc_enable+0x84>)
   83de8:	4798      	blx	r3
   83dea:	e000      	b.n	83dee <osc_enable+0x72>
   83dec:	bf00      	nop
   83dee:	bf00      	nop
   83df0:	3708      	adds	r7, #8
   83df2:	46bd      	mov	sp, r7
   83df4:	bd80      	pop	{r7, pc}
   83df6:	bf00      	nop
   83df8:	00084649 	.word	0x00084649
   83dfc:	000846b5 	.word	0x000846b5
   83e00:	00084725 	.word	0x00084725

00083e04 <osc_is_ready>:
   83e04:	b580      	push	{r7, lr}
   83e06:	b082      	sub	sp, #8
   83e08:	af00      	add	r7, sp, #0
   83e0a:	6078      	str	r0, [r7, #4]
   83e0c:	687b      	ldr	r3, [r7, #4]
   83e0e:	2b07      	cmp	r3, #7
   83e10:	d826      	bhi.n	83e60 <osc_is_ready+0x5c>
   83e12:	a201      	add	r2, pc, #4	; (adr r2, 83e18 <osc_is_ready+0x14>)
   83e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83e18:	00083e39 	.word	0x00083e39
   83e1c:	00083e3d 	.word	0x00083e3d
   83e20:	00083e3d 	.word	0x00083e3d
   83e24:	00083e4f 	.word	0x00083e4f
   83e28:	00083e4f 	.word	0x00083e4f
   83e2c:	00083e4f 	.word	0x00083e4f
   83e30:	00083e4f 	.word	0x00083e4f
   83e34:	00083e4f 	.word	0x00083e4f
   83e38:	2301      	movs	r3, #1
   83e3a:	e012      	b.n	83e62 <osc_is_ready+0x5e>
   83e3c:	4b0b      	ldr	r3, [pc, #44]	; (83e6c <osc_is_ready+0x68>)
   83e3e:	4798      	blx	r3
   83e40:	4603      	mov	r3, r0
   83e42:	2b00      	cmp	r3, #0
   83e44:	bf14      	ite	ne
   83e46:	2301      	movne	r3, #1
   83e48:	2300      	moveq	r3, #0
   83e4a:	b2db      	uxtb	r3, r3
   83e4c:	e009      	b.n	83e62 <osc_is_ready+0x5e>
   83e4e:	4b08      	ldr	r3, [pc, #32]	; (83e70 <osc_is_ready+0x6c>)
   83e50:	4798      	blx	r3
   83e52:	4603      	mov	r3, r0
   83e54:	2b00      	cmp	r3, #0
   83e56:	bf14      	ite	ne
   83e58:	2301      	movne	r3, #1
   83e5a:	2300      	moveq	r3, #0
   83e5c:	b2db      	uxtb	r3, r3
   83e5e:	e000      	b.n	83e62 <osc_is_ready+0x5e>
   83e60:	2300      	movs	r3, #0
   83e62:	4618      	mov	r0, r3
   83e64:	3708      	adds	r7, #8
   83e66:	46bd      	mov	sp, r7
   83e68:	bd80      	pop	{r7, pc}
   83e6a:	bf00      	nop
   83e6c:	00084681 	.word	0x00084681
   83e70:	0008479d 	.word	0x0008479d

00083e74 <osc_get_rate>:
   83e74:	b480      	push	{r7}
   83e76:	b083      	sub	sp, #12
   83e78:	af00      	add	r7, sp, #0
   83e7a:	6078      	str	r0, [r7, #4]
   83e7c:	687b      	ldr	r3, [r7, #4]
   83e7e:	2b07      	cmp	r3, #7
   83e80:	d825      	bhi.n	83ece <osc_get_rate+0x5a>
   83e82:	a201      	add	r2, pc, #4	; (adr r2, 83e88 <osc_get_rate+0x14>)
   83e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83e88:	00083ea9 	.word	0x00083ea9
   83e8c:	00083eaf 	.word	0x00083eaf
   83e90:	00083eb5 	.word	0x00083eb5
   83e94:	00083ebb 	.word	0x00083ebb
   83e98:	00083ebf 	.word	0x00083ebf
   83e9c:	00083ec3 	.word	0x00083ec3
   83ea0:	00083ec7 	.word	0x00083ec7
   83ea4:	00083ecb 	.word	0x00083ecb
   83ea8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83eac:	e010      	b.n	83ed0 <osc_get_rate+0x5c>
   83eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83eb2:	e00d      	b.n	83ed0 <osc_get_rate+0x5c>
   83eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83eb8:	e00a      	b.n	83ed0 <osc_get_rate+0x5c>
   83eba:	4b08      	ldr	r3, [pc, #32]	; (83edc <osc_get_rate+0x68>)
   83ebc:	e008      	b.n	83ed0 <osc_get_rate+0x5c>
   83ebe:	4b08      	ldr	r3, [pc, #32]	; (83ee0 <osc_get_rate+0x6c>)
   83ec0:	e006      	b.n	83ed0 <osc_get_rate+0x5c>
   83ec2:	4b08      	ldr	r3, [pc, #32]	; (83ee4 <osc_get_rate+0x70>)
   83ec4:	e004      	b.n	83ed0 <osc_get_rate+0x5c>
   83ec6:	4b07      	ldr	r3, [pc, #28]	; (83ee4 <osc_get_rate+0x70>)
   83ec8:	e002      	b.n	83ed0 <osc_get_rate+0x5c>
   83eca:	4b06      	ldr	r3, [pc, #24]	; (83ee4 <osc_get_rate+0x70>)
   83ecc:	e000      	b.n	83ed0 <osc_get_rate+0x5c>
   83ece:	2300      	movs	r3, #0
   83ed0:	4618      	mov	r0, r3
   83ed2:	370c      	adds	r7, #12
   83ed4:	46bd      	mov	sp, r7
   83ed6:	bc80      	pop	{r7}
   83ed8:	4770      	bx	lr
   83eda:	bf00      	nop
   83edc:	003d0900 	.word	0x003d0900
   83ee0:	007a1200 	.word	0x007a1200
   83ee4:	00b71b00 	.word	0x00b71b00

00083ee8 <osc_wait_ready>:
   83ee8:	b580      	push	{r7, lr}
   83eea:	b082      	sub	sp, #8
   83eec:	af00      	add	r7, sp, #0
   83eee:	4603      	mov	r3, r0
   83ef0:	71fb      	strb	r3, [r7, #7]
   83ef2:	bf00      	nop
   83ef4:	79fb      	ldrb	r3, [r7, #7]
   83ef6:	4618      	mov	r0, r3
   83ef8:	4b05      	ldr	r3, [pc, #20]	; (83f10 <osc_wait_ready+0x28>)
   83efa:	4798      	blx	r3
   83efc:	4603      	mov	r3, r0
   83efe:	f083 0301 	eor.w	r3, r3, #1
   83f02:	b2db      	uxtb	r3, r3
   83f04:	2b00      	cmp	r3, #0
   83f06:	d1f5      	bne.n	83ef4 <osc_wait_ready+0xc>
   83f08:	bf00      	nop
   83f0a:	3708      	adds	r7, #8
   83f0c:	46bd      	mov	sp, r7
   83f0e:	bd80      	pop	{r7, pc}
   83f10:	00083e05 	.word	0x00083e05

00083f14 <pll_config_init>:
   83f14:	b580      	push	{r7, lr}
   83f16:	b086      	sub	sp, #24
   83f18:	af00      	add	r7, sp, #0
   83f1a:	60f8      	str	r0, [r7, #12]
   83f1c:	607a      	str	r2, [r7, #4]
   83f1e:	603b      	str	r3, [r7, #0]
   83f20:	460b      	mov	r3, r1
   83f22:	72fb      	strb	r3, [r7, #11]
   83f24:	687b      	ldr	r3, [r7, #4]
   83f26:	2b00      	cmp	r3, #0
   83f28:	d107      	bne.n	83f3a <pll_config_init+0x26>
   83f2a:	683b      	ldr	r3, [r7, #0]
   83f2c:	2b00      	cmp	r3, #0
   83f2e:	d104      	bne.n	83f3a <pll_config_init+0x26>
   83f30:	68fb      	ldr	r3, [r7, #12]
   83f32:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   83f36:	601a      	str	r2, [r3, #0]
   83f38:	e019      	b.n	83f6e <pll_config_init+0x5a>
   83f3a:	7afb      	ldrb	r3, [r7, #11]
   83f3c:	4618      	mov	r0, r3
   83f3e:	4b0e      	ldr	r3, [pc, #56]	; (83f78 <pll_config_init+0x64>)
   83f40:	4798      	blx	r3
   83f42:	4602      	mov	r2, r0
   83f44:	687b      	ldr	r3, [r7, #4]
   83f46:	fbb2 f3f3 	udiv	r3, r2, r3
   83f4a:	617b      	str	r3, [r7, #20]
   83f4c:	697b      	ldr	r3, [r7, #20]
   83f4e:	683a      	ldr	r2, [r7, #0]
   83f50:	fb02 f303 	mul.w	r3, r2, r3
   83f54:	617b      	str	r3, [r7, #20]
   83f56:	683b      	ldr	r3, [r7, #0]
   83f58:	3b01      	subs	r3, #1
   83f5a:	041a      	lsls	r2, r3, #16
   83f5c:	4b07      	ldr	r3, [pc, #28]	; (83f7c <pll_config_init+0x68>)
   83f5e:	4013      	ands	r3, r2
   83f60:	687a      	ldr	r2, [r7, #4]
   83f62:	b2d2      	uxtb	r2, r2
   83f64:	4313      	orrs	r3, r2
   83f66:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   83f6a:	68fb      	ldr	r3, [r7, #12]
   83f6c:	601a      	str	r2, [r3, #0]
   83f6e:	bf00      	nop
   83f70:	3718      	adds	r7, #24
   83f72:	46bd      	mov	sp, r7
   83f74:	bd80      	pop	{r7, pc}
   83f76:	bf00      	nop
   83f78:	00083e75 	.word	0x00083e75
   83f7c:	07ff0000 	.word	0x07ff0000

00083f80 <pll_enable>:
   83f80:	b580      	push	{r7, lr}
   83f82:	b082      	sub	sp, #8
   83f84:	af00      	add	r7, sp, #0
   83f86:	6078      	str	r0, [r7, #4]
   83f88:	6039      	str	r1, [r7, #0]
   83f8a:	683b      	ldr	r3, [r7, #0]
   83f8c:	2b00      	cmp	r3, #0
   83f8e:	d108      	bne.n	83fa2 <pll_enable+0x22>
   83f90:	4b09      	ldr	r3, [pc, #36]	; (83fb8 <pll_enable+0x38>)
   83f92:	4798      	blx	r3
   83f94:	4a09      	ldr	r2, [pc, #36]	; (83fbc <pll_enable+0x3c>)
   83f96:	687b      	ldr	r3, [r7, #4]
   83f98:	681b      	ldr	r3, [r3, #0]
   83f9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83f9e:	6293      	str	r3, [r2, #40]	; 0x28
   83fa0:	e005      	b.n	83fae <pll_enable+0x2e>
   83fa2:	4a06      	ldr	r2, [pc, #24]	; (83fbc <pll_enable+0x3c>)
   83fa4:	687b      	ldr	r3, [r7, #4]
   83fa6:	681b      	ldr	r3, [r3, #0]
   83fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83fac:	61d3      	str	r3, [r2, #28]
   83fae:	bf00      	nop
   83fb0:	3708      	adds	r7, #8
   83fb2:	46bd      	mov	sp, r7
   83fb4:	bd80      	pop	{r7, pc}
   83fb6:	bf00      	nop
   83fb8:	000847b5 	.word	0x000847b5
   83fbc:	400e0600 	.word	0x400e0600

00083fc0 <pll_is_locked>:
   83fc0:	b580      	push	{r7, lr}
   83fc2:	b082      	sub	sp, #8
   83fc4:	af00      	add	r7, sp, #0
   83fc6:	6078      	str	r0, [r7, #4]
   83fc8:	687b      	ldr	r3, [r7, #4]
   83fca:	2b00      	cmp	r3, #0
   83fcc:	d103      	bne.n	83fd6 <pll_is_locked+0x16>
   83fce:	4b05      	ldr	r3, [pc, #20]	; (83fe4 <pll_is_locked+0x24>)
   83fd0:	4798      	blx	r3
   83fd2:	4603      	mov	r3, r0
   83fd4:	e002      	b.n	83fdc <pll_is_locked+0x1c>
   83fd6:	4b04      	ldr	r3, [pc, #16]	; (83fe8 <pll_is_locked+0x28>)
   83fd8:	4798      	blx	r3
   83fda:	4603      	mov	r3, r0
   83fdc:	4618      	mov	r0, r3
   83fde:	3708      	adds	r7, #8
   83fe0:	46bd      	mov	sp, r7
   83fe2:	bd80      	pop	{r7, pc}
   83fe4:	000847cd 	.word	0x000847cd
   83fe8:	000847e5 	.word	0x000847e5

00083fec <pll_enable_source>:
   83fec:	b580      	push	{r7, lr}
   83fee:	b082      	sub	sp, #8
   83ff0:	af00      	add	r7, sp, #0
   83ff2:	4603      	mov	r3, r0
   83ff4:	71fb      	strb	r3, [r7, #7]
   83ff6:	79fb      	ldrb	r3, [r7, #7]
   83ff8:	3b03      	subs	r3, #3
   83ffa:	2b04      	cmp	r3, #4
   83ffc:	d808      	bhi.n	84010 <pll_enable_source+0x24>
   83ffe:	79fb      	ldrb	r3, [r7, #7]
   84000:	4618      	mov	r0, r3
   84002:	4b06      	ldr	r3, [pc, #24]	; (8401c <pll_enable_source+0x30>)
   84004:	4798      	blx	r3
   84006:	79fb      	ldrb	r3, [r7, #7]
   84008:	4618      	mov	r0, r3
   8400a:	4b05      	ldr	r3, [pc, #20]	; (84020 <pll_enable_source+0x34>)
   8400c:	4798      	blx	r3
   8400e:	e000      	b.n	84012 <pll_enable_source+0x26>
   84010:	bf00      	nop
   84012:	bf00      	nop
   84014:	3708      	adds	r7, #8
   84016:	46bd      	mov	sp, r7
   84018:	bd80      	pop	{r7, pc}
   8401a:	bf00      	nop
   8401c:	00083d7d 	.word	0x00083d7d
   84020:	00083ee9 	.word	0x00083ee9

00084024 <pll_wait_for_lock>:
   84024:	b580      	push	{r7, lr}
   84026:	b082      	sub	sp, #8
   84028:	af00      	add	r7, sp, #0
   8402a:	6078      	str	r0, [r7, #4]
   8402c:	bf00      	nop
   8402e:	6878      	ldr	r0, [r7, #4]
   84030:	4b04      	ldr	r3, [pc, #16]	; (84044 <pll_wait_for_lock+0x20>)
   84032:	4798      	blx	r3
   84034:	4603      	mov	r3, r0
   84036:	2b00      	cmp	r3, #0
   84038:	d0f9      	beq.n	8402e <pll_wait_for_lock+0xa>
   8403a:	2300      	movs	r3, #0
   8403c:	4618      	mov	r0, r3
   8403e:	3708      	adds	r7, #8
   84040:	46bd      	mov	sp, r7
   84042:	bd80      	pop	{r7, pc}
   84044:	00083fc1 	.word	0x00083fc1

00084048 <sysclk_get_main_hz>:
   84048:	b580      	push	{r7, lr}
   8404a:	af00      	add	r7, sp, #0
   8404c:	2006      	movs	r0, #6
   8404e:	4b04      	ldr	r3, [pc, #16]	; (84060 <sysclk_get_main_hz+0x18>)
   84050:	4798      	blx	r3
   84052:	4602      	mov	r2, r0
   84054:	4613      	mov	r3, r2
   84056:	00db      	lsls	r3, r3, #3
   84058:	1a9b      	subs	r3, r3, r2
   8405a:	005b      	lsls	r3, r3, #1
   8405c:	4618      	mov	r0, r3
   8405e:	bd80      	pop	{r7, pc}
   84060:	00083e75 	.word	0x00083e75

00084064 <sysclk_get_cpu_hz>:
   84064:	b580      	push	{r7, lr}
   84066:	af00      	add	r7, sp, #0
   84068:	4b02      	ldr	r3, [pc, #8]	; (84074 <sysclk_get_cpu_hz+0x10>)
   8406a:	4798      	blx	r3
   8406c:	4603      	mov	r3, r0
   8406e:	085b      	lsrs	r3, r3, #1
   84070:	4618      	mov	r0, r3
   84072:	bd80      	pop	{r7, pc}
   84074:	00084049 	.word	0x00084049

00084078 <sysclk_init>:
   84078:	b590      	push	{r4, r7, lr}
   8407a:	b083      	sub	sp, #12
   8407c:	af00      	add	r7, sp, #0
   8407e:	4811      	ldr	r0, [pc, #68]	; (840c4 <sysclk_init+0x4c>)
   84080:	4b11      	ldr	r3, [pc, #68]	; (840c8 <sysclk_init+0x50>)
   84082:	4798      	blx	r3
   84084:	2006      	movs	r0, #6
   84086:	4b11      	ldr	r3, [pc, #68]	; (840cc <sysclk_init+0x54>)
   84088:	4798      	blx	r3
   8408a:	1d38      	adds	r0, r7, #4
   8408c:	230e      	movs	r3, #14
   8408e:	2201      	movs	r2, #1
   84090:	2106      	movs	r1, #6
   84092:	4c0f      	ldr	r4, [pc, #60]	; (840d0 <sysclk_init+0x58>)
   84094:	47a0      	blx	r4
   84096:	1d3b      	adds	r3, r7, #4
   84098:	2100      	movs	r1, #0
   8409a:	4618      	mov	r0, r3
   8409c:	4b0d      	ldr	r3, [pc, #52]	; (840d4 <sysclk_init+0x5c>)
   8409e:	4798      	blx	r3
   840a0:	2000      	movs	r0, #0
   840a2:	4b0d      	ldr	r3, [pc, #52]	; (840d8 <sysclk_init+0x60>)
   840a4:	4798      	blx	r3
   840a6:	2010      	movs	r0, #16
   840a8:	4b0c      	ldr	r3, [pc, #48]	; (840dc <sysclk_init+0x64>)
   840aa:	4798      	blx	r3
   840ac:	4b0c      	ldr	r3, [pc, #48]	; (840e0 <sysclk_init+0x68>)
   840ae:	4798      	blx	r3
   840b0:	4b0c      	ldr	r3, [pc, #48]	; (840e4 <sysclk_init+0x6c>)
   840b2:	4798      	blx	r3
   840b4:	4603      	mov	r3, r0
   840b6:	4618      	mov	r0, r3
   840b8:	4b03      	ldr	r3, [pc, #12]	; (840c8 <sysclk_init+0x50>)
   840ba:	4798      	blx	r3
   840bc:	bf00      	nop
   840be:	370c      	adds	r7, #12
   840c0:	46bd      	mov	sp, r7
   840c2:	bd90      	pop	{r4, r7, pc}
   840c4:	0501bd00 	.word	0x0501bd00
   840c8:	200700d1 	.word	0x200700d1
   840cc:	00083fed 	.word	0x00083fed
   840d0:	00083f15 	.word	0x00083f15
   840d4:	00083f81 	.word	0x00083f81
   840d8:	00084025 	.word	0x00084025
   840dc:	000845c9 	.word	0x000845c9
   840e0:	0008492d 	.word	0x0008492d
   840e4:	00084065 	.word	0x00084065

000840e8 <sysclk_enable_peripheral_clock>:
   840e8:	b580      	push	{r7, lr}
   840ea:	b082      	sub	sp, #8
   840ec:	af00      	add	r7, sp, #0
   840ee:	6078      	str	r0, [r7, #4]
   840f0:	6878      	ldr	r0, [r7, #4]
   840f2:	4b03      	ldr	r3, [pc, #12]	; (84100 <sysclk_enable_peripheral_clock+0x18>)
   840f4:	4798      	blx	r3
   840f6:	bf00      	nop
   840f8:	3708      	adds	r7, #8
   840fa:	46bd      	mov	sp, r7
   840fc:	bd80      	pop	{r7, pc}
   840fe:	bf00      	nop
   84100:	000847fd 	.word	0x000847fd

00084104 <ioport_init>:
   84104:	b580      	push	{r7, lr}
   84106:	af00      	add	r7, sp, #0
   84108:	200b      	movs	r0, #11
   8410a:	4b06      	ldr	r3, [pc, #24]	; (84124 <ioport_init+0x20>)
   8410c:	4798      	blx	r3
   8410e:	200c      	movs	r0, #12
   84110:	4b04      	ldr	r3, [pc, #16]	; (84124 <ioport_init+0x20>)
   84112:	4798      	blx	r3
   84114:	200d      	movs	r0, #13
   84116:	4b03      	ldr	r3, [pc, #12]	; (84124 <ioport_init+0x20>)
   84118:	4798      	blx	r3
   8411a:	200e      	movs	r0, #14
   8411c:	4b01      	ldr	r3, [pc, #4]	; (84124 <ioport_init+0x20>)
   8411e:	4798      	blx	r3
   84120:	bf00      	nop
   84122:	bd80      	pop	{r7, pc}
   84124:	000840e9 	.word	0x000840e9

00084128 <board_init>:
   84128:	b580      	push	{r7, lr}
   8412a:	af00      	add	r7, sp, #0
   8412c:	4b17      	ldr	r3, [pc, #92]	; (8418c <board_init+0x64>)
   8412e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   84132:	605a      	str	r2, [r3, #4]
   84134:	4b16      	ldr	r3, [pc, #88]	; (84190 <board_init+0x68>)
   84136:	4798      	blx	r3
   84138:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8413c:	203b      	movs	r0, #59	; 0x3b
   8413e:	4b15      	ldr	r3, [pc, #84]	; (84194 <board_init+0x6c>)
   84140:	4798      	blx	r3
   84142:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84146:	2055      	movs	r0, #85	; 0x55
   84148:	4b12      	ldr	r3, [pc, #72]	; (84194 <board_init+0x6c>)
   8414a:	4798      	blx	r3
   8414c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84150:	2056      	movs	r0, #86	; 0x56
   84152:	4b10      	ldr	r3, [pc, #64]	; (84194 <board_init+0x6c>)
   84154:	4798      	blx	r3
   84156:	4910      	ldr	r1, [pc, #64]	; (84198 <board_init+0x70>)
   84158:	2068      	movs	r0, #104	; 0x68
   8415a:	4b0e      	ldr	r3, [pc, #56]	; (84194 <board_init+0x6c>)
   8415c:	4798      	blx	r3
   8415e:	490f      	ldr	r1, [pc, #60]	; (8419c <board_init+0x74>)
   84160:	205c      	movs	r0, #92	; 0x5c
   84162:	4b0c      	ldr	r3, [pc, #48]	; (84194 <board_init+0x6c>)
   84164:	4798      	blx	r3
   84166:	4a0e      	ldr	r2, [pc, #56]	; (841a0 <board_init+0x78>)
   84168:	f44f 7140 	mov.w	r1, #768	; 0x300
   8416c:	480d      	ldr	r0, [pc, #52]	; (841a4 <board_init+0x7c>)
   8416e:	4b0e      	ldr	r3, [pc, #56]	; (841a8 <board_init+0x80>)
   84170:	4798      	blx	r3
   84172:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84176:	202b      	movs	r0, #43	; 0x2b
   84178:	4b06      	ldr	r3, [pc, #24]	; (84194 <board_init+0x6c>)
   8417a:	4798      	blx	r3
   8417c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84180:	202a      	movs	r0, #42	; 0x2a
   84182:	4b04      	ldr	r3, [pc, #16]	; (84194 <board_init+0x6c>)
   84184:	4798      	blx	r3
   84186:	bf00      	nop
   84188:	bd80      	pop	{r7, pc}
   8418a:	bf00      	nop
   8418c:	400e1a50 	.word	0x400e1a50
   84190:	00084105 	.word	0x00084105
   84194:	00084389 	.word	0x00084389
   84198:	28000079 	.word	0x28000079
   8419c:	28000001 	.word	0x28000001
   841a0:	08000001 	.word	0x08000001
   841a4:	400e0e00 	.word	0x400e0e00
   841a8:	000843ad 	.word	0x000843ad

000841ac <pio_pull_up>:
   841ac:	b480      	push	{r7}
   841ae:	b085      	sub	sp, #20
   841b0:	af00      	add	r7, sp, #0
   841b2:	60f8      	str	r0, [r7, #12]
   841b4:	60b9      	str	r1, [r7, #8]
   841b6:	607a      	str	r2, [r7, #4]
   841b8:	687b      	ldr	r3, [r7, #4]
   841ba:	2b00      	cmp	r3, #0
   841bc:	d003      	beq.n	841c6 <pio_pull_up+0x1a>
   841be:	68fb      	ldr	r3, [r7, #12]
   841c0:	68ba      	ldr	r2, [r7, #8]
   841c2:	665a      	str	r2, [r3, #100]	; 0x64
   841c4:	e002      	b.n	841cc <pio_pull_up+0x20>
   841c6:	68fb      	ldr	r3, [r7, #12]
   841c8:	68ba      	ldr	r2, [r7, #8]
   841ca:	661a      	str	r2, [r3, #96]	; 0x60
   841cc:	bf00      	nop
   841ce:	3714      	adds	r7, #20
   841d0:	46bd      	mov	sp, r7
   841d2:	bc80      	pop	{r7}
   841d4:	4770      	bx	lr
   841d6:	bf00      	nop

000841d8 <pio_set_peripheral>:
   841d8:	b480      	push	{r7}
   841da:	b087      	sub	sp, #28
   841dc:	af00      	add	r7, sp, #0
   841de:	60f8      	str	r0, [r7, #12]
   841e0:	60b9      	str	r1, [r7, #8]
   841e2:	607a      	str	r2, [r7, #4]
   841e4:	68fb      	ldr	r3, [r7, #12]
   841e6:	687a      	ldr	r2, [r7, #4]
   841e8:	645a      	str	r2, [r3, #68]	; 0x44
   841ea:	68bb      	ldr	r3, [r7, #8]
   841ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   841f0:	d01f      	beq.n	84232 <pio_set_peripheral+0x5a>
   841f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   841f6:	d805      	bhi.n	84204 <pio_set_peripheral+0x2c>
   841f8:	2b00      	cmp	r3, #0
   841fa:	d027      	beq.n	8424c <pio_set_peripheral+0x74>
   841fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   84200:	d00a      	beq.n	84218 <pio_set_peripheral+0x40>
   84202:	e01f      	b.n	84244 <pio_set_peripheral+0x6c>
   84204:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84208:	d020      	beq.n	8424c <pio_set_peripheral+0x74>
   8420a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8420e:	d01d      	beq.n	8424c <pio_set_peripheral+0x74>
   84210:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   84214:	d01a      	beq.n	8424c <pio_set_peripheral+0x74>
   84216:	e015      	b.n	84244 <pio_set_peripheral+0x6c>
   84218:	68fb      	ldr	r3, [r7, #12]
   8421a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   8421c:	617b      	str	r3, [r7, #20]
   8421e:	68fb      	ldr	r3, [r7, #12]
   84220:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   84222:	687b      	ldr	r3, [r7, #4]
   84224:	43d9      	mvns	r1, r3
   84226:	697b      	ldr	r3, [r7, #20]
   84228:	400b      	ands	r3, r1
   8422a:	401a      	ands	r2, r3
   8422c:	68fb      	ldr	r3, [r7, #12]
   8422e:	671a      	str	r2, [r3, #112]	; 0x70
   84230:	e008      	b.n	84244 <pio_set_peripheral+0x6c>
   84232:	68fb      	ldr	r3, [r7, #12]
   84234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   84236:	617b      	str	r3, [r7, #20]
   84238:	687a      	ldr	r2, [r7, #4]
   8423a:	697b      	ldr	r3, [r7, #20]
   8423c:	431a      	orrs	r2, r3
   8423e:	68fb      	ldr	r3, [r7, #12]
   84240:	671a      	str	r2, [r3, #112]	; 0x70
   84242:	bf00      	nop
   84244:	68fb      	ldr	r3, [r7, #12]
   84246:	687a      	ldr	r2, [r7, #4]
   84248:	605a      	str	r2, [r3, #4]
   8424a:	e000      	b.n	8424e <pio_set_peripheral+0x76>
   8424c:	bf00      	nop
   8424e:	371c      	adds	r7, #28
   84250:	46bd      	mov	sp, r7
   84252:	bc80      	pop	{r7}
   84254:	4770      	bx	lr
   84256:	bf00      	nop

00084258 <pio_set_input>:
   84258:	b580      	push	{r7, lr}
   8425a:	b084      	sub	sp, #16
   8425c:	af00      	add	r7, sp, #0
   8425e:	60f8      	str	r0, [r7, #12]
   84260:	60b9      	str	r1, [r7, #8]
   84262:	607a      	str	r2, [r7, #4]
   84264:	68b9      	ldr	r1, [r7, #8]
   84266:	68f8      	ldr	r0, [r7, #12]
   84268:	4b19      	ldr	r3, [pc, #100]	; (842d0 <pio_set_input+0x78>)
   8426a:	4798      	blx	r3
   8426c:	687b      	ldr	r3, [r7, #4]
   8426e:	f003 0301 	and.w	r3, r3, #1
   84272:	461a      	mov	r2, r3
   84274:	68b9      	ldr	r1, [r7, #8]
   84276:	68f8      	ldr	r0, [r7, #12]
   84278:	4b16      	ldr	r3, [pc, #88]	; (842d4 <pio_set_input+0x7c>)
   8427a:	4798      	blx	r3
   8427c:	687b      	ldr	r3, [r7, #4]
   8427e:	f003 030a 	and.w	r3, r3, #10
   84282:	2b00      	cmp	r3, #0
   84284:	d003      	beq.n	8428e <pio_set_input+0x36>
   84286:	68fb      	ldr	r3, [r7, #12]
   84288:	68ba      	ldr	r2, [r7, #8]
   8428a:	621a      	str	r2, [r3, #32]
   8428c:	e002      	b.n	84294 <pio_set_input+0x3c>
   8428e:	68fb      	ldr	r3, [r7, #12]
   84290:	68ba      	ldr	r2, [r7, #8]
   84292:	625a      	str	r2, [r3, #36]	; 0x24
   84294:	687b      	ldr	r3, [r7, #4]
   84296:	f003 0302 	and.w	r3, r3, #2
   8429a:	2b00      	cmp	r3, #0
   8429c:	d004      	beq.n	842a8 <pio_set_input+0x50>
   8429e:	68fb      	ldr	r3, [r7, #12]
   842a0:	68ba      	ldr	r2, [r7, #8]
   842a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   842a6:	e008      	b.n	842ba <pio_set_input+0x62>
   842a8:	687b      	ldr	r3, [r7, #4]
   842aa:	f003 0308 	and.w	r3, r3, #8
   842ae:	2b00      	cmp	r3, #0
   842b0:	d003      	beq.n	842ba <pio_set_input+0x62>
   842b2:	68fb      	ldr	r3, [r7, #12]
   842b4:	68ba      	ldr	r2, [r7, #8]
   842b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   842ba:	68fb      	ldr	r3, [r7, #12]
   842bc:	68ba      	ldr	r2, [r7, #8]
   842be:	615a      	str	r2, [r3, #20]
   842c0:	68fb      	ldr	r3, [r7, #12]
   842c2:	68ba      	ldr	r2, [r7, #8]
   842c4:	601a      	str	r2, [r3, #0]
   842c6:	bf00      	nop
   842c8:	3710      	adds	r7, #16
   842ca:	46bd      	mov	sp, r7
   842cc:	bd80      	pop	{r7, pc}
   842ce:	bf00      	nop
   842d0:	0008433d 	.word	0x0008433d
   842d4:	000841ad 	.word	0x000841ad

000842d8 <pio_set_output>:
   842d8:	b580      	push	{r7, lr}
   842da:	b084      	sub	sp, #16
   842dc:	af00      	add	r7, sp, #0
   842de:	60f8      	str	r0, [r7, #12]
   842e0:	60b9      	str	r1, [r7, #8]
   842e2:	607a      	str	r2, [r7, #4]
   842e4:	603b      	str	r3, [r7, #0]
   842e6:	68b9      	ldr	r1, [r7, #8]
   842e8:	68f8      	ldr	r0, [r7, #12]
   842ea:	4b12      	ldr	r3, [pc, #72]	; (84334 <pio_set_output+0x5c>)
   842ec:	4798      	blx	r3
   842ee:	69ba      	ldr	r2, [r7, #24]
   842f0:	68b9      	ldr	r1, [r7, #8]
   842f2:	68f8      	ldr	r0, [r7, #12]
   842f4:	4b10      	ldr	r3, [pc, #64]	; (84338 <pio_set_output+0x60>)
   842f6:	4798      	blx	r3
   842f8:	683b      	ldr	r3, [r7, #0]
   842fa:	2b00      	cmp	r3, #0
   842fc:	d003      	beq.n	84306 <pio_set_output+0x2e>
   842fe:	68fb      	ldr	r3, [r7, #12]
   84300:	68ba      	ldr	r2, [r7, #8]
   84302:	651a      	str	r2, [r3, #80]	; 0x50
   84304:	e002      	b.n	8430c <pio_set_output+0x34>
   84306:	68fb      	ldr	r3, [r7, #12]
   84308:	68ba      	ldr	r2, [r7, #8]
   8430a:	655a      	str	r2, [r3, #84]	; 0x54
   8430c:	687b      	ldr	r3, [r7, #4]
   8430e:	2b00      	cmp	r3, #0
   84310:	d003      	beq.n	8431a <pio_set_output+0x42>
   84312:	68fb      	ldr	r3, [r7, #12]
   84314:	68ba      	ldr	r2, [r7, #8]
   84316:	631a      	str	r2, [r3, #48]	; 0x30
   84318:	e002      	b.n	84320 <pio_set_output+0x48>
   8431a:	68fb      	ldr	r3, [r7, #12]
   8431c:	68ba      	ldr	r2, [r7, #8]
   8431e:	635a      	str	r2, [r3, #52]	; 0x34
   84320:	68fb      	ldr	r3, [r7, #12]
   84322:	68ba      	ldr	r2, [r7, #8]
   84324:	611a      	str	r2, [r3, #16]
   84326:	68fb      	ldr	r3, [r7, #12]
   84328:	68ba      	ldr	r2, [r7, #8]
   8432a:	601a      	str	r2, [r3, #0]
   8432c:	bf00      	nop
   8432e:	3710      	adds	r7, #16
   84330:	46bd      	mov	sp, r7
   84332:	bd80      	pop	{r7, pc}
   84334:	0008433d 	.word	0x0008433d
   84338:	000841ad 	.word	0x000841ad

0008433c <pio_disable_interrupt>:
   8433c:	b480      	push	{r7}
   8433e:	b083      	sub	sp, #12
   84340:	af00      	add	r7, sp, #0
   84342:	6078      	str	r0, [r7, #4]
   84344:	6039      	str	r1, [r7, #0]
   84346:	687b      	ldr	r3, [r7, #4]
   84348:	683a      	ldr	r2, [r7, #0]
   8434a:	645a      	str	r2, [r3, #68]	; 0x44
   8434c:	bf00      	nop
   8434e:	370c      	adds	r7, #12
   84350:	46bd      	mov	sp, r7
   84352:	bc80      	pop	{r7}
   84354:	4770      	bx	lr
   84356:	bf00      	nop

00084358 <pio_get_interrupt_status>:
   84358:	b480      	push	{r7}
   8435a:	b083      	sub	sp, #12
   8435c:	af00      	add	r7, sp, #0
   8435e:	6078      	str	r0, [r7, #4]
   84360:	687b      	ldr	r3, [r7, #4]
   84362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   84364:	4618      	mov	r0, r3
   84366:	370c      	adds	r7, #12
   84368:	46bd      	mov	sp, r7
   8436a:	bc80      	pop	{r7}
   8436c:	4770      	bx	lr
   8436e:	bf00      	nop

00084370 <pio_get_interrupt_mask>:
   84370:	b480      	push	{r7}
   84372:	b083      	sub	sp, #12
   84374:	af00      	add	r7, sp, #0
   84376:	6078      	str	r0, [r7, #4]
   84378:	687b      	ldr	r3, [r7, #4]
   8437a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   8437c:	4618      	mov	r0, r3
   8437e:	370c      	adds	r7, #12
   84380:	46bd      	mov	sp, r7
   84382:	bc80      	pop	{r7}
   84384:	4770      	bx	lr
   84386:	bf00      	nop

00084388 <pio_configure_pin>:
   84388:	b580      	push	{r7, lr}
   8438a:	b084      	sub	sp, #16
   8438c:	af00      	add	r7, sp, #0
   8438e:	6078      	str	r0, [r7, #4]
   84390:	6039      	str	r1, [r7, #0]
   84392:	6878      	ldr	r0, [r7, #4]
   84394:	4b04      	ldr	r3, [pc, #16]	; (843a8 <pio_configure_pin+0x20>)
   84396:	4798      	blx	r3
   84398:	60f8      	str	r0, [r7, #12]
   8439a:	bf00      	nop
   8439c:	bf00      	nop
   8439e:	4618      	mov	r0, r3
   843a0:	3710      	adds	r7, #16
   843a2:	46bd      	mov	sp, r7
   843a4:	bd80      	pop	{r7, pc}
   843a6:	bf00      	nop
   843a8:	00084491 	.word	0x00084491

000843ac <pio_configure_pin_group>:
   843ac:	b590      	push	{r4, r7, lr}
   843ae:	b087      	sub	sp, #28
   843b0:	af02      	add	r7, sp, #8
   843b2:	60f8      	str	r0, [r7, #12]
   843b4:	60b9      	str	r1, [r7, #8]
   843b6:	607a      	str	r2, [r7, #4]
   843b8:	687b      	ldr	r3, [r7, #4]
   843ba:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   843be:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   843c2:	d02e      	beq.n	84422 <pio_configure_pin_group+0x76>
   843c4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   843c8:	d806      	bhi.n	843d8 <pio_configure_pin_group+0x2c>
   843ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   843ce:	d00a      	beq.n	843e6 <pio_configure_pin_group+0x3a>
   843d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   843d4:	d016      	beq.n	84404 <pio_configure_pin_group+0x58>
   843d6:	e04c      	b.n	84472 <pio_configure_pin_group+0xc6>
   843d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   843dc:	d027      	beq.n	8442e <pio_configure_pin_group+0x82>
   843de:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   843e2:	d024      	beq.n	8442e <pio_configure_pin_group+0x82>
   843e4:	e045      	b.n	84472 <pio_configure_pin_group+0xc6>
   843e6:	68ba      	ldr	r2, [r7, #8]
   843e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   843ec:	68f8      	ldr	r0, [r7, #12]
   843ee:	4b24      	ldr	r3, [pc, #144]	; (84480 <pio_configure_pin_group+0xd4>)
   843f0:	4798      	blx	r3
   843f2:	687b      	ldr	r3, [r7, #4]
   843f4:	f003 0301 	and.w	r3, r3, #1
   843f8:	461a      	mov	r2, r3
   843fa:	68b9      	ldr	r1, [r7, #8]
   843fc:	68f8      	ldr	r0, [r7, #12]
   843fe:	4b21      	ldr	r3, [pc, #132]	; (84484 <pio_configure_pin_group+0xd8>)
   84400:	4798      	blx	r3
   84402:	e038      	b.n	84476 <pio_configure_pin_group+0xca>
   84404:	68ba      	ldr	r2, [r7, #8]
   84406:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8440a:	68f8      	ldr	r0, [r7, #12]
   8440c:	4b1c      	ldr	r3, [pc, #112]	; (84480 <pio_configure_pin_group+0xd4>)
   8440e:	4798      	blx	r3
   84410:	687b      	ldr	r3, [r7, #4]
   84412:	f003 0301 	and.w	r3, r3, #1
   84416:	461a      	mov	r2, r3
   84418:	68b9      	ldr	r1, [r7, #8]
   8441a:	68f8      	ldr	r0, [r7, #12]
   8441c:	4b19      	ldr	r3, [pc, #100]	; (84484 <pio_configure_pin_group+0xd8>)
   8441e:	4798      	blx	r3
   84420:	e029      	b.n	84476 <pio_configure_pin_group+0xca>
   84422:	687a      	ldr	r2, [r7, #4]
   84424:	68b9      	ldr	r1, [r7, #8]
   84426:	68f8      	ldr	r0, [r7, #12]
   84428:	4b17      	ldr	r3, [pc, #92]	; (84488 <pio_configure_pin_group+0xdc>)
   8442a:	4798      	blx	r3
   8442c:	e023      	b.n	84476 <pio_configure_pin_group+0xca>
   8442e:	687b      	ldr	r3, [r7, #4]
   84430:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
   84434:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84438:	bf0c      	ite	eq
   8443a:	2301      	moveq	r3, #1
   8443c:	2300      	movne	r3, #0
   8443e:	b2db      	uxtb	r3, r3
   84440:	461a      	mov	r2, r3
   84442:	687b      	ldr	r3, [r7, #4]
   84444:	f003 0304 	and.w	r3, r3, #4
   84448:	2b00      	cmp	r3, #0
   8444a:	bf14      	ite	ne
   8444c:	2301      	movne	r3, #1
   8444e:	2300      	moveq	r3, #0
   84450:	b2db      	uxtb	r3, r3
   84452:	4619      	mov	r1, r3
   84454:	687b      	ldr	r3, [r7, #4]
   84456:	f003 0301 	and.w	r3, r3, #1
   8445a:	2b00      	cmp	r3, #0
   8445c:	bf14      	ite	ne
   8445e:	2301      	movne	r3, #1
   84460:	2300      	moveq	r3, #0
   84462:	b2db      	uxtb	r3, r3
   84464:	9300      	str	r3, [sp, #0]
   84466:	460b      	mov	r3, r1
   84468:	68b9      	ldr	r1, [r7, #8]
   8446a:	68f8      	ldr	r0, [r7, #12]
   8446c:	4c07      	ldr	r4, [pc, #28]	; (8448c <pio_configure_pin_group+0xe0>)
   8446e:	47a0      	blx	r4
   84470:	e001      	b.n	84476 <pio_configure_pin_group+0xca>
   84472:	2300      	movs	r3, #0
   84474:	e000      	b.n	84478 <pio_configure_pin_group+0xcc>
   84476:	2301      	movs	r3, #1
   84478:	4618      	mov	r0, r3
   8447a:	3714      	adds	r7, #20
   8447c:	46bd      	mov	sp, r7
   8447e:	bd90      	pop	{r4, r7, pc}
   84480:	000841d9 	.word	0x000841d9
   84484:	000841ad 	.word	0x000841ad
   84488:	00084259 	.word	0x00084259
   8448c:	000842d9 	.word	0x000842d9

00084490 <pio_get_pin_group>:
   84490:	b480      	push	{r7}
   84492:	b085      	sub	sp, #20
   84494:	af00      	add	r7, sp, #0
   84496:	6078      	str	r0, [r7, #4]
   84498:	687b      	ldr	r3, [r7, #4]
   8449a:	095b      	lsrs	r3, r3, #5
   8449c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   844a0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   844a4:	025b      	lsls	r3, r3, #9
   844a6:	60fb      	str	r3, [r7, #12]
   844a8:	68fb      	ldr	r3, [r7, #12]
   844aa:	4618      	mov	r0, r3
   844ac:	3714      	adds	r7, #20
   844ae:	46bd      	mov	sp, r7
   844b0:	bc80      	pop	{r7}
   844b2:	4770      	bx	lr

000844b4 <pio_handler_process>:
   844b4:	b580      	push	{r7, lr}
   844b6:	b084      	sub	sp, #16
   844b8:	af00      	add	r7, sp, #0
   844ba:	6078      	str	r0, [r7, #4]
   844bc:	6039      	str	r1, [r7, #0]
   844be:	6878      	ldr	r0, [r7, #4]
   844c0:	4b26      	ldr	r3, [pc, #152]	; (8455c <pio_handler_process+0xa8>)
   844c2:	4798      	blx	r3
   844c4:	60f8      	str	r0, [r7, #12]
   844c6:	6878      	ldr	r0, [r7, #4]
   844c8:	4b25      	ldr	r3, [pc, #148]	; (84560 <pio_handler_process+0xac>)
   844ca:	4798      	blx	r3
   844cc:	4602      	mov	r2, r0
   844ce:	68fb      	ldr	r3, [r7, #12]
   844d0:	4013      	ands	r3, r2
   844d2:	60fb      	str	r3, [r7, #12]
   844d4:	68fb      	ldr	r3, [r7, #12]
   844d6:	2b00      	cmp	r3, #0
   844d8:	d03c      	beq.n	84554 <pio_handler_process+0xa0>
   844da:	2300      	movs	r3, #0
   844dc:	60bb      	str	r3, [r7, #8]
   844de:	e034      	b.n	8454a <pio_handler_process+0x96>
   844e0:	4a20      	ldr	r2, [pc, #128]	; (84564 <pio_handler_process+0xb0>)
   844e2:	68bb      	ldr	r3, [r7, #8]
   844e4:	011b      	lsls	r3, r3, #4
   844e6:	4413      	add	r3, r2
   844e8:	681a      	ldr	r2, [r3, #0]
   844ea:	683b      	ldr	r3, [r7, #0]
   844ec:	429a      	cmp	r2, r3
   844ee:	d126      	bne.n	8453e <pio_handler_process+0x8a>
   844f0:	4a1c      	ldr	r2, [pc, #112]	; (84564 <pio_handler_process+0xb0>)
   844f2:	68bb      	ldr	r3, [r7, #8]
   844f4:	011b      	lsls	r3, r3, #4
   844f6:	4413      	add	r3, r2
   844f8:	3304      	adds	r3, #4
   844fa:	681a      	ldr	r2, [r3, #0]
   844fc:	68fb      	ldr	r3, [r7, #12]
   844fe:	4013      	ands	r3, r2
   84500:	2b00      	cmp	r3, #0
   84502:	d01c      	beq.n	8453e <pio_handler_process+0x8a>
   84504:	4a17      	ldr	r2, [pc, #92]	; (84564 <pio_handler_process+0xb0>)
   84506:	68bb      	ldr	r3, [r7, #8]
   84508:	011b      	lsls	r3, r3, #4
   8450a:	4413      	add	r3, r2
   8450c:	330c      	adds	r3, #12
   8450e:	681b      	ldr	r3, [r3, #0]
   84510:	4914      	ldr	r1, [pc, #80]	; (84564 <pio_handler_process+0xb0>)
   84512:	68ba      	ldr	r2, [r7, #8]
   84514:	0112      	lsls	r2, r2, #4
   84516:	440a      	add	r2, r1
   84518:	6810      	ldr	r0, [r2, #0]
   8451a:	4912      	ldr	r1, [pc, #72]	; (84564 <pio_handler_process+0xb0>)
   8451c:	68ba      	ldr	r2, [r7, #8]
   8451e:	0112      	lsls	r2, r2, #4
   84520:	440a      	add	r2, r1
   84522:	3204      	adds	r2, #4
   84524:	6812      	ldr	r2, [r2, #0]
   84526:	4611      	mov	r1, r2
   84528:	4798      	blx	r3
   8452a:	4a0e      	ldr	r2, [pc, #56]	; (84564 <pio_handler_process+0xb0>)
   8452c:	68bb      	ldr	r3, [r7, #8]
   8452e:	011b      	lsls	r3, r3, #4
   84530:	4413      	add	r3, r2
   84532:	3304      	adds	r3, #4
   84534:	681b      	ldr	r3, [r3, #0]
   84536:	43db      	mvns	r3, r3
   84538:	68fa      	ldr	r2, [r7, #12]
   8453a:	4013      	ands	r3, r2
   8453c:	60fb      	str	r3, [r7, #12]
   8453e:	68bb      	ldr	r3, [r7, #8]
   84540:	3301      	adds	r3, #1
   84542:	60bb      	str	r3, [r7, #8]
   84544:	68bb      	ldr	r3, [r7, #8]
   84546:	2b06      	cmp	r3, #6
   84548:	d803      	bhi.n	84552 <pio_handler_process+0x9e>
   8454a:	68fb      	ldr	r3, [r7, #12]
   8454c:	2b00      	cmp	r3, #0
   8454e:	d1c7      	bne.n	844e0 <pio_handler_process+0x2c>
   84550:	e000      	b.n	84554 <pio_handler_process+0xa0>
   84552:	bf00      	nop
   84554:	bf00      	nop
   84556:	3710      	adds	r7, #16
   84558:	46bd      	mov	sp, r7
   8455a:	bd80      	pop	{r7, pc}
   8455c:	00084359 	.word	0x00084359
   84560:	00084371 	.word	0x00084371
   84564:	20070a08 	.word	0x20070a08

00084568 <PIOA_Handler>:
   84568:	b580      	push	{r7, lr}
   8456a:	af00      	add	r7, sp, #0
   8456c:	210b      	movs	r1, #11
   8456e:	4802      	ldr	r0, [pc, #8]	; (84578 <PIOA_Handler+0x10>)
   84570:	4b02      	ldr	r3, [pc, #8]	; (8457c <PIOA_Handler+0x14>)
   84572:	4798      	blx	r3
   84574:	bf00      	nop
   84576:	bd80      	pop	{r7, pc}
   84578:	400e0e00 	.word	0x400e0e00
   8457c:	000844b5 	.word	0x000844b5

00084580 <PIOB_Handler>:
   84580:	b580      	push	{r7, lr}
   84582:	af00      	add	r7, sp, #0
   84584:	210c      	movs	r1, #12
   84586:	4802      	ldr	r0, [pc, #8]	; (84590 <PIOB_Handler+0x10>)
   84588:	4b02      	ldr	r3, [pc, #8]	; (84594 <PIOB_Handler+0x14>)
   8458a:	4798      	blx	r3
   8458c:	bf00      	nop
   8458e:	bd80      	pop	{r7, pc}
   84590:	400e1000 	.word	0x400e1000
   84594:	000844b5 	.word	0x000844b5

00084598 <PIOC_Handler>:
   84598:	b580      	push	{r7, lr}
   8459a:	af00      	add	r7, sp, #0
   8459c:	210d      	movs	r1, #13
   8459e:	4802      	ldr	r0, [pc, #8]	; (845a8 <PIOC_Handler+0x10>)
   845a0:	4b02      	ldr	r3, [pc, #8]	; (845ac <PIOC_Handler+0x14>)
   845a2:	4798      	blx	r3
   845a4:	bf00      	nop
   845a6:	bd80      	pop	{r7, pc}
   845a8:	400e1200 	.word	0x400e1200
   845ac:	000844b5 	.word	0x000844b5

000845b0 <PIOD_Handler>:
   845b0:	b580      	push	{r7, lr}
   845b2:	af00      	add	r7, sp, #0
   845b4:	210e      	movs	r1, #14
   845b6:	4802      	ldr	r0, [pc, #8]	; (845c0 <PIOD_Handler+0x10>)
   845b8:	4b02      	ldr	r3, [pc, #8]	; (845c4 <PIOD_Handler+0x14>)
   845ba:	4798      	blx	r3
   845bc:	bf00      	nop
   845be:	bd80      	pop	{r7, pc}
   845c0:	400e1400 	.word	0x400e1400
   845c4:	000844b5 	.word	0x000844b5

000845c8 <pmc_switch_mck_to_pllack>:
   845c8:	b480      	push	{r7}
   845ca:	b085      	sub	sp, #20
   845cc:	af00      	add	r7, sp, #0
   845ce:	6078      	str	r0, [r7, #4]
   845d0:	491c      	ldr	r1, [pc, #112]	; (84644 <pmc_switch_mck_to_pllack+0x7c>)
   845d2:	4b1c      	ldr	r3, [pc, #112]	; (84644 <pmc_switch_mck_to_pllack+0x7c>)
   845d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   845d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   845da:	687b      	ldr	r3, [r7, #4]
   845dc:	4313      	orrs	r3, r2
   845de:	630b      	str	r3, [r1, #48]	; 0x30
   845e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   845e4:	60fb      	str	r3, [r7, #12]
   845e6:	e007      	b.n	845f8 <pmc_switch_mck_to_pllack+0x30>
   845e8:	68fb      	ldr	r3, [r7, #12]
   845ea:	2b00      	cmp	r3, #0
   845ec:	d101      	bne.n	845f2 <pmc_switch_mck_to_pllack+0x2a>
   845ee:	2301      	movs	r3, #1
   845f0:	e023      	b.n	8463a <pmc_switch_mck_to_pllack+0x72>
   845f2:	68fb      	ldr	r3, [r7, #12]
   845f4:	3b01      	subs	r3, #1
   845f6:	60fb      	str	r3, [r7, #12]
   845f8:	4b12      	ldr	r3, [pc, #72]	; (84644 <pmc_switch_mck_to_pllack+0x7c>)
   845fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   845fc:	f003 0308 	and.w	r3, r3, #8
   84600:	2b00      	cmp	r3, #0
   84602:	d0f1      	beq.n	845e8 <pmc_switch_mck_to_pllack+0x20>
   84604:	4a0f      	ldr	r2, [pc, #60]	; (84644 <pmc_switch_mck_to_pllack+0x7c>)
   84606:	4b0f      	ldr	r3, [pc, #60]	; (84644 <pmc_switch_mck_to_pllack+0x7c>)
   84608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8460a:	f023 0303 	bic.w	r3, r3, #3
   8460e:	f043 0302 	orr.w	r3, r3, #2
   84612:	6313      	str	r3, [r2, #48]	; 0x30
   84614:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84618:	60fb      	str	r3, [r7, #12]
   8461a:	e007      	b.n	8462c <pmc_switch_mck_to_pllack+0x64>
   8461c:	68fb      	ldr	r3, [r7, #12]
   8461e:	2b00      	cmp	r3, #0
   84620:	d101      	bne.n	84626 <pmc_switch_mck_to_pllack+0x5e>
   84622:	2301      	movs	r3, #1
   84624:	e009      	b.n	8463a <pmc_switch_mck_to_pllack+0x72>
   84626:	68fb      	ldr	r3, [r7, #12]
   84628:	3b01      	subs	r3, #1
   8462a:	60fb      	str	r3, [r7, #12]
   8462c:	4b05      	ldr	r3, [pc, #20]	; (84644 <pmc_switch_mck_to_pllack+0x7c>)
   8462e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84630:	f003 0308 	and.w	r3, r3, #8
   84634:	2b00      	cmp	r3, #0
   84636:	d0f1      	beq.n	8461c <pmc_switch_mck_to_pllack+0x54>
   84638:	2300      	movs	r3, #0
   8463a:	4618      	mov	r0, r3
   8463c:	3714      	adds	r7, #20
   8463e:	46bd      	mov	sp, r7
   84640:	bc80      	pop	{r7}
   84642:	4770      	bx	lr
   84644:	400e0600 	.word	0x400e0600

00084648 <pmc_switch_sclk_to_32kxtal>:
   84648:	b480      	push	{r7}
   8464a:	b083      	sub	sp, #12
   8464c:	af00      	add	r7, sp, #0
   8464e:	6078      	str	r0, [r7, #4]
   84650:	687b      	ldr	r3, [r7, #4]
   84652:	2b01      	cmp	r3, #1
   84654:	d107      	bne.n	84666 <pmc_switch_sclk_to_32kxtal+0x1e>
   84656:	4a08      	ldr	r2, [pc, #32]	; (84678 <pmc_switch_sclk_to_32kxtal+0x30>)
   84658:	4b07      	ldr	r3, [pc, #28]	; (84678 <pmc_switch_sclk_to_32kxtal+0x30>)
   8465a:	689b      	ldr	r3, [r3, #8]
   8465c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   84660:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   84664:	6093      	str	r3, [r2, #8]
   84666:	4b04      	ldr	r3, [pc, #16]	; (84678 <pmc_switch_sclk_to_32kxtal+0x30>)
   84668:	4a04      	ldr	r2, [pc, #16]	; (8467c <pmc_switch_sclk_to_32kxtal+0x34>)
   8466a:	601a      	str	r2, [r3, #0]
   8466c:	bf00      	nop
   8466e:	370c      	adds	r7, #12
   84670:	46bd      	mov	sp, r7
   84672:	bc80      	pop	{r7}
   84674:	4770      	bx	lr
   84676:	bf00      	nop
   84678:	400e1a10 	.word	0x400e1a10
   8467c:	a5000008 	.word	0xa5000008

00084680 <pmc_osc_is_ready_32kxtal>:
   84680:	b480      	push	{r7}
   84682:	af00      	add	r7, sp, #0
   84684:	4b09      	ldr	r3, [pc, #36]	; (846ac <pmc_osc_is_ready_32kxtal+0x2c>)
   84686:	695b      	ldr	r3, [r3, #20]
   84688:	f003 0380 	and.w	r3, r3, #128	; 0x80
   8468c:	2b00      	cmp	r3, #0
   8468e:	d007      	beq.n	846a0 <pmc_osc_is_ready_32kxtal+0x20>
   84690:	4b07      	ldr	r3, [pc, #28]	; (846b0 <pmc_osc_is_ready_32kxtal+0x30>)
   84692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84694:	f003 0380 	and.w	r3, r3, #128	; 0x80
   84698:	2b00      	cmp	r3, #0
   8469a:	d001      	beq.n	846a0 <pmc_osc_is_ready_32kxtal+0x20>
   8469c:	2301      	movs	r3, #1
   8469e:	e000      	b.n	846a2 <pmc_osc_is_ready_32kxtal+0x22>
   846a0:	2300      	movs	r3, #0
   846a2:	4618      	mov	r0, r3
   846a4:	46bd      	mov	sp, r7
   846a6:	bc80      	pop	{r7}
   846a8:	4770      	bx	lr
   846aa:	bf00      	nop
   846ac:	400e1a10 	.word	0x400e1a10
   846b0:	400e0600 	.word	0x400e0600

000846b4 <pmc_switch_mainck_to_fastrc>:
   846b4:	b480      	push	{r7}
   846b6:	b083      	sub	sp, #12
   846b8:	af00      	add	r7, sp, #0
   846ba:	6078      	str	r0, [r7, #4]
   846bc:	4a18      	ldr	r2, [pc, #96]	; (84720 <pmc_switch_mainck_to_fastrc+0x6c>)
   846be:	4b18      	ldr	r3, [pc, #96]	; (84720 <pmc_switch_mainck_to_fastrc+0x6c>)
   846c0:	6a1b      	ldr	r3, [r3, #32]
   846c2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   846c6:	f043 0308 	orr.w	r3, r3, #8
   846ca:	6213      	str	r3, [r2, #32]
   846cc:	bf00      	nop
   846ce:	4b14      	ldr	r3, [pc, #80]	; (84720 <pmc_switch_mainck_to_fastrc+0x6c>)
   846d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   846d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   846d6:	2b00      	cmp	r3, #0
   846d8:	d0f9      	beq.n	846ce <pmc_switch_mainck_to_fastrc+0x1a>
   846da:	4911      	ldr	r1, [pc, #68]	; (84720 <pmc_switch_mainck_to_fastrc+0x6c>)
   846dc:	4b10      	ldr	r3, [pc, #64]	; (84720 <pmc_switch_mainck_to_fastrc+0x6c>)
   846de:	6a1b      	ldr	r3, [r3, #32]
   846e0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   846e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   846e8:	687a      	ldr	r2, [r7, #4]
   846ea:	4313      	orrs	r3, r2
   846ec:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   846f0:	620b      	str	r3, [r1, #32]
   846f2:	bf00      	nop
   846f4:	4b0a      	ldr	r3, [pc, #40]	; (84720 <pmc_switch_mainck_to_fastrc+0x6c>)
   846f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   846f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   846fc:	2b00      	cmp	r3, #0
   846fe:	d0f9      	beq.n	846f4 <pmc_switch_mainck_to_fastrc+0x40>
   84700:	4a07      	ldr	r2, [pc, #28]	; (84720 <pmc_switch_mainck_to_fastrc+0x6c>)
   84702:	4b07      	ldr	r3, [pc, #28]	; (84720 <pmc_switch_mainck_to_fastrc+0x6c>)
   84704:	6a1b      	ldr	r3, [r3, #32]
   84706:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   8470a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8470e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84712:	6213      	str	r3, [r2, #32]
   84714:	bf00      	nop
   84716:	370c      	adds	r7, #12
   84718:	46bd      	mov	sp, r7
   8471a:	bc80      	pop	{r7}
   8471c:	4770      	bx	lr
   8471e:	bf00      	nop
   84720:	400e0600 	.word	0x400e0600

00084724 <pmc_switch_mainck_to_xtal>:
   84724:	b480      	push	{r7}
   84726:	b083      	sub	sp, #12
   84728:	af00      	add	r7, sp, #0
   8472a:	6078      	str	r0, [r7, #4]
   8472c:	6039      	str	r1, [r7, #0]
   8472e:	687b      	ldr	r3, [r7, #4]
   84730:	2b00      	cmp	r3, #0
   84732:	d008      	beq.n	84746 <pmc_switch_mainck_to_xtal+0x22>
   84734:	4916      	ldr	r1, [pc, #88]	; (84790 <pmc_switch_mainck_to_xtal+0x6c>)
   84736:	4b16      	ldr	r3, [pc, #88]	; (84790 <pmc_switch_mainck_to_xtal+0x6c>)
   84738:	6a1b      	ldr	r3, [r3, #32]
   8473a:	4a16      	ldr	r2, [pc, #88]	; (84794 <pmc_switch_mainck_to_xtal+0x70>)
   8473c:	401a      	ands	r2, r3
   8473e:	4b16      	ldr	r3, [pc, #88]	; (84798 <pmc_switch_mainck_to_xtal+0x74>)
   84740:	4313      	orrs	r3, r2
   84742:	620b      	str	r3, [r1, #32]
   84744:	e01e      	b.n	84784 <pmc_switch_mainck_to_xtal+0x60>
   84746:	4912      	ldr	r1, [pc, #72]	; (84790 <pmc_switch_mainck_to_xtal+0x6c>)
   84748:	4b11      	ldr	r3, [pc, #68]	; (84790 <pmc_switch_mainck_to_xtal+0x6c>)
   8474a:	6a1b      	ldr	r3, [r3, #32]
   8474c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   84750:	f023 0303 	bic.w	r3, r3, #3
   84754:	683a      	ldr	r2, [r7, #0]
   84756:	0212      	lsls	r2, r2, #8
   84758:	b292      	uxth	r2, r2
   8475a:	4313      	orrs	r3, r2
   8475c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84760:	f043 0301 	orr.w	r3, r3, #1
   84764:	620b      	str	r3, [r1, #32]
   84766:	bf00      	nop
   84768:	4b09      	ldr	r3, [pc, #36]	; (84790 <pmc_switch_mainck_to_xtal+0x6c>)
   8476a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8476c:	f003 0301 	and.w	r3, r3, #1
   84770:	2b00      	cmp	r3, #0
   84772:	d0f9      	beq.n	84768 <pmc_switch_mainck_to_xtal+0x44>
   84774:	4a06      	ldr	r2, [pc, #24]	; (84790 <pmc_switch_mainck_to_xtal+0x6c>)
   84776:	4b06      	ldr	r3, [pc, #24]	; (84790 <pmc_switch_mainck_to_xtal+0x6c>)
   84778:	6a1b      	ldr	r3, [r3, #32]
   8477a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8477e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   84782:	6213      	str	r3, [r2, #32]
   84784:	bf00      	nop
   84786:	370c      	adds	r7, #12
   84788:	46bd      	mov	sp, r7
   8478a:	bc80      	pop	{r7}
   8478c:	4770      	bx	lr
   8478e:	bf00      	nop
   84790:	400e0600 	.word	0x400e0600
   84794:	fec8fffc 	.word	0xfec8fffc
   84798:	01370002 	.word	0x01370002

0008479c <pmc_osc_is_ready_mainck>:
   8479c:	b480      	push	{r7}
   8479e:	af00      	add	r7, sp, #0
   847a0:	4b03      	ldr	r3, [pc, #12]	; (847b0 <pmc_osc_is_ready_mainck+0x14>)
   847a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   847a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   847a8:	4618      	mov	r0, r3
   847aa:	46bd      	mov	sp, r7
   847ac:	bc80      	pop	{r7}
   847ae:	4770      	bx	lr
   847b0:	400e0600 	.word	0x400e0600

000847b4 <pmc_disable_pllack>:
   847b4:	b480      	push	{r7}
   847b6:	af00      	add	r7, sp, #0
   847b8:	4b03      	ldr	r3, [pc, #12]	; (847c8 <pmc_disable_pllack+0x14>)
   847ba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   847be:	629a      	str	r2, [r3, #40]	; 0x28
   847c0:	bf00      	nop
   847c2:	46bd      	mov	sp, r7
   847c4:	bc80      	pop	{r7}
   847c6:	4770      	bx	lr
   847c8:	400e0600 	.word	0x400e0600

000847cc <pmc_is_locked_pllack>:
   847cc:	b480      	push	{r7}
   847ce:	af00      	add	r7, sp, #0
   847d0:	4b03      	ldr	r3, [pc, #12]	; (847e0 <pmc_is_locked_pllack+0x14>)
   847d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   847d4:	f003 0302 	and.w	r3, r3, #2
   847d8:	4618      	mov	r0, r3
   847da:	46bd      	mov	sp, r7
   847dc:	bc80      	pop	{r7}
   847de:	4770      	bx	lr
   847e0:	400e0600 	.word	0x400e0600

000847e4 <pmc_is_locked_upll>:
   847e4:	b480      	push	{r7}
   847e6:	af00      	add	r7, sp, #0
   847e8:	4b03      	ldr	r3, [pc, #12]	; (847f8 <pmc_is_locked_upll+0x14>)
   847ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   847ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
   847f0:	4618      	mov	r0, r3
   847f2:	46bd      	mov	sp, r7
   847f4:	bc80      	pop	{r7}
   847f6:	4770      	bx	lr
   847f8:	400e0600 	.word	0x400e0600

000847fc <pmc_enable_periph_clk>:
   847fc:	b480      	push	{r7}
   847fe:	b083      	sub	sp, #12
   84800:	af00      	add	r7, sp, #0
   84802:	6078      	str	r0, [r7, #4]
   84804:	687b      	ldr	r3, [r7, #4]
   84806:	2b2c      	cmp	r3, #44	; 0x2c
   84808:	d901      	bls.n	8480e <pmc_enable_periph_clk+0x12>
   8480a:	2301      	movs	r3, #1
   8480c:	e02f      	b.n	8486e <pmc_enable_periph_clk+0x72>
   8480e:	687b      	ldr	r3, [r7, #4]
   84810:	2b1f      	cmp	r3, #31
   84812:	d813      	bhi.n	8483c <pmc_enable_periph_clk+0x40>
   84814:	4b18      	ldr	r3, [pc, #96]	; (84878 <pmc_enable_periph_clk+0x7c>)
   84816:	699a      	ldr	r2, [r3, #24]
   84818:	2101      	movs	r1, #1
   8481a:	687b      	ldr	r3, [r7, #4]
   8481c:	fa01 f303 	lsl.w	r3, r1, r3
   84820:	401a      	ands	r2, r3
   84822:	2101      	movs	r1, #1
   84824:	687b      	ldr	r3, [r7, #4]
   84826:	fa01 f303 	lsl.w	r3, r1, r3
   8482a:	429a      	cmp	r2, r3
   8482c:	d01e      	beq.n	8486c <pmc_enable_periph_clk+0x70>
   8482e:	4a12      	ldr	r2, [pc, #72]	; (84878 <pmc_enable_periph_clk+0x7c>)
   84830:	2101      	movs	r1, #1
   84832:	687b      	ldr	r3, [r7, #4]
   84834:	fa01 f303 	lsl.w	r3, r1, r3
   84838:	6113      	str	r3, [r2, #16]
   8483a:	e017      	b.n	8486c <pmc_enable_periph_clk+0x70>
   8483c:	687b      	ldr	r3, [r7, #4]
   8483e:	3b20      	subs	r3, #32
   84840:	607b      	str	r3, [r7, #4]
   84842:	4b0d      	ldr	r3, [pc, #52]	; (84878 <pmc_enable_periph_clk+0x7c>)
   84844:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   84848:	2101      	movs	r1, #1
   8484a:	687b      	ldr	r3, [r7, #4]
   8484c:	fa01 f303 	lsl.w	r3, r1, r3
   84850:	401a      	ands	r2, r3
   84852:	2101      	movs	r1, #1
   84854:	687b      	ldr	r3, [r7, #4]
   84856:	fa01 f303 	lsl.w	r3, r1, r3
   8485a:	429a      	cmp	r2, r3
   8485c:	d006      	beq.n	8486c <pmc_enable_periph_clk+0x70>
   8485e:	4a06      	ldr	r2, [pc, #24]	; (84878 <pmc_enable_periph_clk+0x7c>)
   84860:	2101      	movs	r1, #1
   84862:	687b      	ldr	r3, [r7, #4]
   84864:	fa01 f303 	lsl.w	r3, r1, r3
   84868:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
   8486c:	2300      	movs	r3, #0
   8486e:	4618      	mov	r0, r3
   84870:	370c      	adds	r7, #12
   84872:	46bd      	mov	sp, r7
   84874:	bc80      	pop	{r7}
   84876:	4770      	bx	lr
   84878:	400e0600 	.word	0x400e0600

0008487c <Dummy_Handler>:
   8487c:	b480      	push	{r7}
   8487e:	af00      	add	r7, sp, #0
   84880:	e7fe      	b.n	84880 <Dummy_Handler+0x4>
   84882:	bf00      	nop

00084884 <Reset_Handler>:
   84884:	b580      	push	{r7, lr}
   84886:	b082      	sub	sp, #8
   84888:	af00      	add	r7, sp, #0
   8488a:	4b1e      	ldr	r3, [pc, #120]	; (84904 <Reset_Handler+0x80>)
   8488c:	607b      	str	r3, [r7, #4]
   8488e:	4b1e      	ldr	r3, [pc, #120]	; (84908 <Reset_Handler+0x84>)
   84890:	603b      	str	r3, [r7, #0]
   84892:	687a      	ldr	r2, [r7, #4]
   84894:	683b      	ldr	r3, [r7, #0]
   84896:	429a      	cmp	r2, r3
   84898:	d00c      	beq.n	848b4 <Reset_Handler+0x30>
   8489a:	e007      	b.n	848ac <Reset_Handler+0x28>
   8489c:	683b      	ldr	r3, [r7, #0]
   8489e:	1d1a      	adds	r2, r3, #4
   848a0:	603a      	str	r2, [r7, #0]
   848a2:	687a      	ldr	r2, [r7, #4]
   848a4:	1d11      	adds	r1, r2, #4
   848a6:	6079      	str	r1, [r7, #4]
   848a8:	6812      	ldr	r2, [r2, #0]
   848aa:	601a      	str	r2, [r3, #0]
   848ac:	683b      	ldr	r3, [r7, #0]
   848ae:	4a17      	ldr	r2, [pc, #92]	; (8490c <Reset_Handler+0x88>)
   848b0:	4293      	cmp	r3, r2
   848b2:	d3f3      	bcc.n	8489c <Reset_Handler+0x18>
   848b4:	4b16      	ldr	r3, [pc, #88]	; (84910 <Reset_Handler+0x8c>)
   848b6:	603b      	str	r3, [r7, #0]
   848b8:	e004      	b.n	848c4 <Reset_Handler+0x40>
   848ba:	683b      	ldr	r3, [r7, #0]
   848bc:	1d1a      	adds	r2, r3, #4
   848be:	603a      	str	r2, [r7, #0]
   848c0:	2200      	movs	r2, #0
   848c2:	601a      	str	r2, [r3, #0]
   848c4:	683b      	ldr	r3, [r7, #0]
   848c6:	4a13      	ldr	r2, [pc, #76]	; (84914 <Reset_Handler+0x90>)
   848c8:	4293      	cmp	r3, r2
   848ca:	d3f6      	bcc.n	848ba <Reset_Handler+0x36>
   848cc:	4b12      	ldr	r3, [pc, #72]	; (84918 <Reset_Handler+0x94>)
   848ce:	607b      	str	r3, [r7, #4]
   848d0:	4a12      	ldr	r2, [pc, #72]	; (8491c <Reset_Handler+0x98>)
   848d2:	687b      	ldr	r3, [r7, #4]
   848d4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   848d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   848dc:	6093      	str	r3, [r2, #8]
   848de:	687b      	ldr	r3, [r7, #4]
   848e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   848e4:	d309      	bcc.n	848fa <Reset_Handler+0x76>
   848e6:	687b      	ldr	r3, [r7, #4]
   848e8:	4a0d      	ldr	r2, [pc, #52]	; (84920 <Reset_Handler+0x9c>)
   848ea:	4293      	cmp	r3, r2
   848ec:	d805      	bhi.n	848fa <Reset_Handler+0x76>
   848ee:	4a0b      	ldr	r2, [pc, #44]	; (8491c <Reset_Handler+0x98>)
   848f0:	4b0a      	ldr	r3, [pc, #40]	; (8491c <Reset_Handler+0x98>)
   848f2:	689b      	ldr	r3, [r3, #8]
   848f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   848f8:	6093      	str	r3, [r2, #8]
   848fa:	4b0a      	ldr	r3, [pc, #40]	; (84924 <Reset_Handler+0xa0>)
   848fc:	4798      	blx	r3
   848fe:	4b0a      	ldr	r3, [pc, #40]	; (84928 <Reset_Handler+0xa4>)
   84900:	4798      	blx	r3
   84902:	e7fe      	b.n	84902 <Reset_Handler+0x7e>
   84904:	000869fc 	.word	0x000869fc
   84908:	20070000 	.word	0x20070000
   8490c:	200709dc 	.word	0x200709dc
   84910:	200709dc 	.word	0x200709dc
   84914:	20070b54 	.word	0x20070b54
   84918:	00080000 	.word	0x00080000
   8491c:	e000ed00 	.word	0xe000ed00
   84920:	200fffff 	.word	0x200fffff
   84924:	00084ccd 	.word	0x00084ccd
   84928:	00084b6d 	.word	0x00084b6d

0008492c <SystemCoreClockUpdate>:
   8492c:	b480      	push	{r7}
   8492e:	af00      	add	r7, sp, #0
   84930:	4b57      	ldr	r3, [pc, #348]	; (84a90 <SystemCoreClockUpdate+0x164>)
   84932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84934:	f003 0303 	and.w	r3, r3, #3
   84938:	2b03      	cmp	r3, #3
   8493a:	f200 808a 	bhi.w	84a52 <SystemCoreClockUpdate+0x126>
   8493e:	a201      	add	r2, pc, #4	; (adr r2, 84944 <SystemCoreClockUpdate+0x18>)
   84940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84944:	00084955 	.word	0x00084955
   84948:	00084975 	.word	0x00084975
   8494c:	000849c5 	.word	0x000849c5
   84950:	000849c5 	.word	0x000849c5
   84954:	4b4f      	ldr	r3, [pc, #316]	; (84a94 <SystemCoreClockUpdate+0x168>)
   84956:	695b      	ldr	r3, [r3, #20]
   84958:	f003 0380 	and.w	r3, r3, #128	; 0x80
   8495c:	2b00      	cmp	r3, #0
   8495e:	d004      	beq.n	8496a <SystemCoreClockUpdate+0x3e>
   84960:	4b4d      	ldr	r3, [pc, #308]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   84962:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   84966:	601a      	str	r2, [r3, #0]
   84968:	e073      	b.n	84a52 <SystemCoreClockUpdate+0x126>
   8496a:	4b4b      	ldr	r3, [pc, #300]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   8496c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   84970:	601a      	str	r2, [r3, #0]
   84972:	e06e      	b.n	84a52 <SystemCoreClockUpdate+0x126>
   84974:	4b46      	ldr	r3, [pc, #280]	; (84a90 <SystemCoreClockUpdate+0x164>)
   84976:	6a1b      	ldr	r3, [r3, #32]
   84978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8497c:	2b00      	cmp	r3, #0
   8497e:	d003      	beq.n	84988 <SystemCoreClockUpdate+0x5c>
   84980:	4b45      	ldr	r3, [pc, #276]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   84982:	4a46      	ldr	r2, [pc, #280]	; (84a9c <SystemCoreClockUpdate+0x170>)
   84984:	601a      	str	r2, [r3, #0]
   84986:	e064      	b.n	84a52 <SystemCoreClockUpdate+0x126>
   84988:	4b43      	ldr	r3, [pc, #268]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   8498a:	4a45      	ldr	r2, [pc, #276]	; (84aa0 <SystemCoreClockUpdate+0x174>)
   8498c:	601a      	str	r2, [r3, #0]
   8498e:	4b40      	ldr	r3, [pc, #256]	; (84a90 <SystemCoreClockUpdate+0x164>)
   84990:	6a1b      	ldr	r3, [r3, #32]
   84992:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84996:	2b10      	cmp	r3, #16
   84998:	d004      	beq.n	849a4 <SystemCoreClockUpdate+0x78>
   8499a:	2b20      	cmp	r3, #32
   8499c:	d008      	beq.n	849b0 <SystemCoreClockUpdate+0x84>
   8499e:	2b00      	cmp	r3, #0
   849a0:	d00e      	beq.n	849c0 <SystemCoreClockUpdate+0x94>
   849a2:	e00e      	b.n	849c2 <SystemCoreClockUpdate+0x96>
   849a4:	4b3c      	ldr	r3, [pc, #240]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   849a6:	681b      	ldr	r3, [r3, #0]
   849a8:	005b      	lsls	r3, r3, #1
   849aa:	4a3b      	ldr	r2, [pc, #236]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   849ac:	6013      	str	r3, [r2, #0]
   849ae:	e008      	b.n	849c2 <SystemCoreClockUpdate+0x96>
   849b0:	4b39      	ldr	r3, [pc, #228]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   849b2:	681a      	ldr	r2, [r3, #0]
   849b4:	4613      	mov	r3, r2
   849b6:	005b      	lsls	r3, r3, #1
   849b8:	4413      	add	r3, r2
   849ba:	4a37      	ldr	r2, [pc, #220]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   849bc:	6013      	str	r3, [r2, #0]
   849be:	e000      	b.n	849c2 <SystemCoreClockUpdate+0x96>
   849c0:	bf00      	nop
   849c2:	e046      	b.n	84a52 <SystemCoreClockUpdate+0x126>
   849c4:	4b32      	ldr	r3, [pc, #200]	; (84a90 <SystemCoreClockUpdate+0x164>)
   849c6:	6a1b      	ldr	r3, [r3, #32]
   849c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   849cc:	2b00      	cmp	r3, #0
   849ce:	d003      	beq.n	849d8 <SystemCoreClockUpdate+0xac>
   849d0:	4b31      	ldr	r3, [pc, #196]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   849d2:	4a32      	ldr	r2, [pc, #200]	; (84a9c <SystemCoreClockUpdate+0x170>)
   849d4:	601a      	str	r2, [r3, #0]
   849d6:	e01c      	b.n	84a12 <SystemCoreClockUpdate+0xe6>
   849d8:	4b2f      	ldr	r3, [pc, #188]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   849da:	4a31      	ldr	r2, [pc, #196]	; (84aa0 <SystemCoreClockUpdate+0x174>)
   849dc:	601a      	str	r2, [r3, #0]
   849de:	4b2c      	ldr	r3, [pc, #176]	; (84a90 <SystemCoreClockUpdate+0x164>)
   849e0:	6a1b      	ldr	r3, [r3, #32]
   849e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   849e6:	2b10      	cmp	r3, #16
   849e8:	d004      	beq.n	849f4 <SystemCoreClockUpdate+0xc8>
   849ea:	2b20      	cmp	r3, #32
   849ec:	d008      	beq.n	84a00 <SystemCoreClockUpdate+0xd4>
   849ee:	2b00      	cmp	r3, #0
   849f0:	d00e      	beq.n	84a10 <SystemCoreClockUpdate+0xe4>
   849f2:	e00e      	b.n	84a12 <SystemCoreClockUpdate+0xe6>
   849f4:	4b28      	ldr	r3, [pc, #160]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   849f6:	681b      	ldr	r3, [r3, #0]
   849f8:	005b      	lsls	r3, r3, #1
   849fa:	4a27      	ldr	r2, [pc, #156]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   849fc:	6013      	str	r3, [r2, #0]
   849fe:	e008      	b.n	84a12 <SystemCoreClockUpdate+0xe6>
   84a00:	4b25      	ldr	r3, [pc, #148]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   84a02:	681a      	ldr	r2, [r3, #0]
   84a04:	4613      	mov	r3, r2
   84a06:	005b      	lsls	r3, r3, #1
   84a08:	4413      	add	r3, r2
   84a0a:	4a23      	ldr	r2, [pc, #140]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   84a0c:	6013      	str	r3, [r2, #0]
   84a0e:	e000      	b.n	84a12 <SystemCoreClockUpdate+0xe6>
   84a10:	bf00      	nop
   84a12:	4b1f      	ldr	r3, [pc, #124]	; (84a90 <SystemCoreClockUpdate+0x164>)
   84a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84a16:	f003 0303 	and.w	r3, r3, #3
   84a1a:	2b02      	cmp	r3, #2
   84a1c:	d115      	bne.n	84a4a <SystemCoreClockUpdate+0x11e>
   84a1e:	4b1c      	ldr	r3, [pc, #112]	; (84a90 <SystemCoreClockUpdate+0x164>)
   84a20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   84a22:	4b20      	ldr	r3, [pc, #128]	; (84aa4 <SystemCoreClockUpdate+0x178>)
   84a24:	4013      	ands	r3, r2
   84a26:	0c1b      	lsrs	r3, r3, #16
   84a28:	3301      	adds	r3, #1
   84a2a:	4a1b      	ldr	r2, [pc, #108]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   84a2c:	6812      	ldr	r2, [r2, #0]
   84a2e:	fb02 f303 	mul.w	r3, r2, r3
   84a32:	4a19      	ldr	r2, [pc, #100]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   84a34:	6013      	str	r3, [r2, #0]
   84a36:	4b16      	ldr	r3, [pc, #88]	; (84a90 <SystemCoreClockUpdate+0x164>)
   84a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   84a3a:	b2db      	uxtb	r3, r3
   84a3c:	4a16      	ldr	r2, [pc, #88]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   84a3e:	6812      	ldr	r2, [r2, #0]
   84a40:	fbb2 f3f3 	udiv	r3, r2, r3
   84a44:	4a14      	ldr	r2, [pc, #80]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   84a46:	6013      	str	r3, [r2, #0]
   84a48:	e002      	b.n	84a50 <SystemCoreClockUpdate+0x124>
   84a4a:	4b13      	ldr	r3, [pc, #76]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   84a4c:	4a16      	ldr	r2, [pc, #88]	; (84aa8 <SystemCoreClockUpdate+0x17c>)
   84a4e:	601a      	str	r2, [r3, #0]
   84a50:	bf00      	nop
   84a52:	4b0f      	ldr	r3, [pc, #60]	; (84a90 <SystemCoreClockUpdate+0x164>)
   84a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84a56:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84a5a:	2b70      	cmp	r3, #112	; 0x70
   84a5c:	d108      	bne.n	84a70 <SystemCoreClockUpdate+0x144>
   84a5e:	4b0e      	ldr	r3, [pc, #56]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   84a60:	681b      	ldr	r3, [r3, #0]
   84a62:	4a12      	ldr	r2, [pc, #72]	; (84aac <SystemCoreClockUpdate+0x180>)
   84a64:	fba2 2303 	umull	r2, r3, r2, r3
   84a68:	085b      	lsrs	r3, r3, #1
   84a6a:	4a0b      	ldr	r2, [pc, #44]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   84a6c:	6013      	str	r3, [r2, #0]
   84a6e:	e00a      	b.n	84a86 <SystemCoreClockUpdate+0x15a>
   84a70:	4b07      	ldr	r3, [pc, #28]	; (84a90 <SystemCoreClockUpdate+0x164>)
   84a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84a74:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84a78:	091b      	lsrs	r3, r3, #4
   84a7a:	4a07      	ldr	r2, [pc, #28]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   84a7c:	6812      	ldr	r2, [r2, #0]
   84a7e:	fa22 f303 	lsr.w	r3, r2, r3
   84a82:	4a05      	ldr	r2, [pc, #20]	; (84a98 <SystemCoreClockUpdate+0x16c>)
   84a84:	6013      	str	r3, [r2, #0]
   84a86:	bf00      	nop
   84a88:	46bd      	mov	sp, r7
   84a8a:	bc80      	pop	{r7}
   84a8c:	4770      	bx	lr
   84a8e:	bf00      	nop
   84a90:	400e0600 	.word	0x400e0600
   84a94:	400e1a10 	.word	0x400e1a10
   84a98:	20070198 	.word	0x20070198
   84a9c:	00b71b00 	.word	0x00b71b00
   84aa0:	003d0900 	.word	0x003d0900
   84aa4:	07ff0000 	.word	0x07ff0000
   84aa8:	0e4e1c00 	.word	0x0e4e1c00
   84aac:	aaaaaaab 	.word	0xaaaaaaab

00084ab0 <_sbrk>:
   84ab0:	b480      	push	{r7}
   84ab2:	b085      	sub	sp, #20
   84ab4:	af00      	add	r7, sp, #0
   84ab6:	6078      	str	r0, [r7, #4]
   84ab8:	4b10      	ldr	r3, [pc, #64]	; (84afc <_sbrk+0x4c>)
   84aba:	60fb      	str	r3, [r7, #12]
   84abc:	4b10      	ldr	r3, [pc, #64]	; (84b00 <_sbrk+0x50>)
   84abe:	681b      	ldr	r3, [r3, #0]
   84ac0:	2b00      	cmp	r3, #0
   84ac2:	d102      	bne.n	84aca <_sbrk+0x1a>
   84ac4:	4b0e      	ldr	r3, [pc, #56]	; (84b00 <_sbrk+0x50>)
   84ac6:	4a0f      	ldr	r2, [pc, #60]	; (84b04 <_sbrk+0x54>)
   84ac8:	601a      	str	r2, [r3, #0]
   84aca:	4b0d      	ldr	r3, [pc, #52]	; (84b00 <_sbrk+0x50>)
   84acc:	681b      	ldr	r3, [r3, #0]
   84ace:	60bb      	str	r3, [r7, #8]
   84ad0:	68ba      	ldr	r2, [r7, #8]
   84ad2:	687b      	ldr	r3, [r7, #4]
   84ad4:	441a      	add	r2, r3
   84ad6:	68fb      	ldr	r3, [r7, #12]
   84ad8:	429a      	cmp	r2, r3
   84ada:	dd02      	ble.n	84ae2 <_sbrk+0x32>
   84adc:	f04f 33ff 	mov.w	r3, #4294967295
   84ae0:	e006      	b.n	84af0 <_sbrk+0x40>
   84ae2:	4b07      	ldr	r3, [pc, #28]	; (84b00 <_sbrk+0x50>)
   84ae4:	681a      	ldr	r2, [r3, #0]
   84ae6:	687b      	ldr	r3, [r7, #4]
   84ae8:	4413      	add	r3, r2
   84aea:	4a05      	ldr	r2, [pc, #20]	; (84b00 <_sbrk+0x50>)
   84aec:	6013      	str	r3, [r2, #0]
   84aee:	68bb      	ldr	r3, [r7, #8]
   84af0:	4618      	mov	r0, r3
   84af2:	3714      	adds	r7, #20
   84af4:	46bd      	mov	sp, r7
   84af6:	bc80      	pop	{r7}
   84af8:	4770      	bx	lr
   84afa:	bf00      	nop
   84afc:	20087ffc 	.word	0x20087ffc
   84b00:	20070a78 	.word	0x20070a78
   84b04:	20072b58 	.word	0x20072b58

00084b08 <_close>:
   84b08:	b480      	push	{r7}
   84b0a:	b083      	sub	sp, #12
   84b0c:	af00      	add	r7, sp, #0
   84b0e:	6078      	str	r0, [r7, #4]
   84b10:	f04f 33ff 	mov.w	r3, #4294967295
   84b14:	4618      	mov	r0, r3
   84b16:	370c      	adds	r7, #12
   84b18:	46bd      	mov	sp, r7
   84b1a:	bc80      	pop	{r7}
   84b1c:	4770      	bx	lr
   84b1e:	bf00      	nop

00084b20 <_fstat>:
   84b20:	b480      	push	{r7}
   84b22:	b083      	sub	sp, #12
   84b24:	af00      	add	r7, sp, #0
   84b26:	6078      	str	r0, [r7, #4]
   84b28:	6039      	str	r1, [r7, #0]
   84b2a:	683b      	ldr	r3, [r7, #0]
   84b2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   84b30:	605a      	str	r2, [r3, #4]
   84b32:	2300      	movs	r3, #0
   84b34:	4618      	mov	r0, r3
   84b36:	370c      	adds	r7, #12
   84b38:	46bd      	mov	sp, r7
   84b3a:	bc80      	pop	{r7}
   84b3c:	4770      	bx	lr
   84b3e:	bf00      	nop

00084b40 <_isatty>:
   84b40:	b480      	push	{r7}
   84b42:	b083      	sub	sp, #12
   84b44:	af00      	add	r7, sp, #0
   84b46:	6078      	str	r0, [r7, #4]
   84b48:	2301      	movs	r3, #1
   84b4a:	4618      	mov	r0, r3
   84b4c:	370c      	adds	r7, #12
   84b4e:	46bd      	mov	sp, r7
   84b50:	bc80      	pop	{r7}
   84b52:	4770      	bx	lr

00084b54 <_lseek>:
   84b54:	b480      	push	{r7}
   84b56:	b085      	sub	sp, #20
   84b58:	af00      	add	r7, sp, #0
   84b5a:	60f8      	str	r0, [r7, #12]
   84b5c:	60b9      	str	r1, [r7, #8]
   84b5e:	607a      	str	r2, [r7, #4]
   84b60:	2300      	movs	r3, #0
   84b62:	4618      	mov	r0, r3
   84b64:	3714      	adds	r7, #20
   84b66:	46bd      	mov	sp, r7
   84b68:	bc80      	pop	{r7}
   84b6a:	4770      	bx	lr

00084b6c <main>:
extern bool SV_put_sensor_data(SV_Sensor_status_type* sensor_struct);
extern bool SV_put_sensor_data1(SV_Sensor_status_type* sensor_struct);

SV_Sensor_status_type volatile sensor_data, g_sensor_data;

int main (void){
   84b6c:	b580      	push	{r7, lr}
   84b6e:	b082      	sub	sp, #8
   84b70:	af00      	add	r7, sp, #0
	/* Insert system clock initialization code here (sysclk_init()). */
	
   
	board_init();
   84b72:	4b45      	ldr	r3, [pc, #276]	; (84c88 <main+0x11c>)
   84b74:	4798      	blx	r3
	SV_SYSTEM_INIT(); 
   84b76:	4b45      	ldr	r3, [pc, #276]	; (84c8c <main+0x120>)
   84b78:	4798      	blx	r3
	/* Insert application code here, after the board has been initialized. */
	uint32_t count = 0;
   84b7a:	2300      	movs	r3, #0
   84b7c:	607b      	str	r3, [r7, #4]
	while(FOREVER) {	
	//for(int i=0;i<10;i++) {}
		SV_get_sensor_data(&sensor_data);
   84b7e:	4844      	ldr	r0, [pc, #272]	; (84c90 <main+0x124>)
   84b80:	4b44      	ldr	r3, [pc, #272]	; (84c94 <main+0x128>)
   84b82:	4798      	blx	r3
		g_sensor_data.Temp2status = (g_sensor_data.Temp2status *9 + sensor_data.Temp2status)/10;
   84b84:	4b44      	ldr	r3, [pc, #272]	; (84c98 <main+0x12c>)
   84b86:	895b      	ldrh	r3, [r3, #10]
   84b88:	b29b      	uxth	r3, r3
   84b8a:	461a      	mov	r2, r3
   84b8c:	4613      	mov	r3, r2
   84b8e:	00db      	lsls	r3, r3, #3
   84b90:	4413      	add	r3, r2
   84b92:	4a3f      	ldr	r2, [pc, #252]	; (84c90 <main+0x124>)
   84b94:	8952      	ldrh	r2, [r2, #10]
   84b96:	b292      	uxth	r2, r2
   84b98:	4413      	add	r3, r2
   84b9a:	4a40      	ldr	r2, [pc, #256]	; (84c9c <main+0x130>)
   84b9c:	fb82 1203 	smull	r1, r2, r2, r3
   84ba0:	1092      	asrs	r2, r2, #2
   84ba2:	17db      	asrs	r3, r3, #31
   84ba4:	1ad3      	subs	r3, r2, r3
   84ba6:	b29a      	uxth	r2, r3
   84ba8:	4b3b      	ldr	r3, [pc, #236]	; (84c98 <main+0x12c>)
   84baa:	815a      	strh	r2, [r3, #10]
		g_sensor_data.CS3_Tempstatus = (g_sensor_data.CS3_Tempstatus *9 + sensor_data.CS3_Tempstatus)/10;
   84bac:	4b3a      	ldr	r3, [pc, #232]	; (84c98 <main+0x12c>)
   84bae:	8a5b      	ldrh	r3, [r3, #18]
   84bb0:	b29b      	uxth	r3, r3
   84bb2:	461a      	mov	r2, r3
   84bb4:	4613      	mov	r3, r2
   84bb6:	00db      	lsls	r3, r3, #3
   84bb8:	4413      	add	r3, r2
   84bba:	4a35      	ldr	r2, [pc, #212]	; (84c90 <main+0x124>)
   84bbc:	8a52      	ldrh	r2, [r2, #18]
   84bbe:	b292      	uxth	r2, r2
   84bc0:	4413      	add	r3, r2
   84bc2:	4a36      	ldr	r2, [pc, #216]	; (84c9c <main+0x130>)
   84bc4:	fb82 1203 	smull	r1, r2, r2, r3
   84bc8:	1092      	asrs	r2, r2, #2
   84bca:	17db      	asrs	r3, r3, #31
   84bcc:	1ad3      	subs	r3, r2, r3
   84bce:	b29a      	uxth	r2, r3
   84bd0:	4b31      	ldr	r3, [pc, #196]	; (84c98 <main+0x12c>)
   84bd2:	825a      	strh	r2, [r3, #18]
		g_sensor_data.CS3status = (g_sensor_data.CS3status *9 + sensor_data.CS3status)/10;
   84bd4:	4b30      	ldr	r3, [pc, #192]	; (84c98 <main+0x12c>)
   84bd6:	8b1b      	ldrh	r3, [r3, #24]
   84bd8:	b29b      	uxth	r3, r3
   84bda:	461a      	mov	r2, r3
   84bdc:	4613      	mov	r3, r2
   84bde:	00db      	lsls	r3, r3, #3
   84be0:	4413      	add	r3, r2
   84be2:	4a2b      	ldr	r2, [pc, #172]	; (84c90 <main+0x124>)
   84be4:	8b12      	ldrh	r2, [r2, #24]
   84be6:	b292      	uxth	r2, r2
   84be8:	4413      	add	r3, r2
   84bea:	4a2c      	ldr	r2, [pc, #176]	; (84c9c <main+0x130>)
   84bec:	fb82 1203 	smull	r1, r2, r2, r3
   84bf0:	1092      	asrs	r2, r2, #2
   84bf2:	17db      	asrs	r3, r3, #31
   84bf4:	1ad3      	subs	r3, r2, r3
   84bf6:	b29a      	uxth	r2, r3
   84bf8:	4b27      	ldr	r3, [pc, #156]	; (84c98 <main+0x12c>)
   84bfa:	831a      	strh	r2, [r3, #24]
		g_sensor_data.DAC1status = (g_sensor_data.DAC1status *49 + sensor_data.DAC1status/3)/50;
   84bfc:	4b26      	ldr	r3, [pc, #152]	; (84c98 <main+0x12c>)
   84bfe:	8b5b      	ldrh	r3, [r3, #26]
   84c00:	b29b      	uxth	r3, r3
   84c02:	461a      	mov	r2, r3
   84c04:	4613      	mov	r3, r2
   84c06:	00db      	lsls	r3, r3, #3
   84c08:	1a9b      	subs	r3, r3, r2
   84c0a:	00da      	lsls	r2, r3, #3
   84c0c:	1ad3      	subs	r3, r2, r3
   84c0e:	4a20      	ldr	r2, [pc, #128]	; (84c90 <main+0x124>)
   84c10:	8b52      	ldrh	r2, [r2, #26]
   84c12:	b292      	uxth	r2, r2
   84c14:	4922      	ldr	r1, [pc, #136]	; (84ca0 <main+0x134>)
   84c16:	fba1 1202 	umull	r1, r2, r1, r2
   84c1a:	0852      	lsrs	r2, r2, #1
   84c1c:	b292      	uxth	r2, r2
   84c1e:	4413      	add	r3, r2
   84c20:	4a20      	ldr	r2, [pc, #128]	; (84ca4 <main+0x138>)
   84c22:	fb82 1203 	smull	r1, r2, r2, r3
   84c26:	1112      	asrs	r2, r2, #4
   84c28:	17db      	asrs	r3, r3, #31
   84c2a:	1ad3      	subs	r3, r2, r3
   84c2c:	b29a      	uxth	r2, r3
   84c2e:	4b1a      	ldr	r3, [pc, #104]	; (84c98 <main+0x12c>)
   84c30:	835a      	strh	r2, [r3, #26]
	//	sensor_data.DAC1status = g_sensor_data.DAC1status;
		
	//	if(master_requested_sensor_data==1) 
		while(1)	
		{
			if(MASTER_CPU_REQUEST)
   84c32:	4b1d      	ldr	r3, [pc, #116]	; (84ca8 <main+0x13c>)
   84c34:	781b      	ldrb	r3, [r3, #0]
   84c36:	b2db      	uxtb	r3, r3
   84c38:	2b01      	cmp	r3, #1
   84c3a:	d01d      	beq.n	84c78 <main+0x10c>
   84c3c:	4b1b      	ldr	r3, [pc, #108]	; (84cac <main+0x140>)
   84c3e:	781b      	ldrb	r3, [r3, #0]
   84c40:	b2db      	uxtb	r3, r3
   84c42:	2b01      	cmp	r3, #1
   84c44:	d018      	beq.n	84c78 <main+0x10c>
   84c46:	4b1a      	ldr	r3, [pc, #104]	; (84cb0 <main+0x144>)
   84c48:	781b      	ldrb	r3, [r3, #0]
   84c4a:	b2db      	uxtb	r3, r3
   84c4c:	2b01      	cmp	r3, #1
   84c4e:	d013      	beq.n	84c78 <main+0x10c>
   84c50:	4b18      	ldr	r3, [pc, #96]	; (84cb4 <main+0x148>)
   84c52:	781b      	ldrb	r3, [r3, #0]
   84c54:	b2db      	uxtb	r3, r3
   84c56:	2b01      	cmp	r3, #1
   84c58:	d00e      	beq.n	84c78 <main+0x10c>
   84c5a:	4b17      	ldr	r3, [pc, #92]	; (84cb8 <main+0x14c>)
   84c5c:	781b      	ldrb	r3, [r3, #0]
   84c5e:	b2db      	uxtb	r3, r3
   84c60:	2b01      	cmp	r3, #1
   84c62:	d009      	beq.n	84c78 <main+0x10c>
   84c64:	4b15      	ldr	r3, [pc, #84]	; (84cbc <main+0x150>)
   84c66:	781b      	ldrb	r3, [r3, #0]
   84c68:	b2db      	uxtb	r3, r3
   84c6a:	2b01      	cmp	r3, #1
   84c6c:	d004      	beq.n	84c78 <main+0x10c>
   84c6e:	4b14      	ldr	r3, [pc, #80]	; (84cc0 <main+0x154>)
   84c70:	781b      	ldrb	r3, [r3, #0]
   84c72:	b2db      	uxtb	r3, r3
   84c74:	2b01      	cmp	r3, #1
   84c76:	d182      	bne.n	84b7e <main+0x12>
			{			
				

				// SV_put_sensor_data(&sensor_data);	
				 SV_put_sensor_data1(&sensor_data);		
   84c78:	4805      	ldr	r0, [pc, #20]	; (84c90 <main+0x124>)
   84c7a:	4b12      	ldr	r3, [pc, #72]	; (84cc4 <main+0x158>)
   84c7c:	4798      	blx	r3
				master_requested_sensor_data=0;
   84c7e:	4b12      	ldr	r3, [pc, #72]	; (84cc8 <main+0x15c>)
   84c80:	2200      	movs	r2, #0
   84c82:	701a      	strb	r2, [r3, #0]
			else
			{
				break;
			}
	   
		}
   84c84:	e7d5      	b.n	84c32 <main+0xc6>
   84c86:	bf00      	nop
   84c88:	00084129 	.word	0x00084129
   84c8c:	00083551 	.word	0x00083551
   84c90:	20070b08 	.word	0x20070b08
   84c94:	00083379 	.word	0x00083379
   84c98:	20070b2c 	.word	0x20070b2c
   84c9c:	66666667 	.word	0x66666667
   84ca0:	aaaaaaab 	.word	0xaaaaaaab
   84ca4:	51eb851f 	.word	0x51eb851f
   84ca8:	2007018c 	.word	0x2007018c
   84cac:	2007018d 	.word	0x2007018d
   84cb0:	2007018e 	.word	0x2007018e
   84cb4:	2007018f 	.word	0x2007018f
   84cb8:	20070190 	.word	0x20070190
   84cbc:	20070191 	.word	0x20070191
   84cc0:	20070192 	.word	0x20070192
   84cc4:	0008308d 	.word	0x0008308d
   84cc8:	200709fc 	.word	0x200709fc

00084ccc <__libc_init_array>:
   84ccc:	b570      	push	{r4, r5, r6, lr}
   84cce:	4e0f      	ldr	r6, [pc, #60]	; (84d0c <__libc_init_array+0x40>)
   84cd0:	4d0f      	ldr	r5, [pc, #60]	; (84d10 <__libc_init_array+0x44>)
   84cd2:	1b76      	subs	r6, r6, r5
   84cd4:	10b6      	asrs	r6, r6, #2
   84cd6:	bf18      	it	ne
   84cd8:	2400      	movne	r4, #0
   84cda:	d005      	beq.n	84ce8 <__libc_init_array+0x1c>
   84cdc:	3401      	adds	r4, #1
   84cde:	f855 3b04 	ldr.w	r3, [r5], #4
   84ce2:	4798      	blx	r3
   84ce4:	42a6      	cmp	r6, r4
   84ce6:	d1f9      	bne.n	84cdc <__libc_init_array+0x10>
   84ce8:	4e0a      	ldr	r6, [pc, #40]	; (84d14 <__libc_init_array+0x48>)
   84cea:	4d0b      	ldr	r5, [pc, #44]	; (84d18 <__libc_init_array+0x4c>)
   84cec:	f001 fe74 	bl	869d8 <_init>
   84cf0:	1b76      	subs	r6, r6, r5
   84cf2:	10b6      	asrs	r6, r6, #2
   84cf4:	bf18      	it	ne
   84cf6:	2400      	movne	r4, #0
   84cf8:	d006      	beq.n	84d08 <__libc_init_array+0x3c>
   84cfa:	3401      	adds	r4, #1
   84cfc:	f855 3b04 	ldr.w	r3, [r5], #4
   84d00:	4798      	blx	r3
   84d02:	42a6      	cmp	r6, r4
   84d04:	d1f9      	bne.n	84cfa <__libc_init_array+0x2e>
   84d06:	bd70      	pop	{r4, r5, r6, pc}
   84d08:	bd70      	pop	{r4, r5, r6, pc}
   84d0a:	bf00      	nop
   84d0c:	000869e4 	.word	0x000869e4
   84d10:	000869e4 	.word	0x000869e4
   84d14:	000869ec 	.word	0x000869ec
   84d18:	000869e4 	.word	0x000869e4

00084d1c <memset>:
   84d1c:	b470      	push	{r4, r5, r6}
   84d1e:	0784      	lsls	r4, r0, #30
   84d20:	d046      	beq.n	84db0 <memset+0x94>
   84d22:	1e54      	subs	r4, r2, #1
   84d24:	2a00      	cmp	r2, #0
   84d26:	d041      	beq.n	84dac <memset+0x90>
   84d28:	b2cd      	uxtb	r5, r1
   84d2a:	4603      	mov	r3, r0
   84d2c:	e002      	b.n	84d34 <memset+0x18>
   84d2e:	1e62      	subs	r2, r4, #1
   84d30:	b3e4      	cbz	r4, 84dac <memset+0x90>
   84d32:	4614      	mov	r4, r2
   84d34:	f803 5b01 	strb.w	r5, [r3], #1
   84d38:	079a      	lsls	r2, r3, #30
   84d3a:	d1f8      	bne.n	84d2e <memset+0x12>
   84d3c:	2c03      	cmp	r4, #3
   84d3e:	d92e      	bls.n	84d9e <memset+0x82>
   84d40:	b2cd      	uxtb	r5, r1
   84d42:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   84d46:	2c0f      	cmp	r4, #15
   84d48:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   84d4c:	d919      	bls.n	84d82 <memset+0x66>
   84d4e:	4626      	mov	r6, r4
   84d50:	f103 0210 	add.w	r2, r3, #16
   84d54:	3e10      	subs	r6, #16
   84d56:	2e0f      	cmp	r6, #15
   84d58:	f842 5c10 	str.w	r5, [r2, #-16]
   84d5c:	f842 5c0c 	str.w	r5, [r2, #-12]
   84d60:	f842 5c08 	str.w	r5, [r2, #-8]
   84d64:	f842 5c04 	str.w	r5, [r2, #-4]
   84d68:	f102 0210 	add.w	r2, r2, #16
   84d6c:	d8f2      	bhi.n	84d54 <memset+0x38>
   84d6e:	f1a4 0210 	sub.w	r2, r4, #16
   84d72:	f022 020f 	bic.w	r2, r2, #15
   84d76:	f004 040f 	and.w	r4, r4, #15
   84d7a:	3210      	adds	r2, #16
   84d7c:	2c03      	cmp	r4, #3
   84d7e:	4413      	add	r3, r2
   84d80:	d90d      	bls.n	84d9e <memset+0x82>
   84d82:	461e      	mov	r6, r3
   84d84:	4622      	mov	r2, r4
   84d86:	3a04      	subs	r2, #4
   84d88:	2a03      	cmp	r2, #3
   84d8a:	f846 5b04 	str.w	r5, [r6], #4
   84d8e:	d8fa      	bhi.n	84d86 <memset+0x6a>
   84d90:	1f22      	subs	r2, r4, #4
   84d92:	f022 0203 	bic.w	r2, r2, #3
   84d96:	3204      	adds	r2, #4
   84d98:	4413      	add	r3, r2
   84d9a:	f004 0403 	and.w	r4, r4, #3
   84d9e:	b12c      	cbz	r4, 84dac <memset+0x90>
   84da0:	b2c9      	uxtb	r1, r1
   84da2:	441c      	add	r4, r3
   84da4:	f803 1b01 	strb.w	r1, [r3], #1
   84da8:	42a3      	cmp	r3, r4
   84daa:	d1fb      	bne.n	84da4 <memset+0x88>
   84dac:	bc70      	pop	{r4, r5, r6}
   84dae:	4770      	bx	lr
   84db0:	4614      	mov	r4, r2
   84db2:	4603      	mov	r3, r0
   84db4:	e7c2      	b.n	84d3c <memset+0x20>
   84db6:	bf00      	nop

00084db8 <_puts_r>:
   84db8:	b5f0      	push	{r4, r5, r6, r7, lr}
   84dba:	4605      	mov	r5, r0
   84dbc:	b089      	sub	sp, #36	; 0x24
   84dbe:	4608      	mov	r0, r1
   84dc0:	460c      	mov	r4, r1
   84dc2:	f000 f8e5 	bl	84f90 <strlen>
   84dc6:	1c43      	adds	r3, r0, #1
   84dc8:	4f14      	ldr	r7, [pc, #80]	; (84e1c <_puts_r+0x64>)
   84dca:	9303      	str	r3, [sp, #12]
   84dcc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   84dce:	2601      	movs	r6, #1
   84dd0:	a904      	add	r1, sp, #16
   84dd2:	2202      	movs	r2, #2
   84dd4:	9404      	str	r4, [sp, #16]
   84dd6:	9005      	str	r0, [sp, #20]
   84dd8:	68ac      	ldr	r4, [r5, #8]
   84dda:	9706      	str	r7, [sp, #24]
   84ddc:	9607      	str	r6, [sp, #28]
   84dde:	9101      	str	r1, [sp, #4]
   84de0:	9202      	str	r2, [sp, #8]
   84de2:	b1b3      	cbz	r3, 84e12 <_puts_r+0x5a>
   84de4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84de8:	049a      	lsls	r2, r3, #18
   84dea:	d406      	bmi.n	84dfa <_puts_r+0x42>
   84dec:	6e62      	ldr	r2, [r4, #100]	; 0x64
   84dee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   84df2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   84df6:	81a3      	strh	r3, [r4, #12]
   84df8:	6662      	str	r2, [r4, #100]	; 0x64
   84dfa:	4621      	mov	r1, r4
   84dfc:	4628      	mov	r0, r5
   84dfe:	aa01      	add	r2, sp, #4
   84e00:	f000 fbf4 	bl	855ec <__sfvwrite_r>
   84e04:	2800      	cmp	r0, #0
   84e06:	bf14      	ite	ne
   84e08:	f04f 30ff 	movne.w	r0, #4294967295
   84e0c:	200a      	moveq	r0, #10
   84e0e:	b009      	add	sp, #36	; 0x24
   84e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84e12:	4628      	mov	r0, r5
   84e14:	f000 fa96 	bl	85344 <__sinit>
   84e18:	e7e4      	b.n	84de4 <_puts_r+0x2c>
   84e1a:	bf00      	nop
   84e1c:	000869d4 	.word	0x000869d4

00084e20 <puts>:
   84e20:	4b02      	ldr	r3, [pc, #8]	; (84e2c <puts+0xc>)
   84e22:	4601      	mov	r1, r0
   84e24:	6818      	ldr	r0, [r3, #0]
   84e26:	f7ff bfc7 	b.w	84db8 <_puts_r>
   84e2a:	bf00      	nop
   84e2c:	200705c8 	.word	0x200705c8

00084e30 <setbuf>:
   84e30:	2900      	cmp	r1, #0
   84e32:	bf0c      	ite	eq
   84e34:	2202      	moveq	r2, #2
   84e36:	2200      	movne	r2, #0
   84e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84e3c:	f000 b800 	b.w	84e40 <setvbuf>

00084e40 <setvbuf>:
   84e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   84e44:	4d51      	ldr	r5, [pc, #324]	; (84f8c <setvbuf+0x14c>)
   84e46:	b083      	sub	sp, #12
   84e48:	682d      	ldr	r5, [r5, #0]
   84e4a:	4604      	mov	r4, r0
   84e4c:	460f      	mov	r7, r1
   84e4e:	4690      	mov	r8, r2
   84e50:	461e      	mov	r6, r3
   84e52:	b115      	cbz	r5, 84e5a <setvbuf+0x1a>
   84e54:	6bab      	ldr	r3, [r5, #56]	; 0x38
   84e56:	2b00      	cmp	r3, #0
   84e58:	d079      	beq.n	84f4e <setvbuf+0x10e>
   84e5a:	f1b8 0f02 	cmp.w	r8, #2
   84e5e:	d004      	beq.n	84e6a <setvbuf+0x2a>
   84e60:	f1b8 0f01 	cmp.w	r8, #1
   84e64:	d87f      	bhi.n	84f66 <setvbuf+0x126>
   84e66:	2e00      	cmp	r6, #0
   84e68:	db7d      	blt.n	84f66 <setvbuf+0x126>
   84e6a:	4621      	mov	r1, r4
   84e6c:	4628      	mov	r0, r5
   84e6e:	f000 f9d5 	bl	8521c <_fflush_r>
   84e72:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84e74:	b141      	cbz	r1, 84e88 <setvbuf+0x48>
   84e76:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84e7a:	4299      	cmp	r1, r3
   84e7c:	d002      	beq.n	84e84 <setvbuf+0x44>
   84e7e:	4628      	mov	r0, r5
   84e80:	f000 facc 	bl	8541c <_free_r>
   84e84:	2300      	movs	r3, #0
   84e86:	6323      	str	r3, [r4, #48]	; 0x30
   84e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84e8c:	2200      	movs	r2, #0
   84e8e:	61a2      	str	r2, [r4, #24]
   84e90:	6062      	str	r2, [r4, #4]
   84e92:	061a      	lsls	r2, r3, #24
   84e94:	d454      	bmi.n	84f40 <setvbuf+0x100>
   84e96:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   84e9a:	f023 0303 	bic.w	r3, r3, #3
   84e9e:	f1b8 0f02 	cmp.w	r8, #2
   84ea2:	81a3      	strh	r3, [r4, #12]
   84ea4:	d039      	beq.n	84f1a <setvbuf+0xda>
   84ea6:	ab01      	add	r3, sp, #4
   84ea8:	466a      	mov	r2, sp
   84eaa:	4621      	mov	r1, r4
   84eac:	4628      	mov	r0, r5
   84eae:	f000 fd49 	bl	85944 <__swhatbuf_r>
   84eb2:	89a3      	ldrh	r3, [r4, #12]
   84eb4:	4318      	orrs	r0, r3
   84eb6:	81a0      	strh	r0, [r4, #12]
   84eb8:	b326      	cbz	r6, 84f04 <setvbuf+0xc4>
   84eba:	b327      	cbz	r7, 84f06 <setvbuf+0xc6>
   84ebc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   84ebe:	2b00      	cmp	r3, #0
   84ec0:	d04d      	beq.n	84f5e <setvbuf+0x11e>
   84ec2:	9b00      	ldr	r3, [sp, #0]
   84ec4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   84ec8:	429e      	cmp	r6, r3
   84eca:	bf1c      	itt	ne
   84ecc:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   84ed0:	81a0      	strhne	r0, [r4, #12]
   84ed2:	f1b8 0f01 	cmp.w	r8, #1
   84ed6:	bf08      	it	eq
   84ed8:	f040 0001 	orreq.w	r0, r0, #1
   84edc:	b283      	uxth	r3, r0
   84ede:	bf08      	it	eq
   84ee0:	81a0      	strheq	r0, [r4, #12]
   84ee2:	f003 0008 	and.w	r0, r3, #8
   84ee6:	b280      	uxth	r0, r0
   84ee8:	6027      	str	r7, [r4, #0]
   84eea:	6127      	str	r7, [r4, #16]
   84eec:	6166      	str	r6, [r4, #20]
   84eee:	b318      	cbz	r0, 84f38 <setvbuf+0xf8>
   84ef0:	f013 0001 	ands.w	r0, r3, #1
   84ef4:	d02f      	beq.n	84f56 <setvbuf+0x116>
   84ef6:	2000      	movs	r0, #0
   84ef8:	4276      	negs	r6, r6
   84efa:	61a6      	str	r6, [r4, #24]
   84efc:	60a0      	str	r0, [r4, #8]
   84efe:	b003      	add	sp, #12
   84f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84f04:	9e00      	ldr	r6, [sp, #0]
   84f06:	4630      	mov	r0, r6
   84f08:	f000 fd90 	bl	85a2c <malloc>
   84f0c:	4607      	mov	r7, r0
   84f0e:	b368      	cbz	r0, 84f6c <setvbuf+0x12c>
   84f10:	89a3      	ldrh	r3, [r4, #12]
   84f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84f16:	81a3      	strh	r3, [r4, #12]
   84f18:	e7d0      	b.n	84ebc <setvbuf+0x7c>
   84f1a:	2000      	movs	r0, #0
   84f1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84f20:	f043 0302 	orr.w	r3, r3, #2
   84f24:	2500      	movs	r5, #0
   84f26:	2101      	movs	r1, #1
   84f28:	81a3      	strh	r3, [r4, #12]
   84f2a:	60a5      	str	r5, [r4, #8]
   84f2c:	6022      	str	r2, [r4, #0]
   84f2e:	6122      	str	r2, [r4, #16]
   84f30:	6161      	str	r1, [r4, #20]
   84f32:	b003      	add	sp, #12
   84f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84f38:	60a0      	str	r0, [r4, #8]
   84f3a:	b003      	add	sp, #12
   84f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84f40:	6921      	ldr	r1, [r4, #16]
   84f42:	4628      	mov	r0, r5
   84f44:	f000 fa6a 	bl	8541c <_free_r>
   84f48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84f4c:	e7a3      	b.n	84e96 <setvbuf+0x56>
   84f4e:	4628      	mov	r0, r5
   84f50:	f000 f9f8 	bl	85344 <__sinit>
   84f54:	e781      	b.n	84e5a <setvbuf+0x1a>
   84f56:	60a6      	str	r6, [r4, #8]
   84f58:	b003      	add	sp, #12
   84f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84f5e:	4628      	mov	r0, r5
   84f60:	f000 f9f0 	bl	85344 <__sinit>
   84f64:	e7ad      	b.n	84ec2 <setvbuf+0x82>
   84f66:	f04f 30ff 	mov.w	r0, #4294967295
   84f6a:	e7e2      	b.n	84f32 <setvbuf+0xf2>
   84f6c:	f8dd 9000 	ldr.w	r9, [sp]
   84f70:	45b1      	cmp	r9, r6
   84f72:	d006      	beq.n	84f82 <setvbuf+0x142>
   84f74:	4648      	mov	r0, r9
   84f76:	f000 fd59 	bl	85a2c <malloc>
   84f7a:	4607      	mov	r7, r0
   84f7c:	b108      	cbz	r0, 84f82 <setvbuf+0x142>
   84f7e:	464e      	mov	r6, r9
   84f80:	e7c6      	b.n	84f10 <setvbuf+0xd0>
   84f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84f86:	f04f 30ff 	mov.w	r0, #4294967295
   84f8a:	e7c7      	b.n	84f1c <setvbuf+0xdc>
   84f8c:	200705c8 	.word	0x200705c8

00084f90 <strlen>:
   84f90:	f020 0103 	bic.w	r1, r0, #3
   84f94:	f010 0003 	ands.w	r0, r0, #3
   84f98:	f1c0 0000 	rsb	r0, r0, #0
   84f9c:	f851 3b04 	ldr.w	r3, [r1], #4
   84fa0:	f100 0c04 	add.w	ip, r0, #4
   84fa4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   84fa8:	f06f 0200 	mvn.w	r2, #0
   84fac:	bf1c      	itt	ne
   84fae:	fa22 f20c 	lsrne.w	r2, r2, ip
   84fb2:	4313      	orrne	r3, r2
   84fb4:	f04f 0c01 	mov.w	ip, #1
   84fb8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   84fbc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   84fc0:	eba3 020c 	sub.w	r2, r3, ip
   84fc4:	ea22 0203 	bic.w	r2, r2, r3
   84fc8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   84fcc:	bf04      	itt	eq
   84fce:	f851 3b04 	ldreq.w	r3, [r1], #4
   84fd2:	3004      	addeq	r0, #4
   84fd4:	d0f4      	beq.n	84fc0 <strlen+0x30>
   84fd6:	f1c2 0100 	rsb	r1, r2, #0
   84fda:	ea02 0201 	and.w	r2, r2, r1
   84fde:	fab2 f282 	clz	r2, r2
   84fe2:	f1c2 021f 	rsb	r2, r2, #31
   84fe6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   84fea:	4770      	bx	lr

00084fec <__swsetup_r>:
   84fec:	b538      	push	{r3, r4, r5, lr}
   84fee:	4b30      	ldr	r3, [pc, #192]	; (850b0 <__swsetup_r+0xc4>)
   84ff0:	4605      	mov	r5, r0
   84ff2:	6818      	ldr	r0, [r3, #0]
   84ff4:	460c      	mov	r4, r1
   84ff6:	b110      	cbz	r0, 84ffe <__swsetup_r+0x12>
   84ff8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84ffa:	2b00      	cmp	r3, #0
   84ffc:	d038      	beq.n	85070 <__swsetup_r+0x84>
   84ffe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   85002:	b293      	uxth	r3, r2
   85004:	0718      	lsls	r0, r3, #28
   85006:	d50c      	bpl.n	85022 <__swsetup_r+0x36>
   85008:	6920      	ldr	r0, [r4, #16]
   8500a:	b1a8      	cbz	r0, 85038 <__swsetup_r+0x4c>
   8500c:	f013 0201 	ands.w	r2, r3, #1
   85010:	d01e      	beq.n	85050 <__swsetup_r+0x64>
   85012:	6963      	ldr	r3, [r4, #20]
   85014:	2200      	movs	r2, #0
   85016:	425b      	negs	r3, r3
   85018:	61a3      	str	r3, [r4, #24]
   8501a:	60a2      	str	r2, [r4, #8]
   8501c:	b1f0      	cbz	r0, 8505c <__swsetup_r+0x70>
   8501e:	2000      	movs	r0, #0
   85020:	bd38      	pop	{r3, r4, r5, pc}
   85022:	06d9      	lsls	r1, r3, #27
   85024:	d53b      	bpl.n	8509e <__swsetup_r+0xb2>
   85026:	0758      	lsls	r0, r3, #29
   85028:	d425      	bmi.n	85076 <__swsetup_r+0x8a>
   8502a:	6920      	ldr	r0, [r4, #16]
   8502c:	f042 0308 	orr.w	r3, r2, #8
   85030:	81a3      	strh	r3, [r4, #12]
   85032:	b29b      	uxth	r3, r3
   85034:	2800      	cmp	r0, #0
   85036:	d1e9      	bne.n	8500c <__swsetup_r+0x20>
   85038:	f403 7220 	and.w	r2, r3, #640	; 0x280
   8503c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   85040:	d0e4      	beq.n	8500c <__swsetup_r+0x20>
   85042:	4628      	mov	r0, r5
   85044:	4621      	mov	r1, r4
   85046:	f000 fcad 	bl	859a4 <__smakebuf_r>
   8504a:	89a3      	ldrh	r3, [r4, #12]
   8504c:	6920      	ldr	r0, [r4, #16]
   8504e:	e7dd      	b.n	8500c <__swsetup_r+0x20>
   85050:	0799      	lsls	r1, r3, #30
   85052:	bf58      	it	pl
   85054:	6962      	ldrpl	r2, [r4, #20]
   85056:	60a2      	str	r2, [r4, #8]
   85058:	2800      	cmp	r0, #0
   8505a:	d1e0      	bne.n	8501e <__swsetup_r+0x32>
   8505c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85060:	061a      	lsls	r2, r3, #24
   85062:	d5dd      	bpl.n	85020 <__swsetup_r+0x34>
   85064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85068:	81a3      	strh	r3, [r4, #12]
   8506a:	f04f 30ff 	mov.w	r0, #4294967295
   8506e:	bd38      	pop	{r3, r4, r5, pc}
   85070:	f000 f968 	bl	85344 <__sinit>
   85074:	e7c3      	b.n	84ffe <__swsetup_r+0x12>
   85076:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85078:	b151      	cbz	r1, 85090 <__swsetup_r+0xa4>
   8507a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8507e:	4299      	cmp	r1, r3
   85080:	d004      	beq.n	8508c <__swsetup_r+0xa0>
   85082:	4628      	mov	r0, r5
   85084:	f000 f9ca 	bl	8541c <_free_r>
   85088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8508c:	2300      	movs	r3, #0
   8508e:	6323      	str	r3, [r4, #48]	; 0x30
   85090:	6920      	ldr	r0, [r4, #16]
   85092:	2300      	movs	r3, #0
   85094:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   85098:	e884 0009 	stmia.w	r4, {r0, r3}
   8509c:	e7c6      	b.n	8502c <__swsetup_r+0x40>
   8509e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   850a2:	2309      	movs	r3, #9
   850a4:	602b      	str	r3, [r5, #0]
   850a6:	f04f 30ff 	mov.w	r0, #4294967295
   850aa:	81a2      	strh	r2, [r4, #12]
   850ac:	bd38      	pop	{r3, r4, r5, pc}
   850ae:	bf00      	nop
   850b0:	200705c8 	.word	0x200705c8

000850b4 <register_fini>:
   850b4:	4b02      	ldr	r3, [pc, #8]	; (850c0 <register_fini+0xc>)
   850b6:	b113      	cbz	r3, 850be <register_fini+0xa>
   850b8:	4802      	ldr	r0, [pc, #8]	; (850c4 <register_fini+0x10>)
   850ba:	f000 b805 	b.w	850c8 <atexit>
   850be:	4770      	bx	lr
   850c0:	00000000 	.word	0x00000000
   850c4:	00085359 	.word	0x00085359

000850c8 <atexit>:
   850c8:	2300      	movs	r3, #0
   850ca:	4601      	mov	r1, r0
   850cc:	461a      	mov	r2, r3
   850ce:	4618      	mov	r0, r3
   850d0:	f001 bada 	b.w	86688 <__register_exitproc>

000850d4 <__sflush_r>:
   850d4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   850d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   850dc:	b29a      	uxth	r2, r3
   850de:	460d      	mov	r5, r1
   850e0:	0711      	lsls	r1, r2, #28
   850e2:	4680      	mov	r8, r0
   850e4:	d43c      	bmi.n	85160 <__sflush_r+0x8c>
   850e6:	686a      	ldr	r2, [r5, #4]
   850e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   850ec:	2a00      	cmp	r2, #0
   850ee:	81ab      	strh	r3, [r5, #12]
   850f0:	dd73      	ble.n	851da <__sflush_r+0x106>
   850f2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   850f4:	2c00      	cmp	r4, #0
   850f6:	d04b      	beq.n	85190 <__sflush_r+0xbc>
   850f8:	b29b      	uxth	r3, r3
   850fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   850fe:	2100      	movs	r1, #0
   85100:	b292      	uxth	r2, r2
   85102:	f8d8 6000 	ldr.w	r6, [r8]
   85106:	f8c8 1000 	str.w	r1, [r8]
   8510a:	2a00      	cmp	r2, #0
   8510c:	d069      	beq.n	851e2 <__sflush_r+0x10e>
   8510e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   85110:	075f      	lsls	r7, r3, #29
   85112:	d505      	bpl.n	85120 <__sflush_r+0x4c>
   85114:	6869      	ldr	r1, [r5, #4]
   85116:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   85118:	1a52      	subs	r2, r2, r1
   8511a:	b10b      	cbz	r3, 85120 <__sflush_r+0x4c>
   8511c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8511e:	1ad2      	subs	r2, r2, r3
   85120:	2300      	movs	r3, #0
   85122:	69e9      	ldr	r1, [r5, #28]
   85124:	4640      	mov	r0, r8
   85126:	47a0      	blx	r4
   85128:	1c44      	adds	r4, r0, #1
   8512a:	d03c      	beq.n	851a6 <__sflush_r+0xd2>
   8512c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   85130:	6929      	ldr	r1, [r5, #16]
   85132:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   85136:	2200      	movs	r2, #0
   85138:	81ab      	strh	r3, [r5, #12]
   8513a:	04db      	lsls	r3, r3, #19
   8513c:	e885 0006 	stmia.w	r5, {r1, r2}
   85140:	d449      	bmi.n	851d6 <__sflush_r+0x102>
   85142:	6b29      	ldr	r1, [r5, #48]	; 0x30
   85144:	f8c8 6000 	str.w	r6, [r8]
   85148:	b311      	cbz	r1, 85190 <__sflush_r+0xbc>
   8514a:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8514e:	4299      	cmp	r1, r3
   85150:	d002      	beq.n	85158 <__sflush_r+0x84>
   85152:	4640      	mov	r0, r8
   85154:	f000 f962 	bl	8541c <_free_r>
   85158:	2000      	movs	r0, #0
   8515a:	6328      	str	r0, [r5, #48]	; 0x30
   8515c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85160:	692e      	ldr	r6, [r5, #16]
   85162:	b1ae      	cbz	r6, 85190 <__sflush_r+0xbc>
   85164:	0790      	lsls	r0, r2, #30
   85166:	682c      	ldr	r4, [r5, #0]
   85168:	bf0c      	ite	eq
   8516a:	696b      	ldreq	r3, [r5, #20]
   8516c:	2300      	movne	r3, #0
   8516e:	602e      	str	r6, [r5, #0]
   85170:	1ba4      	subs	r4, r4, r6
   85172:	60ab      	str	r3, [r5, #8]
   85174:	e00a      	b.n	8518c <__sflush_r+0xb8>
   85176:	4623      	mov	r3, r4
   85178:	4632      	mov	r2, r6
   8517a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8517c:	69e9      	ldr	r1, [r5, #28]
   8517e:	4640      	mov	r0, r8
   85180:	47b8      	blx	r7
   85182:	2800      	cmp	r0, #0
   85184:	eba4 0400 	sub.w	r4, r4, r0
   85188:	4406      	add	r6, r0
   8518a:	dd04      	ble.n	85196 <__sflush_r+0xc2>
   8518c:	2c00      	cmp	r4, #0
   8518e:	dcf2      	bgt.n	85176 <__sflush_r+0xa2>
   85190:	2000      	movs	r0, #0
   85192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85196:	89ab      	ldrh	r3, [r5, #12]
   85198:	f04f 30ff 	mov.w	r0, #4294967295
   8519c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   851a0:	81ab      	strh	r3, [r5, #12]
   851a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   851a6:	f8d8 2000 	ldr.w	r2, [r8]
   851aa:	2a1d      	cmp	r2, #29
   851ac:	d8f3      	bhi.n	85196 <__sflush_r+0xc2>
   851ae:	4b1a      	ldr	r3, [pc, #104]	; (85218 <__sflush_r+0x144>)
   851b0:	40d3      	lsrs	r3, r2
   851b2:	f003 0301 	and.w	r3, r3, #1
   851b6:	f083 0401 	eor.w	r4, r3, #1
   851ba:	2b00      	cmp	r3, #0
   851bc:	d0eb      	beq.n	85196 <__sflush_r+0xc2>
   851be:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   851c2:	6929      	ldr	r1, [r5, #16]
   851c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   851c8:	6029      	str	r1, [r5, #0]
   851ca:	04d9      	lsls	r1, r3, #19
   851cc:	606c      	str	r4, [r5, #4]
   851ce:	81ab      	strh	r3, [r5, #12]
   851d0:	d5b7      	bpl.n	85142 <__sflush_r+0x6e>
   851d2:	2a00      	cmp	r2, #0
   851d4:	d1b5      	bne.n	85142 <__sflush_r+0x6e>
   851d6:	6528      	str	r0, [r5, #80]	; 0x50
   851d8:	e7b3      	b.n	85142 <__sflush_r+0x6e>
   851da:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   851dc:	2a00      	cmp	r2, #0
   851de:	dc88      	bgt.n	850f2 <__sflush_r+0x1e>
   851e0:	e7d6      	b.n	85190 <__sflush_r+0xbc>
   851e2:	2301      	movs	r3, #1
   851e4:	69e9      	ldr	r1, [r5, #28]
   851e6:	4640      	mov	r0, r8
   851e8:	47a0      	blx	r4
   851ea:	1c43      	adds	r3, r0, #1
   851ec:	4602      	mov	r2, r0
   851ee:	d002      	beq.n	851f6 <__sflush_r+0x122>
   851f0:	89ab      	ldrh	r3, [r5, #12]
   851f2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   851f4:	e78c      	b.n	85110 <__sflush_r+0x3c>
   851f6:	f8d8 3000 	ldr.w	r3, [r8]
   851fa:	2b00      	cmp	r3, #0
   851fc:	d0f8      	beq.n	851f0 <__sflush_r+0x11c>
   851fe:	2b1d      	cmp	r3, #29
   85200:	d001      	beq.n	85206 <__sflush_r+0x132>
   85202:	2b16      	cmp	r3, #22
   85204:	d102      	bne.n	8520c <__sflush_r+0x138>
   85206:	f8c8 6000 	str.w	r6, [r8]
   8520a:	e7c1      	b.n	85190 <__sflush_r+0xbc>
   8520c:	89ab      	ldrh	r3, [r5, #12]
   8520e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85212:	81ab      	strh	r3, [r5, #12]
   85214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85218:	20400001 	.word	0x20400001

0008521c <_fflush_r>:
   8521c:	b510      	push	{r4, lr}
   8521e:	4604      	mov	r4, r0
   85220:	b082      	sub	sp, #8
   85222:	b108      	cbz	r0, 85228 <_fflush_r+0xc>
   85224:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85226:	b153      	cbz	r3, 8523e <_fflush_r+0x22>
   85228:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   8522c:	b908      	cbnz	r0, 85232 <_fflush_r+0x16>
   8522e:	b002      	add	sp, #8
   85230:	bd10      	pop	{r4, pc}
   85232:	4620      	mov	r0, r4
   85234:	b002      	add	sp, #8
   85236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8523a:	f7ff bf4b 	b.w	850d4 <__sflush_r>
   8523e:	9101      	str	r1, [sp, #4]
   85240:	f000 f880 	bl	85344 <__sinit>
   85244:	9901      	ldr	r1, [sp, #4]
   85246:	e7ef      	b.n	85228 <_fflush_r+0xc>

00085248 <_cleanup_r>:
   85248:	4901      	ldr	r1, [pc, #4]	; (85250 <_cleanup_r+0x8>)
   8524a:	f000 bb53 	b.w	858f4 <_fwalk_reent>
   8524e:	bf00      	nop
   85250:	00086751 	.word	0x00086751

00085254 <__sinit.part.1>:
   85254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85258:	4607      	mov	r7, r0
   8525a:	4835      	ldr	r0, [pc, #212]	; (85330 <__sinit.part.1+0xdc>)
   8525c:	687d      	ldr	r5, [r7, #4]
   8525e:	2400      	movs	r4, #0
   85260:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   85264:	2304      	movs	r3, #4
   85266:	2103      	movs	r1, #3
   85268:	63f8      	str	r0, [r7, #60]	; 0x3c
   8526a:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   8526e:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   85272:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   85276:	b083      	sub	sp, #12
   85278:	602c      	str	r4, [r5, #0]
   8527a:	606c      	str	r4, [r5, #4]
   8527c:	60ac      	str	r4, [r5, #8]
   8527e:	666c      	str	r4, [r5, #100]	; 0x64
   85280:	81ec      	strh	r4, [r5, #14]
   85282:	612c      	str	r4, [r5, #16]
   85284:	616c      	str	r4, [r5, #20]
   85286:	61ac      	str	r4, [r5, #24]
   85288:	81ab      	strh	r3, [r5, #12]
   8528a:	4621      	mov	r1, r4
   8528c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85290:	2208      	movs	r2, #8
   85292:	f7ff fd43 	bl	84d1c <memset>
   85296:	f8df b09c 	ldr.w	fp, [pc, #156]	; 85334 <__sinit.part.1+0xe0>
   8529a:	68be      	ldr	r6, [r7, #8]
   8529c:	f8df a098 	ldr.w	sl, [pc, #152]	; 85338 <__sinit.part.1+0xe4>
   852a0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8533c <__sinit.part.1+0xe8>
   852a4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 85340 <__sinit.part.1+0xec>
   852a8:	2301      	movs	r3, #1
   852aa:	2209      	movs	r2, #9
   852ac:	f8c5 b020 	str.w	fp, [r5, #32]
   852b0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   852b4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   852b8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   852bc:	61ed      	str	r5, [r5, #28]
   852be:	4621      	mov	r1, r4
   852c0:	81f3      	strh	r3, [r6, #14]
   852c2:	81b2      	strh	r2, [r6, #12]
   852c4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   852c8:	6034      	str	r4, [r6, #0]
   852ca:	6074      	str	r4, [r6, #4]
   852cc:	60b4      	str	r4, [r6, #8]
   852ce:	6674      	str	r4, [r6, #100]	; 0x64
   852d0:	6134      	str	r4, [r6, #16]
   852d2:	6174      	str	r4, [r6, #20]
   852d4:	61b4      	str	r4, [r6, #24]
   852d6:	2208      	movs	r2, #8
   852d8:	9301      	str	r3, [sp, #4]
   852da:	f7ff fd1f 	bl	84d1c <memset>
   852de:	68fd      	ldr	r5, [r7, #12]
   852e0:	2012      	movs	r0, #18
   852e2:	2202      	movs	r2, #2
   852e4:	61f6      	str	r6, [r6, #28]
   852e6:	f8c6 b020 	str.w	fp, [r6, #32]
   852ea:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   852ee:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   852f2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   852f6:	4621      	mov	r1, r4
   852f8:	81a8      	strh	r0, [r5, #12]
   852fa:	81ea      	strh	r2, [r5, #14]
   852fc:	602c      	str	r4, [r5, #0]
   852fe:	606c      	str	r4, [r5, #4]
   85300:	60ac      	str	r4, [r5, #8]
   85302:	666c      	str	r4, [r5, #100]	; 0x64
   85304:	612c      	str	r4, [r5, #16]
   85306:	616c      	str	r4, [r5, #20]
   85308:	61ac      	str	r4, [r5, #24]
   8530a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8530e:	2208      	movs	r2, #8
   85310:	f7ff fd04 	bl	84d1c <memset>
   85314:	9b01      	ldr	r3, [sp, #4]
   85316:	61ed      	str	r5, [r5, #28]
   85318:	f8c5 b020 	str.w	fp, [r5, #32]
   8531c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85320:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   85324:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85328:	63bb      	str	r3, [r7, #56]	; 0x38
   8532a:	b003      	add	sp, #12
   8532c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85330:	00085249 	.word	0x00085249
   85334:	000865d5 	.word	0x000865d5
   85338:	000865f9 	.word	0x000865f9
   8533c:	00086635 	.word	0x00086635
   85340:	00086655 	.word	0x00086655

00085344 <__sinit>:
   85344:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85346:	b103      	cbz	r3, 8534a <__sinit+0x6>
   85348:	4770      	bx	lr
   8534a:	f7ff bf83 	b.w	85254 <__sinit.part.1>
   8534e:	bf00      	nop

00085350 <__sfp_lock_acquire>:
   85350:	4770      	bx	lr
   85352:	bf00      	nop

00085354 <__sfp_lock_release>:
   85354:	4770      	bx	lr
   85356:	bf00      	nop

00085358 <__libc_fini_array>:
   85358:	b538      	push	{r3, r4, r5, lr}
   8535a:	4d07      	ldr	r5, [pc, #28]	; (85378 <__libc_fini_array+0x20>)
   8535c:	4c07      	ldr	r4, [pc, #28]	; (8537c <__libc_fini_array+0x24>)
   8535e:	1b2c      	subs	r4, r5, r4
   85360:	10a4      	asrs	r4, r4, #2
   85362:	d005      	beq.n	85370 <__libc_fini_array+0x18>
   85364:	3c01      	subs	r4, #1
   85366:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8536a:	4798      	blx	r3
   8536c:	2c00      	cmp	r4, #0
   8536e:	d1f9      	bne.n	85364 <__libc_fini_array+0xc>
   85370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85374:	f001 bb3a 	b.w	869ec <_fini>
   85378:	000869fc 	.word	0x000869fc
   8537c:	000869f8 	.word	0x000869f8

00085380 <_malloc_trim_r>:
   85380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85382:	460c      	mov	r4, r1
   85384:	4f22      	ldr	r7, [pc, #136]	; (85410 <_malloc_trim_r+0x90>)
   85386:	4606      	mov	r6, r0
   85388:	f000 ff24 	bl	861d4 <__malloc_lock>
   8538c:	68bb      	ldr	r3, [r7, #8]
   8538e:	685d      	ldr	r5, [r3, #4]
   85390:	f025 0503 	bic.w	r5, r5, #3
   85394:	1b29      	subs	r1, r5, r4
   85396:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   8539a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8539e:	f021 010f 	bic.w	r1, r1, #15
   853a2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   853a6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   853aa:	db07      	blt.n	853bc <_malloc_trim_r+0x3c>
   853ac:	2100      	movs	r1, #0
   853ae:	4630      	mov	r0, r6
   853b0:	f001 f8fe 	bl	865b0 <_sbrk_r>
   853b4:	68bb      	ldr	r3, [r7, #8]
   853b6:	442b      	add	r3, r5
   853b8:	4298      	cmp	r0, r3
   853ba:	d004      	beq.n	853c6 <_malloc_trim_r+0x46>
   853bc:	4630      	mov	r0, r6
   853be:	f000 ff0b 	bl	861d8 <__malloc_unlock>
   853c2:	2000      	movs	r0, #0
   853c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   853c6:	4261      	negs	r1, r4
   853c8:	4630      	mov	r0, r6
   853ca:	f001 f8f1 	bl	865b0 <_sbrk_r>
   853ce:	3001      	adds	r0, #1
   853d0:	d00d      	beq.n	853ee <_malloc_trim_r+0x6e>
   853d2:	4b10      	ldr	r3, [pc, #64]	; (85414 <_malloc_trim_r+0x94>)
   853d4:	68ba      	ldr	r2, [r7, #8]
   853d6:	6819      	ldr	r1, [r3, #0]
   853d8:	1b2d      	subs	r5, r5, r4
   853da:	f045 0501 	orr.w	r5, r5, #1
   853de:	4630      	mov	r0, r6
   853e0:	1b09      	subs	r1, r1, r4
   853e2:	6055      	str	r5, [r2, #4]
   853e4:	6019      	str	r1, [r3, #0]
   853e6:	f000 fef7 	bl	861d8 <__malloc_unlock>
   853ea:	2001      	movs	r0, #1
   853ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   853ee:	2100      	movs	r1, #0
   853f0:	4630      	mov	r0, r6
   853f2:	f001 f8dd 	bl	865b0 <_sbrk_r>
   853f6:	68ba      	ldr	r2, [r7, #8]
   853f8:	1a83      	subs	r3, r0, r2
   853fa:	2b0f      	cmp	r3, #15
   853fc:	ddde      	ble.n	853bc <_malloc_trim_r+0x3c>
   853fe:	4c06      	ldr	r4, [pc, #24]	; (85418 <_malloc_trim_r+0x98>)
   85400:	4904      	ldr	r1, [pc, #16]	; (85414 <_malloc_trim_r+0x94>)
   85402:	6824      	ldr	r4, [r4, #0]
   85404:	f043 0301 	orr.w	r3, r3, #1
   85408:	1b00      	subs	r0, r0, r4
   8540a:	6053      	str	r3, [r2, #4]
   8540c:	6008      	str	r0, [r1, #0]
   8540e:	e7d5      	b.n	853bc <_malloc_trim_r+0x3c>
   85410:	200705cc 	.word	0x200705cc
   85414:	20070a88 	.word	0x20070a88
   85418:	200709d8 	.word	0x200709d8

0008541c <_free_r>:
   8541c:	2900      	cmp	r1, #0
   8541e:	d045      	beq.n	854ac <_free_r+0x90>
   85420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85424:	460d      	mov	r5, r1
   85426:	4680      	mov	r8, r0
   85428:	f000 fed4 	bl	861d4 <__malloc_lock>
   8542c:	f855 7c04 	ldr.w	r7, [r5, #-4]
   85430:	496a      	ldr	r1, [pc, #424]	; (855dc <_free_r+0x1c0>)
   85432:	f1a5 0408 	sub.w	r4, r5, #8
   85436:	f027 0301 	bic.w	r3, r7, #1
   8543a:	18e2      	adds	r2, r4, r3
   8543c:	688e      	ldr	r6, [r1, #8]
   8543e:	6850      	ldr	r0, [r2, #4]
   85440:	42b2      	cmp	r2, r6
   85442:	f020 0003 	bic.w	r0, r0, #3
   85446:	d062      	beq.n	8550e <_free_r+0xf2>
   85448:	07fe      	lsls	r6, r7, #31
   8544a:	6050      	str	r0, [r2, #4]
   8544c:	d40b      	bmi.n	85466 <_free_r+0x4a>
   8544e:	f855 7c08 	ldr.w	r7, [r5, #-8]
   85452:	f101 0e08 	add.w	lr, r1, #8
   85456:	1be4      	subs	r4, r4, r7
   85458:	68a5      	ldr	r5, [r4, #8]
   8545a:	443b      	add	r3, r7
   8545c:	4575      	cmp	r5, lr
   8545e:	d06f      	beq.n	85540 <_free_r+0x124>
   85460:	68e7      	ldr	r7, [r4, #12]
   85462:	60ef      	str	r7, [r5, #12]
   85464:	60bd      	str	r5, [r7, #8]
   85466:	1815      	adds	r5, r2, r0
   85468:	686d      	ldr	r5, [r5, #4]
   8546a:	07ed      	lsls	r5, r5, #31
   8546c:	d542      	bpl.n	854f4 <_free_r+0xd8>
   8546e:	f043 0201 	orr.w	r2, r3, #1
   85472:	6062      	str	r2, [r4, #4]
   85474:	50e3      	str	r3, [r4, r3]
   85476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8547a:	d218      	bcs.n	854ae <_free_r+0x92>
   8547c:	08db      	lsrs	r3, r3, #3
   8547e:	6848      	ldr	r0, [r1, #4]
   85480:	109d      	asrs	r5, r3, #2
   85482:	2201      	movs	r2, #1
   85484:	3301      	adds	r3, #1
   85486:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   8548a:	fa02 f505 	lsl.w	r5, r2, r5
   8548e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   85492:	4328      	orrs	r0, r5
   85494:	3a08      	subs	r2, #8
   85496:	60e2      	str	r2, [r4, #12]
   85498:	60a7      	str	r7, [r4, #8]
   8549a:	6048      	str	r0, [r1, #4]
   8549c:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   854a0:	60fc      	str	r4, [r7, #12]
   854a2:	4640      	mov	r0, r8
   854a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   854a8:	f000 be96 	b.w	861d8 <__malloc_unlock>
   854ac:	4770      	bx	lr
   854ae:	0a5a      	lsrs	r2, r3, #9
   854b0:	2a04      	cmp	r2, #4
   854b2:	d853      	bhi.n	8555c <_free_r+0x140>
   854b4:	099a      	lsrs	r2, r3, #6
   854b6:	f102 0739 	add.w	r7, r2, #57	; 0x39
   854ba:	007f      	lsls	r7, r7, #1
   854bc:	f102 0538 	add.w	r5, r2, #56	; 0x38
   854c0:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   854c4:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   854c8:	3808      	subs	r0, #8
   854ca:	4290      	cmp	r0, r2
   854cc:	4943      	ldr	r1, [pc, #268]	; (855dc <_free_r+0x1c0>)
   854ce:	d04d      	beq.n	8556c <_free_r+0x150>
   854d0:	6851      	ldr	r1, [r2, #4]
   854d2:	f021 0103 	bic.w	r1, r1, #3
   854d6:	428b      	cmp	r3, r1
   854d8:	d202      	bcs.n	854e0 <_free_r+0xc4>
   854da:	6892      	ldr	r2, [r2, #8]
   854dc:	4290      	cmp	r0, r2
   854de:	d1f7      	bne.n	854d0 <_free_r+0xb4>
   854e0:	68d0      	ldr	r0, [r2, #12]
   854e2:	60e0      	str	r0, [r4, #12]
   854e4:	60a2      	str	r2, [r4, #8]
   854e6:	6084      	str	r4, [r0, #8]
   854e8:	60d4      	str	r4, [r2, #12]
   854ea:	4640      	mov	r0, r8
   854ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   854f0:	f000 be72 	b.w	861d8 <__malloc_unlock>
   854f4:	6895      	ldr	r5, [r2, #8]
   854f6:	4f3a      	ldr	r7, [pc, #232]	; (855e0 <_free_r+0x1c4>)
   854f8:	4403      	add	r3, r0
   854fa:	42bd      	cmp	r5, r7
   854fc:	d03f      	beq.n	8557e <_free_r+0x162>
   854fe:	68d0      	ldr	r0, [r2, #12]
   85500:	f043 0201 	orr.w	r2, r3, #1
   85504:	60e8      	str	r0, [r5, #12]
   85506:	6085      	str	r5, [r0, #8]
   85508:	6062      	str	r2, [r4, #4]
   8550a:	50e3      	str	r3, [r4, r3]
   8550c:	e7b3      	b.n	85476 <_free_r+0x5a>
   8550e:	07ff      	lsls	r7, r7, #31
   85510:	4403      	add	r3, r0
   85512:	d407      	bmi.n	85524 <_free_r+0x108>
   85514:	f855 5c08 	ldr.w	r5, [r5, #-8]
   85518:	1b64      	subs	r4, r4, r5
   8551a:	68e2      	ldr	r2, [r4, #12]
   8551c:	68a0      	ldr	r0, [r4, #8]
   8551e:	442b      	add	r3, r5
   85520:	60c2      	str	r2, [r0, #12]
   85522:	6090      	str	r0, [r2, #8]
   85524:	4a2f      	ldr	r2, [pc, #188]	; (855e4 <_free_r+0x1c8>)
   85526:	f043 0001 	orr.w	r0, r3, #1
   8552a:	6812      	ldr	r2, [r2, #0]
   8552c:	6060      	str	r0, [r4, #4]
   8552e:	4293      	cmp	r3, r2
   85530:	608c      	str	r4, [r1, #8]
   85532:	d3b6      	bcc.n	854a2 <_free_r+0x86>
   85534:	4b2c      	ldr	r3, [pc, #176]	; (855e8 <_free_r+0x1cc>)
   85536:	4640      	mov	r0, r8
   85538:	6819      	ldr	r1, [r3, #0]
   8553a:	f7ff ff21 	bl	85380 <_malloc_trim_r>
   8553e:	e7b0      	b.n	854a2 <_free_r+0x86>
   85540:	1811      	adds	r1, r2, r0
   85542:	6849      	ldr	r1, [r1, #4]
   85544:	07c9      	lsls	r1, r1, #31
   85546:	d444      	bmi.n	855d2 <_free_r+0x1b6>
   85548:	6891      	ldr	r1, [r2, #8]
   8554a:	4403      	add	r3, r0
   8554c:	68d2      	ldr	r2, [r2, #12]
   8554e:	f043 0001 	orr.w	r0, r3, #1
   85552:	60ca      	str	r2, [r1, #12]
   85554:	6091      	str	r1, [r2, #8]
   85556:	6060      	str	r0, [r4, #4]
   85558:	50e3      	str	r3, [r4, r3]
   8555a:	e7a2      	b.n	854a2 <_free_r+0x86>
   8555c:	2a14      	cmp	r2, #20
   8555e:	d817      	bhi.n	85590 <_free_r+0x174>
   85560:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   85564:	007f      	lsls	r7, r7, #1
   85566:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8556a:	e7a9      	b.n	854c0 <_free_r+0xa4>
   8556c:	10aa      	asrs	r2, r5, #2
   8556e:	684b      	ldr	r3, [r1, #4]
   85570:	2501      	movs	r5, #1
   85572:	fa05 f202 	lsl.w	r2, r5, r2
   85576:	4313      	orrs	r3, r2
   85578:	604b      	str	r3, [r1, #4]
   8557a:	4602      	mov	r2, r0
   8557c:	e7b1      	b.n	854e2 <_free_r+0xc6>
   8557e:	f043 0201 	orr.w	r2, r3, #1
   85582:	614c      	str	r4, [r1, #20]
   85584:	610c      	str	r4, [r1, #16]
   85586:	60e5      	str	r5, [r4, #12]
   85588:	60a5      	str	r5, [r4, #8]
   8558a:	6062      	str	r2, [r4, #4]
   8558c:	50e3      	str	r3, [r4, r3]
   8558e:	e788      	b.n	854a2 <_free_r+0x86>
   85590:	2a54      	cmp	r2, #84	; 0x54
   85592:	d806      	bhi.n	855a2 <_free_r+0x186>
   85594:	0b1a      	lsrs	r2, r3, #12
   85596:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   8559a:	007f      	lsls	r7, r7, #1
   8559c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   855a0:	e78e      	b.n	854c0 <_free_r+0xa4>
   855a2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   855a6:	d806      	bhi.n	855b6 <_free_r+0x19a>
   855a8:	0bda      	lsrs	r2, r3, #15
   855aa:	f102 0778 	add.w	r7, r2, #120	; 0x78
   855ae:	007f      	lsls	r7, r7, #1
   855b0:	f102 0577 	add.w	r5, r2, #119	; 0x77
   855b4:	e784      	b.n	854c0 <_free_r+0xa4>
   855b6:	f240 5054 	movw	r0, #1364	; 0x554
   855ba:	4282      	cmp	r2, r0
   855bc:	d806      	bhi.n	855cc <_free_r+0x1b0>
   855be:	0c9a      	lsrs	r2, r3, #18
   855c0:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   855c4:	007f      	lsls	r7, r7, #1
   855c6:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   855ca:	e779      	b.n	854c0 <_free_r+0xa4>
   855cc:	27fe      	movs	r7, #254	; 0xfe
   855ce:	257e      	movs	r5, #126	; 0x7e
   855d0:	e776      	b.n	854c0 <_free_r+0xa4>
   855d2:	f043 0201 	orr.w	r2, r3, #1
   855d6:	6062      	str	r2, [r4, #4]
   855d8:	50e3      	str	r3, [r4, r3]
   855da:	e762      	b.n	854a2 <_free_r+0x86>
   855dc:	200705cc 	.word	0x200705cc
   855e0:	200705d4 	.word	0x200705d4
   855e4:	200709d4 	.word	0x200709d4
   855e8:	20070a84 	.word	0x20070a84

000855ec <__sfvwrite_r>:
   855ec:	6893      	ldr	r3, [r2, #8]
   855ee:	2b00      	cmp	r3, #0
   855f0:	f000 80ab 	beq.w	8574a <__sfvwrite_r+0x15e>
   855f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   855f8:	898b      	ldrh	r3, [r1, #12]
   855fa:	b085      	sub	sp, #20
   855fc:	460c      	mov	r4, r1
   855fe:	0719      	lsls	r1, r3, #28
   85600:	9002      	str	r0, [sp, #8]
   85602:	4616      	mov	r6, r2
   85604:	d528      	bpl.n	85658 <__sfvwrite_r+0x6c>
   85606:	6922      	ldr	r2, [r4, #16]
   85608:	b332      	cbz	r2, 85658 <__sfvwrite_r+0x6c>
   8560a:	f003 0802 	and.w	r8, r3, #2
   8560e:	fa1f f088 	uxth.w	r0, r8
   85612:	6835      	ldr	r5, [r6, #0]
   85614:	b378      	cbz	r0, 85676 <__sfvwrite_r+0x8a>
   85616:	f04f 0900 	mov.w	r9, #0
   8561a:	46c8      	mov	r8, r9
   8561c:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 858f0 <__sfvwrite_r+0x304>
   85620:	f1b8 0f00 	cmp.w	r8, #0
   85624:	f000 808b 	beq.w	8573e <__sfvwrite_r+0x152>
   85628:	45d0      	cmp	r8, sl
   8562a:	4643      	mov	r3, r8
   8562c:	464a      	mov	r2, r9
   8562e:	bf28      	it	cs
   85630:	4653      	movcs	r3, sl
   85632:	69e1      	ldr	r1, [r4, #28]
   85634:	9802      	ldr	r0, [sp, #8]
   85636:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85638:	47b8      	blx	r7
   8563a:	2800      	cmp	r0, #0
   8563c:	f340 80a5 	ble.w	8578a <__sfvwrite_r+0x19e>
   85640:	68b3      	ldr	r3, [r6, #8]
   85642:	4481      	add	r9, r0
   85644:	1a1b      	subs	r3, r3, r0
   85646:	ebc0 0808 	rsb	r8, r0, r8
   8564a:	60b3      	str	r3, [r6, #8]
   8564c:	2b00      	cmp	r3, #0
   8564e:	d1e7      	bne.n	85620 <__sfvwrite_r+0x34>
   85650:	2000      	movs	r0, #0
   85652:	b005      	add	sp, #20
   85654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85658:	4621      	mov	r1, r4
   8565a:	9802      	ldr	r0, [sp, #8]
   8565c:	f7ff fcc6 	bl	84fec <__swsetup_r>
   85660:	2800      	cmp	r0, #0
   85662:	f040 813c 	bne.w	858de <__sfvwrite_r+0x2f2>
   85666:	89a3      	ldrh	r3, [r4, #12]
   85668:	6835      	ldr	r5, [r6, #0]
   8566a:	f003 0802 	and.w	r8, r3, #2
   8566e:	fa1f f088 	uxth.w	r0, r8
   85672:	2800      	cmp	r0, #0
   85674:	d1cf      	bne.n	85616 <__sfvwrite_r+0x2a>
   85676:	f013 0901 	ands.w	r9, r3, #1
   8567a:	f040 8090 	bne.w	8579e <__sfvwrite_r+0x1b2>
   8567e:	464f      	mov	r7, r9
   85680:	9601      	str	r6, [sp, #4]
   85682:	2f00      	cmp	r7, #0
   85684:	d056      	beq.n	85734 <__sfvwrite_r+0x148>
   85686:	059a      	lsls	r2, r3, #22
   85688:	f8d4 8008 	ldr.w	r8, [r4, #8]
   8568c:	d55f      	bpl.n	8574e <__sfvwrite_r+0x162>
   8568e:	4547      	cmp	r7, r8
   85690:	46c2      	mov	sl, r8
   85692:	f0c0 80bf 	bcc.w	85814 <__sfvwrite_r+0x228>
   85696:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8569a:	f000 80bd 	beq.w	85818 <__sfvwrite_r+0x22c>
   8569e:	6962      	ldr	r2, [r4, #20]
   856a0:	6820      	ldr	r0, [r4, #0]
   856a2:	6921      	ldr	r1, [r4, #16]
   856a4:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   856a8:	ebc1 0a00 	rsb	sl, r1, r0
   856ac:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   856b0:	f10a 0001 	add.w	r0, sl, #1
   856b4:	ea4f 0868 	mov.w	r8, r8, asr #1
   856b8:	4438      	add	r0, r7
   856ba:	4540      	cmp	r0, r8
   856bc:	4642      	mov	r2, r8
   856be:	bf84      	itt	hi
   856c0:	4680      	movhi	r8, r0
   856c2:	4642      	movhi	r2, r8
   856c4:	055b      	lsls	r3, r3, #21
   856c6:	f140 80f2 	bpl.w	858ae <__sfvwrite_r+0x2c2>
   856ca:	4611      	mov	r1, r2
   856cc:	9802      	ldr	r0, [sp, #8]
   856ce:	f000 f9b5 	bl	85a3c <_malloc_r>
   856d2:	4683      	mov	fp, r0
   856d4:	2800      	cmp	r0, #0
   856d6:	f000 8105 	beq.w	858e4 <__sfvwrite_r+0x2f8>
   856da:	4652      	mov	r2, sl
   856dc:	6921      	ldr	r1, [r4, #16]
   856de:	f000 fc9f 	bl	86020 <memcpy>
   856e2:	89a3      	ldrh	r3, [r4, #12]
   856e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   856e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   856ec:	81a3      	strh	r3, [r4, #12]
   856ee:	ebca 0308 	rsb	r3, sl, r8
   856f2:	eb0b 000a 	add.w	r0, fp, sl
   856f6:	f8c4 8014 	str.w	r8, [r4, #20]
   856fa:	46ba      	mov	sl, r7
   856fc:	46b8      	mov	r8, r7
   856fe:	f8c4 b010 	str.w	fp, [r4, #16]
   85702:	6020      	str	r0, [r4, #0]
   85704:	60a3      	str	r3, [r4, #8]
   85706:	4652      	mov	r2, sl
   85708:	4649      	mov	r1, r9
   8570a:	f000 fcff 	bl	8610c <memmove>
   8570e:	68a0      	ldr	r0, [r4, #8]
   85710:	6823      	ldr	r3, [r4, #0]
   85712:	ebc8 0000 	rsb	r0, r8, r0
   85716:	60a0      	str	r0, [r4, #8]
   85718:	4638      	mov	r0, r7
   8571a:	4453      	add	r3, sl
   8571c:	6023      	str	r3, [r4, #0]
   8571e:	9a01      	ldr	r2, [sp, #4]
   85720:	4481      	add	r9, r0
   85722:	6893      	ldr	r3, [r2, #8]
   85724:	1a3f      	subs	r7, r7, r0
   85726:	1a1b      	subs	r3, r3, r0
   85728:	6093      	str	r3, [r2, #8]
   8572a:	2b00      	cmp	r3, #0
   8572c:	d090      	beq.n	85650 <__sfvwrite_r+0x64>
   8572e:	89a3      	ldrh	r3, [r4, #12]
   85730:	2f00      	cmp	r7, #0
   85732:	d1a8      	bne.n	85686 <__sfvwrite_r+0x9a>
   85734:	f8d5 9000 	ldr.w	r9, [r5]
   85738:	686f      	ldr	r7, [r5, #4]
   8573a:	3508      	adds	r5, #8
   8573c:	e7a1      	b.n	85682 <__sfvwrite_r+0x96>
   8573e:	f8d5 9000 	ldr.w	r9, [r5]
   85742:	f8d5 8004 	ldr.w	r8, [r5, #4]
   85746:	3508      	adds	r5, #8
   85748:	e76a      	b.n	85620 <__sfvwrite_r+0x34>
   8574a:	2000      	movs	r0, #0
   8574c:	4770      	bx	lr
   8574e:	6820      	ldr	r0, [r4, #0]
   85750:	6923      	ldr	r3, [r4, #16]
   85752:	4298      	cmp	r0, r3
   85754:	d803      	bhi.n	8575e <__sfvwrite_r+0x172>
   85756:	6962      	ldr	r2, [r4, #20]
   85758:	4297      	cmp	r7, r2
   8575a:	f080 8083 	bcs.w	85864 <__sfvwrite_r+0x278>
   8575e:	45b8      	cmp	r8, r7
   85760:	bf28      	it	cs
   85762:	46b8      	movcs	r8, r7
   85764:	4649      	mov	r1, r9
   85766:	4642      	mov	r2, r8
   85768:	f000 fcd0 	bl	8610c <memmove>
   8576c:	68a3      	ldr	r3, [r4, #8]
   8576e:	6822      	ldr	r2, [r4, #0]
   85770:	ebc8 0303 	rsb	r3, r8, r3
   85774:	4442      	add	r2, r8
   85776:	60a3      	str	r3, [r4, #8]
   85778:	6022      	str	r2, [r4, #0]
   8577a:	2b00      	cmp	r3, #0
   8577c:	d148      	bne.n	85810 <__sfvwrite_r+0x224>
   8577e:	4621      	mov	r1, r4
   85780:	9802      	ldr	r0, [sp, #8]
   85782:	f7ff fd4b 	bl	8521c <_fflush_r>
   85786:	2800      	cmp	r0, #0
   85788:	d042      	beq.n	85810 <__sfvwrite_r+0x224>
   8578a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8578e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85792:	f04f 30ff 	mov.w	r0, #4294967295
   85796:	81a3      	strh	r3, [r4, #12]
   85798:	b005      	add	sp, #20
   8579a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8579e:	4680      	mov	r8, r0
   857a0:	4682      	mov	sl, r0
   857a2:	4681      	mov	r9, r0
   857a4:	9001      	str	r0, [sp, #4]
   857a6:	f1b9 0f00 	cmp.w	r9, #0
   857aa:	d029      	beq.n	85800 <__sfvwrite_r+0x214>
   857ac:	9b01      	ldr	r3, [sp, #4]
   857ae:	2b00      	cmp	r3, #0
   857b0:	d04b      	beq.n	8584a <__sfvwrite_r+0x25e>
   857b2:	45c8      	cmp	r8, r9
   857b4:	46c3      	mov	fp, r8
   857b6:	bf28      	it	cs
   857b8:	46cb      	movcs	fp, r9
   857ba:	6820      	ldr	r0, [r4, #0]
   857bc:	6923      	ldr	r3, [r4, #16]
   857be:	465f      	mov	r7, fp
   857c0:	4298      	cmp	r0, r3
   857c2:	6962      	ldr	r2, [r4, #20]
   857c4:	d903      	bls.n	857ce <__sfvwrite_r+0x1e2>
   857c6:	68a3      	ldr	r3, [r4, #8]
   857c8:	4413      	add	r3, r2
   857ca:	459b      	cmp	fp, r3
   857cc:	dc5c      	bgt.n	85888 <__sfvwrite_r+0x29c>
   857ce:	4593      	cmp	fp, r2
   857d0:	db24      	blt.n	8581c <__sfvwrite_r+0x230>
   857d2:	4613      	mov	r3, r2
   857d4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   857d6:	4652      	mov	r2, sl
   857d8:	69e1      	ldr	r1, [r4, #28]
   857da:	9802      	ldr	r0, [sp, #8]
   857dc:	47b8      	blx	r7
   857de:	1e07      	subs	r7, r0, #0
   857e0:	ddd3      	ble.n	8578a <__sfvwrite_r+0x19e>
   857e2:	ebb8 0807 	subs.w	r8, r8, r7
   857e6:	d027      	beq.n	85838 <__sfvwrite_r+0x24c>
   857e8:	68b3      	ldr	r3, [r6, #8]
   857ea:	44ba      	add	sl, r7
   857ec:	1bdb      	subs	r3, r3, r7
   857ee:	ebc7 0909 	rsb	r9, r7, r9
   857f2:	60b3      	str	r3, [r6, #8]
   857f4:	2b00      	cmp	r3, #0
   857f6:	f43f af2b 	beq.w	85650 <__sfvwrite_r+0x64>
   857fa:	f1b9 0f00 	cmp.w	r9, #0
   857fe:	d1d5      	bne.n	857ac <__sfvwrite_r+0x1c0>
   85800:	2300      	movs	r3, #0
   85802:	f8d5 a000 	ldr.w	sl, [r5]
   85806:	f8d5 9004 	ldr.w	r9, [r5, #4]
   8580a:	9301      	str	r3, [sp, #4]
   8580c:	3508      	adds	r5, #8
   8580e:	e7ca      	b.n	857a6 <__sfvwrite_r+0x1ba>
   85810:	4640      	mov	r0, r8
   85812:	e784      	b.n	8571e <__sfvwrite_r+0x132>
   85814:	46b8      	mov	r8, r7
   85816:	46ba      	mov	sl, r7
   85818:	6820      	ldr	r0, [r4, #0]
   8581a:	e774      	b.n	85706 <__sfvwrite_r+0x11a>
   8581c:	465a      	mov	r2, fp
   8581e:	4651      	mov	r1, sl
   85820:	f000 fc74 	bl	8610c <memmove>
   85824:	68a2      	ldr	r2, [r4, #8]
   85826:	6823      	ldr	r3, [r4, #0]
   85828:	ebcb 0202 	rsb	r2, fp, r2
   8582c:	445b      	add	r3, fp
   8582e:	ebb8 0807 	subs.w	r8, r8, r7
   85832:	60a2      	str	r2, [r4, #8]
   85834:	6023      	str	r3, [r4, #0]
   85836:	d1d7      	bne.n	857e8 <__sfvwrite_r+0x1fc>
   85838:	4621      	mov	r1, r4
   8583a:	9802      	ldr	r0, [sp, #8]
   8583c:	f7ff fcee 	bl	8521c <_fflush_r>
   85840:	2800      	cmp	r0, #0
   85842:	d1a2      	bne.n	8578a <__sfvwrite_r+0x19e>
   85844:	f8cd 8004 	str.w	r8, [sp, #4]
   85848:	e7ce      	b.n	857e8 <__sfvwrite_r+0x1fc>
   8584a:	464a      	mov	r2, r9
   8584c:	210a      	movs	r1, #10
   8584e:	4650      	mov	r0, sl
   85850:	f000 fba0 	bl	85f94 <memchr>
   85854:	2800      	cmp	r0, #0
   85856:	d03d      	beq.n	858d4 <__sfvwrite_r+0x2e8>
   85858:	3001      	adds	r0, #1
   8585a:	2301      	movs	r3, #1
   8585c:	ebca 0800 	rsb	r8, sl, r0
   85860:	9301      	str	r3, [sp, #4]
   85862:	e7a6      	b.n	857b2 <__sfvwrite_r+0x1c6>
   85864:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   85868:	42bb      	cmp	r3, r7
   8586a:	bf28      	it	cs
   8586c:	463b      	movcs	r3, r7
   8586e:	fb93 f3f2 	sdiv	r3, r3, r2
   85872:	69e1      	ldr	r1, [r4, #28]
   85874:	fb02 f303 	mul.w	r3, r2, r3
   85878:	9802      	ldr	r0, [sp, #8]
   8587a:	464a      	mov	r2, r9
   8587c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8587e:	47b0      	blx	r6
   85880:	2800      	cmp	r0, #0
   85882:	f73f af4c 	bgt.w	8571e <__sfvwrite_r+0x132>
   85886:	e780      	b.n	8578a <__sfvwrite_r+0x19e>
   85888:	461a      	mov	r2, r3
   8588a:	4651      	mov	r1, sl
   8588c:	9303      	str	r3, [sp, #12]
   8588e:	f000 fc3d 	bl	8610c <memmove>
   85892:	6822      	ldr	r2, [r4, #0]
   85894:	9b03      	ldr	r3, [sp, #12]
   85896:	4621      	mov	r1, r4
   85898:	441a      	add	r2, r3
   8589a:	6022      	str	r2, [r4, #0]
   8589c:	9802      	ldr	r0, [sp, #8]
   8589e:	f7ff fcbd 	bl	8521c <_fflush_r>
   858a2:	9b03      	ldr	r3, [sp, #12]
   858a4:	2800      	cmp	r0, #0
   858a6:	f47f af70 	bne.w	8578a <__sfvwrite_r+0x19e>
   858aa:	461f      	mov	r7, r3
   858ac:	e799      	b.n	857e2 <__sfvwrite_r+0x1f6>
   858ae:	9802      	ldr	r0, [sp, #8]
   858b0:	f000 fc94 	bl	861dc <_realloc_r>
   858b4:	4683      	mov	fp, r0
   858b6:	2800      	cmp	r0, #0
   858b8:	f47f af19 	bne.w	856ee <__sfvwrite_r+0x102>
   858bc:	9d02      	ldr	r5, [sp, #8]
   858be:	6921      	ldr	r1, [r4, #16]
   858c0:	4628      	mov	r0, r5
   858c2:	f7ff fdab 	bl	8541c <_free_r>
   858c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   858ca:	220c      	movs	r2, #12
   858cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   858d0:	602a      	str	r2, [r5, #0]
   858d2:	e75c      	b.n	8578e <__sfvwrite_r+0x1a2>
   858d4:	2301      	movs	r3, #1
   858d6:	f109 0801 	add.w	r8, r9, #1
   858da:	9301      	str	r3, [sp, #4]
   858dc:	e769      	b.n	857b2 <__sfvwrite_r+0x1c6>
   858de:	f04f 30ff 	mov.w	r0, #4294967295
   858e2:	e6b6      	b.n	85652 <__sfvwrite_r+0x66>
   858e4:	9a02      	ldr	r2, [sp, #8]
   858e6:	230c      	movs	r3, #12
   858e8:	6013      	str	r3, [r2, #0]
   858ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   858ee:	e74e      	b.n	8578e <__sfvwrite_r+0x1a2>
   858f0:	7ffffc00 	.word	0x7ffffc00

000858f4 <_fwalk_reent>:
   858f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   858f8:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   858fc:	d01e      	beq.n	8593c <_fwalk_reent+0x48>
   858fe:	4688      	mov	r8, r1
   85900:	4607      	mov	r7, r0
   85902:	f04f 0900 	mov.w	r9, #0
   85906:	6875      	ldr	r5, [r6, #4]
   85908:	68b4      	ldr	r4, [r6, #8]
   8590a:	3d01      	subs	r5, #1
   8590c:	d410      	bmi.n	85930 <_fwalk_reent+0x3c>
   8590e:	89a3      	ldrh	r3, [r4, #12]
   85910:	3d01      	subs	r5, #1
   85912:	2b01      	cmp	r3, #1
   85914:	d908      	bls.n	85928 <_fwalk_reent+0x34>
   85916:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8591a:	3301      	adds	r3, #1
   8591c:	d004      	beq.n	85928 <_fwalk_reent+0x34>
   8591e:	4621      	mov	r1, r4
   85920:	4638      	mov	r0, r7
   85922:	47c0      	blx	r8
   85924:	ea49 0900 	orr.w	r9, r9, r0
   85928:	1c6b      	adds	r3, r5, #1
   8592a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8592e:	d1ee      	bne.n	8590e <_fwalk_reent+0x1a>
   85930:	6836      	ldr	r6, [r6, #0]
   85932:	2e00      	cmp	r6, #0
   85934:	d1e7      	bne.n	85906 <_fwalk_reent+0x12>
   85936:	4648      	mov	r0, r9
   85938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8593c:	46b1      	mov	r9, r6
   8593e:	4648      	mov	r0, r9
   85940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00085944 <__swhatbuf_r>:
   85944:	b570      	push	{r4, r5, r6, lr}
   85946:	460e      	mov	r6, r1
   85948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8594c:	b090      	sub	sp, #64	; 0x40
   8594e:	2900      	cmp	r1, #0
   85950:	4614      	mov	r4, r2
   85952:	461d      	mov	r5, r3
   85954:	db14      	blt.n	85980 <__swhatbuf_r+0x3c>
   85956:	aa01      	add	r2, sp, #4
   85958:	f000 ff3c 	bl	867d4 <_fstat_r>
   8595c:	2800      	cmp	r0, #0
   8595e:	db0f      	blt.n	85980 <__swhatbuf_r+0x3c>
   85960:	9a02      	ldr	r2, [sp, #8]
   85962:	f44f 6380 	mov.w	r3, #1024	; 0x400
   85966:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8596a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8596e:	fab2 f282 	clz	r2, r2
   85972:	f44f 6000 	mov.w	r0, #2048	; 0x800
   85976:	0952      	lsrs	r2, r2, #5
   85978:	602a      	str	r2, [r5, #0]
   8597a:	6023      	str	r3, [r4, #0]
   8597c:	b010      	add	sp, #64	; 0x40
   8597e:	bd70      	pop	{r4, r5, r6, pc}
   85980:	89b2      	ldrh	r2, [r6, #12]
   85982:	2000      	movs	r0, #0
   85984:	f002 0280 	and.w	r2, r2, #128	; 0x80
   85988:	b292      	uxth	r2, r2
   8598a:	6028      	str	r0, [r5, #0]
   8598c:	b11a      	cbz	r2, 85996 <__swhatbuf_r+0x52>
   8598e:	2340      	movs	r3, #64	; 0x40
   85990:	6023      	str	r3, [r4, #0]
   85992:	b010      	add	sp, #64	; 0x40
   85994:	bd70      	pop	{r4, r5, r6, pc}
   85996:	4610      	mov	r0, r2
   85998:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8599c:	6023      	str	r3, [r4, #0]
   8599e:	b010      	add	sp, #64	; 0x40
   859a0:	bd70      	pop	{r4, r5, r6, pc}
   859a2:	bf00      	nop

000859a4 <__smakebuf_r>:
   859a4:	898a      	ldrh	r2, [r1, #12]
   859a6:	460b      	mov	r3, r1
   859a8:	0792      	lsls	r2, r2, #30
   859aa:	d506      	bpl.n	859ba <__smakebuf_r+0x16>
   859ac:	f101 0243 	add.w	r2, r1, #67	; 0x43
   859b0:	2101      	movs	r1, #1
   859b2:	601a      	str	r2, [r3, #0]
   859b4:	611a      	str	r2, [r3, #16]
   859b6:	6159      	str	r1, [r3, #20]
   859b8:	4770      	bx	lr
   859ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   859bc:	b083      	sub	sp, #12
   859be:	ab01      	add	r3, sp, #4
   859c0:	466a      	mov	r2, sp
   859c2:	460c      	mov	r4, r1
   859c4:	4605      	mov	r5, r0
   859c6:	f7ff ffbd 	bl	85944 <__swhatbuf_r>
   859ca:	9900      	ldr	r1, [sp, #0]
   859cc:	4606      	mov	r6, r0
   859ce:	4628      	mov	r0, r5
   859d0:	f000 f834 	bl	85a3c <_malloc_r>
   859d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   859d8:	b1d0      	cbz	r0, 85a10 <__smakebuf_r+0x6c>
   859da:	e89d 0006 	ldmia.w	sp, {r1, r2}
   859de:	4f12      	ldr	r7, [pc, #72]	; (85a28 <__smakebuf_r+0x84>)
   859e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   859e4:	63ef      	str	r7, [r5, #60]	; 0x3c
   859e6:	81a3      	strh	r3, [r4, #12]
   859e8:	6020      	str	r0, [r4, #0]
   859ea:	6120      	str	r0, [r4, #16]
   859ec:	6161      	str	r1, [r4, #20]
   859ee:	b91a      	cbnz	r2, 859f8 <__smakebuf_r+0x54>
   859f0:	4333      	orrs	r3, r6
   859f2:	81a3      	strh	r3, [r4, #12]
   859f4:	b003      	add	sp, #12
   859f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   859f8:	4628      	mov	r0, r5
   859fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   859fe:	f000 fefd 	bl	867fc <_isatty_r>
   85a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85a06:	2800      	cmp	r0, #0
   85a08:	d0f2      	beq.n	859f0 <__smakebuf_r+0x4c>
   85a0a:	f043 0301 	orr.w	r3, r3, #1
   85a0e:	e7ef      	b.n	859f0 <__smakebuf_r+0x4c>
   85a10:	059a      	lsls	r2, r3, #22
   85a12:	d4ef      	bmi.n	859f4 <__smakebuf_r+0x50>
   85a14:	f104 0243 	add.w	r2, r4, #67	; 0x43
   85a18:	f043 0302 	orr.w	r3, r3, #2
   85a1c:	2101      	movs	r1, #1
   85a1e:	81a3      	strh	r3, [r4, #12]
   85a20:	6022      	str	r2, [r4, #0]
   85a22:	6122      	str	r2, [r4, #16]
   85a24:	6161      	str	r1, [r4, #20]
   85a26:	e7e5      	b.n	859f4 <__smakebuf_r+0x50>
   85a28:	00085249 	.word	0x00085249

00085a2c <malloc>:
   85a2c:	4b02      	ldr	r3, [pc, #8]	; (85a38 <malloc+0xc>)
   85a2e:	4601      	mov	r1, r0
   85a30:	6818      	ldr	r0, [r3, #0]
   85a32:	f000 b803 	b.w	85a3c <_malloc_r>
   85a36:	bf00      	nop
   85a38:	200705c8 	.word	0x200705c8

00085a3c <_malloc_r>:
   85a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85a40:	f101 050b 	add.w	r5, r1, #11
   85a44:	2d16      	cmp	r5, #22
   85a46:	b083      	sub	sp, #12
   85a48:	4606      	mov	r6, r0
   85a4a:	f240 80a0 	bls.w	85b8e <_malloc_r+0x152>
   85a4e:	f035 0507 	bics.w	r5, r5, #7
   85a52:	f100 80c0 	bmi.w	85bd6 <_malloc_r+0x19a>
   85a56:	42a9      	cmp	r1, r5
   85a58:	f200 80bd 	bhi.w	85bd6 <_malloc_r+0x19a>
   85a5c:	f000 fbba 	bl	861d4 <__malloc_lock>
   85a60:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   85a64:	f0c0 8290 	bcc.w	85f88 <_malloc_r+0x54c>
   85a68:	0a6b      	lsrs	r3, r5, #9
   85a6a:	f000 80bb 	beq.w	85be4 <_malloc_r+0x1a8>
   85a6e:	2b04      	cmp	r3, #4
   85a70:	f200 8177 	bhi.w	85d62 <_malloc_r+0x326>
   85a74:	09a8      	lsrs	r0, r5, #6
   85a76:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   85a7a:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85a7e:	3038      	adds	r0, #56	; 0x38
   85a80:	4fbe      	ldr	r7, [pc, #760]	; (85d7c <_malloc_r+0x340>)
   85a82:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   85a86:	684c      	ldr	r4, [r1, #4]
   85a88:	3908      	subs	r1, #8
   85a8a:	42a1      	cmp	r1, r4
   85a8c:	d107      	bne.n	85a9e <_malloc_r+0x62>
   85a8e:	e0ae      	b.n	85bee <_malloc_r+0x1b2>
   85a90:	2a00      	cmp	r2, #0
   85a92:	f280 80ae 	bge.w	85bf2 <_malloc_r+0x1b6>
   85a96:	68e4      	ldr	r4, [r4, #12]
   85a98:	42a1      	cmp	r1, r4
   85a9a:	f000 80a8 	beq.w	85bee <_malloc_r+0x1b2>
   85a9e:	6863      	ldr	r3, [r4, #4]
   85aa0:	f023 0303 	bic.w	r3, r3, #3
   85aa4:	1b5a      	subs	r2, r3, r5
   85aa6:	2a0f      	cmp	r2, #15
   85aa8:	ddf2      	ble.n	85a90 <_malloc_r+0x54>
   85aaa:	49b4      	ldr	r1, [pc, #720]	; (85d7c <_malloc_r+0x340>)
   85aac:	693c      	ldr	r4, [r7, #16]
   85aae:	f101 0e08 	add.w	lr, r1, #8
   85ab2:	4574      	cmp	r4, lr
   85ab4:	f000 81a8 	beq.w	85e08 <_malloc_r+0x3cc>
   85ab8:	6863      	ldr	r3, [r4, #4]
   85aba:	f023 0303 	bic.w	r3, r3, #3
   85abe:	1b5a      	subs	r2, r3, r5
   85ac0:	2a0f      	cmp	r2, #15
   85ac2:	f300 818e 	bgt.w	85de2 <_malloc_r+0x3a6>
   85ac6:	2a00      	cmp	r2, #0
   85ac8:	f8c1 e014 	str.w	lr, [r1, #20]
   85acc:	f8c1 e010 	str.w	lr, [r1, #16]
   85ad0:	f280 8093 	bge.w	85bfa <_malloc_r+0x1be>
   85ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85ad8:	f080 815c 	bcs.w	85d94 <_malloc_r+0x358>
   85adc:	08db      	lsrs	r3, r3, #3
   85ade:	684a      	ldr	r2, [r1, #4]
   85ae0:	ea4f 09a3 	mov.w	r9, r3, asr #2
   85ae4:	f04f 0c01 	mov.w	ip, #1
   85ae8:	3301      	adds	r3, #1
   85aea:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   85aee:	fa0c f909 	lsl.w	r9, ip, r9
   85af2:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   85af6:	ea49 0202 	orr.w	r2, r9, r2
   85afa:	f1ac 0c08 	sub.w	ip, ip, #8
   85afe:	f8c4 c00c 	str.w	ip, [r4, #12]
   85b02:	f8c4 8008 	str.w	r8, [r4, #8]
   85b06:	604a      	str	r2, [r1, #4]
   85b08:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   85b0c:	f8c8 400c 	str.w	r4, [r8, #12]
   85b10:	1083      	asrs	r3, r0, #2
   85b12:	2401      	movs	r4, #1
   85b14:	409c      	lsls	r4, r3
   85b16:	4294      	cmp	r4, r2
   85b18:	d87c      	bhi.n	85c14 <_malloc_r+0x1d8>
   85b1a:	4214      	tst	r4, r2
   85b1c:	d106      	bne.n	85b2c <_malloc_r+0xf0>
   85b1e:	f020 0003 	bic.w	r0, r0, #3
   85b22:	0064      	lsls	r4, r4, #1
   85b24:	4214      	tst	r4, r2
   85b26:	f100 0004 	add.w	r0, r0, #4
   85b2a:	d0fa      	beq.n	85b22 <_malloc_r+0xe6>
   85b2c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   85b30:	46cc      	mov	ip, r9
   85b32:	4680      	mov	r8, r0
   85b34:	f8dc 100c 	ldr.w	r1, [ip, #12]
   85b38:	458c      	cmp	ip, r1
   85b3a:	d107      	bne.n	85b4c <_malloc_r+0x110>
   85b3c:	e166      	b.n	85e0c <_malloc_r+0x3d0>
   85b3e:	2a00      	cmp	r2, #0
   85b40:	f280 8174 	bge.w	85e2c <_malloc_r+0x3f0>
   85b44:	68c9      	ldr	r1, [r1, #12]
   85b46:	458c      	cmp	ip, r1
   85b48:	f000 8160 	beq.w	85e0c <_malloc_r+0x3d0>
   85b4c:	684b      	ldr	r3, [r1, #4]
   85b4e:	f023 0303 	bic.w	r3, r3, #3
   85b52:	1b5a      	subs	r2, r3, r5
   85b54:	2a0f      	cmp	r2, #15
   85b56:	ddf2      	ble.n	85b3e <_malloc_r+0x102>
   85b58:	460c      	mov	r4, r1
   85b5a:	68cb      	ldr	r3, [r1, #12]
   85b5c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   85b60:	f045 0801 	orr.w	r8, r5, #1
   85b64:	f8c1 8004 	str.w	r8, [r1, #4]
   85b68:	440d      	add	r5, r1
   85b6a:	f042 0101 	orr.w	r1, r2, #1
   85b6e:	f8cc 300c 	str.w	r3, [ip, #12]
   85b72:	4630      	mov	r0, r6
   85b74:	f8c3 c008 	str.w	ip, [r3, #8]
   85b78:	617d      	str	r5, [r7, #20]
   85b7a:	613d      	str	r5, [r7, #16]
   85b7c:	f8c5 e00c 	str.w	lr, [r5, #12]
   85b80:	f8c5 e008 	str.w	lr, [r5, #8]
   85b84:	6069      	str	r1, [r5, #4]
   85b86:	50aa      	str	r2, [r5, r2]
   85b88:	f000 fb26 	bl	861d8 <__malloc_unlock>
   85b8c:	e01f      	b.n	85bce <_malloc_r+0x192>
   85b8e:	2910      	cmp	r1, #16
   85b90:	d821      	bhi.n	85bd6 <_malloc_r+0x19a>
   85b92:	f000 fb1f 	bl	861d4 <__malloc_lock>
   85b96:	2510      	movs	r5, #16
   85b98:	2306      	movs	r3, #6
   85b9a:	2002      	movs	r0, #2
   85b9c:	4f77      	ldr	r7, [pc, #476]	; (85d7c <_malloc_r+0x340>)
   85b9e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   85ba2:	685c      	ldr	r4, [r3, #4]
   85ba4:	f1a3 0208 	sub.w	r2, r3, #8
   85ba8:	4294      	cmp	r4, r2
   85baa:	f000 8138 	beq.w	85e1e <_malloc_r+0x3e2>
   85bae:	6863      	ldr	r3, [r4, #4]
   85bb0:	68e1      	ldr	r1, [r4, #12]
   85bb2:	f023 0303 	bic.w	r3, r3, #3
   85bb6:	4423      	add	r3, r4
   85bb8:	685a      	ldr	r2, [r3, #4]
   85bba:	68a5      	ldr	r5, [r4, #8]
   85bbc:	f042 0201 	orr.w	r2, r2, #1
   85bc0:	60e9      	str	r1, [r5, #12]
   85bc2:	4630      	mov	r0, r6
   85bc4:	608d      	str	r5, [r1, #8]
   85bc6:	605a      	str	r2, [r3, #4]
   85bc8:	f000 fb06 	bl	861d8 <__malloc_unlock>
   85bcc:	3408      	adds	r4, #8
   85bce:	4620      	mov	r0, r4
   85bd0:	b003      	add	sp, #12
   85bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85bd6:	2400      	movs	r4, #0
   85bd8:	4620      	mov	r0, r4
   85bda:	230c      	movs	r3, #12
   85bdc:	6033      	str	r3, [r6, #0]
   85bde:	b003      	add	sp, #12
   85be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85be4:	2180      	movs	r1, #128	; 0x80
   85be6:	f04f 0e40 	mov.w	lr, #64	; 0x40
   85bea:	203f      	movs	r0, #63	; 0x3f
   85bec:	e748      	b.n	85a80 <_malloc_r+0x44>
   85bee:	4670      	mov	r0, lr
   85bf0:	e75b      	b.n	85aaa <_malloc_r+0x6e>
   85bf2:	4423      	add	r3, r4
   85bf4:	685a      	ldr	r2, [r3, #4]
   85bf6:	68e1      	ldr	r1, [r4, #12]
   85bf8:	e7df      	b.n	85bba <_malloc_r+0x17e>
   85bfa:	4423      	add	r3, r4
   85bfc:	685a      	ldr	r2, [r3, #4]
   85bfe:	4630      	mov	r0, r6
   85c00:	f042 0201 	orr.w	r2, r2, #1
   85c04:	605a      	str	r2, [r3, #4]
   85c06:	3408      	adds	r4, #8
   85c08:	f000 fae6 	bl	861d8 <__malloc_unlock>
   85c0c:	4620      	mov	r0, r4
   85c0e:	b003      	add	sp, #12
   85c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85c14:	68bc      	ldr	r4, [r7, #8]
   85c16:	6863      	ldr	r3, [r4, #4]
   85c18:	f023 0803 	bic.w	r8, r3, #3
   85c1c:	45a8      	cmp	r8, r5
   85c1e:	d304      	bcc.n	85c2a <_malloc_r+0x1ee>
   85c20:	ebc5 0308 	rsb	r3, r5, r8
   85c24:	2b0f      	cmp	r3, #15
   85c26:	f300 808c 	bgt.w	85d42 <_malloc_r+0x306>
   85c2a:	4b55      	ldr	r3, [pc, #340]	; (85d80 <_malloc_r+0x344>)
   85c2c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 85d90 <_malloc_r+0x354>
   85c30:	681a      	ldr	r2, [r3, #0]
   85c32:	f8d9 3000 	ldr.w	r3, [r9]
   85c36:	442a      	add	r2, r5
   85c38:	3301      	adds	r3, #1
   85c3a:	eb04 0a08 	add.w	sl, r4, r8
   85c3e:	f000 8160 	beq.w	85f02 <_malloc_r+0x4c6>
   85c42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   85c46:	320f      	adds	r2, #15
   85c48:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   85c4c:	f022 020f 	bic.w	r2, r2, #15
   85c50:	4611      	mov	r1, r2
   85c52:	4630      	mov	r0, r6
   85c54:	9201      	str	r2, [sp, #4]
   85c56:	f000 fcab 	bl	865b0 <_sbrk_r>
   85c5a:	f1b0 3fff 	cmp.w	r0, #4294967295
   85c5e:	4683      	mov	fp, r0
   85c60:	9a01      	ldr	r2, [sp, #4]
   85c62:	f000 8158 	beq.w	85f16 <_malloc_r+0x4da>
   85c66:	4582      	cmp	sl, r0
   85c68:	f200 80fc 	bhi.w	85e64 <_malloc_r+0x428>
   85c6c:	4b45      	ldr	r3, [pc, #276]	; (85d84 <_malloc_r+0x348>)
   85c6e:	45da      	cmp	sl, fp
   85c70:	6819      	ldr	r1, [r3, #0]
   85c72:	4411      	add	r1, r2
   85c74:	6019      	str	r1, [r3, #0]
   85c76:	f000 8153 	beq.w	85f20 <_malloc_r+0x4e4>
   85c7a:	f8d9 0000 	ldr.w	r0, [r9]
   85c7e:	f8df e110 	ldr.w	lr, [pc, #272]	; 85d90 <_malloc_r+0x354>
   85c82:	3001      	adds	r0, #1
   85c84:	bf1b      	ittet	ne
   85c86:	ebca 0a0b 	rsbne	sl, sl, fp
   85c8a:	4451      	addne	r1, sl
   85c8c:	f8ce b000 	streq.w	fp, [lr]
   85c90:	6019      	strne	r1, [r3, #0]
   85c92:	f01b 0107 	ands.w	r1, fp, #7
   85c96:	f000 8117 	beq.w	85ec8 <_malloc_r+0x48c>
   85c9a:	f1c1 0008 	rsb	r0, r1, #8
   85c9e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   85ca2:	4483      	add	fp, r0
   85ca4:	3108      	adds	r1, #8
   85ca6:	445a      	add	r2, fp
   85ca8:	f3c2 020b 	ubfx	r2, r2, #0, #12
   85cac:	ebc2 0901 	rsb	r9, r2, r1
   85cb0:	4649      	mov	r1, r9
   85cb2:	4630      	mov	r0, r6
   85cb4:	9301      	str	r3, [sp, #4]
   85cb6:	f000 fc7b 	bl	865b0 <_sbrk_r>
   85cba:	1c43      	adds	r3, r0, #1
   85cbc:	9b01      	ldr	r3, [sp, #4]
   85cbe:	f000 813f 	beq.w	85f40 <_malloc_r+0x504>
   85cc2:	ebcb 0200 	rsb	r2, fp, r0
   85cc6:	444a      	add	r2, r9
   85cc8:	f042 0201 	orr.w	r2, r2, #1
   85ccc:	6819      	ldr	r1, [r3, #0]
   85cce:	42bc      	cmp	r4, r7
   85cd0:	4449      	add	r1, r9
   85cd2:	f8c7 b008 	str.w	fp, [r7, #8]
   85cd6:	6019      	str	r1, [r3, #0]
   85cd8:	f8cb 2004 	str.w	r2, [fp, #4]
   85cdc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 85d84 <_malloc_r+0x348>
   85ce0:	d016      	beq.n	85d10 <_malloc_r+0x2d4>
   85ce2:	f1b8 0f0f 	cmp.w	r8, #15
   85ce6:	f240 80fd 	bls.w	85ee4 <_malloc_r+0x4a8>
   85cea:	6862      	ldr	r2, [r4, #4]
   85cec:	f1a8 030c 	sub.w	r3, r8, #12
   85cf0:	f023 0307 	bic.w	r3, r3, #7
   85cf4:	f002 0201 	and.w	r2, r2, #1
   85cf8:	18e0      	adds	r0, r4, r3
   85cfa:	f04f 0e05 	mov.w	lr, #5
   85cfe:	431a      	orrs	r2, r3
   85d00:	2b0f      	cmp	r3, #15
   85d02:	6062      	str	r2, [r4, #4]
   85d04:	f8c0 e004 	str.w	lr, [r0, #4]
   85d08:	f8c0 e008 	str.w	lr, [r0, #8]
   85d0c:	f200 811c 	bhi.w	85f48 <_malloc_r+0x50c>
   85d10:	4b1d      	ldr	r3, [pc, #116]	; (85d88 <_malloc_r+0x34c>)
   85d12:	68bc      	ldr	r4, [r7, #8]
   85d14:	681a      	ldr	r2, [r3, #0]
   85d16:	4291      	cmp	r1, r2
   85d18:	bf88      	it	hi
   85d1a:	6019      	strhi	r1, [r3, #0]
   85d1c:	4b1b      	ldr	r3, [pc, #108]	; (85d8c <_malloc_r+0x350>)
   85d1e:	681a      	ldr	r2, [r3, #0]
   85d20:	4291      	cmp	r1, r2
   85d22:	6862      	ldr	r2, [r4, #4]
   85d24:	bf88      	it	hi
   85d26:	6019      	strhi	r1, [r3, #0]
   85d28:	f022 0203 	bic.w	r2, r2, #3
   85d2c:	4295      	cmp	r5, r2
   85d2e:	eba2 0305 	sub.w	r3, r2, r5
   85d32:	d801      	bhi.n	85d38 <_malloc_r+0x2fc>
   85d34:	2b0f      	cmp	r3, #15
   85d36:	dc04      	bgt.n	85d42 <_malloc_r+0x306>
   85d38:	4630      	mov	r0, r6
   85d3a:	f000 fa4d 	bl	861d8 <__malloc_unlock>
   85d3e:	2400      	movs	r4, #0
   85d40:	e745      	b.n	85bce <_malloc_r+0x192>
   85d42:	f045 0201 	orr.w	r2, r5, #1
   85d46:	f043 0301 	orr.w	r3, r3, #1
   85d4a:	4425      	add	r5, r4
   85d4c:	6062      	str	r2, [r4, #4]
   85d4e:	4630      	mov	r0, r6
   85d50:	60bd      	str	r5, [r7, #8]
   85d52:	3408      	adds	r4, #8
   85d54:	606b      	str	r3, [r5, #4]
   85d56:	f000 fa3f 	bl	861d8 <__malloc_unlock>
   85d5a:	4620      	mov	r0, r4
   85d5c:	b003      	add	sp, #12
   85d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85d62:	2b14      	cmp	r3, #20
   85d64:	d971      	bls.n	85e4a <_malloc_r+0x40e>
   85d66:	2b54      	cmp	r3, #84	; 0x54
   85d68:	f200 80a4 	bhi.w	85eb4 <_malloc_r+0x478>
   85d6c:	0b28      	lsrs	r0, r5, #12
   85d6e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   85d72:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85d76:	306e      	adds	r0, #110	; 0x6e
   85d78:	e682      	b.n	85a80 <_malloc_r+0x44>
   85d7a:	bf00      	nop
   85d7c:	200705cc 	.word	0x200705cc
   85d80:	20070a84 	.word	0x20070a84
   85d84:	20070a88 	.word	0x20070a88
   85d88:	20070a80 	.word	0x20070a80
   85d8c:	20070a7c 	.word	0x20070a7c
   85d90:	200709d8 	.word	0x200709d8
   85d94:	0a5a      	lsrs	r2, r3, #9
   85d96:	2a04      	cmp	r2, #4
   85d98:	d95e      	bls.n	85e58 <_malloc_r+0x41c>
   85d9a:	2a14      	cmp	r2, #20
   85d9c:	f200 80b3 	bhi.w	85f06 <_malloc_r+0x4ca>
   85da0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   85da4:	0049      	lsls	r1, r1, #1
   85da6:	325b      	adds	r2, #91	; 0x5b
   85da8:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   85dac:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   85db0:	f1ac 0c08 	sub.w	ip, ip, #8
   85db4:	458c      	cmp	ip, r1
   85db6:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 85f90 <_malloc_r+0x554>
   85dba:	f000 8088 	beq.w	85ece <_malloc_r+0x492>
   85dbe:	684a      	ldr	r2, [r1, #4]
   85dc0:	f022 0203 	bic.w	r2, r2, #3
   85dc4:	4293      	cmp	r3, r2
   85dc6:	d202      	bcs.n	85dce <_malloc_r+0x392>
   85dc8:	6889      	ldr	r1, [r1, #8]
   85dca:	458c      	cmp	ip, r1
   85dcc:	d1f7      	bne.n	85dbe <_malloc_r+0x382>
   85dce:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   85dd2:	687a      	ldr	r2, [r7, #4]
   85dd4:	f8c4 c00c 	str.w	ip, [r4, #12]
   85dd8:	60a1      	str	r1, [r4, #8]
   85dda:	f8cc 4008 	str.w	r4, [ip, #8]
   85dde:	60cc      	str	r4, [r1, #12]
   85de0:	e696      	b.n	85b10 <_malloc_r+0xd4>
   85de2:	f045 0701 	orr.w	r7, r5, #1
   85de6:	f042 0301 	orr.w	r3, r2, #1
   85dea:	4425      	add	r5, r4
   85dec:	6067      	str	r7, [r4, #4]
   85dee:	4630      	mov	r0, r6
   85df0:	614d      	str	r5, [r1, #20]
   85df2:	610d      	str	r5, [r1, #16]
   85df4:	f8c5 e00c 	str.w	lr, [r5, #12]
   85df8:	f8c5 e008 	str.w	lr, [r5, #8]
   85dfc:	606b      	str	r3, [r5, #4]
   85dfe:	50aa      	str	r2, [r5, r2]
   85e00:	3408      	adds	r4, #8
   85e02:	f000 f9e9 	bl	861d8 <__malloc_unlock>
   85e06:	e6e2      	b.n	85bce <_malloc_r+0x192>
   85e08:	684a      	ldr	r2, [r1, #4]
   85e0a:	e681      	b.n	85b10 <_malloc_r+0xd4>
   85e0c:	f108 0801 	add.w	r8, r8, #1
   85e10:	f018 0f03 	tst.w	r8, #3
   85e14:	f10c 0c08 	add.w	ip, ip, #8
   85e18:	f47f ae8c 	bne.w	85b34 <_malloc_r+0xf8>
   85e1c:	e030      	b.n	85e80 <_malloc_r+0x444>
   85e1e:	68dc      	ldr	r4, [r3, #12]
   85e20:	42a3      	cmp	r3, r4
   85e22:	bf08      	it	eq
   85e24:	3002      	addeq	r0, #2
   85e26:	f43f ae40 	beq.w	85aaa <_malloc_r+0x6e>
   85e2a:	e6c0      	b.n	85bae <_malloc_r+0x172>
   85e2c:	460c      	mov	r4, r1
   85e2e:	440b      	add	r3, r1
   85e30:	685a      	ldr	r2, [r3, #4]
   85e32:	68c9      	ldr	r1, [r1, #12]
   85e34:	f854 5f08 	ldr.w	r5, [r4, #8]!
   85e38:	f042 0201 	orr.w	r2, r2, #1
   85e3c:	605a      	str	r2, [r3, #4]
   85e3e:	4630      	mov	r0, r6
   85e40:	60e9      	str	r1, [r5, #12]
   85e42:	608d      	str	r5, [r1, #8]
   85e44:	f000 f9c8 	bl	861d8 <__malloc_unlock>
   85e48:	e6c1      	b.n	85bce <_malloc_r+0x192>
   85e4a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   85e4e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   85e52:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85e56:	e613      	b.n	85a80 <_malloc_r+0x44>
   85e58:	099a      	lsrs	r2, r3, #6
   85e5a:	f102 0139 	add.w	r1, r2, #57	; 0x39
   85e5e:	0049      	lsls	r1, r1, #1
   85e60:	3238      	adds	r2, #56	; 0x38
   85e62:	e7a1      	b.n	85da8 <_malloc_r+0x36c>
   85e64:	42bc      	cmp	r4, r7
   85e66:	4b4a      	ldr	r3, [pc, #296]	; (85f90 <_malloc_r+0x554>)
   85e68:	f43f af00 	beq.w	85c6c <_malloc_r+0x230>
   85e6c:	689c      	ldr	r4, [r3, #8]
   85e6e:	6862      	ldr	r2, [r4, #4]
   85e70:	f022 0203 	bic.w	r2, r2, #3
   85e74:	e75a      	b.n	85d2c <_malloc_r+0x2f0>
   85e76:	f859 3908 	ldr.w	r3, [r9], #-8
   85e7a:	4599      	cmp	r9, r3
   85e7c:	f040 8082 	bne.w	85f84 <_malloc_r+0x548>
   85e80:	f010 0f03 	tst.w	r0, #3
   85e84:	f100 30ff 	add.w	r0, r0, #4294967295
   85e88:	d1f5      	bne.n	85e76 <_malloc_r+0x43a>
   85e8a:	687b      	ldr	r3, [r7, #4]
   85e8c:	ea23 0304 	bic.w	r3, r3, r4
   85e90:	607b      	str	r3, [r7, #4]
   85e92:	0064      	lsls	r4, r4, #1
   85e94:	429c      	cmp	r4, r3
   85e96:	f63f aebd 	bhi.w	85c14 <_malloc_r+0x1d8>
   85e9a:	2c00      	cmp	r4, #0
   85e9c:	f43f aeba 	beq.w	85c14 <_malloc_r+0x1d8>
   85ea0:	421c      	tst	r4, r3
   85ea2:	4640      	mov	r0, r8
   85ea4:	f47f ae42 	bne.w	85b2c <_malloc_r+0xf0>
   85ea8:	0064      	lsls	r4, r4, #1
   85eaa:	421c      	tst	r4, r3
   85eac:	f100 0004 	add.w	r0, r0, #4
   85eb0:	d0fa      	beq.n	85ea8 <_malloc_r+0x46c>
   85eb2:	e63b      	b.n	85b2c <_malloc_r+0xf0>
   85eb4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   85eb8:	d818      	bhi.n	85eec <_malloc_r+0x4b0>
   85eba:	0be8      	lsrs	r0, r5, #15
   85ebc:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   85ec0:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85ec4:	3077      	adds	r0, #119	; 0x77
   85ec6:	e5db      	b.n	85a80 <_malloc_r+0x44>
   85ec8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   85ecc:	e6eb      	b.n	85ca6 <_malloc_r+0x26a>
   85ece:	2101      	movs	r1, #1
   85ed0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   85ed4:	1092      	asrs	r2, r2, #2
   85ed6:	fa01 f202 	lsl.w	r2, r1, r2
   85eda:	431a      	orrs	r2, r3
   85edc:	f8c8 2004 	str.w	r2, [r8, #4]
   85ee0:	4661      	mov	r1, ip
   85ee2:	e777      	b.n	85dd4 <_malloc_r+0x398>
   85ee4:	2301      	movs	r3, #1
   85ee6:	f8cb 3004 	str.w	r3, [fp, #4]
   85eea:	e725      	b.n	85d38 <_malloc_r+0x2fc>
   85eec:	f240 5254 	movw	r2, #1364	; 0x554
   85ef0:	4293      	cmp	r3, r2
   85ef2:	d820      	bhi.n	85f36 <_malloc_r+0x4fa>
   85ef4:	0ca8      	lsrs	r0, r5, #18
   85ef6:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   85efa:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85efe:	307c      	adds	r0, #124	; 0x7c
   85f00:	e5be      	b.n	85a80 <_malloc_r+0x44>
   85f02:	3210      	adds	r2, #16
   85f04:	e6a4      	b.n	85c50 <_malloc_r+0x214>
   85f06:	2a54      	cmp	r2, #84	; 0x54
   85f08:	d826      	bhi.n	85f58 <_malloc_r+0x51c>
   85f0a:	0b1a      	lsrs	r2, r3, #12
   85f0c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   85f10:	0049      	lsls	r1, r1, #1
   85f12:	326e      	adds	r2, #110	; 0x6e
   85f14:	e748      	b.n	85da8 <_malloc_r+0x36c>
   85f16:	68bc      	ldr	r4, [r7, #8]
   85f18:	6862      	ldr	r2, [r4, #4]
   85f1a:	f022 0203 	bic.w	r2, r2, #3
   85f1e:	e705      	b.n	85d2c <_malloc_r+0x2f0>
   85f20:	f3ca 000b 	ubfx	r0, sl, #0, #12
   85f24:	2800      	cmp	r0, #0
   85f26:	f47f aea8 	bne.w	85c7a <_malloc_r+0x23e>
   85f2a:	4442      	add	r2, r8
   85f2c:	68bb      	ldr	r3, [r7, #8]
   85f2e:	f042 0201 	orr.w	r2, r2, #1
   85f32:	605a      	str	r2, [r3, #4]
   85f34:	e6ec      	b.n	85d10 <_malloc_r+0x2d4>
   85f36:	21fe      	movs	r1, #254	; 0xfe
   85f38:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   85f3c:	207e      	movs	r0, #126	; 0x7e
   85f3e:	e59f      	b.n	85a80 <_malloc_r+0x44>
   85f40:	2201      	movs	r2, #1
   85f42:	f04f 0900 	mov.w	r9, #0
   85f46:	e6c1      	b.n	85ccc <_malloc_r+0x290>
   85f48:	f104 0108 	add.w	r1, r4, #8
   85f4c:	4630      	mov	r0, r6
   85f4e:	f7ff fa65 	bl	8541c <_free_r>
   85f52:	f8d9 1000 	ldr.w	r1, [r9]
   85f56:	e6db      	b.n	85d10 <_malloc_r+0x2d4>
   85f58:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85f5c:	d805      	bhi.n	85f6a <_malloc_r+0x52e>
   85f5e:	0bda      	lsrs	r2, r3, #15
   85f60:	f102 0178 	add.w	r1, r2, #120	; 0x78
   85f64:	0049      	lsls	r1, r1, #1
   85f66:	3277      	adds	r2, #119	; 0x77
   85f68:	e71e      	b.n	85da8 <_malloc_r+0x36c>
   85f6a:	f240 5154 	movw	r1, #1364	; 0x554
   85f6e:	428a      	cmp	r2, r1
   85f70:	d805      	bhi.n	85f7e <_malloc_r+0x542>
   85f72:	0c9a      	lsrs	r2, r3, #18
   85f74:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   85f78:	0049      	lsls	r1, r1, #1
   85f7a:	327c      	adds	r2, #124	; 0x7c
   85f7c:	e714      	b.n	85da8 <_malloc_r+0x36c>
   85f7e:	21fe      	movs	r1, #254	; 0xfe
   85f80:	227e      	movs	r2, #126	; 0x7e
   85f82:	e711      	b.n	85da8 <_malloc_r+0x36c>
   85f84:	687b      	ldr	r3, [r7, #4]
   85f86:	e784      	b.n	85e92 <_malloc_r+0x456>
   85f88:	08e8      	lsrs	r0, r5, #3
   85f8a:	1c43      	adds	r3, r0, #1
   85f8c:	005b      	lsls	r3, r3, #1
   85f8e:	e605      	b.n	85b9c <_malloc_r+0x160>
   85f90:	200705cc 	.word	0x200705cc

00085f94 <memchr>:
   85f94:	0783      	lsls	r3, r0, #30
   85f96:	b470      	push	{r4, r5, r6}
   85f98:	b2cd      	uxtb	r5, r1
   85f9a:	d03d      	beq.n	86018 <memchr+0x84>
   85f9c:	1e53      	subs	r3, r2, #1
   85f9e:	b302      	cbz	r2, 85fe2 <memchr+0x4e>
   85fa0:	7802      	ldrb	r2, [r0, #0]
   85fa2:	42aa      	cmp	r2, r5
   85fa4:	d01e      	beq.n	85fe4 <memchr+0x50>
   85fa6:	1c42      	adds	r2, r0, #1
   85fa8:	e004      	b.n	85fb4 <memchr+0x20>
   85faa:	b1d3      	cbz	r3, 85fe2 <memchr+0x4e>
   85fac:	7804      	ldrb	r4, [r0, #0]
   85fae:	3b01      	subs	r3, #1
   85fb0:	42ac      	cmp	r4, r5
   85fb2:	d017      	beq.n	85fe4 <memchr+0x50>
   85fb4:	f012 0f03 	tst.w	r2, #3
   85fb8:	4610      	mov	r0, r2
   85fba:	f102 0201 	add.w	r2, r2, #1
   85fbe:	d1f4      	bne.n	85faa <memchr+0x16>
   85fc0:	2b03      	cmp	r3, #3
   85fc2:	d811      	bhi.n	85fe8 <memchr+0x54>
   85fc4:	b353      	cbz	r3, 8601c <memchr+0x88>
   85fc6:	7802      	ldrb	r2, [r0, #0]
   85fc8:	42aa      	cmp	r2, r5
   85fca:	d00b      	beq.n	85fe4 <memchr+0x50>
   85fcc:	4403      	add	r3, r0
   85fce:	1c42      	adds	r2, r0, #1
   85fd0:	e002      	b.n	85fd8 <memchr+0x44>
   85fd2:	7801      	ldrb	r1, [r0, #0]
   85fd4:	42a9      	cmp	r1, r5
   85fd6:	d005      	beq.n	85fe4 <memchr+0x50>
   85fd8:	4293      	cmp	r3, r2
   85fda:	4610      	mov	r0, r2
   85fdc:	f102 0201 	add.w	r2, r2, #1
   85fe0:	d1f7      	bne.n	85fd2 <memchr+0x3e>
   85fe2:	2000      	movs	r0, #0
   85fe4:	bc70      	pop	{r4, r5, r6}
   85fe6:	4770      	bx	lr
   85fe8:	4604      	mov	r4, r0
   85fea:	020e      	lsls	r6, r1, #8
   85fec:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   85ff0:	432e      	orrs	r6, r5
   85ff2:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   85ff6:	6822      	ldr	r2, [r4, #0]
   85ff8:	4620      	mov	r0, r4
   85ffa:	4072      	eors	r2, r6
   85ffc:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   86000:	ea21 0202 	bic.w	r2, r1, r2
   86004:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   86008:	f104 0404 	add.w	r4, r4, #4
   8600c:	d1db      	bne.n	85fc6 <memchr+0x32>
   8600e:	3b04      	subs	r3, #4
   86010:	2b03      	cmp	r3, #3
   86012:	4620      	mov	r0, r4
   86014:	d8ef      	bhi.n	85ff6 <memchr+0x62>
   86016:	e7d5      	b.n	85fc4 <memchr+0x30>
   86018:	4613      	mov	r3, r2
   8601a:	e7d1      	b.n	85fc0 <memchr+0x2c>
   8601c:	4618      	mov	r0, r3
   8601e:	e7e1      	b.n	85fe4 <memchr+0x50>

00086020 <memcpy>:
   86020:	4684      	mov	ip, r0
   86022:	ea41 0300 	orr.w	r3, r1, r0
   86026:	f013 0303 	ands.w	r3, r3, #3
   8602a:	d149      	bne.n	860c0 <memcpy+0xa0>
   8602c:	3a40      	subs	r2, #64	; 0x40
   8602e:	d323      	bcc.n	86078 <memcpy+0x58>
   86030:	680b      	ldr	r3, [r1, #0]
   86032:	6003      	str	r3, [r0, #0]
   86034:	684b      	ldr	r3, [r1, #4]
   86036:	6043      	str	r3, [r0, #4]
   86038:	688b      	ldr	r3, [r1, #8]
   8603a:	6083      	str	r3, [r0, #8]
   8603c:	68cb      	ldr	r3, [r1, #12]
   8603e:	60c3      	str	r3, [r0, #12]
   86040:	690b      	ldr	r3, [r1, #16]
   86042:	6103      	str	r3, [r0, #16]
   86044:	694b      	ldr	r3, [r1, #20]
   86046:	6143      	str	r3, [r0, #20]
   86048:	698b      	ldr	r3, [r1, #24]
   8604a:	6183      	str	r3, [r0, #24]
   8604c:	69cb      	ldr	r3, [r1, #28]
   8604e:	61c3      	str	r3, [r0, #28]
   86050:	6a0b      	ldr	r3, [r1, #32]
   86052:	6203      	str	r3, [r0, #32]
   86054:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86056:	6243      	str	r3, [r0, #36]	; 0x24
   86058:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8605a:	6283      	str	r3, [r0, #40]	; 0x28
   8605c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8605e:	62c3      	str	r3, [r0, #44]	; 0x2c
   86060:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86062:	6303      	str	r3, [r0, #48]	; 0x30
   86064:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86066:	6343      	str	r3, [r0, #52]	; 0x34
   86068:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8606a:	6383      	str	r3, [r0, #56]	; 0x38
   8606c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8606e:	63c3      	str	r3, [r0, #60]	; 0x3c
   86070:	3040      	adds	r0, #64	; 0x40
   86072:	3140      	adds	r1, #64	; 0x40
   86074:	3a40      	subs	r2, #64	; 0x40
   86076:	d2db      	bcs.n	86030 <memcpy+0x10>
   86078:	3230      	adds	r2, #48	; 0x30
   8607a:	d30b      	bcc.n	86094 <memcpy+0x74>
   8607c:	680b      	ldr	r3, [r1, #0]
   8607e:	6003      	str	r3, [r0, #0]
   86080:	684b      	ldr	r3, [r1, #4]
   86082:	6043      	str	r3, [r0, #4]
   86084:	688b      	ldr	r3, [r1, #8]
   86086:	6083      	str	r3, [r0, #8]
   86088:	68cb      	ldr	r3, [r1, #12]
   8608a:	60c3      	str	r3, [r0, #12]
   8608c:	3010      	adds	r0, #16
   8608e:	3110      	adds	r1, #16
   86090:	3a10      	subs	r2, #16
   86092:	d2f3      	bcs.n	8607c <memcpy+0x5c>
   86094:	320c      	adds	r2, #12
   86096:	d305      	bcc.n	860a4 <memcpy+0x84>
   86098:	f851 3b04 	ldr.w	r3, [r1], #4
   8609c:	f840 3b04 	str.w	r3, [r0], #4
   860a0:	3a04      	subs	r2, #4
   860a2:	d2f9      	bcs.n	86098 <memcpy+0x78>
   860a4:	3204      	adds	r2, #4
   860a6:	d008      	beq.n	860ba <memcpy+0x9a>
   860a8:	07d2      	lsls	r2, r2, #31
   860aa:	bf1c      	itt	ne
   860ac:	f811 3b01 	ldrbne.w	r3, [r1], #1
   860b0:	f800 3b01 	strbne.w	r3, [r0], #1
   860b4:	d301      	bcc.n	860ba <memcpy+0x9a>
   860b6:	880b      	ldrh	r3, [r1, #0]
   860b8:	8003      	strh	r3, [r0, #0]
   860ba:	4660      	mov	r0, ip
   860bc:	4770      	bx	lr
   860be:	bf00      	nop
   860c0:	2a08      	cmp	r2, #8
   860c2:	d313      	bcc.n	860ec <memcpy+0xcc>
   860c4:	078b      	lsls	r3, r1, #30
   860c6:	d0b1      	beq.n	8602c <memcpy+0xc>
   860c8:	f010 0303 	ands.w	r3, r0, #3
   860cc:	d0ae      	beq.n	8602c <memcpy+0xc>
   860ce:	f1c3 0304 	rsb	r3, r3, #4
   860d2:	1ad2      	subs	r2, r2, r3
   860d4:	07db      	lsls	r3, r3, #31
   860d6:	bf1c      	itt	ne
   860d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   860dc:	f800 3b01 	strbne.w	r3, [r0], #1
   860e0:	d3a4      	bcc.n	8602c <memcpy+0xc>
   860e2:	f831 3b02 	ldrh.w	r3, [r1], #2
   860e6:	f820 3b02 	strh.w	r3, [r0], #2
   860ea:	e79f      	b.n	8602c <memcpy+0xc>
   860ec:	3a04      	subs	r2, #4
   860ee:	d3d9      	bcc.n	860a4 <memcpy+0x84>
   860f0:	3a01      	subs	r2, #1
   860f2:	f811 3b01 	ldrb.w	r3, [r1], #1
   860f6:	f800 3b01 	strb.w	r3, [r0], #1
   860fa:	d2f9      	bcs.n	860f0 <memcpy+0xd0>
   860fc:	780b      	ldrb	r3, [r1, #0]
   860fe:	7003      	strb	r3, [r0, #0]
   86100:	784b      	ldrb	r3, [r1, #1]
   86102:	7043      	strb	r3, [r0, #1]
   86104:	788b      	ldrb	r3, [r1, #2]
   86106:	7083      	strb	r3, [r0, #2]
   86108:	4660      	mov	r0, ip
   8610a:	4770      	bx	lr

0008610c <memmove>:
   8610c:	4288      	cmp	r0, r1
   8610e:	b5f0      	push	{r4, r5, r6, r7, lr}
   86110:	d90d      	bls.n	8612e <memmove+0x22>
   86112:	188b      	adds	r3, r1, r2
   86114:	4298      	cmp	r0, r3
   86116:	d20a      	bcs.n	8612e <memmove+0x22>
   86118:	1881      	adds	r1, r0, r2
   8611a:	2a00      	cmp	r2, #0
   8611c:	d051      	beq.n	861c2 <memmove+0xb6>
   8611e:	1a9a      	subs	r2, r3, r2
   86120:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   86124:	4293      	cmp	r3, r2
   86126:	f801 4d01 	strb.w	r4, [r1, #-1]!
   8612a:	d1f9      	bne.n	86120 <memmove+0x14>
   8612c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8612e:	2a0f      	cmp	r2, #15
   86130:	d948      	bls.n	861c4 <memmove+0xb8>
   86132:	ea41 0300 	orr.w	r3, r1, r0
   86136:	079b      	lsls	r3, r3, #30
   86138:	d146      	bne.n	861c8 <memmove+0xbc>
   8613a:	4615      	mov	r5, r2
   8613c:	f100 0410 	add.w	r4, r0, #16
   86140:	f101 0310 	add.w	r3, r1, #16
   86144:	f853 6c10 	ldr.w	r6, [r3, #-16]
   86148:	3d10      	subs	r5, #16
   8614a:	f844 6c10 	str.w	r6, [r4, #-16]
   8614e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   86152:	2d0f      	cmp	r5, #15
   86154:	f844 6c0c 	str.w	r6, [r4, #-12]
   86158:	f853 6c08 	ldr.w	r6, [r3, #-8]
   8615c:	f104 0410 	add.w	r4, r4, #16
   86160:	f844 6c18 	str.w	r6, [r4, #-24]
   86164:	f853 6c04 	ldr.w	r6, [r3, #-4]
   86168:	f103 0310 	add.w	r3, r3, #16
   8616c:	f844 6c14 	str.w	r6, [r4, #-20]
   86170:	d8e8      	bhi.n	86144 <memmove+0x38>
   86172:	f1a2 0310 	sub.w	r3, r2, #16
   86176:	f023 030f 	bic.w	r3, r3, #15
   8617a:	f002 0e0f 	and.w	lr, r2, #15
   8617e:	3310      	adds	r3, #16
   86180:	f1be 0f03 	cmp.w	lr, #3
   86184:	4419      	add	r1, r3
   86186:	4403      	add	r3, r0
   86188:	d921      	bls.n	861ce <memmove+0xc2>
   8618a:	460e      	mov	r6, r1
   8618c:	4674      	mov	r4, lr
   8618e:	1f1d      	subs	r5, r3, #4
   86190:	f856 7b04 	ldr.w	r7, [r6], #4
   86194:	3c04      	subs	r4, #4
   86196:	2c03      	cmp	r4, #3
   86198:	f845 7f04 	str.w	r7, [r5, #4]!
   8619c:	d8f8      	bhi.n	86190 <memmove+0x84>
   8619e:	f1ae 0404 	sub.w	r4, lr, #4
   861a2:	f024 0403 	bic.w	r4, r4, #3
   861a6:	3404      	adds	r4, #4
   861a8:	4423      	add	r3, r4
   861aa:	4421      	add	r1, r4
   861ac:	f002 0203 	and.w	r2, r2, #3
   861b0:	b162      	cbz	r2, 861cc <memmove+0xc0>
   861b2:	3b01      	subs	r3, #1
   861b4:	440a      	add	r2, r1
   861b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   861ba:	428a      	cmp	r2, r1
   861bc:	f803 4f01 	strb.w	r4, [r3, #1]!
   861c0:	d1f9      	bne.n	861b6 <memmove+0xaa>
   861c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   861c4:	4603      	mov	r3, r0
   861c6:	e7f3      	b.n	861b0 <memmove+0xa4>
   861c8:	4603      	mov	r3, r0
   861ca:	e7f2      	b.n	861b2 <memmove+0xa6>
   861cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   861ce:	4672      	mov	r2, lr
   861d0:	e7ee      	b.n	861b0 <memmove+0xa4>
   861d2:	bf00      	nop

000861d4 <__malloc_lock>:
   861d4:	4770      	bx	lr
   861d6:	bf00      	nop

000861d8 <__malloc_unlock>:
   861d8:	4770      	bx	lr
   861da:	bf00      	nop

000861dc <_realloc_r>:
   861dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   861e0:	4617      	mov	r7, r2
   861e2:	b083      	sub	sp, #12
   861e4:	2900      	cmp	r1, #0
   861e6:	f000 808f 	beq.w	86308 <_realloc_r+0x12c>
   861ea:	460d      	mov	r5, r1
   861ec:	4681      	mov	r9, r0
   861ee:	f107 040b 	add.w	r4, r7, #11
   861f2:	f7ff ffef 	bl	861d4 <__malloc_lock>
   861f6:	f855 ec04 	ldr.w	lr, [r5, #-4]
   861fa:	2c16      	cmp	r4, #22
   861fc:	f02e 0603 	bic.w	r6, lr, #3
   86200:	f1a5 0808 	sub.w	r8, r5, #8
   86204:	d83c      	bhi.n	86280 <_realloc_r+0xa4>
   86206:	2210      	movs	r2, #16
   86208:	4614      	mov	r4, r2
   8620a:	42a7      	cmp	r7, r4
   8620c:	d83d      	bhi.n	8628a <_realloc_r+0xae>
   8620e:	4296      	cmp	r6, r2
   86210:	da42      	bge.n	86298 <_realloc_r+0xbc>
   86212:	4bc6      	ldr	r3, [pc, #792]	; (8652c <_realloc_r+0x350>)
   86214:	eb08 0006 	add.w	r0, r8, r6
   86218:	6899      	ldr	r1, [r3, #8]
   8621a:	4288      	cmp	r0, r1
   8621c:	6841      	ldr	r1, [r0, #4]
   8621e:	f000 80d7 	beq.w	863d0 <_realloc_r+0x1f4>
   86222:	f021 0301 	bic.w	r3, r1, #1
   86226:	4403      	add	r3, r0
   86228:	685b      	ldr	r3, [r3, #4]
   8622a:	07db      	lsls	r3, r3, #31
   8622c:	d54c      	bpl.n	862c8 <_realloc_r+0xec>
   8622e:	f01e 0f01 	tst.w	lr, #1
   86232:	f000 809d 	beq.w	86370 <_realloc_r+0x194>
   86236:	4639      	mov	r1, r7
   86238:	4648      	mov	r0, r9
   8623a:	f7ff fbff 	bl	85a3c <_malloc_r>
   8623e:	4607      	mov	r7, r0
   86240:	2800      	cmp	r0, #0
   86242:	d03a      	beq.n	862ba <_realloc_r+0xde>
   86244:	f855 3c04 	ldr.w	r3, [r5, #-4]
   86248:	f1a0 0208 	sub.w	r2, r0, #8
   8624c:	f023 0301 	bic.w	r3, r3, #1
   86250:	4443      	add	r3, r8
   86252:	429a      	cmp	r2, r3
   86254:	f000 813e 	beq.w	864d4 <_realloc_r+0x2f8>
   86258:	1f32      	subs	r2, r6, #4
   8625a:	2a24      	cmp	r2, #36	; 0x24
   8625c:	f200 812b 	bhi.w	864b6 <_realloc_r+0x2da>
   86260:	2a13      	cmp	r2, #19
   86262:	f200 80ff 	bhi.w	86464 <_realloc_r+0x288>
   86266:	4603      	mov	r3, r0
   86268:	462a      	mov	r2, r5
   8626a:	6811      	ldr	r1, [r2, #0]
   8626c:	6019      	str	r1, [r3, #0]
   8626e:	6851      	ldr	r1, [r2, #4]
   86270:	6059      	str	r1, [r3, #4]
   86272:	6892      	ldr	r2, [r2, #8]
   86274:	609a      	str	r2, [r3, #8]
   86276:	4629      	mov	r1, r5
   86278:	4648      	mov	r0, r9
   8627a:	f7ff f8cf 	bl	8541c <_free_r>
   8627e:	e01c      	b.n	862ba <_realloc_r+0xde>
   86280:	f024 0407 	bic.w	r4, r4, #7
   86284:	2c00      	cmp	r4, #0
   86286:	4622      	mov	r2, r4
   86288:	dabf      	bge.n	8620a <_realloc_r+0x2e>
   8628a:	230c      	movs	r3, #12
   8628c:	2000      	movs	r0, #0
   8628e:	f8c9 3000 	str.w	r3, [r9]
   86292:	b003      	add	sp, #12
   86294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86298:	462f      	mov	r7, r5
   8629a:	1b33      	subs	r3, r6, r4
   8629c:	2b0f      	cmp	r3, #15
   8629e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   862a2:	d81d      	bhi.n	862e0 <_realloc_r+0x104>
   862a4:	f002 0201 	and.w	r2, r2, #1
   862a8:	4332      	orrs	r2, r6
   862aa:	eb08 0106 	add.w	r1, r8, r6
   862ae:	f8c8 2004 	str.w	r2, [r8, #4]
   862b2:	684b      	ldr	r3, [r1, #4]
   862b4:	f043 0301 	orr.w	r3, r3, #1
   862b8:	604b      	str	r3, [r1, #4]
   862ba:	4648      	mov	r0, r9
   862bc:	f7ff ff8c 	bl	861d8 <__malloc_unlock>
   862c0:	4638      	mov	r0, r7
   862c2:	b003      	add	sp, #12
   862c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   862c8:	f021 0103 	bic.w	r1, r1, #3
   862cc:	4431      	add	r1, r6
   862ce:	4291      	cmp	r1, r2
   862d0:	db20      	blt.n	86314 <_realloc_r+0x138>
   862d2:	68c3      	ldr	r3, [r0, #12]
   862d4:	6882      	ldr	r2, [r0, #8]
   862d6:	462f      	mov	r7, r5
   862d8:	60d3      	str	r3, [r2, #12]
   862da:	460e      	mov	r6, r1
   862dc:	609a      	str	r2, [r3, #8]
   862de:	e7dc      	b.n	8629a <_realloc_r+0xbe>
   862e0:	f002 0201 	and.w	r2, r2, #1
   862e4:	eb08 0104 	add.w	r1, r8, r4
   862e8:	4314      	orrs	r4, r2
   862ea:	f043 0201 	orr.w	r2, r3, #1
   862ee:	f8c8 4004 	str.w	r4, [r8, #4]
   862f2:	440b      	add	r3, r1
   862f4:	604a      	str	r2, [r1, #4]
   862f6:	685a      	ldr	r2, [r3, #4]
   862f8:	3108      	adds	r1, #8
   862fa:	f042 0201 	orr.w	r2, r2, #1
   862fe:	605a      	str	r2, [r3, #4]
   86300:	4648      	mov	r0, r9
   86302:	f7ff f88b 	bl	8541c <_free_r>
   86306:	e7d8      	b.n	862ba <_realloc_r+0xde>
   86308:	4611      	mov	r1, r2
   8630a:	b003      	add	sp, #12
   8630c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86310:	f7ff bb94 	b.w	85a3c <_malloc_r>
   86314:	f01e 0f01 	tst.w	lr, #1
   86318:	d18d      	bne.n	86236 <_realloc_r+0x5a>
   8631a:	f855 3c08 	ldr.w	r3, [r5, #-8]
   8631e:	ebc3 0a08 	rsb	sl, r3, r8
   86322:	f8da 3004 	ldr.w	r3, [sl, #4]
   86326:	f023 0c03 	bic.w	ip, r3, #3
   8632a:	eb01 0e0c 	add.w	lr, r1, ip
   8632e:	4596      	cmp	lr, r2
   86330:	db26      	blt.n	86380 <_realloc_r+0x1a4>
   86332:	4657      	mov	r7, sl
   86334:	68c3      	ldr	r3, [r0, #12]
   86336:	6881      	ldr	r1, [r0, #8]
   86338:	1f32      	subs	r2, r6, #4
   8633a:	60cb      	str	r3, [r1, #12]
   8633c:	6099      	str	r1, [r3, #8]
   8633e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   86342:	f8da 300c 	ldr.w	r3, [sl, #12]
   86346:	2a24      	cmp	r2, #36	; 0x24
   86348:	60cb      	str	r3, [r1, #12]
   8634a:	6099      	str	r1, [r3, #8]
   8634c:	f200 80c9 	bhi.w	864e2 <_realloc_r+0x306>
   86350:	2a13      	cmp	r2, #19
   86352:	f240 8092 	bls.w	8647a <_realloc_r+0x29e>
   86356:	682b      	ldr	r3, [r5, #0]
   86358:	2a1b      	cmp	r2, #27
   8635a:	f8ca 3008 	str.w	r3, [sl, #8]
   8635e:	686b      	ldr	r3, [r5, #4]
   86360:	f8ca 300c 	str.w	r3, [sl, #12]
   86364:	f200 80cd 	bhi.w	86502 <_realloc_r+0x326>
   86368:	3508      	adds	r5, #8
   8636a:	f10a 0310 	add.w	r3, sl, #16
   8636e:	e085      	b.n	8647c <_realloc_r+0x2a0>
   86370:	f855 3c08 	ldr.w	r3, [r5, #-8]
   86374:	ebc3 0a08 	rsb	sl, r3, r8
   86378:	f8da 3004 	ldr.w	r3, [sl, #4]
   8637c:	f023 0c03 	bic.w	ip, r3, #3
   86380:	eb06 030c 	add.w	r3, r6, ip
   86384:	4293      	cmp	r3, r2
   86386:	f6ff af56 	blt.w	86236 <_realloc_r+0x5a>
   8638a:	4657      	mov	r7, sl
   8638c:	f8da 100c 	ldr.w	r1, [sl, #12]
   86390:	f857 0f08 	ldr.w	r0, [r7, #8]!
   86394:	1f32      	subs	r2, r6, #4
   86396:	2a24      	cmp	r2, #36	; 0x24
   86398:	60c1      	str	r1, [r0, #12]
   8639a:	6088      	str	r0, [r1, #8]
   8639c:	f200 80aa 	bhi.w	864f4 <_realloc_r+0x318>
   863a0:	2a13      	cmp	r2, #19
   863a2:	f240 80a5 	bls.w	864f0 <_realloc_r+0x314>
   863a6:	6829      	ldr	r1, [r5, #0]
   863a8:	2a1b      	cmp	r2, #27
   863aa:	f8ca 1008 	str.w	r1, [sl, #8]
   863ae:	6869      	ldr	r1, [r5, #4]
   863b0:	f8ca 100c 	str.w	r1, [sl, #12]
   863b4:	f200 80bc 	bhi.w	86530 <_realloc_r+0x354>
   863b8:	3508      	adds	r5, #8
   863ba:	f10a 0210 	add.w	r2, sl, #16
   863be:	6829      	ldr	r1, [r5, #0]
   863c0:	461e      	mov	r6, r3
   863c2:	6011      	str	r1, [r2, #0]
   863c4:	6869      	ldr	r1, [r5, #4]
   863c6:	46d0      	mov	r8, sl
   863c8:	6051      	str	r1, [r2, #4]
   863ca:	68ab      	ldr	r3, [r5, #8]
   863cc:	6093      	str	r3, [r2, #8]
   863ce:	e764      	b.n	8629a <_realloc_r+0xbe>
   863d0:	f021 0b03 	bic.w	fp, r1, #3
   863d4:	f104 0010 	add.w	r0, r4, #16
   863d8:	44b3      	add	fp, r6
   863da:	4583      	cmp	fp, r0
   863dc:	da57      	bge.n	8648e <_realloc_r+0x2b2>
   863de:	f01e 0f01 	tst.w	lr, #1
   863e2:	f47f af28 	bne.w	86236 <_realloc_r+0x5a>
   863e6:	f855 1c08 	ldr.w	r1, [r5, #-8]
   863ea:	ebc1 0a08 	rsb	sl, r1, r8
   863ee:	f8da 1004 	ldr.w	r1, [sl, #4]
   863f2:	f021 0c03 	bic.w	ip, r1, #3
   863f6:	44e3      	add	fp, ip
   863f8:	4558      	cmp	r0, fp
   863fa:	dcc1      	bgt.n	86380 <_realloc_r+0x1a4>
   863fc:	4657      	mov	r7, sl
   863fe:	f8da 100c 	ldr.w	r1, [sl, #12]
   86402:	f857 0f08 	ldr.w	r0, [r7, #8]!
   86406:	1f32      	subs	r2, r6, #4
   86408:	2a24      	cmp	r2, #36	; 0x24
   8640a:	60c1      	str	r1, [r0, #12]
   8640c:	6088      	str	r0, [r1, #8]
   8640e:	f200 80b1 	bhi.w	86574 <_realloc_r+0x398>
   86412:	2a13      	cmp	r2, #19
   86414:	f240 80a2 	bls.w	8655c <_realloc_r+0x380>
   86418:	6829      	ldr	r1, [r5, #0]
   8641a:	2a1b      	cmp	r2, #27
   8641c:	f8ca 1008 	str.w	r1, [sl, #8]
   86420:	6869      	ldr	r1, [r5, #4]
   86422:	f8ca 100c 	str.w	r1, [sl, #12]
   86426:	f200 80ac 	bhi.w	86582 <_realloc_r+0x3a6>
   8642a:	3508      	adds	r5, #8
   8642c:	f10a 0210 	add.w	r2, sl, #16
   86430:	6829      	ldr	r1, [r5, #0]
   86432:	6011      	str	r1, [r2, #0]
   86434:	6869      	ldr	r1, [r5, #4]
   86436:	6051      	str	r1, [r2, #4]
   86438:	68a9      	ldr	r1, [r5, #8]
   8643a:	6091      	str	r1, [r2, #8]
   8643c:	ebc4 020b 	rsb	r2, r4, fp
   86440:	eb0a 0104 	add.w	r1, sl, r4
   86444:	f042 0201 	orr.w	r2, r2, #1
   86448:	6099      	str	r1, [r3, #8]
   8644a:	604a      	str	r2, [r1, #4]
   8644c:	f8da 3004 	ldr.w	r3, [sl, #4]
   86450:	4648      	mov	r0, r9
   86452:	f003 0301 	and.w	r3, r3, #1
   86456:	431c      	orrs	r4, r3
   86458:	f8ca 4004 	str.w	r4, [sl, #4]
   8645c:	f7ff febc 	bl	861d8 <__malloc_unlock>
   86460:	4638      	mov	r0, r7
   86462:	e72e      	b.n	862c2 <_realloc_r+0xe6>
   86464:	682b      	ldr	r3, [r5, #0]
   86466:	2a1b      	cmp	r2, #27
   86468:	6003      	str	r3, [r0, #0]
   8646a:	686b      	ldr	r3, [r5, #4]
   8646c:	6043      	str	r3, [r0, #4]
   8646e:	d826      	bhi.n	864be <_realloc_r+0x2e2>
   86470:	f100 0308 	add.w	r3, r0, #8
   86474:	f105 0208 	add.w	r2, r5, #8
   86478:	e6f7      	b.n	8626a <_realloc_r+0x8e>
   8647a:	463b      	mov	r3, r7
   8647c:	682a      	ldr	r2, [r5, #0]
   8647e:	4676      	mov	r6, lr
   86480:	601a      	str	r2, [r3, #0]
   86482:	686a      	ldr	r2, [r5, #4]
   86484:	46d0      	mov	r8, sl
   86486:	605a      	str	r2, [r3, #4]
   86488:	68aa      	ldr	r2, [r5, #8]
   8648a:	609a      	str	r2, [r3, #8]
   8648c:	e705      	b.n	8629a <_realloc_r+0xbe>
   8648e:	ebc4 0b0b 	rsb	fp, r4, fp
   86492:	eb08 0104 	add.w	r1, r8, r4
   86496:	f04b 0201 	orr.w	r2, fp, #1
   8649a:	6099      	str	r1, [r3, #8]
   8649c:	604a      	str	r2, [r1, #4]
   8649e:	f855 3c04 	ldr.w	r3, [r5, #-4]
   864a2:	4648      	mov	r0, r9
   864a4:	f003 0301 	and.w	r3, r3, #1
   864a8:	431c      	orrs	r4, r3
   864aa:	f845 4c04 	str.w	r4, [r5, #-4]
   864ae:	f7ff fe93 	bl	861d8 <__malloc_unlock>
   864b2:	4628      	mov	r0, r5
   864b4:	e705      	b.n	862c2 <_realloc_r+0xe6>
   864b6:	4629      	mov	r1, r5
   864b8:	f7ff fe28 	bl	8610c <memmove>
   864bc:	e6db      	b.n	86276 <_realloc_r+0x9a>
   864be:	68ab      	ldr	r3, [r5, #8]
   864c0:	2a24      	cmp	r2, #36	; 0x24
   864c2:	6083      	str	r3, [r0, #8]
   864c4:	68eb      	ldr	r3, [r5, #12]
   864c6:	60c3      	str	r3, [r0, #12]
   864c8:	d027      	beq.n	8651a <_realloc_r+0x33e>
   864ca:	f100 0310 	add.w	r3, r0, #16
   864ce:	f105 0210 	add.w	r2, r5, #16
   864d2:	e6ca      	b.n	8626a <_realloc_r+0x8e>
   864d4:	f850 3c04 	ldr.w	r3, [r0, #-4]
   864d8:	462f      	mov	r7, r5
   864da:	f023 0303 	bic.w	r3, r3, #3
   864de:	441e      	add	r6, r3
   864e0:	e6db      	b.n	8629a <_realloc_r+0xbe>
   864e2:	4629      	mov	r1, r5
   864e4:	4638      	mov	r0, r7
   864e6:	4676      	mov	r6, lr
   864e8:	46d0      	mov	r8, sl
   864ea:	f7ff fe0f 	bl	8610c <memmove>
   864ee:	e6d4      	b.n	8629a <_realloc_r+0xbe>
   864f0:	463a      	mov	r2, r7
   864f2:	e764      	b.n	863be <_realloc_r+0x1e2>
   864f4:	4629      	mov	r1, r5
   864f6:	4638      	mov	r0, r7
   864f8:	461e      	mov	r6, r3
   864fa:	46d0      	mov	r8, sl
   864fc:	f7ff fe06 	bl	8610c <memmove>
   86500:	e6cb      	b.n	8629a <_realloc_r+0xbe>
   86502:	68ab      	ldr	r3, [r5, #8]
   86504:	2a24      	cmp	r2, #36	; 0x24
   86506:	f8ca 3010 	str.w	r3, [sl, #16]
   8650a:	68eb      	ldr	r3, [r5, #12]
   8650c:	f8ca 3014 	str.w	r3, [sl, #20]
   86510:	d01a      	beq.n	86548 <_realloc_r+0x36c>
   86512:	3510      	adds	r5, #16
   86514:	f10a 0318 	add.w	r3, sl, #24
   86518:	e7b0      	b.n	8647c <_realloc_r+0x2a0>
   8651a:	692a      	ldr	r2, [r5, #16]
   8651c:	f100 0318 	add.w	r3, r0, #24
   86520:	6102      	str	r2, [r0, #16]
   86522:	6969      	ldr	r1, [r5, #20]
   86524:	f105 0218 	add.w	r2, r5, #24
   86528:	6141      	str	r1, [r0, #20]
   8652a:	e69e      	b.n	8626a <_realloc_r+0x8e>
   8652c:	200705cc 	.word	0x200705cc
   86530:	68a9      	ldr	r1, [r5, #8]
   86532:	2a24      	cmp	r2, #36	; 0x24
   86534:	f8ca 1010 	str.w	r1, [sl, #16]
   86538:	68e9      	ldr	r1, [r5, #12]
   8653a:	f8ca 1014 	str.w	r1, [sl, #20]
   8653e:	d00f      	beq.n	86560 <_realloc_r+0x384>
   86540:	3510      	adds	r5, #16
   86542:	f10a 0218 	add.w	r2, sl, #24
   86546:	e73a      	b.n	863be <_realloc_r+0x1e2>
   86548:	692a      	ldr	r2, [r5, #16]
   8654a:	f10a 0320 	add.w	r3, sl, #32
   8654e:	f8ca 2018 	str.w	r2, [sl, #24]
   86552:	696a      	ldr	r2, [r5, #20]
   86554:	3518      	adds	r5, #24
   86556:	f8ca 201c 	str.w	r2, [sl, #28]
   8655a:	e78f      	b.n	8647c <_realloc_r+0x2a0>
   8655c:	463a      	mov	r2, r7
   8655e:	e767      	b.n	86430 <_realloc_r+0x254>
   86560:	6929      	ldr	r1, [r5, #16]
   86562:	f10a 0220 	add.w	r2, sl, #32
   86566:	f8ca 1018 	str.w	r1, [sl, #24]
   8656a:	6969      	ldr	r1, [r5, #20]
   8656c:	3518      	adds	r5, #24
   8656e:	f8ca 101c 	str.w	r1, [sl, #28]
   86572:	e724      	b.n	863be <_realloc_r+0x1e2>
   86574:	4629      	mov	r1, r5
   86576:	4638      	mov	r0, r7
   86578:	9301      	str	r3, [sp, #4]
   8657a:	f7ff fdc7 	bl	8610c <memmove>
   8657e:	9b01      	ldr	r3, [sp, #4]
   86580:	e75c      	b.n	8643c <_realloc_r+0x260>
   86582:	68a9      	ldr	r1, [r5, #8]
   86584:	2a24      	cmp	r2, #36	; 0x24
   86586:	f8ca 1010 	str.w	r1, [sl, #16]
   8658a:	68e9      	ldr	r1, [r5, #12]
   8658c:	f8ca 1014 	str.w	r1, [sl, #20]
   86590:	d003      	beq.n	8659a <_realloc_r+0x3be>
   86592:	3510      	adds	r5, #16
   86594:	f10a 0218 	add.w	r2, sl, #24
   86598:	e74a      	b.n	86430 <_realloc_r+0x254>
   8659a:	6929      	ldr	r1, [r5, #16]
   8659c:	f10a 0220 	add.w	r2, sl, #32
   865a0:	f8ca 1018 	str.w	r1, [sl, #24]
   865a4:	6969      	ldr	r1, [r5, #20]
   865a6:	3518      	adds	r5, #24
   865a8:	f8ca 101c 	str.w	r1, [sl, #28]
   865ac:	e740      	b.n	86430 <_realloc_r+0x254>
   865ae:	bf00      	nop

000865b0 <_sbrk_r>:
   865b0:	b538      	push	{r3, r4, r5, lr}
   865b2:	4c07      	ldr	r4, [pc, #28]	; (865d0 <_sbrk_r+0x20>)
   865b4:	2300      	movs	r3, #0
   865b6:	4605      	mov	r5, r0
   865b8:	4608      	mov	r0, r1
   865ba:	6023      	str	r3, [r4, #0]
   865bc:	f7fe fa78 	bl	84ab0 <_sbrk>
   865c0:	1c43      	adds	r3, r0, #1
   865c2:	d000      	beq.n	865c6 <_sbrk_r+0x16>
   865c4:	bd38      	pop	{r3, r4, r5, pc}
   865c6:	6823      	ldr	r3, [r4, #0]
   865c8:	2b00      	cmp	r3, #0
   865ca:	d0fb      	beq.n	865c4 <_sbrk_r+0x14>
   865cc:	602b      	str	r3, [r5, #0]
   865ce:	bd38      	pop	{r3, r4, r5, pc}
   865d0:	20070b50 	.word	0x20070b50

000865d4 <__sread>:
   865d4:	b510      	push	{r4, lr}
   865d6:	460c      	mov	r4, r1
   865d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   865dc:	f000 f936 	bl	8684c <_read_r>
   865e0:	2800      	cmp	r0, #0
   865e2:	db03      	blt.n	865ec <__sread+0x18>
   865e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   865e6:	4403      	add	r3, r0
   865e8:	6523      	str	r3, [r4, #80]	; 0x50
   865ea:	bd10      	pop	{r4, pc}
   865ec:	89a3      	ldrh	r3, [r4, #12]
   865ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   865f2:	81a3      	strh	r3, [r4, #12]
   865f4:	bd10      	pop	{r4, pc}
   865f6:	bf00      	nop

000865f8 <__swrite>:
   865f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   865fc:	460c      	mov	r4, r1
   865fe:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   86602:	461f      	mov	r7, r3
   86604:	05cb      	lsls	r3, r1, #23
   86606:	4616      	mov	r6, r2
   86608:	4605      	mov	r5, r0
   8660a:	d507      	bpl.n	8661c <__swrite+0x24>
   8660c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86610:	2302      	movs	r3, #2
   86612:	2200      	movs	r2, #0
   86614:	f000 f904 	bl	86820 <_lseek_r>
   86618:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8661c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   86620:	81a1      	strh	r1, [r4, #12]
   86622:	463b      	mov	r3, r7
   86624:	4632      	mov	r2, r6
   86626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8662a:	4628      	mov	r0, r5
   8662c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86630:	f000 b814 	b.w	8665c <_write_r>

00086634 <__sseek>:
   86634:	b510      	push	{r4, lr}
   86636:	460c      	mov	r4, r1
   86638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8663c:	f000 f8f0 	bl	86820 <_lseek_r>
   86640:	89a3      	ldrh	r3, [r4, #12]
   86642:	1c42      	adds	r2, r0, #1
   86644:	bf0e      	itee	eq
   86646:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8664a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8664e:	6520      	strne	r0, [r4, #80]	; 0x50
   86650:	81a3      	strh	r3, [r4, #12]
   86652:	bd10      	pop	{r4, pc}

00086654 <__sclose>:
   86654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86658:	f000 b868 	b.w	8672c <_close_r>

0008665c <_write_r>:
   8665c:	b570      	push	{r4, r5, r6, lr}
   8665e:	460d      	mov	r5, r1
   86660:	4c08      	ldr	r4, [pc, #32]	; (86684 <_write_r+0x28>)
   86662:	4611      	mov	r1, r2
   86664:	4606      	mov	r6, r0
   86666:	461a      	mov	r2, r3
   86668:	4628      	mov	r0, r5
   8666a:	2300      	movs	r3, #0
   8666c:	6023      	str	r3, [r4, #0]
   8666e:	f7fc ff8b 	bl	83588 <_write>
   86672:	1c43      	adds	r3, r0, #1
   86674:	d000      	beq.n	86678 <_write_r+0x1c>
   86676:	bd70      	pop	{r4, r5, r6, pc}
   86678:	6823      	ldr	r3, [r4, #0]
   8667a:	2b00      	cmp	r3, #0
   8667c:	d0fb      	beq.n	86676 <_write_r+0x1a>
   8667e:	6033      	str	r3, [r6, #0]
   86680:	bd70      	pop	{r4, r5, r6, pc}
   86682:	bf00      	nop
   86684:	20070b50 	.word	0x20070b50

00086688 <__register_exitproc>:
   86688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8668c:	4c25      	ldr	r4, [pc, #148]	; (86724 <__register_exitproc+0x9c>)
   8668e:	4606      	mov	r6, r0
   86690:	6825      	ldr	r5, [r4, #0]
   86692:	4688      	mov	r8, r1
   86694:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   86698:	4692      	mov	sl, r2
   8669a:	4699      	mov	r9, r3
   8669c:	b3c4      	cbz	r4, 86710 <__register_exitproc+0x88>
   8669e:	6860      	ldr	r0, [r4, #4]
   866a0:	281f      	cmp	r0, #31
   866a2:	dc17      	bgt.n	866d4 <__register_exitproc+0x4c>
   866a4:	1c41      	adds	r1, r0, #1
   866a6:	b176      	cbz	r6, 866c6 <__register_exitproc+0x3e>
   866a8:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   866ac:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   866b0:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   866b4:	2201      	movs	r2, #1
   866b6:	4082      	lsls	r2, r0
   866b8:	4315      	orrs	r5, r2
   866ba:	2e02      	cmp	r6, #2
   866bc:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   866c0:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   866c4:	d01e      	beq.n	86704 <__register_exitproc+0x7c>
   866c6:	1c83      	adds	r3, r0, #2
   866c8:	6061      	str	r1, [r4, #4]
   866ca:	2000      	movs	r0, #0
   866cc:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   866d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   866d4:	4b14      	ldr	r3, [pc, #80]	; (86728 <__register_exitproc+0xa0>)
   866d6:	b303      	cbz	r3, 8671a <__register_exitproc+0x92>
   866d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   866dc:	f7ff f9a6 	bl	85a2c <malloc>
   866e0:	4604      	mov	r4, r0
   866e2:	b1d0      	cbz	r0, 8671a <__register_exitproc+0x92>
   866e4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   866e8:	2700      	movs	r7, #0
   866ea:	e884 0088 	stmia.w	r4, {r3, r7}
   866ee:	4638      	mov	r0, r7
   866f0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   866f4:	2101      	movs	r1, #1
   866f6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   866fa:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   866fe:	2e00      	cmp	r6, #0
   86700:	d0e1      	beq.n	866c6 <__register_exitproc+0x3e>
   86702:	e7d1      	b.n	866a8 <__register_exitproc+0x20>
   86704:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   86708:	431a      	orrs	r2, r3
   8670a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   8670e:	e7da      	b.n	866c6 <__register_exitproc+0x3e>
   86710:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   86714:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   86718:	e7c1      	b.n	8669e <__register_exitproc+0x16>
   8671a:	f04f 30ff 	mov.w	r0, #4294967295
   8671e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86722:	bf00      	nop
   86724:	000869d0 	.word	0x000869d0
   86728:	00085a2d 	.word	0x00085a2d

0008672c <_close_r>:
   8672c:	b538      	push	{r3, r4, r5, lr}
   8672e:	4c07      	ldr	r4, [pc, #28]	; (8674c <_close_r+0x20>)
   86730:	2300      	movs	r3, #0
   86732:	4605      	mov	r5, r0
   86734:	4608      	mov	r0, r1
   86736:	6023      	str	r3, [r4, #0]
   86738:	f7fe f9e6 	bl	84b08 <_close>
   8673c:	1c43      	adds	r3, r0, #1
   8673e:	d000      	beq.n	86742 <_close_r+0x16>
   86740:	bd38      	pop	{r3, r4, r5, pc}
   86742:	6823      	ldr	r3, [r4, #0]
   86744:	2b00      	cmp	r3, #0
   86746:	d0fb      	beq.n	86740 <_close_r+0x14>
   86748:	602b      	str	r3, [r5, #0]
   8674a:	bd38      	pop	{r3, r4, r5, pc}
   8674c:	20070b50 	.word	0x20070b50

00086750 <_fclose_r>:
   86750:	2900      	cmp	r1, #0
   86752:	d03d      	beq.n	867d0 <_fclose_r+0x80>
   86754:	b570      	push	{r4, r5, r6, lr}
   86756:	4605      	mov	r5, r0
   86758:	460c      	mov	r4, r1
   8675a:	b108      	cbz	r0, 86760 <_fclose_r+0x10>
   8675c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8675e:	b37b      	cbz	r3, 867c0 <_fclose_r+0x70>
   86760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86764:	b90b      	cbnz	r3, 8676a <_fclose_r+0x1a>
   86766:	2000      	movs	r0, #0
   86768:	bd70      	pop	{r4, r5, r6, pc}
   8676a:	4621      	mov	r1, r4
   8676c:	4628      	mov	r0, r5
   8676e:	f7fe fcb1 	bl	850d4 <__sflush_r>
   86772:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   86774:	4606      	mov	r6, r0
   86776:	b133      	cbz	r3, 86786 <_fclose_r+0x36>
   86778:	69e1      	ldr	r1, [r4, #28]
   8677a:	4628      	mov	r0, r5
   8677c:	4798      	blx	r3
   8677e:	2800      	cmp	r0, #0
   86780:	bfb8      	it	lt
   86782:	f04f 36ff 	movlt.w	r6, #4294967295
   86786:	89a3      	ldrh	r3, [r4, #12]
   86788:	061b      	lsls	r3, r3, #24
   8678a:	d41c      	bmi.n	867c6 <_fclose_r+0x76>
   8678c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8678e:	b141      	cbz	r1, 867a2 <_fclose_r+0x52>
   86790:	f104 0340 	add.w	r3, r4, #64	; 0x40
   86794:	4299      	cmp	r1, r3
   86796:	d002      	beq.n	8679e <_fclose_r+0x4e>
   86798:	4628      	mov	r0, r5
   8679a:	f7fe fe3f 	bl	8541c <_free_r>
   8679e:	2300      	movs	r3, #0
   867a0:	6323      	str	r3, [r4, #48]	; 0x30
   867a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   867a4:	b121      	cbz	r1, 867b0 <_fclose_r+0x60>
   867a6:	4628      	mov	r0, r5
   867a8:	f7fe fe38 	bl	8541c <_free_r>
   867ac:	2300      	movs	r3, #0
   867ae:	6463      	str	r3, [r4, #68]	; 0x44
   867b0:	f7fe fdce 	bl	85350 <__sfp_lock_acquire>
   867b4:	2300      	movs	r3, #0
   867b6:	81a3      	strh	r3, [r4, #12]
   867b8:	f7fe fdcc 	bl	85354 <__sfp_lock_release>
   867bc:	4630      	mov	r0, r6
   867be:	bd70      	pop	{r4, r5, r6, pc}
   867c0:	f7fe fdc0 	bl	85344 <__sinit>
   867c4:	e7cc      	b.n	86760 <_fclose_r+0x10>
   867c6:	6921      	ldr	r1, [r4, #16]
   867c8:	4628      	mov	r0, r5
   867ca:	f7fe fe27 	bl	8541c <_free_r>
   867ce:	e7dd      	b.n	8678c <_fclose_r+0x3c>
   867d0:	2000      	movs	r0, #0
   867d2:	4770      	bx	lr

000867d4 <_fstat_r>:
   867d4:	b538      	push	{r3, r4, r5, lr}
   867d6:	460b      	mov	r3, r1
   867d8:	4c07      	ldr	r4, [pc, #28]	; (867f8 <_fstat_r+0x24>)
   867da:	4605      	mov	r5, r0
   867dc:	4611      	mov	r1, r2
   867de:	4618      	mov	r0, r3
   867e0:	2300      	movs	r3, #0
   867e2:	6023      	str	r3, [r4, #0]
   867e4:	f7fe f99c 	bl	84b20 <_fstat>
   867e8:	1c43      	adds	r3, r0, #1
   867ea:	d000      	beq.n	867ee <_fstat_r+0x1a>
   867ec:	bd38      	pop	{r3, r4, r5, pc}
   867ee:	6823      	ldr	r3, [r4, #0]
   867f0:	2b00      	cmp	r3, #0
   867f2:	d0fb      	beq.n	867ec <_fstat_r+0x18>
   867f4:	602b      	str	r3, [r5, #0]
   867f6:	bd38      	pop	{r3, r4, r5, pc}
   867f8:	20070b50 	.word	0x20070b50

000867fc <_isatty_r>:
   867fc:	b538      	push	{r3, r4, r5, lr}
   867fe:	4c07      	ldr	r4, [pc, #28]	; (8681c <_isatty_r+0x20>)
   86800:	2300      	movs	r3, #0
   86802:	4605      	mov	r5, r0
   86804:	4608      	mov	r0, r1
   86806:	6023      	str	r3, [r4, #0]
   86808:	f7fe f99a 	bl	84b40 <_isatty>
   8680c:	1c43      	adds	r3, r0, #1
   8680e:	d000      	beq.n	86812 <_isatty_r+0x16>
   86810:	bd38      	pop	{r3, r4, r5, pc}
   86812:	6823      	ldr	r3, [r4, #0]
   86814:	2b00      	cmp	r3, #0
   86816:	d0fb      	beq.n	86810 <_isatty_r+0x14>
   86818:	602b      	str	r3, [r5, #0]
   8681a:	bd38      	pop	{r3, r4, r5, pc}
   8681c:	20070b50 	.word	0x20070b50

00086820 <_lseek_r>:
   86820:	b570      	push	{r4, r5, r6, lr}
   86822:	460d      	mov	r5, r1
   86824:	4c08      	ldr	r4, [pc, #32]	; (86848 <_lseek_r+0x28>)
   86826:	4611      	mov	r1, r2
   86828:	4606      	mov	r6, r0
   8682a:	461a      	mov	r2, r3
   8682c:	4628      	mov	r0, r5
   8682e:	2300      	movs	r3, #0
   86830:	6023      	str	r3, [r4, #0]
   86832:	f7fe f98f 	bl	84b54 <_lseek>
   86836:	1c43      	adds	r3, r0, #1
   86838:	d000      	beq.n	8683c <_lseek_r+0x1c>
   8683a:	bd70      	pop	{r4, r5, r6, pc}
   8683c:	6823      	ldr	r3, [r4, #0]
   8683e:	2b00      	cmp	r3, #0
   86840:	d0fb      	beq.n	8683a <_lseek_r+0x1a>
   86842:	6033      	str	r3, [r6, #0]
   86844:	bd70      	pop	{r4, r5, r6, pc}
   86846:	bf00      	nop
   86848:	20070b50 	.word	0x20070b50

0008684c <_read_r>:
   8684c:	b570      	push	{r4, r5, r6, lr}
   8684e:	460d      	mov	r5, r1
   86850:	4c08      	ldr	r4, [pc, #32]	; (86874 <_read_r+0x28>)
   86852:	4611      	mov	r1, r2
   86854:	4606      	mov	r6, r0
   86856:	461a      	mov	r2, r3
   86858:	4628      	mov	r0, r5
   8685a:	2300      	movs	r3, #0
   8685c:	6023      	str	r3, [r4, #0]
   8685e:	f7f9 fc77 	bl	80150 <_read>
   86862:	1c43      	adds	r3, r0, #1
   86864:	d000      	beq.n	86868 <_read_r+0x1c>
   86866:	bd70      	pop	{r4, r5, r6, pc}
   86868:	6823      	ldr	r3, [r4, #0]
   8686a:	2b00      	cmp	r3, #0
   8686c:	d0fb      	beq.n	86866 <_read_r+0x1a>
   8686e:	6033      	str	r3, [r6, #0]
   86870:	bd70      	pop	{r4, r5, r6, pc}
   86872:	bf00      	nop
   86874:	20070b50 	.word	0x20070b50

00086878 <can_bit_time>:
   86878:	02020308 02094b03 43020303 0303030a     .....K.....C....
   86888:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   86898:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   868a8:	05050510 06114504 47040505 06060512     .....E.....G....
   868b8:	06134304 44040606 06060714 08154604     .C.....D.....F..
   868c8:	47040606 07070716 08174404 46040708     ...G.....D.....F
   868d8:	08080718 08194304 44040808 204e4143     .....C.....DCAN 
   868e8:	74696e69 696c6169 6974617a 28206e6f     initialization (
   868f8:	636e7973 52452029 0d524f52 00000000     sync) ERROR.....
   86908:	204e4143 74696e69 696c6169 6974617a     CAN initializati
   86918:	69206e6f 6f632073 656c706d 2e646574     on is completed.
   86928:	0000000d 43202d2d 45204e41 706d6178     ....-- CAN Examp
   86938:	2d20656c 2d0a0d2d 7241202d 6e697564     le --..-- Arduin
   86948:	7544206f 20582f65 0a0d2d2d 43202d2d     o Due/X --..-- C
   86958:	69706d6f 3a64656c 6e754a20 20303220     ompiled: Jun 20 
   86968:	37313032 3a303220 333a3934 2d2d2033     2017 20:49:33 --
   86978:	0000000d 43202d2d 45204e41 706d6178     ....-- CAN Examp
   86988:	2d20656c 2d0a0d2d 7241202d 6e697564     le --..-- Arduin
   86998:	7544206f 20582f65 0a0d2d2d 43202d2d     o Due/X --..-- C
   869a8:	69706d6f 3a64656c 79614d20 20353220     ompiled: May 25 
   869b8:	37313032 3a363120 313a3534 2d2d2038     2017 16:45:18 --
   869c8:	0000000d 00000043                       ....C...

000869d0 <_global_impure_ptr>:
   869d0:	200701a0 0000000a                       ... ....

000869d8 <_init>:
   869d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   869da:	bf00      	nop
   869dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   869de:	bc08      	pop	{r3}
   869e0:	469e      	mov	lr, r3
   869e2:	4770      	bx	lr

000869e4 <__init_array_start>:
   869e4:	000850b5 	.word	0x000850b5

000869e8 <__frame_dummy_init_array_entry>:
   869e8:	00080119                                ....

000869ec <_fini>:
   869ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   869ee:	bf00      	nop
   869f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   869f2:	bc08      	pop	{r3}
   869f4:	469e      	mov	lr, r3
   869f6:	4770      	bx	lr

000869f8 <__fini_array_start>:
   869f8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
200700a8:	bf00      	nop
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	20070198 	.word	0x20070198
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
20070166:	bf00      	nop
20070168:	370c      	adds	r7, #12
2007016a:	46bd      	mov	sp, r7
2007016c:	bc80      	pop	{r7}
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <group_id_reg_id0>:
2007018c:	ffffffff                                         .

2007018d <group_id_reg_id1>:
2007018d:	ffffffff                                         .

2007018e <group_id_reg_id2>:
2007018e:	ffffffff                                         .

2007018f <group_id_reg_id3>:
2007018f:	ffffffff                                         .

20070190 <group_id_reg_id4>:
20070190:	00ffffff                                         .

20070191 <group_id_reg_id5>:
20070191:	1000ffff                                         .

20070192 <group_id_reg_id6>:
20070192:	091000ff                                         ..

20070194 <gs_ul_spi_clock>:
20070194:	00050910                                ....

20070198 <SystemCoreClock>:
20070198:	003d0900 00000000                       ..=.....

200701a0 <impure_data>:
200701a0:	00000000 2007048c 200704f4 2007055c     ....... ... \.. 
	...
200701d4:	000869cc 00000000 00000000 00000000     .i..............
	...
20070248:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070258:	0005deec 0000000b 00000000 00000000     ................
	...

200705c8 <_impure_ptr>:
200705c8:	200701a0                                ... 

200705cc <__malloc_av_>:
	...
200705d4:	200705cc 200705cc 200705d4 200705d4     ... ... ... ... 
200705e4:	200705dc 200705dc 200705e4 200705e4     ... ... ... ... 
200705f4:	200705ec 200705ec 200705f4 200705f4     ... ... ... ... 
20070604:	200705fc 200705fc 20070604 20070604     ... ... ... ... 
20070614:	2007060c 2007060c 20070614 20070614     ... ... ... ... 
20070624:	2007061c 2007061c 20070624 20070624     ... ... $.. $.. 
20070634:	2007062c 2007062c 20070634 20070634     ,.. ,.. 4.. 4.. 
20070644:	2007063c 2007063c 20070644 20070644     <.. <.. D.. D.. 
20070654:	2007064c 2007064c 20070654 20070654     L.. L.. T.. T.. 
20070664:	2007065c 2007065c 20070664 20070664     \.. \.. d.. d.. 
20070674:	2007066c 2007066c 20070674 20070674     l.. l.. t.. t.. 
20070684:	2007067c 2007067c 20070684 20070684     |.. |.. ... ... 
20070694:	2007068c 2007068c 20070694 20070694     ... ... ... ... 
200706a4:	2007069c 2007069c 200706a4 200706a4     ... ... ... ... 
200706b4:	200706ac 200706ac 200706b4 200706b4     ... ... ... ... 
200706c4:	200706bc 200706bc 200706c4 200706c4     ... ... ... ... 
200706d4:	200706cc 200706cc 200706d4 200706d4     ... ... ... ... 
200706e4:	200706dc 200706dc 200706e4 200706e4     ... ... ... ... 
200706f4:	200706ec 200706ec 200706f4 200706f4     ... ... ... ... 
20070704:	200706fc 200706fc 20070704 20070704     ... ... ... ... 
20070714:	2007070c 2007070c 20070714 20070714     ... ... ... ... 
20070724:	2007071c 2007071c 20070724 20070724     ... ... $.. $.. 
20070734:	2007072c 2007072c 20070734 20070734     ,.. ,.. 4.. 4.. 
20070744:	2007073c 2007073c 20070744 20070744     <.. <.. D.. D.. 
20070754:	2007074c 2007074c 20070754 20070754     L.. L.. T.. T.. 
20070764:	2007075c 2007075c 20070764 20070764     \.. \.. d.. d.. 
20070774:	2007076c 2007076c 20070774 20070774     l.. l.. t.. t.. 
20070784:	2007077c 2007077c 20070784 20070784     |.. |.. ... ... 
20070794:	2007078c 2007078c 20070794 20070794     ... ... ... ... 
200707a4:	2007079c 2007079c 200707a4 200707a4     ... ... ... ... 
200707b4:	200707ac 200707ac 200707b4 200707b4     ... ... ... ... 
200707c4:	200707bc 200707bc 200707c4 200707c4     ... ... ... ... 
200707d4:	200707cc 200707cc 200707d4 200707d4     ... ... ... ... 
200707e4:	200707dc 200707dc 200707e4 200707e4     ... ... ... ... 
200707f4:	200707ec 200707ec 200707f4 200707f4     ... ... ... ... 
20070804:	200707fc 200707fc 20070804 20070804     ... ... ... ... 
20070814:	2007080c 2007080c 20070814 20070814     ... ... ... ... 
20070824:	2007081c 2007081c 20070824 20070824     ... ... $.. $.. 
20070834:	2007082c 2007082c 20070834 20070834     ,.. ,.. 4.. 4.. 
20070844:	2007083c 2007083c 20070844 20070844     <.. <.. D.. D.. 
20070854:	2007084c 2007084c 20070854 20070854     L.. L.. T.. T.. 
20070864:	2007085c 2007085c 20070864 20070864     \.. \.. d.. d.. 
20070874:	2007086c 2007086c 20070874 20070874     l.. l.. t.. t.. 
20070884:	2007087c 2007087c 20070884 20070884     |.. |.. ... ... 
20070894:	2007088c 2007088c 20070894 20070894     ... ... ... ... 
200708a4:	2007089c 2007089c 200708a4 200708a4     ... ... ... ... 
200708b4:	200708ac 200708ac 200708b4 200708b4     ... ... ... ... 
200708c4:	200708bc 200708bc 200708c4 200708c4     ... ... ... ... 
200708d4:	200708cc 200708cc 200708d4 200708d4     ... ... ... ... 
200708e4:	200708dc 200708dc 200708e4 200708e4     ... ... ... ... 
200708f4:	200708ec 200708ec 200708f4 200708f4     ... ... ... ... 
20070904:	200708fc 200708fc 20070904 20070904     ... ... ... ... 
20070914:	2007090c 2007090c 20070914 20070914     ... ... ... ... 
20070924:	2007091c 2007091c 20070924 20070924     ... ... $.. $.. 
20070934:	2007092c 2007092c 20070934 20070934     ,.. ,.. 4.. 4.. 
20070944:	2007093c 2007093c 20070944 20070944     <.. <.. D.. D.. 
20070954:	2007094c 2007094c 20070954 20070954     L.. L.. T.. T.. 
20070964:	2007095c 2007095c 20070964 20070964     \.. \.. d.. d.. 
20070974:	2007096c 2007096c 20070974 20070974     l.. l.. t.. t.. 
20070984:	2007097c 2007097c 20070984 20070984     |.. |.. ... ... 
20070994:	2007098c 2007098c 20070994 20070994     ... ... ... ... 
200709a4:	2007099c 2007099c 200709a4 200709a4     ... ... ... ... 
200709b4:	200709ac 200709ac 200709b4 200709b4     ... ... ... ... 
200709c4:	200709bc 200709bc 200709c4 200709c4     ... ... ... ... 

200709d4 <__malloc_trim_threshold>:
200709d4:	00020000                                ....

200709d8 <__malloc_sbrk_base>:
200709d8:	ffffffff                                ....
